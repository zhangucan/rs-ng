/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Host, Inject, Injector, Input, Optional, } from '@angular/core';
import { COMPONENT_INJECTOR } from './component-injector';
import { ComponentOutletInjectorDirective } from './component-outlet-injector.directive';
import { IoService } from './io.service';
export class DynamicDirective {
    /**
     * @param {?} _injector
     * @param {?} ioService
     * @param {?} _componentInjectorType
     * @param {?} _componentOutletInjector
     */
    constructor(_injector, ioService, _componentInjectorType, _componentOutletInjector) {
        this._injector = _injector;
        this.ioService = ioService;
        this._componentInjectorType = _componentInjectorType;
        this._componentOutletInjector = _componentOutletInjector;
        this._componentInjector = this._injector.get(this._componentInjectorType, null);
        this.ioService.init(this._compInjector);
    }
    /**
     * @private
     * @return {?}
     */
    get _inputs() {
        return this.ndcDynamicInputs || this.ngComponentOutletNdcDynamicInputs;
    }
    /**
     * @private
     * @return {?}
     */
    get _outputs() {
        return this.ndcDynamicOutputs || this.ngComponentOutletNdcDynamicOutputs;
    }
    /**
     * @private
     * @return {?}
     */
    get _compInjector() {
        return this._componentOutletInjector || this._componentInjector;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.ioService.update(this._inputs, this._outputs, this._inputsChanged(changes), this._outputsChanged(changes));
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.ioService.maybeUpdate();
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    _inputsChanged(changes) {
        return ('ngComponentOutletNdcDynamicInputs' in changes ||
            'ndcDynamicInputs' in changes);
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    _outputsChanged(changes) {
        return ('ngComponentOutletNdcDynamicOutputs' in changes ||
            'ndcDynamicOutputs' in changes);
    }
}
DynamicDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ndcDynamicInputs],[ndcDynamicOutputs],[ngComponentOutletNdcDynamicInputs],[ngComponentOutletNdcDynamicOutputs]',
                providers: [IoService],
            },] },
];
/** @nocollapse */
DynamicDirective.ctorParameters = () => [
    { type: Injector },
    { type: IoService },
    { type: undefined, decorators: [{ type: Inject, args: [COMPONENT_INJECTOR,] }] },
    { type: ComponentOutletInjectorDirective, decorators: [{ type: Host }, { type: Optional }] }
];
DynamicDirective.propDecorators = {
    ndcDynamicInputs: [{ type: Input }],
    ngComponentOutletNdcDynamicInputs: [{ type: Input }],
    ndcDynamicOutputs: [{ type: Input }],
    ngComponentOutletNdcDynamicOutputs: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DynamicDirective.prototype.ndcDynamicInputs;
    /** @type {?} */
    DynamicDirective.prototype.ngComponentOutletNdcDynamicInputs;
    /** @type {?} */
    DynamicDirective.prototype.ndcDynamicOutputs;
    /** @type {?} */
    DynamicDirective.prototype.ngComponentOutletNdcDynamicOutputs;
    /**
     * @type {?}
     * @private
     */
    DynamicDirective.prototype._componentInjector;
    /**
     * @type {?}
     * @private
     */
    DynamicDirective.prototype._injector;
    /**
     * @type {?}
     * @private
     */
    DynamicDirective.prototype.ioService;
    /**
     * @type {?}
     * @private
     */
    DynamicDirective.prototype._componentInjectorType;
    /**
     * @type {?}
     * @private
     */
    DynamicDirective.prototype._componentOutletInjector;
}
//# sourceMappingURL=dynamic.directive.js.map