import { ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, Injector, IterableDiffers, OnDestroy, Type, ViewRef } from '@angular/core';
import { ComponentInjector } from './component-injector';
import { ComponentOutletInjectorDirective } from './component-outlet-injector.directive';
import { IoFactoryService } from './io-factory.service';
import { InputsType, OutputsType } from './io.service';
import { WindowRefService } from './window-ref.service';
export interface DynamicDirectiveDef<T> {
    type: Type<T>;
    inputs?: InputsType;
    outputs?: OutputsType;
}
export declare function dynamicDirectiveDef<T>(type: Type<T>, inputs?: InputsType, outputs?: OutputsType): DynamicDirectiveDef<T>;
export interface DirectiveRef<T> {
    instance: T;
    type: Type<T>;
    injector: Injector;
    hostComponent: Type<any>;
    hostView: ViewRef;
    location: ElementRef;
    changeDetectorRef: ChangeDetectorRef;
    onDestroy: (callback: Function) => void;
}
export declare class DynamicDirectivesDirective implements OnDestroy, DoCheck {
    private injector;
    private iterableDiffers;
    private ioFactoryService;
    private windowRef;
    private componentInjectorType;
    private componentOutletInjector;
    ndcDynamicDirectives: DynamicDirectiveDef<any>[];
    ngComponentOutletNdcDynamicDirectives: DynamicDirectiveDef<any>[];
    ndcDynamicDirectivesCreated: EventEmitter<DirectiveRef<any>[]>;
    private componentInjector;
    private lastCompInstance;
    private readonly directives;
    private readonly compInjector;
    private readonly componentRef;
    private readonly compInstance;
    private readonly isCompChanged;
    private readonly hostInjector;
    private readonly hostVcr;
    private readonly reflect;
    private dirRef;
    private dirIo;
    private dirsDiffer;
    constructor(injector: Injector, iterableDiffers: IterableDiffers, ioFactoryService: IoFactoryService, windowRef: WindowRefService, componentInjectorType: ComponentInjector, componentOutletInjector: ComponentOutletInjectorDirective);
    ngDoCheck(): void;
    ngOnDestroy(): void;
    private maybeDestroyDirectives;
    private processDirChanges;
    private updateDirectives;
    private updateDirective;
    private initDirective;
    private destroyAllDirectives;
    private destroyDirective;
    private initDirIO;
    private dirToCompDef;
    private destroyDirRef;
    private createDirective;
    private resolveDep;
    private maybeResolveVCR;
    private callInitHooks;
    private callHook;
}
