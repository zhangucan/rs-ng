import { ComponentFactoryResolver, KeyValueChanges, KeyValueDiffers, OnDestroy } from '@angular/core';
import { ComponentInjector } from './component-injector';
export declare type InputsType = {
    [k: string]: any;
};
export declare type OutputsType = {
    [k: string]: Function;
};
export declare type IOMapInfo = {
    propName: string;
    templateName: string;
};
export declare type IOMappingList = IOMapInfo[];
export declare type KeyValueChangesAny = KeyValueChanges<any, any>;
export interface IoInitOptions {
    trackOutputChanges?: boolean;
}
export declare class IoService implements OnDestroy {
    private _differs;
    private _cfr;
    private checkInit;
    private _lastComponentInst;
    private _lastInputChanges;
    private _inputsDiffer;
    private _compFactory;
    private _outputsShouldDisconnect$;
    private _inputs;
    private _outputs;
    private _compInjector;
    private _outputsChanged;
    private readonly _compRef;
    private readonly _componentInst;
    private readonly _componentInstChanged;
    private readonly _compCdr;
    constructor(_differs: KeyValueDiffers, _cfr: ComponentFactoryResolver);
    ngOnDestroy(): void;
    init(componentInjector: ComponentInjector, options?: IoInitOptions): void;
    update(inputs: InputsType, outputs: OutputsType, inputsChanged: boolean, outputsChanged: boolean): void;
    maybeUpdate(): void;
    private updateIO;
    private updateInputs;
    private bindOutputs;
    private notifyOnInputChanges;
    private _disconnectOutputs;
    private _getInputsChanges;
    private _updateInputChanges;
    private _collectFirstChanges;
    private _collectChangesFromDiffer;
    private _resolveCompFactory;
    private _updateCompFactory;
    private _resolveInputs;
    private _resolveOutputs;
    private _resolveChanges;
    private _remapIO;
    private _findPropByTplInMapping;
    private failInit;
}
