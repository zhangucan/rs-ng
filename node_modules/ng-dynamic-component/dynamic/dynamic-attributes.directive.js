/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Host, Inject, Injector, Input, KeyValueDiffers, Optional, Renderer2, } from '@angular/core';
import { COMPONENT_INJECTOR } from './component-injector';
import { ComponentOutletInjectorDirective } from './component-outlet-injector.directive';
/**
 * @record
 */
export function AttributesMap() { }
/**
 * @record
 */
function AttributeActions() { }
if (false) {
    /** @type {?} */
    AttributeActions.prototype.set;
    /** @type {?} */
    AttributeActions.prototype.remove;
}
export class DynamicAttributesDirective {
    /**
     * @param {?} renderer
     * @param {?} differs
     * @param {?} injector
     * @param {?} componentInjectorType
     * @param {?} componentOutletInjector
     */
    constructor(renderer, differs, injector, componentInjectorType, componentOutletInjector) {
        this.renderer = renderer;
        this.differs = differs;
        this.injector = injector;
        this.componentInjectorType = componentInjectorType;
        this.componentOutletInjector = componentOutletInjector;
        this._attrsDiffer = this.differs.find({}).create();
        this._componentInjector = this.injector.get(this.componentInjectorType, null);
    }
    /**
     * @private
     * @return {?}
     */
    get _attributes() {
        return (this.ndcDynamicAttributes || this.ngComponentOutletNdcDynamicAttributes);
    }
    /**
     * @private
     * @return {?}
     */
    get _compInjector() {
        return this.componentOutletInjector || this._componentInjector;
    }
    /**
     * @private
     * @return {?}
     */
    get _nativeElement() {
        return (this._compInjector.componentRef &&
            this._compInjector.componentRef.location.nativeElement);
    }
    /**
     * @private
     * @return {?}
     */
    get _compType() {
        return (this._compInjector.componentRef &&
            this._compInjector.componentRef.componentType);
    }
    /**
     * @private
     * @return {?}
     */
    get _isCompChanged() {
        if (this._lastCompType !== this._compType) {
            this._lastCompType = this._compType;
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        /** @type {?} */
        const isCompChanged = this._isCompChanged;
        /** @type {?} */
        const changes = this._attrsDiffer.diff(this._attributes);
        if (changes) {
            this._lastAttrActions = this._changesToAttrActions(changes);
        }
        if (changes || (isCompChanged && this._lastAttrActions)) {
            this._updateAttributes(this._lastAttrActions);
        }
    }
    /**
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    setAttribute(name, value, namespace) {
        if (this._nativeElement) {
            this.renderer.setAttribute(this._nativeElement, name, value, namespace);
        }
    }
    /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    removeAttribute(name, namespace) {
        if (this._nativeElement) {
            this.renderer.removeAttribute(this._nativeElement, name, namespace);
        }
    }
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    _updateAttributes(actions) {
        // ? Early exit if no dynamic component
        if (!this._compType) {
            return;
        }
        Object.keys(actions.set).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => this.setAttribute(key, actions.set[key])));
        actions.remove.forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => this.removeAttribute(key)));
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    _changesToAttrActions(changes) {
        /** @type {?} */
        const attrActions = {
            set: {},
            remove: [],
        };
        changes.forEachAddedItem((/**
         * @param {?} r
         * @return {?}
         */
        r => (attrActions.set[r.key] = r.currentValue)));
        changes.forEachChangedItem((/**
         * @param {?} r
         * @return {?}
         */
        r => (attrActions.set[r.key] = r.currentValue)));
        changes.forEachRemovedItem((/**
         * @param {?} r
         * @return {?}
         */
        r => attrActions.remove.push(r.key)));
        return attrActions;
    }
}
DynamicAttributesDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ndcDynamicAttributes],[ngComponentOutletNdcDynamicAttributes]',
                exportAs: 'ndcDynamicAttributes',
            },] },
];
/** @nocollapse */
DynamicAttributesDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: KeyValueDiffers },
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [COMPONENT_INJECTOR,] }] },
    { type: ComponentOutletInjectorDirective, decorators: [{ type: Optional }, { type: Host }] }
];
DynamicAttributesDirective.propDecorators = {
    ndcDynamicAttributes: [{ type: Input }],
    ngComponentOutletNdcDynamicAttributes: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DynamicAttributesDirective.prototype.ndcDynamicAttributes;
    /** @type {?} */
    DynamicAttributesDirective.prototype.ngComponentOutletNdcDynamicAttributes;
    /**
     * @type {?}
     * @private
     */
    DynamicAttributesDirective.prototype._attrsDiffer;
    /**
     * @type {?}
     * @private
     */
    DynamicAttributesDirective.prototype._componentInjector;
    /**
     * @type {?}
     * @private
     */
    DynamicAttributesDirective.prototype._lastCompType;
    /**
     * @type {?}
     * @private
     */
    DynamicAttributesDirective.prototype._lastAttrActions;
    /**
     * @type {?}
     * @private
     */
    DynamicAttributesDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    DynamicAttributesDirective.prototype.differs;
    /**
     * @type {?}
     * @private
     */
    DynamicAttributesDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DynamicAttributesDirective.prototype.componentInjectorType;
    /**
     * @type {?}
     * @private
     */
    DynamicAttributesDirective.prototype.componentOutletInjector;
}
//# sourceMappingURL=dynamic-attributes.directive.js.map