import { InjectionToken, Directive, Host, Inject, Injector, Input, KeyValueDiffers, Optional, Renderer2, SimpleChange, ChangeDetectorRef, ComponentFactoryResolver, Injectable, EventEmitter, IterableDiffers, Output, ViewContainerRef, Component, ANALYZE_FOR_ENTRY_COMPONENTS, NgModule } from '@angular/core';
import { NgComponentOutlet, CommonModule } from '@angular/common';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var COMPONENT_INJECTOR = new InjectionToken('ComponentInjector');
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComponentOutletInjectorDirective = /** @class */ (function () {
    /**
     * @param {?} componentOutlet
     */
    function ComponentOutletInjectorDirective(componentOutlet) {
        this.componentOutlet = componentOutlet;
    }
    Object.defineProperty(ComponentOutletInjectorDirective.prototype, "componentRef", {
        /**
         * @return {?}
         */
        get: function () {
            return (( /** @type {?} */(this.componentOutlet)))._componentRef;
        },
        enumerable: true,
        configurable: true
    });
    return ComponentOutletInjectorDirective;
}());
ComponentOutletInjectorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngComponentOutlet]',
                exportAs: 'ndcComponentOutletInjector',
            },] },
];
/** @nocollapse */
ComponentOutletInjectorDirective.ctorParameters = function () { return [
    { type: NgComponentOutlet, decorators: [{ type: Host }] }
]; };
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicAttributesDirective = /** @class */ (function () {
    /**
     * @param {?} renderer
     * @param {?} differs
     * @param {?} injector
     * @param {?} componentInjectorType
     * @param {?} componentOutletInjector
     */
    function DynamicAttributesDirective(renderer, differs, injector, componentInjectorType, componentOutletInjector) {
        this.renderer = renderer;
        this.differs = differs;
        this.injector = injector;
        this.componentInjectorType = componentInjectorType;
        this.componentOutletInjector = componentOutletInjector;
        this._attrsDiffer = this.differs.find({}).create();
        this._componentInjector = this.injector.get(this.componentInjectorType, null);
    }
    Object.defineProperty(DynamicAttributesDirective.prototype, "_attributes", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return (this.ndcDynamicAttributes || this.ngComponentOutletNdcDynamicAttributes);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicAttributesDirective.prototype, "_compInjector", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return this.componentOutletInjector || this._componentInjector;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicAttributesDirective.prototype, "_nativeElement", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return (this._compInjector.componentRef &&
                this._compInjector.componentRef.location.nativeElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicAttributesDirective.prototype, "_compType", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return (this._compInjector.componentRef &&
                this._compInjector.componentRef.componentType);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicAttributesDirective.prototype, "_isCompChanged", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            if (this._lastCompType !== this._compType) {
                this._lastCompType = this._compType;
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DynamicAttributesDirective.prototype.ngDoCheck = function () {
        /** @type {?} */
        var isCompChanged = this._isCompChanged;
        /** @type {?} */
        var changes = this._attrsDiffer.diff(this._attributes);
        if (changes) {
            this._lastAttrActions = this._changesToAttrActions(changes);
        }
        if (changes || (isCompChanged && this._lastAttrActions)) {
            this._updateAttributes(this._lastAttrActions);
        }
    };
    /**
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    DynamicAttributesDirective.prototype.setAttribute = function (name, value, namespace) {
        if (this._nativeElement) {
            this.renderer.setAttribute(this._nativeElement, name, value, namespace);
        }
    };
    /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    DynamicAttributesDirective.prototype.removeAttribute = function (name, namespace) {
        if (this._nativeElement) {
            this.renderer.removeAttribute(this._nativeElement, name, namespace);
        }
    };
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    DynamicAttributesDirective.prototype._updateAttributes = function (actions) {
        var _this = this;
        // ? Early exit if no dynamic component
        if (!this._compType) {
            return;
        }
        Object.keys(actions.set).forEach(( /**
         * @param {?} key
         * @return {?}
         */function (/**
         * @param {?} key
         * @return {?}
         */ key) { return _this.setAttribute(key, actions.set[key]); }));
        actions.remove.forEach(( /**
         * @param {?} key
         * @return {?}
         */function (/**
         * @param {?} key
         * @return {?}
         */ key) { return _this.removeAttribute(key); }));
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    DynamicAttributesDirective.prototype._changesToAttrActions = function (changes) {
        /** @type {?} */
        var attrActions = {
            set: {},
            remove: [],
        };
        changes.forEachAddedItem(( /**
         * @param {?} r
         * @return {?}
         */function (/**
         * @param {?} r
         * @return {?}
         */ r) { return (attrActions.set[r.key] = r.currentValue); }));
        changes.forEachChangedItem(( /**
         * @param {?} r
         * @return {?}
         */function (/**
         * @param {?} r
         * @return {?}
         */ r) { return (attrActions.set[r.key] = r.currentValue); }));
        changes.forEachRemovedItem(( /**
         * @param {?} r
         * @return {?}
         */function (/**
         * @param {?} r
         * @return {?}
         */ r) { return attrActions.remove.push(r.key); }));
        return attrActions;
    };
    return DynamicAttributesDirective;
}());
DynamicAttributesDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ndcDynamicAttributes],[ngComponentOutletNdcDynamicAttributes]',
                exportAs: 'ndcDynamicAttributes',
            },] },
];
/** @nocollapse */
DynamicAttributesDirective.ctorParameters = function () { return [
    { type: Renderer2 },
    { type: KeyValueDiffers },
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [COMPONENT_INJECTOR,] }] },
    { type: ComponentOutletInjectorDirective, decorators: [{ type: Optional }, { type: Host }] }
]; };
DynamicAttributesDirective.propDecorators = {
    ndcDynamicAttributes: [{ type: Input }],
    ngComponentOutletNdcDynamicAttributes: [{ type: Input }]
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} val
 * @return {?}
 */
function createNewChange(val) {
    return new SimpleChange(undefined, val, true);
}
/**
 * @param {?} record
 * @param {?=} isFirstChange
 * @return {?}
 */
function recordToChange(record, isFirstChange) {
    if (isFirstChange === void 0) { isFirstChange = false; }
    return isFirstChange
        ? createNewChange(record.currentValue)
        : new SimpleChange(record.previousValue, record.currentValue, false);
}
/**
 * @param {?} isFirstChanges
 * @param {?} setter
 * @return {?}
 */
function setChangeFromRecord(isFirstChanges, setter) {
    return ( /**
     * @param {?} record
     * @return {?}
     */function (record) { return setter(record, recordToChange(record, isFirstChanges)); });
}
/**
 * @param {?} isFirstChanges
 * @return {?}
 */
function getChangesRecords(isFirstChanges) {
    return ( /**
     * @param {?} changes
     * @return {?}
     */function (changes) { return setChangeFromRecord(isFirstChanges, ( /**
     * @param {?} record
     * @param {?} change
     * @return {?}
     */function (record, change) { return (changes[record.key] = change); })); });
}
/**
 * @param {?} isFirstChanges
 * @return {?}
 */
function getNewChangesRecords(isFirstChanges) {
    return ( /**
     * @param {?} changes
     * @return {?}
     */function (changes) { return setChangeFromRecord(isFirstChanges, ( /**
     * @param {?} record
     * @param {?} change
     * @return {?}
     */function (record, change) {
        if (!changes[record.key]) {
            changes[record.key] = change;
        }
    })); });
}
/** @type {?} */
var defaultOpts = {
    isFirstChanges: false,
    onlyNewChanges: false,
};
/**
 * @param {?=} opts
 * @return {?}
 */
function changesFromRecord(opts) {
    if (opts === void 0) { opts = defaultOpts; }
    return opts.onlyNewChanges
        ? getNewChangesRecords(opts.isFirstChanges)
        : getChangesRecords(opts.isFirstChanges);
}
/**
 * @return {?}
 */
function noop() { }
/**
 * @param {?} ctor
 * @param {?} reflect
 * @return {?}
 */
function getCtorType(ctor, reflect) {
    return reflect.getMetadata('design:paramtypes', ctor);
}
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var recordToChanges = changesFromRecord({ isFirstChanges: true });
/** @type {?} */
var recordToNewChanges = changesFromRecord({ onlyNewChanges: true });
var IoService = /** @class */ (function () {
    /**
     * @param {?} _differs
     * @param {?} _cfr
     */
    function IoService(_differs, _cfr) {
        this._differs = _differs;
        this._cfr = _cfr;
        this.checkInit = this.failInit;
        this._lastComponentInst = null;
        this._inputsDiffer = this._differs.find({}).create();
        this._compFactory = null;
        this._outputsShouldDisconnect$ = new Subject();
        this._outputsChanged = ( /**
         * @return {?}
         */function () { return false; });
    }
    Object.defineProperty(IoService.prototype, "_compRef", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return this._compInjector.componentRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IoService.prototype, "_componentInst", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return this._compRef ? this._compRef.instance : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IoService.prototype, "_componentInstChanged", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            if (this._lastComponentInst !== this._componentInst) {
                this._lastComponentInst = this._componentInst;
                return true;
            }
            else {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IoService.prototype, "_compCdr", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return this._compRef ? this._compRef.injector.get(ChangeDetectorRef) : null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IoService.prototype.ngOnDestroy = function () {
        this._disconnectOutputs();
    };
    /**
     * @param {?} componentInjector
     * @param {?=} options
     * @return {?}
     */
    IoService.prototype.init = function (componentInjector, options) {
        if (options === void 0) { options = {}; }
        this.checkInit = componentInjector ? noop : this.failInit;
        this._compInjector = componentInjector;
        if (options.trackOutputChanges) {
            /** @type {?} */
            var outputsDiffer_1 = this._differs.find({}).create();
            this._outputsChanged = ( /**
             * @param {?} outputs
             * @return {?}
             */function (/**
             * @param {?} outputs
             * @return {?}
             */ outputs) { return !!outputsDiffer_1.diff(outputs); });
        }
    };
    /**
     * @param {?} inputs
     * @param {?} outputs
     * @param {?} inputsChanged
     * @param {?} outputsChanged
     * @return {?}
     */
    IoService.prototype.update = function (inputs, outputs, inputsChanged, outputsChanged) {
        this.checkInit();
        this.updateIO(inputs, outputs);
        /** @type {?} */
        var compChanged = this._componentInstChanged;
        if (compChanged || inputsChanged) {
            /** @type {?} */
            var inputsChanges = this._getInputsChanges(this._inputs);
            if (inputsChanges) {
                this._updateInputChanges(inputsChanges);
            }
            this.updateInputs(compChanged || !this._lastInputChanges);
        }
        if (compChanged || outputsChanged) {
            this.bindOutputs();
        }
    };
    /**
     * @return {?}
     */
    IoService.prototype.maybeUpdate = function () {
        this.checkInit();
        if (this._componentInstChanged) {
            this.updateInputs(true);
            this.bindOutputs();
            return;
        }
        if (this._outputsChanged(this._outputs)) {
            this.bindOutputs();
        }
        if (!this._inputs) {
            return;
        }
        /** @type {?} */
        var inputsChanges = this._getInputsChanges(this._inputs);
        if (inputsChanges) {
            /** @type {?} */
            var isNotFirstChange = !!this._lastInputChanges;
            this._updateInputChanges(inputsChanges);
            if (isNotFirstChange) {
                this.updateInputs();
            }
        }
    };
    /**
     * @private
     * @param {?} inputs
     * @param {?} outputs
     * @return {?}
     */
    IoService.prototype.updateIO = function (inputs, outputs) {
        this._inputs = inputs;
        this._outputs = outputs;
    };
    /**
     * @private
     * @param {?=} isFirstChange
     * @return {?}
     */
    IoService.prototype.updateInputs = function (isFirstChange) {
        if (isFirstChange === void 0) { isFirstChange = false; }
        if (isFirstChange) {
            this._updateCompFactory();
        }
        /** @type {?} */
        var compInst = this._componentInst;
        /** @type {?} */
        var inputs = this._inputs;
        if (!inputs || !compInst) {
            return;
        }
        inputs = this._resolveInputs(inputs);
        Object.keys(inputs).forEach(( /**
         * @param {?} p
         * @return {?}
         */function (/**
         * @param {?} p
         * @return {?}
         */ p) { return (compInst[p] = inputs[p]); }));
        // Mark component for check to re-render with new inputs
        if (this._compCdr) {
            this._compCdr.markForCheck();
        }
        this.notifyOnInputChanges(this._lastInputChanges, isFirstChange);
    };
    /**
     * @private
     * @return {?}
     */
    IoService.prototype.bindOutputs = function () {
        var _this = this;
        this._disconnectOutputs();
        /** @type {?} */
        var compInst = this._componentInst;
        /** @type {?} */
        var outputs = this._outputs;
        if (!outputs || !compInst) {
            return;
        }
        outputs = this._resolveOutputs(outputs);
        Object.keys(outputs)
            .filter(( /**
     * @param {?} p
     * @return {?}
     */function (/**
     * @param {?} p
     * @return {?}
     */ p) { return compInst[p]; }))
            .forEach(( /**
     * @param {?} p
     * @return {?}
     */function (/**
     * @param {?} p
     * @return {?}
     */ p) { return compInst[p]
            .pipe(takeUntil(_this._outputsShouldDisconnect$))
            .subscribe(outputs[p]); }));
    };
    /**
     * @private
     * @param {?=} changes
     * @param {?=} forceFirstChanges
     * @return {?}
     */
    IoService.prototype.notifyOnInputChanges = function (changes, forceFirstChanges) {
        if (changes === void 0) { changes = {}; }
        // Exit early if component not interested to receive changes
        if (!this._componentInst.ngOnChanges) {
            return;
        }
        if (forceFirstChanges) {
            changes = this._collectFirstChanges();
        }
        this._componentInst.ngOnChanges(changes);
    };
    /**
     * @private
     * @return {?}
     */
    IoService.prototype._disconnectOutputs = function () {
        this._outputsShouldDisconnect$.next();
    };
    /**
     * @private
     * @param {?} inputs
     * @return {?}
     */
    IoService.prototype._getInputsChanges = function (inputs) {
        return this._inputsDiffer.diff(this._inputs);
    };
    /**
     * @private
     * @param {?} differ
     * @return {?}
     */
    IoService.prototype._updateInputChanges = function (differ) {
        this._lastInputChanges = this._collectChangesFromDiffer(differ);
    };
    /**
     * @private
     * @return {?}
     */
    IoService.prototype._collectFirstChanges = function () {
        /** @type {?} */
        var changes = ( /** @type {?} */({}));
        /** @type {?} */
        var inputs = this._inputs;
        Object.keys(inputs).forEach(( /**
         * @param {?} prop
         * @return {?}
         */function (/**
         * @param {?} prop
         * @return {?}
         */ prop) { return (changes[prop] = createNewChange(inputs[prop])); }));
        return this._resolveChanges(changes);
    };
    /**
     * @private
     * @param {?} differ
     * @return {?}
     */
    IoService.prototype._collectChangesFromDiffer = function (differ) {
        /** @type {?} */
        var changes = ( /** @type {?} */({}));
        differ.forEachAddedItem(recordToChanges(changes));
        differ.forEachItem(recordToNewChanges(changes));
        return this._resolveChanges(changes);
    };
    /**
     * @private
     * @return {?}
     */
    IoService.prototype._resolveCompFactory = function () {
        try {
            try {
                return this._cfr.resolveComponentFactory(this._compRef.componentType);
            }
            catch (e) {
                // Fallback if componentType does not exist (happens on NgComponentOutlet)
                return this._cfr.resolveComponentFactory(this._compRef.instance.constructor);
            }
        }
        catch (e) {
            // Factory not available - bailout
            return null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    IoService.prototype._updateCompFactory = function () {
        this._compFactory = this._resolveCompFactory();
    };
    /**
     * @private
     * @param {?} inputs
     * @return {?}
     */
    IoService.prototype._resolveInputs = function (inputs) {
        if (!this._compFactory) {
            return inputs;
        }
        return this._remapIO(inputs, this._compFactory.inputs);
    };
    /**
     * @private
     * @param {?} outputs
     * @return {?}
     */
    IoService.prototype._resolveOutputs = function (outputs) {
        if (!this._compFactory) {
            return outputs;
        }
        return this._remapIO(outputs, this._compFactory.outputs);
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    IoService.prototype._resolveChanges = function (changes) {
        if (!this._compFactory) {
            return changes;
        }
        return this._remapIO(changes, this._compFactory.inputs);
    };
    /**
     * @private
     * @param {?} io
     * @param {?} mapping
     * @return {?}
     */
    IoService.prototype._remapIO = function (io, mapping) {
        var _this = this;
        /** @type {?} */
        var newIO = {};
        Object.keys(io).forEach(( /**
         * @param {?} key
         * @return {?}
         */function (/**
         * @param {?} key
         * @return {?}
         */ key) {
            /** @type {?} */
            var newKey = _this._findPropByTplInMapping(key, mapping) || key;
            newIO[newKey] = io[key];
        }));
        return newIO;
    };
    /**
     * @private
     * @param {?} tplName
     * @param {?} mapping
     * @return {?}
     */
    IoService.prototype._findPropByTplInMapping = function (tplName, mapping) {
        for (var _i = 0, mapping_1 = mapping; _i < mapping_1.length; _i++) {
            var map = mapping_1[_i];
            if (map.templateName === tplName) {
                return map.propName;
            }
        }
        return null;
    };
    /**
     * @private
     * @return {?}
     */
    IoService.prototype.failInit = function () {
        throw Error('IoService: ComponentInjector was not set! Please call init() method!');
    };
    return IoService;
}());
IoService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
IoService.ctorParameters = function () { return [
    { type: KeyValueDiffers },
    { type: ComponentFactoryResolver }
]; };
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IoFactoryService = /** @class */ (function () {
    /**
     * @param {?} differs
     * @param {?} cfr
     */
    function IoFactoryService(differs, cfr) {
        this.differs = differs;
        this.cfr = cfr;
    }
    /**
     * @return {?}
     */
    IoFactoryService.prototype.create = function () {
        return new IoService(this.differs, this.cfr);
    };
    return IoFactoryService;
}());
IoFactoryService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
IoFactoryService.ctorParameters = function () { return [
    { type: KeyValueDiffers },
    { type: ComponentFactoryResolver }
]; };
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var WINDOW_REF = new InjectionToken('WindowRef');
var WindowRefService = /** @class */ (function () {
    /**
     * @param {?} injector
     */
    function WindowRefService(injector) {
        this.injector = injector;
        this.nativeWindow = this.injector.get(WINDOW_REF, null);
    }
    return WindowRefService;
}());
WindowRefService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
WindowRefService.ctorParameters = function () { return [
    { type: Injector }
]; };
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 * @param {?} type
 * @param {?=} inputs
 * @param {?=} outputs
 * @return {?}
 */
function dynamicDirectiveDef(type, inputs, outputs) {
    return { type: type, inputs: inputs, outputs: outputs };
}
var DynamicDirectivesDirective = /** @class */ (function () {
    /**
     * @param {?} injector
     * @param {?} iterableDiffers
     * @param {?} ioFactoryService
     * @param {?} windowRef
     * @param {?} componentInjectorType
     * @param {?} componentOutletInjector
     */
    function DynamicDirectivesDirective(injector, iterableDiffers, ioFactoryService, windowRef, componentInjectorType, componentOutletInjector) {
        this.injector = injector;
        this.iterableDiffers = iterableDiffers;
        this.ioFactoryService = ioFactoryService;
        this.windowRef = windowRef;
        this.componentInjectorType = componentInjectorType;
        this.componentOutletInjector = componentOutletInjector;
        this.ndcDynamicDirectivesCreated = new EventEmitter();
        this.componentInjector = this.injector.get(this.componentInjectorType, null);
        this.dirRef = new Map();
        this.dirIo = new Map();
        this.dirsDiffer = this.iterableDiffers
            .find([])
            .create(( /**
     * @param {?} _
     * @param {?} def
     * @return {?}
     */function (_, def) { return def.type; }));
    }
    Object.defineProperty(DynamicDirectivesDirective.prototype, "directives", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return (this.ndcDynamicDirectives || this.ngComponentOutletNdcDynamicDirectives);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicDirectivesDirective.prototype, "compInjector", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return this.componentOutletInjector || this.componentInjector;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicDirectivesDirective.prototype, "componentRef", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return this.compInjector.componentRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicDirectivesDirective.prototype, "compInstance", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return this.componentRef && this.componentRef.instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicDirectivesDirective.prototype, "isCompChanged", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            if (this.lastCompInstance !== this.compInstance) {
                this.lastCompInstance = this.compInstance;
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicDirectivesDirective.prototype, "hostInjector", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return this.componentRef.injector;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicDirectivesDirective.prototype, "hostVcr", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return this.componentRef['_viewRef']['_viewContainerRef'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicDirectivesDirective.prototype, "reflect", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return (( /** @type {?} */(this.windowRef.nativeWindow))).Reflect;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.ngDoCheck = function () {
        if (this.maybeDestroyDirectives()) {
            return;
        }
        /** @type {?} */
        var dirsChanges = this.dirsDiffer.diff(this.directives);
        if (!dirsChanges) {
            return this.updateDirectives();
        }
        this.processDirChanges(dirsChanges);
    };
    /**
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.ngOnDestroy = function () {
        this.destroyAllDirectives();
    };
    /**
     * @private
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.maybeDestroyDirectives = function () {
        if (this.isCompChanged || !this.componentRef) {
            this.dirsDiffer.diff([]);
            this.destroyAllDirectives();
        }
        return !this.componentRef;
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.processDirChanges = function (changes) {
        var _this = this;
        changes.forEachRemovedItem(( /**
         * @param {?} __0
         * @return {?}
         */function (_a) {
            var item = _a.item;
            return _this.destroyDirective(item);
        }));
        /** @type {?} */
        var createdDirs = [];
        changes.forEachAddedItem(( /**
         * @param {?} __0
         * @return {?}
         */function (_a) {
            var item = _a.item;
            return createdDirs.push(_this.initDirective(item));
        }));
        if (createdDirs.length) {
            this.ndcDynamicDirectivesCreated.emit(createdDirs.filter(Boolean));
        }
    };
    /**
     * @private
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.updateDirectives = function () {
        var _this = this;
        this.directives.forEach(( /**
         * @param {?} dir
         * @return {?}
         */function (/**
         * @param {?} dir
         * @return {?}
         */ dir) { return _this.updateDirective(dir); }));
    };
    /**
     * @private
     * @param {?} dirDef
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.updateDirective = function (dirDef) {
        /** @type {?} */
        var io = this.dirIo.get(dirDef.type);
        io.update(dirDef.inputs, dirDef.outputs, false, false);
        io.maybeUpdate();
    };
    /**
     * @private
     * @param {?} dirDef
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.initDirective = function (dirDef) {
        if (this.dirRef.has(dirDef.type)) {
            return;
        }
        /** @type {?} */
        var instance = this.createDirective(dirDef.type);
        /** @type {?} */
        var dir = {
            instance: instance,
            type: dirDef.type,
            injector: this.hostInjector,
            hostComponent: this.componentRef.instance,
            hostView: this.componentRef.hostView,
            location: this.componentRef.location,
            changeDetectorRef: this.componentRef.changeDetectorRef,
            onDestroy: this.componentRef.onDestroy,
        };
        this.initDirIO(dir, dirDef.inputs, dirDef.outputs);
        this.callInitHooks(instance);
        this.dirRef.set(dir.type, dir);
        return dir;
    };
    /**
     * @private
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.destroyAllDirectives = function () {
        var _this = this;
        this.dirRef.forEach(( /**
         * @param {?} dir
         * @return {?}
         */function (/**
         * @param {?} dir
         * @return {?}
         */ dir) { return _this.destroyDirRef(dir); }));
        this.dirRef.clear();
        this.dirIo.clear();
    };
    /**
     * @private
     * @param {?} dirDef
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.destroyDirective = function (dirDef) {
        this.destroyDirRef(this.dirRef.get(dirDef.type));
        this.dirRef.delete(dirDef.type);
        this.dirIo.delete(dirDef.type);
    };
    /**
     * @private
     * @param {?} dir
     * @param {?=} inputs
     * @param {?=} outputs
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.initDirIO = function (dir, inputs, outputs) {
        /** @type {?} */
        var io = this.ioFactoryService.create();
        io.init({ componentRef: this.dirToCompDef(dir) }, { trackOutputChanges: true });
        io.update(inputs, outputs, !!inputs, !!outputs);
        this.dirIo.set(dir.type, io);
    };
    /**
     * @private
     * @param {?} dir
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.dirToCompDef = function (dir) {
        return Object.assign({}, this.componentRef, { destroy: this.componentRef.destroy, onDestroy: this.componentRef.onDestroy, injector: this.componentRef.injector, instance: dir.instance, componentType: dir.type });
    };
    /**
     * @private
     * @param {?} dir
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.destroyDirRef = function (dir) {
        /** @type {?} */
        var io = this.dirIo.get(dir.type);
        io.ngOnDestroy();
        if ('ngOnDestroy' in dir.instance) {
            dir.instance.ngOnDestroy();
        }
    };
    /**
     * @private
     * @template T
     * @param {?} dirType
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.createDirective = function (dirType) {
        var _this = this;
        /** @type {?} */
        var ctorParams = getCtorType(dirType, this.reflect);
        /** @type {?} */
        var resolvedParams = ctorParams.map(( /**
         * @param {?} p
         * @return {?}
         */function (/**
         * @param {?} p
         * @return {?}
         */ p) { return _this.resolveDep(p); }));
        return new (dirType.bind.apply(dirType, [void 0].concat(resolvedParams)))();
    };
    /**
     * @private
     * @param {?} dep
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.resolveDep = function (dep) {
        return this.maybeResolveVCR(dep) || this.hostInjector.get(dep);
    };
    /**
     * @private
     * @param {?} dep
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.maybeResolveVCR = function (dep) {
        if (dep === ViewContainerRef) {
            return this.hostVcr;
        }
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.callInitHooks = function (obj) {
        this.callHook(obj, 'ngOnInit');
        this.callHook(obj, 'ngDoCheck');
        this.callHook(obj, 'ngAfterContentInit');
        this.callHook(obj, 'ngAfterContentChecked');
        this.callHook(obj, 'ngAfterViewInit');
        this.callHook(obj, 'ngAfterViewChecked');
    };
    /**
     * @private
     * @param {?} obj
     * @param {?} hook
     * @param {?=} args
     * @return {?}
     */
    DynamicDirectivesDirective.prototype.callHook = function (obj, hook, args) {
        if (args === void 0) { args = []; }
        if (obj[hook]) {
            obj[hook].apply(obj, args);
        }
    };
    return DynamicDirectivesDirective;
}());
DynamicDirectivesDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ndcDynamicDirectives],[ngComponentOutletNdcDynamicDirectives]',
            },] },
];
/** @nocollapse */
DynamicDirectivesDirective.ctorParameters = function () { return [
    { type: Injector },
    { type: IterableDiffers },
    { type: IoFactoryService },
    { type: WindowRefService },
    { type: undefined, decorators: [{ type: Inject, args: [COMPONENT_INJECTOR,] }] },
    { type: ComponentOutletInjectorDirective, decorators: [{ type: Host }, { type: Optional }] }
]; };
DynamicDirectivesDirective.propDecorators = {
    ndcDynamicDirectives: [{ type: Input }],
    ngComponentOutletNdcDynamicDirectives: [{ type: Input }],
    ndcDynamicDirectivesCreated: [{ type: Output }]
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicComponent = /** @class */ (function () {
    /**
     * @param {?} _vcr
     * @param {?} _cfr
     */
    function DynamicComponent(_vcr, _cfr) {
        this._vcr = _vcr;
        this._cfr = _cfr;
        this.ndcDynamicCreated = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DynamicComponent.prototype.ngOnChanges = function (changes) {
        if (changes['ndcDynamicComponent']) {
            this.createDynamicComponent();
        }
    };
    /**
     * @return {?}
     */
    DynamicComponent.prototype.createDynamicComponent = function () {
        this._vcr.clear();
        this.componentRef = null;
        if (this.ndcDynamicComponent) {
            this.componentRef = this._vcr.createComponent(this._cfr.resolveComponentFactory(this.ndcDynamicComponent), 0, this._resolveInjector(), this.ndcDynamicContent);
            this.ndcDynamicCreated.emit(this.componentRef);
        }
    };
    /**
     * @private
     * @return {?}
     */
    DynamicComponent.prototype._resolveInjector = function () {
        /** @type {?} */
        var injector = this.ndcDynamicInjector || this._vcr.parentInjector;
        if (this.ndcDynamicProviders) {
            injector = Injector.create({
                providers: this.ndcDynamicProviders,
                parent: injector,
            });
        }
        return injector;
    };
    return DynamicComponent;
}());
DynamicComponent.decorators = [
    { type: Component, args: [{
                selector: 'ndc-dynamic',
                template: '',
            },] },
];
/** @nocollapse */
DynamicComponent.ctorParameters = function () { return [
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver }
]; };
DynamicComponent.propDecorators = {
    ndcDynamicComponent: [{ type: Input }],
    ndcDynamicInjector: [{ type: Input }],
    ndcDynamicProviders: [{ type: Input }],
    ndcDynamicContent: [{ type: Input }],
    ndcDynamicCreated: [{ type: Output }]
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicDirective = /** @class */ (function () {
    /**
     * @param {?} _injector
     * @param {?} ioService
     * @param {?} _componentInjectorType
     * @param {?} _componentOutletInjector
     */
    function DynamicDirective(_injector, ioService, _componentInjectorType, _componentOutletInjector) {
        this._injector = _injector;
        this.ioService = ioService;
        this._componentInjectorType = _componentInjectorType;
        this._componentOutletInjector = _componentOutletInjector;
        this._componentInjector = this._injector.get(this._componentInjectorType, null);
        this.ioService.init(this._compInjector);
    }
    Object.defineProperty(DynamicDirective.prototype, "_inputs", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return this.ndcDynamicInputs || this.ngComponentOutletNdcDynamicInputs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicDirective.prototype, "_outputs", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return this.ndcDynamicOutputs || this.ngComponentOutletNdcDynamicOutputs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicDirective.prototype, "_compInjector", {
        /**
         * @private
         * @return {?}
         */
        get: function () {
            return this._componentOutletInjector || this._componentInjector;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    DynamicDirective.prototype.ngOnChanges = function (changes) {
        this.ioService.update(this._inputs, this._outputs, this._inputsChanged(changes), this._outputsChanged(changes));
    };
    /**
     * @return {?}
     */
    DynamicDirective.prototype.ngDoCheck = function () {
        this.ioService.maybeUpdate();
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    DynamicDirective.prototype._inputsChanged = function (changes) {
        return ('ngComponentOutletNdcDynamicInputs' in changes ||
            'ndcDynamicInputs' in changes);
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    DynamicDirective.prototype._outputsChanged = function (changes) {
        return ('ngComponentOutletNdcDynamicOutputs' in changes ||
            'ndcDynamicOutputs' in changes);
    };
    return DynamicDirective;
}());
DynamicDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ndcDynamicInputs],[ndcDynamicOutputs],[ngComponentOutletNdcDynamicInputs],[ngComponentOutletNdcDynamicOutputs]',
                providers: [IoService],
            },] },
];
/** @nocollapse */
DynamicDirective.ctorParameters = function () { return [
    { type: Injector },
    { type: IoService },
    { type: undefined, decorators: [{ type: Inject, args: [COMPONENT_INJECTOR,] }] },
    { type: ComponentOutletInjectorDirective, decorators: [{ type: Host }, { type: Optional }] }
]; };
DynamicDirective.propDecorators = {
    ndcDynamicInputs: [{ type: Input }],
    ngComponentOutletNdcDynamicInputs: [{ type: Input }],
    ndcDynamicOutputs: [{ type: Input }],
    ngComponentOutletNdcDynamicOutputs: [{ type: Input }]
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function windowRefFactory() {
    return window;
}
var DynamicModule = /** @class */ (function () {
    function DynamicModule() {
    }
    /**
     * @param {?} components
     * @param {?=} componentInjector
     * @return {?}
     */
    DynamicModule.withComponents = function (components, componentInjector) {
        if (componentInjector === void 0) { componentInjector = DynamicComponent; }
        return {
            ngModule: DynamicModule,
            providers: [
                {
                    provide: ANALYZE_FOR_ENTRY_COMPONENTS,
                    useValue: components,
                    multi: true,
                },
                { provide: COMPONENT_INJECTOR, useValue: componentInjector },
                IoFactoryService,
                { provide: WINDOW_REF, useFactory: windowRefFactory },
                WindowRefService,
            ],
        };
    };
    return DynamicModule;
}());
DynamicModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    DynamicComponent,
                    DynamicDirective,
                    ComponentOutletInjectorDirective,
                    DynamicAttributesDirective,
                    DynamicDirectivesDirective,
                ],
                exports: [
                    DynamicComponent,
                    DynamicDirective,
                    ComponentOutletInjectorDirective,
                    DynamicAttributesDirective,
                    DynamicDirectivesDirective,
                ],
            },] },
];
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export { windowRefFactory, DynamicModule, DynamicDirective, DynamicComponent, DynamicAttributesDirective, dynamicDirectiveDef, DynamicDirectivesDirective, COMPONENT_INJECTOR as ɵa, ComponentOutletInjectorDirective as ɵc, IoFactoryService as ɵd, IoService as ɵb, WINDOW_REF as ɵe, WindowRefService as ɵf };
