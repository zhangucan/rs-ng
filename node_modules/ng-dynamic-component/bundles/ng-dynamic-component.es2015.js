import { InjectionToken, Directive, Host, Inject, Injector, Input, KeyValueDiffers, Optional, Renderer2, SimpleChange, ChangeDetectorRef, ComponentFactoryResolver, Injectable, EventEmitter, IterableDiffers, Output, ViewContainerRef, Component, ANALYZE_FOR_ENTRY_COMPONENTS, NgModule } from '@angular/core';
import { NgComponentOutlet, CommonModule } from '@angular/common';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const COMPONENT_INJECTOR = new InjectionToken('ComponentInjector');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComponentOutletInjectorDirective {
    /**
     * @param {?} componentOutlet
     */
    constructor(componentOutlet) {
        this.componentOutlet = componentOutlet;
    }
    /**
     * @return {?}
     */
    get componentRef() {
        return ((/** @type {?} */ (this.componentOutlet)))._componentRef;
    }
}
ComponentOutletInjectorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngComponentOutlet]',
                exportAs: 'ndcComponentOutletInjector',
            },] },
];
/** @nocollapse */
ComponentOutletInjectorDirective.ctorParameters = () => [
    { type: NgComponentOutlet, decorators: [{ type: Host }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DynamicAttributesDirective {
    /**
     * @param {?} renderer
     * @param {?} differs
     * @param {?} injector
     * @param {?} componentInjectorType
     * @param {?} componentOutletInjector
     */
    constructor(renderer, differs, injector, componentInjectorType, componentOutletInjector) {
        this.renderer = renderer;
        this.differs = differs;
        this.injector = injector;
        this.componentInjectorType = componentInjectorType;
        this.componentOutletInjector = componentOutletInjector;
        this._attrsDiffer = this.differs.find({}).create();
        this._componentInjector = this.injector.get(this.componentInjectorType, null);
    }
    /**
     * @private
     * @return {?}
     */
    get _attributes() {
        return (this.ndcDynamicAttributes || this.ngComponentOutletNdcDynamicAttributes);
    }
    /**
     * @private
     * @return {?}
     */
    get _compInjector() {
        return this.componentOutletInjector || this._componentInjector;
    }
    /**
     * @private
     * @return {?}
     */
    get _nativeElement() {
        return (this._compInjector.componentRef &&
            this._compInjector.componentRef.location.nativeElement);
    }
    /**
     * @private
     * @return {?}
     */
    get _compType() {
        return (this._compInjector.componentRef &&
            this._compInjector.componentRef.componentType);
    }
    /**
     * @private
     * @return {?}
     */
    get _isCompChanged() {
        if (this._lastCompType !== this._compType) {
            this._lastCompType = this._compType;
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        /** @type {?} */
        const isCompChanged = this._isCompChanged;
        /** @type {?} */
        const changes = this._attrsDiffer.diff(this._attributes);
        if (changes) {
            this._lastAttrActions = this._changesToAttrActions(changes);
        }
        if (changes || (isCompChanged && this._lastAttrActions)) {
            this._updateAttributes(this._lastAttrActions);
        }
    }
    /**
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    setAttribute(name, value, namespace) {
        if (this._nativeElement) {
            this.renderer.setAttribute(this._nativeElement, name, value, namespace);
        }
    }
    /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    removeAttribute(name, namespace) {
        if (this._nativeElement) {
            this.renderer.removeAttribute(this._nativeElement, name, namespace);
        }
    }
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    _updateAttributes(actions) {
        // ? Early exit if no dynamic component
        if (!this._compType) {
            return;
        }
        Object.keys(actions.set).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => this.setAttribute(key, actions.set[key])));
        actions.remove.forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => this.removeAttribute(key)));
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    _changesToAttrActions(changes) {
        /** @type {?} */
        const attrActions = {
            set: {},
            remove: [],
        };
        changes.forEachAddedItem((/**
         * @param {?} r
         * @return {?}
         */
        r => (attrActions.set[r.key] = r.currentValue)));
        changes.forEachChangedItem((/**
         * @param {?} r
         * @return {?}
         */
        r => (attrActions.set[r.key] = r.currentValue)));
        changes.forEachRemovedItem((/**
         * @param {?} r
         * @return {?}
         */
        r => attrActions.remove.push(r.key)));
        return attrActions;
    }
}
DynamicAttributesDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ndcDynamicAttributes],[ngComponentOutletNdcDynamicAttributes]',
                exportAs: 'ndcDynamicAttributes',
            },] },
];
/** @nocollapse */
DynamicAttributesDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: KeyValueDiffers },
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [COMPONENT_INJECTOR,] }] },
    { type: ComponentOutletInjectorDirective, decorators: [{ type: Optional }, { type: Host }] }
];
DynamicAttributesDirective.propDecorators = {
    ndcDynamicAttributes: [{ type: Input }],
    ngComponentOutletNdcDynamicAttributes: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} val
 * @return {?}
 */
function createNewChange(val) {
    return new SimpleChange(undefined, val, true);
}
/**
 * @param {?} record
 * @param {?=} isFirstChange
 * @return {?}
 */
function recordToChange(record, isFirstChange = false) {
    return isFirstChange
        ? createNewChange(record.currentValue)
        : new SimpleChange(record.previousValue, record.currentValue, false);
}
/**
 * @param {?} isFirstChanges
 * @param {?} setter
 * @return {?}
 */
function setChangeFromRecord(isFirstChanges, setter) {
    return (/**
     * @param {?} record
     * @return {?}
     */
    (record) => setter(record, recordToChange(record, isFirstChanges)));
}
/**
 * @param {?} isFirstChanges
 * @return {?}
 */
function getChangesRecords(isFirstChanges) {
    return (/**
     * @param {?} changes
     * @return {?}
     */
    (changes) => setChangeFromRecord(isFirstChanges, (/**
     * @param {?} record
     * @param {?} change
     * @return {?}
     */
    (record, change) => (changes[record.key] = change))));
}
/**
 * @param {?} isFirstChanges
 * @return {?}
 */
function getNewChangesRecords(isFirstChanges) {
    return (/**
     * @param {?} changes
     * @return {?}
     */
    (changes) => setChangeFromRecord(isFirstChanges, (/**
     * @param {?} record
     * @param {?} change
     * @return {?}
     */
    (record, change) => {
        if (!changes[record.key]) {
            changes[record.key] = change;
        }
    })));
}
/** @type {?} */
const defaultOpts = {
    isFirstChanges: false,
    onlyNewChanges: false,
};
/**
 * @param {?=} opts
 * @return {?}
 */
function changesFromRecord(opts = defaultOpts) {
    return opts.onlyNewChanges
        ? getNewChangesRecords(opts.isFirstChanges)
        : getChangesRecords(opts.isFirstChanges);
}
/**
 * @return {?}
 */
function noop() { }
/**
 * @param {?} ctor
 * @param {?} reflect
 * @return {?}
 */
function getCtorType(ctor, reflect) {
    return reflect.getMetadata('design:paramtypes', ctor);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const recordToChanges = changesFromRecord({ isFirstChanges: true });
/** @type {?} */
const recordToNewChanges = changesFromRecord({ onlyNewChanges: true });
class IoService {
    /**
     * @param {?} _differs
     * @param {?} _cfr
     */
    constructor(_differs, _cfr) {
        this._differs = _differs;
        this._cfr = _cfr;
        this.checkInit = this.failInit;
        this._lastComponentInst = null;
        this._inputsDiffer = this._differs.find({}).create();
        this._compFactory = null;
        this._outputsShouldDisconnect$ = new Subject();
        this._outputsChanged = (/**
         * @return {?}
         */
        () => false);
    }
    /**
     * @private
     * @return {?}
     */
    get _compRef() {
        return this._compInjector.componentRef;
    }
    /**
     * @private
     * @return {?}
     */
    get _componentInst() {
        return this._compRef ? this._compRef.instance : null;
    }
    /**
     * @private
     * @return {?}
     */
    get _componentInstChanged() {
        if (this._lastComponentInst !== this._componentInst) {
            this._lastComponentInst = this._componentInst;
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @private
     * @return {?}
     */
    get _compCdr() {
        return this._compRef ? this._compRef.injector.get(ChangeDetectorRef) : null;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._disconnectOutputs();
    }
    /**
     * @param {?} componentInjector
     * @param {?=} options
     * @return {?}
     */
    init(componentInjector, options = {}) {
        this.checkInit = componentInjector ? noop : this.failInit;
        this._compInjector = componentInjector;
        if (options.trackOutputChanges) {
            /** @type {?} */
            const outputsDiffer = this._differs.find({}).create();
            this._outputsChanged = (/**
             * @param {?} outputs
             * @return {?}
             */
            outputs => !!outputsDiffer.diff(outputs));
        }
    }
    /**
     * @param {?} inputs
     * @param {?} outputs
     * @param {?} inputsChanged
     * @param {?} outputsChanged
     * @return {?}
     */
    update(inputs, outputs, inputsChanged, outputsChanged) {
        this.checkInit();
        this.updateIO(inputs, outputs);
        /** @type {?} */
        const compChanged = this._componentInstChanged;
        if (compChanged || inputsChanged) {
            /** @type {?} */
            const inputsChanges = this._getInputsChanges(this._inputs);
            if (inputsChanges) {
                this._updateInputChanges(inputsChanges);
            }
            this.updateInputs(compChanged || !this._lastInputChanges);
        }
        if (compChanged || outputsChanged) {
            this.bindOutputs();
        }
    }
    /**
     * @return {?}
     */
    maybeUpdate() {
        this.checkInit();
        if (this._componentInstChanged) {
            this.updateInputs(true);
            this.bindOutputs();
            return;
        }
        if (this._outputsChanged(this._outputs)) {
            this.bindOutputs();
        }
        if (!this._inputs) {
            return;
        }
        /** @type {?} */
        const inputsChanges = this._getInputsChanges(this._inputs);
        if (inputsChanges) {
            /** @type {?} */
            const isNotFirstChange = !!this._lastInputChanges;
            this._updateInputChanges(inputsChanges);
            if (isNotFirstChange) {
                this.updateInputs();
            }
        }
    }
    /**
     * @private
     * @param {?} inputs
     * @param {?} outputs
     * @return {?}
     */
    updateIO(inputs, outputs) {
        this._inputs = inputs;
        this._outputs = outputs;
    }
    /**
     * @private
     * @param {?=} isFirstChange
     * @return {?}
     */
    updateInputs(isFirstChange = false) {
        if (isFirstChange) {
            this._updateCompFactory();
        }
        /** @type {?} */
        const compInst = this._componentInst;
        /** @type {?} */
        let inputs = this._inputs;
        if (!inputs || !compInst) {
            return;
        }
        inputs = this._resolveInputs(inputs);
        Object.keys(inputs).forEach((/**
         * @param {?} p
         * @return {?}
         */
        p => (compInst[p] = inputs[p])));
        // Mark component for check to re-render with new inputs
        if (this._compCdr) {
            this._compCdr.markForCheck();
        }
        this.notifyOnInputChanges(this._lastInputChanges, isFirstChange);
    }
    /**
     * @private
     * @return {?}
     */
    bindOutputs() {
        this._disconnectOutputs();
        /** @type {?} */
        const compInst = this._componentInst;
        /** @type {?} */
        let outputs = this._outputs;
        if (!outputs || !compInst) {
            return;
        }
        outputs = this._resolveOutputs(outputs);
        Object.keys(outputs)
            .filter((/**
         * @param {?} p
         * @return {?}
         */
        p => compInst[p]))
            .forEach((/**
         * @param {?} p
         * @return {?}
         */
        p => compInst[p]
            .pipe(takeUntil(this._outputsShouldDisconnect$))
            .subscribe(outputs[p])));
    }
    /**
     * @private
     * @param {?=} changes
     * @param {?=} forceFirstChanges
     * @return {?}
     */
    notifyOnInputChanges(changes = {}, forceFirstChanges) {
        // Exit early if component not interested to receive changes
        if (!this._componentInst.ngOnChanges) {
            return;
        }
        if (forceFirstChanges) {
            changes = this._collectFirstChanges();
        }
        this._componentInst.ngOnChanges(changes);
    }
    /**
     * @private
     * @return {?}
     */
    _disconnectOutputs() {
        this._outputsShouldDisconnect$.next();
    }
    /**
     * @private
     * @param {?} inputs
     * @return {?}
     */
    _getInputsChanges(inputs) {
        return this._inputsDiffer.diff(this._inputs);
    }
    /**
     * @private
     * @param {?} differ
     * @return {?}
     */
    _updateInputChanges(differ) {
        this._lastInputChanges = this._collectChangesFromDiffer(differ);
    }
    /**
     * @private
     * @return {?}
     */
    _collectFirstChanges() {
        /** @type {?} */
        const changes = (/** @type {?} */ ({}));
        /** @type {?} */
        const inputs = this._inputs;
        Object.keys(inputs).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => (changes[prop] = createNewChange(inputs[prop]))));
        return this._resolveChanges(changes);
    }
    /**
     * @private
     * @param {?} differ
     * @return {?}
     */
    _collectChangesFromDiffer(differ) {
        /** @type {?} */
        const changes = (/** @type {?} */ ({}));
        differ.forEachAddedItem(recordToChanges(changes));
        differ.forEachItem(recordToNewChanges(changes));
        return this._resolveChanges(changes);
    }
    /**
     * @private
     * @return {?}
     */
    _resolveCompFactory() {
        try {
            try {
                return this._cfr.resolveComponentFactory(this._compRef.componentType);
            }
            catch (e) {
                // Fallback if componentType does not exist (happens on NgComponentOutlet)
                return this._cfr.resolveComponentFactory(this._compRef.instance.constructor);
            }
        }
        catch (e) {
            // Factory not available - bailout
            return null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    _updateCompFactory() {
        this._compFactory = this._resolveCompFactory();
    }
    /**
     * @private
     * @param {?} inputs
     * @return {?}
     */
    _resolveInputs(inputs) {
        if (!this._compFactory) {
            return inputs;
        }
        return this._remapIO(inputs, this._compFactory.inputs);
    }
    /**
     * @private
     * @param {?} outputs
     * @return {?}
     */
    _resolveOutputs(outputs) {
        if (!this._compFactory) {
            return outputs;
        }
        return this._remapIO(outputs, this._compFactory.outputs);
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    _resolveChanges(changes) {
        if (!this._compFactory) {
            return changes;
        }
        return this._remapIO(changes, this._compFactory.inputs);
    }
    /**
     * @private
     * @param {?} io
     * @param {?} mapping
     * @return {?}
     */
    _remapIO(io, mapping) {
        /** @type {?} */
        const newIO = {};
        Object.keys(io).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            const newKey = this._findPropByTplInMapping(key, mapping) || key;
            newIO[newKey] = io[key];
        }));
        return newIO;
    }
    /**
     * @private
     * @param {?} tplName
     * @param {?} mapping
     * @return {?}
     */
    _findPropByTplInMapping(tplName, mapping) {
        for (const map of mapping) {
            if (map.templateName === tplName) {
                return map.propName;
            }
        }
        return null;
    }
    /**
     * @private
     * @return {?}
     */
    failInit() {
        throw Error('IoService: ComponentInjector was not set! Please call init() method!');
    }
}
IoService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
IoService.ctorParameters = () => [
    { type: KeyValueDiffers },
    { type: ComponentFactoryResolver }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class IoFactoryService {
    /**
     * @param {?} differs
     * @param {?} cfr
     */
    constructor(differs, cfr) {
        this.differs = differs;
        this.cfr = cfr;
    }
    /**
     * @return {?}
     */
    create() {
        return new IoService(this.differs, this.cfr);
    }
}
IoFactoryService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
IoFactoryService.ctorParameters = () => [
    { type: KeyValueDiffers },
    { type: ComponentFactoryResolver }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const WINDOW_REF = new InjectionToken('WindowRef');
class WindowRefService {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.nativeWindow = this.injector.get(WINDOW_REF, null);
    }
}
WindowRefService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
WindowRefService.ctorParameters = () => [
    { type: Injector }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 * @param {?} type
 * @param {?=} inputs
 * @param {?=} outputs
 * @return {?}
 */
function dynamicDirectiveDef(type, inputs, outputs) {
    return { type, inputs, outputs };
}
class DynamicDirectivesDirective {
    /**
     * @param {?} injector
     * @param {?} iterableDiffers
     * @param {?} ioFactoryService
     * @param {?} windowRef
     * @param {?} componentInjectorType
     * @param {?} componentOutletInjector
     */
    constructor(injector, iterableDiffers, ioFactoryService, windowRef, componentInjectorType, componentOutletInjector) {
        this.injector = injector;
        this.iterableDiffers = iterableDiffers;
        this.ioFactoryService = ioFactoryService;
        this.windowRef = windowRef;
        this.componentInjectorType = componentInjectorType;
        this.componentOutletInjector = componentOutletInjector;
        this.ndcDynamicDirectivesCreated = new EventEmitter();
        this.componentInjector = this.injector.get(this.componentInjectorType, null);
        this.dirRef = new Map();
        this.dirIo = new Map();
        this.dirsDiffer = this.iterableDiffers
            .find([])
            .create((/**
         * @param {?} _
         * @param {?} def
         * @return {?}
         */
        (_, def) => def.type));
    }
    /**
     * @private
     * @return {?}
     */
    get directives() {
        return (this.ndcDynamicDirectives || this.ngComponentOutletNdcDynamicDirectives);
    }
    /**
     * @private
     * @return {?}
     */
    get compInjector() {
        return this.componentOutletInjector || this.componentInjector;
    }
    /**
     * @private
     * @return {?}
     */
    get componentRef() {
        return this.compInjector.componentRef;
    }
    /**
     * @private
     * @return {?}
     */
    get compInstance() {
        return this.componentRef && this.componentRef.instance;
    }
    /**
     * @private
     * @return {?}
     */
    get isCompChanged() {
        if (this.lastCompInstance !== this.compInstance) {
            this.lastCompInstance = this.compInstance;
            return true;
        }
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    get hostInjector() {
        return this.componentRef.injector;
    }
    /**
     * @private
     * @return {?}
     */
    get hostVcr() {
        return this.componentRef['_viewRef']['_viewContainerRef'];
    }
    /**
     * @private
     * @return {?}
     */
    get reflect() {
        return ((/** @type {?} */ (this.windowRef.nativeWindow))).Reflect;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.maybeDestroyDirectives()) {
            return;
        }
        /** @type {?} */
        const dirsChanges = this.dirsDiffer.diff(this.directives);
        if (!dirsChanges) {
            return this.updateDirectives();
        }
        this.processDirChanges(dirsChanges);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyAllDirectives();
    }
    /**
     * @private
     * @return {?}
     */
    maybeDestroyDirectives() {
        if (this.isCompChanged || !this.componentRef) {
            this.dirsDiffer.diff([]);
            this.destroyAllDirectives();
        }
        return !this.componentRef;
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    processDirChanges(changes) {
        changes.forEachRemovedItem((/**
         * @param {?} __0
         * @return {?}
         */
        ({ item }) => this.destroyDirective(item)));
        /** @type {?} */
        const createdDirs = [];
        changes.forEachAddedItem((/**
         * @param {?} __0
         * @return {?}
         */
        ({ item }) => createdDirs.push(this.initDirective(item))));
        if (createdDirs.length) {
            this.ndcDynamicDirectivesCreated.emit(createdDirs.filter(Boolean));
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateDirectives() {
        this.directives.forEach((/**
         * @param {?} dir
         * @return {?}
         */
        dir => this.updateDirective(dir)));
    }
    /**
     * @private
     * @param {?} dirDef
     * @return {?}
     */
    updateDirective(dirDef) {
        /** @type {?} */
        const io = this.dirIo.get(dirDef.type);
        io.update(dirDef.inputs, dirDef.outputs, false, false);
        io.maybeUpdate();
    }
    /**
     * @private
     * @param {?} dirDef
     * @return {?}
     */
    initDirective(dirDef) {
        if (this.dirRef.has(dirDef.type)) {
            return;
        }
        /** @type {?} */
        const instance = this.createDirective(dirDef.type);
        /** @type {?} */
        const dir = {
            instance,
            type: dirDef.type,
            injector: this.hostInjector,
            hostComponent: this.componentRef.instance,
            hostView: this.componentRef.hostView,
            location: this.componentRef.location,
            changeDetectorRef: this.componentRef.changeDetectorRef,
            onDestroy: this.componentRef.onDestroy,
        };
        this.initDirIO(dir, dirDef.inputs, dirDef.outputs);
        this.callInitHooks(instance);
        this.dirRef.set(dir.type, dir);
        return dir;
    }
    /**
     * @private
     * @return {?}
     */
    destroyAllDirectives() {
        this.dirRef.forEach((/**
         * @param {?} dir
         * @return {?}
         */
        dir => this.destroyDirRef(dir)));
        this.dirRef.clear();
        this.dirIo.clear();
    }
    /**
     * @private
     * @param {?} dirDef
     * @return {?}
     */
    destroyDirective(dirDef) {
        this.destroyDirRef(this.dirRef.get(dirDef.type));
        this.dirRef.delete(dirDef.type);
        this.dirIo.delete(dirDef.type);
    }
    /**
     * @private
     * @param {?} dir
     * @param {?=} inputs
     * @param {?=} outputs
     * @return {?}
     */
    initDirIO(dir, inputs, outputs) {
        /** @type {?} */
        const io = this.ioFactoryService.create();
        io.init({ componentRef: this.dirToCompDef(dir) }, { trackOutputChanges: true });
        io.update(inputs, outputs, !!inputs, !!outputs);
        this.dirIo.set(dir.type, io);
    }
    /**
     * @private
     * @param {?} dir
     * @return {?}
     */
    dirToCompDef(dir) {
        return Object.assign({}, this.componentRef, { destroy: this.componentRef.destroy, onDestroy: this.componentRef.onDestroy, injector: this.componentRef.injector, instance: dir.instance, componentType: dir.type });
    }
    /**
     * @private
     * @param {?} dir
     * @return {?}
     */
    destroyDirRef(dir) {
        /** @type {?} */
        const io = this.dirIo.get(dir.type);
        io.ngOnDestroy();
        if ('ngOnDestroy' in dir.instance) {
            dir.instance.ngOnDestroy();
        }
    }
    /**
     * @private
     * @template T
     * @param {?} dirType
     * @return {?}
     */
    createDirective(dirType) {
        /** @type {?} */
        const ctorParams = getCtorType(dirType, this.reflect);
        /** @type {?} */
        const resolvedParams = ctorParams.map((/**
         * @param {?} p
         * @return {?}
         */
        p => this.resolveDep(p)));
        return new dirType(...resolvedParams);
    }
    /**
     * @private
     * @param {?} dep
     * @return {?}
     */
    resolveDep(dep) {
        return this.maybeResolveVCR(dep) || this.hostInjector.get(dep);
    }
    /**
     * @private
     * @param {?} dep
     * @return {?}
     */
    maybeResolveVCR(dep) {
        if (dep === ViewContainerRef) {
            return this.hostVcr;
        }
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    callInitHooks(obj) {
        this.callHook(obj, 'ngOnInit');
        this.callHook(obj, 'ngDoCheck');
        this.callHook(obj, 'ngAfterContentInit');
        this.callHook(obj, 'ngAfterContentChecked');
        this.callHook(obj, 'ngAfterViewInit');
        this.callHook(obj, 'ngAfterViewChecked');
    }
    /**
     * @private
     * @param {?} obj
     * @param {?} hook
     * @param {?=} args
     * @return {?}
     */
    callHook(obj, hook, args = []) {
        if (obj[hook]) {
            obj[hook](...args);
        }
    }
}
DynamicDirectivesDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ndcDynamicDirectives],[ngComponentOutletNdcDynamicDirectives]',
            },] },
];
/** @nocollapse */
DynamicDirectivesDirective.ctorParameters = () => [
    { type: Injector },
    { type: IterableDiffers },
    { type: IoFactoryService },
    { type: WindowRefService },
    { type: undefined, decorators: [{ type: Inject, args: [COMPONENT_INJECTOR,] }] },
    { type: ComponentOutletInjectorDirective, decorators: [{ type: Host }, { type: Optional }] }
];
DynamicDirectivesDirective.propDecorators = {
    ndcDynamicDirectives: [{ type: Input }],
    ngComponentOutletNdcDynamicDirectives: [{ type: Input }],
    ndcDynamicDirectivesCreated: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DynamicComponent {
    /**
     * @param {?} _vcr
     * @param {?} _cfr
     */
    constructor(_vcr, _cfr) {
        this._vcr = _vcr;
        this._cfr = _cfr;
        this.ndcDynamicCreated = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['ndcDynamicComponent']) {
            this.createDynamicComponent();
        }
    }
    /**
     * @return {?}
     */
    createDynamicComponent() {
        this._vcr.clear();
        this.componentRef = null;
        if (this.ndcDynamicComponent) {
            this.componentRef = this._vcr.createComponent(this._cfr.resolveComponentFactory(this.ndcDynamicComponent), 0, this._resolveInjector(), this.ndcDynamicContent);
            this.ndcDynamicCreated.emit(this.componentRef);
        }
    }
    /**
     * @private
     * @return {?}
     */
    _resolveInjector() {
        /** @type {?} */
        let injector = this.ndcDynamicInjector || this._vcr.parentInjector;
        if (this.ndcDynamicProviders) {
            injector = Injector.create({
                providers: this.ndcDynamicProviders,
                parent: injector,
            });
        }
        return injector;
    }
}
DynamicComponent.decorators = [
    { type: Component, args: [{
                selector: 'ndc-dynamic',
                template: '',
            },] },
];
/** @nocollapse */
DynamicComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver }
];
DynamicComponent.propDecorators = {
    ndcDynamicComponent: [{ type: Input }],
    ndcDynamicInjector: [{ type: Input }],
    ndcDynamicProviders: [{ type: Input }],
    ndcDynamicContent: [{ type: Input }],
    ndcDynamicCreated: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DynamicDirective {
    /**
     * @param {?} _injector
     * @param {?} ioService
     * @param {?} _componentInjectorType
     * @param {?} _componentOutletInjector
     */
    constructor(_injector, ioService, _componentInjectorType, _componentOutletInjector) {
        this._injector = _injector;
        this.ioService = ioService;
        this._componentInjectorType = _componentInjectorType;
        this._componentOutletInjector = _componentOutletInjector;
        this._componentInjector = this._injector.get(this._componentInjectorType, null);
        this.ioService.init(this._compInjector);
    }
    /**
     * @private
     * @return {?}
     */
    get _inputs() {
        return this.ndcDynamicInputs || this.ngComponentOutletNdcDynamicInputs;
    }
    /**
     * @private
     * @return {?}
     */
    get _outputs() {
        return this.ndcDynamicOutputs || this.ngComponentOutletNdcDynamicOutputs;
    }
    /**
     * @private
     * @return {?}
     */
    get _compInjector() {
        return this._componentOutletInjector || this._componentInjector;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.ioService.update(this._inputs, this._outputs, this._inputsChanged(changes), this._outputsChanged(changes));
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.ioService.maybeUpdate();
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    _inputsChanged(changes) {
        return ('ngComponentOutletNdcDynamicInputs' in changes ||
            'ndcDynamicInputs' in changes);
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    _outputsChanged(changes) {
        return ('ngComponentOutletNdcDynamicOutputs' in changes ||
            'ndcDynamicOutputs' in changes);
    }
}
DynamicDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ndcDynamicInputs],[ndcDynamicOutputs],[ngComponentOutletNdcDynamicInputs],[ngComponentOutletNdcDynamicOutputs]',
                providers: [IoService],
            },] },
];
/** @nocollapse */
DynamicDirective.ctorParameters = () => [
    { type: Injector },
    { type: IoService },
    { type: undefined, decorators: [{ type: Inject, args: [COMPONENT_INJECTOR,] }] },
    { type: ComponentOutletInjectorDirective, decorators: [{ type: Host }, { type: Optional }] }
];
DynamicDirective.propDecorators = {
    ndcDynamicInputs: [{ type: Input }],
    ngComponentOutletNdcDynamicInputs: [{ type: Input }],
    ndcDynamicOutputs: [{ type: Input }],
    ngComponentOutletNdcDynamicOutputs: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function windowRefFactory() {
    return window;
}
class DynamicModule {
    /**
     * @param {?} components
     * @param {?=} componentInjector
     * @return {?}
     */
    static withComponents(components, componentInjector = DynamicComponent) {
        return {
            ngModule: DynamicModule,
            providers: [
                {
                    provide: ANALYZE_FOR_ENTRY_COMPONENTS,
                    useValue: components,
                    multi: true,
                },
                { provide: COMPONENT_INJECTOR, useValue: componentInjector },
                IoFactoryService,
                { provide: WINDOW_REF, useFactory: windowRefFactory },
                WindowRefService,
            ],
        };
    }
}
DynamicModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    DynamicComponent,
                    DynamicDirective,
                    ComponentOutletInjectorDirective,
                    DynamicAttributesDirective,
                    DynamicDirectivesDirective,
                ],
                exports: [
                    DynamicComponent,
                    DynamicDirective,
                    ComponentOutletInjectorDirective,
                    DynamicAttributesDirective,
                    DynamicDirectivesDirective,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { windowRefFactory, DynamicModule, DynamicDirective, DynamicComponent, DynamicAttributesDirective, dynamicDirectiveDef, DynamicDirectivesDirective, COMPONENT_INJECTOR as ɵa, ComponentOutletInjectorDirective as ɵc, IoFactoryService as ɵd, IoService as ɵb, WINDOW_REF as ɵe, WindowRefService as ɵf };
