/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
import { extractDeepPropertyByMapKey, extractDeepPropertyByParentMapKey, isBoolean, isNumberFinite, isString, isUndefined, } from '../helpers/helpers';
var FilterByPipe = /** @class */ (function () {
    function FilterByPipe() {
    }
    /**
     * @param {?} input
     * @param {?} props
     * @param {?=} search
     * @param {?=} strict
     * @return {?}
     */
    FilterByPipe.prototype.transform = /**
     * @param {?} input
     * @param {?} props
     * @param {?=} search
     * @param {?=} strict
     * @return {?}
     */
    function (input, props, search, strict) {
        if (search === void 0) { search = ''; }
        if (strict === void 0) { strict = false; }
        if (!Array.isArray(input) ||
            (!Array.isArray(search) && !isString(search) && !isNumberFinite(search) && !isBoolean(search))) {
            return input;
        }
        var /** @type {?} */ terms = String(search)
            .toLowerCase()
            .split(',');
        return input.filter(function (obj) {
            return props.some(function (prop) {
                return terms.some(function (term) {
                    var /** @type {?} */ value = extractDeepPropertyByMapKey(obj, prop);
                    /* tslint:disable */
                    var _a = extractDeepPropertyByParentMapKey(obj, prop), props = _a.props, tail = _a.tail;
                    if (isUndefined(value) && !isUndefined(props) && Array.isArray(props)) {
                        return props.some(function (parent) {
                            var /** @type {?} */ str = String(parent[tail]).toLowerCase();
                            return strict ? str === term : !!~str.indexOf(term);
                        });
                    }
                    if (isUndefined(value)) {
                        return false;
                    }
                    var /** @type {?} */ strValue = String(value).toLowerCase();
                    return strict ? term === strValue : !!~strValue.indexOf(term);
                });
            });
        });
    };
    FilterByPipe.decorators = [
        { type: Pipe, args: [{ name: 'filterBy' },] },
    ];
    return FilterByPipe;
}());
export { FilterByPipe };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXBpcGVzLyIsInNvdXJjZXMiOlsic3JjL3BpcGVzL2FycmF5L2ZpbHRlci1ieS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUNMLDJCQUEyQixFQUMzQixpQ0FBaUMsRUFDakMsU0FBUyxFQUNULGNBQWMsRUFDZCxRQUFRLEVBQ1IsV0FBVyxHQUNaLE1BQU0sb0JBQW9CLENBQUM7Ozs7Ozs7Ozs7O0lBTzFCLGdDQUFTOzs7Ozs7O0lBQVQsVUFBVSxLQUFVLEVBQUUsS0FBb0IsRUFBRSxNQUFnQixFQUFFLE1BQXVCO1FBQXpDLHVCQUFBLEVBQUEsV0FBZ0I7UUFBRSx1QkFBQSxFQUFBLGNBQXVCO1FBQ25GLEVBQUUsQ0FBQyxDQUNELENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDckIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQy9GLENBQUMsQ0FBQyxDQUFDO1lBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQztTQUNkO1FBRUQscUJBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7YUFDekIsV0FBVyxFQUFFO2FBQ2IsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWQsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQSxHQUFHO1lBQ3JCLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQUEsSUFBSTtnQkFDcEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBQSxJQUFJO29CQUNwQixxQkFBTSxLQUFLLEdBQUcsMkJBQTJCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDOztvQkFFckQsdURBQVEsZ0JBQUssRUFBRSxjQUFJLENBQWtEO29CQUVyRSxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3RFLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQUEsTUFBTTs0QkFDdEIscUJBQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQzs0QkFFL0MsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzt5QkFDckQsQ0FBQyxDQUFDO3FCQUNKO29CQUVELEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3ZCLE1BQU0sQ0FBQyxLQUFLLENBQUM7cUJBQ2Q7b0JBRUQscUJBQU0sUUFBUSxHQUFXLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztvQkFFckQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDL0QsQ0FBQyxDQUFDO2FBQ0osQ0FBQyxDQUFDO1NBQ0osQ0FBQyxDQUFDO0tBQ0o7O2dCQXpDRixJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFOzt1QkFYMUI7O1NBWWEsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleSxcbiAgZXh0cmFjdERlZXBQcm9wZXJ0eUJ5UGFyZW50TWFwS2V5LFxuICBpc0Jvb2xlYW4sXG4gIGlzTnVtYmVyRmluaXRlLFxuICBpc1N0cmluZyxcbiAgaXNVbmRlZmluZWQsXG59IGZyb20gJy4uL2hlbHBlcnMvaGVscGVycyc7XG5cbi8vIHRzbGludDpkaXNhYmxlIG5vLWJpdHdpc2VcbkBQaXBlKHsgbmFtZTogJ2ZpbHRlckJ5JyB9KVxuZXhwb3J0IGNsYXNzIEZpbHRlckJ5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueVtdLCBwcm9wczogQXJyYXk8c3RyaW5nPiwgc2VhcmNoPzogYW55LCBzdHJpY3Q/OiBib29sZWFuKTogYW55W107XG4gIHRyYW5zZm9ybTxUPihpbnB1dDogVCwgcHJvcHM6IEFycmF5PHN0cmluZz4sIHNlYXJjaD86IGFueSwgc3RyaWN0PzogYm9vbGVhbik6IFQ7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBwcm9wczogQXJyYXk8c3RyaW5nPiwgc2VhcmNoOiBhbnkgPSAnJywgc3RyaWN0OiBib29sZWFuID0gZmFsc2UpOiBhbnkge1xuICAgIGlmIChcbiAgICAgICFBcnJheS5pc0FycmF5KGlucHV0KSB8fFxuICAgICAgKCFBcnJheS5pc0FycmF5KHNlYXJjaCkgJiYgIWlzU3RyaW5nKHNlYXJjaCkgJiYgIWlzTnVtYmVyRmluaXRlKHNlYXJjaCkgJiYgIWlzQm9vbGVhbihzZWFyY2gpKVxuICAgICkge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIGNvbnN0IHRlcm1zID0gU3RyaW5nKHNlYXJjaClcbiAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAuc3BsaXQoJywnKTtcblxuICAgIHJldHVybiBpbnB1dC5maWx0ZXIob2JqID0+IHtcbiAgICAgIHJldHVybiBwcm9wcy5zb21lKHByb3AgPT4ge1xuICAgICAgICByZXR1cm4gdGVybXMuc29tZSh0ZXJtID0+IHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleShvYmosIHByb3ApO1xuICAgICAgICAgIC8qIHRzbGludDpkaXNhYmxlICovXG4gICAgICAgICAgY29uc3QgeyBwcm9wcywgdGFpbCB9ID0gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5UGFyZW50TWFwS2V5KG9iaiwgcHJvcCk7XG5cbiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpICYmICFpc1VuZGVmaW5lZChwcm9wcykgJiYgQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wcy5zb21lKHBhcmVudCA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHN0ciA9IFN0cmluZyhwYXJlbnRbdGFpbF0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHN0cmljdCA/IHN0ciA9PT0gdGVybSA6ICEhfnN0ci5pbmRleE9mKHRlcm0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHN0clZhbHVlOiBzdHJpbmcgPSBTdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICByZXR1cm4gc3RyaWN0ID8gdGVybSA9PT0gc3RyVmFsdWUgOiAhIX5zdHJWYWx1ZS5pbmRleE9mKHRlcm0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=