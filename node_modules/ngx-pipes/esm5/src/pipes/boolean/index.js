/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from '@angular/core';
import { IsDefinedPipe } from './is-defined';
import { IsNullPipe } from './is-null';
import { IsUndefinedPipe } from './is-undefined';
import { IsStringPipe } from './is-string';
import { IsFunctionPipe } from './is-function';
import { IsNumberPipe } from './is-number';
import { IsArrayPipe } from './is-array';
import { IsObjectPipe } from './is-object';
import { IsGreaterEqualThanPipe } from './is-greater-equal-than';
import { IsGreaterThanPipe } from './is-greater-than';
import { IsLessEqualThanPipe } from './is-less-equal-than';
import { IsEqualToPipe } from './is-equal-to';
import { IsNotEqualToPipe } from './is-not-equal-to';
import { IsIdenticalToPipe } from './is-identical-to';
import { IsNotIdenticalToPipe } from './is-not-identical-to';
import { IsLessThanPipe } from './is-less-than';
export var /** @type {?} */ BOOLEAN_PIPES = [
    IsDefinedPipe,
    IsNullPipe,
    IsUndefinedPipe,
    IsStringPipe,
    IsFunctionPipe,
    IsNumberPipe,
    IsArrayPipe,
    IsObjectPipe,
    IsGreaterEqualThanPipe,
    IsGreaterThanPipe,
    IsLessEqualThanPipe,
    IsLessEqualThanPipe,
    IsEqualToPipe,
    IsNotEqualToPipe,
    IsIdenticalToPipe,
    IsNotIdenticalToPipe,
    IsLessThanPipe,
];
var NgBooleanPipesModule = /** @class */ (function () {
    function NgBooleanPipesModule() {
    }
    NgBooleanPipesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: BOOLEAN_PIPES,
                    imports: [],
                    exports: BOOLEAN_PIPES,
                },] },
    ];
    return NgBooleanPipesModule;
}());
export { NgBooleanPipesModule };
export { IsDefinedPipe } from './is-defined';
export { IsNullPipe } from './is-null';
export { IsUndefinedPipe } from './is-undefined';
export { IsStringPipe } from './is-string';
export { IsFunctionPipe } from './is-function';
export { IsNumberPipe } from './is-number';
export { IsArrayPipe } from './is-array';
export { IsObjectPipe } from './is-object';
export { IsGreaterEqualThanPipe } from './is-greater-equal-than';
export { IsGreaterThanPipe } from './is-greater-than';
export { IsLessEqualThanPipe } from './is-less-equal-than';
export { IsEqualToPipe } from './is-equal-to';
export { IsNotEqualToPipe } from './is-not-equal-to';
export { IsIdenticalToPipe } from './is-identical-to';
export { IsNotIdenticalToPipe } from './is-not-identical-to';
export { IsLessThanPipe } from './is-less-than';

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvYm9vbGVhbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzdELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVoRCxNQUFNLENBQUMscUJBQU0sYUFBYSxHQUFHO0lBQzNCLGFBQWE7SUFDYixVQUFVO0lBQ1YsZUFBZTtJQUNmLFlBQVk7SUFDWixjQUFjO0lBQ2QsWUFBWTtJQUNaLFdBQVc7SUFDWCxZQUFZO0lBQ1osc0JBQXNCO0lBQ3RCLGlCQUFpQjtJQUNqQixtQkFBbUI7SUFDbkIsbUJBQW1CO0lBQ25CLGFBQWE7SUFDYixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLG9CQUFvQjtJQUNwQixjQUFjO0NBQ2YsQ0FBQzs7Ozs7Z0JBRUQsUUFBUSxTQUFDO29CQUNSLFlBQVksRUFBRSxhQUFhO29CQUMzQixPQUFPLEVBQUUsRUFBRTtvQkFDWCxPQUFPLEVBQUUsYUFBYTtpQkFDdkI7OytCQTFDRDs7U0EyQ2Esb0JBQW9CO0FBRWpDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN2QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzNELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDckQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElzRGVmaW5lZFBpcGUgfSBmcm9tICcuL2lzLWRlZmluZWQnO1xuaW1wb3J0IHsgSXNOdWxsUGlwZSB9IGZyb20gJy4vaXMtbnVsbCc7XG5pbXBvcnQgeyBJc1VuZGVmaW5lZFBpcGUgfSBmcm9tICcuL2lzLXVuZGVmaW5lZCc7XG5pbXBvcnQgeyBJc1N0cmluZ1BpcGUgfSBmcm9tICcuL2lzLXN0cmluZyc7XG5pbXBvcnQgeyBJc0Z1bmN0aW9uUGlwZSB9IGZyb20gJy4vaXMtZnVuY3Rpb24nO1xuaW1wb3J0IHsgSXNOdW1iZXJQaXBlIH0gZnJvbSAnLi9pcy1udW1iZXInO1xuaW1wb3J0IHsgSXNBcnJheVBpcGUgfSBmcm9tICcuL2lzLWFycmF5JztcbmltcG9ydCB7IElzT2JqZWN0UGlwZSB9IGZyb20gJy4vaXMtb2JqZWN0JztcbmltcG9ydCB7IElzR3JlYXRlckVxdWFsVGhhblBpcGUgfSBmcm9tICcuL2lzLWdyZWF0ZXItZXF1YWwtdGhhbic7XG5pbXBvcnQgeyBJc0dyZWF0ZXJUaGFuUGlwZSB9IGZyb20gJy4vaXMtZ3JlYXRlci10aGFuJztcbmltcG9ydCB7IElzTGVzc0VxdWFsVGhhblBpcGUgfSBmcm9tICcuL2lzLWxlc3MtZXF1YWwtdGhhbic7XG5pbXBvcnQgeyBJc0VxdWFsVG9QaXBlIH0gZnJvbSAnLi9pcy1lcXVhbC10byc7XG5pbXBvcnQgeyBJc05vdEVxdWFsVG9QaXBlIH0gZnJvbSAnLi9pcy1ub3QtZXF1YWwtdG8nO1xuaW1wb3J0IHsgSXNJZGVudGljYWxUb1BpcGUgfSBmcm9tICcuL2lzLWlkZW50aWNhbC10byc7XG5pbXBvcnQgeyBJc05vdElkZW50aWNhbFRvUGlwZSB9IGZyb20gJy4vaXMtbm90LWlkZW50aWNhbC10byc7XG5pbXBvcnQgeyBJc0xlc3NUaGFuUGlwZSB9IGZyb20gJy4vaXMtbGVzcy10aGFuJztcblxuZXhwb3J0IGNvbnN0IEJPT0xFQU5fUElQRVMgPSBbXG4gIElzRGVmaW5lZFBpcGUsXG4gIElzTnVsbFBpcGUsXG4gIElzVW5kZWZpbmVkUGlwZSxcbiAgSXNTdHJpbmdQaXBlLFxuICBJc0Z1bmN0aW9uUGlwZSxcbiAgSXNOdW1iZXJQaXBlLFxuICBJc0FycmF5UGlwZSxcbiAgSXNPYmplY3RQaXBlLFxuICBJc0dyZWF0ZXJFcXVhbFRoYW5QaXBlLFxuICBJc0dyZWF0ZXJUaGFuUGlwZSxcbiAgSXNMZXNzRXF1YWxUaGFuUGlwZSxcbiAgSXNMZXNzRXF1YWxUaGFuUGlwZSxcbiAgSXNFcXVhbFRvUGlwZSxcbiAgSXNOb3RFcXVhbFRvUGlwZSxcbiAgSXNJZGVudGljYWxUb1BpcGUsXG4gIElzTm90SWRlbnRpY2FsVG9QaXBlLFxuICBJc0xlc3NUaGFuUGlwZSxcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogQk9PTEVBTl9QSVBFUyxcbiAgaW1wb3J0czogW10sXG4gIGV4cG9ydHM6IEJPT0xFQU5fUElQRVMsXG59KVxuZXhwb3J0IGNsYXNzIE5nQm9vbGVhblBpcGVzTW9kdWxlIHt9XG5cbmV4cG9ydCB7IElzRGVmaW5lZFBpcGUgfSBmcm9tICcuL2lzLWRlZmluZWQnO1xuZXhwb3J0IHsgSXNOdWxsUGlwZSB9IGZyb20gJy4vaXMtbnVsbCc7XG5leHBvcnQgeyBJc1VuZGVmaW5lZFBpcGUgfSBmcm9tICcuL2lzLXVuZGVmaW5lZCc7XG5leHBvcnQgeyBJc1N0cmluZ1BpcGUgfSBmcm9tICcuL2lzLXN0cmluZyc7XG5leHBvcnQgeyBJc0Z1bmN0aW9uUGlwZSB9IGZyb20gJy4vaXMtZnVuY3Rpb24nO1xuZXhwb3J0IHsgSXNOdW1iZXJQaXBlIH0gZnJvbSAnLi9pcy1udW1iZXInO1xuZXhwb3J0IHsgSXNBcnJheVBpcGUgfSBmcm9tICcuL2lzLWFycmF5JztcbmV4cG9ydCB7IElzT2JqZWN0UGlwZSB9IGZyb20gJy4vaXMtb2JqZWN0JztcbmV4cG9ydCB7IElzR3JlYXRlckVxdWFsVGhhblBpcGUgfSBmcm9tICcuL2lzLWdyZWF0ZXItZXF1YWwtdGhhbic7XG5leHBvcnQgeyBJc0dyZWF0ZXJUaGFuUGlwZSB9IGZyb20gJy4vaXMtZ3JlYXRlci10aGFuJztcbmV4cG9ydCB7IElzTGVzc0VxdWFsVGhhblBpcGUgfSBmcm9tICcuL2lzLWxlc3MtZXF1YWwtdGhhbic7XG5leHBvcnQgeyBJc0VxdWFsVG9QaXBlIH0gZnJvbSAnLi9pcy1lcXVhbC10byc7XG5leHBvcnQgeyBJc05vdEVxdWFsVG9QaXBlIH0gZnJvbSAnLi9pcy1ub3QtZXF1YWwtdG8nO1xuZXhwb3J0IHsgSXNJZGVudGljYWxUb1BpcGUgfSBmcm9tICcuL2lzLWlkZW50aWNhbC10byc7XG5leHBvcnQgeyBJc05vdElkZW50aWNhbFRvUGlwZSB9IGZyb20gJy4vaXMtbm90LWlkZW50aWNhbC10byc7XG5leHBvcnQgeyBJc0xlc3NUaGFuUGlwZSB9IGZyb20gJy4vaXMtbGVzcy10aGFuJztcbiJdfQ==