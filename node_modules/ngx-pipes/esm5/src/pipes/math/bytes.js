/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
import { applyPrecision, isNumberFinite, isUndefined } from '../helpers/helpers';
var BytesPipe = /** @class */ (function () {
    function BytesPipe() {
        this.dictionary = [
            { max: 1024, type: 'B' },
            { max: 1048576, type: 'KB' },
            { max: 1073741824, type: 'MB' },
            { max: 1.0995116e12, type: 'GB' },
        ];
    }
    /**
     * @param {?} value
     * @param {?=} precision
     * @return {?}
     */
    BytesPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} precision
     * @return {?}
     */
    function (value, precision) {
        if (!isNumberFinite(value)) {
            return NaN;
        }
        var /** @type {?} */ format = this.dictionary.find(function (d) { return value < d.max; }) || this.dictionary[this.dictionary.length - 1];
        var /** @type {?} */ calc = value / (format.max / 1024);
        var /** @type {?} */ num = isUndefined(precision) ? calc : applyPrecision(calc, precision);
        return num + " " + format.type;
    };
    BytesPipe.decorators = [
        { type: Pipe, args: [{ name: 'bytes' },] },
    ];
    return BytesPipe;
}());
export { BytesPipe };
function BytesPipe_tsickle_Closure_declarations() {
    /** @type {?} */
    BytesPipe.prototype.dictionary;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnl0ZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvbWF0aC9ieXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7OzswQkFJcEI7WUFDekQsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUU7WUFDeEIsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7WUFDNUIsRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7WUFDL0IsRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUU7U0FDbEM7Ozs7Ozs7SUFFRCw2QkFBUzs7Ozs7SUFBVCxVQUFVLEtBQWEsRUFBRSxTQUE4QjtRQUNyRCxFQUFFLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUNaO1FBRUQscUJBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQWIsQ0FBYSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2RyxxQkFBTSxJQUFJLEdBQUcsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUN6QyxxQkFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFNUUsTUFBTSxDQUFJLEdBQUcsU0FBSSxNQUFNLENBQUMsSUFBTSxDQUFDO0tBQ2hDOztnQkFuQkYsSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTs7b0JBSHZCOztTQUlhLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBhcHBseVByZWNpc2lvbiwgaXNOdW1iZXJGaW5pdGUsIGlzVW5kZWZpbmVkIH0gZnJvbSAnLi4vaGVscGVycy9oZWxwZXJzJztcblxuQFBpcGUoeyBuYW1lOiAnYnl0ZXMnIH0pXG5leHBvcnQgY2xhc3MgQnl0ZXNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHByaXZhdGUgZGljdGlvbmFyeTogQXJyYXk8eyBtYXg6IG51bWJlcjsgdHlwZTogc3RyaW5nIH0+ID0gW1xuICAgIHsgbWF4OiAxMDI0LCB0eXBlOiAnQicgfSxcbiAgICB7IG1heDogMTA0ODU3NiwgdHlwZTogJ0tCJyB9LFxuICAgIHsgbWF4OiAxMDczNzQxODI0LCB0eXBlOiAnTUInIH0sXG4gICAgeyBtYXg6IDEuMDk5NTExNmUxMiwgdHlwZTogJ0dCJyB9LFxuICBdO1xuXG4gIHRyYW5zZm9ybSh2YWx1ZTogbnVtYmVyLCBwcmVjaXNpb24/OiBudW1iZXIgfCB1bmRlZmluZWQpOiBzdHJpbmcgfCBudW1iZXIge1xuICAgIGlmICghaXNOdW1iZXJGaW5pdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIGNvbnN0IGZvcm1hdCA9IHRoaXMuZGljdGlvbmFyeS5maW5kKGQgPT4gdmFsdWUgPCBkLm1heCkgfHwgdGhpcy5kaWN0aW9uYXJ5W3RoaXMuZGljdGlvbmFyeS5sZW5ndGggLSAxXTtcbiAgICBjb25zdCBjYWxjID0gdmFsdWUgLyAoZm9ybWF0Lm1heCAvIDEwMjQpO1xuICAgIGNvbnN0IG51bSA9IGlzVW5kZWZpbmVkKHByZWNpc2lvbikgPyBjYWxjIDogYXBwbHlQcmVjaXNpb24oY2FsYywgcHJlY2lzaW9uKTtcblxuICAgIHJldHVybiBgJHtudW19ICR7Zm9ybWF0LnR5cGV9YDtcbiAgfVxufVxuIl19