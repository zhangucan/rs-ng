/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from '@angular/core';
import { AorAnPipe } from './a-or-an';
import { UcWordsPipe } from './ucwords';
import { LeftTrimPipe } from './ltrim';
import { RepeatPipe } from './repeat';
import { RightTrimPipe } from './rtrim';
import { ScanPipe } from './scan';
import { ShortenPipe } from './shorten';
import { StripTagsPipe } from './strip-tags';
import { TrimPipe } from './trim';
import { UcFirstPipe } from './ucfirst';
import { SlugifyPipe } from './slugify';
import { CamelizePipe } from './camelize';
import { LatinisePipe } from './latinise';
import { LinesPipe } from './lines';
import { UnderscorePipe } from './underscore';
import { MatchPipe } from './match';
import { TestPipe } from './test';
import { LeftPadPipe } from './lpad';
import { RightPadPipe } from './rpad';
import { MakePluralStringPipe } from './pluralize';
import { WrapPipe } from './wrap';
export const /** @type {?} */ STRING_PIPES = [
    AorAnPipe,
    LeftTrimPipe,
    RepeatPipe,
    RightTrimPipe,
    ScanPipe,
    ShortenPipe,
    StripTagsPipe,
    TrimPipe,
    UcFirstPipe,
    UcWordsPipe,
    SlugifyPipe,
    CamelizePipe,
    LatinisePipe,
    LinesPipe,
    UnderscorePipe,
    MatchPipe,
    TestPipe,
    LeftPadPipe,
    RightPadPipe,
    MakePluralStringPipe,
    WrapPipe,
];
export class NgStringPipesModule {
}
NgStringPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: STRING_PIPES,
                imports: [],
                exports: STRING_PIPES,
            },] },
];
export { AorAnPipe } from './a-or-an';
export { UcWordsPipe } from './ucwords';
export { LeftTrimPipe } from './ltrim';
export { RepeatPipe } from './repeat';
export { RightTrimPipe } from './rtrim';
export { ScanPipe } from './scan';
export { ShortenPipe } from './shorten';
export { StripTagsPipe } from './strip-tags';
export { TrimPipe } from './trim';
export { UcFirstPipe } from './ucfirst';
export { SlugifyPipe } from './slugify';
export { CamelizePipe } from './camelize';
export { LatinisePipe } from './latinise';
export { LinesPipe } from './lines';
export { UnderscorePipe } from './underscore';
export { MatchPipe } from './match';
export { TestPipe } from './test';
export { LeftPadPipe } from './lpad';
export { RightPadPipe } from './rpad';
export { MakePluralStringPipe } from './pluralize';
export { WrapPipe } from './wrap';

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvc3RyaW5nL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM3QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDMUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDdEMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFbEMsTUFBTSxDQUFDLHVCQUFNLFlBQVksR0FBRztJQUMxQixTQUFTO0lBQ1QsWUFBWTtJQUNaLFVBQVU7SUFDVixhQUFhO0lBQ2IsUUFBUTtJQUNSLFdBQVc7SUFDWCxhQUFhO0lBQ2IsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFlBQVk7SUFDWixZQUFZO0lBQ1osU0FBUztJQUNULGNBQWM7SUFDZCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxZQUFZO0lBQ1osb0JBQW9CO0lBQ3BCLFFBQVE7Q0FDVCxDQUFDO0FBT0YsTUFBTTs7O1lBTEwsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxZQUFZO2dCQUMxQixPQUFPLEVBQUUsRUFBRTtnQkFDWCxPQUFPLEVBQUUsWUFBWTthQUN0Qjs7QUFHRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDeEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMxQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNyQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNuRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFvckFuUGlwZSB9IGZyb20gJy4vYS1vci1hbic7XG5pbXBvcnQgeyBVY1dvcmRzUGlwZSB9IGZyb20gJy4vdWN3b3Jkcyc7XG5pbXBvcnQgeyBMZWZ0VHJpbVBpcGUgfSBmcm9tICcuL2x0cmltJztcbmltcG9ydCB7IFJlcGVhdFBpcGUgfSBmcm9tICcuL3JlcGVhdCc7XG5pbXBvcnQgeyBSaWdodFRyaW1QaXBlIH0gZnJvbSAnLi9ydHJpbSc7XG5pbXBvcnQgeyBTY2FuUGlwZSB9IGZyb20gJy4vc2Nhbic7XG5pbXBvcnQgeyBTaG9ydGVuUGlwZSB9IGZyb20gJy4vc2hvcnRlbic7XG5pbXBvcnQgeyBTdHJpcFRhZ3NQaXBlIH0gZnJvbSAnLi9zdHJpcC10YWdzJztcbmltcG9ydCB7IFRyaW1QaXBlIH0gZnJvbSAnLi90cmltJztcbmltcG9ydCB7IFVjRmlyc3RQaXBlIH0gZnJvbSAnLi91Y2ZpcnN0JztcbmltcG9ydCB7IFNsdWdpZnlQaXBlIH0gZnJvbSAnLi9zbHVnaWZ5JztcbmltcG9ydCB7IENhbWVsaXplUGlwZSB9IGZyb20gJy4vY2FtZWxpemUnO1xuaW1wb3J0IHsgTGF0aW5pc2VQaXBlIH0gZnJvbSAnLi9sYXRpbmlzZSc7XG5pbXBvcnQgeyBMaW5lc1BpcGUgfSBmcm9tICcuL2xpbmVzJztcbmltcG9ydCB7IFVuZGVyc2NvcmVQaXBlIH0gZnJvbSAnLi91bmRlcnNjb3JlJztcbmltcG9ydCB7IE1hdGNoUGlwZSB9IGZyb20gJy4vbWF0Y2gnO1xuaW1wb3J0IHsgVGVzdFBpcGUgfSBmcm9tICcuL3Rlc3QnO1xuaW1wb3J0IHsgTGVmdFBhZFBpcGUgfSBmcm9tICcuL2xwYWQnO1xuaW1wb3J0IHsgUmlnaHRQYWRQaXBlIH0gZnJvbSAnLi9ycGFkJztcbmltcG9ydCB7IE1ha2VQbHVyYWxTdHJpbmdQaXBlIH0gZnJvbSAnLi9wbHVyYWxpemUnO1xuaW1wb3J0IHsgV3JhcFBpcGUgfSBmcm9tICcuL3dyYXAnO1xuXG5leHBvcnQgY29uc3QgU1RSSU5HX1BJUEVTID0gW1xuICBBb3JBblBpcGUsXG4gIExlZnRUcmltUGlwZSxcbiAgUmVwZWF0UGlwZSxcbiAgUmlnaHRUcmltUGlwZSxcbiAgU2NhblBpcGUsXG4gIFNob3J0ZW5QaXBlLFxuICBTdHJpcFRhZ3NQaXBlLFxuICBUcmltUGlwZSxcbiAgVWNGaXJzdFBpcGUsXG4gIFVjV29yZHNQaXBlLFxuICBTbHVnaWZ5UGlwZSxcbiAgQ2FtZWxpemVQaXBlLFxuICBMYXRpbmlzZVBpcGUsXG4gIExpbmVzUGlwZSxcbiAgVW5kZXJzY29yZVBpcGUsXG4gIE1hdGNoUGlwZSxcbiAgVGVzdFBpcGUsXG4gIExlZnRQYWRQaXBlLFxuICBSaWdodFBhZFBpcGUsXG4gIE1ha2VQbHVyYWxTdHJpbmdQaXBlLFxuICBXcmFwUGlwZSxcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogU1RSSU5HX1BJUEVTLFxuICBpbXBvcnRzOiBbXSxcbiAgZXhwb3J0czogU1RSSU5HX1BJUEVTLFxufSlcbmV4cG9ydCBjbGFzcyBOZ1N0cmluZ1BpcGVzTW9kdWxlIHt9XG5cbmV4cG9ydCB7IEFvckFuUGlwZSB9IGZyb20gJy4vYS1vci1hbic7XG5leHBvcnQgeyBVY1dvcmRzUGlwZSB9IGZyb20gJy4vdWN3b3Jkcyc7XG5leHBvcnQgeyBMZWZ0VHJpbVBpcGUgfSBmcm9tICcuL2x0cmltJztcbmV4cG9ydCB7IFJlcGVhdFBpcGUgfSBmcm9tICcuL3JlcGVhdCc7XG5leHBvcnQgeyBSaWdodFRyaW1QaXBlIH0gZnJvbSAnLi9ydHJpbSc7XG5leHBvcnQgeyBTY2FuUGlwZSB9IGZyb20gJy4vc2Nhbic7XG5leHBvcnQgeyBTaG9ydGVuUGlwZSB9IGZyb20gJy4vc2hvcnRlbic7XG5leHBvcnQgeyBTdHJpcFRhZ3NQaXBlIH0gZnJvbSAnLi9zdHJpcC10YWdzJztcbmV4cG9ydCB7IFRyaW1QaXBlIH0gZnJvbSAnLi90cmltJztcbmV4cG9ydCB7IFVjRmlyc3RQaXBlIH0gZnJvbSAnLi91Y2ZpcnN0JztcbmV4cG9ydCB7IFNsdWdpZnlQaXBlIH0gZnJvbSAnLi9zbHVnaWZ5JztcbmV4cG9ydCB7IENhbWVsaXplUGlwZSB9IGZyb20gJy4vY2FtZWxpemUnO1xuZXhwb3J0IHsgTGF0aW5pc2VQaXBlIH0gZnJvbSAnLi9sYXRpbmlzZSc7XG5leHBvcnQgeyBMaW5lc1BpcGUgfSBmcm9tICcuL2xpbmVzJztcbmV4cG9ydCB7IFVuZGVyc2NvcmVQaXBlIH0gZnJvbSAnLi91bmRlcnNjb3JlJztcbmV4cG9ydCB7IE1hdGNoUGlwZSB9IGZyb20gJy4vbWF0Y2gnO1xuZXhwb3J0IHsgVGVzdFBpcGUgfSBmcm9tICcuL3Rlc3QnO1xuZXhwb3J0IHsgTGVmdFBhZFBpcGUgfSBmcm9tICcuL2xwYWQnO1xuZXhwb3J0IHsgUmlnaHRQYWRQaXBlIH0gZnJvbSAnLi9ycGFkJztcbmV4cG9ydCB7IE1ha2VQbHVyYWxTdHJpbmdQaXBlIH0gZnJvbSAnLi9wbHVyYWxpemUnO1xuZXhwb3J0IHsgV3JhcFBpcGUgfSBmcm9tICcuL3dyYXAnO1xuIl19