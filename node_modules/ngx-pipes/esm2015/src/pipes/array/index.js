/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { DiffPipe } from './diff';
import { InitialPipe } from './initial';
import { FlattenPipe } from './flatten';
import { IntersectionPipe } from './intersection';
import { ReversePipe } from './reverse';
import { TailPipe } from './tail';
import { TrurthifyPipe } from './truthify';
import { UnionPipe } from './union';
import { UniquePipe } from './unique';
import { WithoutPipe } from './without';
import { PluckPipe } from './pluck';
import { ShufflePipe } from './shuffle';
import { EveryPipe } from './every';
import { SomePipe } from './some';
import { SamplePipe } from './sample';
import { GroupByPipe } from './group-by';
import { FilterByPipe } from './filter-by';
import { OrderByPipe } from './order-by';
import { NgModule } from '@angular/core';
import { GroupByImpurePipe } from './group-by-impure';
import { FilterByImpurePipe } from './filter-by-impure';
import { OrderByImpurePipe } from './order-by-impure';
import { RangePipe } from './range';
const /** @type {?} */ ARRAY_PIPES = [
    DiffPipe,
    FlattenPipe,
    InitialPipe,
    IntersectionPipe,
    ReversePipe,
    TailPipe,
    TrurthifyPipe,
    UnionPipe,
    UniquePipe,
    WithoutPipe,
    PluckPipe,
    ShufflePipe,
    EveryPipe,
    SomePipe,
    SamplePipe,
    GroupByPipe,
    GroupByImpurePipe,
    FilterByPipe,
    FilterByImpurePipe,
    OrderByPipe,
    OrderByImpurePipe,
    RangePipe,
];
export class NgArrayPipesModule {
}
NgArrayPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: ARRAY_PIPES,
                imports: [],
                exports: ARRAY_PIPES,
            },] },
];
export { DiffPipe } from './diff';
export { InitialPipe } from './initial';
export { FlattenPipe } from './flatten';
export { IntersectionPipe } from './intersection';
export { ReversePipe } from './reverse';
export { TailPipe } from './tail';
export { TrurthifyPipe } from './truthify';
export { UnionPipe } from './union';
export { UniquePipe } from './unique';
export { WithoutPipe } from './without';
export { PluckPipe } from './pluck';
export { ShufflePipe } from './shuffle';
export { EveryPipe } from './every';
export { SomePipe } from './some';
export { SamplePipe } from './sample';
export { GroupByPipe } from './group-by';
export { FilterByPipe } from './filter-by';
export { OrderByPipe } from './order-by';
export { GroupByImpurePipe } from './group-by-impure';
export { FilterByImpurePipe } from './filter-by-impure';
export { OrderByImpurePipe } from './order-by-impure';
export { RangePipe } from './range';

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvYXJyYXkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDcEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN6QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFcEMsdUJBQU0sV0FBVyxHQUFHO0lBQ2xCLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLGdCQUFnQjtJQUNoQixXQUFXO0lBQ1gsUUFBUTtJQUNSLGFBQWE7SUFDYixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxpQkFBaUI7SUFDakIsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixXQUFXO0lBQ1gsaUJBQWlCO0lBQ2pCLFNBQVM7Q0FDVixDQUFDO0FBT0YsTUFBTTs7O1lBTEwsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxXQUFXO2dCQUN6QixPQUFPLEVBQUUsRUFBRTtnQkFDWCxPQUFPLEVBQUUsV0FBVzthQUNyQjs7QUFHRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpZmZQaXBlIH0gZnJvbSAnLi9kaWZmJztcbmltcG9ydCB7IEluaXRpYWxQaXBlIH0gZnJvbSAnLi9pbml0aWFsJztcbmltcG9ydCB7IEZsYXR0ZW5QaXBlIH0gZnJvbSAnLi9mbGF0dGVuJztcbmltcG9ydCB7IEludGVyc2VjdGlvblBpcGUgfSBmcm9tICcuL2ludGVyc2VjdGlvbic7XG5pbXBvcnQgeyBSZXZlcnNlUGlwZSB9IGZyb20gJy4vcmV2ZXJzZSc7XG5pbXBvcnQgeyBUYWlsUGlwZSB9IGZyb20gJy4vdGFpbCc7XG5pbXBvcnQgeyBUcnVydGhpZnlQaXBlIH0gZnJvbSAnLi90cnV0aGlmeSc7XG5pbXBvcnQgeyBVbmlvblBpcGUgfSBmcm9tICcuL3VuaW9uJztcbmltcG9ydCB7IFVuaXF1ZVBpcGUgfSBmcm9tICcuL3VuaXF1ZSc7XG5pbXBvcnQgeyBXaXRob3V0UGlwZSB9IGZyb20gJy4vd2l0aG91dCc7XG5pbXBvcnQgeyBQbHVja1BpcGUgfSBmcm9tICcuL3BsdWNrJztcbmltcG9ydCB7IFNodWZmbGVQaXBlIH0gZnJvbSAnLi9zaHVmZmxlJztcbmltcG9ydCB7IEV2ZXJ5UGlwZSB9IGZyb20gJy4vZXZlcnknO1xuaW1wb3J0IHsgU29tZVBpcGUgfSBmcm9tICcuL3NvbWUnO1xuaW1wb3J0IHsgU2FtcGxlUGlwZSB9IGZyb20gJy4vc2FtcGxlJztcbmltcG9ydCB7IEdyb3VwQnlQaXBlIH0gZnJvbSAnLi9ncm91cC1ieSc7XG5pbXBvcnQgeyBGaWx0ZXJCeVBpcGUgfSBmcm9tICcuL2ZpbHRlci1ieSc7XG5pbXBvcnQgeyBPcmRlckJ5UGlwZSB9IGZyb20gJy4vb3JkZXItYnknO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdyb3VwQnlJbXB1cmVQaXBlIH0gZnJvbSAnLi9ncm91cC1ieS1pbXB1cmUnO1xuaW1wb3J0IHsgRmlsdGVyQnlJbXB1cmVQaXBlIH0gZnJvbSAnLi9maWx0ZXItYnktaW1wdXJlJztcbmltcG9ydCB7IE9yZGVyQnlJbXB1cmVQaXBlIH0gZnJvbSAnLi9vcmRlci1ieS1pbXB1cmUnO1xuaW1wb3J0IHsgUmFuZ2VQaXBlIH0gZnJvbSAnLi9yYW5nZSc7XG5cbmNvbnN0IEFSUkFZX1BJUEVTID0gW1xuICBEaWZmUGlwZSxcbiAgRmxhdHRlblBpcGUsXG4gIEluaXRpYWxQaXBlLFxuICBJbnRlcnNlY3Rpb25QaXBlLFxuICBSZXZlcnNlUGlwZSxcbiAgVGFpbFBpcGUsXG4gIFRydXJ0aGlmeVBpcGUsXG4gIFVuaW9uUGlwZSxcbiAgVW5pcXVlUGlwZSxcbiAgV2l0aG91dFBpcGUsXG4gIFBsdWNrUGlwZSxcbiAgU2h1ZmZsZVBpcGUsXG4gIEV2ZXJ5UGlwZSxcbiAgU29tZVBpcGUsXG4gIFNhbXBsZVBpcGUsXG4gIEdyb3VwQnlQaXBlLFxuICBHcm91cEJ5SW1wdXJlUGlwZSxcbiAgRmlsdGVyQnlQaXBlLFxuICBGaWx0ZXJCeUltcHVyZVBpcGUsXG4gIE9yZGVyQnlQaXBlLFxuICBPcmRlckJ5SW1wdXJlUGlwZSxcbiAgUmFuZ2VQaXBlLFxuXTtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBBUlJBWV9QSVBFUyxcbiAgaW1wb3J0czogW10sXG4gIGV4cG9ydHM6IEFSUkFZX1BJUEVTLFxufSlcbmV4cG9ydCBjbGFzcyBOZ0FycmF5UGlwZXNNb2R1bGUge31cblxuZXhwb3J0IHsgRGlmZlBpcGUgfSBmcm9tICcuL2RpZmYnO1xuZXhwb3J0IHsgSW5pdGlhbFBpcGUgfSBmcm9tICcuL2luaXRpYWwnO1xuZXhwb3J0IHsgRmxhdHRlblBpcGUgfSBmcm9tICcuL2ZsYXR0ZW4nO1xuZXhwb3J0IHsgSW50ZXJzZWN0aW9uUGlwZSB9IGZyb20gJy4vaW50ZXJzZWN0aW9uJztcbmV4cG9ydCB7IFJldmVyc2VQaXBlIH0gZnJvbSAnLi9yZXZlcnNlJztcbmV4cG9ydCB7IFRhaWxQaXBlIH0gZnJvbSAnLi90YWlsJztcbmV4cG9ydCB7IFRydXJ0aGlmeVBpcGUgfSBmcm9tICcuL3RydXRoaWZ5JztcbmV4cG9ydCB7IFVuaW9uUGlwZSB9IGZyb20gJy4vdW5pb24nO1xuZXhwb3J0IHsgVW5pcXVlUGlwZSB9IGZyb20gJy4vdW5pcXVlJztcbmV4cG9ydCB7IFdpdGhvdXRQaXBlIH0gZnJvbSAnLi93aXRob3V0JztcbmV4cG9ydCB7IFBsdWNrUGlwZSB9IGZyb20gJy4vcGx1Y2snO1xuZXhwb3J0IHsgU2h1ZmZsZVBpcGUgfSBmcm9tICcuL3NodWZmbGUnO1xuZXhwb3J0IHsgRXZlcnlQaXBlIH0gZnJvbSAnLi9ldmVyeSc7XG5leHBvcnQgeyBTb21lUGlwZSB9IGZyb20gJy4vc29tZSc7XG5leHBvcnQgeyBTYW1wbGVQaXBlIH0gZnJvbSAnLi9zYW1wbGUnO1xuZXhwb3J0IHsgR3JvdXBCeVBpcGUgfSBmcm9tICcuL2dyb3VwLWJ5JztcbmV4cG9ydCB7IEZpbHRlckJ5UGlwZSB9IGZyb20gJy4vZmlsdGVyLWJ5JztcbmV4cG9ydCB7IE9yZGVyQnlQaXBlIH0gZnJvbSAnLi9vcmRlci1ieSc7XG5leHBvcnQgeyBHcm91cEJ5SW1wdXJlUGlwZSB9IGZyb20gJy4vZ3JvdXAtYnktaW1wdXJlJztcbmV4cG9ydCB7IEZpbHRlckJ5SW1wdXJlUGlwZSB9IGZyb20gJy4vZmlsdGVyLWJ5LWltcHVyZSc7XG5leHBvcnQgeyBPcmRlckJ5SW1wdXJlUGlwZSB9IGZyb20gJy4vb3JkZXItYnktaW1wdXJlJztcbmV4cG9ydCB7IFJhbmdlUGlwZSB9IGZyb20gJy4vcmFuZ2UnO1xuIl19