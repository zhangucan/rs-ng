/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
export function isUndefined(value) {
    return typeof value === 'undefined';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isFunction(value) {
    return typeof value === 'function';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNumber(value) {
    return typeof value === 'number';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isString(value) {
    return typeof value === 'string';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isBoolean(value) {
    return typeof value === 'boolean';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isObject(value) {
    return value !== null && typeof value === 'object';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNumberFinite(value) {
    return isNumber(value) && isFinite(value);
}
/**
 * @param {?} letter
 * @return {?}
 */
export function isVowel(letter) {
    const /** @type {?} */ vowels = ['a', 'e', 'i', 'o', 'u'];
    return vowels.indexOf(letter) !== -1;
}
/**
 * @param {?} num
 * @param {?} precision
 * @return {?}
 */
export function applyPrecision(num, precision) {
    if (precision <= 0) {
        return Math.round(num);
    }
    const /** @type {?} */ tho = Math.pow(10, precision);
    return Math.round(num * tho) / tho;
}
/**
 * @param {?} obj
 * @param {?} map
 * @return {?}
 */
export function extractDeepPropertyByMapKey(obj, map) {
    const /** @type {?} */ keys = map.split('.');
    const /** @type {?} */ head = keys.shift();
    return keys.reduce((prop, key) => {
        return !isUndefined(prop) && !isUndefined(prop[key]) ? prop[key] : undefined;
    }, obj[head || '']);
}
/**
 * @param {?} obj
 * @param {?} map
 * @return {?}
 */
export function extractDeepPropertyByParentMapKey(obj, map) {
    const /** @type {?} */ keys = map.split('.');
    const /** @type {?} */ tail = keys.pop();
    const /** @type {?} */ props = extractDeepPropertyByMapKey(obj, keys.join('.'));
    return { props, tail };
}
/**
 * @param {?} obj
 * @param {?} other
 * @return {?}
 */
export function getKeysTwoObjects(obj, other) {
    return [...Object.keys(obj), ...Object.keys(other)].filter((key, index, array) => array.indexOf(key) === index);
}
/**
 * @param {?} obj
 * @param {?} other
 * @return {?}
 */
export function isDeepEqual(obj, other) {
    if (!isObject(obj) || !isObject(other)) {
        return obj === other;
    }
    return getKeysTwoObjects(obj, other).every((key) => {
        if (!isObject(obj[key]) && !isObject(other[key])) {
            return obj[key] === other[key];
        }
        if (!isObject(obj[key]) || !isObject(other[key])) {
            return false;
        }
        return isDeepEqual(obj[key], other[key]);
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1waXBlcy8iLCJzb3VyY2VzIjpbInNyYy9waXBlcy9oZWxwZXJzL2hlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxNQUFNLHNCQUFzQixLQUFVO0lBQ3BDLE1BQU0sQ0FBQyxPQUFPLEtBQUssS0FBSyxXQUFXLENBQUM7Q0FDckM7Ozs7O0FBRUQsTUFBTSxxQkFBcUIsS0FBVTtJQUNuQyxNQUFNLENBQUMsT0FBTyxLQUFLLEtBQUssVUFBVSxDQUFDO0NBQ3BDOzs7OztBQUVELE1BQU0sbUJBQW1CLEtBQVU7SUFDakMsTUFBTSxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQztDQUNsQzs7Ozs7QUFFRCxNQUFNLG1CQUFtQixLQUFVO0lBQ2pDLE1BQU0sQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7Q0FDbEM7Ozs7O0FBRUQsTUFBTSxvQkFBb0IsS0FBVTtJQUNsQyxNQUFNLENBQUMsT0FBTyxLQUFLLEtBQUssU0FBUyxDQUFDO0NBQ25DOzs7OztBQUVELE1BQU0sbUJBQW1CLEtBQVU7SUFDakMsTUFBTSxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDO0NBQ3BEOzs7OztBQUVELE1BQU0seUJBQXlCLEtBQVU7SUFDdkMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDM0M7Ozs7O0FBRUQsTUFBTSxrQkFBa0IsTUFBYztJQUNwQyx1QkFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFekMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Q0FDdEM7Ozs7OztBQUVELE1BQU0seUJBQXlCLEdBQVcsRUFBRSxTQUFpQjtJQUMzRCxFQUFFLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN4QjtJQUVELHVCQUFNLEdBQUcsR0FBRyxTQUFBLEVBQUUsRUFBSSxTQUFTLENBQUEsQ0FBQztJQUU1QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0NBQ3BDOzs7Ozs7QUFFRCxNQUFNLHNDQUFzQyxHQUFRLEVBQUUsR0FBVztJQUMvRCx1QkFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1Qix1QkFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRTFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBUyxFQUFFLEdBQVcsRUFBRSxFQUFFO1FBQzVDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7S0FDOUUsRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDckI7Ozs7OztBQUVELE1BQU0sNENBQTRDLEdBQVEsRUFBRSxHQUFXO0lBQ3JFLHVCQUFNLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLHVCQUFNLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDeEIsdUJBQU0sS0FBSyxHQUFHLDJCQUEyQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFL0QsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDO0NBQ3hCOzs7Ozs7QUFFRCxNQUFNLDRCQUE0QixHQUFRLEVBQUUsS0FBVTtJQUNwRCxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUM7Q0FDakg7Ozs7OztBQUVELE1BQU0sc0JBQXNCLEdBQVEsRUFBRSxLQUFVO0lBQzlDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QyxNQUFNLENBQUMsR0FBRyxLQUFLLEtBQUssQ0FBQztLQUN0QjtJQUVELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUN4QyxDQUFDLEdBQVEsRUFBVyxFQUFFO1FBQ3BCLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqRCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNoQztRQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqRCxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ2Q7UUFFRCxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUMxQyxDQUNGLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlcih2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWU6IGFueSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlOiBhbnkpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlckZpbml0ZSh2YWx1ZTogYW55KSB7XG4gIHJldHVybiBpc051bWJlcih2YWx1ZSkgJiYgaXNGaW5pdGUodmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWb3dlbChsZXR0ZXI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCB2b3dlbHMgPSBbJ2EnLCAnZScsICdpJywgJ28nLCAndSddO1xuXG4gIHJldHVybiB2b3dlbHMuaW5kZXhPZihsZXR0ZXIpICE9PSAtMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UHJlY2lzaW9uKG51bTogbnVtYmVyLCBwcmVjaXNpb246IG51bWJlcikge1xuICBpZiAocHJlY2lzaW9uIDw9IDApIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChudW0pO1xuICB9XG5cbiAgY29uc3QgdGhvID0gMTAgKiogcHJlY2lzaW9uO1xuXG4gIHJldHVybiBNYXRoLnJvdW5kKG51bSAqIHRobykgLyB0aG87XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkob2JqOiBhbnksIG1hcDogc3RyaW5nKTogYW55IHtcbiAgY29uc3Qga2V5cyA9IG1hcC5zcGxpdCgnLicpO1xuICBjb25zdCBoZWFkID0ga2V5cy5zaGlmdCgpO1xuXG4gIHJldHVybiBrZXlzLnJlZHVjZSgocHJvcDogYW55LCBrZXk6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiAhaXNVbmRlZmluZWQocHJvcCkgJiYgIWlzVW5kZWZpbmVkKHByb3Bba2V5XSkgPyBwcm9wW2tleV0gOiB1bmRlZmluZWQ7XG4gIH0sIG9ialtoZWFkIHx8ICcnXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0RGVlcFByb3BlcnR5QnlQYXJlbnRNYXBLZXkob2JqOiBhbnksIG1hcDogc3RyaW5nKTogYW55IHtcbiAgY29uc3Qga2V5cyA9IG1hcC5zcGxpdCgnLicpO1xuICBjb25zdCB0YWlsID0ga2V5cy5wb3AoKTtcbiAgY29uc3QgcHJvcHMgPSBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkob2JqLCBrZXlzLmpvaW4oJy4nKSk7XG5cbiAgcmV0dXJuIHsgcHJvcHMsIHRhaWwgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEtleXNUd29PYmplY3RzKG9iajogYW55LCBvdGhlcjogYW55KTogYW55IHtcbiAgcmV0dXJuIFsuLi5PYmplY3Qua2V5cyhvYmopLCAuLi5PYmplY3Qua2V5cyhvdGhlcildLmZpbHRlcigoa2V5LCBpbmRleCwgYXJyYXkpID0+IGFycmF5LmluZGV4T2Yoa2V5KSA9PT0gaW5kZXgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWVwRXF1YWwob2JqOiBhbnksIG90aGVyOiBhbnkpOiBhbnkge1xuICBpZiAoIWlzT2JqZWN0KG9iaikgfHwgIWlzT2JqZWN0KG90aGVyKSkge1xuICAgIHJldHVybiBvYmogPT09IG90aGVyO1xuICB9XG5cbiAgcmV0dXJuIGdldEtleXNUd29PYmplY3RzKG9iaiwgb3RoZXIpLmV2ZXJ5KFxuICAgIChrZXk6IGFueSk6IGJvb2xlYW4gPT4ge1xuICAgICAgaWYgKCFpc09iamVjdChvYmpba2V5XSkgJiYgIWlzT2JqZWN0KG90aGVyW2tleV0pKSB7XG4gICAgICAgIHJldHVybiBvYmpba2V5XSA9PT0gb3RoZXJba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNPYmplY3Qob2JqW2tleV0pIHx8ICFpc09iamVjdChvdGhlcltrZXldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc0RlZXBFcXVhbChvYmpba2V5XSwgb3RoZXJba2V5XSk7XG4gICAgfVxuICApO1xufVxuIl19