/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from '@angular/core';
import { IsDefinedPipe } from './is-defined';
import { IsNullPipe } from './is-null';
import { IsUndefinedPipe } from './is-undefined';
import { IsStringPipe } from './is-string';
import { IsFunctionPipe } from './is-function';
import { IsNumberPipe } from './is-number';
import { IsArrayPipe } from './is-array';
import { IsObjectPipe } from './is-object';
import { IsGreaterEqualThanPipe } from './is-greater-equal-than';
import { IsGreaterThanPipe } from './is-greater-than';
import { IsLessEqualThanPipe } from './is-less-equal-than';
import { IsEqualToPipe } from './is-equal-to';
import { IsNotEqualToPipe } from './is-not-equal-to';
import { IsIdenticalToPipe } from './is-identical-to';
import { IsNotIdenticalToPipe } from './is-not-identical-to';
import { IsLessThanPipe } from './is-less-than';
export const /** @type {?} */ BOOLEAN_PIPES = [
    IsDefinedPipe,
    IsNullPipe,
    IsUndefinedPipe,
    IsStringPipe,
    IsFunctionPipe,
    IsNumberPipe,
    IsArrayPipe,
    IsObjectPipe,
    IsGreaterEqualThanPipe,
    IsGreaterThanPipe,
    IsLessEqualThanPipe,
    IsLessEqualThanPipe,
    IsEqualToPipe,
    IsNotEqualToPipe,
    IsIdenticalToPipe,
    IsNotIdenticalToPipe,
    IsLessThanPipe,
];
export class NgBooleanPipesModule {
}
NgBooleanPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: BOOLEAN_PIPES,
                imports: [],
                exports: BOOLEAN_PIPES,
            },] },
];
export { IsDefinedPipe } from './is-defined';
export { IsNullPipe } from './is-null';
export { IsUndefinedPipe } from './is-undefined';
export { IsStringPipe } from './is-string';
export { IsFunctionPipe } from './is-function';
export { IsNumberPipe } from './is-number';
export { IsArrayPipe } from './is-array';
export { IsObjectPipe } from './is-object';
export { IsGreaterEqualThanPipe } from './is-greater-equal-than';
export { IsGreaterThanPipe } from './is-greater-than';
export { IsLessEqualThanPipe } from './is-less-equal-than';
export { IsEqualToPipe } from './is-equal-to';
export { IsNotEqualToPipe } from './is-not-equal-to';
export { IsIdenticalToPipe } from './is-identical-to';
export { IsNotIdenticalToPipe } from './is-not-identical-to';
export { IsLessThanPipe } from './is-less-than';

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvYm9vbGVhbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzdELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVoRCxNQUFNLENBQUMsdUJBQU0sYUFBYSxHQUFHO0lBQzNCLGFBQWE7SUFDYixVQUFVO0lBQ1YsZUFBZTtJQUNmLFlBQVk7SUFDWixjQUFjO0lBQ2QsWUFBWTtJQUNaLFdBQVc7SUFDWCxZQUFZO0lBQ1osc0JBQXNCO0lBQ3RCLGlCQUFpQjtJQUNqQixtQkFBbUI7SUFDbkIsbUJBQW1CO0lBQ25CLGFBQWE7SUFDYixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLG9CQUFvQjtJQUNwQixjQUFjO0NBQ2YsQ0FBQztBQU9GLE1BQU07OztZQUxMLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUUsYUFBYTtnQkFDM0IsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsT0FBTyxFQUFFLGFBQWE7YUFDdkI7O0FBR0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM3QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDakUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSXNEZWZpbmVkUGlwZSB9IGZyb20gJy4vaXMtZGVmaW5lZCc7XG5pbXBvcnQgeyBJc051bGxQaXBlIH0gZnJvbSAnLi9pcy1udWxsJztcbmltcG9ydCB7IElzVW5kZWZpbmVkUGlwZSB9IGZyb20gJy4vaXMtdW5kZWZpbmVkJztcbmltcG9ydCB7IElzU3RyaW5nUGlwZSB9IGZyb20gJy4vaXMtc3RyaW5nJztcbmltcG9ydCB7IElzRnVuY3Rpb25QaXBlIH0gZnJvbSAnLi9pcy1mdW5jdGlvbic7XG5pbXBvcnQgeyBJc051bWJlclBpcGUgfSBmcm9tICcuL2lzLW51bWJlcic7XG5pbXBvcnQgeyBJc0FycmF5UGlwZSB9IGZyb20gJy4vaXMtYXJyYXknO1xuaW1wb3J0IHsgSXNPYmplY3RQaXBlIH0gZnJvbSAnLi9pcy1vYmplY3QnO1xuaW1wb3J0IHsgSXNHcmVhdGVyRXF1YWxUaGFuUGlwZSB9IGZyb20gJy4vaXMtZ3JlYXRlci1lcXVhbC10aGFuJztcbmltcG9ydCB7IElzR3JlYXRlclRoYW5QaXBlIH0gZnJvbSAnLi9pcy1ncmVhdGVyLXRoYW4nO1xuaW1wb3J0IHsgSXNMZXNzRXF1YWxUaGFuUGlwZSB9IGZyb20gJy4vaXMtbGVzcy1lcXVhbC10aGFuJztcbmltcG9ydCB7IElzRXF1YWxUb1BpcGUgfSBmcm9tICcuL2lzLWVxdWFsLXRvJztcbmltcG9ydCB7IElzTm90RXF1YWxUb1BpcGUgfSBmcm9tICcuL2lzLW5vdC1lcXVhbC10byc7XG5pbXBvcnQgeyBJc0lkZW50aWNhbFRvUGlwZSB9IGZyb20gJy4vaXMtaWRlbnRpY2FsLXRvJztcbmltcG9ydCB7IElzTm90SWRlbnRpY2FsVG9QaXBlIH0gZnJvbSAnLi9pcy1ub3QtaWRlbnRpY2FsLXRvJztcbmltcG9ydCB7IElzTGVzc1RoYW5QaXBlIH0gZnJvbSAnLi9pcy1sZXNzLXRoYW4nO1xuXG5leHBvcnQgY29uc3QgQk9PTEVBTl9QSVBFUyA9IFtcbiAgSXNEZWZpbmVkUGlwZSxcbiAgSXNOdWxsUGlwZSxcbiAgSXNVbmRlZmluZWRQaXBlLFxuICBJc1N0cmluZ1BpcGUsXG4gIElzRnVuY3Rpb25QaXBlLFxuICBJc051bWJlclBpcGUsXG4gIElzQXJyYXlQaXBlLFxuICBJc09iamVjdFBpcGUsXG4gIElzR3JlYXRlckVxdWFsVGhhblBpcGUsXG4gIElzR3JlYXRlclRoYW5QaXBlLFxuICBJc0xlc3NFcXVhbFRoYW5QaXBlLFxuICBJc0xlc3NFcXVhbFRoYW5QaXBlLFxuICBJc0VxdWFsVG9QaXBlLFxuICBJc05vdEVxdWFsVG9QaXBlLFxuICBJc0lkZW50aWNhbFRvUGlwZSxcbiAgSXNOb3RJZGVudGljYWxUb1BpcGUsXG4gIElzTGVzc1RoYW5QaXBlLFxuXTtcblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBCT09MRUFOX1BJUEVTLFxuICBpbXBvcnRzOiBbXSxcbiAgZXhwb3J0czogQk9PTEVBTl9QSVBFUyxcbn0pXG5leHBvcnQgY2xhc3MgTmdCb29sZWFuUGlwZXNNb2R1bGUge31cblxuZXhwb3J0IHsgSXNEZWZpbmVkUGlwZSB9IGZyb20gJy4vaXMtZGVmaW5lZCc7XG5leHBvcnQgeyBJc051bGxQaXBlIH0gZnJvbSAnLi9pcy1udWxsJztcbmV4cG9ydCB7IElzVW5kZWZpbmVkUGlwZSB9IGZyb20gJy4vaXMtdW5kZWZpbmVkJztcbmV4cG9ydCB7IElzU3RyaW5nUGlwZSB9IGZyb20gJy4vaXMtc3RyaW5nJztcbmV4cG9ydCB7IElzRnVuY3Rpb25QaXBlIH0gZnJvbSAnLi9pcy1mdW5jdGlvbic7XG5leHBvcnQgeyBJc051bWJlclBpcGUgfSBmcm9tICcuL2lzLW51bWJlcic7XG5leHBvcnQgeyBJc0FycmF5UGlwZSB9IGZyb20gJy4vaXMtYXJyYXknO1xuZXhwb3J0IHsgSXNPYmplY3RQaXBlIH0gZnJvbSAnLi9pcy1vYmplY3QnO1xuZXhwb3J0IHsgSXNHcmVhdGVyRXF1YWxUaGFuUGlwZSB9IGZyb20gJy4vaXMtZ3JlYXRlci1lcXVhbC10aGFuJztcbmV4cG9ydCB7IElzR3JlYXRlclRoYW5QaXBlIH0gZnJvbSAnLi9pcy1ncmVhdGVyLXRoYW4nO1xuZXhwb3J0IHsgSXNMZXNzRXF1YWxUaGFuUGlwZSB9IGZyb20gJy4vaXMtbGVzcy1lcXVhbC10aGFuJztcbmV4cG9ydCB7IElzRXF1YWxUb1BpcGUgfSBmcm9tICcuL2lzLWVxdWFsLXRvJztcbmV4cG9ydCB7IElzTm90RXF1YWxUb1BpcGUgfSBmcm9tICcuL2lzLW5vdC1lcXVhbC10byc7XG5leHBvcnQgeyBJc0lkZW50aWNhbFRvUGlwZSB9IGZyb20gJy4vaXMtaWRlbnRpY2FsLXRvJztcbmV4cG9ydCB7IElzTm90SWRlbnRpY2FsVG9QaXBlIH0gZnJvbSAnLi9pcy1ub3QtaWRlbnRpY2FsLXRvJztcbmV4cG9ydCB7IElzTGVzc1RoYW5QaXBlIH0gZnJvbSAnLi9pcy1sZXNzLXRoYW4nO1xuIl19