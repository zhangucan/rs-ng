import { Observable } from 'rxjs';
import { Component, HostBinding, ViewChild, ViewContainerRef, NgModule } from '@angular/core';
import { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { ErCoreModule } from '@er/core';
import { ErValidateModule } from '@er/validate';
import { FieldArrayType, FormlyFormBuilder, FieldType, FieldWrapper, FormlyModule } from '@ngx-formly/core';
import { FormlyWrappers, ErFormlyModule } from '@er/formly';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BsArrayTypeComponent extends FieldArrayType {
    /**
     * @param {?} builder
     */
    constructor(builder) {
        super(builder);
    }
    /**
     * @param {?} i
     * @param {?} step
     * @return {?}
     */
    move(i, step) {
        this.model.splice(i + step, 0, ...this.model.splice(i, 1));
        ((/** @type {?} */ (this.options)))._buildForm();
    }
}
BsArrayTypeComponent.decorators = [
    { type: Component, args: [{
                template: `
    <div *ngFor="let field of field.fieldGroup; let i = index;">
      <formly-group
        [model]="model[i]"
        [field]="field"
        [options]="options"
        [form]="formControl">
        <div class="col-sm-2 d-flex align-items-center">
          <button class="btn btn-danger" type="button" (click)="remove(i)">Remove</button>
        </div>
      </formly-group>
    </div>
    <div style="margin:30px 0;">
      <button class="btn btn-primary" type="button" (click)="add()"> Addd</button>
    </div>
    <!--<div *ngFor="let afield of field.fieldGroup; let i = index;" class="d-flex align-items-center justify-content-around">-->
      <!--<formly-field class="d-flex align-items-center justify-content-between" [field]="afield"></formly-field>-->
      <!--<div class="col-2">-->
        <!--<button *ngIf="model.length>0" type="button" class="mr-1 btn btn-danger btn-sm rounded-circle"-->
                <!--[title]="to['delBtnText'] || '删除' "-->
                <!--(click)="remove(i)">&#10005;-->
        <!--</button>-->
        <!--<button *ngIf="i>0" type="button" class="mr-1 btn btn-info btn-sm rounded-circle"-->
                <!--[title]="to['downBtnText'] || '下移' "-->
                <!--(click)="move(i, -1)">&#9650;-->
        <!--</button>-->
        <!--<button *ngIf="i<model.length-1" type="button" class="mr-1 btn btn-info btn-sm rounded-circle"-->
                <!--[title]="to['upBtnText'] || '上移' "-->
                <!--(click)="move(i, 1)">&#9660;-->
        <!--</button>-->
      <!--</div>-->
    <!--</div>-->
    <!--<div class="my-3">-->
      <!--<button class="btn btn-primary pull-right" type="button" (click)="add()"><i-->
        <!--class="fa fa-plus-circle"></i> {{ to['addBtnText'] || '增加'}}</button>-->
    <!--</div>-->
  `
            }] }
];
/** @nocollapse */
BsArrayTypeComponent.ctorParameters = () => [
    { type: FormlyFormBuilder }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BsCheckboxTypeComponent extends FieldType {
}
BsCheckboxTypeComponent.decorators = [
    { type: Component, args: [{
                template: `
    <div class="custom-control custom-checkbox">
      <input class="custom-control-input" type="checkbox"
        [class.is-invalid]="showError"
        [indeterminate]="to['indeterminate'] && field.formControl.value === null"
        [formControl]="formControl"
        [formlyAttributes]="field">
      <label class="custom-control-label" [for]="id">
        {{ to.label }}
        <span *ngIf="to.required && to['hideRequiredMarker'] !== true">*</span>
      </label>
    </div>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BsMultiCheckboxTypeComponent extends FieldType {
    /**
     * @param {?} model
     * @param {?} field
     * @return {?}
     */
    static createControl(model, field) {
        if (field.templateOptions.options instanceof Observable) {
            throw new Error(`[Formly Error] You cannot pass an Observable to a multicheckbox yet.`);
        }
        /** @type {?} */
        const controls = field.templateOptions.options.reduce((obj, option) => {
            obj[option.key] = new FormControl(model ? model[option.key] : undefined);
            return obj;
        }, {});
        return new FormGroup(controls, field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined);
    }
}
BsMultiCheckboxTypeComponent.decorators = [
    { type: Component, args: [{
                template: `
    <div class="custom-control custom-checkbox" *ngFor="let option of to.options; let i = index;">
      <input class="custom-control-input" type="checkbox"
        [id]="id + '_' + i"
        [value]="option.value"
        [formControl]="formControl.get(option.key)"
        [formlyAttributes]="field">
      <label class="custom-control-label" [for]="id + '_' + i">
        {{ option.value }}
      </label>
    </div>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BsInputTypeComponent extends FieldType {
    /**
     * @return {?}
     */
    get type() {
        return this.to.type || 'text';
    }
    /**
     * @return {?}
     */
    get inLineFlex() {
        return this.to.addonLeft || this.to.addonRight;
    }
    /**
     * @return {?}
     */
    get fileClass() {
        return this.to.addonLeft || this.to.addonRight;
    }
}
BsInputTypeComponent.decorators = [
    { type: Component, args: [{
                template: `
    <input *ngIf="type !== 'number' else numberTpl" [type]="type" [formControl]="formControl" class="form-control" [formlyAttributes]="field" [class.is-invalid]="showError">
    <ng-template #numberTpl>
      <input type="number" [formControl]="formControl" class="form-control" [formlyAttributes]="field" [class.is-invalid]="showError">
    </ng-template>
  `
            }] }
];
BsInputTypeComponent.propDecorators = {
    inLineFlex: [{ type: HostBinding, args: ['class.d-inline-flex',] }],
    fileClass: [{ type: HostBinding, args: ['class.custom-file',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BsTextAreaTypeComponent extends FieldType {
}
BsTextAreaTypeComponent.decorators = [
    { type: Component, args: [{
                template: `
    <textarea [formControl]="formControl" [cols]="to.cols"
      [rows]="to.rows" class="form-control" [class.is-invalid]="showError"
      [formlyAttributes]="field">
    </textarea>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BsButtonTypeComponent extends FieldType {
}
BsButtonTypeComponent.decorators = [
    { type: Component, args: [{
                template: `    
    <er-button [context]="model"></er-button>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BsSwitchTypeComponent extends FieldType {
}
BsSwitchTypeComponent.decorators = [
    { type: Component, args: [{
                template: `
      <div class="d-block">
          <label class="switch switch-text switch-pill switch-lg">
              <input type="checkbox" class='switch-input' [formControl]="formControl" [formlyAttributes]="field">
              <span class="switch-label" [attr.data-on]="to['onTitle']" [attr.data-off]="to['offTitle']"></span>
              <span class="switch-handle"></span>
          </label>
      </div>`
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const BS_FORMLY_TYPES = [
    BsTextAreaTypeComponent,
    BsInputTypeComponent,
    BsMultiCheckboxTypeComponent,
    BsCheckboxTypeComponent,
    BsArrayTypeComponent,
    BsButtonTypeComponent,
    BsSwitchTypeComponent,
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BsAddonsWrapperComponent extends FieldWrapper {
    /**
     * @param {?} $event
     * @return {?}
     */
    addonRightClick($event) {
        if (this.to.addonRight.onClick) {
            this.to.addonRight.onClick(this.to, this, $event);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    addonLeftClick($event) {
        if (this.to.addonLeft.onClick) {
            this.to.addonLeft.onClick(this.to, this, $event);
        }
    }
}
BsAddonsWrapperComponent.decorators = [
    { type: Component, args: [{
                template: `
    <div class="input-group">
      <div class="input-group-prepend"
        *ngIf="to['addonLeft']"
        [ngStyle]="{cursor: to.addonLeft.onClick ? 'pointer' : 'inherit'}"
        (click)="addonLeftClick($event)">
        <i class="input-group-text" [ngClass]="to['addonLeft'].class" *ngIf="to['addonLeft'].class"></i>
        <span *ngIf="to['addonLeft'].text" class="input-group-text">{{ to['addonLeft'].text }}</span>
      </div>
      <ng-template #fieldComponent></ng-template>
      <div class="input-group-append"
        *ngIf="to['addonRight']"
        [ngStyle]="{cursor: to['addonRight'].onClick ? 'pointer' : 'inherit'}"
        (click)="addonRightClick($event)">
        <i class="input-group-text" [ngClass]="to['addonRight'].class" *ngIf="to['addonRight'].class"></i>
        <span *ngIf="to['addonRight'].text" class="input-group-text">{{ to['addonRight'].text }}</span>
      </div>
    </div>
  `,
                styles: [`
    :host /deep/ .input-group>:not(:first-child)> .form-control {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
    :host /deep/ .input-group>:not(:last-child)> .form-control {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
  `]
            }] }
];
BsAddonsWrapperComponent.propDecorators = {
    fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const BS_FORMLY_WRAPPERS = [
    BsAddonsWrapperComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const BsFormlyTypes = {
    input: 'bsInput',
    checkbox: 'bsCheckbox',
    radio: 'bsRadio',
    select: 'bsSelect',
    switch: 'bsSwitch',
    button: 'bsButton',
    textArea: 'bsTextArea',
    multiCheckbox: 'bsMultiCheckbox',
    multiSelect: 'bsMultiSelect',
    array: 'bsArray',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const FormlyBsWrappers = {
    field: 'bsFieldWrapper',
    addon: 'bsAddonWrapper'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TemplateAddons {
    /**
     * @param {?} fc
     * @return {?}
     */
    run(fc) {
        fc.templateManipulators.postWrapper.push((field) => {
            if (field && field.type && field.type.startsWith('bs') &&
                field.templateOptions && (field.templateOptions.addonLeft || field.templateOptions.addonRight)) {
                return FormlyBsWrappers.addon;
            }
        });
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const BS_FORMLY_CONFIG = {
    types: [
        {
            name: BsFormlyTypes.input,
            component: BsInputTypeComponent,
            wrappers: [FormlyWrappers.vertical]
        },
        {
            name: BsFormlyTypes.checkbox,
            component: BsCheckboxTypeComponent,
            wrappers: [FormlyWrappers.vertical],
            defaultOptions: {
                templateOptions: {
                    indeterminate: true,
                    hideLabel: true
                }
            }
        },
        {
            name: BsFormlyTypes.textArea,
            component: BsTextAreaTypeComponent,
            wrappers: [FormlyWrappers.vertical],
            defaultOptions: {
                templateOptions: {
                    cols: 1,
                    rows: 1
                }
            }
        },
        {
            name: BsFormlyTypes.multiCheckbox,
            component: BsMultiCheckboxTypeComponent,
            wrappers: [FormlyWrappers.vertical],
            defaultOptions: {
                templateOptions: {
                    options: []
                }
            }
        },
        {
            name: BsFormlyTypes.switch,
            component: BsSwitchTypeComponent,
            wrappers: [FormlyWrappers.vertical]
        },
        {
            name: BsFormlyTypes.array,
            component: BsArrayTypeComponent,
            wrappers: [FormlyWrappers.vertical]
        },
        {
            name: BsFormlyTypes.button,
            component: BsButtonTypeComponent,
            wrappers: [FormlyWrappers.vertical]
        }
    ],
    wrappers: [
        { name: FormlyBsWrappers.addon, component: BsAddonsWrapperComponent }
    ],
    manipulators: [
        { class: TemplateAddons, method: 'run' }
    ]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ErFormlyBootstrapModule {
}
ErFormlyBootstrapModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    ReactiveFormsModule,
                    ErCoreModule,
                    ErFormlyModule,
                    ErValidateModule,
                    FormlyModule.forChild(BS_FORMLY_CONFIG)
                ],
                declarations: [
                    ...BS_FORMLY_TYPES,
                    ...BS_FORMLY_WRAPPERS
                ],
                exports: [
                    FormlyModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ErFormlyBootstrapModule, BS_FORMLY_TYPES, BsCheckboxTypeComponent, BsMultiCheckboxTypeComponent, BsInputTypeComponent, BsTextAreaTypeComponent, BsAddonsWrapperComponent, BS_FORMLY_WRAPPERS, BsFormlyTypes, FormlyBsWrappers, BS_FORMLY_CONFIG as ɵd, BsArrayTypeComponent as ɵa, BsButtonTypeComponent as ɵb, BsSwitchTypeComponent as ɵc, TemplateAddons as ɵe };

//# sourceMappingURL=er-formly-bootstrap.js.map