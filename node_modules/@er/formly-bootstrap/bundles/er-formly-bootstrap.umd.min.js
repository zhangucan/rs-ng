!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("rxjs"),require("@angular/core"),require("@angular/forms"),require("@er/core"),require("@er/validate"),require("@ngx-formly/core"),require("@er/formly")):"function"==typeof define&&define.amd?define("@er/formly-bootstrap",["exports","rxjs","@angular/core","@angular/forms","@er/core","@er/validate","@ngx-formly/core","@er/formly"],e):e((t.er=t.er||{},t.er["formly-bootstrap"]={}),t.rxjs,t.ng.core,t.ng.forms,t.core$1,t.validate,t.core$2,t.formly)}(this,function(t,o,n,r,e,i,l,a){"use strict";var s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function p(t,e){function n(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function c(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var o,r,i=n.call(t),l=[];try{for(;(void 0===e||0<e--)&&!(o=i.next()).done;)l.push(o.value)}catch(a){r={error:a}}finally{try{o&&!o.done&&(n=i["return"])&&n.call(i)}finally{if(r)throw r.error}}return l}function d(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(c(arguments[e]));return t}var u=function(e){function t(t){return e.call(this,t)||this}return p(t,e),t.prototype.move=function(t,e){var n;(n=this.model).splice.apply(n,d([t+e,0],this.model.splice(t,1))),this.options._buildForm()},t.decorators=[{type:n.Component,args:[{template:'\n    <div *ngFor="let field of field.fieldGroup; let i = index;">\n      <formly-group\n        [model]="model[i]"\n        [field]="field"\n        [options]="options"\n        [form]="formControl">\n        <div class="col-sm-2 d-flex align-items-center">\n          <button class="btn btn-danger" type="button" (click)="remove(i)">Remove</button>\n        </div>\n      </formly-group>\n    </div>\n    <div style="margin:30px 0;">\n      <button class="btn btn-primary" type="button" (click)="add()"> Addd</button>\n    </div>\n    \x3c!--<div *ngFor="let afield of field.fieldGroup; let i = index;" class="d-flex align-items-center justify-content-around">--\x3e\n      \x3c!--<formly-field class="d-flex align-items-center justify-content-between" [field]="afield"></formly-field>--\x3e\n      \x3c!--<div class="col-2">--\x3e\n        \x3c!--<button *ngIf="model.length>0" type="button" class="mr-1 btn btn-danger btn-sm rounded-circle"--\x3e\n                \x3c!--[title]="to[\'delBtnText\'] || \'删除\' "--\x3e\n                \x3c!--(click)="remove(i)">&#10005;--\x3e\n        \x3c!--</button>--\x3e\n        \x3c!--<button *ngIf="i>0" type="button" class="mr-1 btn btn-info btn-sm rounded-circle"--\x3e\n                \x3c!--[title]="to[\'downBtnText\'] || \'下移\' "--\x3e\n                \x3c!--(click)="move(i, -1)">&#9650;--\x3e\n        \x3c!--</button>--\x3e\n        \x3c!--<button *ngIf="i<model.length-1" type="button" class="mr-1 btn btn-info btn-sm rounded-circle"--\x3e\n                \x3c!--[title]="to[\'upBtnText\'] || \'上移\' "--\x3e\n                \x3c!--(click)="move(i, 1)">&#9660;--\x3e\n        \x3c!--</button>--\x3e\n      \x3c!--</div>--\x3e\n    \x3c!--</div>--\x3e\n    \x3c!--<div class="my-3">--\x3e\n      \x3c!--<button class="btn btn-primary pull-right" type="button" (click)="add()"><i--\x3e\n        \x3c!--class="fa fa-plus-circle"></i> {{ to[\'addBtnText\'] || \'增加\'}}</button>--\x3e\n    \x3c!--</div>--\x3e\n  '}]}],t.ctorParameters=function(){return[{type:l.FormlyFormBuilder}]},t}(l.FieldArrayType),f=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return p(e,t),e.decorators=[{type:n.Component,args:[{template:'\n    <div class="custom-control custom-checkbox">\n      <input class="custom-control-input" type="checkbox"\n        [class.is-invalid]="showError"\n        [indeterminate]="to[\'indeterminate\'] && field.formControl.value === null"\n        [formControl]="formControl"\n        [formlyAttributes]="field">\n      <label class="custom-control-label" [for]="id">\n        {{ to.label }}\n        <span *ngIf="to.required && to[\'hideRequiredMarker\'] !== true">*</span>\n      </label>\n    </div>\n  '}]}],e}(l.FieldType),m=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return p(e,t),e.createControl=function(n,t){if(t.templateOptions.options instanceof o.Observable)throw new Error("[Formly Error] You cannot pass an Observable to a multicheckbox yet.");var e=t.templateOptions.options.reduce(function(t,e){return t[e.key]=new r.FormControl(n?n[e.key]:undefined),t},{});return new r.FormGroup(e,t.validators?t.validators.validation:undefined,t.asyncValidators?t.asyncValidators.validation:undefined)},e.decorators=[{type:n.Component,args:[{template:'\n    <div class="custom-control custom-checkbox" *ngFor="let option of to.options; let i = index;">\n      <input class="custom-control-input" type="checkbox"\n        [id]="id + \'_\' + i"\n        [value]="option.value"\n        [formControl]="formControl.get(option.key)"\n        [formlyAttributes]="field">\n      <label class="custom-control-label" [for]="id + \'_\' + i">\n        {{ option.value }}\n      </label>\n    </div>\n  '}]}],e}(l.FieldType),y=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return p(e,t),Object.defineProperty(e.prototype,"type",{get:function(){return this.to.type||"text"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inLineFlex",{get:function(){return this.to.addonLeft||this.to.addonRight},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fileClass",{get:function(){return this.to.addonLeft||this.to.addonRight},enumerable:!0,configurable:!0}),e.decorators=[{type:n.Component,args:[{template:'\n    <input *ngIf="type !== \'number\' else numberTpl" [type]="type" [formControl]="formControl" class="form-control" [formlyAttributes]="field" [class.is-invalid]="showError">\n    <ng-template #numberTpl>\n      <input type="number" [formControl]="formControl" class="form-control" [formlyAttributes]="field" [class.is-invalid]="showError">\n    </ng-template>\n  '}]}],e.propDecorators={inLineFlex:[{type:n.HostBinding,args:["class.d-inline-flex"]}],fileClass:[{type:n.HostBinding,args:["class.custom-file"]}]},e}(l.FieldType),b=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return p(e,t),e.decorators=[{type:n.Component,args:[{template:'\n    <textarea [formControl]="formControl" [cols]="to.cols"\n      [rows]="to.rows" class="form-control" [class.is-invalid]="showError"\n      [formlyAttributes]="field">\n    </textarea>\n  '}]}],e}(l.FieldType),h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return p(e,t),e.decorators=[{type:n.Component,args:[{template:'    \n    <er-button [context]="model"></er-button>\n  '}]}],e}(l.FieldType),x=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return p(e,t),e.decorators=[{type:n.Component,args:[{template:'\n      <div class="d-block">\n          <label class="switch switch-text switch-pill switch-lg">\n              <input type="checkbox" class=\'switch-input\' [formControl]="formControl" [formlyAttributes]="field">\n              <span class="switch-label" [attr.data-on]="to[\'onTitle\']" [attr.data-off]="to[\'offTitle\']"></span>\n              <span class="switch-handle"></span>\n          </label>\n      </div>'}]}],e}(l.FieldType),g=[b,y,m,f,u,h,x],v=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return p(e,t),e.prototype.addonRightClick=function(t){this.to.addonRight.onClick&&this.to.addonRight.onClick(this.to,this,t)},e.prototype.addonLeftClick=function(t){this.to.addonLeft.onClick&&this.to.addonLeft.onClick(this.to,this,t)},e.decorators=[{type:n.Component,args:[{template:'\n    <div class="input-group">\n      <div class="input-group-prepend"\n        *ngIf="to[\'addonLeft\']"\n        [ngStyle]="{cursor: to.addonLeft.onClick ? \'pointer\' : \'inherit\'}"\n        (click)="addonLeftClick($event)">\n        <i class="input-group-text" [ngClass]="to[\'addonLeft\'].class" *ngIf="to[\'addonLeft\'].class"></i>\n        <span *ngIf="to[\'addonLeft\'].text" class="input-group-text">{{ to[\'addonLeft\'].text }}</span>\n      </div>\n      <ng-template #fieldComponent></ng-template>\n      <div class="input-group-append"\n        *ngIf="to[\'addonRight\']"\n        [ngStyle]="{cursor: to[\'addonRight\'].onClick ? \'pointer\' : \'inherit\'}"\n        (click)="addonRightClick($event)">\n        <i class="input-group-text" [ngClass]="to[\'addonRight\'].class" *ngIf="to[\'addonRight\'].class"></i>\n        <span *ngIf="to[\'addonRight\'].text" class="input-group-text">{{ to[\'addonRight\'].text }}</span>\n      </div>\n    </div>\n  ',styles:["\n    :host /deep/ .input-group>:not(:first-child)> .form-control {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n    :host /deep/ .input-group>:not(:last-child)> .form-control {\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n  "]}]}],e.propDecorators={fieldComponent:[{type:n.ViewChild,args:["fieldComponent",{read:n.ViewContainerRef}]}]},e}(l.FieldWrapper),C=[v],k={input:"bsInput",checkbox:"bsCheckbox",radio:"bsRadio",select:"bsSelect","switch":"bsSwitch",button:"bsButton",textArea:"bsTextArea",multiCheckbox:"bsMultiCheckbox",multiSelect:"bsMultiSelect",array:"bsArray"},w={field:"bsFieldWrapper",addon:"bsAddonWrapper"},F=function(){function t(){}return t.prototype.run=function(t){t.templateManipulators.postWrapper.push(function(t){if(t&&t.type&&t.type.startsWith("bs")&&t.templateOptions&&(t.templateOptions.addonLeft||t.templateOptions.addonRight))return w.addon})},t}(),O={types:[{name:k.input,component:y,wrappers:[a.FormlyWrappers.vertical]},{name:k.checkbox,component:f,wrappers:[a.FormlyWrappers.vertical],defaultOptions:{templateOptions:{indeterminate:!0,hideLabel:!0}}},{name:k.textArea,component:b,wrappers:[a.FormlyWrappers.vertical],defaultOptions:{templateOptions:{cols:1,rows:1}}},{name:k.multiCheckbox,component:m,wrappers:[a.FormlyWrappers.vertical],defaultOptions:{templateOptions:{options:[]}}},{name:k["switch"],component:x,wrappers:[a.FormlyWrappers.vertical]},{name:k.array,component:u,wrappers:[a.FormlyWrappers.vertical]},{name:k.button,component:h,wrappers:[a.FormlyWrappers.vertical]}],wrappers:[{name:w.addon,component:v}],manipulators:[{"class":F,method:"run"}]},T=function(){function t(){}return t.decorators=[{type:n.NgModule,args:[{imports:[r.ReactiveFormsModule,e.ErCoreModule,a.ErFormlyModule,i.ErValidateModule,l.FormlyModule.forChild(O)],declarations:d(g,C),exports:[l.FormlyModule]}]}],t}();t.ErFormlyBootstrapModule=T,t.BS_FORMLY_TYPES=g,t.BsCheckboxTypeComponent=f,t.BsMultiCheckboxTypeComponent=m,t.BsInputTypeComponent=y,t.BsTextAreaTypeComponent=b,t.BsAddonsWrapperComponent=v,t.BS_FORMLY_WRAPPERS=C,t.BsFormlyTypes=k,t.FormlyBsWrappers=w,t.ɵd=O,t.ɵa=u,t.ɵb=h,t.ɵc=x,t.ɵe=F,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=er-formly-bootstrap.umd.min.js.map