(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/core'), require('@angular/forms'), require('@er/core'), require('@er/validate'), require('@ngx-formly/core'), require('@er/formly')) :
    typeof define === 'function' && define.amd ? define('@er/formly-bootstrap', ['exports', 'rxjs', '@angular/core', '@angular/forms', '@er/core', '@er/validate', '@ngx-formly/core', '@er/formly'], factory) :
    (factory((global.er = global.er || {}, global.er['formly-bootstrap'] = {}),global.rxjs,global.ng.core,global.ng.forms,global.core$1,global.validate,global.core$2,global.formly));
}(this, (function (exports,rxjs,core,forms,core$1,validate,core$2,formly) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BsArrayTypeComponent = /** @class */ (function (_super) {
        __extends(BsArrayTypeComponent, _super);
        function BsArrayTypeComponent(builder) {
            return _super.call(this, builder) || this;
        }
        /**
         * @param {?} i
         * @param {?} step
         * @return {?}
         */
        BsArrayTypeComponent.prototype.move = /**
         * @param {?} i
         * @param {?} step
         * @return {?}
         */
            function (i, step) {
                var _a;
                (_a = this.model).splice.apply(_a, __spread([i + step, 0], this.model.splice(i, 1)));
                (( /** @type {?} */(this.options)))._buildForm();
            };
        BsArrayTypeComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <div *ngFor=\"let field of field.fieldGroup; let i = index;\">\n      <formly-group\n        [model]=\"model[i]\"\n        [field]=\"field\"\n        [options]=\"options\"\n        [form]=\"formControl\">\n        <div class=\"col-sm-2 d-flex align-items-center\">\n          <button class=\"btn btn-danger\" type=\"button\" (click)=\"remove(i)\">Remove</button>\n        </div>\n      </formly-group>\n    </div>\n    <div style=\"margin:30px 0;\">\n      <button class=\"btn btn-primary\" type=\"button\" (click)=\"add()\"> Addd</button>\n    </div>\n    <!--<div *ngFor=\"let afield of field.fieldGroup; let i = index;\" class=\"d-flex align-items-center justify-content-around\">-->\n      <!--<formly-field class=\"d-flex align-items-center justify-content-between\" [field]=\"afield\"></formly-field>-->\n      <!--<div class=\"col-2\">-->\n        <!--<button *ngIf=\"model.length>0\" type=\"button\" class=\"mr-1 btn btn-danger btn-sm rounded-circle\"-->\n                <!--[title]=\"to['delBtnText'] || '\u5220\u9664' \"-->\n                <!--(click)=\"remove(i)\">&#10005;-->\n        <!--</button>-->\n        <!--<button *ngIf=\"i>0\" type=\"button\" class=\"mr-1 btn btn-info btn-sm rounded-circle\"-->\n                <!--[title]=\"to['downBtnText'] || '\u4E0B\u79FB' \"-->\n                <!--(click)=\"move(i, -1)\">&#9650;-->\n        <!--</button>-->\n        <!--<button *ngIf=\"i<model.length-1\" type=\"button\" class=\"mr-1 btn btn-info btn-sm rounded-circle\"-->\n                <!--[title]=\"to['upBtnText'] || '\u4E0A\u79FB' \"-->\n                <!--(click)=\"move(i, 1)\">&#9660;-->\n        <!--</button>-->\n      <!--</div>-->\n    <!--</div>-->\n    <!--<div class=\"my-3\">-->\n      <!--<button class=\"btn btn-primary pull-right\" type=\"button\" (click)=\"add()\"><i-->\n        <!--class=\"fa fa-plus-circle\"></i> {{ to['addBtnText'] || '\u589E\u52A0'}}</button>-->\n    <!--</div>-->\n  "
                    }] }
        ];
        /** @nocollapse */
        BsArrayTypeComponent.ctorParameters = function () {
            return [
                { type: core$2.FormlyFormBuilder }
            ];
        };
        return BsArrayTypeComponent;
    }(core$2.FieldArrayType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BsCheckboxTypeComponent = /** @class */ (function (_super) {
        __extends(BsCheckboxTypeComponent, _super);
        function BsCheckboxTypeComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BsCheckboxTypeComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <div class=\"custom-control custom-checkbox\">\n      <input class=\"custom-control-input\" type=\"checkbox\"\n        [class.is-invalid]=\"showError\"\n        [indeterminate]=\"to['indeterminate'] && field.formControl.value === null\"\n        [formControl]=\"formControl\"\n        [formlyAttributes]=\"field\">\n      <label class=\"custom-control-label\" [for]=\"id\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to['hideRequiredMarker'] !== true\">*</span>\n      </label>\n    </div>\n  "
                    }] }
        ];
        return BsCheckboxTypeComponent;
    }(core$2.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BsMultiCheckboxTypeComponent = /** @class */ (function (_super) {
        __extends(BsMultiCheckboxTypeComponent, _super);
        function BsMultiCheckboxTypeComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} model
         * @param {?} field
         * @return {?}
         */
        BsMultiCheckboxTypeComponent.createControl = /**
         * @param {?} model
         * @param {?} field
         * @return {?}
         */
            function (model, field) {
                if (field.templateOptions.options instanceof rxjs.Observable) {
                    throw new Error("[Formly Error] You cannot pass an Observable to a multicheckbox yet.");
                }
                /** @type {?} */
                var controls = field.templateOptions.options.reduce(function (obj, option) {
                    obj[option.key] = new forms.FormControl(model ? model[option.key] : undefined);
                    return obj;
                }, {});
                return new forms.FormGroup(controls, field.validators ? field.validators.validation : undefined, field.asyncValidators ? field.asyncValidators.validation : undefined);
            };
        BsMultiCheckboxTypeComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <div class=\"custom-control custom-checkbox\" *ngFor=\"let option of to.options; let i = index;\">\n      <input class=\"custom-control-input\" type=\"checkbox\"\n        [id]=\"id + '_' + i\"\n        [value]=\"option.value\"\n        [formControl]=\"formControl.get(option.key)\"\n        [formlyAttributes]=\"field\">\n      <label class=\"custom-control-label\" [for]=\"id + '_' + i\">\n        {{ option.value }}\n      </label>\n    </div>\n  "
                    }] }
        ];
        return BsMultiCheckboxTypeComponent;
    }(core$2.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BsInputTypeComponent = /** @class */ (function (_super) {
        __extends(BsInputTypeComponent, _super);
        function BsInputTypeComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BsInputTypeComponent.prototype, "type", {
            get: /**
             * @return {?}
             */ function () {
                return this.to.type || 'text';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BsInputTypeComponent.prototype, "inLineFlex", {
            get: /**
             * @return {?}
             */ function () {
                return this.to.addonLeft || this.to.addonRight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BsInputTypeComponent.prototype, "fileClass", {
            get: /**
             * @return {?}
             */ function () {
                return this.to.addonLeft || this.to.addonRight;
            },
            enumerable: true,
            configurable: true
        });
        BsInputTypeComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <input *ngIf=\"type !== 'number' else numberTpl\" [type]=\"type\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    <ng-template #numberTpl>\n      <input type=\"number\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    </ng-template>\n  "
                    }] }
        ];
        BsInputTypeComponent.propDecorators = {
            inLineFlex: [{ type: core.HostBinding, args: ['class.d-inline-flex',] }],
            fileClass: [{ type: core.HostBinding, args: ['class.custom-file',] }]
        };
        return BsInputTypeComponent;
    }(core$2.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BsTextAreaTypeComponent = /** @class */ (function (_super) {
        __extends(BsTextAreaTypeComponent, _super);
        function BsTextAreaTypeComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BsTextAreaTypeComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <textarea [formControl]=\"formControl\" [cols]=\"to.cols\"\n      [rows]=\"to.rows\" class=\"form-control\" [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n    </textarea>\n  "
                    }] }
        ];
        return BsTextAreaTypeComponent;
    }(core$2.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BsButtonTypeComponent = /** @class */ (function (_super) {
        __extends(BsButtonTypeComponent, _super);
        function BsButtonTypeComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BsButtonTypeComponent.decorators = [
            { type: core.Component, args: [{
                        template: "    \n    <er-button [context]=\"model\"></er-button>\n  "
                    }] }
        ];
        return BsButtonTypeComponent;
    }(core$2.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BsSwitchTypeComponent = /** @class */ (function (_super) {
        __extends(BsSwitchTypeComponent, _super);
        function BsSwitchTypeComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BsSwitchTypeComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n      <div class=\"d-block\">\n          <label class=\"switch switch-text switch-pill switch-lg\">\n              <input type=\"checkbox\" class='switch-input' [formControl]=\"formControl\" [formlyAttributes]=\"field\">\n              <span class=\"switch-label\" [attr.data-on]=\"to['onTitle']\" [attr.data-off]=\"to['offTitle']\"></span>\n              <span class=\"switch-handle\"></span>\n          </label>\n      </div>"
                    }] }
        ];
        return BsSwitchTypeComponent;
    }(core$2.FieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var BS_FORMLY_TYPES = [
        BsTextAreaTypeComponent,
        BsInputTypeComponent,
        BsMultiCheckboxTypeComponent,
        BsCheckboxTypeComponent,
        BsArrayTypeComponent,
        BsButtonTypeComponent,
        BsSwitchTypeComponent,
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BsAddonsWrapperComponent = /** @class */ (function (_super) {
        __extends(BsAddonsWrapperComponent, _super);
        function BsAddonsWrapperComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} $event
         * @return {?}
         */
        BsAddonsWrapperComponent.prototype.addonRightClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.to.addonRight.onClick) {
                    this.to.addonRight.onClick(this.to, this, $event);
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        BsAddonsWrapperComponent.prototype.addonLeftClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.to.addonLeft.onClick) {
                    this.to.addonLeft.onClick(this.to, this, $event);
                }
            };
        BsAddonsWrapperComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <div class=\"input-group\">\n      <div class=\"input-group-prepend\"\n        *ngIf=\"to['addonLeft']\"\n        [ngStyle]=\"{cursor: to.addonLeft.onClick ? 'pointer' : 'inherit'}\"\n        (click)=\"addonLeftClick($event)\">\n        <i class=\"input-group-text\" [ngClass]=\"to['addonLeft'].class\" *ngIf=\"to['addonLeft'].class\"></i>\n        <span *ngIf=\"to['addonLeft'].text\" class=\"input-group-text\">{{ to['addonLeft'].text }}</span>\n      </div>\n      <ng-template #fieldComponent></ng-template>\n      <div class=\"input-group-append\"\n        *ngIf=\"to['addonRight']\"\n        [ngStyle]=\"{cursor: to['addonRight'].onClick ? 'pointer' : 'inherit'}\"\n        (click)=\"addonRightClick($event)\">\n        <i class=\"input-group-text\" [ngClass]=\"to['addonRight'].class\" *ngIf=\"to['addonRight'].class\"></i>\n        <span *ngIf=\"to['addonRight'].text\" class=\"input-group-text\">{{ to['addonRight'].text }}</span>\n      </div>\n    </div>\n  ",
                        styles: ["\n    :host /deep/ .input-group>:not(:first-child)> .form-control {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n    }\n    :host /deep/ .input-group>:not(:last-child)> .form-control {\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n    }\n  "]
                    }] }
        ];
        BsAddonsWrapperComponent.propDecorators = {
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }]
        };
        return BsAddonsWrapperComponent;
    }(core$2.FieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var BS_FORMLY_WRAPPERS = [
        BsAddonsWrapperComponent
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var BsFormlyTypes = {
        input: 'bsInput',
        checkbox: 'bsCheckbox',
        radio: 'bsRadio',
        select: 'bsSelect',
        switch: 'bsSwitch',
        button: 'bsButton',
        textArea: 'bsTextArea',
        multiCheckbox: 'bsMultiCheckbox',
        multiSelect: 'bsMultiSelect',
        array: 'bsArray',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var FormlyBsWrappers = {
        field: 'bsFieldWrapper',
        addon: 'bsAddonWrapper'
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TemplateAddons = /** @class */ (function () {
        function TemplateAddons() {
        }
        /**
         * @param {?} fc
         * @return {?}
         */
        TemplateAddons.prototype.run = /**
         * @param {?} fc
         * @return {?}
         */
            function (fc) {
                fc.templateManipulators.postWrapper.push(function (field) {
                    if (field && field.type && field.type.startsWith('bs') &&
                        field.templateOptions && (field.templateOptions.addonLeft || field.templateOptions.addonRight)) {
                        return FormlyBsWrappers.addon;
                    }
                });
            };
        return TemplateAddons;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var BS_FORMLY_CONFIG = {
        types: [
            {
                name: BsFormlyTypes.input,
                component: BsInputTypeComponent,
                wrappers: [formly.FormlyWrappers.vertical]
            },
            {
                name: BsFormlyTypes.checkbox,
                component: BsCheckboxTypeComponent,
                wrappers: [formly.FormlyWrappers.vertical],
                defaultOptions: {
                    templateOptions: {
                        indeterminate: true,
                        hideLabel: true
                    }
                }
            },
            {
                name: BsFormlyTypes.textArea,
                component: BsTextAreaTypeComponent,
                wrappers: [formly.FormlyWrappers.vertical],
                defaultOptions: {
                    templateOptions: {
                        cols: 1,
                        rows: 1
                    }
                }
            },
            {
                name: BsFormlyTypes.multiCheckbox,
                component: BsMultiCheckboxTypeComponent,
                wrappers: [formly.FormlyWrappers.vertical],
                defaultOptions: {
                    templateOptions: {
                        options: []
                    }
                }
            },
            {
                name: BsFormlyTypes.switch,
                component: BsSwitchTypeComponent,
                wrappers: [formly.FormlyWrappers.vertical]
            },
            {
                name: BsFormlyTypes.array,
                component: BsArrayTypeComponent,
                wrappers: [formly.FormlyWrappers.vertical]
            },
            {
                name: BsFormlyTypes.button,
                component: BsButtonTypeComponent,
                wrappers: [formly.FormlyWrappers.vertical]
            }
        ],
        wrappers: [
            { name: FormlyBsWrappers.addon, component: BsAddonsWrapperComponent }
        ],
        manipulators: [
            { class: TemplateAddons, method: 'run' }
        ]
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ErFormlyBootstrapModule = /** @class */ (function () {
        function ErFormlyBootstrapModule() {
        }
        ErFormlyBootstrapModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            forms.ReactiveFormsModule,
                            core$1.ErCoreModule,
                            formly.ErFormlyModule,
                            validate.ErValidateModule,
                            core$2.FormlyModule.forChild(BS_FORMLY_CONFIG)
                        ],
                        declarations: __spread(BS_FORMLY_TYPES, BS_FORMLY_WRAPPERS),
                        exports: [
                            core$2.FormlyModule
                        ]
                    },] }
        ];
        return ErFormlyBootstrapModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ErFormlyBootstrapModule = ErFormlyBootstrapModule;
    exports.BS_FORMLY_TYPES = BS_FORMLY_TYPES;
    exports.BsCheckboxTypeComponent = BsCheckboxTypeComponent;
    exports.BsMultiCheckboxTypeComponent = BsMultiCheckboxTypeComponent;
    exports.BsInputTypeComponent = BsInputTypeComponent;
    exports.BsTextAreaTypeComponent = BsTextAreaTypeComponent;
    exports.BsAddonsWrapperComponent = BsAddonsWrapperComponent;
    exports.BS_FORMLY_WRAPPERS = BS_FORMLY_WRAPPERS;
    exports.BsFormlyTypes = BsFormlyTypes;
    exports.FormlyBsWrappers = FormlyBsWrappers;
    exports.ɵd = BS_FORMLY_CONFIG;
    exports.ɵa = BsArrayTypeComponent;
    exports.ɵb = BsButtonTypeComponent;
    exports.ɵc = BsSwitchTypeComponent;
    exports.ɵe = TemplateAddons;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=er-formly-bootstrap.umd.js.map