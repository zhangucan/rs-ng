import { AbstractControl, FormGroup, ValidatorFn } from '@angular/forms';
import { ButtonProps, DataField, DynaContent, FormProps, UiLandscape } from '@er/types';
import { FormlyFieldConfig, FormlyTemplateOptions } from '@ngx-formly/core';
import { FormlyFormOptions } from '@ngx-formly/core/lib/components/formly.field.config';
import { BehaviorSubject } from 'rxjs';
import { FormlyFormComponent } from '../components/form/component';
export interface ErFormlyTemplateOptions extends FormlyTemplateOptions {
    landscape?: UiLandscape;
    description?: any;
    hideLabel?: boolean;
    hideRequiredMarker?: boolean;
    floatLabel?: boolean;
    inline?: boolean;
    before?: {
        content?: DynaContent;
    };
    after?: {
        content?: DynaContent;
    };
    addonLeft?: {
        icon?: string;
        styleClass?: string;
        style?: string;
        text?: string;
        button?: ButtonProps;
    }[];
    addonRight?: {
        icon?: string;
        styleClass?: string;
        style?: string;
        text?: string;
        button?: ButtonProps;
    }[];
}
export interface ErFormlyFieldEventContext {
    field: {
        context: ErFormlyFieldContext;
        [key: string]: any;
    };
    [key: string]: any;
}
export interface ErFormlyFieldContext {
    formProps?: FormProps;
    form?: FormGroup;
    field?: FormlyFieldConfig;
    options?: FormlyFormOptions;
    component?: (key?: string) => any;
    control?: (key?: string) => AbstractControl;
    data$?: (key?: string) => BehaviorSubject<any>;
    model?: any;
    value?: any;
    key?: string;
    formControl?: AbstractControl;
    to?: FormlyTemplateOptions;
    showError?: boolean;
    id?: string;
    formState?: any;
}
export interface ErFormlyFieldConfig extends FormlyFieldConfig {
    formProps?: FormProps;
    formlyForm?: FormlyFormComponent;
    dataField?: DataField;
    fieldSetStyleClass?: any;
    fieldSetStyle?: any;
    labelStyleClass?: any;
    labelStyle?: any;
    fieldStyleClass?: any;
    fieldStyle?: any;
    showErrors?: boolean;
    validationStyleClass?: string;
    validationStyle?: any;
    validators?: ValidatorFn | ValidatorFn[] | {
        [key: string]: ((control: any, field: any) => boolean) | any;
    };
    templateOptions?: ErFormlyTemplateOptions;
    props?: {};
    attrs?: {};
}
