/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, ViewContainerRef } from '@angular/core';
import { FieldWrapper } from '@ngx-formly/core';
/**
 * @record
 */
export function DynamicProps() { }
if (false) {
    /** @type {?|undefined} */
    DynamicProps.prototype.before;
    /** @type {?|undefined} */
    DynamicProps.prototype.after;
    /** @type {?|undefined} */
    DynamicProps.prototype.content;
    /** @type {?|undefined} */
    DynamicProps.prototype.context;
}
var DynamicWrapperComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicWrapperComponent, _super);
    function DynamicWrapperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DynamicWrapperComponent.decorators = [
        { type: Component, args: [{
                    template: "\n    <ng-container *ngIf=\"to['before']\">\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n    </ng-container>\n    <ng-container #fieldComponent></ng-container>\n    <ng-container *ngIf=\"to['after']\">\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n    </ng-container>\n    <ng-template #content>\n      <er-dyna-content [content]=\"to['content']\"\n                       [context]=\"to['context']\"\n                       [styleClass]=\"to['styleClass']\"\n                       [style]=\"to['style']\"\n      ></er-dyna-content>\n    </ng-template>\n  "
                }] }
    ];
    DynamicWrapperComponent.propDecorators = {
        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
    };
    return DynamicWrapperComponent;
}(FieldWrapper));
export { DynamicWrapperComponent };
if (false) {
    /** @type {?} */
    DynamicWrapperComponent.prototype.fieldComponent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9mb3JtbHkvIiwic291cmNlcyI6WyJsaWIvZmllbGQtd3JhcHBlcnMvZHluYW1pYy93cmFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFckUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGtCQUFrQixDQUFDOzs7O0FBRTlDLGtDQUtDOzs7SUFKQyw4QkFBaUI7O0lBQ2pCLDZCQUFnQjs7SUFDaEIsK0JBQXNCOztJQUN0QiwrQkFBa0I7O0FBR3BCO0lBa0I2QyxtREFBWTtJQWxCekQ7O0lBb0JBLENBQUM7O2dCQXBCQSxTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDJsQkFlVDtpQkFDRjs7O2lDQUVFLFNBQVMsU0FBQyxnQkFBZ0IsRUFBRSxFQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBQzs7SUFDdkQsOEJBQUM7Q0FBQSxBQXBCRCxDQWtCNkMsWUFBWSxHQUV4RDtTQUZZLHVCQUF1Qjs7O0lBQ2xDLGlEQUF3RiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBWaWV3Q2hpbGQsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDb250ZXh0LCBEeW5hQ29udGVudH0gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7RmllbGRXcmFwcGVyfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBEeW5hbWljUHJvcHMge1xuICBiZWZvcmU/OiBib29sZWFuO1xuICBhZnRlcj86IGJvb2xlYW47XG4gIGNvbnRlbnQ/OiBEeW5hQ29udGVudDtcbiAgY29udGV4dD86IENvbnRleHQ7XG59XG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJ0b1snYmVmb3JlJ11cIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJjb250ZW50XCI+PC9uZy1jb250YWluZXI+XG4gICAgPC9uZy1jb250YWluZXI+XG4gICAgPG5nLWNvbnRhaW5lciAjZmllbGRDb21wb25lbnQ+PC9uZy1jb250YWluZXI+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInRvWydhZnRlciddXCI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwiY29udGVudFwiPjwvbmctY29udGFpbmVyPlxuICAgIDwvbmctY29udGFpbmVyPlxuICAgIDxuZy10ZW1wbGF0ZSAjY29udGVudD5cbiAgICAgIDxlci1keW5hLWNvbnRlbnQgW2NvbnRlbnRdPVwidG9bJ2NvbnRlbnQnXVwiXG4gICAgICAgICAgICAgICAgICAgICAgIFtjb250ZXh0XT1cInRvWydjb250ZXh0J11cIlxuICAgICAgICAgICAgICAgICAgICAgICBbc3R5bGVDbGFzc109XCJ0b1snc3R5bGVDbGFzcyddXCJcbiAgICAgICAgICAgICAgICAgICAgICAgW3N0eWxlXT1cInRvWydzdHlsZSddXCJcbiAgICAgID48L2VyLWR5bmEtY29udGVudD5cbiAgICA8L25nLXRlbXBsYXRlPlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIER5bmFtaWNXcmFwcGVyQ29tcG9uZW50IGV4dGVuZHMgRmllbGRXcmFwcGVyIHtcbiAgQFZpZXdDaGlsZCgnZmllbGRDb21wb25lbnQnLCB7cmVhZDogVmlld0NvbnRhaW5lclJlZn0pIGZpZWxkQ29tcG9uZW50OiBWaWV3Q29udGFpbmVyUmVmO1xufVxuIl19