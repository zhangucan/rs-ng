/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DataUtils } from '@er/core';
import { StatesUtils, TreeUtils } from '@er/utils';
import { distinctUntilChanged, map, takeUntil } from 'rxjs/operators';
var FormlyUtils = /** @class */ (function () {
    function FormlyUtils() {
    }
    /**
     * @param {?} ctx
     * @param {?} entity
     * @param {?=} nextSeqProps
     * @return {?}
     */
    FormlyUtils.resolveDistinctFieldValue = /**
     * @param {?} ctx
     * @param {?} entity
     * @param {?=} nextSeqProps
     * @return {?}
     */
    function (ctx, entity, nextSeqProps) {
        console.log(ctx);
        /** @type {?} */
        var fieldName = 'code';
        if (nextSeqProps) {
            fieldName = nextSeqProps.seqKey || 'code';
        }
        /** @type {?} */
        var currentValue = ctx.model[fieldName];
        if (!currentValue) {
            return DataUtils.getNextValue(tslib_1.__assign({}, nextSeqProps || {}, { apiEntry: entity.apiEntry })).pipe(map(function (result) {
                ctx.model[fieldName] = result;
                return true;
            }));
        }
        else {
            return DataUtils.checkDistinct({
                apiProps: {
                    apiEntry: entity.apiEntry,
                    query: nextSeqProps && nextSeqProps.query,
                    searchFields: fieldName,
                    queryValue: currentValue
                },
                id: ctx.model['id']
            });
        }
    };
    /**
     * @param {?} formlyForm
     * @param {?} fieldName
     * @param {?=} valueResolver
     * @return {?}
     */
    FormlyUtils.initFieldValueFromSelectedTreeNode = /**
     * @param {?} formlyForm
     * @param {?} fieldName
     * @param {?=} valueResolver
     * @return {?}
     */
    function (formlyForm, fieldName, valueResolver) {
        var _a;
        /** @type {?} */
        var fieldValue = formlyForm.model && formlyForm.model[fieldName];
        if (!fieldValue) {
            /** @type {?} */
            var node = TreeUtils.getSelectedNode(formlyForm && formlyForm['tableId']);
            if (node) {
                /** @type {?} */
                var val = void 0;
                if (valueResolver) {
                    val = valueResolver(node);
                }
                else {
                    val = { code: node['code'], name: node['name'] };
                }
                formlyForm.patchModel((_a = {}, _a[fieldName] = val, _a));
            }
        }
    };
    /**
     * @param {?} formlyForm
     * @param {?} fieldName
     * @return {?}
     */
    FormlyUtils.onFieldChange = /**
     * @param {?} formlyForm
     * @param {?} fieldName
     * @return {?}
     */
    function (formlyForm, fieldName) {
        return formlyForm.formControl(fieldName).valueChanges
            .pipe(takeUntil(formlyForm.destroyed$), distinctUntilChanged());
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    FormlyUtils.refreshContainerNavTree = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        /** @type {?} */
        var tableId = ctx.formlyForm.tableId;
        if (tableId) {
            /** @type {?} */
            var table = tableId && StatesUtils.getValue(tableId);
            if (table && table.component) {
                /** @type {?} */
                var container = table.component.$container;
                container.refreshTree = true;
            }
        }
    };
    return FormlyUtils;
}());
export { FormlyUtils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvZm9ybWx5LyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBZSxNQUFNLFVBQVUsQ0FBQztBQUVqRCxPQUFPLEVBQUMsV0FBVyxFQUFFLFNBQVMsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUVqRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXBFO0lBQUE7SUFrRUEsQ0FBQzs7Ozs7OztJQWhFUSxxQ0FBeUI7Ozs7OztJQUFoQyxVQUFpQyxHQUFHLEVBQUUsTUFBa0IsRUFBRSxZQUEyQjtRQUNuRixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDOztZQUNiLFNBQVMsR0FBRyxNQUFNO1FBQ3RCLElBQUksWUFBWSxFQUFFO1lBQ2hCLFNBQVMsR0FBRyxZQUFZLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQztTQUMzQzs7WUFDSyxZQUFZLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDekMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNqQixPQUFPLFNBQVMsQ0FBQyxZQUFZLHNCQUN4QixZQUFZLElBQUksRUFBRSxJQUNyQixRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVEsSUFDekIsQ0FBQyxJQUFJLENBQ0wsR0FBRyxDQUFDLFVBQUEsTUFBTTtnQkFDUixHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztnQkFDOUIsT0FBTyxJQUFJLENBQUM7WUFDZCxDQUFDLENBQUMsQ0FDSCxDQUFDO1NBQ0g7YUFBTTtZQUNMLE9BQU8sU0FBUyxDQUFDLGFBQWEsQ0FBQztnQkFDN0IsUUFBUSxFQUFFO29CQUNSLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUTtvQkFDekIsS0FBSyxFQUFFLFlBQVksSUFBSSxZQUFZLENBQUMsS0FBSztvQkFDekMsWUFBWSxFQUFFLFNBQVM7b0JBQ3ZCLFVBQVUsRUFBRSxZQUFZO2lCQUN6QjtnQkFDRCxFQUFFLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7YUFDcEIsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7Ozs7O0lBRU0sOENBQWtDOzs7Ozs7SUFBekMsVUFBMEMsVUFBVSxFQUFFLFNBQWlCLEVBQUUsYUFBNkI7OztZQUM5RixVQUFVLEdBQUcsVUFBVSxDQUFDLEtBQUssSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNsRSxJQUFJLENBQUMsVUFBVSxFQUFFOztnQkFDVCxJQUFJLEdBQUcsU0FBUyxDQUFDLGVBQWUsQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzNFLElBQUksSUFBSSxFQUFFOztvQkFDSixHQUFHLFNBQUE7Z0JBQ1AsSUFBSSxhQUFhLEVBQUU7b0JBQ2pCLEdBQUcsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzNCO3FCQUFNO29CQUNMLEdBQUcsR0FBRyxFQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBQyxDQUFDO2lCQUNoRDtnQkFDRCxVQUFVLENBQUMsVUFBVSxXQUFFLEdBQUMsU0FBUyxJQUFHLEdBQUcsTUFBRSxDQUFDO2FBQzNDO1NBQ0Y7SUFDSCxDQUFDOzs7Ozs7SUFFTSx5QkFBYTs7Ozs7SUFBcEIsVUFBcUIsVUFBVSxFQUFFLFNBQWlCO1FBQ2hELE9BQU8sVUFBVSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxZQUFZO2FBQ2xELElBQUksQ0FDSCxTQUFTLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUNoQyxvQkFBb0IsRUFBRSxDQUN2QixDQUFDO0lBQ04sQ0FBQzs7Ozs7SUFFTSxtQ0FBdUI7Ozs7SUFBOUIsVUFBK0IsR0FBRzs7WUFDMUIsT0FBTyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTztRQUN0QyxJQUFJLE9BQU8sRUFBRTs7Z0JBQ0wsS0FBSyxHQUFHLE9BQU8sSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztZQUN0RCxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFOztvQkFDdEIsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVTtnQkFDNUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7YUFDOUI7U0FDRjtJQUNILENBQUM7SUFDSCxrQkFBQztBQUFELENBQUMsQUFsRUQsSUFrRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RhdGFVdGlscywgTmV4dFNlcVByb3BzfSBmcm9tICdAZXIvY29yZSc7XG5pbXBvcnQge0RhdGFFbnRpdHl9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge1N0YXRlc1V0aWxzLCBUcmVlVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGNsYXNzIEZvcm1seVV0aWxzIHtcblxuICBzdGF0aWMgcmVzb2x2ZURpc3RpbmN0RmllbGRWYWx1ZShjdHgsIGVudGl0eTogRGF0YUVudGl0eSwgbmV4dFNlcVByb3BzPzogTmV4dFNlcVByb3BzKSB7XG4gICAgY29uc29sZS5sb2coY3R4KTtcbiAgICBsZXQgZmllbGROYW1lID0gJ2NvZGUnO1xuICAgIGlmIChuZXh0U2VxUHJvcHMpIHtcbiAgICAgIGZpZWxkTmFtZSA9IG5leHRTZXFQcm9wcy5zZXFLZXkgfHwgJ2NvZGUnO1xuICAgIH1cbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBjdHgubW9kZWxbZmllbGROYW1lXTtcbiAgICBpZiAoIWN1cnJlbnRWYWx1ZSkge1xuICAgICAgcmV0dXJuIERhdGFVdGlscy5nZXROZXh0VmFsdWUoe1xuICAgICAgICAuLi5uZXh0U2VxUHJvcHMgfHwge30sXG4gICAgICAgIGFwaUVudHJ5OiBlbnRpdHkuYXBpRW50cnlcbiAgICAgIH0pLnBpcGUoXG4gICAgICAgIG1hcChyZXN1bHQgPT4ge1xuICAgICAgICAgIGN0eC5tb2RlbFtmaWVsZE5hbWVdID0gcmVzdWx0O1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIERhdGFVdGlscy5jaGVja0Rpc3RpbmN0KHtcbiAgICAgICAgYXBpUHJvcHM6IHtcbiAgICAgICAgICBhcGlFbnRyeTogZW50aXR5LmFwaUVudHJ5LFxuICAgICAgICAgIHF1ZXJ5OiBuZXh0U2VxUHJvcHMgJiYgbmV4dFNlcVByb3BzLnF1ZXJ5LFxuICAgICAgICAgIHNlYXJjaEZpZWxkczogZmllbGROYW1lLFxuICAgICAgICAgIHF1ZXJ5VmFsdWU6IGN1cnJlbnRWYWx1ZVxuICAgICAgICB9LFxuICAgICAgICBpZDogY3R4Lm1vZGVsWydpZCddXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgaW5pdEZpZWxkVmFsdWVGcm9tU2VsZWN0ZWRUcmVlTm9kZShmb3JtbHlGb3JtLCBmaWVsZE5hbWU6IHN0cmluZywgdmFsdWVSZXNvbHZlcj86IChub2RlKSA9PiBhbnkpIHtcbiAgICBjb25zdCBmaWVsZFZhbHVlID0gZm9ybWx5Rm9ybS5tb2RlbCAmJiBmb3JtbHlGb3JtLm1vZGVsW2ZpZWxkTmFtZV07XG4gICAgaWYgKCFmaWVsZFZhbHVlKSB7XG4gICAgICBjb25zdCBub2RlID0gVHJlZVV0aWxzLmdldFNlbGVjdGVkTm9kZShmb3JtbHlGb3JtICYmIGZvcm1seUZvcm1bJ3RhYmxlSWQnXSk7XG4gICAgICBpZiAobm9kZSkge1xuICAgICAgICBsZXQgdmFsO1xuICAgICAgICBpZiAodmFsdWVSZXNvbHZlcikge1xuICAgICAgICAgIHZhbCA9IHZhbHVlUmVzb2x2ZXIobm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsID0ge2NvZGU6IG5vZGVbJ2NvZGUnXSwgbmFtZTogbm9kZVsnbmFtZSddfTtcbiAgICAgICAgfVxuICAgICAgICBmb3JtbHlGb3JtLnBhdGNoTW9kZWwoe1tmaWVsZE5hbWVdOiB2YWx9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgb25GaWVsZENoYW5nZShmb3JtbHlGb3JtLCBmaWVsZE5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIGZvcm1seUZvcm0uZm9ybUNvbnRyb2woZmllbGROYW1lKS52YWx1ZUNoYW5nZXNcbiAgICAgIC5waXBlKFxuICAgICAgICB0YWtlVW50aWwoZm9ybWx5Rm9ybS5kZXN0cm95ZWQkKSxcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxuICAgICAgKTtcbiAgfVxuXG4gIHN0YXRpYyByZWZyZXNoQ29udGFpbmVyTmF2VHJlZShjdHgpIHtcbiAgICBjb25zdCB0YWJsZUlkID0gY3R4LmZvcm1seUZvcm0udGFibGVJZDtcbiAgICBpZiAodGFibGVJZCkge1xuICAgICAgY29uc3QgdGFibGUgPSB0YWJsZUlkICYmIFN0YXRlc1V0aWxzLmdldFZhbHVlKHRhYmxlSWQpO1xuICAgICAgaWYgKHRhYmxlICYmIHRhYmxlLmNvbXBvbmVudCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0YWJsZS5jb21wb25lbnQuJGNvbnRhaW5lcjtcbiAgICAgICAgY29udGFpbmVyLnJlZnJlc2hUcmVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==