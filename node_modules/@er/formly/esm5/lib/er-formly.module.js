/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ANALYZE_FOR_ENTRY_COMPONENTS, Inject, InjectionToken, NgModule, Optional } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { ErCoreModule } from '@er/core';
import { ErValidateModule } from '@er/validate';
import { FormlyConfig, FormlyModule } from '@ngx-formly/core';
import { TooltipModule } from 'primeng/primeng';
import { Components } from './components/all';
import { ER_FORMLY_CONFIG } from './config/all';
import { Directives } from './directives/all';
import { FormlyFieldValidatorExtension } from './extensions/field-validation';
import { FORMLY_WRAPPER_COMPONENTS } from './field-wrappers/all';
import { Pipes } from './pipes/all';
/** @type {?} */
export var Er_FORMLY_CONFIG = new InjectionToken('Er_FORMLY_CONFIG');
var ErFormlyModule = /** @class */ (function () {
    function ErFormlyModule() {
    }
    ErFormlyModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        ReactiveFormsModule,
                        FormlyModule,
                        ErCoreModule,
                        ErValidateModule,
                        TooltipModule
                    ],
                    declarations: tslib_1.__spread(Components, Directives, Pipes),
                    exports: tslib_1.__spread(Components, Directives, Pipes)
                },] }
    ];
    return ErFormlyModule;
}());
export { ErFormlyModule };
var ErFormlyRootModule = /** @class */ (function () {
    function ErFormlyRootModule(formlyConfig, erFormlyConfigOption) {
        if (erFormlyConfigOption) {
            formlyConfig.addConfig(erFormlyConfigOption);
        }
        if (formlyConfig.extensions.hasOwnProperty('field-validation')) {
            // delete formlyConfig.extensions['field-validation'];
        }
        if (formlyConfig.extensions.hasOwnProperty('field-expression')) {
            // delete formlyConfig.extensions['field-expression'];
        }
        formlyConfig.addConfig({
            extensions: [
                { name: 'validator', extension: new FormlyFieldValidatorExtension }
            ]
        });
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    ErFormlyRootModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: ErFormlyRootModule,
            providers: [
                { provide: Er_FORMLY_CONFIG, useValue: config, multi: true },
                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true }
            ]
        };
    };
    ErFormlyRootModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        ReactiveFormsModule,
                        ErCoreModule,
                        ErValidateModule,
                        FormlyModule.forRoot(ER_FORMLY_CONFIG)
                    ],
                    declarations: tslib_1.__spread(FORMLY_WRAPPER_COMPONENTS)
                },] }
    ];
    /** @nocollapse */
    ErFormlyRootModule.ctorParameters = function () { return [
        { type: FormlyConfig },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [Er_FORMLY_CONFIG,] }] }
    ]; };
    return ErFormlyRootModule;
}());
export { ErFormlyRootModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXItZm9ybWx5Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9mb3JtbHkvIiwic291cmNlcyI6WyJsaWIvZXItZm9ybWx5Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyw0QkFBNEIsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzVILE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ25ELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDdEMsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQzlDLE9BQU8sRUFBZSxZQUFZLEVBQUUsWUFBWSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDMUUsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUM1QyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDOUMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQzVDLE9BQU8sRUFBQyw2QkFBNkIsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBQzVFLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxhQUFhLENBQUM7O0FBRWxDLE1BQU0sS0FBTyxnQkFBZ0IsR0FBRyxJQUFJLGNBQWMsQ0FBZSxrQkFBa0IsQ0FBQztBQUdwRjtJQUFBO0lBcUJBLENBQUM7O2dCQXJCQSxRQUFRLFNBQUM7b0JBQ1IsT0FBTyxFQUFFO3dCQUNQLG1CQUFtQjt3QkFDbkIsWUFBWTt3QkFDWixZQUFZO3dCQUNaLGdCQUFnQjt3QkFDaEIsYUFBYTtxQkFDZDtvQkFDRCxZQUFZLG1CQUNQLFVBQVUsRUFDVixVQUFVLEVBQ1YsS0FBSyxDQUNUO29CQUNELE9BQU8sbUJBQ0YsVUFBVSxFQUNWLFVBQVUsRUFDVixLQUFLLENBQ1Q7aUJBQ0Y7O0lBR0QscUJBQUM7Q0FBQSxBQXJCRCxJQXFCQztTQUZZLGNBQWM7QUFLM0I7SUFhRSw0QkFBWSxZQUEwQixFQUNZLG9CQUFrQztRQUNsRixJQUFJLG9CQUFvQixFQUFFO1lBQ3hCLFlBQVksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUM5QztRQUNELElBQUksWUFBWSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsa0JBQWtCLENBQUMsRUFBRTtZQUM5RCxzREFBc0Q7U0FDdkQ7UUFDRCxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLEVBQUU7WUFDOUQsc0RBQXNEO1NBQ3ZEO1FBQ0QsWUFBWSxDQUFDLFNBQVMsQ0FBQztZQUNyQixVQUFVLEVBQUU7Z0JBQ1YsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxJQUFJLDZCQUE2QixFQUFDO2FBQ2xFO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFTSwwQkFBTzs7OztJQUFkLFVBQWUsTUFBeUI7UUFBekIsdUJBQUEsRUFBQSxXQUF5QjtRQUN0QyxPQUFPO1lBQ0wsUUFBUSxFQUFFLGtCQUFrQjtZQUM1QixTQUFTLEVBQUU7Z0JBQ1QsRUFBQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDO2dCQUMxRCxFQUFDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUM7YUFDdkU7U0FDRixDQUFDO0lBQ0osQ0FBQzs7Z0JBdkNGLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUU7d0JBQ1AsbUJBQW1CO3dCQUNuQixZQUFZO3dCQUNaLGdCQUFnQjt3QkFDaEIsWUFBWSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztxQkFDdkM7b0JBQ0QsWUFBWSxtQkFDUCx5QkFBeUIsQ0FDN0I7aUJBQ0Y7Ozs7Z0JBOUNxQixZQUFZO2dEQWtEbkIsUUFBUSxZQUFJLE1BQU0sU0FBQyxnQkFBZ0I7O0lBMEJsRCx5QkFBQztDQUFBLEFBeENELElBd0NDO1NBN0JZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QU5BTFlaRV9GT1JfRU5UUllfQ09NUE9ORU5UUywgSW5qZWN0LCBJbmplY3Rpb25Ub2tlbiwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUsIE9wdGlvbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UmVhY3RpdmVGb3Jtc01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtFckNvcmVNb2R1bGV9IGZyb20gJ0Blci9jb3JlJztcbmltcG9ydCB7RXJWYWxpZGF0ZU1vZHVsZX0gZnJvbSAnQGVyL3ZhbGlkYXRlJztcbmltcG9ydCB7Q29uZmlnT3B0aW9uLCBGb3JtbHlDb25maWcsIEZvcm1seU1vZHVsZX0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5pbXBvcnQge1Rvb2x0aXBNb2R1bGV9IGZyb20gJ3ByaW1lbmcvcHJpbWVuZyc7XG5pbXBvcnQge0NvbXBvbmVudHN9IGZyb20gJy4vY29tcG9uZW50cy9hbGwnO1xuaW1wb3J0IHtFUl9GT1JNTFlfQ09ORklHfSBmcm9tICcuL2NvbmZpZy9hbGwnO1xuaW1wb3J0IHtEaXJlY3RpdmVzfSBmcm9tICcuL2RpcmVjdGl2ZXMvYWxsJztcbmltcG9ydCB7Rm9ybWx5RmllbGRWYWxpZGF0b3JFeHRlbnNpb259IGZyb20gJy4vZXh0ZW5zaW9ucy9maWVsZC12YWxpZGF0aW9uJztcbmltcG9ydCB7Rk9STUxZX1dSQVBQRVJfQ09NUE9ORU5UU30gZnJvbSAnLi9maWVsZC13cmFwcGVycy9hbGwnO1xuaW1wb3J0IHtQaXBlc30gZnJvbSAnLi9waXBlcy9hbGwnO1xuXG5leHBvcnQgY29uc3QgRXJfRk9STUxZX0NPTkZJRyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxDb25maWdPcHRpb24+KCdFcl9GT1JNTFlfQ09ORklHJyk7XG5cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXG4gICAgRm9ybWx5TW9kdWxlLFxuICAgIEVyQ29yZU1vZHVsZSxcbiAgICBFclZhbGlkYXRlTW9kdWxlLFxuICAgIFRvb2x0aXBNb2R1bGVcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgLi4uQ29tcG9uZW50cyxcbiAgICAuLi5EaXJlY3RpdmVzLFxuICAgIC4uLlBpcGVzXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICAuLi5Db21wb25lbnRzLFxuICAgIC4uLkRpcmVjdGl2ZXMsXG4gICAgLi4uUGlwZXNcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBFckZvcm1seU1vZHVsZSB7XG5cbn1cblxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBFckNvcmVNb2R1bGUsXG4gICAgRXJWYWxpZGF0ZU1vZHVsZSxcbiAgICBGb3JtbHlNb2R1bGUuZm9yUm9vdChFUl9GT1JNTFlfQ09ORklHKVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICAuLi5GT1JNTFlfV1JBUFBFUl9DT01QT05FTlRTXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRXJGb3JtbHlSb290TW9kdWxlIHtcblxuICBjb25zdHJ1Y3Rvcihmb3JtbHlDb25maWc6IEZvcm1seUNvbmZpZyxcbiAgICAgICAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChFcl9GT1JNTFlfQ09ORklHKSBlckZvcm1seUNvbmZpZ09wdGlvbjogQ29uZmlnT3B0aW9uKSB7XG4gICAgaWYgKGVyRm9ybWx5Q29uZmlnT3B0aW9uKSB7XG4gICAgICBmb3JtbHlDb25maWcuYWRkQ29uZmlnKGVyRm9ybWx5Q29uZmlnT3B0aW9uKTtcbiAgICB9XG4gICAgaWYgKGZvcm1seUNvbmZpZy5leHRlbnNpb25zLmhhc093blByb3BlcnR5KCdmaWVsZC12YWxpZGF0aW9uJykpIHtcbiAgICAgIC8vIGRlbGV0ZSBmb3JtbHlDb25maWcuZXh0ZW5zaW9uc1snZmllbGQtdmFsaWRhdGlvbiddO1xuICAgIH1cbiAgICBpZiAoZm9ybWx5Q29uZmlnLmV4dGVuc2lvbnMuaGFzT3duUHJvcGVydHkoJ2ZpZWxkLWV4cHJlc3Npb24nKSkge1xuICAgICAgLy8gZGVsZXRlIGZvcm1seUNvbmZpZy5leHRlbnNpb25zWydmaWVsZC1leHByZXNzaW9uJ107XG4gICAgfVxuICAgIGZvcm1seUNvbmZpZy5hZGRDb25maWcoe1xuICAgICAgZXh0ZW5zaW9uczogW1xuICAgICAgICB7bmFtZTogJ3ZhbGlkYXRvcicsIGV4dGVuc2lvbjogbmV3IEZvcm1seUZpZWxkVmFsaWRhdG9yRXh0ZW5zaW9ufVxuICAgICAgXVxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGZvclJvb3QoY29uZmlnOiBDb25maWdPcHRpb24gPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogRXJGb3JtbHlSb290TW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtwcm92aWRlOiBFcl9GT1JNTFlfQ09ORklHLCB1c2VWYWx1ZTogY29uZmlnLCBtdWx0aTogdHJ1ZX0sXG4gICAgICAgIHtwcm92aWRlOiBBTkFMWVpFX0ZPUl9FTlRSWV9DT01QT05FTlRTLCB1c2VWYWx1ZTogY29uZmlnLCBtdWx0aTogdHJ1ZX1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=