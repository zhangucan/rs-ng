/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { QueryList, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';
import { ComponentUtils } from '@er/core';
import { CommonsUtils } from '@er/utils';
import { ValidationMessageDirective } from '@er/validate';
import { FieldType } from '@ngx-formly/core';
import { FormlyPropsBindDirective } from '../directives/props/directive';
/**
 * @abstract
 */
var ErFormlyFieldType = /** @class */ (function (_super) {
    tslib_1.__extends(ErFormlyFieldType, _super);
    function ErFormlyFieldType() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ErFormlyFieldType.prototype, "attrs", {
        get: /**
         * @return {?}
         */
        function () {
            return this.field['attrs'] || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ErFormlyFieldType.prototype, "props", {
        get: /**
         * @return {?}
         */
        function () {
            return this.field['props'] || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ErFormlyFieldType.prototype, "context", {
        get: /**
         * @return {?}
         */
        function () {
            return this.field['context'] || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ErFormlyFieldType.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.formControl.value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.formControl.setValue(val);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} key
     * @return {?}
     */
    ErFormlyFieldType.prototype.component = /**
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        return this.form['components'] &&
            this.form['components'][key || this.field.key];
    };
    /**
     * @param {?=} key
     * @return {?}
     */
    ErFormlyFieldType.prototype.data$ = /**
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        return this.form['components'] &&
            this.form['components'][key || this.field.key] &&
            this.form['components'][key || this.field.key].data$;
    };
    /**
     * @param {?=} key
     * @return {?}
     */
    ErFormlyFieldType.prototype.control = /**
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        return this.form.get(key);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ErFormlyFieldType.prototype.fieldProps = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var props = this.field['formProps'].fields.filter(function (prop) { return prop.key === key; });
        return (props && props.length === 1) ? props[0] : undefined;
    };
    /**
     * @return {?}
     */
    ErFormlyFieldType.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var _widgets = this.widgets.toArray();
        /** @type {?} */
        var component;
        if (_widgets.length === 1) {
            component = ComponentUtils.getHostComponentInst(_widgets[0]);
        }
        else if (_widgets.length > 1) {
            component = _widgets.map(function (widget) { return ComponentUtils.getHostComponentInst(widget); });
        }
        if (this.validateMessage) {
            this.validateMessage.showError = this.showError || true;
        }
        if (!this.form['components']) {
            this.form['components'] = {};
        }
        this.form['components'][this.field.key] = component;
    };
    /**
     * @return {?}
     */
    ErFormlyFieldType.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.field['props'] = this.field['props'] || {};
        if (this.defaultProps) {
            this.field['props'] = CommonsUtils.defaults({}, this.field['props'], this.defaultProps);
        }
        this.field['formlyField'] = this;
    };
    ErFormlyFieldType.propDecorators = {
        widgets: [{ type: ViewChildren, args: [FormlyPropsBindDirective, { read: ViewContainerRef },] }],
        validateMessage: [{ type: ViewChild, args: [ValidationMessageDirective,] }]
    };
    return ErFormlyFieldType;
}(FieldType));
export { ErFormlyFieldType };
if (false) {
    /** @type {?} */
    ErFormlyFieldType.prototype.defaultProps;
    /** @type {?} */
    ErFormlyFieldType.prototype.widgets;
    /** @type {?} */
    ErFormlyFieldType.prototype.validateMessage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQtdHlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9mb3JtbHkvIiwic291cmNlcyI6WyJsaWIvYmFzZS9maWVsZC10eXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUF3QixTQUFTLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUUxRyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQ3hDLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxFQUFDLDBCQUEwQixFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ3hELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMzQyxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQzs7OztBQUd2RTtJQUFnRCw2Q0FBOEI7SUFBOUU7O0lBd0VBLENBQUM7SUFoRUMsc0JBQUksb0NBQUs7Ozs7UUFBVDtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbkMsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxvQ0FBSzs7OztRQUFUO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNuQyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHNDQUFPOzs7O1FBQVg7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksb0NBQUs7Ozs7UUFBVDtZQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7UUFDaEMsQ0FBQzs7Ozs7UUFFRCxVQUFVLEdBQUc7WUFDWCxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztR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Q0FBQyxHQUFHLElBQUksQ0FBQztJQUNuQyxDQUFDOzswQkFuRUEsWUFBWSxTQUFDLHdCQUF3QixFQUFFLEVBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFDO2tDQUUvRCxTQUFTLFNBQUMsMEJBQTBCOztJQWtFdkMsd0JBQUM7Q0FBQSxBQXhFRCxDQUFnRCxTQUFTLEdBd0V4RDtTQXhFcUIsaUJBQWlCOzs7SUFFckMseUNBQWlCOztJQUVqQixvQ0FBdUc7O0lBRXZHLDRDQUFtRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJWaWV3SW5pdCwgT25Jbml0LCBRdWVyeUxpc3QsIFZpZXdDaGlsZCwgVmlld0NoaWxkcmVuLCBWaWV3Q29udGFpbmVyUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QWJzdHJhY3RDb250cm9sfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0NvbXBvbmVudFV0aWxzfSBmcm9tICdAZXIvY29yZSc7XG5pbXBvcnQge0NvbW1vbnNVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7VmFsaWRhdGlvbk1lc3NhZ2VEaXJlY3RpdmV9IGZyb20gJ0Blci92YWxpZGF0ZSc7XG5pbXBvcnQge0ZpZWxkVHlwZX0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5pbXBvcnQge0Zvcm1seVByb3BzQmluZERpcmVjdGl2ZX0gZnJvbSAnLi4vZGlyZWN0aXZlcy9wcm9wcy9kaXJlY3RpdmUnO1xuaW1wb3J0IHtFckZvcm1seUZpZWxkQ29uZmlnfSBmcm9tICcuL2ZpZWxkLWNvbmZpZyc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBFckZvcm1seUZpZWxkVHlwZSBleHRlbmRzIEZpZWxkVHlwZTxFckZvcm1seUZpZWxkQ29uZmlnPiBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgZGVmYXVsdFByb3BzOiB7fTtcblxuICBAVmlld0NoaWxkcmVuKEZvcm1seVByb3BzQmluZERpcmVjdGl2ZSwge3JlYWQ6IFZpZXdDb250YWluZXJSZWZ9KSB3aWRnZXRzOiBRdWVyeUxpc3Q8Vmlld0NvbnRhaW5lclJlZj47XG5cbiAgQFZpZXdDaGlsZChWYWxpZGF0aW9uTWVzc2FnZURpcmVjdGl2ZSkgdmFsaWRhdGVNZXNzYWdlOiBWYWxpZGF0aW9uTWVzc2FnZURpcmVjdGl2ZTtcblxuICBnZXQgYXR0cnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmllbGRbJ2F0dHJzJ10gfHwge307XG4gIH1cblxuICBnZXQgcHJvcHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmllbGRbJ3Byb3BzJ10gfHwge307XG4gIH1cblxuICBnZXQgY29udGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5maWVsZFsnY29udGV4dCddIHx8IHt9O1xuICB9XG5cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmZvcm1Db250cm9sLnZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbCkge1xuICAgIHRoaXMuZm9ybUNvbnRyb2wuc2V0VmFsdWUodmFsKTtcbiAgfVxuXG4gIGNvbXBvbmVudChrZXk/KSB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybVsnY29tcG9uZW50cyddICYmXG4gICAgICB0aGlzLmZvcm1bJ2NvbXBvbmVudHMnXVtrZXkgfHwgdGhpcy5maWVsZC5rZXldO1xuICB9XG5cbiAgZGF0YSQoa2V5Pykge1xuICAgIHJldHVybiB0aGlzLmZvcm1bJ2NvbXBvbmVudHMnXSAmJlxuICAgICAgdGhpcy5mb3JtWydjb21wb25lbnRzJ11ba2V5IHx8IHRoaXMuZmllbGQua2V5XSAmJlxuICAgICAgdGhpcy5mb3JtWydjb21wb25lbnRzJ11ba2V5IHx8IHRoaXMuZmllbGQua2V5XS5kYXRhJDtcbiAgfVxuXG4gIGNvbnRyb2woa2V5Pzogc3RyaW5nIHwgc3RyaW5nW10pOiBBYnN0cmFjdENvbnRyb2wge1xuICAgIHJldHVybiB0aGlzLmZvcm0uZ2V0KGtleSk7XG4gIH1cblxuICBmaWVsZFByb3BzKGtleSkge1xuICAgIGNvbnN0IHByb3BzID0gdGhpcy5maWVsZFsnZm9ybVByb3BzJ10uZmllbGRzLmZpbHRlcihwcm9wID0+IHByb3Aua2V5ID09PSBrZXkpO1xuICAgIHJldHVybiAocHJvcHMgJiYgcHJvcHMubGVuZ3RoID09PSAxKSA/IHByb3BzWzBdIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIGNvbnN0IF93aWRnZXRzID0gdGhpcy53aWRnZXRzLnRvQXJyYXkoKTtcbiAgICBsZXQgY29tcG9uZW50O1xuICAgIGlmIChfd2lkZ2V0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbXBvbmVudCA9IENvbXBvbmVudFV0aWxzLmdldEhvc3RDb21wb25lbnRJbnN0KF93aWRnZXRzWzBdKTtcbiAgICB9IGVsc2UgaWYgKF93aWRnZXRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbXBvbmVudCA9IF93aWRnZXRzLm1hcCh3aWRnZXQgPT4gQ29tcG9uZW50VXRpbHMuZ2V0SG9zdENvbXBvbmVudEluc3Qod2lkZ2V0KSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnZhbGlkYXRlTWVzc2FnZSkge1xuICAgICAgdGhpcy52YWxpZGF0ZU1lc3NhZ2Uuc2hvd0Vycm9yID0gdGhpcy5zaG93RXJyb3IgfHwgdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmZvcm1bJ2NvbXBvbmVudHMnXSkge1xuICAgICAgdGhpcy5mb3JtWydjb21wb25lbnRzJ10gPSB7fTtcbiAgICB9XG4gICAgdGhpcy5mb3JtWydjb21wb25lbnRzJ11bdGhpcy5maWVsZC5rZXldID0gY29tcG9uZW50O1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5maWVsZFsncHJvcHMnXSA9IHRoaXMuZmllbGRbJ3Byb3BzJ10gfHwge307XG4gICAgaWYgKHRoaXMuZGVmYXVsdFByb3BzKSB7XG4gICAgICB0aGlzLmZpZWxkWydwcm9wcyddID0gQ29tbW9uc1V0aWxzLmRlZmF1bHRzKHt9LCB0aGlzLmZpZWxkWydwcm9wcyddLCB0aGlzLmRlZmF1bHRQcm9wcyk7XG4gICAgfVxuICAgIHRoaXMuZmllbGRbJ2Zvcm1seUZpZWxkJ10gPSB0aGlzO1xuICB9XG59XG4iXX0=