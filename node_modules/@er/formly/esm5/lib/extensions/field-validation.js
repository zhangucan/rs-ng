/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
var FormlyFieldValidatorExtension = /** @class */ (function () {
    function FormlyFieldValidatorExtension() {
    }
    /**
     * @param {?} field
     * @return {?}
     */
    FormlyFieldValidatorExtension.prototype.onPopulate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        // console.log('FormlyFieldValidatorExtension');
        // this.initFieldValidation(field);
        // this.initFieldAsyncValidation(field);
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    FormlyFieldValidatorExtension.prototype.initFieldValidation = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field.validators) {
            return;
        }
        this.initPredefinedFieldValidation(field);
        if (field.validators) {
            var _loop_1 = function (validatorName) {
                if (validatorName !== 'validation') {
                    /** @type {?} */
                    var validator_1 = field.validators[validatorName];
                    /** @type {?} */
                    var errorPath_1;
                    /** @type {?} */
                    var message_1;
                    if (validator_1 && typeof validator_1 === 'object') {
                        errorPath_1 = validator_1.errorPath;
                        message_1 = validator_1.message;
                        validator_1 = validator_1.expression;
                    }
                    field.validators.push(function (control) {
                        var _a, _b;
                        /** @type {?} */
                        var isValid = validator_1(control, field);
                        if (errorPath_1 && field.formControl && field.formControl.get(errorPath_1)) {
                            if (!isValid) {
                                field.formControl.get(errorPath_1).setErrors(tslib_1.__assign({}, (field.formControl.get(errorPath_1).errors || {}), (_a = {}, _a[validatorName] = { message: message_1 }, _a)));
                            }
                            else {
                                /** @type {?} */
                                var errors = (field.formControl.get(errorPath_1).errors || {});
                                delete errors[validatorName];
                                field.formControl.get(errorPath_1).setErrors(Object.keys(errors).length === 0 ? null : errors);
                            }
                        }
                        return isValid ? null : (_b = {}, _b[validatorName] = errorPath_1 ? { errorPath: errorPath_1 } : true, _b);
                    });
                }
                else {
                    if (!Array.isArray(field.validators.validation)) {
                        field.validators.validation = [field.validators.validation];
                    }
                    // field.validators.validation
                    //   .forEach((validator: any) => field._validators.push(this.wrapNgValidatorFn(field, validator)));
                }
            };
            for (var validatorName in field.validators) {
                _loop_1(validatorName);
            }
        }
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    FormlyFieldValidatorExtension.prototype.initFieldAsyncValidation = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field.asyncValidators) {
            return;
        }
        if (field.asyncValidators) {
            // for (const validatorName in field.asyncValidators) {
            //   if (validatorName !== 'validation') {
            //     let validator = field.asyncValidators[validatorName];
            //     if (isObject(validator)) {
            //       validator = validator.expression;
            //     }
            //
            //     field._asyncValidators.push((control: AbstractControl) => new Promise((resolve) => {
            //       return validator(control, field).then((result: boolean) => {
            //         resolve(result ? null : { [validatorName]: true });
            //       });
            //     }));
            //   } else {
            //     if (!Array.isArray(field.asyncValidators.validation)) {
            //       field.asyncValidators.validation = [field.asyncValidators.validation];
            //     }
            //     field.asyncValidators.validation
            //       .forEach((validator: any) => field._asyncValidators.push(this.wrapNgValidatorFn(field, validator) as any));
            //   }
            // }
        }
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    FormlyFieldValidatorExtension.prototype.initPredefinedFieldValidation = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        // const attr = '';
        //
        //   switch (attr) {
        //     case 'required':
        //       return Validators.required(control);
        //     case 'pattern':
        //       return Validators.pattern(value)(control);
        //     case 'minLength':
        //       return Validators.minLength(value)(control);
        //     case 'maxLength':
        //       return Validators.maxLength(value)(control);
        //     case 'min':
        //       return Validators.min(value)(control);
        //     case 'max':
        //       return Validators.max(value)(control);
        //   }
        //
    };
    return FormlyFieldValidatorExtension;
}());
export { FormlyFieldValidatorExtension };
//# sourceMappingURL=data:application/json;base64,