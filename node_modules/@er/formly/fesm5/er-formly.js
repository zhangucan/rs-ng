import { Subject } from 'rxjs';
import { CommonsUtils, StatesUtils, TreeUtils } from '@er/utils';
import { distinctUntilChanged, map, takeUntil } from 'rxjs/operators';
import { Directive, ViewChild, ViewChildren, ViewContainerRef, ChangeDetectorRef, Component, Input, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, InjectionToken, NgModule, Optional } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { PropsBindDirective, ComponentUtils, BaseFormComponent, DataUtils, ErCoreModule } from '@er/core';
import { ValidationMessageDirective, NgValidateMessages, NgValidators, ErValidateModule } from '@er/validate';
import { FieldType, FieldWrapper, FormlyConfig, FormlyModule } from '@ngx-formly/core';
import { TooltipModule } from 'primeng/primeng';
import { __extends, __assign, __spread } from 'tslib';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyPropsBindDirective = /** @class */ (function (_super) {
    __extends(FormlyPropsBindDirective, _super);
    function FormlyPropsBindDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FormlyPropsBindDirective.prototype, "field", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var viewComponent = this.viewComponentRef;
            if (viewComponent) {
                return viewComponent.field;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormlyPropsBindDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.hostComponentInst) {
            this.hostComponentInst['ctx'] = __assign({}, this.hostComponentInst['ctx'] || {}, { field: this.field });
            this.hostComponentInst['formlyField'] = this.field;
        }
    };
    FormlyPropsBindDirective.decorators = [
        { type: Directive, args: [{ selector: '[formlyPropsBind]' },] }
    ];
    return FormlyPropsBindDirective;
}(PropsBindDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var ErFormlyFieldType = /** @class */ (function (_super) {
    __extends(ErFormlyFieldType, _super);
    function ErFormlyFieldType() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ErFormlyFieldType.prototype, "attrs", {
        get: /**
         * @return {?}
         */
        function () {
            return this.field['attrs'] || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ErFormlyFieldType.prototype, "props", {
        get: /**
         * @return {?}
         */
        function () {
            return this.field['props'] || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ErFormlyFieldType.prototype, "context", {
        get: /**
         * @return {?}
         */
        function () {
            return this.field['context'] || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ErFormlyFieldType.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.formControl.value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.formControl.setValue(val);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} key
     * @return {?}
     */
    ErFormlyFieldType.prototype.component = /**
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        return this.form['components'] &&
            this.form['components'][key || this.field.key];
    };
    /**
     * @param {?=} key
     * @return {?}
     */
    ErFormlyFieldType.prototype.data$ = /**
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        return this.form['components'] &&
            this.form['components'][key || this.field.key] &&
            this.form['components'][key || this.field.key].data$;
    };
    /**
     * @param {?=} key
     * @return {?}
     */
    ErFormlyFieldType.prototype.control = /**
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        return this.form.get(key);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ErFormlyFieldType.prototype.fieldProps = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var props = this.field['formProps'].fields.filter(function (prop) { return prop.key === key; });
        return (props && props.length === 1) ? props[0] : undefined;
    };
    /**
     * @return {?}
     */
    ErFormlyFieldType.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var _widgets = this.widgets.toArray();
        /** @type {?} */
        var component;
        if (_widgets.length === 1) {
            component = ComponentUtils.getHostComponentInst(_widgets[0]);
        }
        else if (_widgets.length > 1) {
            component = _widgets.map(function (widget) { return ComponentUtils.getHostComponentInst(widget); });
        }
        if (this.validateMessage) {
            this.validateMessage.showError = this.showError || true;
        }
        if (!this.form['components']) {
            this.form['components'] = {};
        }
        this.form['components'][this.field.key] = component;
    };
    /**
     * @return {?}
     */
    ErFormlyFieldType.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.field['props'] = this.field['props'] || {};
        if (this.defaultProps) {
            this.field['props'] = CommonsUtils.defaults({}, this.field['props'], this.defaultProps);
        }
        this.field['formlyField'] = this;
    };
    ErFormlyFieldType.propDecorators = {
        widgets: [{ type: ViewChildren, args: [FormlyPropsBindDirective, { read: ViewContainerRef },] }],
        validateMessage: [{ type: ViewChild, args: [ValidationMessageDirective,] }]
    };
    return ErFormlyFieldType;
}(FieldType));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
ErFormlyFieldWrapper = /** @class */ (function (_super) {
    __extends(ErFormlyFieldWrapper, _super);
    function ErFormlyFieldWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ErFormlyFieldWrapper;
}(FieldWrapper));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyFormComponent = /** @class */ (function (_super) {
    __extends(FormlyFormComponent, _super);
    function FormlyFormComponent(cd) {
        var _this = _super.call(this, cd) || this;
        _this.cd = cd;
        _this.options = {};
        _this.valueChanges$ = new Subject();
        return _this;
    }
    Object.defineProperty(FormlyFormComponent.prototype, "formlyOptions", {
        get: /**
         * @return {?}
         */
        function () {
            return __assign({ fieldChanges: this.valueChanges$ }, this.options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyFormComponent.prototype, "submitTips", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this.form.valid) {
                /** @type {?} */
                var fields = this.getFormErrorFields();
                /** @type {?} */
                var labels_1 = [];
                fields.forEach(function (field) {
                    /** @type {?} */
                    var formlyField = _this.formlyField(field);
                    if (formlyField) {
                        /** @type {?} */
                        var label = formlyField.templateOptions && formlyField.templateOptions.label || field;
                        labels_1.push(label.replace(':', ''));
                    }
                });
                return "\u8BF7\u6B63\u786E\u5199\u4EE5\u4E0B\u4FE1\u606F\uFE0F\uFF1A" + labels_1.join(',');
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormlyFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        /** @type {?} */
        var valueChanges$ = this.options.fieldChanges || this.valueChanges$;
        if (this.valueChanges) {
            this.$subscriptions = valueChanges$.subscribe(function (event) {
                _this.valueChanges(__assign({}, event, { formlyForm: _this }));
            });
        }
    };
    /**
     * @param {?=} other
     * @return {?}
     */
    FormlyFormComponent.prototype.getEventContext = /**
     * @param {?=} other
     * @return {?}
     */
    function (other) {
        return _super.prototype.getEventContext.call(this, {
            fields: this.fields,
            formOptions: this.options,
            formProps: this.formProps,
            formlyForm: this
        });
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FormlyFormComponent.prototype.formlyField = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var props = this.fields.filter(function (prop) { return prop.key === key; });
        return (props && props.length === 1) ? props[0] : undefined;
    };
    FormlyFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-formly-form',
                    template: "<div [ngClass]=\"styleClass\" [ngStyle]=\"style\">\n  <ng-container *ngIf=\"header\">\n    <er-dyna-content [content]=\"header\"></er-dyna-content>\n  </ng-container>\n  <ng-container *ngIf=\"template(templateNames.header)\">\n    <ng-container *ngTemplateOutlet=\"template(templateNames.header);\n                                     context: getEventContext()\"></ng-container>\n  </ng-container>\n\n  <form [formGroup]=\"form\" [ngClass]=\"formStyleClass || 'mt-2'\" [ngStyle]=\"formStyle\" novalidate>\n    <formly-form [form]=\"form\"\n                 [options]=\"formlyOptions\"\n                 [(model)]=\"model\"\n                 [fields]=\"fields\"\n                 class=\"formly-form\">\n      <ng-content></ng-content>\n      <ng-container *ngTemplateOutlet=\"template(templateNames.buttons,default)\"></ng-container>\n    </formly-form>\n  </form>\n  <ng-container *ngIf=\"footer\">\n    <er-dyna-content [content]=\"footer\"></er-dyna-content>\n  </ng-container>\n  <ng-container *ngIf=\"template(templateNames.footer)\">\n    <ng-container *ngTemplateOutlet=\"template(templateNames.footer);\n                                     context: getEventContext()\"></ng-container>\n  </ng-container>\n</div>\n\n<ng-template #default>\n  <div [ngClass]=\"buttonsStyleClass\">\n    <er-button [stateKey]=\"formId\"\n               icon=\"fa fa-save\"\n               label=\"\u63D0&nbsp;&nbsp;&nbsp;\u4EA4\"\n               title=\"\u4FDD\u7559\u6570\u636E\u5230\u670D\u52A1\u7AEF\"\n               class=\"mr-2\"\n               type=\"button\"\n               [pTooltip]=\"submitTips\"\n               tooltipPosition=\"top\"\n               [tooltipDisabled]=\"form.valid\"\n               [disabled]=\"!form.valid\"\n               (onClick)=\"submit()\"\n               [styleClass]=\"submitBtnStyleClass\"\n    ></er-button>\n    <er-button icon=\"fa fa-circle-o\"\n               class=\"mr-2\"\n               label=\"\u91CD&nbsp;&nbsp;&nbsp;\u586B\"\n               title=\"\u6062\u590D\u5230\u4FEE\u6539\u524D\u7684\u72B6\u6001\"\n               [styleClass]=\"resetBtnStyleClass\"\n               (onClick)=\"resetModel()\">\n    </er-button>\n\n    <ng-container *ngFor=\"let btn of buttons\">\n      <er-button class=\"mr-2\" erPropsBind [props]=\"btn\" [context]=\"getEventContext(btn.context)\"></er-button>\n    </ng-container>\n\n  </div>\n</ng-template>\n"
                }] }
    ];
    /** @nocollapse */
    FormlyFormComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    FormlyFormComponent.propDecorators = {
        fields: [{ type: Input }],
        options: [{ type: Input }]
    };
    return FormlyFormComponent;
}(BaseFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var Components = [
    FormlyFormComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynamicWrapperComponent = /** @class */ (function (_super) {
    __extends(DynamicWrapperComponent, _super);
    function DynamicWrapperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DynamicWrapperComponent.decorators = [
        { type: Component, args: [{
                    template: "\n    <ng-container *ngIf=\"to['before']\">\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n    </ng-container>\n    <ng-container #fieldComponent></ng-container>\n    <ng-container *ngIf=\"to['after']\">\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n    </ng-container>\n    <ng-template #content>\n      <er-dyna-content [content]=\"to['content']\"\n                       [context]=\"to['context']\"\n                       [styleClass]=\"to['styleClass']\"\n                       [style]=\"to['style']\"\n      ></er-dyna-content>\n    </ng-template>\n  "
                }] }
    ];
    DynamicWrapperComponent.propDecorators = {
        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
    };
    return DynamicWrapperComponent;
}(FieldWrapper));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HorizontalWrapperComponent = /** @class */ (function (_super) {
    __extends(HorizontalWrapperComponent, _super);
    function HorizontalWrapperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HorizontalWrapperComponent.decorators = [
        { type: Component, args: [{
                    template: "\n    <div class=\"form-group row\">\n      <label [attr.for]=\"id\" class=\"col-sm-2 col-form-label\" *ngIf=\"to.label\">\n        <span [innerHTML]=\"to.label\"></span>\n        <span *ngIf=\"to.required && to['hideRequiredMarker'] !== true\" class=\"red\">*</span>\n      </label>\n      <div class=\"col-sm-10\">\n      \n        <ng-container *ngIf=\"to['before'] && to['before'].content\">\n          <er-dyna-content [content]=\"to['before'].content\" [context]=\"to['before'].context\"></er-dyna-content>\n        </ng-container>\n        \n        <ng-template #fieldComponent></ng-template>\n\n        <div *ngIf=\"showError\" class=\"invalid-feedback\" [style.display]=\"'block'\">\n          <er-validate-messages [formlyField]=\"field\"></er-validate-messages>\n        </div>\n\n        <small *ngIf=\"to.description\" class=\"form-text text-muted\">\n          <i class=\"text-primary fa fa-info-circle\"></i>\n          <span [innerHTML]=\"to.description\"></span>\n        </small>\n        \n        <ng-container *ngIf=\"to['after'] && to['after'].content\">\n          <er-dyna-content [content]=\"to['after'].content\" [context]=\"to['after'].context\"></er-dyna-content>\n        </ng-container>\n      \n      </div>\n    </div>\n  "
                }] }
    ];
    HorizontalWrapperComponent.propDecorators = {
        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
    };
    return HorizontalWrapperComponent;
}(FieldWrapper));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PanelWrapperComponent = /** @class */ (function (_super) {
    __extends(PanelWrapperComponent, _super);
    function PanelWrapperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PanelWrapperComponent.decorators = [
        { type: Component, args: [{
                    template: "\n    <div class=\"card\">\n      <h3 class=\"card-header\"><i [ngClass]=\"to['icon']\"></i> <span [innerHTML]=\"to['header']|erSafeHtml\"></span></h3>\n      <div class=\"card-body\">\n        <div *ngIf=\"to['before']\" class=\"card-before\">\n          <er-dyna-content [content]=\"to['before']\" [context]=\"model\"></er-dyna-content>\n        </div>\n        <ng-container #fieldComponent></ng-container>\n        <div *ngIf=\"to['after']\" class=\"card-after\">\n          <er-dyna-content [content]=\"to['after']\" [context]=\"model\"></er-dyna-content>\n        </div>\n      </div>\n      <div *ngIf=\"to['footer']\" class=\"card-footer\"><span [innerHTML]=\"to['footer']|erSafeHtml\"></span> </div>\n    </div>\n  "
                }] }
    ];
    PanelWrapperComponent.propDecorators = {
        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
    };
    return PanelWrapperComponent;
}(FieldWrapper));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var VerticalWrapperComponent = /** @class */ (function (_super) {
    __extends(VerticalWrapperComponent, _super);
    function VerticalWrapperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VerticalWrapperComponent.decorators = [
        { type: Component, args: [{
                    template: "\n    <div class=\"form-group\" [class.has-error]=\"showError\">\n      <label *ngIf=\"to.label && to['hideLabel'] !== true\" [attr.for]=\"id\">\n       <span *ngIf=\"to.required && to['hideRequiredMarker'] !== true\" style=\"color: red\">*</span> {{ to.label }}\n      </label>\n     \n      <ng-container *ngIf=\"to['before'] && to['before'].content\">\n        <er-dyna-content [content]=\"to['before'].content\" [context]=\"to['before'].context\"></er-dyna-content>\n      </ng-container>\n    \n      <ng-template #fieldComponent></ng-template>\n      \n      <div *ngIf=\"showError\" class=\"invalid-feedback\" [style.display]=\"'block'\">\n        <er-validate-messages [formlyField]=\"field\"></er-validate-messages>\n      </div>\n\n      <small *ngIf=\"to.description\" class=\"form-text text-muted\">\n        <i class=\"text-primary fa fa-info-circle\"></i> {{ to.description }}\n      </small>\n\n      <ng-container *ngIf=\"to['after'] && to['after'].content\">\n        <er-dyna-content [content]=\"to['after'].content\" [context]=\"to['after'].context\"></er-dyna-content>\n      </ng-container>\n      \n    </div>\n  "
                }] }
    ];
    VerticalWrapperComponent.propDecorators = {
        fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
    };
    return VerticalWrapperComponent;
}(FieldWrapper));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var FORMLY_WRAPPER_COMPONENTS = [
    VerticalWrapperComponent,
    HorizontalWrapperComponent,
    PanelWrapperComponent,
    DynamicWrapperComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var FormlyTypes = {
    array: 'array',
    group: 'group',
    dynamic: 'dynamic',
    value: 'value'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var FormlyWrappers = {
    vertical: 'vertical',
    horizontal: 'horizontal',
    panel: 'panel',
    tab: 'tab',
    dynamic: 'dynamic',
    collapse: 'collapse',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var FORMLY_VALIDATORS = [
    // {name: 'async', validation: NgAsyncValidator},
    { name: 'letter', validation: NgValidators.letter },
    { name: 'digit', validation: NgValidators.digit },
    { name: 'character', validation: NgValidators.character },
    { name: 'chinese', validation: NgValidators.chinese },
    { name: 'integer', validation: NgValidators.integer },
    { name: 'numeric', validation: NgValidators.numeric },
    { name: 'full', validation: NgValidators.fullWidth },
    { name: 'half', validation: NgValidators.halfWidth },
    { name: 'phone', validation: NgValidators.phone },
    { name: 'idCard', validation: NgValidators.idCard },
    { name: 'match', validation: NgValidators.match },
    { name: 'required', validation: NgValidators.required },
    { name: 'accept', validation: NgValidators.accept },
    { name: 'email', validation: NgValidators.email },
    { name: 'url', validation: NgValidators.url },
    { name: 'date', validation: NgValidators.date },
    { name: 'json', validation: NgValidators.json },
    { name: 'base64', validation: NgValidators.base64 },
    { name: 'creditCard', validation: NgValidators.creditCard },
    { name: 'password', validation: NgValidators.password },
    { name: 'after', validation: NgValidators.after },
    { name: 'before', validation: NgValidators.before },
    { name: 'between', validation: NgValidators.between },
    { name: 'dateFormat', validation: NgValidators.dateFormat },
    { name: 'age', validation: NgValidators.age },
    { name: 'equalTo', validation: NgValidators.equalTo },
    { name: 'notEqualTo', validation: NgValidators.notEqualTo },
    { name: 'minLength', validation: NgValidators.minLength },
    { name: 'maxLength', validation: NgValidators.maxLength },
    { name: 'min', validation: NgValidators.min },
    { name: 'max', validation: NgValidators.max },
    { name: 'pattern', validation: NgValidators.pattern },
    { name: 'rangeLength', validation: NgValidators.rangeLength },
    { name: 'range', validation: NgValidators.range },
    { name: 'gt', validation: NgValidators.gt },
    { name: 'gte', validation: NgValidators.gte },
    { name: 'lt', validation: NgValidators.lt },
    { name: 'lte', validation: NgValidators.lte },
    { name: 'minDate', validation: NgValidators.minDate },
    { name: 'maxDate', validation: NgValidators.maxDate },
    { name: 'equal', validation: NgValidators.equal },
    { name: 'notEqual', validation: NgValidators.notEqual },
    { name: 'equalTo2', validation: NgValidators.equalTo2 },
    { name: 'notEqualTo2', validation: NgValidators.notEqualTo2 }
];
/** @type {?} */
var FORMLY_VALIDATION_MESSAGES = [
    { name: 'required', message: NgValidateMessages.required },
    { name: 'maxlength', message: NgValidateMessages.maxlength },
    { name: 'minlength', message: NgValidateMessages.minlength },
    { name: 'min', message: NgValidateMessages.min },
    { name: 'max', message: NgValidateMessages.max },
    { name: 'pattern', message: NgValidateMessages.pattern },
    { name: 'letter', message: NgValidateMessages.letter },
    { name: 'digit', message: NgValidateMessages.digit },
    { name: 'character', message: NgValidateMessages.character },
    { name: 'chinese', message: NgValidateMessages.chinese },
    { name: 'integer', message: NgValidateMessages.integer },
    { name: 'number', message: NgValidateMessages.number },
    { name: 'full', message: NgValidateMessages.fullWidth },
    { name: 'half', message: NgValidateMessages.halfWidth },
    { name: 'phone', message: NgValidateMessages.phone },
    { name: 'idCard', message: NgValidateMessages.idCard },
    { name: 'age', message: NgValidateMessages.age },
    { name: 'password', message: NgValidateMessages.password },
    { name: 'dateBefore', message: NgValidateMessages.dateBefore },
    { name: 'dateAfter', message: NgValidateMessages.dateAfter },
    { name: 'dataBetween', message: NgValidateMessages.dataBetween },
    { name: 'condition', message: NgValidateMessages.condition },
    { name: 'email', message: NgValidateMessages.email },
    { name: 'not_matching', message: NgValidateMessages.not_matching },
    { name: 'unique', message: NgValidateMessages.unique },
    { name: 'rangeLength', message: NgValidateMessages.rangeLength },
    { name: 'gt', message: NgValidateMessages.gt },
    { name: 'gte', message: NgValidateMessages.gte },
    { name: 'lt', message: NgValidateMessages.lt },
    { name: 'lte', message: NgValidateMessages.lte },
    { name: 'lte', message: NgValidateMessages.lte },
    { name: 'range', message: NgValidateMessages.range },
    { name: 'url', message: NgValidateMessages.url },
    { name: 'date', message: NgValidateMessages.date },
    { name: 'minDate', message: NgValidateMessages.minDate },
    { name: 'maxDate', message: NgValidateMessages.maxDate },
    { name: 'json', message: NgValidateMessages.json },
    { name: 'base64', message: NgValidateMessages.base64 },
    { name: 'equal', message: NgValidateMessages.equal },
    { name: 'notEqual', message: NgValidateMessages.notEqual },
    { name: 'equalTo', message: NgValidateMessages.equalTo },
    { name: 'notEqualTo', message: NgValidateMessages.notEqualTo }
];
/** @type {?} */
var ER_FORMLY_CONFIG = {
    wrappers: [
        { name: FormlyWrappers.vertical, component: VerticalWrapperComponent },
        { name: FormlyWrappers.horizontal, component: HorizontalWrapperComponent },
        { name: FormlyWrappers.panel, component: PanelWrapperComponent },
        { name: FormlyWrappers.dynamic, component: DynamicWrapperComponent }
    ],
    validators: FORMLY_VALIDATORS,
    validationMessages: FORMLY_VALIDATION_MESSAGES
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyUtils = /** @class */ (function () {
    function FormlyUtils() {
    }
    /**
     * @param {?} ctx
     * @param {?} entity
     * @param {?=} nextSeqProps
     * @return {?}
     */
    FormlyUtils.resolveDistinctFieldValue = /**
     * @param {?} ctx
     * @param {?} entity
     * @param {?=} nextSeqProps
     * @return {?}
     */
    function (ctx, entity, nextSeqProps) {
        console.log(ctx);
        /** @type {?} */
        var fieldName = 'code';
        if (nextSeqProps) {
            fieldName = nextSeqProps.seqKey || 'code';
        }
        /** @type {?} */
        var currentValue = ctx.model[fieldName];
        if (!currentValue) {
            return DataUtils.getNextValue(__assign({}, nextSeqProps || {}, { apiEntry: entity.apiEntry })).pipe(map(function (result) {
                ctx.model[fieldName] = result;
                return true;
            }));
        }
        else {
            return DataUtils.checkDistinct({
                apiProps: {
                    apiEntry: entity.apiEntry,
                    query: nextSeqProps && nextSeqProps.query,
                    searchFields: fieldName,
                    queryValue: currentValue
                },
                id: ctx.model['id']
            });
        }
    };
    /**
     * @param {?} formlyForm
     * @param {?} fieldName
     * @param {?=} valueResolver
     * @return {?}
     */
    FormlyUtils.initFieldValueFromSelectedTreeNode = /**
     * @param {?} formlyForm
     * @param {?} fieldName
     * @param {?=} valueResolver
     * @return {?}
     */
    function (formlyForm, fieldName, valueResolver) {
        var _a;
        /** @type {?} */
        var fieldValue = formlyForm.model && formlyForm.model[fieldName];
        if (!fieldValue) {
            /** @type {?} */
            var node = TreeUtils.getSelectedNode(formlyForm && formlyForm['tableId']);
            if (node) {
                /** @type {?} */
                var val = void 0;
                if (valueResolver) {
                    val = valueResolver(node);
                }
                else {
                    val = { code: node['code'], name: node['name'] };
                }
                formlyForm.patchModel((_a = {}, _a[fieldName] = val, _a));
            }
        }
    };
    /**
     * @param {?} formlyForm
     * @param {?} fieldName
     * @return {?}
     */
    FormlyUtils.onFieldChange = /**
     * @param {?} formlyForm
     * @param {?} fieldName
     * @return {?}
     */
    function (formlyForm, fieldName) {
        return formlyForm.formControl(fieldName).valueChanges
            .pipe(takeUntil(formlyForm.destroyed$), distinctUntilChanged());
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    FormlyUtils.refreshContainerNavTree = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        /** @type {?} */
        var tableId = ctx.formlyForm.tableId;
        if (tableId) {
            /** @type {?} */
            var table = tableId && StatesUtils.getValue(tableId);
            if (table && table.component) {
                /** @type {?} */
                var container = table.component.$container;
                container.refreshTree = true;
            }
        }
    };
    return FormlyUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var Directives = [
    FormlyPropsBindDirective
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormlyFieldValidatorExtension = /** @class */ (function () {
    function FormlyFieldValidatorExtension() {
    }
    /**
     * @param {?} field
     * @return {?}
     */
    FormlyFieldValidatorExtension.prototype.onPopulate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        // console.log('FormlyFieldValidatorExtension');
        // this.initFieldValidation(field);
        // this.initFieldAsyncValidation(field);
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    FormlyFieldValidatorExtension.prototype.initFieldValidation = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field.validators) {
            return;
        }
        this.initPredefinedFieldValidation(field);
        if (field.validators) {
            var _loop_1 = function (validatorName) {
                if (validatorName !== 'validation') {
                    /** @type {?} */
                    var validator_1 = field.validators[validatorName];
                    /** @type {?} */
                    var errorPath_1;
                    /** @type {?} */
                    var message_1;
                    if (validator_1 && typeof validator_1 === 'object') {
                        errorPath_1 = validator_1.errorPath;
                        message_1 = validator_1.message;
                        validator_1 = validator_1.expression;
                    }
                    field.validators.push(function (control) {
                        var _a, _b;
                        /** @type {?} */
                        var isValid = validator_1(control, field);
                        if (errorPath_1 && field.formControl && field.formControl.get(errorPath_1)) {
                            if (!isValid) {
                                field.formControl.get(errorPath_1).setErrors(__assign({}, (field.formControl.get(errorPath_1).errors || {}), (_a = {}, _a[validatorName] = { message: message_1 }, _a)));
                            }
                            else {
                                /** @type {?} */
                                var errors = (field.formControl.get(errorPath_1).errors || {});
                                delete errors[validatorName];
                                field.formControl.get(errorPath_1).setErrors(Object.keys(errors).length === 0 ? null : errors);
                            }
                        }
                        return isValid ? null : (_b = {}, _b[validatorName] = errorPath_1 ? { errorPath: errorPath_1 } : true, _b);
                    });
                }
                else {
                    if (!Array.isArray(field.validators.validation)) {
                        field.validators.validation = [field.validators.validation];
                    }
                    // field.validators.validation
                    //   .forEach((validator: any) => field._validators.push(this.wrapNgValidatorFn(field, validator)));
                }
            };
            for (var validatorName in field.validators) {
                _loop_1(validatorName);
            }
        }
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    FormlyFieldValidatorExtension.prototype.initFieldAsyncValidation = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field.asyncValidators) {
            return;
        }
        if (field.asyncValidators) ;
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    FormlyFieldValidatorExtension.prototype.initPredefinedFieldValidation = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        // const attr = '';
        //
        //   switch (attr) {
        //     case 'required':
        //       return Validators.required(control);
        //     case 'pattern':
        //       return Validators.pattern(value)(control);
        //     case 'minLength':
        //       return Validators.minLength(value)(control);
        //     case 'maxLength':
        //       return Validators.maxLength(value)(control);
        //     case 'min':
        //       return Validators.min(value)(control);
        //     case 'max':
        //       return Validators.max(value)(control);
        //   }
        //
    };
    return FormlyFieldValidatorExtension;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var Pipes = [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var Er_FORMLY_CONFIG = new InjectionToken('Er_FORMLY_CONFIG');
var ErFormlyModule = /** @class */ (function () {
    function ErFormlyModule() {
    }
    ErFormlyModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        ReactiveFormsModule,
                        FormlyModule,
                        ErCoreModule,
                        ErValidateModule,
                        TooltipModule
                    ],
                    declarations: __spread(Components, Directives, Pipes),
                    exports: __spread(Components, Directives, Pipes)
                },] }
    ];
    return ErFormlyModule;
}());
var ErFormlyRootModule = /** @class */ (function () {
    function ErFormlyRootModule(formlyConfig, erFormlyConfigOption) {
        if (erFormlyConfigOption) {
            formlyConfig.addConfig(erFormlyConfigOption);
        }
        if (formlyConfig.extensions.hasOwnProperty('field-validation')) ;
        if (formlyConfig.extensions.hasOwnProperty('field-expression')) ;
        formlyConfig.addConfig({
            extensions: [
                { name: 'validator', extension: new FormlyFieldValidatorExtension }
            ]
        });
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    ErFormlyRootModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        return {
            ngModule: ErFormlyRootModule,
            providers: [
                { provide: Er_FORMLY_CONFIG, useValue: config, multi: true },
                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true }
            ]
        };
    };
    ErFormlyRootModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        ReactiveFormsModule,
                        ErCoreModule,
                        ErValidateModule,
                        FormlyModule.forRoot(ER_FORMLY_CONFIG)
                    ],
                    declarations: __spread(FORMLY_WRAPPER_COMPONENTS)
                },] }
    ];
    /** @nocollapse */
    ErFormlyRootModule.ctorParameters = function () { return [
        { type: FormlyConfig },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [Er_FORMLY_CONFIG,] }] }
    ]; };
    return ErFormlyRootModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ErFormlyModule, ErFormlyRootModule, ErFormlyFieldType, ErFormlyFieldWrapper, FormlyFormComponent, Components, FORMLY_WRAPPER_COMPONENTS, DynamicWrapperComponent, HorizontalWrapperComponent, PanelWrapperComponent, VerticalWrapperComponent, FormlyTypes, FormlyWrappers, ER_FORMLY_CONFIG, FormlyUtils, Directives as ɵc, FormlyPropsBindDirective as ɵb, Er_FORMLY_CONFIG as ɵa, Pipes as ɵd };

//# sourceMappingURL=er-formly.js.map