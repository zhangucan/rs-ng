/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgValidateMessages, NgValidators } from '@er/validate';
import { DynamicWrapperComponent } from '../field-wrappers/dynamic/wrapper';
import { HorizontalWrapperComponent } from '../field-wrappers/horizontal/wrapper';
import { PanelWrapperComponent } from '../field-wrappers/panel/wrapper';
import { VerticalWrapperComponent } from '../field-wrappers/vertical/wrapper';
import { FormlyWrappers } from '../types/field-wrappers/type';
/** @type {?} */
const FORMLY_VALIDATORS = [
    // {name: 'async', validation: NgAsyncValidator},
    { name: 'letter', validation: NgValidators.letter },
    { name: 'digit', validation: NgValidators.digit },
    { name: 'character', validation: NgValidators.character },
    { name: 'chinese', validation: NgValidators.chinese },
    { name: 'integer', validation: NgValidators.integer },
    { name: 'numeric', validation: NgValidators.numeric },
    { name: 'full', validation: NgValidators.fullWidth },
    { name: 'half', validation: NgValidators.halfWidth },
    { name: 'phone', validation: NgValidators.phone },
    { name: 'idCard', validation: NgValidators.idCard },
    { name: 'match', validation: NgValidators.match },
    { name: 'required', validation: NgValidators.required },
    { name: 'accept', validation: NgValidators.accept },
    { name: 'email', validation: NgValidators.email },
    { name: 'url', validation: NgValidators.url },
    { name: 'date', validation: NgValidators.date },
    { name: 'json', validation: NgValidators.json },
    { name: 'base64', validation: NgValidators.base64 },
    { name: 'creditCard', validation: NgValidators.creditCard },
    { name: 'password', validation: NgValidators.password },
    { name: 'after', validation: NgValidators.after },
    { name: 'before', validation: NgValidators.before },
    { name: 'between', validation: NgValidators.between },
    { name: 'dateFormat', validation: NgValidators.dateFormat },
    { name: 'age', validation: NgValidators.age },
    { name: 'equalTo', validation: NgValidators.equalTo },
    { name: 'notEqualTo', validation: NgValidators.notEqualTo },
    { name: 'minLength', validation: NgValidators.minLength },
    { name: 'maxLength', validation: NgValidators.maxLength },
    { name: 'min', validation: NgValidators.min },
    { name: 'max', validation: NgValidators.max },
    { name: 'pattern', validation: NgValidators.pattern },
    { name: 'rangeLength', validation: NgValidators.rangeLength },
    { name: 'range', validation: NgValidators.range },
    { name: 'gt', validation: NgValidators.gt },
    { name: 'gte', validation: NgValidators.gte },
    { name: 'lt', validation: NgValidators.lt },
    { name: 'lte', validation: NgValidators.lte },
    { name: 'minDate', validation: NgValidators.minDate },
    { name: 'maxDate', validation: NgValidators.maxDate },
    { name: 'equal', validation: NgValidators.equal },
    { name: 'notEqual', validation: NgValidators.notEqual },
    { name: 'equalTo2', validation: NgValidators.equalTo2 },
    { name: 'notEqualTo2', validation: NgValidators.notEqualTo2 }
];
/** @type {?} */
const FORMLY_VALIDATION_MESSAGES = [
    { name: 'required', message: NgValidateMessages.required },
    { name: 'maxlength', message: NgValidateMessages.maxlength },
    { name: 'minlength', message: NgValidateMessages.minlength },
    { name: 'min', message: NgValidateMessages.min },
    { name: 'max', message: NgValidateMessages.max },
    { name: 'pattern', message: NgValidateMessages.pattern },
    { name: 'letter', message: NgValidateMessages.letter },
    { name: 'digit', message: NgValidateMessages.digit },
    { name: 'character', message: NgValidateMessages.character },
    { name: 'chinese', message: NgValidateMessages.chinese },
    { name: 'integer', message: NgValidateMessages.integer },
    { name: 'number', message: NgValidateMessages.number },
    { name: 'full', message: NgValidateMessages.fullWidth },
    { name: 'half', message: NgValidateMessages.halfWidth },
    { name: 'phone', message: NgValidateMessages.phone },
    { name: 'idCard', message: NgValidateMessages.idCard },
    { name: 'age', message: NgValidateMessages.age },
    { name: 'password', message: NgValidateMessages.password },
    { name: 'dateBefore', message: NgValidateMessages.dateBefore },
    { name: 'dateAfter', message: NgValidateMessages.dateAfter },
    { name: 'dataBetween', message: NgValidateMessages.dataBetween },
    { name: 'condition', message: NgValidateMessages.condition },
    { name: 'email', message: NgValidateMessages.email },
    { name: 'not_matching', message: NgValidateMessages.not_matching },
    { name: 'unique', message: NgValidateMessages.unique },
    { name: 'rangeLength', message: NgValidateMessages.rangeLength },
    { name: 'gt', message: NgValidateMessages.gt },
    { name: 'gte', message: NgValidateMessages.gte },
    { name: 'lt', message: NgValidateMessages.lt },
    { name: 'lte', message: NgValidateMessages.lte },
    { name: 'lte', message: NgValidateMessages.lte },
    { name: 'range', message: NgValidateMessages.range },
    { name: 'url', message: NgValidateMessages.url },
    { name: 'date', message: NgValidateMessages.date },
    { name: 'minDate', message: NgValidateMessages.minDate },
    { name: 'maxDate', message: NgValidateMessages.maxDate },
    { name: 'json', message: NgValidateMessages.json },
    { name: 'base64', message: NgValidateMessages.base64 },
    { name: 'equal', message: NgValidateMessages.equal },
    { name: 'notEqual', message: NgValidateMessages.notEqual },
    { name: 'equalTo', message: NgValidateMessages.equalTo },
    { name: 'notEqualTo', message: NgValidateMessages.notEqualTo }
];
/** @type {?} */
export const ER_FORMLY_CONFIG = {
    wrappers: [
        { name: FormlyWrappers.vertical, component: VerticalWrapperComponent },
        { name: FormlyWrappers.horizontal, component: HorizontalWrapperComponent },
        { name: FormlyWrappers.panel, component: PanelWrapperComponent },
        { name: FormlyWrappers.dynamic, component: DynamicWrapperComponent }
    ],
    validators: FORMLY_VALIDATORS,
    validationMessages: FORMLY_VALIDATION_MESSAGES
};
//# sourceMappingURL=data:application/json;base64,