/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DataUtils } from '@er/core';
import { StatesUtils, TreeUtils } from '@er/utils';
import { distinctUntilChanged, map, takeUntil } from 'rxjs/operators';
export class FormlyUtils {
    /**
     * @param {?} ctx
     * @param {?} entity
     * @param {?=} nextSeqProps
     * @return {?}
     */
    static resolveDistinctFieldValue(ctx, entity, nextSeqProps) {
        console.log(ctx);
        /** @type {?} */
        let fieldName = 'code';
        if (nextSeqProps) {
            fieldName = nextSeqProps.seqKey || 'code';
        }
        /** @type {?} */
        const currentValue = ctx.model[fieldName];
        if (!currentValue) {
            return DataUtils.getNextValue(Object.assign({}, nextSeqProps || {}, { apiEntry: entity.apiEntry })).pipe(map(result => {
                ctx.model[fieldName] = result;
                return true;
            }));
        }
        else {
            return DataUtils.checkDistinct({
                apiProps: {
                    apiEntry: entity.apiEntry,
                    query: nextSeqProps && nextSeqProps.query,
                    searchFields: fieldName,
                    queryValue: currentValue
                },
                id: ctx.model['id']
            });
        }
    }
    /**
     * @param {?} formlyForm
     * @param {?} fieldName
     * @param {?=} valueResolver
     * @return {?}
     */
    static initFieldValueFromSelectedTreeNode(formlyForm, fieldName, valueResolver) {
        /** @type {?} */
        const fieldValue = formlyForm.model && formlyForm.model[fieldName];
        if (!fieldValue) {
            /** @type {?} */
            const node = TreeUtils.getSelectedNode(formlyForm && formlyForm['tableId']);
            if (node) {
                /** @type {?} */
                let val;
                if (valueResolver) {
                    val = valueResolver(node);
                }
                else {
                    val = { code: node['code'], name: node['name'] };
                }
                formlyForm.patchModel({ [fieldName]: val });
            }
        }
    }
    /**
     * @param {?} formlyForm
     * @param {?} fieldName
     * @return {?}
     */
    static onFieldChange(formlyForm, fieldName) {
        return formlyForm.formControl(fieldName).valueChanges
            .pipe(takeUntil(formlyForm.destroyed$), distinctUntilChanged());
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    static refreshContainerNavTree(ctx) {
        /** @type {?} */
        const tableId = ctx.formlyForm.tableId;
        if (tableId) {
            /** @type {?} */
            const table = tableId && StatesUtils.getValue(tableId);
            if (table && table.component) {
                /** @type {?} */
                const container = table.component.$container;
                container.refreshTree = true;
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvZm9ybWx5LyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFlLE1BQU0sVUFBVSxDQUFDO0FBRWpELE9BQU8sRUFBQyxXQUFXLEVBQUUsU0FBUyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRWpELE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFcEUsTUFBTSxPQUFPLFdBQVc7Ozs7Ozs7SUFFdEIsTUFBTSxDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxNQUFrQixFQUFFLFlBQTJCO1FBQ25GLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7O1lBQ2IsU0FBUyxHQUFHLE1BQU07UUFDdEIsSUFBSSxZQUFZLEVBQUU7WUFDaEIsU0FBUyxHQUFHLFlBQVksQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDO1NBQzNDOztjQUNLLFlBQVksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUN6QyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ2pCLE9BQU8sU0FBUyxDQUFDLFlBQVksbUJBQ3hCLFlBQVksSUFBSSxFQUFFLElBQ3JCLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxJQUN6QixDQUFDLElBQUksQ0FDTCxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ1gsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxNQUFNLENBQUM7Z0JBQzlCLE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQyxDQUFDLENBQ0gsQ0FBQztTQUNIO2FBQU07WUFDTCxPQUFPLFNBQVMsQ0FBQyxhQUFhLENBQUM7Z0JBQzdCLFFBQVEsRUFBRTtvQkFDUixRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7b0JBQ3pCLEtBQUssRUFBRSxZQUFZLElBQUksWUFBWSxDQUFDLEtBQUs7b0JBQ3pDLFlBQVksRUFBRSxTQUFTO29CQUN2QixVQUFVLEVBQUUsWUFBWTtpQkFDekI7Z0JBQ0QsRUFBRSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2FBQ3BCLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7Ozs7OztJQUVELE1BQU0sQ0FBQyxrQ0FBa0MsQ0FBQyxVQUFVLEVBQUUsU0FBaUIsRUFBRSxhQUE2Qjs7Y0FDOUYsVUFBVSxHQUFHLFVBQVUsQ0FBQyxLQUFLLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDbEUsSUFBSSxDQUFDLFVBQVUsRUFBRTs7a0JBQ1QsSUFBSSxHQUFHLFNBQVMsQ0FBQyxlQUFlLENBQUMsVUFBVSxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMzRSxJQUFJLElBQUksRUFBRTs7b0JBQ0osR0FBRztnQkFDUCxJQUFJLGFBQWEsRUFBRTtvQkFDakIsR0FBRyxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDM0I7cUJBQU07b0JBQ0wsR0FBRyxHQUFHLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFDLENBQUM7aUJBQ2hEO2dCQUNELFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUcsRUFBQyxDQUFDLENBQUM7YUFDM0M7U0FDRjtJQUNILENBQUM7Ozs7OztJQUVELE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLFNBQWlCO1FBQ2hELE9BQU8sVUFBVSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxZQUFZO2FBQ2xELElBQUksQ0FDSCxTQUFTLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUNoQyxvQkFBb0IsRUFBRSxDQUN2QixDQUFDO0lBQ04sQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsdUJBQXVCLENBQUMsR0FBRzs7Y0FDMUIsT0FBTyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTztRQUN0QyxJQUFJLE9BQU8sRUFBRTs7a0JBQ0wsS0FBSyxHQUFHLE9BQU8sSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztZQUN0RCxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFOztzQkFDdEIsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVTtnQkFDNUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7YUFDOUI7U0FDRjtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGF0YVV0aWxzLCBOZXh0U2VxUHJvcHN9IGZyb20gJ0Blci9jb3JlJztcbmltcG9ydCB7RGF0YUVudGl0eX0gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7U3RhdGVzVXRpbHMsIFRyZWVVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHRha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgY2xhc3MgRm9ybWx5VXRpbHMge1xuXG4gIHN0YXRpYyByZXNvbHZlRGlzdGluY3RGaWVsZFZhbHVlKGN0eCwgZW50aXR5OiBEYXRhRW50aXR5LCBuZXh0U2VxUHJvcHM/OiBOZXh0U2VxUHJvcHMpIHtcbiAgICBjb25zb2xlLmxvZyhjdHgpO1xuICAgIGxldCBmaWVsZE5hbWUgPSAnY29kZSc7XG4gICAgaWYgKG5leHRTZXFQcm9wcykge1xuICAgICAgZmllbGROYW1lID0gbmV4dFNlcVByb3BzLnNlcUtleSB8fCAnY29kZSc7XG4gICAgfVxuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IGN0eC5tb2RlbFtmaWVsZE5hbWVdO1xuICAgIGlmICghY3VycmVudFZhbHVlKSB7XG4gICAgICByZXR1cm4gRGF0YVV0aWxzLmdldE5leHRWYWx1ZSh7XG4gICAgICAgIC4uLm5leHRTZXFQcm9wcyB8fCB7fSxcbiAgICAgICAgYXBpRW50cnk6IGVudGl0eS5hcGlFbnRyeVxuICAgICAgfSkucGlwZShcbiAgICAgICAgbWFwKHJlc3VsdCA9PiB7XG4gICAgICAgICAgY3R4Lm1vZGVsW2ZpZWxkTmFtZV0gPSByZXN1bHQ7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gRGF0YVV0aWxzLmNoZWNrRGlzdGluY3Qoe1xuICAgICAgICBhcGlQcm9wczoge1xuICAgICAgICAgIGFwaUVudHJ5OiBlbnRpdHkuYXBpRW50cnksXG4gICAgICAgICAgcXVlcnk6IG5leHRTZXFQcm9wcyAmJiBuZXh0U2VxUHJvcHMucXVlcnksXG4gICAgICAgICAgc2VhcmNoRmllbGRzOiBmaWVsZE5hbWUsXG4gICAgICAgICAgcXVlcnlWYWx1ZTogY3VycmVudFZhbHVlXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiBjdHgubW9kZWxbJ2lkJ11cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBpbml0RmllbGRWYWx1ZUZyb21TZWxlY3RlZFRyZWVOb2RlKGZvcm1seUZvcm0sIGZpZWxkTmFtZTogc3RyaW5nLCB2YWx1ZVJlc29sdmVyPzogKG5vZGUpID0+IGFueSkge1xuICAgIGNvbnN0IGZpZWxkVmFsdWUgPSBmb3JtbHlGb3JtLm1vZGVsICYmIGZvcm1seUZvcm0ubW9kZWxbZmllbGROYW1lXTtcbiAgICBpZiAoIWZpZWxkVmFsdWUpIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBUcmVlVXRpbHMuZ2V0U2VsZWN0ZWROb2RlKGZvcm1seUZvcm0gJiYgZm9ybWx5Rm9ybVsndGFibGVJZCddKTtcbiAgICAgIGlmIChub2RlKSB7XG4gICAgICAgIGxldCB2YWw7XG4gICAgICAgIGlmICh2YWx1ZVJlc29sdmVyKSB7XG4gICAgICAgICAgdmFsID0gdmFsdWVSZXNvbHZlcihub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWwgPSB7Y29kZTogbm9kZVsnY29kZSddLCBuYW1lOiBub2RlWyduYW1lJ119O1xuICAgICAgICB9XG4gICAgICAgIGZvcm1seUZvcm0ucGF0Y2hNb2RlbCh7W2ZpZWxkTmFtZV06IHZhbH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBvbkZpZWxkQ2hhbmdlKGZvcm1seUZvcm0sIGZpZWxkTmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gZm9ybWx5Rm9ybS5mb3JtQ29udHJvbChmaWVsZE5hbWUpLnZhbHVlQ2hhbmdlc1xuICAgICAgLnBpcGUoXG4gICAgICAgIHRha2VVbnRpbChmb3JtbHlGb3JtLmRlc3Ryb3llZCQpLFxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICAgICApO1xuICB9XG5cbiAgc3RhdGljIHJlZnJlc2hDb250YWluZXJOYXZUcmVlKGN0eCkge1xuICAgIGNvbnN0IHRhYmxlSWQgPSBjdHguZm9ybWx5Rm9ybS50YWJsZUlkO1xuICAgIGlmICh0YWJsZUlkKSB7XG4gICAgICBjb25zdCB0YWJsZSA9IHRhYmxlSWQgJiYgU3RhdGVzVXRpbHMuZ2V0VmFsdWUodGFibGVJZCk7XG4gICAgICBpZiAodGFibGUgJiYgdGFibGUuY29tcG9uZW50KSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRhYmxlLmNvbXBvbmVudC4kY29udGFpbmVyO1xuICAgICAgICBjb250YWluZXIucmVmcmVzaFRyZWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19