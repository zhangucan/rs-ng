/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class FormlyFieldValidatorExtension {
    /**
     * @param {?} field
     * @return {?}
     */
    onPopulate(field) {
        // console.log('FormlyFieldValidatorExtension');
        // this.initFieldValidation(field);
        // this.initFieldAsyncValidation(field);
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    initFieldValidation(field) {
        if (field.validators) {
            return;
        }
        this.initPredefinedFieldValidation(field);
        if (field.validators) {
            for (const validatorName in field.validators) {
                if (validatorName !== 'validation') {
                    /** @type {?} */
                    let validator = field.validators[validatorName];
                    /** @type {?} */
                    let errorPath;
                    /** @type {?} */
                    let message;
                    if (validator && typeof validator === 'object') {
                        errorPath = validator.errorPath;
                        message = validator.message;
                        validator = validator.expression;
                    }
                    field.validators.push((control) => {
                        /** @type {?} */
                        const isValid = validator(control, field);
                        if (errorPath && field.formControl && field.formControl.get(errorPath)) {
                            if (!isValid) {
                                field.formControl.get(errorPath).setErrors(Object.assign({}, (field.formControl.get(errorPath).errors || {}), { [validatorName]: { message } }));
                            }
                            else {
                                /** @type {?} */
                                const errors = (field.formControl.get(errorPath).errors || {});
                                delete errors[validatorName];
                                field.formControl.get(errorPath).setErrors(Object.keys(errors).length === 0 ? null : errors);
                            }
                        }
                        return isValid ? null : { [validatorName]: errorPath ? { errorPath } : true };
                    });
                }
                else {
                    if (!Array.isArray(field.validators.validation)) {
                        field.validators.validation = [field.validators.validation];
                    }
                    // field.validators.validation
                    //   .forEach((validator: any) => field._validators.push(this.wrapNgValidatorFn(field, validator)));
                }
            }
        }
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    initFieldAsyncValidation(field) {
        if (field.asyncValidators) {
            return;
        }
        if (field.asyncValidators) {
            // for (const validatorName in field.asyncValidators) {
            //   if (validatorName !== 'validation') {
            //     let validator = field.asyncValidators[validatorName];
            //     if (isObject(validator)) {
            //       validator = validator.expression;
            //     }
            //
            //     field._asyncValidators.push((control: AbstractControl) => new Promise((resolve) => {
            //       return validator(control, field).then((result: boolean) => {
            //         resolve(result ? null : { [validatorName]: true });
            //       });
            //     }));
            //   } else {
            //     if (!Array.isArray(field.asyncValidators.validation)) {
            //       field.asyncValidators.validation = [field.asyncValidators.validation];
            //     }
            //     field.asyncValidators.validation
            //       .forEach((validator: any) => field._asyncValidators.push(this.wrapNgValidatorFn(field, validator) as any));
            //   }
            // }
        }
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    initPredefinedFieldValidation(field) {
        // const attr = '';
        //
        //   switch (attr) {
        //     case 'required':
        //       return Validators.required(control);
        //     case 'pattern':
        //       return Validators.pattern(value)(control);
        //     case 'minLength':
        //       return Validators.minLength(value)(control);
        //     case 'maxLength':
        //       return Validators.maxLength(value)(control);
        //     case 'min':
        //       return Validators.min(value)(control);
        //     case 'max':
        //       return Validators.max(value)(control);
        //   }
        //
    }
}
//# sourceMappingURL=data:application/json;base64,