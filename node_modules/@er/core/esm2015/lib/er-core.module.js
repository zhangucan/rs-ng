/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { HttpClientModule } from '@angular/common/http';
import { InjectionToken, Injector, NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { RouteReuseStrategy, RouterModule } from '@angular/router';
import { NotifyLevel, NotifyType, StateNames, StompStates } from '@er/types';
import { ConfigUtils, StatesUtils } from '@er/utils';
import { StompConfig, StompService } from '@stomp/ng2-stompjs';
import { DynamicModule } from 'ng-dynamic-component';
import { NgPipesModule } from 'ngx-pipes';
import { distinctUntilChanged, tap } from 'rxjs/operators';
import { CoreComponents } from './components/all';
import { CoreDirectives } from './directives/all';
import { CoreInterceptors } from './interceptors/all';
import { CorePipes } from './pipes/all';
import { BACKGROUND_TASK_TOKEN } from './services/all';
import { RouterStateService } from './services/router/service';
import { CachedRouteReuseStrategy } from './services/strategy/service';
import { TaskService } from './services/task/service';
import { CORE_TASKS } from './tasks/all';
import { DateSyncUtils } from './utils/date-sync';
import { DiUtils } from './utils/di';
/** @type {?} */
export const APP_CONFIG = new InjectionToken('APP_CONFIG');
/**
 * @param {?} appConfig
 * @return {?}
 */
export function initialize(appConfig) {
    return function () {
        // ConfigUtils.configApp(appConfig);
    };
}
export class ErCoreModule {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        if (!DiUtils.injector) {
            DiUtils.injector = injector;
            // load services
            injector.get(RouterStateService);
            injector.get(TaskService);
            try {
                /** @type {?} */
                const stompService = injector.get(StompService);
                if (stompService && ConfigUtils.getConfig().stomp.enabled) {
                    stompService.state
                        .pipe(distinctUntilChanged(), tap((state) => {
                        StatesUtils.update(StateNames.socket, { state: StompStates[state] });
                        StatesUtils.update(StateNames.notify, {
                            type: state === 0 ? NotifyType.ANNOUNCE : NotifyType.ALERT,
                            message: `消息服务器状态：${StompStates[state]}`,
                            level: state === 0 ? NotifyLevel.ERROR : NotifyLevel.INFO
                        });
                    })).subscribe();
                }
            }
            catch (e) {
            }
        }
    }
    /**
     * @param {?} appConfig
     * @return {?}
     */
    static forRoot(appConfig) {
        return {
            ngModule: ErCoreModule,
            providers: [
                { provide: APP_CONFIG, useValue: appConfig },
                // {
                //   provide: APP_INITIALIZER,
                //   useFactory: initialize,
                //   deps: [APP_CONFIG],
                //   multi: true
                // },
                ...CoreInterceptors,
                appConfig.stomp.enabled ? StompService : [],
                appConfig.stomp.enabled ? { provide: StompConfig, useValue: appConfig.stomp } : [],
                { provide: BACKGROUND_TASK_TOKEN, useValue: DateSyncUtils.start, multi: true },
                { provide: BACKGROUND_TASK_TOKEN, useValue: CORE_TASKS, multi: true },
                {
                    provide: RouteReuseStrategy,
                    useClass: CachedRouteReuseStrategy
                }
            ]
        };
    }
}
ErCoreModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    HttpClientModule,
                    NgPipesModule,
                    DynamicModule.withComponents(CoreComponents)
                ],
                declarations: [
                    ...CoreComponents,
                    ...CoreDirectives,
                    ...CorePipes
                ],
                exports: [
                    CommonModule,
                    RouterModule,
                    HttpClientModule,
                    NgPipesModule,
                    ...CoreComponents,
                    ...CoreDirectives,
                    ...CorePipes
                ]
            },] }
];
/** @nocollapse */
ErCoreModule.ctorParameters = () => [
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ErCoreModule.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXItY29yZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9lci1jb3JlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3RELE9BQU8sRUFBa0IsY0FBYyxFQUFFLFFBQVEsRUFBdUIsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZHLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUMsa0JBQWtCLEVBQUUsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDakUsT0FBTyxFQUFjLFdBQVcsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUN4RixPQUFPLEVBQUMsV0FBVyxFQUFFLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNuRCxPQUFPLEVBQUMsV0FBVyxFQUFFLFlBQVksRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQzdELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDdEMsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0s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QUFRLEVBQUUsYUFBYSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFDO2dCQUM1RSxFQUFDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUM7Z0JBQ25FO29CQUNFLE9BQU8sRUFBRSxrQkFBa0I7b0JBQzNCLFFBQVEsRUFBRSx3QkFBd0I7aUJBQ25DO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7O1lBM0VGLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUU7b0JBQ1AsWUFBWTtvQkFDWixXQUFXO29CQUNYLFlBQVk7b0JBQ1osZ0JBQWdCO29CQUNoQixhQUFhO29CQUNiLGFBQWEsQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDO2lCQUM3QztnQkFDRCxZQUFZLEVBQUU7b0JBQ1osR0FBRyxjQUFjO29CQUNqQixHQUFHLGNBQWM7b0JBQ2pCLEdBQUcsU0FBUztpQkFDYjtnQkFDRCxPQUFPLEVBQUU7b0JBQ1AsWUFBWTtvQkFDWixZQUFZO29CQUNaLGdCQUFnQjtvQkFDaEIsYUFBYTtvQkFDYixHQUFHLGNBQWM7b0JBQ2pCLEdBQUcsY0FBYztvQkFDakIsR0FBRyxTQUFTO2lCQUNiO2FBQ0Y7Ozs7WUFwRHdDLFFBQVE7Ozs7Ozs7SUF1RG5DLGdDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtIdHRwQ2xpZW50TW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge0FQUF9JTklUSUFMSVpFUiwgSW5qZWN0aW9uVG9rZW4sIEluamVjdG9yLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Zvcm1zTW9kdWxlfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge1JvdXRlUmV1c2VTdHJhdGVneSwgUm91dGVyTW9kdWxlfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtDb25maWdNb2RlbCwgTm90aWZ5TGV2ZWwsIE5vdGlmeVR5cGUsIFN0YXRlTmFtZXMsIFN0b21wU3RhdGVzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb25maWdVdGlscywgU3RhdGVzVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge1N0b21wQ29uZmlnLCBTdG9tcFNlcnZpY2V9IGZyb20gJ0BzdG9tcC9uZzItc3RvbXBqcyc7XG5pbXBvcnQge0R5bmFtaWNNb2R1bGV9IGZyb20gJ25nLWR5bmFtaWMtY29tcG9uZW50JztcbmltcG9ydCB7TmdQaXBlc01vZHVsZX0gZnJvbSAnbmd4LXBpcGVzJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtDb3JlQ29tcG9uZW50c30gZnJvbSAnLi9jb21wb25lbnRzL2FsbCc7XG5pbXBvcnQge0NvcmVEaXJlY3RpdmVzfSBmcm9tICcuL2RpcmVjdGl2ZXMvYWxsJztcbmltcG9ydCB7Q29yZUludGVyY2VwdG9yc30gZnJvbSAnLi9pbnRlcmNlcHRvcnMvYWxsJztcbmltcG9ydCB7Q29yZVBpcGVzfSBmcm9tICcuL3BpcGVzL2FsbCc7XG5pbXBvcnQge0JBQ0tHUk9VTkRfVEFTS19UT0tFTn0gZnJvbSAnLi9zZXJ2aWNlcy9hbGwnO1xuaW1wb3J0IHtSb3V0ZXJTdGF0ZVNlcnZpY2V9IGZyb20gJy4vc2VydmljZXMvcm91dGVyL3NlcnZpY2UnO1xuaW1wb3J0IHtDYWNoZWRSb3V0ZVJldXNlU3RyYXRlZ3l9IGZyb20gJy4vc2VydmljZXMvc3RyYXRlZ3kvc2VydmljZSc7XG5pbXBvcnQge1Rhc2tTZXJ2aWNlfSBmcm9tICcuL3NlcnZpY2VzL3Rhc2svc2VydmljZSc7XG5pbXBvcnQge0NPUkVfVEFTS1N9IGZyb20gJy4vdGFza3MvYWxsJztcbmltcG9ydCB7RGF0ZVN5bmNVdGlsc30gZnJvbSAnLi91dGlscy9kYXRlLXN5bmMnO1xuaW1wb3J0IHtEaVV0aWxzfSBmcm9tICcuL3V0aWxzL2RpJztcblxuZXhwb3J0IGNvbnN0IEFQUF9DT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPignQVBQX0NPTkZJRycpO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZShhcHBDb25maWc6IENvbmZpZ01vZGVsKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAvLyBDb25maWdVdGlscy5jb25maWdBcHAoYXBwQ29uZmlnKTtcbiAgfTtcbn1cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBGb3Jtc01vZHVsZSxcbiAgICBSb3V0ZXJNb2R1bGUsXG4gICAgSHR0cENsaWVudE1vZHVsZSxcbiAgICBOZ1BpcGVzTW9kdWxlLFxuICAgIER5bmFtaWNNb2R1bGUud2l0aENvbXBvbmVudHMoQ29yZUNvbXBvbmVudHMpXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIC4uLkNvcmVDb21wb25lbnRzLFxuICAgIC4uLkNvcmVEaXJlY3RpdmVzLFxuICAgIC4uLkNvcmVQaXBlc1xuICBdLFxuICBleHBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIFJvdXRlck1vZHVsZSxcbiAgICBIdHRwQ2xpZW50TW9kdWxlLFxuICAgIE5nUGlwZXNNb2R1bGUsXG4gICAgLi4uQ29yZUNvbXBvbmVudHMsXG4gICAgLi4uQ29yZURpcmVjdGl2ZXMsXG4gICAgLi4uQ29yZVBpcGVzXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRXJDb3JlTW9kdWxlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIGlmICghRGlVdGlscy5pbmplY3Rvcikge1xuICAgICAgRGlVdGlscy5pbmplY3RvciA9IGluamVjdG9yO1xuICAgICAgLy8gbG9hZCBzZXJ2aWNlc1xuICAgICAgaW5qZWN0b3IuZ2V0PFJvdXRlclN0YXRlU2VydmljZT4oUm91dGVyU3RhdGVTZXJ2aWNlKTtcbiAgICAgIGluamVjdG9yLmdldDxUYXNrU2VydmljZT4oVGFza1NlcnZpY2UpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc3RvbXBTZXJ2aWNlID0gaW5qZWN0b3IuZ2V0PFN0b21wU2VydmljZT4oU3RvbXBTZXJ2aWNlKTtcbiAgICAgICAgaWYgKHN0b21wU2VydmljZSAmJiBDb25maWdVdGlscy5nZXRDb25maWcoKS5zdG9tcC5lbmFibGVkKSB7XG4gICAgICAgICAgc3RvbXBTZXJ2aWNlLnN0YXRlXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgICAgICAgdGFwKChzdGF0ZTogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgU3RhdGVzVXRpbHMudXBkYXRlKFN0YXRlTmFtZXMuc29ja2V0LCB7c3RhdGU6IFN0b21wU3RhdGVzW3N0YXRlXX0pO1xuICAgICAgICAgICAgICAgIFN0YXRlc1V0aWxzLnVwZGF0ZShTdGF0ZU5hbWVzLm5vdGlmeSwge1xuICAgICAgICAgICAgICAgICAgdHlwZTogc3RhdGUgPT09IDAgPyBOb3RpZnlUeXBlLkFOTk9VTkNFIDogTm90aWZ5VHlwZS5BTEVSVCxcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGDmtojmga/mnI3liqHlmajnirbmgIHvvJoke1N0b21wU3RhdGVzW3N0YXRlXX1gLFxuICAgICAgICAgICAgICAgICAgbGV2ZWw6IHN0YXRlID09PSAwID8gTm90aWZ5TGV2ZWwuRVJST1IgOiBOb3RpZnlMZXZlbC5JTkZPXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApLnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGZvclJvb3QoYXBwQ29uZmlnOiBDb25maWdNb2RlbCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogRXJDb3JlTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtwcm92aWRlOiBBUFBfQ09ORklHLCB1c2VWYWx1ZTogYXBwQ29uZmlnfSxcbiAgICAgICAgLy8ge1xuICAgICAgICAvLyAgIHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcbiAgICAgICAgLy8gICB1c2VGYWN0b3J5OiBpbml0aWFsaXplLFxuICAgICAgICAvLyAgIGRlcHM6IFtBUFBfQ09ORklHXSxcbiAgICAgICAgLy8gICBtdWx0aTogdHJ1ZVxuICAgICAgICAvLyB9LFxuICAgICAgICAuLi5Db3JlSW50ZXJjZXB0b3JzLFxuICAgICAgICBhcHBDb25maWcuc3RvbXAuZW5hYmxlZCA/IFN0b21wU2VydmljZSA6IFtdLFxuICAgICAgICBhcHBDb25maWcuc3RvbXAuZW5hYmxlZCA/IHtwcm92aWRlOiBTdG9tcENvbmZpZywgdXNlVmFsdWU6IGFwcENvbmZpZy5zdG9tcH0gOiBbXSxcbiAgICAgICAge3Byb3ZpZGU6IEJBQ0tHUk9VTkRfVEFTS19UT0tFTiwgdXNlVmFsdWU6IERhdGVTeW5jVXRpbHMuc3RhcnQsIG11bHRpOiB0cnVlfSxcbiAgICAgICAge3Byb3ZpZGU6IEJBQ0tHUk9VTkRfVEFTS19UT0tFTiwgdXNlVmFsdWU6IENPUkVfVEFTS1MsIG11bHRpOiB0cnVlfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFJvdXRlUmV1c2VTdHJhdGVneSxcbiAgICAgICAgICB1c2VDbGFzczogQ2FjaGVkUm91dGVSZXVzZVN0cmF0ZWd5XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=