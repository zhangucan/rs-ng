/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { ConfigUtils } from '@er/utils';
import { BaseDirective } from '../../bases/directive';
/**
 * @abstract
 */
export class SpinnerBaseDirective extends BaseDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        super();
        this.el = el;
        this.renderer = renderer;
        this.position = 'right';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInit();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.spinElement = this.createElement('span', ['spinner', this.position, 'd-none']);
        if (!this.spinnerClass) {
            this.spinnerClass = ConfigUtils.getConfig().onLoading || 'fa fa-cog fa-spin fa-spin-2x';
        }
        /** @type {?} */
        const spinnerEle = this.createElement('i', this.spinnerClass.split(' '));
        this.renderer.appendChild(this.spinElement, spinnerEle);
        this.placeSpin();
    }
    /**
     * @protected
     * @return {?}
     */
    placeSpin() {
        /** @type {?} */
        const element = this.el.nativeElement;
        if (element instanceof HTMLDivElement) {
            this.addSpin(element);
        }
        else if (element instanceof HTMLButtonElement) {
            this.appendChildSpin(element);
        }
        else if (element instanceof HTMLImageElement) {
            this.replaceWithWrapper();
        }
        else if (element instanceof HTMLUListElement) {
            this.replaceWithWrapper();
        }
        else if (element instanceof HTMLInputElement) {
            switch (element.type) {
                case 'text':
                case 'file': {
                    this.replaceWithWrapper();
                    break;
                }
                case 'checkbox':
                case 'radio':
                case 'button': {
                    this.replaceWithWrapper('span');
                    break;
                }
                default:
                    this.replaceWithWrapper();
            }
        }
        else {
            this.replaceWithWrapper();
        }
    }
    /**
     * @protected
     * @param {?} parent
     * @return {?}
     */
    appendChildSpin(parent) {
        this.renderer.appendChild(parent, this.spinElement);
    }
    /**
     * @protected
     * @param {?} parent
     * @return {?}
     */
    addSpin(parent) {
        this.renderer.addClass(parent, 'spin-container');
        this.renderer.removeClass(this.spinElement, this.position);
        this.renderer.addClass(this.spinElement, 'fa-2x');
        this.renderer.addClass(this.spinElement, 'center');
        this.appendChildSpin(parent);
    }
    /**
     * @protected
     * @param {?=} tag
     * @return {?}
     */
    replaceWithWrapper(tag = 'div') {
        this.containerElement = this.createElement(tag, ['spin-container']);
        /** @type {?} */
        const parent = this.el.nativeElement.parentNode;
        this.renderer.insertBefore(parent, this.containerElement, this.el.nativeElement);
        this.renderer.removeChild(parent, this.el.nativeElement);
        if (tag !== 'div') {
            this.renderer.addClass(this.spinElement, 'spin-inline');
            if (this.position === 'left') {
                this.renderer.appendChild(this.containerElement, this.spinElement);
                this.renderer.appendChild(this.containerElement, this.el.nativeElement);
            }
        }
        else {
            this.renderer.appendChild(this.containerElement, this.el.nativeElement);
            this.renderer.appendChild(this.containerElement, this.spinElement);
        }
    }
    /**
     * @protected
     * @param {?} tag
     * @param {?} classNames
     * @return {?}
     */
    createElement(tag, classNames) {
        /** @type {?} */
        const element = this.renderer.createElement(tag);
        if (classNames) {
            classNames.forEach(className => this.renderer.addClass(element, className));
        }
        return element;
    }
}
SpinnerBaseDirective.propDecorators = {
    spinnerClass: [{ type: Input }],
    position: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SpinnerBaseDirective.prototype.spinnerClass;
    /** @type {?} */
    SpinnerBaseDirective.prototype.position;
    /** @type {?} */
    SpinnerBaseDirective.prototype.spinElement;
    /** @type {?} */
    SpinnerBaseDirective.prototype.containerElement;
    /**
     * @type {?}
     * @protected
     */
    SpinnerBaseDirective.prototype.el;
    /**
     * @type {?}
     * @protected
     */
    SpinnerBaseDirective.prototype.renderer;
    /**
     * @abstract
     * @return {?}
     */
    SpinnerBaseDirective.prototype.onInit = function () { };
}
//# sourceMappingURL=data:application/json;base64,