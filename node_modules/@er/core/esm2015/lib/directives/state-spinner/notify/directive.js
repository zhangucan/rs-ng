/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { Observable } from 'rxjs';
import { SpinnerBaseDirective } from '../base';
export class NotifySpinnerDirective extends SpinnerBaseDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        super(el, renderer);
    }
    /**
     * @return {?}
     */
    onInit() {
        this.$subscriptions =
            this.notifier
                .subscribe(state => {
                !!state
                    ? this.renderer.removeClass(this.spinElement, 'd-none')
                    : this.renderer.addClass(this.spinElement, 'd-none');
            });
    }
}
NotifySpinnerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[erNotifySpinner]'
            },] }
];
/** @nocollapse */
NotifySpinnerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
NotifySpinnerDirective.propDecorators = {
    notifier: [{ type: Input, args: ['notifySpinner',] }]
};
if (false) {
    /** @type {?} */
    NotifySpinnerDirective.prototype.notifier;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9zdGF0ZS1zcGlubmVyL25vdGlmeS9kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFNN0MsTUFBTSxPQUFPLHNCQUF1QixTQUFRLG9CQUFvQjs7Ozs7SUFJOUQsWUFBWSxFQUFjLEVBQUUsUUFBbUI7UUFDN0MsS0FBSyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN0QixDQUFDOzs7O0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxjQUFjO1lBQ2pCLElBQUksQ0FBQyxRQUFRO2lCQUNWLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDakIsQ0FBQyxDQUFDLEtBQUs7b0JBQ0wsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDO29CQUN2RCxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN6RCxDQUFDLENBQUMsQ0FBQztJQUNULENBQUM7OztZQW5CRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjthQUM5Qjs7OztZQVBrQixVQUFVO1lBQVMsU0FBUzs7O3VCQVU1QyxLQUFLLFNBQUMsZUFBZTs7OztJQUF0QiwwQ0FBc0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIFJlbmRlcmVyMn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtTcGlubmVyQmFzZURpcmVjdGl2ZX0gZnJvbSAnLi4vYmFzZSc7XG5cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2VyTm90aWZ5U3Bpbm5lcl0nXG59KVxuZXhwb3J0IGNsYXNzIE5vdGlmeVNwaW5uZXJEaXJlY3RpdmUgZXh0ZW5kcyBTcGlubmVyQmFzZURpcmVjdGl2ZSB7XG5cbiAgQElucHV0KCdub3RpZnlTcGlubmVyJykgbm90aWZpZXI6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICBzdXBlcihlbCwgcmVuZGVyZXIpO1xuICB9XG5cbiAgb25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuJHN1YnNjcmlwdGlvbnMgPVxuICAgICAgdGhpcy5ub3RpZmllclxuICAgICAgICAuc3Vic2NyaWJlKHN0YXRlID0+IHtcbiAgICAgICAgICAhIXN0YXRlXG4gICAgICAgICAgICA/IHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5zcGluRWxlbWVudCwgJ2Qtbm9uZScpXG4gICAgICAgICAgICA6IHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5zcGluRWxlbWVudCwgJ2Qtbm9uZScpO1xuICAgICAgICB9KTtcbiAgfVxufVxuIl19