/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { ColorUtils, CommonsUtils } from '@er/utils';
import { BaseDirective } from '../../bases/directive';
export class TagDirective extends BaseDirective {
    /**
     * @param {?} el
     * @param {?} render
     */
    constructor(el, render) {
        super();
        this.el = el;
        this.render = render;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!CommonsUtils.isEmpty(this.color)) {
            this.render.setStyle(this.el.nativeElement, 'color', this.color);
        }
        if (!CommonsUtils.isEmpty(this.bg)) {
            this.render.setStyle(this.el.nativeElement, 'background-color', this.bg);
        }
        if (CommonsUtils.isEmpty(this.color) && CommonsUtils.isEmpty(this.bg)) {
            if (!this.text) {
                this.text = this.el.nativeElement.innerHTML;
            }
            this.render.setStyle(this.el.nativeElement, 'background', ColorUtils.getColor(this.text));
            this.render.setStyle(this.el.nativeElement, 'color', 'white');
        }
        this.render.addClass(this.el.nativeElement, 'badge-pill');
        this.render.addClass(this.el.nativeElement, 'badge');
    }
}
TagDirective.decorators = [
    { type: Directive, args: [{
                selector: '[erTag]'
            },] }
];
/** @nocollapse */
TagDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
TagDirective.propDecorators = {
    text: [{ type: Input }],
    bg: [{ type: Input }],
    color: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TagDirective.prototype.text;
    /** @type {?} */
    TagDirective.prototype.bg;
    /** @type {?} */
    TagDirective.prototype.color;
    /**
     * @type {?}
     * @private
     */
    TagDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TagDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy90ZXh0LXRhZy9kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDbkQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBTXBELE1BQU0sT0FBTyxZQUFhLFNBQVEsYUFBYTs7Ozs7SUFRN0MsWUFBb0IsRUFBYyxFQUFVLE1BQWlCO1FBQzNELEtBQUssRUFBRSxDQUFDO1FBRFUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVc7SUFFN0QsQ0FBQzs7OztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNsRTtRQUNELElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDMUU7UUFDRCxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3JFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO2FBQzdDO1lBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDMUYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQy9EO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7O1lBL0JGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsU0FBUzthQUNwQjs7OztZQVBrQixVQUFVO1lBQVMsU0FBUzs7O21CQVU1QyxLQUFLO2lCQUVMLEtBQUs7b0JBRUwsS0FBSzs7OztJQUpOLDRCQUFzQjs7SUFFdEIsMEJBQW9COztJQUVwQiw2QkFBdUI7Ozs7O0lBRVgsMEJBQXNCOzs7OztJQUFFLDhCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgUmVuZGVyZXIyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29sb3JVdGlscywgQ29tbW9uc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtCYXNlRGlyZWN0aXZlfSBmcm9tICcuLi8uLi9iYXNlcy9kaXJlY3RpdmUnO1xuXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tlclRhZ10nXG59KVxuZXhwb3J0IGNsYXNzIFRhZ0RpcmVjdGl2ZSBleHRlbmRzIEJhc2VEaXJlY3RpdmUge1xuXG4gIEBJbnB1dCgpIHRleHQ6IHN0cmluZztcblxuICBASW5wdXQoKSBiZzogc3RyaW5nO1xuXG4gIEBJbnB1dCgpIGNvbG9yOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXI6IFJlbmRlcmVyMikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKCFDb21tb25zVXRpbHMuaXNFbXB0eSh0aGlzLmNvbG9yKSkge1xuICAgICAgdGhpcy5yZW5kZXIuc2V0U3R5bGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnY29sb3InLCB0aGlzLmNvbG9yKTtcbiAgICB9XG4gICAgaWYgKCFDb21tb25zVXRpbHMuaXNFbXB0eSh0aGlzLmJnKSkge1xuICAgICAgdGhpcy5yZW5kZXIuc2V0U3R5bGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnYmFja2dyb3VuZC1jb2xvcicsIHRoaXMuYmcpO1xuICAgIH1cbiAgICBpZiAoQ29tbW9uc1V0aWxzLmlzRW1wdHkodGhpcy5jb2xvcikgJiYgQ29tbW9uc1V0aWxzLmlzRW1wdHkodGhpcy5iZykpIHtcbiAgICAgIGlmICghdGhpcy50ZXh0KSB7XG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5pbm5lckhUTUw7XG4gICAgICB9XG4gICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdiYWNrZ3JvdW5kJywgQ29sb3JVdGlscy5nZXRDb2xvcih0aGlzLnRleHQpKTtcbiAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2NvbG9yJywgJ3doaXRlJyk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2JhZGdlLXBpbGwnKTtcbiAgICB0aGlzLnJlbmRlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdiYWRnZScpO1xuICB9XG59XG4iXX0=