/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Renderer2, ViewContainerRef } from '@angular/core';
import { CommonsUtils } from '@er/utils';
import { BaseDirective } from '../../bases/directive';
import { DynaComponentUtils } from '../../utils/dyna';
export class DynaTemplateDirective extends BaseDirective {
    /**
     * @param {?} viewContainerRef
     * @param {?} el
     * @param {?} renderer
     */
    constructor(viewContainerRef, el, renderer) {
        super();
        this.viewContainerRef = viewContainerRef;
        this.el = el;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (CommonsUtils.isEmptyString(this.template)) {
            this.template = this.el.nativeElement.innerHTML;
        }
        if (CommonsUtils.isEmptyString(this.template)) {
            return;
        }
        this.template = this.template.replace(/\[\[/g, '{{');
        this.template = this.template.replace(/]]/g, '}}');
        this.componentRef = DynaComponentUtils.createComponentByTemplate(this.viewContainerRef, this.template);
        /** @type {?} */
        const parent = this.el.nativeElement.parentNode;
        this.renderer.removeChild(parent, this.el.nativeElement);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.ngOnDestroy();
        if (this.componentRef) {
            this.componentRef.destroy();
            this.componentRef = null;
        }
    }
}
DynaTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[erDynaTemplate]',
            },] }
];
/** @nocollapse */
DynaTemplateDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ElementRef },
    { type: Renderer2 }
];
DynaTemplateDirective.propDecorators = {
    template: [{ type: Input, args: ['erDynaTemplate',] }],
    context: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DynaTemplateDirective.prototype.template;
    /** @type {?} */
    DynaTemplateDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    DynaTemplateDirective.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    DynaTemplateDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    DynaTemplateDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DynaTemplateDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9keW5hLXRlbXBsYXRlL2RpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFlLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFVLFNBQVMsRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUU5RyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUtwRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsYUFBYTs7Ozs7O0lBT3RELFlBQW9CLGdCQUFrQyxFQUNsQyxFQUFjLEVBQ2QsUUFBbUI7UUFDckMsS0FBSyxFQUFFLENBQUM7UUFIVSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxhQUFRLEdBQVIsUUFBUSxDQUFXO0lBRXZDLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxZQUFZLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO1NBQUU7UUFDbkcsSUFBSSxZQUFZLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUFFLE9BQU87U0FBRTtRQUMxRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsWUFBWSxHQUFHLGtCQUFrQixDQUFDLHlCQUF5QixDQUM5RCxJQUFJLENBQUMsZ0JBQWdCLEVBQ3JCLElBQUksQ0FBQyxRQUFRLENBQ2QsQ0FBQzs7Y0FDSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVTtRQUMvQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMzRCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM1QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztTQUMxQjtJQUNILENBQUM7OztZQW5DRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjthQUM3Qjs7OztZQVJzRSxnQkFBZ0I7WUFBdEQsVUFBVTtZQUFpQixTQUFTOzs7dUJBV2xFLEtBQUssU0FBQyxnQkFBZ0I7c0JBQ3RCLEtBQUs7Ozs7SUFETix5Q0FBMEM7O0lBQzFDLHdDQUEwQjs7Ozs7SUFFMUIsNkNBQXVDOzs7OztJQUUzQixpREFBMEM7Ozs7O0lBQzFDLG1DQUFzQjs7Ozs7SUFDdEIseUNBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnRSZWYsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uSW5pdCwgUmVuZGVyZXIyLCBWaWV3Q29udGFpbmVyUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29udGV4dH0gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtCYXNlRGlyZWN0aXZlfSBmcm9tICcuLi8uLi9iYXNlcy9kaXJlY3RpdmUnO1xuaW1wb3J0IHtEeW5hQ29tcG9uZW50VXRpbHN9IGZyb20gJy4uLy4uL3V0aWxzL2R5bmEnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZXJEeW5hVGVtcGxhdGVdJyxcbn0pXG5leHBvcnQgY2xhc3MgRHluYVRlbXBsYXRlRGlyZWN0aXZlIGV4dGVuZHMgQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQElucHV0KCdlckR5bmFUZW1wbGF0ZScpIHRlbXBsYXRlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNvbnRleHQ6IENvbnRleHQ7XG5cbiAgcHJpdmF0ZSBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjx7fT47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKENvbW1vbnNVdGlscy5pc0VtcHR5U3RyaW5nKHRoaXMudGVtcGxhdGUpKSB7IHRoaXMudGVtcGxhdGUgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MOyB9XG4gICAgaWYgKENvbW1vbnNVdGlscy5pc0VtcHR5U3RyaW5nKHRoaXMudGVtcGxhdGUpKSB7IHJldHVybjsgfVxuICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlLnJlcGxhY2UoL1xcW1xcWy9nLCAne3snKTtcbiAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZS5yZXBsYWNlKC9dXS9nLCAnfX0nKTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZiA9IER5bmFDb21wb25lbnRVdGlscy5jcmVhdGVDb21wb25lbnRCeVRlbXBsYXRlKFxuICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLFxuICAgICAgdGhpcy50ZW1wbGF0ZSxcbiAgICApO1xuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5wYXJlbnROb2RlO1xuICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2hpbGQocGFyZW50LCB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgc3VwZXIubmdPbkRlc3Ryb3koKTtcbiAgICBpZiAodGhpcy5jb21wb25lbnRSZWYpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==