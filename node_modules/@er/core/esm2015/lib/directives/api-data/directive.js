/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { CommonsUtils } from '@er/utils';
import { BaseDirective } from '../../bases/directive';
import { ApiUtils } from '../../utils/api';
import { LogUtils } from '../../utils/log';
export class ApiDataDirective extends BaseDirective {
    constructor() {
        super(...arguments);
        this.onDataReady = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.apiDataProps
            && changes.apiDataProps.currentValue
            && (this.apiDataProps.autoFetch !== false || !changes.apiDataProps.isFirstChange())) {
            this.fetchData();
        }
    }
    /**
     * @return {?}
     */
    fetchData() {
        if (CommonsUtils.isEmpty(this.apiDataProps)) {
            LogUtils.debug('apiDataDirective', '没有定义apiDataProps');
            return;
        }
        ApiUtils.fetch(this.apiDataProps)
            .subscribe(data => {
            LogUtils.debug(this, 'apiData待订阅数据', data);
            if (this.apiDataProps.data$) {
                this.apiDataProps.data$.next(data);
            }
            this.onDataReady.emit(data);
        });
    }
}
ApiDataDirective.decorators = [
    { type: Directive, args: [{
                selector: '[erApiData]'
            },] }
];
ApiDataDirective.propDecorators = {
    apiDataProps: [{ type: Input, args: ['erApiData',] }],
    onRequestData: [{ type: Output }],
    onDataReady: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ApiDataDirective.prototype.apiDataProps;
    /** @type {?} */
    ApiDataDirective.prototype.onRequestData;
    /** @type {?} */
    ApiDataDirective.prototype.onDataReady;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9hcGktZGF0YS9kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBYSxNQUFNLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBRS9GLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3BELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFLekMsTUFBTSxPQUFPLGdCQUFpQixTQUFRLGFBQWE7SUFIbkQ7O1FBU1ksZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBd0I3QyxDQUFDOzs7OztJQXRCQyxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsWUFBWTtlQUNuQixPQUFPLENBQUMsWUFBWSxDQUFDLFlBQVk7ZUFDakMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsS0FBSyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxDQUFDLEVBQUU7WUFDckYsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQzs7OztJQUVELFNBQVM7UUFDUCxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQzNDLFFBQVEsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztZQUN2RCxPQUFPO1NBQ1I7UUFDRCxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7YUFDOUIsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2hCLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMzQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFO2dCQUMzQixJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDcEM7WUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7OztZQWhDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGFBQWE7YUFDeEI7OzsyQkFHRSxLQUFLLFNBQUMsV0FBVzs0QkFFakIsTUFBTTswQkFFTixNQUFNOzs7O0lBSlAsd0NBQStDOztJQUUvQyx5Q0FBa0M7O0lBRWxDLHVDQUEyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE91dHB1dCwgU2ltcGxlQ2hhbmdlc30gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0FwaURhdGFQcm9wc30gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtCYXNlRGlyZWN0aXZlfSBmcm9tICcuLi8uLi9iYXNlcy9kaXJlY3RpdmUnO1xuaW1wb3J0IHtBcGlVdGlsc30gZnJvbSAnLi4vLi4vdXRpbHMvYXBpJztcbmltcG9ydCB7TG9nVXRpbHN9IGZyb20gJy4uLy4uL3V0aWxzL2xvZyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tlckFwaURhdGFdJ1xufSlcbmV4cG9ydCBjbGFzcyBBcGlEYXRhRGlyZWN0aXZlIGV4dGVuZHMgQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgQElucHV0KCdlckFwaURhdGEnKSBhcGlEYXRhUHJvcHM6IEFwaURhdGFQcm9wcztcblxuICBAT3V0cHV0KCkgb25SZXF1ZXN0RGF0YTogRnVuY3Rpb247XG5cbiAgQE91dHB1dCgpIG9uRGF0YVJlYWR5ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5hcGlEYXRhUHJvcHNcbiAgICAgICYmIGNoYW5nZXMuYXBpRGF0YVByb3BzLmN1cnJlbnRWYWx1ZVxuICAgICAgJiYgKHRoaXMuYXBpRGF0YVByb3BzLmF1dG9GZXRjaCAhPT0gZmFsc2UgfHwgIWNoYW5nZXMuYXBpRGF0YVByb3BzLmlzRmlyc3RDaGFuZ2UoKSkpIHtcbiAgICAgIHRoaXMuZmV0Y2hEYXRhKCk7XG4gICAgfVxuICB9XG5cbiAgZmV0Y2hEYXRhKCkge1xuICAgIGlmIChDb21tb25zVXRpbHMuaXNFbXB0eSh0aGlzLmFwaURhdGFQcm9wcykpIHtcbiAgICAgIExvZ1V0aWxzLmRlYnVnKCdhcGlEYXRhRGlyZWN0aXZlJywgJ+ayoeacieWumuS5iWFwaURhdGFQcm9wcycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBBcGlVdGlscy5mZXRjaCh0aGlzLmFwaURhdGFQcm9wcylcbiAgICAgIC5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gICAgICAgIExvZ1V0aWxzLmRlYnVnKHRoaXMsICdhcGlEYXRh5b6F6K6i6ZiF5pWw5o2uJywgZGF0YSk7XG4gICAgICAgIGlmICh0aGlzLmFwaURhdGFQcm9wcy5kYXRhJCkge1xuICAgICAgICAgIHRoaXMuYXBpRGF0YVByb3BzLmRhdGEkLm5leHQoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbkRhdGFSZWFkeS5lbWl0KGRhdGEpO1xuICAgICAgfSk7XG4gIH1cbn1cbiJdfQ==