/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgIf } from '@angular/common';
import { Directive, EventEmitter, Input, Output, TemplateRef, ViewContainerRef } from '@angular/core';
import { Subject } from 'rxjs/index';
import { Observable } from 'rxjs/internal/Observable';
import { takeUntil } from 'rxjs/operators';
/**
 * @param {?} el
 * @param {?} maxWait
 * @return {?}
 */
function animationEndSafe(el, maxWait) {
    return Observable.create((observer) => {
        el.addEventListener('animationend', observer);
        setTimeout(observer, maxWait);
    });
    // return new Promise((resolve, reject) => {
    //   el.addEventListener('animationend', resolve);
    //   setTimeout(resolve, maxWait);
    // });
}
export class AnimatedIfDirective extends NgIf {
    /**
     * @param {?} viewContainer
     * @param {?} _templateRef
     */
    constructor(viewContainer, _templateRef) {
        super(viewContainer, _templateRef);
        this.viewContainer = viewContainer;
        this.animatedIfOnShow = new EventEmitter(false);
        this.animatedIfOnHide = new EventEmitter(false);
        this.visible = false;
        this.destroyed$ = new Subject();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set erAnimatedIf(val) {
        if (this.visible && !val) {
            this.hide();
        }
        else if (!this.visible && val) {
            this.show();
        }
        this.visible = val;
    }
    /**
     * @private
     * @return {?}
     */
    getContainer() {
        if (this.viewContainer.length > 0) {
            return ((/** @type {?} */ (this.viewContainer.get(0)))).rootNodes[0];
        }
        else {
            return null;
        }
    }
    /**
     * Hides the element. Animation is performed through css on the container.
     * This method will set the class to hiding and preserve the element for the animation duration.
     * @private
     * @return {?}
     */
    hide() {
        /** @type {?} */
        const container = this.getContainer();
        if (!!container) {
            container.classList.remove('showing');
            container.classList.add('hiding');
            animationEndSafe(container, 1000)
                .pipe(takeUntil(this.destroyed$))
                .subscribe(() => {
                this.ngIf = this.visible;
                container.classList.remove('hiding');
            });
            this.animatedIfOnHide.emit();
        }
    }
    /**
     * Shows the element. Animation is performed through css on the container
     * @private
     * @return {?}
     */
    show() {
        this.ngIf = true;
        /** @type {?} */
        const container = this.getContainer();
        if (!!container) {
            container.classList.remove('hiding');
            container.classList.add('showing');
            animationEndSafe(container, 1000)
                .pipe(takeUntil(this.destroyed$))
                .subscribe(() => {
                container.classList.remove('showing');
            });
            this.animatedIfOnShow.emit();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
}
AnimatedIfDirective.decorators = [
    { type: Directive, args: [{
                selector: '[erAnimatedIf]'
            },] }
];
/** @nocollapse */
AnimatedIfDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef }
];
AnimatedIfDirective.propDecorators = {
    animatedIfOnShow: [{ type: Output }],
    animatedIfOnHide: [{ type: Output }],
    erAnimatedIf: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AnimatedIfDirective.prototype.animatedIfOnShow;
    /** @type {?} */
    AnimatedIfDirective.prototype.animatedIfOnHide;
    /**
     * @type {?}
     * @private
     */
    AnimatedIfDirective.prototype.visible;
    /**
     * @type {?}
     * @protected
     */
    AnimatedIfDirective.prototype.destroyed$;
    /**
     * @type {?}
     * @private
     */
    AnimatedIfDirective.prototype.viewContainer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9hbmltYXRlLWlmL2RpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3JDLE9BQU8sRUFBQyxTQUFTLEVBQW1CLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoSSxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ25DLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7Ozs7OztBQUV6QyxTQUFTLGdCQUFnQixDQUFDLEVBQVcsRUFBRSxPQUFlO0lBQ3BELE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1FBQ3BDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNILDRDQUE0QztJQUM1QyxrREFBa0Q7SUFDbEQsa0NBQWtDO0lBQ2xDLE1BQU07QUFDUixDQUFDO0FBS0QsTUFBTSxPQUFPLG1CQUFvQixTQUFRLElBQUk7Ozs7O0lBUTNDLFlBQW9CLGFBQStCLEVBQUUsWUFBOEI7UUFDakYsS0FBSyxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztRQURqQixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFOekMscUJBQWdCLEdBQUcsSUFBSSxZQUFZLENBQU0sS0FBSyxDQUFDLENBQUM7UUFDaEQscUJBQWdCLEdBQUcsSUFBSSxZQUFZLENBQU0sS0FBSyxDQUFD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e05nSWZ9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0RpcmVjdGl2ZSwgRW1iZWRkZWRWaWV3UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkRlc3Ryb3ksIE91dHB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzL2luZGV4JztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcy9pbnRlcm5hbC9PYnNlcnZhYmxlJztcbmltcG9ydCB7dGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbkVuZFNhZmUoZWw6IEVsZW1lbnQsIG1heFdhaXQ6IG51bWJlcik6IE9ic2VydmFibGU8e30+IHtcbiAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcikgPT4ge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIG9ic2VydmVyKTtcbiAgICBzZXRUaW1lb3V0KG9ic2VydmVyLCBtYXhXYWl0KTtcbiAgfSk7XG4gIC8vIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gIC8vICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgcmVzb2x2ZSk7XG4gIC8vICAgc2V0VGltZW91dChyZXNvbHZlLCBtYXhXYWl0KTtcbiAgLy8gfSk7XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tlckFuaW1hdGVkSWZdJ1xufSlcbmV4cG9ydCBjbGFzcyBBbmltYXRlZElmRGlyZWN0aXZlIGV4dGVuZHMgTmdJZiBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgQE91dHB1dCgpIGFuaW1hdGVkSWZPblNob3cgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oZmFsc2UpO1xuICBAT3V0cHV0KCkgYW5pbWF0ZWRJZk9uSGlkZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PihmYWxzZSk7XG5cbiAgcHJpdmF0ZSB2aXNpYmxlID0gZmFsc2U7XG4gIHByb3RlY3RlZCBkZXN0cm95ZWQkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsIF90ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pikge1xuICAgIHN1cGVyKHZpZXdDb250YWluZXIsIF90ZW1wbGF0ZVJlZik7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgZXJBbmltYXRlZElmKHZhbDogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLnZpc2libGUgJiYgIXZhbCkge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSBlbHNlIGlmICghdGhpcy52aXNpYmxlICYmIHZhbCkge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuICAgIHRoaXMudmlzaWJsZSA9IHZhbDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29udGFpbmVyKCk6IEhUTUxFbGVtZW50IHwgbnVsbCB7XG4gICAgaWYgKHRoaXMudmlld0NvbnRhaW5lci5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gKHRoaXMudmlld0NvbnRhaW5lci5nZXQoMCkgYXMgRW1iZWRkZWRWaWV3UmVmPGFueT4pLnJvb3ROb2Rlc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhpZGVzIHRoZSBlbGVtZW50LiBBbmltYXRpb24gaXMgcGVyZm9ybWVkIHRocm91Z2ggY3NzIG9uIHRoZSBjb250YWluZXIuXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgc2V0IHRoZSBjbGFzcyB0byBoaWRpbmcgYW5kIHByZXNlcnZlIHRoZSBlbGVtZW50IGZvciB0aGUgYW5pbWF0aW9uIGR1cmF0aW9uLlxuICAgKi9cbiAgcHJpdmF0ZSBoaWRlKCkge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuZ2V0Q29udGFpbmVyKCk7XG4gICAgaWYgKCEhY29udGFpbmVyKSB7XG4gICAgICBjb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2hvd2luZycpO1xuICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2hpZGluZycpO1xuICAgICAgYW5pbWF0aW9uRW5kU2FmZShjb250YWluZXIsIDEwMDApXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3llZCQpXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMubmdJZiA9IHRoaXMudmlzaWJsZTtcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGluZycpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmFuaW1hdGVkSWZPbkhpZGUuZW1pdCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93cyB0aGUgZWxlbWVudC4gQW5pbWF0aW9uIGlzIHBlcmZvcm1lZCB0aHJvdWdoIGNzcyBvbiB0aGUgY29udGFpbmVyXG4gICAqL1xuICBwcml2YXRlIHNob3coKSB7XG4gICAgdGhpcy5uZ0lmID0gdHJ1ZTtcbiAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmdldENvbnRhaW5lcigpO1xuICAgIGlmICghIWNvbnRhaW5lcikge1xuICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGluZycpO1xuICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Nob3dpbmcnKTtcbiAgICAgIGFuaW1hdGlvbkVuZFNhZmUoY29udGFpbmVyLCAxMDAwKVxuICAgICAgICAucGlwZShcbiAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95ZWQkKVxuICAgICAgICApXG4gICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2hvd2luZycpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmFuaW1hdGVkSWZPblNob3cuZW1pdCgpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZGVzdHJveWVkJC5uZXh0KCk7XG4gICAgdGhpcy5kZXN0cm95ZWQkLmNvbXBsZXRlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiAgPHA+VG9nZ2xlIGVsZW1lbnQgd2l0aCBhbmltYXRpb24gPGlucHV0IHR5cGU9Y2hlY2tib3ggWyhuZ01vZGVsKV09XCJpc1Zpc2libGVcIj48cD5cbiA8cD5cbiA8c3BhbiBjbGFzcz1cImZhbmN5Qm94XCIgKmFwcEFuaW1hdGVkSWY9XCJpc1Zpc2libGVcIj5DbGljayB0aGUgY2hlY2tib3ggYWJvdmUgdG8gdG9nZ2xlIG1lITwvc3Bhbj5cbiA8L3A+XG4gKiovXG4iXX0=