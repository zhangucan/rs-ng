/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input } from '@angular/core';
import { BaseDirective } from '../../bases/directive';
export class HighlightDirective extends BaseDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        super();
        this.el = el;
        this.searchTerm = undefined;
        this.caseSensitive = true;
        this.viewRendered = false;
        this.WRAPPER_TOKEN = '==--==##';
    }
    /**
     * @private
     * @return {?}
     */
    get caseSensitivity() {
        return this.caseSensitive ? '' : 'i';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.highlightSearchTerm();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.highlightSearchTerm();
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        this.viewRendered = true;
    }
    /**
     * @return {?}
     */
    highlightSearchTerm() {
        if (!this.searchTerm) {
            if (this.viewRendered) {
                this.removePreviouslyMarkedTextInNode();
            }
            return;
        }
        if (this.el.nativeElement) {
            this.removePreviouslyMarkedTextInNode();
            this.markMatchedTextTokens(this.el.nativeElement);
        }
    }
    /**
     * @private
     * @param {?} htmlNode
     * @return {?}
     */
    markMatchedTextTokens(htmlNode) {
        /** @type {?} */
        const _searchTerm = this.getSearchTerm();
        /** @type {?} */
        const searchRegex = new RegExp(_searchTerm, 'gmi');
        /** @type {?} */
        const _searchTermUniqueTokens = this.getUniqueTokenWrappedSearchTerm();
        /** @type {?} */
        const searchRegexUniqueTokens = new RegExp(_searchTermUniqueTokens, 'gmi');
        this.traverseHtmlElementsTree(htmlNode, e => {
            this.traverseNodesInElement(htmlNode.childNodes, node => this.wrapUniqueTokensAroundMatchedText(node, searchRegex));
        });
        this.markMatchedTextAndRemoveUniqueTokens(htmlNode, searchRegexUniqueTokens);
    }
    /**
     * @private
     * @param {?} htmlNode
     * @param {?} searchRegex
     * @return {?}
     */
    markMatchedTextAndRemoveUniqueTokens(htmlNode, searchRegex) {
        if (htmlNode.innerHTML) {
            /** @type {?} */
            const innerHtml = htmlNode.innerHTML;
            /** @type {?} */
            const newHtml = innerHtml.replace(searchRegex, match => {
                /** @type {?} */
                const wrapperLength = this.WRAPPER_TOKEN.length;
                /** @type {?} */
                const markedStr = match.substr(wrapperLength, match.length - (wrapperLength * 2));
                return `<mark>${markedStr}</mark>`;
            });
            htmlNode.innerHTML = newHtml;
        }
    }
    /**
     * @private
     * @param {?} nodes
     * @param {?} visitCallback
     * @return {?}
     */
    traverseNodesInElement(nodes, visitCallback) {
        for (let i = 0; i < nodes.length; i++) {
            /** @type {?} */
            const node = nodes[i];
            if (node.nodeType === 3) {
                visitCallback(node);
            }
        }
    }
    /**
     * @private
     * @param {?} htmlNode
     * @param {?} searchRegex
     * @return {?}
     */
    wrapUniqueTokensAroundMatchedText(htmlNode, searchRegex) {
        /** @type {?} */
        const innerText = htmlNode.nodeValue;
        /** @type {?} */
        const newText = innerText.replace(searchRegex, `${this.WRAPPER_TOKEN}$&${this.WRAPPER_TOKEN}`);
        htmlNode.nodeValue = newText;
    }
    /**
     * @private
     * @param {?} currentNode
     * @param {?} visitCallback
     * @return {?}
     */
    traverseHtmlElementsTree(currentNode, visitCallback) {
        if (currentNode) {
            visitCallback(currentNode);
        }
        for (let i = 0; i < currentNode.children.length; i++) {
            /** @type {?} */
            const childNode = currentNode.children[i];
            this.markMatchedTextTokens((/** @type {?} */ (childNode)));
        }
    }
    /**
     * @private
     * @return {?}
     */
    removePreviouslyMarkedTextInNode() {
        /** @type {?} */
        const node = this.el.nativeElement;
        /** @type {?} */
        const markingPattern = new RegExp('<mark>|<\/mark>', 'g');
        /** @type {?} */
        const cleanText = node.innerHTML.replace(markingPattern, '');
        node.innerHTML = cleanText;
    }
    // private highlightedNewTextInNode() {
    //   const node = this.el.nativeElement;
    //   const htmlNegativeLookaheadPattern = '(?![^<>]*>)';
    //   const searchTermPattern = this.getSearchTerm();
    //   const searchRegex = new RegExp(searchTermPattern + htmlNegativeLookaheadPattern, 'gmi');
    //   const markedText = node.innerHTML.replace(searchRegex, '<mark>$&</mark>');
    //   node.innerHTML = markedText;
    // }
    /**
     * @private
     * @return {?}
     */
    getSearchTerm() {
        /** @type {?} */
        let escapedSearchTerm = `${this.escapeRegExp(this.searchTerm)}`;
        /** @type {?} */
        const spaceToMultiMatchRegex = new RegExp(' ', 'gm');
        escapedSearchTerm = escapedSearchTerm.replace(spaceToMultiMatchRegex, '|');
        return escapedSearchTerm;
    }
    /**
     * @private
     * @return {?}
     */
    getUniqueTokenWrappedSearchTerm() {
        /** @type {?} */
        let escapedSearchTerm = this.escapeRegExp(this.searchTerm);
        /** @type {?} */
        const spaceToMultiMatchRegex = new RegExp(' ', 'gm');
        escapedSearchTerm = escapedSearchTerm.replace(spaceToMultiMatchRegex, `${this.WRAPPER_TOKEN}|${this.WRAPPER_TOKEN}`);
        escapedSearchTerm = `${this.WRAPPER_TOKEN}${escapedSearchTerm}${this.WRAPPER_TOKEN}`;
        return escapedSearchTerm;
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    escapeRegExp(str) {
        return str.replace('/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g', '\\$&');
    }
}
HighlightDirective.decorators = [
    { type: Directive, args: [{
                selector: '[erHighlight]'
            },] }
];
/** @nocollapse */
HighlightDirective.ctorParameters = () => [
    { type: ElementRef }
];
HighlightDirective.propDecorators = {
    searchTerm: [{ type: Input, args: ['erHighlight',] }],
    caseSensitive: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    HighlightDirective.prototype.searchTerm;
    /** @type {?} */
    HighlightDirective.prototype.caseSensitive;
    /**
     * @type {?}
     * @private
     */
    HighlightDirective.prototype.viewRendered;
    /**
     * @type {?}
     * @private
     */
    HighlightDirective.prototype.WRAPPER_TOKEN;
    /**
     * @type {?}
     * @private
     */
    HighlightDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,