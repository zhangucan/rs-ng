/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, KeyValueDiffers, Renderer2, SimpleChange, ViewContainerRef } from '@angular/core';
import { CommonsUtils, IdUtils } from '@er/utils';
import { Observable } from 'rxjs';
import { BaseDirective } from '../../bases/directive';
import { WrapperComponent } from '../../bases/wrappe';
import { ComponentUtils } from '../../utils/component';
import { LogUtils } from '../../utils/log';
import { changesFromRecord } from './util';
/** @type {?} */
const recordToChanges = changesFromRecord({ isFirstChanges: true });
/** @type {?} */
const recordToNewChanges = changesFromRecord({ onlyNewChanges: true });
export class PropsBindDirective extends BaseDirective {
    /**
     * @param {?} differs
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} viewContainerRef
     */
    constructor(differs, elementRef, renderer, viewContainerRef) {
        super();
        this.differs = differs;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.viewContainerRef = viewContainerRef;
        this.autoBind = true;
        this.differ = this.differs.find({}).create();
        this._hostComponentInst = undefined;
        this._viewComponentRef = undefined;
    }
    /**
     * @return {?}
     */
    get hostComponentInst() {
        if (this._hostComponentInst === undefined) {
            this._hostComponentInst = ComponentUtils.getHostComponentInst(this.viewContainerRef);
        }
        return this._hostComponentInst;
    }
    /**
     * @return {?}
     */
    get viewComponentRef() {
        if (this._viewComponentRef === undefined) {
            this._viewComponentRef = ComponentUtils.getViewComponentRef(this.viewContainerRef);
        }
        return this._viewComponentRef;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.autoBind) {
            if (changes.props && !CommonsUtils.isEmpty(this.props)) {
                this.resolveProps();
                this.differs.find({}).create();
                LogUtils.debug(this, '属性绑定', this.props, this.inputs, this.outputs, this.hooks);
                if (this.methods) {
                    this.bindMethods();
                }
                if (this.inputs) {
                    /** @type {?} */
                    const inputsChanges = this.differ.diff(this.inputs);
                    this.expInputs = this.getExpressionInputs(this.inputs);
                    if (inputsChanges) {
                        this.updateInputsChanges(inputsChanges);
                        this.updateInputs(!this.lastInputChanges);
                    }
                }
                if (this.outputs) {
                    /** @type {?} */
                    const outputsChanges = this.differ.diff(this.outputs);
                    if (outputsChanges) {
                        this.bindOutputs();
                    }
                }
                if (this.hooks) {
                    this.bindLifeCycles();
                }
                if (changes.props.isFirstChange()) {
                    if (this.hostComponentInst._propsBind) {
                        this.hostComponentInst._propsBind();
                    }
                }
            }
            if (changes.attrs && this.attrs) {
                this.resolveAttrs();
                /** @type {?} */
                const attrChanges = this.differ.diff(this.attrs);
                if (attrChanges) {
                    this.lastAttrChanges = this.changesToAttrChanges(attrChanges);
                    this.updateAttributes(this.lastAttrChanges);
                }
                // this.expAttrs = this.getExpressionInputs(this.attrs);
            }
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.attrs && this.autoBind) {
            if (this.expAttrs && Object.keys(this.expAttrs).length > 0) {
                Object.keys(this.expAttrs).forEach(key => {
                    this.attrs[key] = this.expAttrs[key].call(this, this.getEventContext());
                });
            }
            /** @type {?} */
            const attrChanges = this.differ.diff(this.attrs);
            if (attrChanges) {
                this.lastAttrChanges = this.changesToAttrChanges(attrChanges);
                this.updateAttributes(this.lastAttrChanges);
            }
        }
        if (this.inputs && this.autoBind) {
            if (this.expInputs && Object.keys(this.expInputs).length > 0) {
                Object.keys(this.expInputs).forEach(key => {
                    /** @type {?} */
                    const result = this.expInputs[key](this.getEventContext());
                    if (result instanceof Observable) {
                        this.$subscriptions = ((/** @type {?} */ (result))).subscribe(data => {
                            this.inputs[key] = data;
                        });
                    }
                    else {
                        this.inputs[key] = result;
                    }
                });
            }
            /** @type {?} */
            const inputsChanges = this.differ.diff(this.inputs);
            if (inputsChanges) {
                /** @type {?} */
                const isNotFirstChange = !!this.lastInputChanges;
                this.updateInputsChanges(inputsChanges);
                if (isNotFirstChange) {
                    this.updateInputs();
                }
            }
        }
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    getEventContext(event) {
        return Object.assign({}, event, { $from: this.hostComponentInst }, this.context || {});
    }
    /**
     * @private
     * @param {?=} isFirstChange
     * @return {?}
     */
    updateInputs(isFirstChange = false) {
        if (!this.hostComponentInst || !this.inputs) {
            return;
        }
        Object.keys(this.inputs)
            .forEach(p => (this.hostComponentInst[p] = this.inputs[p]));
        this.notifyOnInputChanges(this.lastInputChanges, isFirstChange);
    }
    /**
     * @private
     * @return {?}
     */
    bindOutputs() {
        this.stopSubscribe();
        if (!this.outputs) {
            return;
        }
        Object.keys(this.outputs)
            .filter(p => this.hostComponentInst[p])
            .forEach(p => this.$subscriptions = ((/** @type {?} */ (this.hostComponentInst[p])))
            .subscribe(event => {
            try {
                this.outputs[p](this.getEventContext(event));
            }
            catch (e) {
                LogUtils.error(this.hostComponentInst, '操作失败', e);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    bindLifeCycles() {
        /** @type {?} */
        const constructor = ComponentUtils.getConstructor(this.hostComponentInst);
        /** @type {?} */
        const destructor = constructor.prototype['ngOnDestroy'];
        ComponentUtils.bindLifeCycles(this.hostComponentInst, this.hooks, constructor, destructor);
    }
    /**
     * @private
     * @return {?}
     */
    bindMethods() {
        if (this.methods) {
            Object.keys(this.methods).forEach(method => {
                this.hostComponentInst[method] = this.methods[method].bind(this.hostComponentInst);
            });
        }
    }
    /**
     * @private
     * @param {?=} changes
     * @param {?=} forceFirstChanges
     * @return {?}
     */
    notifyOnInputChanges(changes = {}, forceFirstChanges) {
        if (!this.hostComponentInst.ngOnChanges) {
            return;
        }
        if (forceFirstChanges) {
            changes = this.collectFirstChanges();
        }
        this.hostComponentInst.ngOnChanges(changes);
        if (this.hostComponentInst.cd && this.hostComponentInst.cd.detectChanges) {
            this.hostComponentInst.cd.detectChanges();
        }
    }
    /**
     * @private
     * @param {?} props
     * @return {?}
     */
    getExpressionInputs(props) {
        if (props) {
            /** @type {?} */
            const expProps = {};
            Object.keys(props).forEach(key => {
                if (props[key] instanceof Function) {
                    expProps[key] = props[key];
                }
            });
            return expProps;
        }
        return undefined;
    }
    /**
     * @private
     * @param {?} differ
     * @return {?}
     */
    updateInputsChanges(differ) {
        this.lastInputChanges = this.collectChangesFromDiffer(differ);
    }
    /**
     * @private
     * @return {?}
     */
    collectFirstChanges() {
        /** @type {?} */
        const changes = (/** @type {?} */ ({}));
        /** @type {?} */
        const inputs = this.inputs;
        Object.keys(inputs)
            .forEach(prop => (changes[prop] = new SimpleChange(undefined, inputs[prop], true)));
        return changes;
    }
    /**
     * @private
     * @param {?} differ
     * @return {?}
     */
    collectChangesFromDiffer(differ) {
        /** @type {?} */
        const changes = (/** @type {?} */ ({}));
        differ.forEachAddedItem(recordToChanges(changes));
        differ.forEachItem(recordToNewChanges(changes));
        return changes;
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    changesToAttrChanges(changes) {
        /** @type {?} */
        const attrChanges = {
            set: {},
            remove: []
        };
        changes.forEachAddedItem(r => (attrChanges.set[r.key] = r.currentValue));
        changes.forEachChangedItem(r => (attrChanges.set[r.key] = r.currentValue));
        changes.forEachRemovedItem(r => attrChanges.remove.push(r.key));
        return attrChanges;
    }
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    updateAttributes(actions) {
        Object.keys(actions.set).forEach(key => this.setAttribute(key, actions.set[key]));
        actions.remove.forEach(key => this.removeAttribute(key));
    }
    /**
     * @private
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    setAttribute(name, value, namespace) {
        this.renderer.setAttribute(this.elementRef.nativeElement, name, value, namespace);
    }
    /**
     * @private
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    removeAttribute(name, namespace) {
        this.renderer.removeAttribute(this.elementRef.nativeElement, name, namespace);
    }
    /**
     * @private
     * @return {?}
     */
    resolveProps() {
        if (this.hostComponentInst && CommonsUtils.isJson(this.props)) {
            this.inputs = {};
            this.outputs = {};
            if (this.hostComponentInst._initProps) {
                this.hostComponentInst.$props = CommonsUtils.merge({}, this.props);
                this.hostComponentInst._initProps();
                this.props = CommonsUtils.merge({}, this.hostComponentInst.$props);
            }
            if (!this.props['$id']) {
                this.props['$id'] = IdUtils.getRandom();
            }
            if (this.props['methods']) {
                this.methods = this.props['methods'];
                delete this.props['methods'];
            }
            if (this.props['hooks']) {
                this.hooks = this.props['hooks'];
                delete this.props['hooks'];
            }
            // else if (this.props['$ext'] && this.props['$ext'].hooks) {
            //   this.hooks = this.props['$ext'].hooks;
            //   delete this.props['$ext'].hooks;
            // }
            if (this.hostComponentInst instanceof WrapperComponent) {
                this.props = CommonsUtils.get(this.props, '$ext', {});
                if (this.props['hooks']) {
                    this.hooks = this.props['hooks'];
                    delete this.props['hooks'];
                }
            }
            else {
                this.props = CommonsUtils.omit(this.props, '$ext');
            }
            Object.keys(this.props).forEach(key => {
                if (this.hostComponentInst[key] instanceof EventEmitter) {
                    this.outputs[key] = this.props[key];
                }
                else {
                    this.inputs[key] = this.props[key];
                }
            });
            if (Object.keys(this.inputs).length === 0) {
                this.inputs = undefined;
            }
            if (Object.keys(this.outputs).length === 0) {
                this.outputs = undefined;
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    resolveAttrs() {
        if (this.hostComponentInst instanceof WrapperComponent) {
            this.attrs = CommonsUtils.get(this.attrs, '$ext', {});
        }
        else {
            this.attrs = CommonsUtils.omit(this.attrs, '$ext');
        }
    }
}
PropsBindDirective.decorators = [
    { type: Directive, args: [{
                selector: '[erPropsBind]'
            },] }
];
/** @nocollapse */
PropsBindDirective.ctorParameters = () => [
    { type: KeyValueDiffers },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ViewContainerRef }
];
PropsBindDirective.propDecorators = {
    props: [{ type: Input }],
    context: [{ type: Input }],
    attrs: [{ type: Input }],
    autoBind: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PropsBindDirective.prototype.props;
    /** @type {?} */
    PropsBindDirective.prototype.context;
    /** @type {?} */
    PropsBindDirective.prototype.attrs;
    /** @type {?} */
    PropsBindDirective.prototype.autoBind;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.methods;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.inputs;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.outputs;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.expInputs;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.expAttrs;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.hooks;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.lastInputChanges;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.lastAttrChanges;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype._hostComponentInst;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype._viewComponentRef;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.differs;
    /**
     * @type {?}
     * @protected
     */
    PropsBindDirective.prototype.elementRef;
    /**
     * @type {?}
     * @protected
     */
    PropsBindDirective.prototype.renderer;
    /**
     * @type {?}
     * @protected
     */
    PropsBindDirective.prototype.viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9wcm9wcy1iaW5kL2RpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLEtBQUssRUFFTCxlQUFlLEVBRWYsU0FBUyxFQUNULFlBQVksRUFFWixnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFDLFlBQVksRUFBRSxPQUFPLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDaEQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDcEQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3JELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxRQUFRLENBQUM7O01BRW5DLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQyxFQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUMsQ0FBQzs7TUFDM0Qsa0JBQWtCLEdBQUcsaUJBQWlCLENBQUMsRUFBQyxjQUFjLEVBQUUsSUFBSSxFQUFDLENBQUM7QUFLcEUsTUFBTSxPQUFPLGtCQUFtQixTQUFRLGFBQWE7Ozs7Ozs7SUFrQm5ELFlBQW9CLE9BQXdCLEVBQ3RCLFVBQXNCLEVBQ3RCLFFBQW1CLEVBQ25CLGdCQUFrQztRQUN0RCxLQUFLLEVBQUUsQ0FBQztRQUpVLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBQ3RCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNuQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBakIvQyxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBWWpCLFdBQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQVN4Qyx1QkFBa0IsR0FBUSxTQUFTLENBQUM7UUFTcEMsc0JBQWlCLEdBQVEsU0FBUyxDQUFDO0lBWDNDLENBQUM7Ozs7SUFJRCxJQUFJLGlCQUFpQjtRQUNuQixJQUFJLElBQUksQ0FBQyxrQkFBa0IsS0FBSyxTQUFTLEVBQUU7WUFDekMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUN0RjtRQUNELE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDO0lBQ2pDLENBQUM7Ozs7SUFJRCxJQUFJLGdCQUFnQjtRQUNsQixJQUFJLElBQUksQ0FBQyxpQkFBaUIsS0FBSyxTQUFTLEVBQUU7WUFDeEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUNwRjtRQUNELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDdEQsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO2dCQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDL0IsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDaEYsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO29CQUNoQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7aUJBQ3BCO2dCQUNELElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTs7MEJBQ1QsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7b0JBQ25ELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDdkQsSUFBSSxhQUFhLEVBQUU7d0JBQ2pCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsQ0FBQzt3QkFDeEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO3FCQUMzQztpQkFDRjtnQkFDRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7OzBCQUNWLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO29CQUNyRCxJQUFJLGNBQWMsRUFBRTt3QkFDbEIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO3FCQUNwQjtpQkFDRjtnQkFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7b0JBQ2QsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO2lCQUN2QjtnQkFDRCxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLEVBQUU7b0JBQ2pDLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRTt3QkFDckMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxDQUFDO3FCQUNyQztpQkFDRjthQUNGO1lBRUQsSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQy9CLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7c0JBQ2QsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQ2hELElBQUksV0FBVyxFQUFFO29CQUNmLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUM5RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2lCQUM3QztnQkFDRCx3REFBd0Q7YUFDekQ7U0FDRjtJQUNILENBQUM7Ozs7SUFFRCxTQUFTO1FBQ1AsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDL0IsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQzFELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDdkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7Z0JBQzFFLENBQUMsQ0FBQyxDQUFDO2FBQ0o7O2tCQUNLLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ2hELElBQUksV0FBVyxFQUFFO2dCQUNmLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUM5RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2FBQzdDO1NBQ0Y7UUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNoQyxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDNUQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFOzswQkFDbEMsTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO29CQUMxRCxJQUFJLE1BQU0sWUFBWSxVQUFVLEVBQUU7d0JBQ2hDLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxtQkFBaUIsTUFBTSxFQUFBLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7NEJBQy9ELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO3dCQUMxQixDQUFDLENBQUMsQ0FBQztxQkFDSjt5QkFBTTt3QkFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQztxQkFDM0I7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7YUFDSjs7a0JBQ0ssYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDbkQsSUFBSSxhQUFhLEVBQUU7O3NCQUNYLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCO2dCQUNoRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQ3hDLElBQUksZ0JBQWdCLEVBQUU7b0JBQ3BCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztpQkFDckI7YUFDRjtTQUNGO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxlQUFlLENBQUMsS0FBTTtRQUNwQix5QkFDSyxLQUFLLElBQ1IsS0FBSyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsSUFDMUIsSUFBSSxDQUFDLE9BQU8sSUFBSSxFQUFFLEVBQ3JCO0lBQ0osQ0FBQzs7Ozs7O0lBRU8sWUFBWSxDQUFDLGFBQWEsR0FBRyxLQUFLO1FBQ3hDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQzNDLE9BQU87U0FDUjtRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQzthQUNyQixPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7Ozs7O0lBRU8sV0FBVztRQUNqQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDakIsT0FBTztTQUNSO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2FBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN0QyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDWCxJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsbUJBQW1CLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBQSxDQUFDO2FBQ2pFLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNqQixJQUFJO2dCQUNGLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQzlDO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ25EO1FBQ0gsQ0FBQyxDQUFDLENBQ0wsQ0FBQztJQUNOLENBQUM7Ozs7O0lBRU8sY0FBYzs7Y0FDZCxXQUFXLEdBQUcsY0FBYyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUM7O2NBQ25FLFVBQVUsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztRQUN2RCxjQUFjLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUM3RixDQUFDOzs7OztJQUVPLFdBQVc7UUFDakIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDekMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3JGLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7Ozs7O0lBRU8sb0JBQW9CLENBQUMsVUFBeUIsRUFBRSxFQUFFLGlCQUEwQjtRQUVsRixJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRTtZQUN2QyxPQUFPO1NBQ1I7UUFFRCxJQUFJLGlCQUFpQixFQUFFO1lBQ3JCLE9BQU8sR0FBRyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztTQUN0QztRQUVELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFNUMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFO1lBQ3hFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDM0M7SUFDSCxDQUFDOzs7Ozs7SUFFTyxtQkFBbUIsQ0FBQyxLQUFLO1FBQy9CLElBQUksS0FBSyxFQUFFOztrQkFDSCxRQUFRLEdBQUcsRUFBRTtZQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDL0IsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksUUFBUSxFQUFFO29CQUNsQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUM1QjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDOzs7Ozs7SUFFTyxtQkFBbUIsQ0FBQyxNQUFpQztRQUMzRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hFLENBQUM7Ozs7O0lBRU8sbUJBQW1COztjQUNuQixPQUFPLEdBQUcsbUJBQUEsRUFBRSxFQUFpQjs7Y0FDN0IsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNO1FBRTFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO2FBQ2hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksWUFBWSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXRGLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7Ozs7OztJQUVPLHdCQUF3QixDQUFDLE1BQWlDOztjQUMxRCxPQUFPLEdBQUcsbUJBQUEsRUFBRSxFQUFpQjtRQUNuQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDbEQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7Ozs7OztJQUVPLG9CQUFvQixDQUFDLE9BQXFDOztjQUMxRCxXQUFXLEdBQUc7WUFDbEIsR0FBRyxFQUFFLEVBQUU7WUFDUCxNQUFNLEVBQUUsRUFBRTtTQUNYO1FBQ0QsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUN6RSxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQzNFLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7Ozs7OztJQUVPLGdCQUFnQixDQUFDLE9BQU87UUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQ3JDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDekMsQ0FBQztRQUNGLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7Ozs7Ozs7O0lBRU8sWUFBWSxDQUFDLElBQVksRUFBRSxLQUFhLEVBQUUsU0FBa0I7UUFDbEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNwRixDQUFDOzs7Ozs7O0lBRU8sZUFBZSxDQUFDLElBQVksRUFBRSxTQUFrQjtRQUN0RCxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDaEYsQ0FBQzs7Ozs7SUFFTyxZQUFZO1FBQ2xCLElBQUksSUFBSSxDQUFDLGlCQUFpQixJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzdELElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1lBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2xCLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRTtnQkFDckMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ25FLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsQ0FBQztnQkFDcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDcEU7WUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDekM7WUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDckMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQzlCO1lBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ2pDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUM1QjtZQUNELDZEQUE2RDtZQUM3RCwyQ0FBMkM7WUFDM0MscUNBQXFDO1lBQ3JDLElBQUk7WUFFSixJQUFJLElBQUksQ0FBQyxpQkFBaUIsWUFBWSxnQkFBZ0IsRUFBRTtnQkFDdEQsSUFBSSxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUN0RCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDakMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUM1QjthQUNGO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2FBQ3BEO1lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNwQyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsWUFBWSxZQUFZLEVBQUU7b0JBQ3ZELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDckM7cUJBQU07b0JBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNwQztZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUgsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUN6QyxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQzthQUN6QjtZQUNELElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDMUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7YUFDMUI7U0FDRjtJQUNILENBQUM7Ozs7O0lBRU8sWUFBWTtRQUNsQixJQUFJLElBQUksQ0FBQyxpQkFBaUIsWUFBWSxnQkFBZ0IsRUFBRTtZQUN0RCxJQUFJLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDdkQ7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3BEO0lBQ0gsQ0FBQzs7O1lBM1RGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZUFBZTthQUMxQjs7OztZQXJCQyxlQUFlO1lBSmYsVUFBVTtZQU1WLFNBQVM7WUFHVCxnQkFBZ0I7OztvQkFrQmYsS0FBSztzQkFDTCxLQUFLO29CQUNMLEtBQUs7dUJBQ0wsS0FBSzs7OztJQUhOLG1DQUFtQjs7SUFDbkIscUNBQXFCOztJQUNyQixtQ0FBbUI7O0lBQ25CLHNDQUF5Qjs7Ozs7SUFDekIscUNBQTZDOzs7OztJQUM3QyxvQ0FBcUM7Ozs7O0lBQ3JDLHFDQUEwRDs7Ozs7SUFDMUQsdUNBQW1EOzs7OztJQUNuRCxzQ0FBa0Q7Ozs7O0lBQ2xELG1DQUEwQjs7Ozs7SUFDMUIsOENBQXdDOzs7OztJQUN4Qyw2Q0FHRTs7Ozs7SUFDRixvQ0FBZ0Q7Ozs7O0lBU2hELGdEQUE0Qzs7Ozs7SUFTNUMsK0NBQTJDOzs7OztJQWhCL0IscUNBQWdDOzs7OztJQUNoQyx3Q0FBZ0M7Ozs7O0lBQ2hDLHNDQUE2Qjs7Ozs7SUFDN0IsOENBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBEb0NoZWNrLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBLZXlWYWx1ZUNoYW5nZXMsXG4gIEtleVZhbHVlRGlmZmVycyxcbiAgT25DaGFuZ2VzLFxuICBSZW5kZXJlcjIsXG4gIFNpbXBsZUNoYW5nZSxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TGlmZUN5Y2xlc30gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzLCBJZFV0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7QmFzZURpcmVjdGl2ZX0gZnJvbSAnLi4vLi4vYmFzZXMvZGlyZWN0aXZlJztcbmltcG9ydCB7V3JhcHBlckNvbXBvbmVudH0gZnJvbSAnLi4vLi4vYmFzZXMvd3JhcHBlJztcbmltcG9ydCB7Q29tcG9uZW50VXRpbHN9IGZyb20gJy4uLy4uL3V0aWxzL2NvbXBvbmVudCc7XG5pbXBvcnQge0xvZ1V0aWxzfSBmcm9tICcuLi8uLi91dGlscy9sb2cnO1xuaW1wb3J0IHtjaGFuZ2VzRnJvbVJlY29yZH0gZnJvbSAnLi91dGlsJztcblxuY29uc3QgcmVjb3JkVG9DaGFuZ2VzID0gY2hhbmdlc0Zyb21SZWNvcmQoe2lzRmlyc3RDaGFuZ2VzOiB0cnVlfSk7XG5jb25zdCByZWNvcmRUb05ld0NoYW5nZXMgPSBjaGFuZ2VzRnJvbVJlY29yZCh7b25seU5ld0NoYW5nZXM6IHRydWV9KTtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2VyUHJvcHNCaW5kXSdcbn0pXG5leHBvcnQgY2xhc3MgUHJvcHNCaW5kRGlyZWN0aXZlIGV4dGVuZHMgQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgRG9DaGVjayB7XG4gIEBJbnB1dCgpIHByb3BzOiB7fTtcbiAgQElucHV0KCkgY29udGV4dDoge307XG4gIEBJbnB1dCgpIGF0dHJzOiB7fTtcbiAgQElucHV0KCkgYXV0b0JpbmQgPSB0cnVlO1xuICBwcml2YXRlIG1ldGhvZHM6IHsgW2tleTogc3RyaW5nXTogRnVuY3Rpb24gfTtcbiAgcHJpdmF0ZSBpbnB1dHM6IHsgW2s6IHN0cmluZ106IGFueSB9O1xuICBwcml2YXRlIG91dHB1dHM6IHsgW2V2ZW50TmFtZTogc3RyaW5nXTogKGV2ZW50KSA9PiB2b2lkIH07XG4gIHByaXZhdGUgZXhwSW5wdXRzOiB7IFtrOiBzdHJpbmddOiAoZXZlbnQpID0+IGFueSB9O1xuICBwcml2YXRlIGV4cEF0dHJzOiB7IFtrOiBzdHJpbmddOiAoZXZlbnQpID0+IGFueSB9O1xuICBwcml2YXRlIGhvb2tzOiBMaWZlQ3ljbGVzO1xuICBwcml2YXRlIGxhc3RJbnB1dENoYW5nZXM6IFNpbXBsZUNoYW5nZXM7XG4gIHByaXZhdGUgbGFzdEF0dHJDaGFuZ2VzOiB7XG4gICAgc2V0OiB7fSxcbiAgICByZW1vdmU6IHN0cmluZ1tdLFxuICB9O1xuICBwcml2YXRlIGRpZmZlciA9IHRoaXMuZGlmZmVycy5maW5kKHt9KS5jcmVhdGUoKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRpZmZlcnM6IEtleVZhbHVlRGlmZmVycyxcbiAgICAgICAgICAgICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgICAgICAgICAgICBwcm90ZWN0ZWQgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwcml2YXRlIF9ob3N0Q29tcG9uZW50SW5zdDogYW55ID0gdW5kZWZpbmVkO1xuXG4gIGdldCBob3N0Q29tcG9uZW50SW5zdCgpIHtcbiAgICBpZiAodGhpcy5faG9zdENvbXBvbmVudEluc3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5faG9zdENvbXBvbmVudEluc3QgPSBDb21wb25lbnRVdGlscy5nZXRIb3N0Q29tcG9uZW50SW5zdCh0aGlzLnZpZXdDb250YWluZXJSZWYpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5faG9zdENvbXBvbmVudEluc3Q7XG4gIH1cblxuICBwcml2YXRlIF92aWV3Q29tcG9uZW50UmVmOiBhbnkgPSB1bmRlZmluZWQ7XG5cbiAgZ2V0IHZpZXdDb21wb25lbnRSZWYoKSB7XG4gICAgaWYgKHRoaXMuX3ZpZXdDb21wb25lbnRSZWYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fdmlld0NvbXBvbmVudFJlZiA9IENvbXBvbmVudFV0aWxzLmdldFZpZXdDb21wb25lbnRSZWYodGhpcy52aWV3Q29udGFpbmVyUmVmKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3ZpZXdDb21wb25lbnRSZWY7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKHRoaXMuYXV0b0JpbmQpIHtcbiAgICAgIGlmIChjaGFuZ2VzLnByb3BzICYmICFDb21tb25zVXRpbHMuaXNFbXB0eSh0aGlzLnByb3BzKSkge1xuICAgICAgICB0aGlzLnJlc29sdmVQcm9wcygpO1xuICAgICAgICB0aGlzLmRpZmZlcnMuZmluZCh7fSkuY3JlYXRlKCk7XG4gICAgICAgIExvZ1V0aWxzLmRlYnVnKHRoaXMsICflsZ7mgKfnu5HlrponLCB0aGlzLnByb3BzLCB0aGlzLmlucHV0cywgdGhpcy5vdXRwdXRzLCB0aGlzLmhvb2tzKTtcbiAgICAgICAgaWYgKHRoaXMubWV0aG9kcykge1xuICAgICAgICAgIHRoaXMuYmluZE1ldGhvZHMoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbnB1dHMpIHtcbiAgICAgICAgICBjb25zdCBpbnB1dHNDaGFuZ2VzID0gdGhpcy5kaWZmZXIuZGlmZih0aGlzLmlucHV0cyk7XG4gICAgICAgICAgdGhpcy5leHBJbnB1dHMgPSB0aGlzLmdldEV4cHJlc3Npb25JbnB1dHModGhpcy5pbnB1dHMpO1xuICAgICAgICAgIGlmIChpbnB1dHNDaGFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUlucHV0c0NoYW5nZXMoaW5wdXRzQ2hhbmdlcyk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUlucHV0cyghdGhpcy5sYXN0SW5wdXRDaGFuZ2VzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3V0cHV0cykge1xuICAgICAgICAgIGNvbnN0IG91dHB1dHNDaGFuZ2VzID0gdGhpcy5kaWZmZXIuZGlmZih0aGlzLm91dHB1dHMpO1xuICAgICAgICAgIGlmIChvdXRwdXRzQ2hhbmdlcykge1xuICAgICAgICAgICAgdGhpcy5iaW5kT3V0cHV0cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ob29rcykge1xuICAgICAgICAgIHRoaXMuYmluZExpZmVDeWNsZXMoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhbmdlcy5wcm9wcy5pc0ZpcnN0Q2hhbmdlKCkpIHtcbiAgICAgICAgICBpZiAodGhpcy5ob3N0Q29tcG9uZW50SW5zdC5fcHJvcHNCaW5kKSB7XG4gICAgICAgICAgICB0aGlzLmhvc3RDb21wb25lbnRJbnN0Ll9wcm9wc0JpbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZXMuYXR0cnMgJiYgdGhpcy5hdHRycykge1xuICAgICAgICB0aGlzLnJlc29sdmVBdHRycygpO1xuICAgICAgICBjb25zdCBhdHRyQ2hhbmdlcyA9IHRoaXMuZGlmZmVyLmRpZmYodGhpcy5hdHRycyk7XG4gICAgICAgIGlmIChhdHRyQ2hhbmdlcykge1xuICAgICAgICAgIHRoaXMubGFzdEF0dHJDaGFuZ2VzID0gdGhpcy5jaGFuZ2VzVG9BdHRyQ2hhbmdlcyhhdHRyQ2hhbmdlcyk7XG4gICAgICAgICAgdGhpcy51cGRhdGVBdHRyaWJ1dGVzKHRoaXMubGFzdEF0dHJDaGFuZ2VzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzLmV4cEF0dHJzID0gdGhpcy5nZXRFeHByZXNzaW9uSW5wdXRzKHRoaXMuYXR0cnMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5nRG9DaGVjaygpIHtcbiAgICBpZiAodGhpcy5hdHRycyAmJiB0aGlzLmF1dG9CaW5kKSB7XG4gICAgICBpZiAodGhpcy5leHBBdHRycyAmJiBPYmplY3Qua2V5cyh0aGlzLmV4cEF0dHJzKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuZXhwQXR0cnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICB0aGlzLmF0dHJzW2tleV0gPSB0aGlzLmV4cEF0dHJzW2tleV0uY2FsbCh0aGlzLCB0aGlzLmdldEV2ZW50Q29udGV4dCgpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCBhdHRyQ2hhbmdlcyA9IHRoaXMuZGlmZmVyLmRpZmYodGhpcy5hdHRycyk7XG4gICAgICBpZiAoYXR0ckNoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5sYXN0QXR0ckNoYW5nZXMgPSB0aGlzLmNoYW5nZXNUb0F0dHJDaGFuZ2VzKGF0dHJDaGFuZ2VzKTtcbiAgICAgICAgdGhpcy51cGRhdGVBdHRyaWJ1dGVzKHRoaXMubGFzdEF0dHJDaGFuZ2VzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuaW5wdXRzICYmIHRoaXMuYXV0b0JpbmQpIHtcbiAgICAgIGlmICh0aGlzLmV4cElucHV0cyAmJiBPYmplY3Qua2V5cyh0aGlzLmV4cElucHV0cykubGVuZ3RoID4gMCkge1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmV4cElucHV0cykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZXhwSW5wdXRzW2tleV0odGhpcy5nZXRFdmVudENvbnRleHQoKSk7XG4gICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuJHN1YnNjcmlwdGlvbnMgPSAoPE9ic2VydmFibGU8YW55Pj5yZXN1bHQpLnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5pbnB1dHNba2V5XSA9IGRhdGE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbnB1dHNba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgY29uc3QgaW5wdXRzQ2hhbmdlcyA9IHRoaXMuZGlmZmVyLmRpZmYodGhpcy5pbnB1dHMpO1xuICAgICAgaWYgKGlucHV0c0NoYW5nZXMpIHtcbiAgICAgICAgY29uc3QgaXNOb3RGaXJzdENoYW5nZSA9ICEhdGhpcy5sYXN0SW5wdXRDaGFuZ2VzO1xuICAgICAgICB0aGlzLnVwZGF0ZUlucHV0c0NoYW5nZXMoaW5wdXRzQ2hhbmdlcyk7XG4gICAgICAgIGlmIChpc05vdEZpcnN0Q2hhbmdlKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVJbnB1dHMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldEV2ZW50Q29udGV4dChldmVudD8pIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uZXZlbnQsXG4gICAgICAkZnJvbTogdGhpcy5ob3N0Q29tcG9uZW50SW5zdCxcbiAgICAgIC4uLnRoaXMuY29udGV4dCB8fCB7fVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUlucHV0cyhpc0ZpcnN0Q2hhbmdlID0gZmFsc2UpIHtcbiAgICBpZiAoIXRoaXMuaG9zdENvbXBvbmVudEluc3QgfHwgIXRoaXMuaW5wdXRzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKHRoaXMuaW5wdXRzKVxuICAgICAgLmZvckVhY2gocCA9PiAodGhpcy5ob3N0Q29tcG9uZW50SW5zdFtwXSA9IHRoaXMuaW5wdXRzW3BdKSk7XG4gICAgdGhpcy5ub3RpZnlPbklucHV0Q2hhbmdlcyh0aGlzLmxhc3RJbnB1dENoYW5nZXMsIGlzRmlyc3RDaGFuZ2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBiaW5kT3V0cHV0cygpIHtcbiAgICB0aGlzLnN0b3BTdWJzY3JpYmUoKTtcbiAgICBpZiAoIXRoaXMub3V0cHV0cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyh0aGlzLm91dHB1dHMpXG4gICAgICAuZmlsdGVyKHAgPT4gdGhpcy5ob3N0Q29tcG9uZW50SW5zdFtwXSlcbiAgICAgIC5mb3JFYWNoKHAgPT5cbiAgICAgICAgdGhpcy4kc3Vic2NyaXB0aW9ucyA9ICg8RXZlbnRFbWl0dGVyPGFueT4+dGhpcy5ob3N0Q29tcG9uZW50SW5zdFtwXSlcbiAgICAgICAgICAuc3Vic2NyaWJlKGV2ZW50ID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHRoaXMub3V0cHV0c1twXSh0aGlzLmdldEV2ZW50Q29udGV4dChldmVudCkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBMb2dVdGlscy5lcnJvcih0aGlzLmhvc3RDb21wb25lbnRJbnN0LCAn5pON5L2c5aSx6LSlJywgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cblxuICBwcml2YXRlIGJpbmRMaWZlQ3ljbGVzKCkge1xuICAgIGNvbnN0IGNvbnN0cnVjdG9yID0gQ29tcG9uZW50VXRpbHMuZ2V0Q29uc3RydWN0b3IodGhpcy5ob3N0Q29tcG9uZW50SW5zdCk7XG4gICAgY29uc3QgZGVzdHJ1Y3RvciA9IGNvbnN0cnVjdG9yLnByb3RvdHlwZVsnbmdPbkRlc3Ryb3knXTtcbiAgICBDb21wb25lbnRVdGlscy5iaW5kTGlmZUN5Y2xlcyh0aGlzLmhvc3RDb21wb25lbnRJbnN0LCB0aGlzLmhvb2tzLCBjb25zdHJ1Y3RvciwgZGVzdHJ1Y3Rvcik7XG4gIH1cblxuICBwcml2YXRlIGJpbmRNZXRob2RzKCkge1xuICAgIGlmICh0aGlzLm1ldGhvZHMpIHtcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMubWV0aG9kcykuZm9yRWFjaChtZXRob2QgPT4ge1xuICAgICAgICB0aGlzLmhvc3RDb21wb25lbnRJbnN0W21ldGhvZF0gPSB0aGlzLm1ldGhvZHNbbWV0aG9kXS5iaW5kKHRoaXMuaG9zdENvbXBvbmVudEluc3QpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBub3RpZnlPbklucHV0Q2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzID0ge30sIGZvcmNlRmlyc3RDaGFuZ2VzOiBib29sZWFuKSB7XG5cbiAgICBpZiAoIXRoaXMuaG9zdENvbXBvbmVudEluc3QubmdPbkNoYW5nZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZm9yY2VGaXJzdENoYW5nZXMpIHtcbiAgICAgIGNoYW5nZXMgPSB0aGlzLmNvbGxlY3RGaXJzdENoYW5nZXMoKTtcbiAgICB9XG5cbiAgICB0aGlzLmhvc3RDb21wb25lbnRJbnN0Lm5nT25DaGFuZ2VzKGNoYW5nZXMpO1xuXG4gICAgaWYgKHRoaXMuaG9zdENvbXBvbmVudEluc3QuY2QgJiYgdGhpcy5ob3N0Q29tcG9uZW50SW5zdC5jZC5kZXRlY3RDaGFuZ2VzKSB7XG4gICAgICB0aGlzLmhvc3RDb21wb25lbnRJbnN0LmNkLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEV4cHJlc3Npb25JbnB1dHMocHJvcHMpIHtcbiAgICBpZiAocHJvcHMpIHtcbiAgICAgIGNvbnN0IGV4cFByb3BzID0ge307XG4gICAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAocHJvcHNba2V5XSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgICAgZXhwUHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGV4cFByb3BzO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVJbnB1dHNDaGFuZ2VzKGRpZmZlcjogS2V5VmFsdWVDaGFuZ2VzPGFueSwgYW55Pikge1xuICAgIHRoaXMubGFzdElucHV0Q2hhbmdlcyA9IHRoaXMuY29sbGVjdENoYW5nZXNGcm9tRGlmZmVyKGRpZmZlcik7XG4gIH1cblxuICBwcml2YXRlIGNvbGxlY3RGaXJzdENoYW5nZXMoKTogU2ltcGxlQ2hhbmdlcyB7XG4gICAgY29uc3QgY2hhbmdlcyA9IHt9IGFzIFNpbXBsZUNoYW5nZXM7XG4gICAgY29uc3QgaW5wdXRzID0gdGhpcy5pbnB1dHM7XG5cbiAgICBPYmplY3Qua2V5cyhpbnB1dHMpXG4gICAgICAuZm9yRWFjaChwcm9wID0+IChjaGFuZ2VzW3Byb3BdID0gbmV3IFNpbXBsZUNoYW5nZSh1bmRlZmluZWQsIGlucHV0c1twcm9wXSwgdHJ1ZSkpKTtcblxuICAgIHJldHVybiBjaGFuZ2VzO1xuICB9XG5cbiAgcHJpdmF0ZSBjb2xsZWN0Q2hhbmdlc0Zyb21EaWZmZXIoZGlmZmVyOiBLZXlWYWx1ZUNoYW5nZXM8YW55LCBhbnk+KTogU2ltcGxlQ2hhbmdlcyB7XG4gICAgY29uc3QgY2hhbmdlcyA9IHt9IGFzIFNpbXBsZUNoYW5nZXM7XG4gICAgZGlmZmVyLmZvckVhY2hBZGRlZEl0ZW0ocmVjb3JkVG9DaGFuZ2VzKGNoYW5nZXMpKTtcbiAgICBkaWZmZXIuZm9yRWFjaEl0ZW0ocmVjb3JkVG9OZXdDaGFuZ2VzKGNoYW5nZXMpKTtcbiAgICByZXR1cm4gY2hhbmdlcztcbiAgfVxuXG4gIHByaXZhdGUgY2hhbmdlc1RvQXR0ckNoYW5nZXMoY2hhbmdlczogS2V5VmFsdWVDaGFuZ2VzPHN0cmluZywgYW55Pikge1xuICAgIGNvbnN0IGF0dHJDaGFuZ2VzID0ge1xuICAgICAgc2V0OiB7fSxcbiAgICAgIHJlbW92ZTogW11cbiAgICB9O1xuICAgIGNoYW5nZXMuZm9yRWFjaEFkZGVkSXRlbShyID0+IChhdHRyQ2hhbmdlcy5zZXRbci5rZXldID0gci5jdXJyZW50VmFsdWUpKTtcbiAgICBjaGFuZ2VzLmZvckVhY2hDaGFuZ2VkSXRlbShyID0+IChhdHRyQ2hhbmdlcy5zZXRbci5rZXldID0gci5jdXJyZW50VmFsdWUpKTtcbiAgICBjaGFuZ2VzLmZvckVhY2hSZW1vdmVkSXRlbShyID0+IGF0dHJDaGFuZ2VzLnJlbW92ZS5wdXNoKHIua2V5KSk7XG4gICAgcmV0dXJuIGF0dHJDaGFuZ2VzO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVBdHRyaWJ1dGVzKGFjdGlvbnMpIHtcbiAgICBPYmplY3Qua2V5cyhhY3Rpb25zLnNldCkuZm9yRWFjaChrZXkgPT5cbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGtleSwgYWN0aW9ucy5zZXRba2V5XSlcbiAgICApO1xuICAgIGFjdGlvbnMucmVtb3ZlLmZvckVhY2goa2V5ID0+IHRoaXMucmVtb3ZlQXR0cmlidXRlKGtleSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRBdHRyaWJ1dGUobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBuYW1lc3BhY2U/OiBzdHJpbmcpIHtcbiAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgbmFtZSwgdmFsdWUsIG5hbWVzcGFjZSk7XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZUF0dHJpYnV0ZShuYW1lOiBzdHJpbmcsIG5hbWVzcGFjZT86IHN0cmluZykge1xuICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBuYW1lLCBuYW1lc3BhY2UpO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNvbHZlUHJvcHMoKSB7XG4gICAgaWYgKHRoaXMuaG9zdENvbXBvbmVudEluc3QgJiYgQ29tbW9uc1V0aWxzLmlzSnNvbih0aGlzLnByb3BzKSkge1xuICAgICAgdGhpcy5pbnB1dHMgPSB7fTtcbiAgICAgIHRoaXMub3V0cHV0cyA9IHt9O1xuICAgICAgaWYgKHRoaXMuaG9zdENvbXBvbmVudEluc3QuX2luaXRQcm9wcykge1xuICAgICAgICB0aGlzLmhvc3RDb21wb25lbnRJbnN0LiRwcm9wcyA9IENvbW1vbnNVdGlscy5tZXJnZSh7fSwgdGhpcy5wcm9wcyk7XG4gICAgICAgIHRoaXMuaG9zdENvbXBvbmVudEluc3QuX2luaXRQcm9wcygpO1xuICAgICAgICB0aGlzLnByb3BzID0gQ29tbW9uc1V0aWxzLm1lcmdlKHt9LCB0aGlzLmhvc3RDb21wb25lbnRJbnN0LiRwcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5wcm9wc1snJGlkJ10pIHtcbiAgICAgICAgdGhpcy5wcm9wc1snJGlkJ10gPSBJZFV0aWxzLmdldFJhbmRvbSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wcm9wc1snbWV0aG9kcyddKSB7XG4gICAgICAgIHRoaXMubWV0aG9kcyA9IHRoaXMucHJvcHNbJ21ldGhvZHMnXTtcbiAgICAgICAgZGVsZXRlIHRoaXMucHJvcHNbJ21ldGhvZHMnXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucHJvcHNbJ2hvb2tzJ10pIHtcbiAgICAgICAgdGhpcy5ob29rcyA9IHRoaXMucHJvcHNbJ2hvb2tzJ107XG4gICAgICAgIGRlbGV0ZSB0aGlzLnByb3BzWydob29rcyddO1xuICAgICAgfVxuICAgICAgLy8gZWxzZSBpZiAodGhpcy5wcm9wc1snJGV4dCddICYmIHRoaXMucHJvcHNbJyRleHQnXS5ob29rcykge1xuICAgICAgLy8gICB0aGlzLmhvb2tzID0gdGhpcy5wcm9wc1snJGV4dCddLmhvb2tzO1xuICAgICAgLy8gICBkZWxldGUgdGhpcy5wcm9wc1snJGV4dCddLmhvb2tzO1xuICAgICAgLy8gfVxuXG4gICAgICBpZiAodGhpcy5ob3N0Q29tcG9uZW50SW5zdCBpbnN0YW5jZW9mIFdyYXBwZXJDb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy5wcm9wcyA9IENvbW1vbnNVdGlscy5nZXQodGhpcy5wcm9wcywgJyRleHQnLCB7fSk7XG4gICAgICAgIGlmICh0aGlzLnByb3BzWydob29rcyddKSB7XG4gICAgICAgICAgdGhpcy5ob29rcyA9IHRoaXMucHJvcHNbJ2hvb2tzJ107XG4gICAgICAgICAgZGVsZXRlIHRoaXMucHJvcHNbJ2hvb2tzJ107XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJvcHMgPSBDb21tb25zVXRpbHMub21pdCh0aGlzLnByb3BzLCAnJGV4dCcpO1xuICAgICAgfVxuICAgICAgT2JqZWN0LmtleXModGhpcy5wcm9wcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAodGhpcy5ob3N0Q29tcG9uZW50SW5zdFtrZXldIGluc3RhbmNlb2YgRXZlbnRFbWl0dGVyKSB7XG4gICAgICAgICAgdGhpcy5vdXRwdXRzW2tleV0gPSB0aGlzLnByb3BzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pbnB1dHNba2V5XSA9IHRoaXMucHJvcHNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmlucHV0cykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuaW5wdXRzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMub3V0cHV0cykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMub3V0cHV0cyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlc29sdmVBdHRycygpIHtcbiAgICBpZiAodGhpcy5ob3N0Q29tcG9uZW50SW5zdCBpbnN0YW5jZW9mIFdyYXBwZXJDb21wb25lbnQpIHtcbiAgICAgIHRoaXMuYXR0cnMgPSBDb21tb25zVXRpbHMuZ2V0KHRoaXMuYXR0cnMsICckZXh0Jywge30pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmF0dHJzID0gQ29tbW9uc1V0aWxzLm9taXQodGhpcy5hdHRycywgJyRleHQnKTtcbiAgICB9XG4gIH1cblxufVxuIl19