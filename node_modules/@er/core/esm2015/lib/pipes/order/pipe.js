/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
export class OrderByPipe {
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    static _orderByComparator(a, b) {
        try { // HACK cuz error when delete entire textbox of number and it compares
            if ((isNaN(parseFloat(a)) || !isFinite(a)) || (isNaN(parseFloat(b)) || !isFinite(b))) {
                //Isn't a number so lowercase the string to properly compare
                if (a.toLowerCase() < b.toLowerCase()) {
                    return -1;
                }
                if (a.toLowerCase() > b.toLowerCase()) {
                    return 1;
                }
            }
            else {
                // Parse strings as numbers to compare properly
                if (parseFloat(a) < parseFloat(b)) {
                    return -1;
                }
                if (parseFloat(a) > parseFloat(b)) {
                    return 1;
                }
            }
        }
        catch (e) {
            return 1;
        }
        return 0; //equal each other
    }
    /* filter property by string 'parent.child.item.orderKey' */
    /**
     * @param {?} obj
     * @param {?} propertyPath
     * @return {?}
     */
    static _getDeepValue(obj, propertyPath) {
        /** @type {?} */
        const pathList = propertyPath.split('??');
        if (pathList.length > 0) {
            /** @type {?} */
            let index = 0;
            /** @type {?} */
            let flag = false;
            /** @type {?} */
            let result = '';
            while (!flag) {
                result = getDeepValueByPath(obj, pathList[index]);
                if (result !== undefined) {
                    flag = true;
                }
                else {
                    index++;
                    if (pathList.length === index) {
                        flag = true;
                    }
                }
            }
            return result;
        }
        else {
            return getDeepValueByPath(obj, propertyPath);
        }
        /**
         * @param {?} obj
         * @param {?} path
         * @return {?}
         */
        function getDeepValueByPath(obj, path) {
            path = path.split('.');
            if (path.length > 0) {
                for (let i = 0; i < path.length; i++) {
                    if (obj[path[i]] !== undefined) {
                        obj = obj[path[i]];
                    }
                    else {
                        obj = undefined;
                        break;
                    }
                }
                return obj;
            }
            else {
                return obj[path];
            }
        }
    }
    /**
     * @param {?} input
     * @param {?} __1
     * @return {?}
     */
    transform(input, [config = '+']) {
        if (!Array.isArray(input)) {
            return input;
        }
        if (!Array.isArray(config) || (Array.isArray(config) && config.length === 1)) {
            /** @type {?} */
            const propertyToCheck = !Array.isArray(config) ? config : config[0];
            /** @type {?} */
            const desc = propertyToCheck.substr(0, 1) === '-';
            //Basic array
            if (!propertyToCheck || propertyToCheck === '-' || propertyToCheck === '+') {
                return !desc ? input.sort() : input.sort().reverse();
            }
            else {
                /** @type {?} */
                const property = propertyToCheck.substr(0, 1) === '+' || propertyToCheck.substr(0, 1) === '-'
                    ? propertyToCheck.substr(1)
                    : propertyToCheck;
                return input.sort(function (a, b) {
                    return !desc
                        ? OrderByPipe._orderByComparator(OrderByPipe._getDeepValue(a, property), OrderByPipe._getDeepValue(b, property))
                        : -OrderByPipe._orderByComparator(OrderByPipe._getDeepValue(a, property), OrderByPipe._getDeepValue(b, property));
                });
            }
        }
        else {
            //Loop over property of the array in order and sort
            return input.sort(function (a, b) {
                for (let i = 0; i < config.length; i++) {
                    /** @type {?} */
                    const desc = config[i].substr(0, 1) === '-';
                    /** @type {?} */
                    const property = config[i].substr(0, 1) === '+' || config[i].substr(0, 1) === '-'
                        ? config[i].substr(1)
                        : config[i];
                    /** @type {?} */
                    const comparison = !desc
                        ? OrderByPipe._orderByComparator(OrderByPipe._getDeepValue(a, property), OrderByPipe._getDeepValue(b, property))
                        : -OrderByPipe._orderByComparator(OrderByPipe._getDeepValue(a, property), OrderByPipe._getDeepValue(b, property));
                    //Don't return 0 yet in case of needing to sort by next property
                    if (comparison !== 0) {
                        return comparison;
                    }
                }
                return 0; //equal each other
            });
        }
    }
}
OrderByPipe.decorators = [
    { type: Pipe, args: [{ name: 'orderBy', pure: false },] }
];
//# sourceMappingURL=data:application/json;base64,