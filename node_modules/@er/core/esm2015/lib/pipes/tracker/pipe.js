/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Pipe } from '@angular/core';
import { CommonsUtils } from '@er/utils';
import { BehaviorSubject, timer } from 'rxjs';
import { mapTo, scan, startWith, switchMap, tap } from 'rxjs/operators';
export class TrackerPipe {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        this.cd = cd;
        this.currentNumber = 0;
        this.counter$ = new BehaviorSubject(0);
        //   .subscribe();
    }
    /**
     * @param {?} number
     * @param {?=} offset
     * @return {?}
     */
    transform(number, offset = 20) {
        this.currentNumber = number - CommonsUtils.getRandomNumber(offset);
        this.counter$.next(this.currentNumber);
        this.counter$
            .pipe(switchMap(endRange => {
            return timer(1000, 200)
                .pipe(mapTo(this.positiveOrNegative(endRange, this.currentNumber)), startWith(this.currentNumber), scan((acc, curr) => acc + curr), tap(n => console.log(n))
            //  takeWhile(this.takeUntil(endRange, this.currentNumber))
            );
        })).subscribe(() => this.cd.detectChanges());
        return this.counter$;
    }
    /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    positiveOrNegative(endRange, currentNumber) {
        return endRange > currentNumber ? 1 : -1;
    }
    /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    takeUntil(endRange, currentNumber) {
        return endRange > currentNumber
            ? val => val <= endRange
            : val => val >= endRange;
    }
}
TrackerPipe.decorators = [
    { type: Pipe, args: [{
                name: 'erTracker'
            },] }
];
/** @nocollapse */
TrackerPipe.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
if (false) {
    /** @type {?} */
    TrackerPipe.prototype.currentNumber;
    /** @type {?} */
    TrackerPipe.prototype.counter$;
    /**
     * @type {?}
     * @private
     */
    TrackerPipe.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3BpcGVzL3RyYWNrZXIvcGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLGlCQUFpQixFQUFFLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUN2QyxPQUFPLEVBQUMsZUFBZSxFQUFjLEtBQUssRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUN4RCxPQUFPLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBS3RFLE1BQU0sT0FBTyxXQUFXOzs7O0lBTXRCLFlBQW9CLEVBQXFCO1FBQXJCLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBSnpDLGtCQUFhLEdBQUcsQ0FBQyxDQUFDO1FBRWxCLGFBQVEsR0FBRyxJQUFJLGVBQWUsQ0FBUyxDQUFDLENBQUMsQ0FBQztRQUd4QyxrQkFBa0I7SUFDcEIsQ0FBQzs7Ozs7O0lBRUQsU0FBUyxDQUFDLE1BQWMsRUFBRSxTQUFpQixFQUFFO1FBQzNDLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxHQUFHLFlBQVksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxRQUFRO2FBQ1YsSUFBSSxDQUNILFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNuQixPQUFPLEtBQUssQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDO2lCQUNwQixJQUFJLENBQ0gsS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQzVELFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQzdCLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFDL0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QiwyREFBMkQ7YUFDNUQsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUNILENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztRQUM3QyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQzs7Ozs7OztJQUVPLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxhQUFhO1FBQ2hELE9BQU8sUUFBUSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDOzs7Ozs7O0lBRU8sU0FBUyxDQUFDLFFBQVEsRUFBRSxhQUFhO1FBQ3ZDLE9BQU8sUUFBUSxHQUFHLGFBQWE7WUFDN0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLFFBQVE7WUFDeEIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLFFBQVEsQ0FBQztJQUM3QixDQUFDOzs7WUF4Q0YsSUFBSSxTQUFDO2dCQUNKLElBQUksRUFBRSxXQUFXO2FBQ2xCOzs7O1lBUE8saUJBQWlCOzs7O0lBVXZCLG9DQUFrQjs7SUFFbEIsK0JBQTBDOzs7OztJQUU5Qix5QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwVG8sIHNjYW4sIHN0YXJ0V2l0aCwgc3dpdGNoTWFwLCB0YXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQFBpcGUoe1xuICBuYW1lOiAnZXJUcmFja2VyJ1xufSlcbmV4cG9ydCBjbGFzcyBUcmFja2VyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gIGN1cnJlbnROdW1iZXIgPSAwO1xuXG4gIGNvdW50ZXIkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxudW1iZXI+KDApO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgLy8gICAuc3Vic2NyaWJlKCk7XG4gIH1cblxuICB0cmFuc2Zvcm0obnVtYmVyOiBudW1iZXIsIG9mZnNldDogbnVtYmVyID0gMjApOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xuICAgIHRoaXMuY3VycmVudE51bWJlciA9IG51bWJlciAtIENvbW1vbnNVdGlscy5nZXRSYW5kb21OdW1iZXIob2Zmc2V0KTtcbiAgICB0aGlzLmNvdW50ZXIkLm5leHQodGhpcy5jdXJyZW50TnVtYmVyKTtcbiAgICB0aGlzLmNvdW50ZXIkXG4gICAgICAucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKGVuZFJhbmdlID0+IHtcbiAgICAgICAgICByZXR1cm4gdGltZXIoMTAwMCwgMjAwKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgIG1hcFRvKHRoaXMucG9zaXRpdmVPck5lZ2F0aXZlKGVuZFJhbmdlLCB0aGlzLmN1cnJlbnROdW1iZXIpKSxcbiAgICAgICAgICAgICAgc3RhcnRXaXRoKHRoaXMuY3VycmVudE51bWJlciksXG4gICAgICAgICAgICAgIHNjYW4oKGFjYywgY3VycikgPT4gYWNjICsgY3VyciksXG4gICAgICAgICAgICAgIHRhcChuID0+IGNvbnNvbGUubG9nKG4pKVxuICAgICAgICAgICAgICAvLyAgdGFrZVdoaWxlKHRoaXMudGFrZVVudGlsKGVuZFJhbmdlLCB0aGlzLmN1cnJlbnROdW1iZXIpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICkuc3Vic2NyaWJlKCgpID0+IHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpKTtcbiAgICByZXR1cm4gdGhpcy5jb3VudGVyJDtcbiAgfVxuXG4gIHByaXZhdGUgcG9zaXRpdmVPck5lZ2F0aXZlKGVuZFJhbmdlLCBjdXJyZW50TnVtYmVyKSB7XG4gICAgcmV0dXJuIGVuZFJhbmdlID4gY3VycmVudE51bWJlciA/IDEgOiAtMTtcbiAgfVxuXG4gIHByaXZhdGUgdGFrZVVudGlsKGVuZFJhbmdlLCBjdXJyZW50TnVtYmVyKSB7XG4gICAgcmV0dXJuIGVuZFJhbmdlID4gY3VycmVudE51bWJlclxuICAgICAgPyB2YWwgPT4gdmFsIDw9IGVuZFJhbmdlXG4gICAgICA6IHZhbCA9PiB2YWwgPj0gZW5kUmFuZ2U7XG4gIH1cblxufVxuIl19