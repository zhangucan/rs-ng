/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, NgZone, Pipe } from '@angular/core';
import { DateUtils } from '@er/utils';
export class UpToNowPipe {
    /**
     * @param {?} cd
     * @param {?} ngZone
     */
    constructor(cd, ngZone) {
        this.cd = cd;
        this.ngZone = ngZone;
    }
    /**
     * @param {?} value
     * @param {?=} due
     * @return {?}
     */
    transform(value, due) {
        /** @type {?} */
        const d = DateUtils.toDate(value);
        if (!d) {
            return '';
        }
        /** @type {?} */
        const span = DateUtils.getDateByNow(d, due);
        this.removeTimer();
        /** @type {?} */
        const timeToUpdate = (Number.isNaN(span.seconds)) ? 1000 : DateUtils.getUpdateSeconds(span.seconds) * 1000;
        this.timer = this.ngZone.runOutsideAngular(() => {
            if (typeof window !== 'undefined') {
                return window.setTimeout(() => {
                    this.ngZone.run(() => this.cd.detectChanges());
                }, timeToUpdate);
            }
            return null;
        });
        return span.message;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeTimer();
    }
    /**
     * @private
     * @return {?}
     */
    removeTimer() {
        if (this.timer) {
            window.clearTimeout(this.timer);
            this.timer = null;
        }
    }
}
UpToNowPipe.decorators = [
    { type: Pipe, args: [{
                name: 'erUpToNow',
                pure: false
            },] }
];
/** @nocollapse */
UpToNowPipe.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgZone }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    UpToNowPipe.prototype.timer;
    /**
     * @type {?}
     * @private
     */
    UpToNowPipe.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    UpToNowPipe.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3BpcGVzL3VwLXRvLW5vdy9waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsTUFBTSxFQUFhLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQU1wQyxNQUFNLE9BQU8sV0FBVzs7Ozs7SUFJdEIsWUFBb0IsRUFBcUIsRUFBVSxNQUFjO1FBQTdDLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUNqRSxDQUFDOzs7Ozs7SUFFRCxTQUFTLENBQUMsS0FBVSxFQUFFLEdBQVU7O2NBQ3hCLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNqQyxJQUFJLENBQUMsQ0FBQyxFQUFFO1lBQ04sT0FBTyxFQUFFLENBQUM7U0FDWDs7Y0FDSyxJQUFJLEdBQUcsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO1FBQzNDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQzs7Y0FDYixZQUFZLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSTtRQUMxRyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQzlDLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxFQUFFO2dCQUNqQyxPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO29CQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7Z0JBQ2pELENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQzthQUNsQjtZQUNELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFTyxXQUFXO1FBQ2pCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQ25CO0lBQ0gsQ0FBQzs7O1lBdkNGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsV0FBVztnQkFDakIsSUFBSSxFQUFFLEtBQUs7YUFDWjs7OztZQU5PLGlCQUFpQjtZQUFFLE1BQU07Ozs7Ozs7SUFTL0IsNEJBQXNCOzs7OztJQUVWLHlCQUE2Qjs7Ozs7SUFBRSw2QkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBOZ1pvbmUsIE9uRGVzdHJveSwgUGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0RhdGVVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcblxuQFBpcGUoe1xuICBuYW1lOiAnZXJVcFRvTm93JyxcbiAgcHVyZTogZmFsc2Vcbn0pXG5leHBvcnQgY2xhc3MgVXBUb05vd1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtLCBPbkRlc3Ryb3kge1xuXG4gIHByaXZhdGUgdGltZXI6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZiwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge1xuICB9XG5cbiAgdHJhbnNmb3JtKHZhbHVlOiBhbnksIGR1ZT86IERhdGUpIHtcbiAgICBjb25zdCBkID0gRGF0ZVV0aWxzLnRvRGF0ZSh2YWx1ZSk7XG4gICAgaWYgKCFkKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGNvbnN0IHNwYW4gPSBEYXRlVXRpbHMuZ2V0RGF0ZUJ5Tm93KGQsIGR1ZSk7XG4gICAgdGhpcy5yZW1vdmVUaW1lcigpO1xuICAgIGNvbnN0IHRpbWVUb1VwZGF0ZSA9IChOdW1iZXIuaXNOYU4oc3Bhbi5zZWNvbmRzKSkgPyAxMDAwIDogRGF0ZVV0aWxzLmdldFVwZGF0ZVNlY29uZHMoc3Bhbi5zZWNvbmRzKSAqIDEwMDA7XG4gICAgdGhpcy50aW1lciA9IHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLmNkLmRldGVjdENoYW5nZXMoKSk7XG4gICAgICAgIH0sIHRpbWVUb1VwZGF0ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KTtcbiAgICByZXR1cm4gc3Bhbi5tZXNzYWdlO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5yZW1vdmVUaW1lcigpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVUaW1lcigpIHtcbiAgICBpZiAodGhpcy50aW1lcikge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgICAgIHRoaXMudGltZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuXG5cbn1cblxuIl19