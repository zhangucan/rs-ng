/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Pipe } from '@angular/core';
export class UnitNumberPipe {
    /**
     * @param {?} ele
     */
    constructor(ele) {
        this.ele = ele;
    }
    /**
     * @param {?} value
     * @param {?=} decimal
     * @return {?}
     */
    transform(value, decimal) {
        if (!value) {
            return null;
        }
        if (typeof value === 'string') {
            value = parseFloat(value);
        }
        /** @type {?} */
        let number;
        /** @type {?} */
        let suffix;
        /** @type {?} */
        const numeral = [
            { thresholds: 1, suffix: '' },
            { thresholds: 1e3, suffix: 'K' },
            { thresholds: 1e6, suffix: 'M' },
            { thresholds: 1e9, suffix: 'B' },
            { thresholds: 1e12, suffix: 'T' },
            { thresholds: 1e15, suffix: 'Q' }
        ];
        for (let i = numeral.length - 1; i >= 0; i--) {
            if (value >= numeral[i].thresholds) {
                number = value / numeral[i].thresholds;
                suffix = numeral[i].suffix;
                break;
            }
        }
        if (value > 1e3) {
            if (!decimal) {
                if (number < 10) {
                    number = number.toFixed(1);
                }
                else {
                    number = number.toFixed(0);
                }
            }
            else {
                if (decimal === 0 || decimal === 1 || decimal === 2) {
                    number = number.toFixed(decimal);
                }
                else {
                    throw new Error('must be integer 0, 1 or 2');
                }
            }
        }
        else {
            if (decimal === 0 || decimal === 1 || decimal === 2) {
                number = number.toFixed(decimal);
            }
            else {
                number = Math.round(number);
            }
        }
        // add hint of original value
        // this.ele.nativeElement;
        return number + suffix;
    }
}
UnitNumberPipe.decorators = [
    { type: Pipe, args: [{
                name: 'erUnitNumber'
            },] }
];
/** @nocollapse */
UnitNumberPipe.ctorParameters = () => [
    { type: ElementRef }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    UnitNumberPipe.prototype.ele;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3BpcGVzL3VuaXQtbnVtYmVyL3BpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQU85RCxNQUFNLE9BQU8sY0FBYzs7OztJQUV6QixZQUFvQixHQUFlO1FBQWYsUUFBRyxHQUFILEdBQUcsQ0FBWTtJQUNuQyxDQUFDOzs7Ozs7SUFFRCxTQUFTLENBQUMsS0FBYSxFQUFFLE9BQWdCO1FBRXZDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDN0IsS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzQjs7WUFFRyxNQUFNOztZQUFFLE1BQU07O2NBQ1osT0FBTyxHQUFHO1lBQ2QsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUM7WUFDM0IsRUFBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUM7WUFDOUIsRUFBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUM7WUFDOUIsRUFBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUM7WUFDOUIsRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUM7WUFDL0IsRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUM7U0FDaEM7UUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDNUMsSUFBSSxLQUFLLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRTtnQkFDbEMsTUFBTSxHQUFHLEtBQUssR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO2dCQUN2QyxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztnQkFDM0IsTUFBTTthQUNQO1NBQ0Y7UUFDRCxJQUFJLEtBQUssR0FBRyxHQUFHLEVBQUU7WUFDZixJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNaLElBQUksTUFBTSxHQUFHLEVBQUUsRUFBRTtvQkFDZixNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDNUI7cUJBQU07b0JBQ0wsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzVCO2FBQ0Y7aUJBQU07Z0JBQ0wsSUFBSSxPQUFPLEtBQUssQ0FBQyxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksT0FBTyxLQUFLLENBQUMsRUFBRTtvQkFDbkQsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQ2xDO3FCQUFNO29CQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztpQkFDOUM7YUFDRjtTQUNGO2FBQU07WUFDTCxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksT0FBTyxLQUFLLENBQUMsSUFBSSxPQUFPLEtBQUssQ0FBQyxFQUFFO2dCQUNuRCxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNsQztpQkFBTTtnQkFDTCxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUM3QjtTQUNGO1FBQ0QsNkJBQTZCO1FBQzdCLDBCQUEwQjtRQUUxQixPQUFPLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQzs7O1lBNURGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsY0FBYzthQUNyQjs7OztZQUxPLFVBQVU7Ozs7Ozs7SUFTSiw2QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0VsZW1lbnRSZWYsIFBpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5cbkBQaXBlKHtcbiAgbmFtZTogJ2VyVW5pdE51bWJlcidcbn0pXG5cbmV4cG9ydCBjbGFzcyBVbml0TnVtYmVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlOiBFbGVtZW50UmVmKSB7XG4gIH1cblxuICB0cmFuc2Zvcm0odmFsdWU6IG51bWJlciwgZGVjaW1hbD86IG51bWJlcik6IHN0cmluZyB7XG5cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICB9XG5cbiAgICBsZXQgbnVtYmVyLCBzdWZmaXg7XG4gICAgY29uc3QgbnVtZXJhbCA9IFtcbiAgICAgIHt0aHJlc2hvbGRzOiAxLCBzdWZmaXg6ICcnfSxcbiAgICAgIHt0aHJlc2hvbGRzOiAxZTMsIHN1ZmZpeDogJ0snfSxcbiAgICAgIHt0aHJlc2hvbGRzOiAxZTYsIHN1ZmZpeDogJ00nfSxcbiAgICAgIHt0aHJlc2hvbGRzOiAxZTksIHN1ZmZpeDogJ0InfSxcbiAgICAgIHt0aHJlc2hvbGRzOiAxZTEyLCBzdWZmaXg6ICdUJ30sXG4gICAgICB7dGhyZXNob2xkczogMWUxNSwgc3VmZml4OiAnUSd9XG4gICAgXTtcbiAgICBmb3IgKGxldCBpID0gbnVtZXJhbC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgaWYgKHZhbHVlID49IG51bWVyYWxbaV0udGhyZXNob2xkcykge1xuICAgICAgICBudW1iZXIgPSB2YWx1ZSAvIG51bWVyYWxbaV0udGhyZXNob2xkcztcbiAgICAgICAgc3VmZml4ID0gbnVtZXJhbFtpXS5zdWZmaXg7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodmFsdWUgPiAxZTMpIHtcbiAgICAgIGlmICghZGVjaW1hbCkge1xuICAgICAgICBpZiAobnVtYmVyIDwgMTApIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIudG9GaXhlZCgxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIudG9GaXhlZCgwKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGRlY2ltYWwgPT09IDAgfHwgZGVjaW1hbCA9PT0gMSB8fCBkZWNpbWFsID09PSAyKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyLnRvRml4ZWQoZGVjaW1hbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtdXN0IGJlIGludGVnZXIgMCwgMSBvciAyJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRlY2ltYWwgPT09IDAgfHwgZGVjaW1hbCA9PT0gMSB8fCBkZWNpbWFsID09PSAyKSB7XG4gICAgICAgIG51bWJlciA9IG51bWJlci50b0ZpeGVkKGRlY2ltYWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbnVtYmVyID0gTWF0aC5yb3VuZChudW1iZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBhZGQgaGludCBvZiBvcmlnaW5hbCB2YWx1ZVxuICAgIC8vIHRoaXMuZWxlLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICByZXR1cm4gbnVtYmVyICsgc3VmZml4O1xuICB9XG59XG5cblxuIl19