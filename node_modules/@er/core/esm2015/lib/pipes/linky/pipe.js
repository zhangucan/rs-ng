/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { CommonsUtils } from '@er/utils';
export class LinkifyPipe {
    /**
     * @param {?} text
     * @param {?=} pipeEnabled
     * @return {?}
     */
    transform(text, pipeEnabled = true) {
        if (pipeEnabled && !CommonsUtils.isEmpty(text)) {
            return this.linkify(text);
        }
        return text;
    }
    /**
     * @private
     * @param {?} plainText
     * @param {?=} pipeEnabled
     * @return {?}
     */
    linkify(plainText, pipeEnabled = true) {
        if (pipeEnabled) {
            /** @type {?} */
            let replacedText;
            /** @type {?} */
            let replacePattern1;
            /** @type {?} */
            let replacePattern2;
            /** @type {?} */
            let replacePattern3;
            // URLs starting with http://, https://, or ftp://
            replacePattern1 = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
            replacedText = plainText.replace(replacePattern1, '<a href="$1" target=`${options.target|"_blank"}`>$1</a>');
            // URLs starting with "www." (without // before it, or it'd re-link the ones done above).
            replacePattern2 = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
            replacedText = replacedText.replace(replacePattern2, '$1<a href="http://$2" target=`${options.target|"_blank"}`>$2</a>');
            // Change email addresses to mailto:: links.
            replacePattern3 = /(([a-zA-Z0-9\-\_\.])+@[a-zA-Z\_]+?(\.[a-zA-Z]{2,6})+)/gim;
            replacedText = replacedText.replace(replacePattern3, '<a href="mailto:$1">$1</a>');
            return replacedText;
        }
        return plainText;
    }
}
LinkifyPipe.decorators = [
    { type: Pipe, args: [{
                name: 'erLinkify',
                pure: false
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3BpcGVzL2xpbmt5L3BpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxJQUFJLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFPdkMsTUFBTSxPQUFPLFdBQVc7Ozs7OztJQUV0QixTQUFTLENBQUMsSUFBWSxFQUFFLFdBQVcsR0FBRyxJQUFJO1FBQ3hDLElBQUksV0FBVyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM5QyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0I7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7Ozs7SUFFTyxPQUFPLENBQUMsU0FBUyxFQUFFLFdBQVcsR0FBRyxJQUFJO1FBQzNDLElBQUksV0FBVyxFQUFFOztnQkFDWCxZQUFZOztnQkFDWixlQUFlOztnQkFDZixlQUFlOztnQkFDZixlQUFlO1lBRW5CLGtEQUFrRDtZQUNsRCxlQUFlLEdBQUcseUVBQXlFLENBQUM7WUFDNUYsWUFBWSxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLHlEQUF5RCxDQUFDLENBQUM7WUFFN0cseUZBQXlGO1lBQ3pGLGVBQWUsR0FBRyxnQ0FBZ0MsQ0FBQztZQUNuRCxZQUFZLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsa0VBQWtFLENBQUMsQ0FBQztZQUV6SCw0Q0FBNEM7WUFDNUMsZUFBZSxHQUFHLDBEQUEwRCxDQUFDO1lBQzdFLFlBQVksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO1lBRW5GLE9BQU8sWUFBWSxDQUFDO1NBQ3JCO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQzs7O1lBbkNGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsV0FBVztnQkFDakIsSUFBSSxFQUFFLEtBQUs7YUFDWiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0NvbW1vbnNVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcblxuXG5AUGlwZSh7XG4gIG5hbWU6ICdlckxpbmtpZnknLFxuICBwdXJlOiBmYWxzZVxufSlcbmV4cG9ydCBjbGFzcyBMaW5raWZ5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gIHRyYW5zZm9ybSh0ZXh0OiBzdHJpbmcsIHBpcGVFbmFibGVkID0gdHJ1ZSk6IHN0cmluZyB7XG4gICAgaWYgKHBpcGVFbmFibGVkICYmICFDb21tb25zVXRpbHMuaXNFbXB0eSh0ZXh0KSkge1xuICAgICAgcmV0dXJuIHRoaXMubGlua2lmeSh0ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICBwcml2YXRlIGxpbmtpZnkocGxhaW5UZXh0LCBwaXBlRW5hYmxlZCA9IHRydWUpOiBzdHJpbmcge1xuICAgIGlmIChwaXBlRW5hYmxlZCkge1xuICAgICAgbGV0IHJlcGxhY2VkVGV4dDtcbiAgICAgIGxldCByZXBsYWNlUGF0dGVybjE7XG4gICAgICBsZXQgcmVwbGFjZVBhdHRlcm4yO1xuICAgICAgbGV0IHJlcGxhY2VQYXR0ZXJuMztcblxuICAgICAgLy8gVVJMcyBzdGFydGluZyB3aXRoIGh0dHA6Ly8sIGh0dHBzOi8vLCBvciBmdHA6Ly9cbiAgICAgIHJlcGxhY2VQYXR0ZXJuMSA9IC8oXFxiKGh0dHBzP3xmdHApOlxcL1xcL1stQS1aMC05KyZAI1xcLyU/PX5ffCE6LC47XSpbLUEtWjAtOSsmQCNcXC8lPX5ffF0pL2dpbTtcbiAgICAgIHJlcGxhY2VkVGV4dCA9IHBsYWluVGV4dC5yZXBsYWNlKHJlcGxhY2VQYXR0ZXJuMSwgJzxhIGhyZWY9XCIkMVwiIHRhcmdldD1gJHtvcHRpb25zLnRhcmdldHxcIl9ibGFua1wifWA+JDE8L2E+Jyk7XG5cbiAgICAgIC8vIFVSTHMgc3RhcnRpbmcgd2l0aCBcInd3dy5cIiAod2l0aG91dCAvLyBiZWZvcmUgaXQsIG9yIGl0J2QgcmUtbGluayB0aGUgb25lcyBkb25lIGFib3ZlKS5cbiAgICAgIHJlcGxhY2VQYXR0ZXJuMiA9IC8oXnxbXlxcL10pKHd3d1xcLltcXFNdKyhcXGJ8JCkpL2dpbTtcbiAgICAgIHJlcGxhY2VkVGV4dCA9IHJlcGxhY2VkVGV4dC5yZXBsYWNlKHJlcGxhY2VQYXR0ZXJuMiwgJyQxPGEgaHJlZj1cImh0dHA6Ly8kMlwiIHRhcmdldD1gJHtvcHRpb25zLnRhcmdldHxcIl9ibGFua1wifWA+JDI8L2E+Jyk7XG5cbiAgICAgIC8vIENoYW5nZSBlbWFpbCBhZGRyZXNzZXMgdG8gbWFpbHRvOjogbGlua3MuXG4gICAgICByZXBsYWNlUGF0dGVybjMgPSAvKChbYS16QS1aMC05XFwtXFxfXFwuXSkrQFthLXpBLVpcXF9dKz8oXFwuW2EtekEtWl17Miw2fSkrKS9naW07XG4gICAgICByZXBsYWNlZFRleHQgPSByZXBsYWNlZFRleHQucmVwbGFjZShyZXBsYWNlUGF0dGVybjMsICc8YSBocmVmPVwibWFpbHRvOiQxXCI+JDE8L2E+Jyk7XG5cbiAgICAgIHJldHVybiByZXBsYWNlZFRleHQ7XG4gICAgfVxuICAgIHJldHVybiBwbGFpblRleHQ7XG4gIH1cbn1cbiJdfQ==