/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, ViewChild } from '@angular/core';
import { CommonsUtils, DataItemUtils } from '@er/utils';
import { BehaviorSubject } from 'rxjs';
import { ApiDataDirective } from '../directives/api-data/directive';
import { LogUtils } from '../utils/log';
import { ControlWrapperComponent } from './control-wrapper';
/**
 * @template T
 */
export class DataAwareControlWrapperComponent extends ControlWrapperComponent {
    constructor() {
        super(...arguments);
        this.data$ = new BehaviorSubject(undefined);
    }
    /**
     * @return {?}
     */
    get apiDataProps() {
        return this._apiDataProps || {};
    }
    /**
     * @param {?} props
     * @return {?}
     */
    set apiDataProps(props) {
        this._apiDataProps = props;
        if (this._apiDataProps && !this._apiDataProps.data$) {
            this._apiDataProps.data$ = this.data$;
        }
    }
    /**
     * @return {?}
     */
    onPropsInit() {
        super.onPropsInit();
        this.initLocalDataItem();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    parseValue(value) {
        try {
            if (value && this.$props.$ext.dataItemProps && !CommonsUtils.isString(value)) {
                return DataItemUtils.getItemValue(value, this.$props.$ext.dataItemProps.valueKey);
            }
            return value;
        }
        catch (e) {
            LogUtils.error(this, '数据解析错误', e);
            return undefined;
        }
    }
    /**
     * @param {?} model
     * @return {?}
     */
    formatModel(model) {
        try {
            if (CommonsUtils.isJson(model) && this.$props.$ext.dataItemProps) {
                return DataItemUtils.getItemLabel(model, this.$props.$ext.dataItemProps.labelKey);
            }
            return model;
        }
        catch (e) {
            LogUtils.error(this, '数据解析错误', e);
            return undefined;
        }
    }
    /**
     * @return {?}
     */
    initLocalDataItem() {
        if (this.$props.$ext && this.$props.$ext.dataItems) {
            /** @type {?} */
            let data = this.$props.$ext.dataItems;
            data = data.map(d => d['data'] = d);
            this.data$.next(data);
        }
    }
}
DataAwareControlWrapperComponent.propDecorators = {
    apiData: [{ type: ViewChild, args: [ApiDataDirective,] }],
    apiDataProps: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DataAwareControlWrapperComponent.prototype.data$;
    /** @type {?} */
    DataAwareControlWrapperComponent.prototype.apiData;
    /**
     * @type {?}
     * @private
     */
    DataAwareControlWrapperComponent.prototype._apiDataProps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1hd2FyZS1jb250cm9sLXdyYXBwZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9iYXNlcy9kYXRhLWF3YXJlLWNvbnRyb2wtd3JhcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLEtBQUssRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFL0MsT0FBTyxFQUFDLFlBQVksRUFBRSxhQUFhLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNyQyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUNsRSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ3RDLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLG1CQUFtQixDQUFDOzs7O0FBRTFELE1BQU0sT0FBTyxnQ0FBNEUsU0FBUSx1QkFBMEI7SUFBM0g7O1FBRVMsVUFBSyxHQUF5QixJQUFJLGVBQWUsQ0FBTSxTQUFTLENBQUMsQ0FBQztJQXFEM0UsQ0FBQzs7OztJQS9DQyxJQUFhLFlBQVk7UUFDdkIsT0FBTyxJQUFJLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQztJQUNsQyxDQUFDOzs7OztJQUVELElBQUksWUFBWSxDQUFDLEtBQW1CO1FBQ2xDLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzNCLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFO1lBQ25ELElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDdkM7SUFDSCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxLQUFLO1FBQ2QsSUFBSTtZQUNGLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzVFLE9BQU8sYUFBYSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ25GO1lBQ0QsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsS0FBSztRQUNmLElBQUk7WUFDRixJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUNoRSxPQUFPLGFBQWEsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNuRjtZQUNELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNsQyxPQUFPLFNBQVMsQ0FBQztTQUNsQjtJQUNILENBQUM7Ozs7SUFFRCxpQkFBaUI7UUFDZixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTs7Z0JBQzlDLElBQUksR0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTO1lBQzNDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQzs7O3NCQWxEQSxTQUFTLFNBQUMsZ0JBQWdCOzJCQUkxQixLQUFLOzs7O0lBTk4saURBQXlFOztJQUV6RSxtREFBdUQ7Ozs7O0lBRXZELHlEQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5wdXQsIFZpZXdDaGlsZH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0FwaURhdGFQcm9wcywgRGF0YUF3YXJlUHJvcHN9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge0NvbW1vbnNVdGlscywgRGF0YUl0ZW1VdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7QXBpRGF0YURpcmVjdGl2ZX0gZnJvbSAnLi4vZGlyZWN0aXZlcy9hcGktZGF0YS9kaXJlY3RpdmUnO1xuaW1wb3J0IHtMb2dVdGlsc30gZnJvbSAnLi4vdXRpbHMvbG9nJztcbmltcG9ydCB7Q29udHJvbFdyYXBwZXJDb21wb25lbnR9IGZyb20gJy4vY29udHJvbC13cmFwcGVyJztcblxuZXhwb3J0IGNsYXNzIERhdGFBd2FyZUNvbnRyb2xXcmFwcGVyQ29tcG9uZW50PFQgZXh0ZW5kcyBEYXRhQXdhcmVQcm9wcyA9IERhdGFBd2FyZVByb3BzPiBleHRlbmRzIENvbnRyb2xXcmFwcGVyQ29tcG9uZW50PFQ+IHtcblxuICBwdWJsaWMgZGF0YSQ6IEJlaGF2aW9yU3ViamVjdDxhbnk+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxhbnk+KHVuZGVmaW5lZCk7XG5cbiAgQFZpZXdDaGlsZChBcGlEYXRhRGlyZWN0aXZlKSBhcGlEYXRhOiBBcGlEYXRhRGlyZWN0aXZlO1xuXG4gIHByaXZhdGUgX2FwaURhdGFQcm9wczogQXBpRGF0YVByb3BzO1xuXG4gIEBJbnB1dCgpIGdldCBhcGlEYXRhUHJvcHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FwaURhdGFQcm9wcyB8fCB7fTtcbiAgfVxuXG4gIHNldCBhcGlEYXRhUHJvcHMocHJvcHM6IEFwaURhdGFQcm9wcykge1xuICAgIHRoaXMuX2FwaURhdGFQcm9wcyA9IHByb3BzO1xuICAgIGlmICh0aGlzLl9hcGlEYXRhUHJvcHMgJiYgIXRoaXMuX2FwaURhdGFQcm9wcy5kYXRhJCkge1xuICAgICAgdGhpcy5fYXBpRGF0YVByb3BzLmRhdGEkID0gdGhpcy5kYXRhJDtcbiAgICB9XG4gIH1cblxuICBvblByb3BzSW5pdCgpIHtcbiAgICBzdXBlci5vblByb3BzSW5pdCgpO1xuICAgIHRoaXMuaW5pdExvY2FsRGF0YUl0ZW0oKTtcbiAgfVxuXG4gIHBhcnNlVmFsdWUodmFsdWUpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKHZhbHVlICYmIHRoaXMuJHByb3BzLiRleHQuZGF0YUl0ZW1Qcm9wcyAmJiAhQ29tbW9uc1V0aWxzLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gRGF0YUl0ZW1VdGlscy5nZXRJdGVtVmFsdWUodmFsdWUsIHRoaXMuJHByb3BzLiRleHQuZGF0YUl0ZW1Qcm9wcy52YWx1ZUtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgTG9nVXRpbHMuZXJyb3IodGhpcywgJ+aVsOaNruino+aekOmUmeivrycsIGUpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBmb3JtYXRNb2RlbChtb2RlbCkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoQ29tbW9uc1V0aWxzLmlzSnNvbihtb2RlbCkgJiYgdGhpcy4kcHJvcHMuJGV4dC5kYXRhSXRlbVByb3BzKSB7XG4gICAgICAgIHJldHVybiBEYXRhSXRlbVV0aWxzLmdldEl0ZW1MYWJlbChtb2RlbCwgdGhpcy4kcHJvcHMuJGV4dC5kYXRhSXRlbVByb3BzLmxhYmVsS2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBMb2dVdGlscy5lcnJvcih0aGlzLCAn5pWw5o2u6Kej5p6Q6ZSZ6K+vJywgZSk7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGluaXRMb2NhbERhdGFJdGVtKCkge1xuICAgIGlmICh0aGlzLiRwcm9wcy4kZXh0ICYmIHRoaXMuJHByb3BzLiRleHQuZGF0YUl0ZW1zKSB7XG4gICAgICBsZXQgZGF0YToge31bXSA9IHRoaXMuJHByb3BzLiRleHQuZGF0YUl0ZW1zO1xuICAgICAgZGF0YSA9IGRhdGEubWFwKGQgPT4gZFsnZGF0YSddID0gZCk7XG4gICAgICB0aGlzLmRhdGEkLm5leHQoZGF0YSk7XG4gICAgfVxuICB9XG59XG4iXX0=