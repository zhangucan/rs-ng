/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter } from '@angular/core';
import { Unsubscribe } from './unsubscribe';
/**
 * provide event emit support
 * @abstract
 */
export class BaseDirective extends Unsubscribe {
    constructor() {
        super();
        this.animations = {};
        this.ctx = {
            $from: (/** @type {?} */ (this))
        };
    }
    /**
     * @return {?}
     */
    getContext() {
        /** @type {?} */
        let id;
        if (!this['$id'] && this['$props'] && this['$props'].$id) {
            id = this['$props'].$id;
            this['$id'] = id;
        }
        /** @type {?} */
        const context = {
            $from: (/** @type {?} */ (this))
        };
        return id ? Object.assign({ $id: id }, context) : context;
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    getEventContext(event) {
        return Object.assign({}, this.getContext(), event || {});
    }
    /**
     * @param {?} eventName
     * @param {?} event
     * @return {?}
     */
    emitEvent(eventName, event) {
        /** @type {?} */
        let eventEmitter = this[eventName];
        if (!eventEmitter) {
            eventEmitter = new EventEmitter();
            this[eventName] = eventEmitter;
        }
        if (eventEmitter instanceof EventEmitter) {
            return eventEmitter.emit(this.getEventContext(event));
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    isFirstChanges(changes) {
        return Object.keys(changes).every(prop => changes[prop].isFirstChange());
    }
    /**
     * @param {?=} name
     * @return {?}
     */
    animate(name) {
        return !(this.animations[name] || false);
    }
}
if (false) {
    /** @type {?} */
    BaseDirective.prototype.ctx;
    /** @type {?} */
    BaseDirective.prototype.animations;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvYmFzZXMvZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7Ozs7O0FBSzFDLE1BQU0sT0FBZ0IsYUFBYyxTQUFRLFdBQVc7SUFNckQ7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQUhILGVBQVUsR0FBRyxFQUFFLENBQUM7UUFJckIsSUFBSSxDQUFDLEdBQUcsR0FBRztZQUNULEtBQUssRUFBRSxtQkFBSyxJQUFJLEVBQUE7U0FDakIsQ0FBQztJQUNKLENBQUM7Ozs7SUFFRCxVQUFVOztZQUNKLEVBQUU7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFO1lBQ3hELEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDbEI7O2NBQ0ssT0FBTyxHQUFHO1lBQ2QsS0FBSyxFQUFFLG1CQUFLLElBQUksRUFBQTtTQUNqQjtRQUNELE9BQU8sRUFBRSxDQUFDLENBQUMsaUJBQUUsR0FBRyxFQUFFLEVBQUUsSUFBSyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUM5QyxDQUFDOzs7OztJQUVELGVBQWUsQ0FBQyxLQUFNO1FBQ3BCLHlCQUNLLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFDakIsS0FBSyxJQUFJLEVBQUUsRUFDZDtJQUNKLENBQUM7Ozs7OztJQUVELFNBQVMsQ0FBQyxTQUFTLEVBQUUsS0FBSzs7WUFDcEIsWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDbEMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNqQixZQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztZQUNsQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsWUFBWSxDQUFDO1NBQ2hDO1FBQ0QsSUFBSSxZQUFZLFlBQVksWUFBWSxFQUFFO1lBQ3hDLE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDdkQ7SUFDSCxDQUFDOzs7OztJQUVELGNBQWMsQ0FBQyxPQUFPO1FBQ3BCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUMzRSxDQUFDOzs7OztJQUVELE9BQU8sQ0FBQyxJQUFhO1FBQ25CLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUM7SUFDM0MsQ0FBQztDQUNGOzs7SUFoREMsNEJBQWU7O0lBRWYsbUNBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFdmVudEVtaXR0ZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtVbnN1YnNjcmliZX0gZnJvbSAnLi91bnN1YnNjcmliZSc7XG5cbi8qKlxuICogcHJvdmlkZSBldmVudCBlbWl0IHN1cHBvcnRcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VEaXJlY3RpdmUgZXh0ZW5kcyBVbnN1YnNjcmliZSB7XG5cbiAgcHVibGljIGN0eDoge307XG5cbiAgcHVibGljIGFuaW1hdGlvbnMgPSB7fTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY3R4ID0ge1xuICAgICAgJGZyb206IDxhbnk+dGhpc1xuICAgIH07XG4gIH1cblxuICBnZXRDb250ZXh0KCkge1xuICAgIGxldCBpZDtcbiAgICBpZiAoIXRoaXNbJyRpZCddICYmIHRoaXNbJyRwcm9wcyddICYmIHRoaXNbJyRwcm9wcyddLiRpZCkge1xuICAgICAgaWQgPSB0aGlzWyckcHJvcHMnXS4kaWQ7XG4gICAgICB0aGlzWyckaWQnXSA9IGlkO1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgJGZyb206IDxhbnk+dGhpc1xuICAgIH07XG4gICAgcmV0dXJuIGlkID8geyRpZDogaWQsIC4uLmNvbnRleHR9IDogY29udGV4dDtcbiAgfVxuXG4gIGdldEV2ZW50Q29udGV4dChldmVudD8pOiB7fSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnRoaXMuZ2V0Q29udGV4dCgpLFxuICAgICAgLi4uZXZlbnQgfHwge31cbiAgICB9O1xuICB9XG5cbiAgZW1pdEV2ZW50KGV2ZW50TmFtZSwgZXZlbnQpIHtcbiAgICBsZXQgZXZlbnRFbWl0dGVyID0gdGhpc1tldmVudE5hbWVdO1xuICAgIGlmICghZXZlbnRFbWl0dGVyKSB7XG4gICAgICBldmVudEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICB0aGlzW2V2ZW50TmFtZV0gPSBldmVudEVtaXR0ZXI7XG4gICAgfVxuICAgIGlmIChldmVudEVtaXR0ZXIgaW5zdGFuY2VvZiBFdmVudEVtaXR0ZXIpIHtcbiAgICAgIHJldHVybiBldmVudEVtaXR0ZXIuZW1pdCh0aGlzLmdldEV2ZW50Q29udGV4dChldmVudCkpO1xuICAgIH1cbiAgfVxuXG4gIGlzRmlyc3RDaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoY2hhbmdlcykuZXZlcnkocHJvcCA9PiBjaGFuZ2VzW3Byb3BdLmlzRmlyc3RDaGFuZ2UoKSk7XG4gIH1cblxuICBhbmltYXRlKG5hbWU/OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gISh0aGlzLmFuaW1hdGlvbnNbbmFtZV0gfHwgZmFsc2UpO1xuICB9XG59XG4iXX0=