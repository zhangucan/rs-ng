/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChildren, Input, QueryList, TemplateRef } from '@angular/core';
import { CommonsUtils } from '@er/utils';
import { TypedTemplateDirective } from '../directives/typed-template/directive';
import { BaseDirective } from './directive';
/**
 * provide template & dynamic query support
 * @abstract
 */
export class BaseComponent extends BaseDirective {
    constructor() {
        super(...arguments);
        this.templates = {};
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.typedTemplates && this.typedTemplates.length > 0) {
            this.typedTemplates.forEach((item) => {
                if (item.type) {
                    CommonsUtils.set(this.templates, item.type, item.template);
                }
                else {
                    this.templates['_'] = item.template;
                }
            });
        }
    }
    /**
     * @param {?} outputs
     * @param {?} eventName
     * @param {?} defaultHandler
     * @param {?} event
     * @return {?}
     */
    eventHandler(outputs, eventName, defaultHandler, event) {
        if (outputs && outputs[eventName]) {
            return outputs[eventName].call(this, event);
        }
        else {
            return defaultHandler(event);
        }
    }
    /**
     * @param {?=} name
     * @param {...?} defaultTpls
     * @return {?}
     */
    template(name, ...defaultTpls) {
        if (!name) {
            name = '_';
        }
        if (this.templates[name]) {
            return this.templates[name];
        }
        else if (defaultTpls.length > 0) {
            /** @type {?} */
            const tpls = CommonsUtils.filter(defaultTpls, defaultTpl => !!defaultTpl);
            if (tpls.length > 0) {
                return tpls[0];
            }
        }
        return undefined;
    }
    /**
     * @template C
     * @param {?} id
     * @return {?}
     */
    getComponentBySelectorId(id) {
        if (this.selectors) {
            /** @type {?} */
            const matched = this.selectors.toArray().filter(comp => comp.id === id);
            if (matched.length === 1) {
                return matched[0].hostComponent;
            }
        }
        return undefined;
    }
    /**
     * @param {?} name
     * @param {...?} defaultTpls
     * @return {?}
     */
    hasTemplate(name, ...defaultTpls) {
        return this.template(name, ...defaultTpls) !== undefined;
    }
    /**
     * @param {?} templates
     * @return {?}
     */
    hasChildren(templates) {
        return CommonsUtils.isJson(templates);
    }
    // empty hooks for dyna bind
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this['__ngAfterViewInit'] = true;
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this['__ngOnInit'] = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
BaseComponent.propDecorators = {
    customerTpl: [{ type: Input }],
    typedTemplates: [{ type: ContentChildren, args: [TypedTemplateDirective,] }]
};
if (false) {
    /** @type {?} */
    BaseComponent.prototype.customerTpl;
    /** @type {?} */
    BaseComponent.prototype.typedTemplates;
    /** @type {?} */
    BaseComponent.prototype.selectors;
    /** @type {?} */
    BaseComponent.prototype.templateNames;
    /** @type {?} */
    BaseComponent.prototype.templates;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvYmFzZXMvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsZUFBZSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQWlCLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM1RixPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRXZDLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHdDQUF3QyxDQUFDO0FBQzlFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxhQUFhLENBQUM7Ozs7O0FBSzFDLE1BQU0sT0FBZ0IsYUFBYyxTQUFRLGFBQWE7SUFBekQ7O1FBVUUsY0FBUyxHQUE4QyxFQUFFLENBQUM7SUFpRjVELENBQUM7Ozs7SUEvRUMsa0JBQWtCO1FBQ2hCLElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDbkMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO29CQUNiLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDNUQ7cUJBQU07b0JBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO2lCQUNyQztZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7Ozs7OztJQUVELFlBQVksQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxLQUFLO1FBQ3BELElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNqQyxPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzdDO2FBQU07WUFDTCxPQUFPLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM5QjtJQUNILENBQUM7Ozs7OztJQUVELFFBQVEsQ0FBQyxJQUFhLEVBQUUsR0FBRyxXQUErQjtRQUN4RCxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsSUFBSSxHQUFHLEdBQUcsQ0FBQztTQUNaO1FBQ0QsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3hCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3QjthQUFNLElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7O2tCQUMzQixJQUFJLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO1lBQ3pFLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ25CLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2hCO1NBQ0Y7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDOzs7Ozs7SUFFRCx3QkFBd0IsQ0FBSSxFQUFPO1FBQ2pDLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTs7a0JBQ1osT0FBTyxHQUF3QixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDO1lBQzVGLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3hCLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQzthQUNqQztTQUNGO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQzs7Ozs7O0lBRUQsV0FBVyxDQUFDLElBQVksRUFBRSxHQUFHLFdBQStCO1FBQzFELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxXQUFXLENBQUMsS0FBSyxTQUFTLENBQUM7SUFDM0QsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsU0FBUztRQUNuQixPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7Ozs7SUFLRCxxQkFBcUI7SUFDckIsQ0FBQzs7OztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDbkMsQ0FBQzs7OztJQUVELGtCQUFrQjtJQUNsQixDQUFDOzs7O0lBRUQsU0FBUztJQUNULENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQztJQUM1QixDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFzQjtJQUNsQyxDQUFDOzs7O0lBRUQsV0FBVztJQUNYLENBQUM7OzswQkF2RkEsS0FBSzs2QkFFTCxlQUFlLFNBQUMsc0JBQXNCOzs7O0lBRnZDLG9DQUF1Qzs7SUFFdkMsdUNBQTJGOztJQUUzRixrQ0FBd0M7O0lBRXhDLHNDQUFrQjs7SUFFbEIsa0NBQTBEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb250ZW50Q2hpbGRyZW4sIElucHV0LCBRdWVyeUxpc3QsIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtTZWxlY3RvckRpcmVjdGl2ZX0gZnJvbSAnLi4vZGlyZWN0aXZlcy9zZWxlY3Rvci9kaXJlY3RpdmUnO1xuaW1wb3J0IHtUeXBlZFRlbXBsYXRlRGlyZWN0aXZlfSBmcm9tICcuLi9kaXJlY3RpdmVzL3R5cGVkLXRlbXBsYXRlL2RpcmVjdGl2ZSc7XG5pbXBvcnQge0Jhc2VEaXJlY3RpdmV9IGZyb20gJy4vZGlyZWN0aXZlJztcblxuLyoqXG4gKiBwcm92aWRlIHRlbXBsYXRlICYgZHluYW1pYyBxdWVyeSBzdXBwb3J0XG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlQ29tcG9uZW50IGV4dGVuZHMgQmFzZURpcmVjdGl2ZSB7XG5cbiAgQElucHV0KCkgY3VzdG9tZXJUcGw6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgQENvbnRlbnRDaGlsZHJlbihUeXBlZFRlbXBsYXRlRGlyZWN0aXZlKSB0eXBlZFRlbXBsYXRlczogUXVlcnlMaXN0PFR5cGVkVGVtcGxhdGVEaXJlY3RpdmU+O1xuXG4gIHNlbGVjdG9yczogUXVlcnlMaXN0PFNlbGVjdG9yRGlyZWN0aXZlPjtcblxuICB0ZW1wbGF0ZU5hbWVzOiB7fTtcblxuICB0ZW1wbGF0ZXM6IHsgW3R5cGU6IHN0cmluZ106IFRlbXBsYXRlUmVmPGFueT4gfCB7fSB9ID0ge307XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnR5cGVkVGVtcGxhdGVzICYmIHRoaXMudHlwZWRUZW1wbGF0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy50eXBlZFRlbXBsYXRlcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpdGVtLnR5cGUpIHtcbiAgICAgICAgICBDb21tb25zVXRpbHMuc2V0KHRoaXMudGVtcGxhdGVzLCBpdGVtLnR5cGUsIGl0ZW0udGVtcGxhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudGVtcGxhdGVzWydfJ10gPSBpdGVtLnRlbXBsYXRlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBldmVudEhhbmRsZXIob3V0cHV0cywgZXZlbnROYW1lLCBkZWZhdWx0SGFuZGxlciwgZXZlbnQpIHtcbiAgICBpZiAob3V0cHV0cyAmJiBvdXRwdXRzW2V2ZW50TmFtZV0pIHtcbiAgICAgIHJldHVybiBvdXRwdXRzW2V2ZW50TmFtZV0uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkZWZhdWx0SGFuZGxlcihldmVudCk7XG4gICAgfVxuICB9XG5cbiAgdGVtcGxhdGUobmFtZT86IHN0cmluZywgLi4uZGVmYXVsdFRwbHM6IFRlbXBsYXRlUmVmPGFueT5bXSk6IFRlbXBsYXRlUmVmPGFueT4gfCB7fSB7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICBuYW1lID0gJ18nO1xuICAgIH1cbiAgICBpZiAodGhpcy50ZW1wbGF0ZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybiB0aGlzLnRlbXBsYXRlc1tuYW1lXTtcbiAgICB9IGVsc2UgaWYgKGRlZmF1bHRUcGxzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHRwbHMgPSBDb21tb25zVXRpbHMuZmlsdGVyKGRlZmF1bHRUcGxzLCBkZWZhdWx0VHBsID0+ICEhZGVmYXVsdFRwbCk7XG4gICAgICBpZiAodHBscy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB0cGxzWzBdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZ2V0Q29tcG9uZW50QnlTZWxlY3RvcklkPEM+KGlkOiBhbnkpOiBDIHtcbiAgICBpZiAodGhpcy5zZWxlY3RvcnMpIHtcbiAgICAgIGNvbnN0IG1hdGNoZWQ6IFNlbGVjdG9yRGlyZWN0aXZlW10gPSB0aGlzLnNlbGVjdG9ycy50b0FycmF5KCkuZmlsdGVyKGNvbXAgPT4gY29tcC5pZCA9PT0gaWQpO1xuICAgICAgaWYgKG1hdGNoZWQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVkWzBdLmhvc3RDb21wb25lbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBoYXNUZW1wbGF0ZShuYW1lOiBzdHJpbmcsIC4uLmRlZmF1bHRUcGxzOiBUZW1wbGF0ZVJlZjxhbnk+W10pOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50ZW1wbGF0ZShuYW1lLCAuLi5kZWZhdWx0VHBscykgIT09IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGhhc0NoaWxkcmVuKHRlbXBsYXRlcykge1xuICAgIHJldHVybiBDb21tb25zVXRpbHMuaXNKc29uKHRlbXBsYXRlcyk7XG4gIH1cblxuXG4gIC8vIGVtcHR5IGhvb2tzIGZvciBkeW5hIGJpbmRcblxuICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKSB7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpc1snX19uZ0FmdGVyVmlld0luaXQnXSA9IHRydWU7XG4gIH1cblxuICBuZ0FmdGVyVmlld0NoZWNrZWQoKSB7XG4gIH1cblxuICBuZ0RvQ2hlY2soKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzWydfX25nT25Jbml0J10gPSB0cnVlO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gIH1cblxufVxuIl19