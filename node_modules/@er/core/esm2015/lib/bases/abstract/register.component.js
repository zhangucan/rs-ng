/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FormBuilder, FormControl } from '@angular/forms';
import { ApiServerType } from '@er/types';
import { NgValidators } from '@er/validate';
import { DiUtils } from '../../utils/di/index';
import { NgAsyncValidator } from '../../validators/async';
import { AuthBaseComponent } from './auth.component';
export class AbstractRegisterComponent extends AuthBaseComponent {
    constructor() {
        super(...arguments);
        this.checkExists = false;
        this.inFocus = false;
        this.errorMessage = {
            duplicated: '该用户名已经被注册'
        };
    }
    /**
     * @return {?}
     */
    get isUserNameValidate() {
        return !this.inFocus && this.form.get(this.userToken).valid;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.form = DiUtils.get(FormBuilder).group({
            [this.userToken]: new FormControl('', {
                validators: NgValidators.required,
                asyncValidators: NgAsyncValidator(this.userExistsApiOptions(), 'duplicated'),
                updateOn: 'blur'
            }),
            [this.password]: ['', [NgValidators.required, NgValidators.minLength(6)]],
            rePassword: ['', [NgValidators.required, NgValidators.minLength(6), NgValidators.equalTo(this.password)]]
        });
    }
    /**
     * @return {?}
     */
    userExistsApiOptions() {
        return {
            requestOptions: {
                serverType: ApiServerType.ER
            },
            apiEntry: 'user/exists',
            payload: (val) => {
                return { userName: val };
            }
        };
    }
}
if (false) {
    /** @type {?} */
    AbstractRegisterComponent.prototype.checkExists;
    /** @type {?} */
    AbstractRegisterComponent.prototype.inFocus;
    /** @type {?} */
    AbstractRegisterComponent.prototype.errorMessage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvYmFzZXMvYWJzdHJhY3QvcmVnaXN0ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUMsV0FBVyxFQUFFLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3hELE9BQU8sRUFBZSxhQUFhLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdEQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUMxQyxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDN0MsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDeEQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFFbkQsTUFBTSxPQUFPLHlCQUEwQixTQUFRLGlCQUFpQjtJQUFoRTs7UUFFRSxnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUVwQixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBRWhCLGlCQUFZLEdBQUc7WUFDYixVQUFVLEVBQUUsV0FBVztTQUN4QixDQUFDO0lBNkJKLENBQUM7Ozs7SUEzQkMsSUFBSSxrQkFBa0I7UUFDcEIsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUM5RCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBYyxXQUFXLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDdEQsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxXQUFXLENBQUMsRUFBRSxFQUFFO2dCQUNwQyxVQUFVLEVBQUUsWUFBWSxDQUFDLFFBQVE7Z0JBQ2pDLGVBQWUsRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxZQUFZLENBQUM7Z0JBQzVFLFFBQVEsRUFBRSxNQUFNO2FBQ2pCLENBQUM7WUFDRixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pFLFVBQVUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQzFHLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxvQkFBb0I7UUFDbEIsT0FBTztZQUNMLGNBQWMsRUFBRTtnQkFDZCxVQUFVLEVBQUUsYUFBYSxDQUFDLEVBQUU7YUFDN0I7WUFDRCxRQUFRLEVBQUUsYUFBYTtZQUN2QixPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDZixPQUFPLEVBQUMsUUFBUSxFQUFFLEdBQUcsRUFBQyxDQUFDO1lBQ3pCLENBQUM7U0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGOzs7SUFuQ0MsZ0RBQW9COztJQUVwQiw0Q0FBZ0I7O0lBRWhCLGlEQUVFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtGb3JtQnVpbGRlciwgRm9ybUNvbnRyb2x9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7QXBpRGF0YVByb3BzLCBBcGlTZXJ2ZXJUeXBlfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtOZ1ZhbGlkYXRvcnN9IGZyb20gJ0Blci92YWxpZGF0ZSc7XG5pbXBvcnQge0RpVXRpbHN9IGZyb20gJy4uLy4uL3V0aWxzL2RpL2luZGV4JztcbmltcG9ydCB7TmdBc3luY1ZhbGlkYXRvcn0gZnJvbSAnLi4vLi4vdmFsaWRhdG9ycy9hc3luYyc7XG5pbXBvcnQge0F1dGhCYXNlQ29tcG9uZW50fSBmcm9tICcuL2F1dGguY29tcG9uZW50JztcblxuZXhwb3J0IGNsYXNzIEFic3RyYWN0UmVnaXN0ZXJDb21wb25lbnQgZXh0ZW5kcyBBdXRoQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgY2hlY2tFeGlzdHMgPSBmYWxzZTtcblxuICBpbkZvY3VzID0gZmFsc2U7XG5cbiAgZXJyb3JNZXNzYWdlID0ge1xuICAgIGR1cGxpY2F0ZWQ6ICfor6XnlKjmiLflkI3lt7Lnu4/ooqvms6jlhownXG4gIH07XG5cbiAgZ2V0IGlzVXNlck5hbWVWYWxpZGF0ZSgpIHtcbiAgICByZXR1cm4gIXRoaXMuaW5Gb2N1cyAmJiB0aGlzLmZvcm0uZ2V0KHRoaXMudXNlclRva2VuKS52YWxpZDtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuZm9ybSA9IERpVXRpbHMuZ2V0PEZvcm1CdWlsZGVyPihGb3JtQnVpbGRlcikuZ3JvdXAoe1xuICAgICAgW3RoaXMudXNlclRva2VuXTogbmV3IEZvcm1Db250cm9sKCcnLCB7XG4gICAgICAgIHZhbGlkYXRvcnM6IE5nVmFsaWRhdG9ycy5yZXF1aXJlZCxcbiAgICAgICAgYXN5bmNWYWxpZGF0b3JzOiBOZ0FzeW5jVmFsaWRhdG9yKHRoaXMudXNlckV4aXN0c0FwaU9wdGlvbnMoKSwgJ2R1cGxpY2F0ZWQnKSxcbiAgICAgICAgdXBkYXRlT246ICdibHVyJ1xuICAgICAgfSksXG4gICAgICBbdGhpcy5wYXNzd29yZF06IFsnJywgW05nVmFsaWRhdG9ycy5yZXF1aXJlZCwgTmdWYWxpZGF0b3JzLm1pbkxlbmd0aCg2KV1dLFxuICAgICAgcmVQYXNzd29yZDogWycnLCBbTmdWYWxpZGF0b3JzLnJlcXVpcmVkLCBOZ1ZhbGlkYXRvcnMubWluTGVuZ3RoKDYpLCBOZ1ZhbGlkYXRvcnMuZXF1YWxUbyh0aGlzLnBhc3N3b3JkKV1dXG4gICAgfSk7XG4gIH1cblxuICB1c2VyRXhpc3RzQXBpT3B0aW9ucygpOiBBcGlEYXRhUHJvcHMge1xuICAgIHJldHVybiB7XG4gICAgICByZXF1ZXN0T3B0aW9uczoge1xuICAgICAgICBzZXJ2ZXJUeXBlOiBBcGlTZXJ2ZXJUeXBlLkVSXG4gICAgICB9LFxuICAgICAgYXBpRW50cnk6ICd1c2VyL2V4aXN0cycsXG4gICAgICBwYXlsb2FkOiAodmFsKSA9PiB7XG4gICAgICAgIHJldHVybiB7dXNlck5hbWU6IHZhbH07XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuIl19