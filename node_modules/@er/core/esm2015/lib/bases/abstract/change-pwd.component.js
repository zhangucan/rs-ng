/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FormBuilder, Validators } from '@angular/forms';
import { ConfigUtils, DateUtils } from '@er/utils';
import { NgValidators } from '@er/validate';
import { AuthUtils } from '../../utils/auth/index';
import { DiUtils } from '../../utils/di/index';
import { RouteUtils } from '../../utils/nav/index';
import { AuthBaseComponent } from './auth.component';
export class AbstractChangePwdComponent extends AuthBaseComponent {
    /**
     * @return {?}
     */
    ngOnInit() {
        this.form = DiUtils.get(FormBuilder).group({
            [this.oldPasswordKey]: ['', Validators.required],
            [this.newPasswordKey]: ['', [NgValidators.required, NgValidators.minLength(6)]],
            reNewPassword: ['', [NgValidators.required, NgValidators.minLength(6), NgValidators.equalTo(this.newPasswordKey)]]
        });
    }
    /**
     * @return {?}
     */
    changePwd() {
        this.error = undefined;
        /** @type {?} */
        const data = this.form.value;
        delete data['reNewPassword'];
        data['userPwdSetDate'] = DateUtils.getFormattedDateTime();
        AuthUtils.changePwd(this.getSubmitData(this.form.value))
            .subscribe(response => {
            if (response.success === true) {
                RouteUtils.nav(ConfigUtils.getConfig().auth.changePwdSuccessRouter);
            }
            else {
                this.error = response.message || '密码修改失败';
            }
        });
    }
}
if (false) {
    /** @type {?} */
    AbstractChangePwdComponent.prototype.oldPasswordKey;
    /** @type {?} */
    AbstractChangePwdComponent.prototype.newPasswordKey;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbmdlLXB3ZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9iYXNlcy9hYnN0cmFjdC9jaGFuZ2UtcHdkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RCxPQUFPLEVBQUMsV0FBVyxFQUFFLFNBQVMsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNqRCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQzFDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUNqRCxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDN0MsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ2pELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRW5ELE1BQU0sT0FBTywwQkFBMkIsU0FBUSxpQkFBaUI7Ozs7SUFNL0QsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBYyxXQUFXLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDdEQsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQztZQUNoRCxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9FLGFBQWEsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1NBQ25ILENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7O2NBQ2pCLElBQUksR0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUs7UUFDaEMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsU0FBUyxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDMUQsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDckQsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3BCLElBQUksUUFBUSxDQUFDLE9BQU8sS0FBSyxJQUFJLEVBQUU7Z0JBRTdCLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO2FBQ3JFO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLE9BQU8sSUFBSSxRQUFRLENBQUM7YUFDM0M7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDRjs7O0lBM0JDLG9EQUFzQjs7SUFFdEIsb0RBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtGb3JtQnVpbGRlciwgVmFsaWRhdG9yc30gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtDb25maWdVdGlscywgRGF0ZVV0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtOZ1ZhbGlkYXRvcnN9IGZyb20gJ0Blci92YWxpZGF0ZSc7XG5pbXBvcnQge0F1dGhVdGlsc30gZnJvbSAnLi4vLi4vdXRpbHMvYXV0aC9pbmRleCc7XG5pbXBvcnQge0RpVXRpbHN9IGZyb20gJy4uLy4uL3V0aWxzL2RpL2luZGV4JztcbmltcG9ydCB7Um91dGVVdGlsc30gZnJvbSAnLi4vLi4vdXRpbHMvbmF2L2luZGV4JztcbmltcG9ydCB7QXV0aEJhc2VDb21wb25lbnR9IGZyb20gJy4vYXV0aC5jb21wb25lbnQnO1xuXG5leHBvcnQgY2xhc3MgQWJzdHJhY3RDaGFuZ2VQd2RDb21wb25lbnQgZXh0ZW5kcyBBdXRoQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgcHVibGljIG9sZFBhc3N3b3JkS2V5O1xuXG4gIHB1YmxpYyBuZXdQYXNzd29yZEtleTtcblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmZvcm0gPSBEaVV0aWxzLmdldDxGb3JtQnVpbGRlcj4oRm9ybUJ1aWxkZXIpLmdyb3VwKHtcbiAgICAgIFt0aGlzLm9sZFBhc3N3b3JkS2V5XTogWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgIFt0aGlzLm5ld1Bhc3N3b3JkS2V5XTogWycnLCBbTmdWYWxpZGF0b3JzLnJlcXVpcmVkLCBOZ1ZhbGlkYXRvcnMubWluTGVuZ3RoKDYpXV0sXG4gICAgICByZU5ld1Bhc3N3b3JkOiBbJycsIFtOZ1ZhbGlkYXRvcnMucmVxdWlyZWQsIE5nVmFsaWRhdG9ycy5taW5MZW5ndGgoNiksIE5nVmFsaWRhdG9ycy5lcXVhbFRvKHRoaXMubmV3UGFzc3dvcmRLZXkpXV1cbiAgICB9KTtcbiAgfVxuXG4gIGNoYW5nZVB3ZCgpIHtcbiAgICB0aGlzLmVycm9yID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGRhdGE6IHt9ID0gdGhpcy5mb3JtLnZhbHVlO1xuICAgIGRlbGV0ZSBkYXRhWydyZU5ld1Bhc3N3b3JkJ107XG4gICAgZGF0YVsndXNlclB3ZFNldERhdGUnXSA9IERhdGVVdGlscy5nZXRGb3JtYXR0ZWREYXRlVGltZSgpO1xuICAgIEF1dGhVdGlscy5jaGFuZ2VQd2QodGhpcy5nZXRTdWJtaXREYXRhKHRoaXMuZm9ybS52YWx1ZSkpXG4gICAgICAuc3Vic2NyaWJlKHJlc3BvbnNlID0+IHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MgPT09IHRydWUpIHtcblxuICAgICAgICAgIFJvdXRlVXRpbHMubmF2KENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmF1dGguY2hhbmdlUHdkU3VjY2Vzc1JvdXRlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5lcnJvciA9IHJlc3BvbnNlLm1lc3NhZ2UgfHwgJ+WvhueggeS/ruaUueWksei0pSc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG59XG4iXX0=