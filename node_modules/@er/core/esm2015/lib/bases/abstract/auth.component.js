/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StateNames } from '@er/types';
import { ConfigUtils } from '@er/utils';
import { AuthUtils } from '../../utils/auth';
import { RouteUtils } from '../../utils/nav';
import { BaseComponent } from '../component';
export class AuthBaseComponent extends BaseComponent {
    constructor() {
        super();
        this.userToken = ConfigUtils.getConfig().auth.userTokenKey;
        this.password = ConfigUtils.getConfig().auth.passwordKey;
        this.rememberMe = ConfigUtils.getConfig().auth.rememberMeKey;
        this.appName = ConfigUtils.getConfig().appName;
        this.stateKey = StateNames.auth;
    }
    /**
     * @return {?}
     */
    login() {
        this.error = undefined;
        AuthUtils.login(this.getSubmitData(this.form.value))
            .subscribe(response => {
            if (response.success === false) {
                this.error = response.message;
            }
        });
    }
    /**
     * @return {?}
     */
    register() {
        this.error = undefined;
        /** @type {?} */
        const data = this.form.value;
        delete data['rePassword'];
        AuthUtils.register(this.getSubmitData(this.form.value))
            .subscribe(response => {
            if (response.success === false) {
                this.error = response.message;
            }
            else {
                RouteUtils.nav(ConfigUtils.getConfig().auth.loginSuccessRouter);
            }
        });
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getSubmitData(data) {
        return data;
    }
}
if (false) {
    /** @type {?} */
    AuthBaseComponent.prototype.form;
    /** @type {?} */
    AuthBaseComponent.prototype.error;
    /** @type {?} */
    AuthBaseComponent.prototype.appName;
    /** @type {?} */
    AuthBaseComponent.prototype.stateKey;
    /** @type {?} */
    AuthBaseComponent.prototype.userToken;
    /** @type {?} */
    AuthBaseComponent.prototype.password;
    /** @type {?} */
    AuthBaseComponent.prototype.rememberMe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9iYXNlcy9hYnN0cmFjdC9hdXRoLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNyQyxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3RDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMzQyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUczQyxNQUFNLE9BQU8saUJBQWtCLFNBQVEsYUFBYTtJQWdCbEQ7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDM0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUN6RCxJQUFJLENBQUMsVUFBVSxHQUFHLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQzdELElBQUksQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQztRQUMvQyxJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7SUFDbEMsQ0FBQzs7OztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztRQUN2QixTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNqRCxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDcEIsSUFBSSxRQUFRLENBQUMsT0FBTyxLQUFLLEtBQUssRUFBRTtnQkFDOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDO2FBQy9CO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDOztjQUNqQixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFCLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3BELFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNwQixJQUFJLFFBQVEsQ0FBQyxPQUFPLEtBQUssS0FBSyxFQUFFO2dCQUM5QixJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUM7YUFDL0I7aUJBQU07Z0JBQ0wsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7YUFDakU7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Ozs7O0lBR0QsYUFBYSxDQUFDLElBQUk7UUFDaEIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0Y7OztJQW5EQyxpQ0FBdUI7O0lBRXZCLGtDQUFxQjs7SUFFckIsb0NBQXVCOztJQUV2QixxQ0FBd0I7O0lBRXhCLHNDQUFpQjs7SUFFakIscUNBQWdCOztJQUVoQix1Q0FBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Zvcm1Hcm91cH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtTdGF0ZU5hbWVzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb25maWdVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7QXV0aFV0aWxzfSBmcm9tICcuLi8uLi91dGlscy9hdXRoJztcbmltcG9ydCB7Um91dGVVdGlsc30gZnJvbSAnLi4vLi4vdXRpbHMvbmF2JztcbmltcG9ydCB7QmFzZUNvbXBvbmVudH0gZnJvbSAnLi4vY29tcG9uZW50JztcblxuXG5leHBvcnQgY2xhc3MgQXV0aEJhc2VDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcblxuICBwdWJsaWMgZm9ybTogRm9ybUdyb3VwO1xuXG4gIHB1YmxpYyBlcnJvcjogc3RyaW5nO1xuXG4gIHB1YmxpYyBhcHBOYW1lOiBzdHJpbmc7XG5cbiAgcHVibGljIHN0YXRlS2V5OiBzdHJpbmc7XG5cbiAgcHVibGljIHVzZXJUb2tlbjtcblxuICBwdWJsaWMgcGFzc3dvcmQ7XG5cbiAgcHVibGljIHJlbWVtYmVyTWU7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnVzZXJUb2tlbiA9IENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmF1dGgudXNlclRva2VuS2V5O1xuICAgIHRoaXMucGFzc3dvcmQgPSBDb25maWdVdGlscy5nZXRDb25maWcoKS5hdXRoLnBhc3N3b3JkS2V5O1xuICAgIHRoaXMucmVtZW1iZXJNZSA9IENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmF1dGgucmVtZW1iZXJNZUtleTtcbiAgICB0aGlzLmFwcE5hbWUgPSBDb25maWdVdGlscy5nZXRDb25maWcoKS5hcHBOYW1lO1xuICAgIHRoaXMuc3RhdGVLZXkgPSBTdGF0ZU5hbWVzLmF1dGg7XG4gIH1cblxuICBsb2dpbigpIHtcbiAgICB0aGlzLmVycm9yID0gdW5kZWZpbmVkO1xuICAgIEF1dGhVdGlscy5sb2dpbih0aGlzLmdldFN1Ym1pdERhdGEodGhpcy5mb3JtLnZhbHVlKSlcbiAgICAgIC5zdWJzY3JpYmUocmVzcG9uc2UgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2VzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICB0aGlzLmVycm9yID0gcmVzcG9uc2UubWVzc2FnZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICByZWdpc3RlcigpIHtcbiAgICB0aGlzLmVycm9yID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmZvcm0udmFsdWU7XG4gICAgZGVsZXRlIGRhdGFbJ3JlUGFzc3dvcmQnXTtcbiAgICBBdXRoVXRpbHMucmVnaXN0ZXIodGhpcy5nZXRTdWJtaXREYXRhKHRoaXMuZm9ybS52YWx1ZSkpXG4gICAgICAuc3Vic2NyaWJlKHJlc3BvbnNlID0+IHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgICAgdGhpcy5lcnJvciA9IHJlc3BvbnNlLm1lc3NhZ2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgUm91dGVVdGlscy5uYXYoQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkuYXV0aC5sb2dpblN1Y2Nlc3NSb3V0ZXIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG5cbiAgZ2V0U3VibWl0RGF0YShkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbn1cblxuIl19