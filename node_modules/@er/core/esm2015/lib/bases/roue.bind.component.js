/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonsUtils } from '@er/utils';
import { ComponentUtils } from '../utils/component';
import { LogUtils } from '../utils/log';
import { RouteUtils } from '../utils/nav';
import { BaseComponent } from './component';
export class RouteBindComponent extends BaseComponent {
    /**
     * @return {?}
     */
    ngOnInit() {
        this.$subscriptions = RouteUtils.getActiveRoute().url.subscribe(url => {
            /** @type {?} */
            let activeRoute = RouteUtils.getActiveRoute();
            if (!activeRoute) {
                return;
            }
            /** @type {?} */
            const data = CommonsUtils.copy(activeRoute.snapshot.data);
            /** @type {?} */
            const params = Object.assign({}, activeRoute.snapshot.params || {}, activeRoute.snapshot.queryParams || {});
            while (activeRoute && !activeRoute.snapshot.data['$props']) {
                activeRoute = activeRoute.parent;
            }
            /** @type {?} */
            const routeData = Object.assign({}, activeRoute.snapshot.data, data);
            /** @type {?} */
            let props = CommonsUtils.copy(routeData['$resolvedProps'] || routeData['$props']);
            if (data['$propsKey']) {
                props = CommonsUtils.get(props, data['$propsKey']);
            }
            Object.keys(data).forEach(key => {
                if (CommonsUtils.isFunction(data[key])) {
                    props[key] = ((/** @type {?} */ (data[key])))(props, params, data);
                }
                else if (CommonsUtils.isString(data[key]) && data[key].startsWith(':')) {
                    /** @type {?} */
                    const param = ((/** @type {?} */ (data[key]))).substring(1);
                    if (params[param]) {
                        props[key] = params[param];
                    }
                }
                else if (key !== '$propsKey' && key !== '$propsWrapperKey' && key !== '$props') {
                    props[key] = data[key];
                }
            });
            props['$routeParams'] = params;
            LogUtils.debug(this, '路由数据', routeData);
            props = this.beforeRoutePropsBind(props);
            ComponentUtils.bind(this, props);
            this.afterRoutePropsBind();
        });
    }
    /**
     * @param {?} props
     * @return {?}
     */
    beforeRoutePropsBind(props) {
        return props;
    }
    /**
     * @return {?}
     */
    afterRoutePropsBind() {
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91ZS5iaW5kLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL2Jhc2VzL3JvdWUuYmluZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDdEMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN4QyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBRzFDLE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxhQUFhOzs7O0lBRW5ELFFBQVE7UUFDTixJQUFJLENBQUMsY0FBYyxHQUFHLFVBQVUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFOztnQkFDaEUsV0FBVyxHQUFHLFVBQVUsQ0FBQyxjQUFjLEVBQUU7WUFDN0MsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDaEIsT0FBTzthQUNSOztrQkFDSyxJQUFJLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQzs7a0JBQ25ELE1BQU0scUJBQ1AsV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLElBQUksRUFBRSxFQUNqQyxXQUFXLENBQUMsUUFBUSxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQzFDO1lBQ0QsT0FBTyxXQUFXLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDMUQsV0FBVyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUM7YUFDbEM7O2tCQUNLLFNBQVMscUJBQ1YsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQ3pCLElBQUksQ0FDUjs7Z0JBQ0csS0FBSyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2pGLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUNyQixLQUFLLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7YUFDcEQ7WUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDOUIsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO29CQUN0QyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxtQkFBVSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUEsQ0FBQyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7aUJBQ3pEO3FCQUFNLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFOzswQkFDbEUsS0FBSyxHQUFHLENBQUMsbUJBQVEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFBLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUM5QyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTt3QkFDakIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztxQkFDNUI7aUJBQ0Y7cUJBQU0sSUFBSSxHQUFHLEtBQUssV0FBVyxJQUFJLEdBQUcsS0FBSyxrQkFBa0IsSUFBSSxHQUFHLEtBQUssUUFBUSxFQUFFO29CQUNoRixLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUN4QjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztZQUUvQixRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFeEMsS0FBSyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUV6QyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztZQUVqQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsb0JBQW9CLENBQUMsS0FBSztRQUN4QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7SUFFRCxtQkFBbUI7SUFDbkIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDb21tb25zVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge0NvbXBvbmVudFV0aWxzfSBmcm9tICcuLi91dGlscy9jb21wb25lbnQnO1xuaW1wb3J0IHtMb2dVdGlsc30gZnJvbSAnLi4vdXRpbHMvbG9nJztcbmltcG9ydCB7Um91dGVVdGlsc30gZnJvbSAnLi4vdXRpbHMvbmF2JztcbmltcG9ydCB7QmFzZUNvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnQnO1xuXG5cbmV4cG9ydCBjbGFzcyBSb3V0ZUJpbmRDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLiRzdWJzY3JpcHRpb25zID0gUm91dGVVdGlscy5nZXRBY3RpdmVSb3V0ZSgpLnVybC5zdWJzY3JpYmUodXJsID0+IHtcbiAgICAgIGxldCBhY3RpdmVSb3V0ZSA9IFJvdXRlVXRpbHMuZ2V0QWN0aXZlUm91dGUoKTtcbiAgICAgIGlmICghYWN0aXZlUm91dGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgZGF0YSA9IENvbW1vbnNVdGlscy5jb3B5KGFjdGl2ZVJvdXRlLnNuYXBzaG90LmRhdGEpO1xuICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAuLi5hY3RpdmVSb3V0ZS5zbmFwc2hvdC5wYXJhbXMgfHwge30sXG4gICAgICAgIC4uLmFjdGl2ZVJvdXRlLnNuYXBzaG90LnF1ZXJ5UGFyYW1zIHx8IHt9XG4gICAgICB9O1xuICAgICAgd2hpbGUgKGFjdGl2ZVJvdXRlICYmICFhY3RpdmVSb3V0ZS5zbmFwc2hvdC5kYXRhWyckcHJvcHMnXSkge1xuICAgICAgICBhY3RpdmVSb3V0ZSA9IGFjdGl2ZVJvdXRlLnBhcmVudDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJvdXRlRGF0YSA9IHtcbiAgICAgICAgLi4uYWN0aXZlUm91dGUuc25hcHNob3QuZGF0YSxcbiAgICAgICAgLi4uZGF0YVxuICAgICAgfTtcbiAgICAgIGxldCBwcm9wcyA9IENvbW1vbnNVdGlscy5jb3B5KHJvdXRlRGF0YVsnJHJlc29sdmVkUHJvcHMnXSB8fCByb3V0ZURhdGFbJyRwcm9wcyddKTtcbiAgICAgIGlmIChkYXRhWyckcHJvcHNLZXknXSkge1xuICAgICAgICBwcm9wcyA9IENvbW1vbnNVdGlscy5nZXQocHJvcHMsIGRhdGFbJyRwcm9wc0tleSddKTtcbiAgICAgIH1cbiAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKENvbW1vbnNVdGlscy5pc0Z1bmN0aW9uKGRhdGFba2V5XSkpIHtcbiAgICAgICAgICBwcm9wc1trZXldID0gKDxGdW5jdGlvbj5kYXRhW2tleV0pKHByb3BzLCBwYXJhbXMsIGRhdGEpO1xuICAgICAgICB9IGVsc2UgaWYgKENvbW1vbnNVdGlscy5pc1N0cmluZyhkYXRhW2tleV0pICYmIGRhdGFba2V5XS5zdGFydHNXaXRoKCc6JykpIHtcbiAgICAgICAgICBjb25zdCBwYXJhbSA9ICg8c3RyaW5nPmRhdGFba2V5XSkuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgIGlmIChwYXJhbXNbcGFyYW1dKSB7XG4gICAgICAgICAgICBwcm9wc1trZXldID0gcGFyYW1zW3BhcmFtXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ICE9PSAnJHByb3BzS2V5JyAmJiBrZXkgIT09ICckcHJvcHNXcmFwcGVyS2V5JyAmJiBrZXkgIT09ICckcHJvcHMnKSB7XG4gICAgICAgICAgcHJvcHNba2V5XSA9IGRhdGFba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBwcm9wc1snJHJvdXRlUGFyYW1zJ10gPSBwYXJhbXM7XG5cbiAgICAgIExvZ1V0aWxzLmRlYnVnKHRoaXMsICfot6/nlLHmlbDmja4nLCByb3V0ZURhdGEpO1xuXG4gICAgICBwcm9wcyA9IHRoaXMuYmVmb3JlUm91dGVQcm9wc0JpbmQocHJvcHMpO1xuXG4gICAgICBDb21wb25lbnRVdGlscy5iaW5kKHRoaXMsIHByb3BzKTtcblxuICAgICAgdGhpcy5hZnRlclJvdXRlUHJvcHNCaW5kKCk7XG4gICAgfSk7XG4gIH1cblxuICBiZWZvcmVSb3V0ZVByb3BzQmluZChwcm9wcyk6IHt9IHtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH1cblxuICBhZnRlclJvdXRlUHJvcHNCaW5kKCkge1xuICB9XG59XG4iXX0=