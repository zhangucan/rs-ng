/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject, Subscription } from 'rxjs';
import { BaseClass } from './class';
/**
 * provide auto unsubscribe support
 */
export class Unsubscribe extends BaseClass {
    constructor() {
        super(...arguments);
        this.destroyed$ = new Subject();
        this._$subscriptions = [];
    }
    /**
     * @param {?} subscription
     * @return {?}
     */
    set $subscriptions(subscription) {
        this._$subscriptions.push(subscription);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.stopSubscribe();
        this._$subscriptions
            .filter(sub => sub)
            .map(sub => sub.unsubscribe());
        for (const prop in this) {
            if (this[prop]) {
                /** @type {?} */
                const m = this[prop];
                if (m && m instanceof Subscription) {
                    m.unsubscribe();
                }
            }
        }
    }
    /**
     * @return {?}
     */
    stopSubscribe() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    Unsubscribe.prototype.destroyed$;
    /**
     * @type {?}
     * @protected
     */
    Unsubscribe.prototype._$subscriptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5zdWJzY3JpYmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9iYXNlcy91bnN1YnNjcmliZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFNBQVMsQ0FBQzs7OztBQUtsQyxNQUFNLE9BQU8sV0FBWSxTQUFRLFNBQVM7SUFBMUM7O1FBRVksZUFBVSxHQUFrQixJQUFJLE9BQU8sRUFBUSxDQUFDO1FBRWhELG9CQUFlLEdBQW1CLEVBQUUsQ0FBQztJQTRCakQsQ0FBQzs7Ozs7SUExQkMsSUFBSSxjQUFjLENBQUMsWUFBWTtRQUM3QixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMxQyxDQUFDOzs7O0lBRUQsV0FBVztRQUVULElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUVyQixJQUFJLENBQUMsZUFBZTthQUNqQixNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7YUFDbEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFFakMsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDdkIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7O3NCQUNSLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksWUFBWSxFQUFFO29CQUNsQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7aUJBQ2pCO2FBQ0Y7U0FDRjtJQUNILENBQUM7Ozs7SUFFRCxhQUFhO1FBQ1gsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdCLENBQUM7Q0FDRjs7Ozs7O0lBOUJDLGlDQUEwRDs7Ozs7SUFFMUQsc0NBQStDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtPbkRlc3Ryb3l9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTdWJqZWN0LCBTdWJzY3JpcHRpb259IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtCYXNlQ2xhc3N9IGZyb20gJy4vY2xhc3MnO1xuXG4vKipcbiAqIHByb3ZpZGUgYXV0byB1bnN1YnNjcmliZSBzdXBwb3J0XG4gKi9cbmV4cG9ydCBjbGFzcyBVbnN1YnNjcmliZSBleHRlbmRzIEJhc2VDbGFzcyBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgcHJvdGVjdGVkIGRlc3Ryb3llZCQ6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIHByb3RlY3RlZCBfJHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdID0gW107XG5cbiAgc2V0ICRzdWJzY3JpcHRpb25zKHN1YnNjcmlwdGlvbikge1xuICAgIHRoaXMuXyRzdWJzY3JpcHRpb25zLnB1c2goc3Vic2NyaXB0aW9uKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuXG4gICAgdGhpcy5zdG9wU3Vic2NyaWJlKCk7XG5cbiAgICB0aGlzLl8kc3Vic2NyaXB0aW9uc1xuICAgICAgLmZpbHRlcihzdWIgPT4gc3ViKVxuICAgICAgLm1hcChzdWIgPT4gc3ViLnVuc3Vic2NyaWJlKCkpO1xuXG4gICAgZm9yIChjb25zdCBwcm9wIGluIHRoaXMpIHtcbiAgICAgIGlmICh0aGlzW3Byb3BdKSB7XG4gICAgICAgIGNvbnN0IG0gPSB0aGlzW3Byb3BdO1xuICAgICAgICBpZiAobSAmJiBtIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgbS51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RvcFN1YnNjcmliZSgpIHtcbiAgICB0aGlzLmRlc3Ryb3llZCQubmV4dCgpO1xuICAgIHRoaXMuZGVzdHJveWVkJC5jb21wbGV0ZSgpO1xuICB9XG59XG4iXX0=