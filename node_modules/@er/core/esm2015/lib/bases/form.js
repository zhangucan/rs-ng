/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { CommonsUtils, DialogUtils } from '@er/utils';
import { Observable } from 'rxjs';
import { first } from 'rxjs/operators';
import { ApiUtils } from '../utils/api';
import { BaseComponent } from './component';
/**
 * @abstract
 */
export class BaseFormComponent extends BaseComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        super();
        this.cd = cd;
        this.options = {};
        this.buttonsStyleClass = 'text-center my-5';
        this.submitBtnStyleClass = 'btn btn-success';
        this.resetBtnStyleClass = 'btn btn-danger';
        this.initBtnStyleClass = 'btn btn-alert';
        this.onSubmit = new EventEmitter();
        this.onSubmitted = new EventEmitter();
        this.onModel = new EventEmitter();
        this.onFormValueChanges = new EventEmitter();
        this.form = new FormGroup({});
        this.templateNames = {
            header: 'header',
            buttons: 'buttons',
            footer: 'footer'
        };
        this.runtimeData = {};
        this.hasUpdated = false;
    }
    /**
     * @return {?}
     */
    get model() {
        return this._model;
    }
    /**
     * @param {?} model
     * @return {?}
     */
    set model(model) {
        this._model = CommonsUtils.omitBy(model, CommonsUtils.lodash().isUndefined);
        this.refresh();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.$subscriptions = this.form.valueChanges.subscribe(event => this.onFormValueChanges.emit(event));
    }
    /**
     * @return {?}
     */
    get modelId() {
        return this._modelId;
    }
    /**
     * @param {?} modelId
     * @return {?}
     */
    set modelId(modelId) {
        if (modelId !== this.modelId) {
            this._modelId = modelId;
            if (!modelId || modelId === '') {
                this.resetModel();
            }
            else if (this.apiEntry) {
                ApiUtils.getById(this.apiEntry, modelId, this.getModelOptions)
                    .subscribe(result => {
                    this.model = result;
                    this.form.updateValueAndValidity({ onlySelf: false, emitEvent: true });
                });
            }
        }
    }
    /**
     * @return {?}
     */
    get isFormValid() {
        if (!this.hasUpdated) {
            this.updateControls();
        }
        return this.form.valid;
    }
    /**
     * @return {?}
     */
    get httpTag() {
        return `http${'-' + this.formId || ''}`;
    }
    /**
     * @return {?}
     */
    get formId() {
        return this.$id;
    }
    /**
     * @return {?}
     */
    get submitModel() {
        /** @type {?} */
        let model = Object.assign({}, this.model);
        if (this.submitRootKey) {
            model = this.model[this.submitRootKey];
        }
        if (this.submitExcludeKeys) {
            model = CommonsUtils.removeKeys(model, ...CommonsUtils.getArrayValue(this.submitExcludeKeys));
        }
        Object.keys(model).forEach(key => {
            if (key.startsWith('$_')) {
                delete model[key];
            }
        });
        return model;
    }
    /**
     * @param {?} fieldName
     * @return {?}
     */
    formControl(fieldName) {
        return this.form.controls[fieldName];
    }
    /**
     * @param {?} fieldName
     * @return {?}
     */
    fieldComponent(fieldName) {
        return this.form['components'][fieldName];
    }
    /**
     * @return {?}
     */
    getFormErrorFields() {
        /** @type {?} */
        const errors = [];
        Object.keys(this.form.controls).forEach(key => {
            /** @type {?} */
            const controlErrors = this.form.get(key).errors;
            if (controlErrors != null) {
                Object.keys(controlErrors).forEach(keyError => {
                    errors.push(key); // + ', err value: ', controlErrors[keyError]);
                });
            }
        });
        return errors;
    }
    /**
     * @param {?} model
     * @return {?}
     */
    patchModel(model) {
        this.model = Object.assign({}, this.model || {}, model);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    patchRuntimeData(data) {
        Object.assign(this.runtimeData, data);
    }
    /**
     * @param {?} path
     * @return {?}
     */
    isFieldValid(path) {
        /** @type {?} */
        const field = this.field(path);
        if (field) {
            return field.valid;
        }
        else {
            return undefined;
        }
    }
    /**
     * @param {?} fieldNamePath
     * @return {?}
     */
    isFieldTouched(fieldNamePath) {
        /** @type {?} */
        const field = this.field(fieldNamePath);
        if (field) {
            return field.touched;
        }
        else {
            return undefined;
        }
    }
    /**
     * @param {?=} form
     * @return {?}
     */
    updateControls(form) {
        if (!form) {
            form = this.form;
        }
        Object.keys(form.controls).forEach(field => {
            /** @type {?} */
            const control = form.get(field);
            if (control instanceof FormControl) {
                control.markAsTouched({ onlySelf: true });
                // control.updateValueAndValidity({onlySelf: true});
            }
            else if (control instanceof FormGroup) {
                this.updateControls(control);
            }
        });
        this.hasUpdated = true;
    }
    /**
     * @param {?} path
     * @return {?}
     */
    field(path) {
        return this.form.get(path);
    }
    /**
     * @return {?}
     */
    resetForm() {
        this.form.reset({});
    }
    /**
     * @param {?=} reset
     * @return {?}
     */
    resetModel(reset) {
        if (this.initModel) {
            this.model = CommonsUtils.copy(this.initModel);
        }
        else if (CommonsUtils.isJson(reset)) {
            this.model = Object.assign({}, reset);
        }
        else if (this.options['resetModel']) {
            this.options['resetModel']();
        }
        else {
            this.model = {};
        }
        this.form.reset(this.model, { emitEvent: true });
    }
    /**
     * @return {?}
     */
    setInitModel() {
        this.initModel = CommonsUtils.copy(this.model);
        if (this.options['updateInitialValue']) {
            this.options['updateInitialValue']();
        }
    }
    /**
     * @return {?}
     */
    refresh() {
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    submit() {
        if (!this.isFormValid) {
            DialogUtils.error('操作失败', '请填写完整信息后，再执行本操作！');
            return;
        }
        /** @type {?} */
        let result;
        if (this.beforeSubmit) {
            result = this.beforeSubmit(this.getEventContext());
            if (result instanceof Observable) {
                ((/** @type {?} */ (result)))
                    .pipe(first())
                    .subscribe(data => {
                    this.submitAfterBefore(data);
                });
            }
            else {
                this.submitAfterBefore(result);
            }
        }
        else {
            this.doSubmit();
        }
    }
    /**
     * @param {?=} submitModel
     * @return {?}
     */
    defaultSubmit(submitModel) {
        this.$subscriptions = ApiUtils.save.call(this, this.apiEntry, submitModel || this.submitModel, Object.assign({ tag: this.formId }, this.submitOptions || {}))
            .subscribe(data => {
            if (data.id && data.id !== this.model['id']) {
                this.model['id'] = data.id;
            }
            this.onSubmitted.emit(this.getEventContext({ response: data, model: this.model, submitted: submitModel || this.submitModel }));
            if (this.afterSubmit) {
                /** @type {?} */
                const result = this.afterSubmit(this.getEventContext({ submitModel: submitModel || this.submitModel, id: data.id }));
                if (result instanceof Observable) {
                    ((/** @type {?} */ (result)))
                        .pipe(first())
                        .subscribe(dat => {
                        this.doPostSubmit(dat);
                    });
                }
                else {
                    this.doPostSubmit(result);
                }
            }
            else {
                this.doPostSubmit();
            }
        });
    }
    /**
     * @param {?=} other
     * @return {?}
     */
    getEventContext(other) {
        return (Object.assign({ formlyForm: this, form: (/** @type {?} */ (this.form)), model: this.model, modelId: this.modelId, entry: this.apiEntry, entity: (/** @type {?} */ (this.entity)) }, other || {}));
    }
    /**
     * @private
     * @param {?} result
     * @return {?}
     */
    submitAfterBefore(result) {
        if (result !== false) {
            if (CommonsUtils.isJson(result) && !CommonsUtils.isEmpty(result)) {
                this.doSubmit(result);
            }
            else {
                this.doSubmit();
            }
        }
    }
    /**
     * @private
     * @param {?=} submitModel
     * @return {?}
     */
    doSubmit(submitModel) {
        if (this.onSubmit.observers.length > 0) {
            this.onSubmit.emit(this.getEventContext({ submitModel }));
        }
        else {
            this.defaultSubmit(submitModel);
        }
    }
    /**
     * @private
     * @param {?=} model
     * @return {?}
     */
    doPostSubmit(model) {
        if (model) {
            this.resetModel(model);
        }
        else if (this.resetKeys) {
            /** @type {?} */
            const keys = CommonsUtils.getArrayValue(this.resetKeys);
            keys.forEach(key => delete this.model[key]);
            delete this.model['id'];
            this.form.reset(this.model, { emitEvent: true });
        }
        else if (this.resetAfterSubmit !== false) {
            this.resetModel(this.entity && this.entity.initValue || {});
        }
    }
}
BaseFormComponent.propDecorators = {
    $id: [{ type: Input }],
    entity: [{ type: Input }],
    apiEntry: [{ type: Input }],
    options: [{ type: Input }],
    submitRootKey: [{ type: Input }],
    submitExcludeKeys: [{ type: Input }],
    resetKeys: [{ type: Input }],
    styleClass: [{ type: Input }],
    style: [{ type: Input }],
    formStyleClass: [{ type: Input }],
    formStyle: [{ type: Input }],
    buttonsStyleClass: [{ type: Input }],
    submitBtnStyleClass: [{ type: Input }],
    resetBtnStyleClass: [{ type: Input }],
    initBtnStyleClass: [{ type: Input }],
    header: [{ type: Input }],
    footer: [{ type: Input }],
    buttons: [{ type: Input }],
    getModelOptions: [{ type: Input }],
    submitOptions: [{ type: Input }],
    beforeSubmit: [{ type: Input }],
    afterSubmit: [{ type: Input }],
    valueChanges: [{ type: Input }],
    resetAfterSubmit: [{ type: Input }],
    onSubmit: [{ type: Output }],
    onSubmitted: [{ type: Output }],
    onModel: [{ type: Output }],
    onFormValueChanges: [{ type: Output }],
    model: [{ type: Input }],
    modelId: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    BaseFormComponent.prototype.$id;
    /** @type {?} */
    BaseFormComponent.prototype.entity;
    /** @type {?} */
    BaseFormComponent.prototype.apiEntry;
    /** @type {?} */
    BaseFormComponent.prototype.options;
    /** @type {?} */
    BaseFormComponent.prototype.submitRootKey;
    /** @type {?} */
    BaseFormComponent.prototype.submitExcludeKeys;
    /** @type {?} */
    BaseFormComponent.prototype.resetKeys;
    /** @type {?} */
    BaseFormComponent.prototype.styleClass;
    /** @type {?} */
    BaseFormComponent.prototype.style;
    /** @type {?} */
    BaseFormComponent.prototype.formStyleClass;
    /** @type {?} */
    BaseFormComponent.prototype.formStyle;
    /** @type {?} */
    BaseFormComponent.prototype.buttonsStyleClass;
    /** @type {?} */
    BaseFormComponent.prototype.submitBtnStyleClass;
    /** @type {?} */
    BaseFormComponent.prototype.resetBtnStyleClass;
    /** @type {?} */
    BaseFormComponent.prototype.initBtnStyleClass;
    /** @type {?} */
    BaseFormComponent.prototype.header;
    /** @type {?} */
    BaseFormComponent.prototype.footer;
    /** @type {?} */
    BaseFormComponent.prototype.buttons;
    /** @type {?} */
    BaseFormComponent.prototype.getModelOptions;
    /** @type {?} */
    BaseFormComponent.prototype.submitOptions;
    /** @type {?} */
    BaseFormComponent.prototype.beforeSubmit;
    /** @type {?} */
    BaseFormComponent.prototype.afterSubmit;
    /** @type {?} */
    BaseFormComponent.prototype.valueChanges;
    /** @type {?} */
    BaseFormComponent.prototype.resetAfterSubmit;
    /** @type {?} */
    BaseFormComponent.prototype.onSubmit;
    /** @type {?} */
    BaseFormComponent.prototype.onSubmitted;
    /** @type {?} */
    BaseFormComponent.prototype.onModel;
    /** @type {?} */
    BaseFormComponent.prototype.onFormValueChanges;
    /** @type {?} */
    BaseFormComponent.prototype.form;
    /** @type {?} */
    BaseFormComponent.prototype.templateNames;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.initModel;
    /** @type {?} */
    BaseFormComponent.prototype.runtimeData;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.hasUpdated;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype._model;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype._modelId;
    /**
     * @type {?}
     * @protected
     */
    BaseFormComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL2Jhc2VzL2Zvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBb0IsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFrQixXQUFXLEVBQUUsU0FBUyxFQUFtQixNQUFNLGdCQUFnQixDQUFDO0FBRXpGLE9BQU8sRUFBQyxZQUFZLEVBQUUsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3BELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDdEMsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGFBQWEsQ0FBQzs7OztBQUUxQyxNQUFNLE9BQWdCLGlCQUFrQixTQUFRLGFBQWE7Ozs7SUF3RTNELFlBQXNCLEVBQXFCO1FBQ3pDLEtBQUssRUFBRSxDQUFDO1FBRFksT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFoRWxDLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFnQmIsc0JBQWlCLEdBQVEsa0JBQWtCLENBQUM7UUFFNUMsd0JBQW1CLEdBQVEsaUJBQWlCLENBQUM7UUFFN0MsdUJBQWtCLEdBQVEsZ0JBQWdCLENBQUM7UUFFM0Msc0JBQWlCLEdBQVEsZUFBZSxDQUFDO1FBb0J4QyxhQUFRLEdBQXFCLElBQUksWUFBWSxFQUFFLENBQUM7UUFFaEQsZ0JBQVcsR0FBcUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVuRCxZQUFPLEdBQXFCLElBQUksWUFBWSxFQUFFLENBQUM7UUFFL0MsdUJBQWtCLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFFckUsU0FBSSxHQUFjLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFD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ekQsK0NBQXFFOztJQUVyRSxpQ0FBb0M7O0lBRXBDLDBDQUlFOzs7OztJQUVGLHNDQUFzQjs7SUFFdEIsd0NBQWlCOzs7OztJQUVqQix1Q0FBMkI7Ozs7O0lBTTNCLG1DQUFtQjs7Ozs7SUFZbkIscUNBQXNCOzs7OztJQWhCViwrQkFBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBYnN0cmFjdENvbnRyb2wsIEZvcm1Db250cm9sLCBGb3JtR3JvdXAsIFZhbGlkYXRpb25FcnJvcnN9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7QXBpUmVxdWVzdE9wdGlvbnMsIEJ1dHRvblByb3BzLCBEYXRhRW50aXR5LCBEeW5hQ29udGVudH0gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzLCBEaWFsb2dVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZpcnN0fSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0FwaVV0aWxzfSBmcm9tICcuLi91dGlscy9hcGknO1xuaW1wb3J0IHtCYXNlQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudCc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlRm9ybUNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuXG4gIEBJbnB1dCgpICRpZD86IGFueTtcblxuICBASW5wdXQoKSBlbnRpdHk6IERhdGFFbnRpdHk7XG5cbiAgQElucHV0KCkgYXBpRW50cnk6IHN0cmluZztcblxuICBASW5wdXQoKSBvcHRpb25zID0ge307XG5cbiAgQElucHV0KCkgc3VibWl0Um9vdEtleTogc3RyaW5nO1xuXG4gIEBJbnB1dCgpIHN1Ym1pdEV4Y2x1ZGVLZXlzOiBzdHJpbmcgfCBzdHJpbmdbXTtcblxuICBASW5wdXQoKSByZXNldEtleXM6IHN0cmluZyB8IHN0cmluZ1tdO1xuXG4gIEBJbnB1dCgpIHN0eWxlQ2xhc3M6IGFueTtcblxuICBASW5wdXQoKSBzdHlsZTogYW55O1xuXG4gIEBJbnB1dCgpIGZvcm1TdHlsZUNsYXNzOiBhbnk7XG5cbiAgQElucHV0KCkgZm9ybVN0eWxlOiBhbnk7XG5cbiAgQElucHV0KCkgYnV0dG9uc1N0eWxlQ2xhc3M6IGFueSA9ICd0ZXh0LWNlbnRlciBteS01JztcblxuICBASW5wdXQoKSBzdWJtaXRCdG5TdHlsZUNsYXNzOiBhbnkgPSAnYnRuIGJ0bi1zdWNjZXNzJztcblxuICBASW5wdXQoKSByZXNldEJ0blN0eWxlQ2xhc3M6IGFueSA9ICdidG4gYnRuLWRhbmdlcic7XG5cbiAgQElucHV0KCkgaW5pdEJ0blN0eWxlQ2xhc3M6IGFueSA9ICdidG4gYnRuLWFsZXJ0JztcblxuICBASW5wdXQoKSBoZWFkZXI6IER5bmFDb250ZW50O1xuXG4gIEBJbnB1dCgpIGZvb3RlcjogRHluYUNvbnRlbnQ7XG5cbiAgQElucHV0KCkgYnV0dG9ucz86IEJ1dHRvblByb3BzW107XG5cbiAgQElucHV0KCkgZ2V0TW9kZWxPcHRpb25zOiBBcGlSZXF1ZXN0T3B0aW9ucztcblxuICBASW5wdXQoKSBzdWJtaXRPcHRpb25zOiBBcGlSZXF1ZXN0T3B0aW9ucztcblxuICBASW5wdXQoKSBiZWZvcmVTdWJtaXQ6IChjb250ZXh0KSA9PiBib29sZWFuIHwgT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICBASW5wdXQoKSBhZnRlclN1Ym1pdDogKGNvbnRleHQpID0+IHZvaWQgfCB7fSB8IE9ic2VydmFibGU8YW55PjtcblxuICBASW5wdXQoKSB2YWx1ZUNoYW5nZXM6IChjb250ZXh0KSA9PiB2b2lkO1xuXG4gIEBJbnB1dCgpIHJlc2V0QWZ0ZXJTdWJtaXQ6IGJvb2xlYW47XG5cbiAgQE91dHB1dCgpIG9uU3VibWl0OiBFdmVudEVtaXR0ZXI8e30+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBPdXRwdXQoKSBvblN1Ym1pdHRlZDogRXZlbnRFbWl0dGVyPHt9PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBAT3V0cHV0KCkgb25Nb2RlbDogRXZlbnRFbWl0dGVyPHt9PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBAT3V0cHV0KCkgb25Gb3JtVmFsdWVDaGFuZ2VzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBmb3JtOiBGb3JtR3JvdXAgPSBuZXcgRm9ybUdyb3VwKHt9KTtcblxuICB0ZW1wbGF0ZU5hbWVzID0ge1xuICAgIGhlYWRlcjogJ2hlYWRlcicsXG4gICAgYnV0dG9uczogJ2J1dHRvbnMnLFxuICAgIGZvb3RlcjogJ2Zvb3RlcidcbiAgfTtcblxuICBwcml2YXRlIGluaXRNb2RlbDoge307XG5cbiAgcnVudGltZURhdGEgPSB7fTtcblxuICBwcml2YXRlIGhhc1VwZGF0ZWQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHByaXZhdGUgX21vZGVsOiB7fTtcblxuICBASW5wdXQoKVxuICBnZXQgbW9kZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vZGVsO1xuICB9XG5cbiAgc2V0IG1vZGVsKG1vZGVsKSB7XG4gICAgdGhpcy5fbW9kZWwgPSBDb21tb25zVXRpbHMub21pdEJ5KG1vZGVsLCBDb21tb25zVXRpbHMubG9kYXNoKCkuaXNVbmRlZmluZWQpO1xuICAgIHRoaXMucmVmcmVzaCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfbW9kZWxJZDogYW55O1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHN1cGVyLm5nT25Jbml0KCk7XG4gICAgdGhpcy4kc3Vic2NyaXB0aW9ucyA9IHRoaXMuZm9ybS52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKGV2ZW50ID0+IHRoaXMub25Gb3JtVmFsdWVDaGFuZ2VzLmVtaXQoZXZlbnQpKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIGdldCBtb2RlbElkKCkge1xuICAgIHJldHVybiB0aGlzLl9tb2RlbElkO1xuICB9XG5cbiAgc2V0IG1vZGVsSWQobW9kZWxJZCkge1xuICAgIGlmIChtb2RlbElkICE9PSB0aGlzLm1vZGVsSWQpIHtcbiAgICAgIHRoaXMuX21vZGVsSWQgPSBtb2RlbElkO1xuICAgICAgaWYgKCFtb2RlbElkIHx8IG1vZGVsSWQgPT09ICcnKSB7XG4gICAgICAgIHRoaXMucmVzZXRNb2RlbCgpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmFwaUVudHJ5KSB7XG4gICAgICAgIEFwaVV0aWxzLmdldEJ5SWQodGhpcy5hcGlFbnRyeSwgbW9kZWxJZCwgdGhpcy5nZXRNb2RlbE9wdGlvbnMpXG4gICAgICAgICAgLnN1YnNjcmliZShyZXN1bHQgPT4ge1xuICAgICAgICAgICAgdGhpcy5tb2RlbCA9IHJlc3VsdDtcbiAgICAgICAgICAgIHRoaXMuZm9ybS51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KHtvbmx5U2VsZjogZmFsc2UsIGVtaXRFdmVudDogdHJ1ZX0pO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldCBpc0Zvcm1WYWxpZCgpIHtcbiAgICBpZiAoIXRoaXMuaGFzVXBkYXRlZCkge1xuICAgICAgdGhpcy51cGRhdGVDb250cm9scygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5mb3JtLnZhbGlkO1xuICB9XG5cbiAgZ2V0IGh0dHBUYWcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYGh0dHAkeyctJyArIHRoaXMuZm9ybUlkIHx8ICcnfWA7XG4gIH1cblxuICBnZXQgZm9ybUlkKCkge1xuICAgIHJldHVybiB0aGlzLiRpZDtcbiAgfVxuXG4gIGdldCBzdWJtaXRNb2RlbCgpIHtcbiAgICBsZXQgbW9kZWwgPSB7Li4udGhpcy5tb2RlbH07XG4gICAgaWYgKHRoaXMuc3VibWl0Um9vdEtleSkge1xuICAgICAgbW9kZWwgPSB0aGlzLm1vZGVsW3RoaXMuc3VibWl0Um9vdEtleV07XG4gICAgfVxuICAgIGlmICh0aGlzLnN1Ym1pdEV4Y2x1ZGVLZXlzKSB7XG4gICAgICBtb2RlbCA9IENvbW1vbnNVdGlscy5yZW1vdmVLZXlzKG1vZGVsLCAuLi5Db21tb25zVXRpbHMuZ2V0QXJyYXlWYWx1ZSh0aGlzLnN1Ym1pdEV4Y2x1ZGVLZXlzKSk7XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKG1vZGVsKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJyRfJykpIHtcbiAgICAgICAgZGVsZXRlIG1vZGVsW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1vZGVsO1xuICB9XG5cbiAgZm9ybUNvbnRyb2woZmllbGROYW1lKTogQWJzdHJhY3RDb250cm9sIHtcbiAgICByZXR1cm4gdGhpcy5mb3JtLmNvbnRyb2xzW2ZpZWxkTmFtZV07XG4gIH1cblxuICBmaWVsZENvbXBvbmVudChmaWVsZE5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5mb3JtWydjb21wb25lbnRzJ11bZmllbGROYW1lXTtcbiAgfVxuXG4gIGdldEZvcm1FcnJvckZpZWxkcygpIHtcbiAgICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmZvcm0uY29udHJvbHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IGNvbnRyb2xFcnJvcnM6IFZhbGlkYXRpb25FcnJvcnMgPSB0aGlzLmZvcm0uZ2V0KGtleSkuZXJyb3JzO1xuICAgICAgaWYgKGNvbnRyb2xFcnJvcnMgIT0gbnVsbCkge1xuICAgICAgICBPYmplY3Qua2V5cyhjb250cm9sRXJyb3JzKS5mb3JFYWNoKGtleUVycm9yID0+IHtcbiAgICAgICAgICBlcnJvcnMucHVzaChrZXkpOyAvLyArICcsIGVyciB2YWx1ZTogJywgY29udHJvbEVycm9yc1trZXlFcnJvcl0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZXJyb3JzO1xuICB9XG5cbiAgcGF0Y2hNb2RlbChtb2RlbCkge1xuICAgIHRoaXMubW9kZWwgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm1vZGVsIHx8IHt9LCBtb2RlbCk7XG4gIH1cblxuICBwYXRjaFJ1bnRpbWVEYXRhKGRhdGEpIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMucnVudGltZURhdGEsIGRhdGEpO1xuICB9XG5cbiAgaXNGaWVsZFZhbGlkKHBhdGg6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgY29uc3QgZmllbGQgPSB0aGlzLmZpZWxkKHBhdGgpO1xuICAgIGlmIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLnZhbGlkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGlzRmllbGRUb3VjaGVkKGZpZWxkTmFtZVBhdGg6IHN0cmluZykge1xuICAgIGNvbnN0IGZpZWxkID0gdGhpcy5maWVsZChmaWVsZE5hbWVQYXRoKTtcbiAgICBpZiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC50b3VjaGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUNvbnRyb2xzKGZvcm0/OiBGb3JtR3JvdXApIHtcbiAgICBpZiAoIWZvcm0pIHtcbiAgICAgIGZvcm0gPSB0aGlzLmZvcm07XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKGZvcm0uY29udHJvbHMpLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgY29uc3QgY29udHJvbCA9IGZvcm0uZ2V0KGZpZWxkKTtcbiAgICAgIGlmIChjb250cm9sIGluc3RhbmNlb2YgRm9ybUNvbnRyb2wpIHtcbiAgICAgICAgY29udHJvbC5tYXJrQXNUb3VjaGVkKHtvbmx5U2VsZjogdHJ1ZX0pO1xuICAgICAgICAvLyBjb250cm9sLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoe29ubHlTZWxmOiB0cnVlfSk7XG4gICAgICB9IGVsc2UgaWYgKGNvbnRyb2wgaW5zdGFuY2VvZiBGb3JtR3JvdXApIHtcbiAgICAgICAgdGhpcy51cGRhdGVDb250cm9scyhjb250cm9sKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmhhc1VwZGF0ZWQgPSB0cnVlO1xuICB9XG5cbiAgZmllbGQocGF0aDogc3RyaW5nIHwgc3RyaW5nW10pOiBBYnN0cmFjdENvbnRyb2wge1xuICAgIHJldHVybiB0aGlzLmZvcm0uZ2V0KHBhdGgpO1xuICB9XG5cbiAgcmVzZXRGb3JtKCkge1xuICAgIHRoaXMuZm9ybS5yZXNldCh7fSk7XG4gIH1cblxuICByZXNldE1vZGVsKHJlc2V0Pykge1xuICAgIGlmICh0aGlzLmluaXRNb2RlbCkge1xuICAgICAgdGhpcy5tb2RlbCA9IENvbW1vbnNVdGlscy5jb3B5KHRoaXMuaW5pdE1vZGVsKTtcbiAgICB9IGVsc2UgaWYgKENvbW1vbnNVdGlscy5pc0pzb24ocmVzZXQpKSB7XG4gICAgICB0aGlzLm1vZGVsID0gey4uLnJlc2V0fTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9uc1sncmVzZXRNb2RlbCddKSB7XG4gICAgICB0aGlzLm9wdGlvbnNbJ3Jlc2V0TW9kZWwnXSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1vZGVsID0ge307XG4gICAgfVxuICAgIHRoaXMuZm9ybS5yZXNldCh0aGlzLm1vZGVsLCB7ZW1pdEV2ZW50OiB0cnVlfSk7XG4gIH1cblxuICBzZXRJbml0TW9kZWwoKSB7XG4gICAgdGhpcy5pbml0TW9kZWwgPSBDb21tb25zVXRpbHMuY29weSh0aGlzLm1vZGVsKTtcbiAgICBpZiAodGhpcy5vcHRpb25zWyd1cGRhdGVJbml0aWFsVmFsdWUnXSkge1xuICAgICAgdGhpcy5vcHRpb25zWyd1cGRhdGVJbml0aWFsVmFsdWUnXSgpO1xuICAgIH1cbiAgfVxuXG4gIHJlZnJlc2goKSB7XG4gICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxuICBzdWJtaXQoKSB7XG4gICAgaWYgKCF0aGlzLmlzRm9ybVZhbGlkKSB7XG4gICAgICBEaWFsb2dVdGlscy5lcnJvcign5pON5L2c5aSx6LSlJywgJ+ivt+Whq+WGmeWujOaVtOS/oeaBr+WQju+8jOWGjeaJp+ihjOacrOaTjeS9nO+8gScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0O1xuICAgIGlmICh0aGlzLmJlZm9yZVN1Ym1pdCkge1xuICAgICAgcmVzdWx0ID0gdGhpcy5iZWZvcmVTdWJtaXQodGhpcy5nZXRFdmVudENvbnRleHQoKSk7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgT2JzZXJ2YWJsZSkge1xuICAgICAgICAoPE9ic2VydmFibGU8Ym9vbGVhbj4+cmVzdWx0KVxuICAgICAgICAgIC5waXBlKGZpcnN0KCkpXG4gICAgICAgICAgLnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3VibWl0QWZ0ZXJCZWZvcmUoZGF0YSk7XG4gICAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN1Ym1pdEFmdGVyQmVmb3JlKHJlc3VsdCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9TdWJtaXQoKTtcbiAgICB9XG4gIH1cblxuICBkZWZhdWx0U3VibWl0KHN1Ym1pdE1vZGVsPykge1xuICAgIHRoaXMuJHN1YnNjcmlwdGlvbnMgPSBBcGlVdGlscy5zYXZlLmNhbGwodGhpcywgdGhpcy5hcGlFbnRyeSwgc3VibWl0TW9kZWwgfHwgdGhpcy5zdWJtaXRNb2RlbCwge1xuICAgICAgdGFnOiB0aGlzLmZvcm1JZCxcbiAgICAgIC4uLnRoaXMuc3VibWl0T3B0aW9ucyB8fCB7fVxuICAgIH0pXG4gICAgICAuc3Vic2NyaWJlKGRhdGEgPT4ge1xuICAgICAgICBpZiAoZGF0YS5pZCAmJiBkYXRhLmlkICE9PSB0aGlzLm1vZGVsWydpZCddKSB7XG4gICAgICAgICAgdGhpcy5tb2RlbFsnaWQnXSA9IGRhdGEuaWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vblN1Ym1pdHRlZC5lbWl0KHRoaXMuZ2V0RXZlbnRDb250ZXh0KHtyZXNwb25zZTogZGF0YSwgbW9kZWw6IHRoaXMubW9kZWwsIHN1Ym1pdHRlZDogc3VibWl0TW9kZWwgfHwgdGhpcy5zdWJtaXRNb2RlbH0pKTtcbiAgICAgICAgaWYgKHRoaXMuYWZ0ZXJTdWJtaXQpIHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmFmdGVyU3VibWl0KHRoaXMuZ2V0RXZlbnRDb250ZXh0KHtzdWJtaXRNb2RlbDogc3VibWl0TW9kZWwgfHwgdGhpcy5zdWJtaXRNb2RlbCwgaWQ6IGRhdGEuaWR9KSk7XG4gICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgICAgICg8T2JzZXJ2YWJsZTxhbnk+PnJlc3VsdClcbiAgICAgICAgICAgICAgLnBpcGUoZmlyc3QoKSlcbiAgICAgICAgICAgICAgLnN1YnNjcmliZShkYXQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZG9Qb3N0U3VibWl0KGRhdCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRvUG9zdFN1Ym1pdChyZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmRvUG9zdFN1Ym1pdCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIGdldEV2ZW50Q29udGV4dChvdGhlcj8pIHtcbiAgICByZXR1cm4gKHtcbiAgICAgIGZvcm1seUZvcm06IHRoaXMsXG4gICAgICBmb3JtOiA8Rm9ybUdyb3VwPnRoaXMuZm9ybSxcbiAgICAgIG1vZGVsOiB0aGlzLm1vZGVsLFxuICAgICAgbW9kZWxJZDogdGhpcy5tb2RlbElkLFxuICAgICAgZW50cnk6IHRoaXMuYXBpRW50cnksXG4gICAgICBlbnRpdHk6IDxEYXRhRW50aXR5PnRoaXMuZW50aXR5LFxuICAgICAgLi4ub3RoZXIgfHwge31cbiAgICB9KTtcbiAgfVxuXG5cbiAgcHJpdmF0ZSBzdWJtaXRBZnRlckJlZm9yZShyZXN1bHQpIHtcbiAgICBpZiAocmVzdWx0ICE9PSBmYWxzZSkge1xuICAgICAgaWYgKENvbW1vbnNVdGlscy5pc0pzb24ocmVzdWx0KSAmJiAhQ29tbW9uc1V0aWxzLmlzRW1wdHkocmVzdWx0KSkge1xuICAgICAgICB0aGlzLmRvU3VibWl0KHJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRvU3VibWl0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkb1N1Ym1pdChzdWJtaXRNb2RlbD8pIHtcbiAgICBpZiAodGhpcy5vblN1Ym1pdC5vYnNlcnZlcnMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5vblN1Ym1pdC5lbWl0KHRoaXMuZ2V0RXZlbnRDb250ZXh0KHtzdWJtaXRNb2RlbH0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZWZhdWx0U3VibWl0KHN1Ym1pdE1vZGVsKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGRvUG9zdFN1Ym1pdChtb2RlbD8pIHtcbiAgICBpZiAobW9kZWwpIHtcbiAgICAgIHRoaXMucmVzZXRNb2RlbChtb2RlbCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnJlc2V0S2V5cykge1xuICAgICAgY29uc3Qga2V5cyA9IENvbW1vbnNVdGlscy5nZXRBcnJheVZhbHVlKHRoaXMucmVzZXRLZXlzKTtcbiAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4gZGVsZXRlIHRoaXMubW9kZWxba2V5XSk7XG4gICAgICBkZWxldGUgdGhpcy5tb2RlbFsnaWQnXTtcbiAgICAgIHRoaXMuZm9ybS5yZXNldCh0aGlzLm1vZGVsLCB7ZW1pdEV2ZW50OiB0cnVlfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnJlc2V0QWZ0ZXJTdWJtaXQgIT09IGZhbHNlKSB7XG4gICAgICB0aGlzLnJlc2V0TW9kZWwodGhpcy5lbnRpdHkgJiYgdGhpcy5lbnRpdHkuaW5pdFZhbHVlIHx8IHt9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==