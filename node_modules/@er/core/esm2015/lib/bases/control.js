/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HostBinding, Input } from '@angular/core';
import { NO_OP } from '@er/types';
import { BehaviorSubject } from 'rxjs';
import { BaseComponent } from './component';
export class ControlComponent extends BaseComponent {
    constructor() {
        super(...arguments);
        this.disabled = false;
        this.disabled$ = new BehaviorSubject(false);
        this.onTouched = NO_OP;
        this.onChange = NO_OP;
    }
    /**
     * @return {?}
     */
    get opacity() {
        return this.disabled ? 0.25 : 1;
    }
    /**
     * @return {?}
     */
    get cursor() {
        return this.disabled ? 'not-allowed' : 'default';
    }
    /**
     * @return {?}
     */
    get value() {
        return this.innerValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        if (!value || value !== this.innerValue) {
            /** @type {?} */
            const v = this.parser ? this.parser(value) : value;
            this.innerValue = v;
            this.onChange(v);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.defaultValue) {
            this.innerValue = this.defaultValue;
        }
    }
    /**
     * @return {?}
     */
    updateTouch() {
        this.onTouched();
    }
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        /** @type {?} */
        const v = this.formatter ? this.formatter(model) : model;
        if (v !== this.innerValue) {
            this.innerValue = v;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.disabled$.next(isDisabled);
    }
}
ControlComponent.propDecorators = {
    parser: [{ type: Input }],
    formatter: [{ type: Input }],
    disabled: [{ type: Input }],
    opacity: [{ type: HostBinding, args: ['style.opacity',] }],
    cursor: [{ type: HostBinding, args: ['style.cursor',] }]
};
if (false) {
    /** @type {?} */
    ControlComponent.prototype.parser;
    /** @type {?} */
    ControlComponent.prototype.formatter;
    /** @type {?} */
    ControlComponent.prototype.disabled;
    /** @type {?} */
    ControlComponent.prototype.defaultValue;
    /** @type {?} */
    ControlComponent.prototype.disabled$;
    /** @type {?} */
    ControlComponent.prototype.onTouched;
    /** @type {?} */
    ControlComponent.prototype.onChange;
    /**
     * @type {?}
     * @protected
     */
    ControlComponent.prototype.innerValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL2Jhc2VzL2NvbnRyb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxXQUFXLEVBQUUsS0FBSyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNyQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBRzFDLE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxhQUFhO0lBQW5EOztRQU1XLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFJMUIsY0FBUyxHQUE2QixJQUFJLGVBQWUsQ0FBVSxLQUFLLENBQUMsQ0FBQztRQUUxRSxjQUFTLEdBQWUsS0FBSyxDQUFDO1FBQzlCLGFBQVEsR0FBcUIsS0FBSyxDQUFDO0lBdURyQyxDQUFDOzs7O0lBbkRDLElBQ0ksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7OztJQUVELElBQ0ksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDbkQsQ0FBQzs7OztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDOzs7OztJQUVELElBQUksS0FBSyxDQUFDLEtBQVU7UUFDbEIsSUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLFVBQVUsRUFBRTs7a0JBQ2pDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLO1lBQ2xELElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEI7SUFDSCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDckM7SUFDSCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuQixDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxLQUFVOztjQUNiLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLO1FBQ3hELElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7U0FDckI7SUFDSCxDQUFDOzs7OztJQUVELGdCQUFnQixDQUFDLEVBQU87UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFRCxpQkFBaUIsQ0FBQyxFQUFPO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsVUFBbUI7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7O3FCQWpFQSxLQUFLO3dCQUVMLEtBQUs7dUJBRUwsS0FBSztzQkFXTCxXQUFXLFNBQUMsZUFBZTtxQkFLM0IsV0FBVyxTQUFDLGNBQWM7Ozs7SUFwQjNCLGtDQUFnQzs7SUFFaEMscUNBQW1DOztJQUVuQyxvQ0FBMEI7O0lBRTFCLHdDQUFrQjs7SUFFbEIscUNBQTBFOztJQUUxRSxxQ0FBOEI7O0lBQzlCLG9DQUFtQzs7Ozs7SUFFbkMsc0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtIb3N0QmluZGluZywgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0NvbnRyb2xWYWx1ZUFjY2Vzc29yfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge05PX09QfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtCYXNlQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudCc7XG5cblxuZXhwb3J0IGNsYXNzIENvbnRyb2xDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG5cbiAgQElucHV0KCkgcGFyc2VyOiAodmFsdWUpID0+IGFueTtcblxuICBASW5wdXQoKSBmb3JtYXR0ZXI6IChtb2RlbCkgPT4gYW55O1xuXG4gIEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgZGVmYXVsdFZhbHVlOiBhbnk7XG5cbiAgZGlzYWJsZWQkOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KGZhbHNlKTtcblxuICBvblRvdWNoZWQ6ICgpID0+IHZvaWQgPSBOT19PUDtcbiAgb25DaGFuZ2U6IChfOiBhbnkpID0+IHZvaWQgPSBOT19PUDtcblxuICBwcm90ZWN0ZWQgaW5uZXJWYWx1ZTogYW55O1xuXG4gIEBIb3N0QmluZGluZygnc3R5bGUub3BhY2l0eScpXG4gIGdldCBvcGFjaXR5KCkge1xuICAgIHJldHVybiB0aGlzLmRpc2FibGVkID8gMC4yNSA6IDE7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLmN1cnNvcicpXG4gIGdldCBjdXJzb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzYWJsZWQgPyAnbm90LWFsbG93ZWQnIDogJ2RlZmF1bHQnO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuaW5uZXJWYWx1ZTtcbiAgfVxuXG4gIHNldCB2YWx1ZSh2YWx1ZTogYW55KSB7XG4gICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZSAhPT0gdGhpcy5pbm5lclZhbHVlKSB7XG4gICAgICBjb25zdCB2ID0gdGhpcy5wYXJzZXIgPyB0aGlzLnBhcnNlcih2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgIHRoaXMuaW5uZXJWYWx1ZSA9IHY7XG4gICAgICB0aGlzLm9uQ2hhbmdlKHYpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLmRlZmF1bHRWYWx1ZSkge1xuICAgICAgdGhpcy5pbm5lclZhbHVlID0gdGhpcy5kZWZhdWx0VmFsdWU7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlVG91Y2goKSB7XG4gICAgdGhpcy5vblRvdWNoZWQoKTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUobW9kZWw6IGFueSkge1xuICAgIGNvbnN0IHYgPSB0aGlzLmZvcm1hdHRlciA/IHRoaXMuZm9ybWF0dGVyKG1vZGVsKSA6IG1vZGVsO1xuICAgIGlmICh2ICE9PSB0aGlzLmlubmVyVmFsdWUpIHtcbiAgICAgIHRoaXMuaW5uZXJWYWx1ZSA9IHY7XG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KSB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSkge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgICB0aGlzLmRpc2FibGVkJC5uZXh0KGlzRGlzYWJsZWQpO1xuICB9XG59XG4iXX0=