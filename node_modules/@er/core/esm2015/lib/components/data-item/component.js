/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { CommonsUtils, DataItemUtils } from '@er/utils';
import { BaseComponent } from '../../bases/component';
export class DataItemComponent extends BaseComponent {
    /**
     * @return {?}
     */
    get labels() {
        /** @type {?} */
        const _label = DataItemUtils.getItemLabel(this.item, this.labelKeys);
        if (CommonsUtils.isArray(_label)) {
            return _label;
        }
        else {
            return [_label];
        }
    }
    /**
     * @return {?}
     */
    get labelKeys() {
        /** @type {?} */
        let keys = this.props.dropDownOptionKey || this.props.labelKey;
        if (!keys) {
            if (this.item.hasOwnProperty('label')) {
                keys = 'label';
            }
            else {
                keys = Object.keys(this.item).filter(key => !key.startsWith('_') && key !== 'id');
            }
        }
        return keys;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.props) {
            this.props = {};
        }
    }
}
DataItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'er-data-item',
                template: `
    <ng-container *ngIf="props.template;else default">
      <er-dyna-content [content]="props.template" [context]="item"></er-dyna-content>
    </ng-container>
    <ng-template #default>
      <div class="d-flex data-item" [ngClass]="props.itemStyleClass || 'ui-clearfix'">
        <span class="label mr-3 border-right" *ngFor="let label of labels" [ngClass]="props.labelStyleClass" [innerHTML]="label"></span>
        <span class="pull-right count" *ngIf="props.showCounter && item['value']">
          <span [ngClass]="props.counterStyleClass || 'badge badge-pill badge-info'">{{item['value']}}</span>
        </span>
      </div>
    </ng-template>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["/deep/ .ui-autocomplete-list-item{border-bottom:1px solid #9f9f9f!important;font-size:.8em!important;color:#000!important}/deep/ .ui-autocomplete-list-item:hover{background-color:transparent!important;font-weight:700!important;color:red!important;font-size:1em!important}"]
            }] }
];
DataItemComponent.propDecorators = {
    item: [{ type: Input }],
    props: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DataItemComponent.prototype.item;
    /** @type {?} */
    DataItemComponent.prototype.props;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9kYXRhLWl0ZW0vY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBUyxNQUFNLGVBQWUsQ0FBQztBQUVoRixPQUFPLEVBQUMsWUFBWSxFQUFFLGFBQWEsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUN0RCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFxQnBELE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxhQUFhOzs7O0lBTWxELElBQUksTUFBTTs7Y0FDRixNQUFNLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDcEUsSUFBSSxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2hDLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7YUFBTTtZQUNMLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNqQjtJQUNILENBQUM7Ozs7SUFFRCxJQUFJLFNBQVM7O1lBQ1AsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRO1FBQzlELElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNyQyxJQUFJLEdBQUcsT0FBTyxDQUFDO2FBQ2hCO2lCQUFNO2dCQUNMLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDO2FBQ25GO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztTQUNqQjtJQUNILENBQUM7OztZQWxERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7O0dBWVQ7Z0JBRUQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2FBQ2hEOzs7bUJBSUUsS0FBSztvQkFFTCxLQUFLOzs7O0lBRk4saUNBQWtCOztJQUVsQixrQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtEYXRhSXRlbVByb3BzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb21tb25zVXRpbHMsIERhdGFJdGVtVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge0Jhc2VDb21wb25lbnR9IGZyb20gJy4uLy4uL2Jhc2VzL2NvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2VyLWRhdGEtaXRlbScsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInByb3BzLnRlbXBsYXRlO2Vsc2UgZGVmYXVsdFwiPlxuICAgICAgPGVyLWR5bmEtY29udGVudCBbY29udGVudF09XCJwcm9wcy50ZW1wbGF0ZVwiIFtjb250ZXh0XT1cIml0ZW1cIj48L2VyLWR5bmEtY29udGVudD5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8bmctdGVtcGxhdGUgI2RlZmF1bHQ+XG4gICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGRhdGEtaXRlbVwiIFtuZ0NsYXNzXT1cInByb3BzLml0ZW1TdHlsZUNsYXNzIHx8ICd1aS1jbGVhcmZpeCdcIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbCBtci0zIGJvcmRlci1yaWdodFwiICpuZ0Zvcj1cImxldCBsYWJlbCBvZiBsYWJlbHNcIiBbbmdDbGFzc109XCJwcm9wcy5sYWJlbFN0eWxlQ2xhc3NcIiBbaW5uZXJIVE1MXT1cImxhYmVsXCI+PC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInB1bGwtcmlnaHQgY291bnRcIiAqbmdJZj1cInByb3BzLnNob3dDb3VudGVyICYmIGl0ZW1bJ3ZhbHVlJ11cIj5cbiAgICAgICAgICA8c3BhbiBbbmdDbGFzc109XCJwcm9wcy5jb3VudGVyU3R5bGVDbGFzcyB8fCAnYmFkZ2UgYmFkZ2UtcGlsbCBiYWRnZS1pbmZvJ1wiPnt7aXRlbVsndmFsdWUnXX19PC9zcGFuPlxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L25nLXRlbXBsYXRlPlxuICBgLFxuICBzdHlsZVVybHM6IFsnc3R5bGVzLnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5cbmV4cG9ydCBjbGFzcyBEYXRhSXRlbUNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIGl0ZW06IHt9O1xuXG4gIEBJbnB1dCgpIHByb3BzOiBEYXRhSXRlbVByb3BzO1xuXG4gIGdldCBsYWJlbHMoKSB7XG4gICAgY29uc3QgX2xhYmVsID0gRGF0YUl0ZW1VdGlscy5nZXRJdGVtTGFiZWwodGhpcy5pdGVtLCB0aGlzLmxhYmVsS2V5cyk7XG4gICAgaWYgKENvbW1vbnNVdGlscy5pc0FycmF5KF9sYWJlbCkpIHtcbiAgICAgIHJldHVybiBfbGFiZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbX2xhYmVsXTtcbiAgICB9XG4gIH1cblxuICBnZXQgbGFiZWxLZXlzKCkge1xuICAgIGxldCBrZXlzID0gdGhpcy5wcm9wcy5kcm9wRG93bk9wdGlvbktleSB8fCB0aGlzLnByb3BzLmxhYmVsS2V5O1xuICAgIGlmICgha2V5cykge1xuICAgICAgaWYgKHRoaXMuaXRlbS5oYXNPd25Qcm9wZXJ0eSgnbGFiZWwnKSkge1xuICAgICAgICBrZXlzID0gJ2xhYmVsJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLml0ZW0pLmZpbHRlcihrZXkgPT4gIWtleS5zdGFydHNXaXRoKCdfJykgJiYga2V5ICE9PSAnaWQnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGtleXM7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMpIHtcbiAgICAgIHRoaXMucHJvcHMgPSB7fTtcbiAgICB9XG4gIH1cblxufVxuIl19