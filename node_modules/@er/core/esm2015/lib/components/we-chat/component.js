/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { ConfigUtils } from '@er/utils';
export class WechatQrCodeComponent {
    constructor() {
        this.height = 300;
        this.width = 300;
        this.baseUrl = 'https://open.weixin.qq.com/connect/qrconnect';
    }
    /**
     * @return {?}
     */
    get qrCodeUrl() {
        /** @type {?} */
        const wechat = ConfigUtils.getConfig().wechat;
        /** @type {?} */
        const redirect = encodeURIComponent(wechat.redirect_uri);
        /** @type {?} */
        let url = `${this.baseUrl}?appid=${wechat.appid}&redirect_uri=${redirect}&scope=${wechat.scope}&response_type=code`;
        url += wechat.style ? '&style=' + wechat.style : '';
        url += wechat.self_redirect ? '&self_redirect=' + wechat.self_redirect : '';
        url += wechat.href ? '&href=' + wechat.href : '';
        return url;
    }
}
WechatQrCodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'wechat-qrcode',
                template: `
    <iframe [src]="qrCodeUrl|erSafeHtml:'resource'" [width]="width" [height]="height" scrolling="no" [attr.frameborder]="0"></iframe>
  `
            }] }
];
WechatQrCodeComponent.propDecorators = {
    height: [{ type: Input }],
    width: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    WechatQrCodeComponent.prototype.height;
    /** @type {?} */
    WechatQrCodeComponent.prototype.width;
    /**
     * @type {?}
     * @private
     */
    WechatQrCodeComponent.prototype.baseUrl;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy93ZS1jaGF0L2NvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDL0MsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQVN0QyxNQUFNLE9BQU8scUJBQXFCO0lBUGxDO1FBU1csV0FBTSxHQUFHLEdBQUcsQ0FBQztRQUViLFVBQUssR0FBRyxHQUFHLENBQUM7UUFFYixZQUFPLEdBQUcsOENBQThDLENBQUM7SUFXbkUsQ0FBQzs7OztJQVRDLElBQUksU0FBUzs7Y0FDTCxNQUFNLEdBQUcsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU07O2NBQ3ZDLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDOztZQUNwRCxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxVQUFVLE1BQU0sQ0FBQyxLQUFLLGlCQUFpQixRQUFRLFVBQVUsTUFBTSxDQUFDLEtBQUsscUJBQXFCO1FBQ25ILEdBQUcsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3BELEdBQUcsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDNUUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDakQsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDOzs7WUF2QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6QixRQUFRLEVBQUU7O0dBRVQ7YUFFRjs7O3FCQUdFLEtBQUs7b0JBRUwsS0FBSzs7OztJQUZOLHVDQUFzQjs7SUFFdEIsc0NBQXFCOzs7OztJQUVyQix3Q0FBaUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDb25maWdVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnd2VjaGF0LXFyY29kZScsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGlmcmFtZSBbc3JjXT1cInFyQ29kZVVybHxlclNhZmVIdG1sOidyZXNvdXJjZSdcIiBbd2lkdGhdPVwid2lkdGhcIiBbaGVpZ2h0XT1cImhlaWdodFwiIHNjcm9sbGluZz1cIm5vXCIgW2F0dHIuZnJhbWVib3JkZXJdPVwiMFwiPjwvaWZyYW1lPlxuICBgLFxuICBzdHlsZXM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIFdlY2hhdFFyQ29kZUNvbXBvbmVudCB7XG5cbiAgQElucHV0KCkgaGVpZ2h0ID0gMzAwO1xuXG4gIEBJbnB1dCgpIHdpZHRoID0gMzAwO1xuXG4gIHByaXZhdGUgYmFzZVVybCA9ICdodHRwczovL29wZW4ud2VpeGluLnFxLmNvbS9jb25uZWN0L3FyY29ubmVjdCc7XG5cbiAgZ2V0IHFyQ29kZVVybCgpIHtcbiAgICBjb25zdCB3ZWNoYXQgPSBDb25maWdVdGlscy5nZXRDb25maWcoKS53ZWNoYXQ7XG4gICAgY29uc3QgcmVkaXJlY3QgPSBlbmNvZGVVUklDb21wb25lbnQod2VjaGF0LnJlZGlyZWN0X3VyaSk7XG4gICAgbGV0IHVybCA9IGAke3RoaXMuYmFzZVVybH0/YXBwaWQ9JHt3ZWNoYXQuYXBwaWR9JnJlZGlyZWN0X3VyaT0ke3JlZGlyZWN0fSZzY29wZT0ke3dlY2hhdC5zY29wZX0mcmVzcG9uc2VfdHlwZT1jb2RlYDtcbiAgICB1cmwgKz0gd2VjaGF0LnN0eWxlID8gJyZzdHlsZT0nICsgd2VjaGF0LnN0eWxlIDogJyc7XG4gICAgdXJsICs9IHdlY2hhdC5zZWxmX3JlZGlyZWN0ID8gJyZzZWxmX3JlZGlyZWN0PScgKyB3ZWNoYXQuc2VsZl9yZWRpcmVjdCA6ICcnO1xuICAgIHVybCArPSB3ZWNoYXQuaHJlZiA/ICcmaHJlZj0nICsgd2VjaGF0LmhyZWYgOiAnJztcbiAgICByZXR1cm4gdXJsO1xuICB9XG59XG5cbi8vICdodHRwczovL29wZW4ud2VpeGluLnFxLmNvbS9jb25uZWN0L3FyY29ubmVjdD9hcHBpZD13eGJkYzU2MTBjYzU5YzE2MzEmcmVkaXJlY3RfdXJpPWh0dHBzJTNBJTJGJTJGcGFzc3BvcnQueWhkLmNvbSUyRncyZWNoYXQlMkZjYWxsYmFjay5kbyZyZXNwb25zZV90eXBlPWNvZGUmc2NvcGU9c25zYXBpX2xvZ2luJztcblxuLy8gJ2h0dHBzOi8vb3Blbi53ZWl4aW4ucXEuY29tL2Nvbm5lY3QvcXJjb25uZWN0P2FwcGlkPXd4Y2ZiMWFiMzA2ODdjMDJhZSZyZWRpcmVjdF91cmk9aHR0cCUzQSUyRiUyRnd3dy5oYnNyY2Z3ai5jbiUyRmluZGV4JnJlc3BvbnNlX3R5cGU9Y29kZSZzY29wZT1zbnNhcGlfbG9naW4nO1xuXG4vLyBodHRwczovL29wZW4ud2VpeGluLnFxLmNvbS9jb25uZWN0L3FyY29ubmVjdD9hcHBpZD13eGNmYjFhYjMwNjg3YzAyYWUmcmVkaXJlY3RfdXJpPWh0dHAlM0ElMkYlMkZ3d3cuaGJzcmNmd2ouY24lMkZpbmRleCZzY29wZT1zbnNhcGlfbG9naW4mcmVzcG9uc2VfdHlwZT1jb2RlJnN0eWxlPWJsYWNrJnNlbGZfcmVkaXJlY3Q9dHJ1ZVxuIl19