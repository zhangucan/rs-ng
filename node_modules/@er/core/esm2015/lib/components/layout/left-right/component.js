/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { BaseComponent } from '../../../bases/component';
export class LeftRightContainerComponent extends BaseComponent {
    constructor() {
        super(...arguments);
        this.leftStyleClass = 'col-3';
        this.rightStyleClass = 'col-9';
        this.switchable = true;
        this.onLeftHide = new EventEmitter();
        this.templateNames = {
            left: 'left',
            right: 'right'
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    reLayout(event) {
        this.hideLeft = event;
        this.onLeftHide.emit(event);
    }
}
LeftRightContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'er-left-right',
                template: `
    <div class="d-flex">
      <div *ngIf="!hideLeft" class="w-25 shadow-lg">
        <ng-container *ngTemplateOutlet="template(templateNames.left)"></ng-container>
      </div>
      <div class="flex-grow-1">
        <div *ngIf="switchable">
          <i class="fa fa-2x  text-primary" [title]="hideLeft?'展开左侧内容':'收起左侧内容'"
             [ngClass]="hideLeft?'fa-arrow-circle-right':'fa-arrow-circle-left'"
             (click)="reLayout(!hideLeft)"></i>
        </div>
        <ng-container *ngTemplateOutlet="template(templateNames.right)"></ng-container>
      </div>
    </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
LeftRightContainerComponent.propDecorators = {
    leftStyleClass: [{ type: Input }],
    rightStyleClass: [{ type: Input }],
    hideLeft: [{ type: Input }],
    switchable: [{ type: Input }],
    onLeftHide: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    LeftRightContainerComponent.prototype.leftStyleClass;
    /** @type {?} */
    LeftRightContainerComponent.prototype.rightStyleClass;
    /** @type {?} */
    LeftRightContainerComponent.prototype.hideLeft;
    /** @type {?} */
    LeftRightContainerComponent.prototype.switchable;
    /** @type {?} */
    LeftRightContainerComponent.prototype.onLeftHide;
    /** @type {?} */
    LeftRightContainerComponent.prototype.templateNames;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9sYXlvdXQvbGVmdC1yaWdodC9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBcUJ2RCxNQUFNLE9BQU8sMkJBQTRCLFNBQVEsYUFBYTtJQW5COUQ7O1FBb0JXLG1CQUFjLEdBQUcsT0FBTyxDQUFDO1FBQ3pCLG9CQUFlLEdBQUcsT0FBTyxDQUFDO1FBSTFCLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFFakIsZUFBVSxHQUEwQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRWpFLGtCQUFhLEdBQUc7WUFDZCxJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxPQUFPO1NBQ2YsQ0FBQztJQU1KLENBQUM7Ozs7O0lBSkMsUUFBUSxDQUFDLEtBQUs7UUFDWixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN0QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7WUFyQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7O0dBY1Q7Z0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQ7Ozs2QkFFRSxLQUFLOzhCQUNMLEtBQUs7dUJBRUwsS0FBSzt5QkFFTCxLQUFLO3lCQUVMLE1BQU07Ozs7SUFQUCxxREFBa0M7O0lBQ2xDLHNEQUFtQzs7SUFFbkMsK0NBQTJCOztJQUUzQixpREFBMkI7O0lBRTNCLGlEQUFpRTs7SUFFakUsb0RBR0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Jhc2VDb21wb25lbnR9IGZyb20gJy4uLy4uLy4uL2Jhc2VzL2NvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2VyLWxlZnQtcmlnaHQnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgY2xhc3M9XCJkLWZsZXhcIj5cbiAgICAgIDxkaXYgKm5nSWY9XCIhaGlkZUxlZnRcIiBjbGFzcz1cInctMjUgc2hhZG93LWxnXCI+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0ZW1wbGF0ZSh0ZW1wbGF0ZU5hbWVzLmxlZnQpXCI+PC9uZy1jb250YWluZXI+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LWdyb3ctMVwiPlxuICAgICAgICA8ZGl2ICpuZ0lmPVwic3dpdGNoYWJsZVwiPlxuICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtMnggIHRleHQtcHJpbWFyeVwiIFt0aXRsZV09XCJoaWRlTGVmdD8n5bGV5byA5bem5L6n5YaF5a65Jzon5pS26LW35bem5L6n5YaF5a65J1wiXG4gICAgICAgICAgICAgW25nQ2xhc3NdPVwiaGlkZUxlZnQ/J2ZhLWFycm93LWNpcmNsZS1yaWdodCc6J2ZhLWFycm93LWNpcmNsZS1sZWZ0J1wiXG4gICAgICAgICAgICAgKGNsaWNrKT1cInJlTGF5b3V0KCFoaWRlTGVmdClcIj48L2k+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwidGVtcGxhdGUodGVtcGxhdGVOYW1lcy5yaWdodClcIj48L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgTGVmdFJpZ2h0Q29udGFpbmVyQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIEBJbnB1dCgpIGxlZnRTdHlsZUNsYXNzID0gJ2NvbC0zJztcbiAgQElucHV0KCkgcmlnaHRTdHlsZUNsYXNzID0gJ2NvbC05JztcblxuICBASW5wdXQoKSBoaWRlTGVmdDogYm9vbGVhbjtcblxuICBASW5wdXQoKSBzd2l0Y2hhYmxlID0gdHJ1ZTtcblxuICBAT3V0cHV0KCkgb25MZWZ0SGlkZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHRlbXBsYXRlTmFtZXMgPSB7XG4gICAgbGVmdDogJ2xlZnQnLFxuICAgIHJpZ2h0OiAncmlnaHQnXG4gIH07XG5cbiAgcmVMYXlvdXQoZXZlbnQpIHtcbiAgICB0aGlzLmhpZGVMZWZ0ID0gZXZlbnQ7XG4gICAgdGhpcy5vbkxlZnRIaWRlLmVtaXQoZXZlbnQpO1xuICB9XG59XG4iXX0=