/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';
import { StateNames } from '@er/types';
import { StatesUtils } from '@er/utils';
import { Subject } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { BaseComponent } from '../../bases/component';
export class StateButtonComponent extends BaseComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        super();
        this.cd = cd;
        this.type = 'button';
        this.hint = '';
        this.onClick = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.processIcon = 'fa fa-cog fa-spin';
        this.processing$ = new Subject();
    }
    /**
     * @param {?} processing
     * @return {?}
     */
    set processing(processing) {
        this.processing$.next(processing);
        this.cd.markForCheck(); // used for not dom event modify
    }
    /**
     * @return {?}
     */
    get btnLabel() {
        if (this.processing) {
            return this.stateLabel || this.label;
        }
        else {
            return this.label || '';
        }
    }
    /**
     * @return {?}
     */
    get btnTitle() {
        if (this.processing) {
            return this.stateHint || '执行中...';
        }
        else {
            return this.hint || '';
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.stateKey) {
            this.$subscriptions = StatesUtils.observe(StateNames.http, this.stateKey)
                .pipe(filter(state => !!state), map(state => state['start'])).subscribe(b => this.processing$.next(b));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    click(event) {
        this.onClick.emit(Object.assign({}, event, this.context || {}));
    }
}
StateButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'er-button',
                template: "<button *ngIf=\"!hidden\"\n        [attr.type]=\"type\"\n        [ngClass]=\"styleClass\"\n        [ngStyle]=\"style\"\n        [disabled]=\"disabled || (processing$|async) \"\n        [title]=\"hint\"\n        (click)=\"click($event)\"\n        (focus)=\"emitEvent('onFocus',$event)\"\n        (blur)=\"emitEvent('onBlur',$event)\"\n>\n  <i *ngIf=\"!iconRight && !(processing$|async)\" [ngClass]=\"icon\"></i> {{btnLabel}}\n  <ng-content></ng-content>\n  <i *ngIf=\"iconRight && !(processing$|async)\" [ngClass]=\"icon\"  ></i>\n  <i *ngIf=\"processing$|async\" [ngClass]=\"processIcon\" style=\"margin-left: 5px\"></i>\n</button>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
StateButtonComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
StateButtonComponent.propDecorators = {
    type: [{ type: Input }],
    hint: [{ type: Input }],
    label: [{ type: Input }],
    icon: [{ type: Input }],
    style: [{ type: Input }],
    hidden: [{ type: Input }],
    styleClass: [{ type: Input }],
    disabled: [{ type: Input }],
    iconRight: [{ type: Input }],
    stateKey: [{ type: Input }],
    stateLabel: [{ type: Input }],
    stateHint: [{ type: Input }],
    context: [{ type: Input }],
    onClick: [{ type: Output }],
    onFocus: [{ type: Output }],
    onBlur: [{ type: Output }],
    processing: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    StateButtonComponent.prototype.type;
    /** @type {?} */
    StateButtonComponent.prototype.hint;
    /** @type {?} */
    StateButtonComponent.prototype.label;
    /** @type {?} */
    StateButtonComponent.prototype.icon;
    /** @type {?} */
    StateButtonComponent.prototype.style;
    /** @type {?} */
    StateButtonComponent.prototype.hidden;
    /** @type {?} */
    StateButtonComponent.prototype.styleClass;
    /** @type {?} */
    StateButtonComponent.prototype.disabled;
    /** @type {?} */
    StateButtonComponent.prototype.iconRight;
    /** @type {?} */
    StateButtonComponent.prototype.stateKey;
    /** @type {?} */
    StateButtonComponent.prototype.stateLabel;
    /** @type {?} */
    StateButtonComponent.prototype.stateHint;
    /** @type {?} */
    StateButtonComponent.prototype.context;
    /** @type {?} */
    StateButtonComponent.prototype.onClick;
    /** @type {?} */
    StateButtonComponent.prototype.onFocus;
    /** @type {?} */
    StateButtonComponent.prototype.onBlur;
    /** @type {?} */
    StateButtonComponent.prototype.processIcon;
    /** @type {?} */
    StateButtonComponent.prototype.processing$;
    /**
     * @type {?}
     * @protected
     */
    StateButtonComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9idXR0b24vY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pILE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDckMsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUN0QyxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzdCLE9BQU8sRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBT3BELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxhQUFhOzs7O0lBd0JyRCxZQUFzQixFQUFxQjtRQUN6QyxLQUFLLEVBQUUsQ0FBQztRQURZLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBdEJsQyxTQUFJLEdBQXNCLFFBQVEsQ0FBQztRQUNuQyxTQUFJLEdBQUcsRUFBRSxDQUFDO1FBYVQsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2hELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNoRCxXQUFNLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFFekQsZ0JBQVcsR0FBRyxtQkFBbUIsQ0FBQztRQUVsQyxnQkFBVyxHQUFxQixJQUFJLE9BQU8sRUFBVyxDQUFDO0lBSXZELENBQUM7Ozs7O0lBRUQsSUFDSSxVQUFVLENBQUMsVUFBbUI7UUFDaEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLGdDQUFnQztJQUMxRCxDQUFDOzs7O0lBRUQsSUFBSSxRQUFRO1FBQ1YsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLE9BQU8sSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQ3RDO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQzs7OztJQUVELElBQUksUUFBUTtRQUNWLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixPQUFPLElBQUksQ0FBQyxTQUFTLElBQUksUUFBUSxDQUFDO1NBQ25DO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLGNBQWMsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQztpQkFDdEUsSUFBSSxDQUNILE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDeEIsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQzdCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM5QztJQUNILENBQUM7Ozs7O0lBRUQsS0FBSyxDQUFDLEtBQUs7UUFDVCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksbUJBQ1osS0FBSyxFQUNMLElBQUksQ0FBQyxPQUFPLElBQUksRUFBRSxFQUNyQixDQUFDO0lBQ0wsQ0FBQzs7O1lBdEVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsV0FBVztnQkFDckIscW9CQUF1QjtnQkFDdkIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQ7Ozs7WUFYZ0MsaUJBQWlCOzs7bUJBYy9DLEtBQUs7bUJBQ0wsS0FBSztvQkFDTCxLQUFLO21CQUNMLEtBQUs7b0JBQ0wsS0FBSztxQkFDTCxLQUFLO3lCQUNMLEtBQUs7dUJBQ0wsS0FBSzt3QkFDTCxLQUFLO3VCQUNMLEtBQUs7eUJBQ0wsS0FBSzt3QkFDTCxLQUFLO3NCQUNMLEtBQUs7c0JBRUwsTUFBTTtzQkFDTixNQUFNO3FCQUNOLE1BQU07eUJBVU4sS0FBSzs7OztJQTFCTixvQ0FBNEM7O0lBQzVDLG9DQUFtQjs7SUFDbkIscUNBQXVCOztJQUN2QixvQ0FBc0I7O0lBQ3RCLHFDQUFtQjs7SUFDbkIsc0NBQXlCOztJQUN6QiwwQ0FBNEI7O0lBQzVCLHdDQUEyQjs7SUFDM0IseUNBQTRCOztJQUM1Qix3Q0FBMEI7O0lBQzFCLDBDQUE0Qjs7SUFDNUIseUNBQTJCOztJQUMzQix1Q0FBcUI7O0lBRXJCLHVDQUEwRDs7SUFDMUQsdUNBQTBEOztJQUMxRCxzQ0FBeUQ7O0lBRXpELDJDQUFrQzs7SUFFbEMsMkNBQXVEOzs7OztJQUUzQyxrQ0FBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1N0YXRlTmFtZXN9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge1N0YXRlc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZmlsdGVyLCBtYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7QmFzZUNvbXBvbmVudH0gZnJvbSAnLi4vLi4vYmFzZXMvY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZXItYnV0dG9uJyxcbiAgdGVtcGxhdGVVcmw6ICd0cGwuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFN0YXRlQnV0dG9uQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQElucHV0KCkgdHlwZTogJ2J1dHRvbicgfCAnbGluaycgPSAnYnV0dG9uJztcbiAgQElucHV0KCkgaGludCA9ICcnO1xuICBASW5wdXQoKSBsYWJlbDogc3RyaW5nO1xuICBASW5wdXQoKSBpY29uOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHN0eWxlOiB7fTtcbiAgQElucHV0KCkgaGlkZGVuOiBib29sZWFuO1xuICBASW5wdXQoKSBzdHlsZUNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuO1xuICBASW5wdXQoKSBpY29uUmlnaHQ6IGJvb2xlYW47XG4gIEBJbnB1dCgpIHN0YXRlS2V5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHN0YXRlTGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgc3RhdGVIaW50OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNvbnRleHQ6IHt9O1xuXG4gIEBPdXRwdXQoKSBvbkNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG9uRm9jdXM6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgb25CbHVyOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBwcm9jZXNzSWNvbiA9ICdmYSBmYS1jb2cgZmEtc3Bpbic7XG5cbiAgcHJvY2Vzc2luZyQ6IFN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IHByb2Nlc3NpbmcocHJvY2Vzc2luZzogYm9vbGVhbikge1xuICAgIHRoaXMucHJvY2Vzc2luZyQubmV4dChwcm9jZXNzaW5nKTtcbiAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpOyAvLyB1c2VkIGZvciBub3QgZG9tIGV2ZW50IG1vZGlmeVxuICB9XG5cbiAgZ2V0IGJ0bkxhYmVsKCkge1xuICAgIGlmICh0aGlzLnByb2Nlc3NpbmcpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlTGFiZWwgfHwgdGhpcy5sYWJlbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMubGFiZWwgfHwgJyc7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGJ0blRpdGxlKCkge1xuICAgIGlmICh0aGlzLnByb2Nlc3NpbmcpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlSGludCB8fCAn5omn6KGM5LitLi4uJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaGludCB8fCAnJztcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZUtleSkge1xuICAgICAgdGhpcy4kc3Vic2NyaXB0aW9ucyA9IFN0YXRlc1V0aWxzLm9ic2VydmUoU3RhdGVOYW1lcy5odHRwLCB0aGlzLnN0YXRlS2V5KVxuICAgICAgICAucGlwZShcbiAgICAgICAgICBmaWx0ZXIoc3RhdGUgPT4gISFzdGF0ZSksXG4gICAgICAgICAgbWFwKHN0YXRlID0+IHN0YXRlWydzdGFydCddKVxuICAgICAgICApLnN1YnNjcmliZShiID0+IHRoaXMucHJvY2Vzc2luZyQubmV4dChiKSk7XG4gICAgfVxuICB9XG5cbiAgY2xpY2soZXZlbnQpIHtcbiAgICB0aGlzLm9uQ2xpY2suZW1pdCh7XG4gICAgICAuLi5ldmVudCxcbiAgICAgIC4uLnRoaXMuY29udGV4dCB8fCB7fVxuICAgIH0pO1xuICB9XG59XG4iXX0=