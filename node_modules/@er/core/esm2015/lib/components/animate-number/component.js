/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';
import { CommonsUtils } from '@er/utils';
import { Subject, timer } from 'rxjs';
import { mapTo, scan, startWith, switchMap, takeWhile } from 'rxjs/operators';
import { BaseComponent } from '../../bases/component';
export class AnimateNumberComponent extends BaseComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        super();
        this.cd = cd;
        this.currentNumber = 0;
        this.fontSize = '.8em';
        this.counter$ = new Subject();
        this.$subscriptions = this.counter$
            .pipe(switchMap(endRange => {
            return timer(1000, 200)
                .pipe(mapTo(this.positiveOrNegative(endRange, this.currentNumber)), startWith(this.currentNumber), scan((acc, curr) => acc + curr), takeWhile(this.takeUntil(endRange, this.currentNumber)));
        }))
            .subscribe(val => {
            this.currentNumber = val;
            if (this.currentNumber === this.end) {
                this.fontSize = '1em';
            }
            this.cd.detectChanges();
        });
    }
    /**
     * @return {?}
     */
    get end() {
        return this._end;
    }
    /**
     * @param {?} endRange
     * @return {?}
     */
    set end(endRange) {
        this._end = endRange;
        this.currentNumber = endRange - CommonsUtils.getRandomNumber(20);
        this.counter$.next(endRange);
    }
    /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    positiveOrNegative(endRange, currentNumber) {
        return endRange > currentNumber ? 1 : -1;
    }
    /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    takeUntil(endRange, currentNumber) {
        return endRange > currentNumber
            ? val => val <= endRange
            : val => val >= endRange;
    }
}
AnimateNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'animate-number',
                template: `
    <span [ngStyle]="{'font-size': fontSize, 'font-weight': 'bold'}">
       {{currentNumber}}
    </span>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
AnimateNumberComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
AnimateNumberComponent.propDecorators = {
    end: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AnimateNumberComponent.prototype.currentNumber;
    /** @type {?} */
    AnimateNumberComponent.prototype.fontSize;
    /**
     * @type {?}
     * @private
     */
    AnimateNumberComponent.prototype.counter$;
    /**
     * @type {?}
     * @private
     */
    AnimateNumberComponent.prototype._end;
    /**
     * @type {?}
     * @private
     */
    AnimateNumberComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9hbmltYXRlLW51bWJlci9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxFQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDcEMsT0FBTyxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFZcEQsTUFBTSxPQUFPLHNCQUF1QixTQUFRLGFBQWE7Ozs7SUFRdkQsWUFBb0IsRUFBcUI7UUFDdkMsS0FBSyxFQUFFLENBQUM7UUFEVSxPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQU56QyxrQkFBYSxHQUFHLENBQUMsQ0FBQztRQUVsQixhQUFRLEdBQUcsTUFBTSxDQUFDO1FBRVYsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFJL0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUTthQUNoQyxJQUFJLENBQ0gsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ2pCLE9BQU8sS0FBSyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUM7aUJBQ3BCLElBQUksQ0FDSCxLQUFLLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsRUFDNUQsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFDN0IsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUMvQixTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQ3hELENBQUM7UUFDTixDQUFDLENBQ0YsQ0FDRjthQUNBLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNmLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDO1lBQ3pCLElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUNuQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQzthQUN2QjtZQUNELElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBSUQsSUFBSSxHQUFHO1FBQ0wsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25CLENBQUM7Ozs7O0lBRUQsSUFDSSxHQUFHLENBQUMsUUFBZ0I7UUFDdEIsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDckIsSUFBSSxDQUFDLGFBQWEsR0FBRyxRQUFRLEdBQUcsWUFBWSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQixDQUFDOzs7Ozs7O0lBRU8sa0JBQWtCLENBQUMsUUFBUSxFQUFFLGFBQWE7UUFDaEQsT0FBTyxRQUFRLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7Ozs7Ozs7SUFFTyxTQUFTLENBQUMsUUFBUSxFQUFFLGFBQWE7UUFDdkMsT0FBTyxRQUFRLEdBQUcsYUFBYTtZQUM3QixDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksUUFBUTtZQUN4QixDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksUUFBUSxDQUFDO0lBQzdCLENBQUM7OztZQTlERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsUUFBUSxFQUFFOzs7O0dBSVQ7Z0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQ7Ozs7WUFmZ0MsaUJBQWlCOzs7a0JBc0QvQyxLQUFLOzs7O0lBcENOLCtDQUFrQjs7SUFFbEIsMENBQWtCOzs7OztJQUVsQiwwQ0FBaUM7Ozs7O0lBMEJqQyxzQ0FBcUI7Ozs7O0lBeEJULG9DQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtTdWJqZWN0LCB0aW1lcn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcFRvLCBzY2FuLCBzdGFydFdpdGgsIHN3aXRjaE1hcCwgdGFrZVdoaWxlfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0Jhc2VDb21wb25lbnR9IGZyb20gJy4uLy4uL2Jhc2VzL2NvbXBvbmVudCc7XG5cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYW5pbWF0ZS1udW1iZXInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxzcGFuIFtuZ1N0eWxlXT1cInsnZm9udC1zaXplJzogZm9udFNpemUsICdmb250LXdlaWdodCc6ICdib2xkJ31cIj5cbiAgICAgICB7e2N1cnJlbnROdW1iZXJ9fVxuICAgIDwvc3Bhbj5cbiAgYCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgQW5pbWF0ZU51bWJlckNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuXG4gIGN1cnJlbnROdW1iZXIgPSAwO1xuXG4gIGZvbnRTaXplID0gJy44ZW0nO1xuXG4gIHByaXZhdGUgY291bnRlciQgPSBuZXcgU3ViamVjdCgpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLiRzdWJzY3JpcHRpb25zID0gdGhpcy5jb3VudGVyJFxuICAgICAgLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcChlbmRSYW5nZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGltZXIoMTAwMCwgMjAwKVxuICAgICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXBUbyh0aGlzLnBvc2l0aXZlT3JOZWdhdGl2ZShlbmRSYW5nZSwgdGhpcy5jdXJyZW50TnVtYmVyKSksXG4gICAgICAgICAgICAgICAgc3RhcnRXaXRoKHRoaXMuY3VycmVudE51bWJlciksXG4gICAgICAgICAgICAgICAgc2NhbigoYWNjLCBjdXJyKSA9PiBhY2MgKyBjdXJyKSxcbiAgICAgICAgICAgICAgICB0YWtlV2hpbGUodGhpcy50YWtlVW50aWwoZW5kUmFuZ2UsIHRoaXMuY3VycmVudE51bWJlcikpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKHZhbCA9PiB7XG4gICAgICAgIHRoaXMuY3VycmVudE51bWJlciA9IHZhbDtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudE51bWJlciA9PT0gdGhpcy5lbmQpIHtcbiAgICAgICAgICB0aGlzLmZvbnRTaXplID0gJzFlbSc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX2VuZDogbnVtYmVyO1xuXG4gIGdldCBlbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VuZDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBlbmQoZW5kUmFuZ2U6IG51bWJlcikge1xuICAgIHRoaXMuX2VuZCA9IGVuZFJhbmdlO1xuICAgIHRoaXMuY3VycmVudE51bWJlciA9IGVuZFJhbmdlIC0gQ29tbW9uc1V0aWxzLmdldFJhbmRvbU51bWJlcigyMCk7XG4gICAgdGhpcy5jb3VudGVyJC5uZXh0KGVuZFJhbmdlKTtcbiAgfVxuXG4gIHByaXZhdGUgcG9zaXRpdmVPck5lZ2F0aXZlKGVuZFJhbmdlLCBjdXJyZW50TnVtYmVyKSB7XG4gICAgcmV0dXJuIGVuZFJhbmdlID4gY3VycmVudE51bWJlciA/IDEgOiAtMTtcbiAgfVxuXG4gIHByaXZhdGUgdGFrZVVudGlsKGVuZFJhbmdlLCBjdXJyZW50TnVtYmVyKSB7XG4gICAgcmV0dXJuIGVuZFJhbmdlID4gY3VycmVudE51bWJlclxuICAgICAgPyB2YWwgPT4gdmFsIDw9IGVuZFJhbmdlXG4gICAgICA6IHZhbCA9PiB2YWwgPj0gZW5kUmFuZ2U7XG4gIH1cblxufVxuXG4iXX0=