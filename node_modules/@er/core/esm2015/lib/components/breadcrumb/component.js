/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { StateNames } from '@er/types';
import { CommonsUtils, ConfigUtils, RegUtils, StatesUtils } from '@er/utils';
import { filter, map } from 'rxjs/operators';
import { BaseComponent } from '../../bases/component';
/** @type {?} */
const ROUTE_DATA_BREADCRUMB_KEY = 'breadcrumb';
export class BreadcrumbsComponent extends BaseComponent {
    /**
     * @param {?} router
     * @param {?} route
     */
    constructor(router, route) {
        super();
        this.router = router;
        this.route = route;
        this.outlet = 'primary';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.breadcrumbs$ = StatesUtils.observe(StateNames.nav)
            .pipe(filter(state => state && state.status === 'success'), map(() => this.resolveRoute()));
    }
    /**
     * @param {?} breadcrumb
     * @return {?}
     */
    getRouterLink(breadcrumb) {
        if (breadcrumb.params) {
            return [breadcrumb.url, breadcrumb.params];
        }
        else {
            return [breadcrumb.url];
        }
    }
    /**
     * @private
     * @return {?}
     */
    resolveRoute() {
        /** @type {?} */
        const breadcrumbs = [];
        /** @type {?} */
        let currentRoute = this.route.root;
        /** @type {?} */
        const menus = StatesUtils.getValue(StateNames.rootMenu);
        /** @type {?} */
        let url;
        /** @type {?} */
        const prefix = CommonsUtils.get(ConfigUtils.getConfig(), 'breadcrumb.prefix');
        /** @type {?} */
        const excludes = CommonsUtils.get(ConfigUtils.getConfig(), 'breadcrumb.excludes');
        /** @type {?} */
        let lastLabel = '';
        do {
            /** @type {?} */
            const childrenRoutes = currentRoute.children;
            currentRoute = null;
            childrenRoutes.forEach(route => {
                if (route.outlet === this.outlet) {
                    /** @type {?} */
                    const routeSnapshot = route.snapshot;
                    /** @type {?} */
                    let label = null;
                    if (routeSnapshot.routeConfig && routeSnapshot.routeConfig.data && routeSnapshot.routeConfig.data[ROUTE_DATA_BREADCRUMB_KEY]) {
                        label = routeSnapshot.routeConfig.data[ROUTE_DATA_BREADCRUMB_KEY];
                    }
                    if (!label) {
                        /** @type {?} */
                        const currentUrl = routeSnapshot.url.join('/');
                        if (currentUrl && currentUrl.trim().length > 0) {
                            if (!url) {
                                url = currentUrl;
                            }
                            else {
                                url = url + '/' + currentUrl;
                            }
                        }
                        if (url && !RegUtils.test(url, excludes)) {
                            /** @type {?} */
                            const parts = url.split('/');
                            /** @type {?} */
                            const menu = CommonsUtils.deepFind(menus, { routerLink: url }, { routerLink: `/${url}` }, { name: parts[parts.length - 1] });
                            if (menu && menu.length > 0) {
                                label = ((/** @type {?} */ (menu[0]))).label;
                            }
                        }
                    }
                    if (label && label.length !== 0 && label !== lastLabel) {
                        if (url.length === 0) {
                            routeSnapshot.params = {};
                        }
                        breadcrumbs.push((/** @type {?} */ ({
                            label: label,
                            url: url,
                            params: routeSnapshot.params
                        })));
                    }
                    currentRoute = route;
                    lastLabel = label;
                }
            });
        } while (currentRoute);
        if (prefix) {
            return prefix.concat(breadcrumbs);
        }
        else {
            return breadcrumbs;
        }
    }
}
BreadcrumbsComponent.decorators = [
    { type: Component, args: [{
                selector: 'er-breadcrumbs',
                template: "<ol class=\"breadcrumb\">\n    <ng-container *ngTemplateOutlet=\"templates?.before\"></ng-container>\n    <ng-container *ngFor=\"let breadcrumb of breadcrumbs$|async;let last=last\">\n        <li class=\"breadcrumb-item\" [ngClass]=\"{active: last}\">\n            <a *ngIf=\"!last\" [routerLink]=\"getRouterLink(breadcrumb)\">{{breadcrumb.label}}</a>\n            <span *ngIf=\"last\">{{breadcrumb.label}}</span>\n        </li>\n    </ng-container>\n    <ng-container *ngTemplateOutlet=\"templates?.after\"></ng-container>\n</ol>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
BreadcrumbsComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute }
];
BreadcrumbsComponent.propDecorators = {
    outlet: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    BreadcrumbsComponent.prototype.outlet;
    /** @type {?} */
    BreadcrumbsComponent.prototype.breadcrumbs$;
    /**
     * @type {?}
     * @private
     */
    BreadcrumbsComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    BreadcrumbsComponent.prototype.route;
}
//# sourceMappingURL=data:application/json;base64,