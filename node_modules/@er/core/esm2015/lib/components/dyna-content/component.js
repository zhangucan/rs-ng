/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, TemplateRef } from '@angular/core';
import { ContentType } from '@er/types';
import { CommonsUtils } from '@er/utils';
import { dynamicDirectiveDef } from 'ng-dynamic-component';
import { Observable } from 'rxjs';
import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';
import { BaseComponent } from '../../bases/component';
import { PropsBindDirective } from '../../directives/props-bind/directive';
export class DynaContentComponent extends BaseComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        super();
        this.cd = cd;
        this.CONTENT_TYPE = ContentType;
        this.parsedContent$ = new BehaviorSubject(undefined);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.parse();
    }
    /**
     * @return {?}
     */
    refresh() {
        this.parse();
        this.cd.markForCheck();
    }
    /**
     * @private
     * @return {?}
     */
    parse() {
        if (CommonsUtils.isJson(this.content)) {
            if (this.content['content']) {
                if (this.content['styleClass']) {
                    this.styleClass = this.content['styleClass'];
                }
                if (this.content['style']) {
                    this.style = this.content['style'];
                }
                this.content = this.content['content'];
            }
            if (this.content['data']) {
                this.contentType = ContentType.DATA;
                this.parsedContent = [];
                Object.keys(this.content['data']).forEach(key => {
                    this.parsedContent.push({
                        key,
                        value: CommonsUtils.getText(this.content['data'][key])
                    });
                });
                return;
            }
            else if (this.content['type']) {
                this.contentType = ContentType.COMPONENT;
                this.dynaComponent = (/** @type {?} */ (this.content));
                /** @type {?} */
                let directives = this.dynaComponent.directives;
                /** @type {?} */
                const dynaDirectives = [];
                if (directives) {
                    directives = CommonsUtils.getArrayValue(directives);
                    directives.filter(direct => !!direct.type).forEach(direct => {
                        dynaDirectives.push(dynamicDirectiveDef(direct.type, direct.inputs, direct.outputs));
                    });
                }
                if (this.dynaComponent.props || this.context) {
                    dynaDirectives.push(dynamicDirectiveDef(PropsBindDirective, Object.assign({}, this.dynaComponent.props || {}, this.context || {})));
                }
                this.dynaComponent.directives = dynaDirectives;
                return;
            }
            else {
                this.parsedContent = ((/** @type {?} */ (this.content))).content;
                this.parsedContext = Object.assign({}, ((/** @type {?} */ (this.content))).context || {}, this.context || {});
            }
        }
        else {
            this.parsedContent = this.content;
            this.parsedContext = this.context;
        }
        if (CommonsUtils.isString(this.parsedContent)) {
            if (CommonsUtils.isTemplateStr(this.parsedContent)) {
                this.parsedContent = CommonsUtils.templateStr(this.parsedContent, this.context) || '<span></span>';
                this.contentType = ContentType.TEMPLATE_STR;
            }
            else {
                this.contentType = ContentType.STRING;
            }
        }
        else if (this.parsedContent instanceof TemplateRef) {
            this.contentType = ContentType.TEMPLATE;
        }
        else if (CommonsUtils.isFunction(this.parsedContent)) {
            this.parsedContextFn = this.parsedContent;
            /** @type {?} */
            const rtn = this.parsedContextFn(this.parsedContext);
            if (rtn instanceof Observable) {
                ((/** @type {?} */ (rtn))).subscribe(result => this.parsedContent$.next(CommonsUtils.toString(result)));
            }
            else {
                this.parsedContent$.next(rtn);
            }
            this.contentType = ContentType.FUNCTION;
        }
    }
}
DynaContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'er-dyna-content',
                template: `
    <ng-container [ngSwitch]="contentType">
      <div *ngSwitchCase="CONTENT_TYPE.STRING" [ngClass]="styleClass" [ngStyle]="style" [innerHTML]="parsedContent|erSafeHtml"></div>
      <div *ngSwitchCase="CONTENT_TYPE.DATA" class="d-flex" [ngClass]="styleClass" [ngStyle]="style">
        <div *ngFor="let item of parsedContent" class="d-flex justify-content-center m-3">
          <span class="mr-2 font-weight-bold">{{item.key}}</span>
          <span [innerHTML]="item.value|erSafeHtml"></span>
        </div>
      </div>
      <span *ngSwitchCase="CONTENT_TYPE.TEMPLATE_STR" [innerHTML]="parsedContent" [ngClass]="styleClass"
            [ngStyle]="style"></span>
      <ng-container *ngSwitchCase="CONTENT_TYPE.FUNCTION">
        <ng-container *ngIf="parsedContent$|async as asyncContent">
          <span [innerHTML]="asyncContent" [ngClass]="styleClass" [ngStyle]="style"></span>
        </ng-container>
      </ng-container>
      <ng-container *ngSwitchCase="CONTENT_TYPE.TEMPLATE">
        <ng-container *ngTemplateOutlet="parsedContent;context:parsedContext"></ng-container>
      </ng-container>
      <ng-container *ngSwitchCase="CONTENT_TYPE.COMPONENT">
        <ndc-dynamic [ndcDynamicComponent]="dynaComponent.type"
                     [ndcDynamicDirectives]="dynaComponent.directives"
                     [ndcDynamicAttributes]="dynaComponent.attrs"
        >
        </ndc-dynamic>
      </ng-container>
    </ng-container>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
DynaContentComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
DynaContentComponent.propDecorators = {
    content: [{ type: Input }],
    context: [{ type: Input }],
    styleClass: [{ type: Input }],
    style: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DynaContentComponent.prototype.CONTENT_TYPE;
    /** @type {?} */
    DynaContentComponent.prototype.content;
    /** @type {?} */
    DynaContentComponent.prototype.context;
    /** @type {?} */
    DynaContentComponent.prototype.styleClass;
    /** @type {?} */
    DynaContentComponent.prototype.style;
    /** @type {?} */
    DynaContentComponent.prototype.parsedContent;
    /** @type {?} */
    DynaContentComponent.prototype.parsedContent$;
    /** @type {?} */
    DynaContentComponent.prototype.contentType;
    /** @type {?} */
    DynaContentComponent.prototype.parsedContext;
    /** @type {?} */
    DynaContentComponent.prototype.parsedContextFn;
    /** @type {?} */
    DynaContentComponent.prototype.dynaComponent;
    /** @type {?} */
    DynaContentComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,