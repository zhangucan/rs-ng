/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';
import { CommonsUtils } from '@er/utils';
import { BaseComponent } from '../../bases/component';
import { ComponentUtils } from '../../utils/component';
import { LogUtils } from '../../utils/log';
import { RouteUtils } from '../../utils/nav';
/**
 * 不能多次创建组件，不能用
 */
export class RouteDataPropsBindComponent extends BaseComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        super();
        this.cd = cd;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.$subscriptions = RouteUtils.getActiveRoute().data.subscribe(data => {
            if (!data['$component']) {
                LogUtils.error(this, '没有定义组件类型', data);
                return;
            }
            /** @type {?} */
            let activeRoute = RouteUtils.getActiveRoute();
            /** @type {?} */
            const params = Object.assign({}, activeRoute.snapshot.params || {}, activeRoute.snapshot.queryParams || {});
            while (activeRoute && !activeRoute.snapshot.data['$props']) {
                activeRoute = activeRoute.parent;
            }
            /** @type {?} */
            const routeData = Object.assign({}, activeRoute.snapshot.data, data);
            LogUtils.debug(this, '路由数据', routeData);
            /** @type {?} */
            let props = routeData['$resolvedProps'] || routeData['$props'];
            if (routeData['$propsKey']) {
                props = CommonsUtils.get(props, routeData['$propsKey']);
            }
            /** @type {?} */
            const component = routeData['$component'];
            Object.keys(data).forEach(key => {
                if (CommonsUtils.isFunction(data[key])) {
                    data[key] = ((/** @type {?} */ (data[key])))(props, params, data);
                }
                else if (CommonsUtils.isString(data[key]) && data[key].startsWith(':')) {
                    /** @type {?} */
                    const param = ((/** @type {?} */ (data[key]))).substring(1);
                    if (param === 'USER_ID') {
                    }
                    else if (params[param]) {
                        props[key] = params[param];
                    }
                }
                else if (key !== '$component' && key !== '$propsKey') {
                    props[key] = data[key];
                }
            });
            this.type = component;
            this.props = props;
            this.inputs = props['inputs'] || props || {};
            this.outputs = props['outputs'] || {};
            if (props['hooks']) {
                this.hooks = props['hooks'];
                delete props['hooks'];
            }
            if (!props['inputs'] && !props['outputs']) {
                props['$props'] = CommonsUtils.copy(props);
            }
            this.cd.detectChanges();
        });
    }
    /**
     * @param {?} componentRef
     * @return {?}
     */
    created(componentRef) {
        if (!CommonsUtils.isEmpty(this.hooks)) {
            /** @type {?} */
            const constructor = ComponentUtils.getConstructor(componentRef);
            /** @type {?} */
            const destructor = constructor.prototype['ngOnDestroy'];
            ComponentUtils.bindLifeCycles(componentRef.instance, this.hooks, constructor, destructor);
        }
    }
}
RouteDataPropsBindComponent.decorators = [
    { type: Component, args: [{
                selector: 'er-route-bind',
                template: `
    <ndc-dynamic [ndcDynamicComponent]="type"
                 [ndcDynamicInputs]="inputs"
                 [ndcDynamicOutputs]="outputs"
                 (ndcDynamicCreated)="created($event)"
    >
    </ndc-dynamic>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
RouteDataPropsBindComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
if (false) {
    /** @type {?} */
    RouteDataPropsBindComponent.prototype.props;
    /** @type {?} */
    RouteDataPropsBindComponent.prototype.type;
    /** @type {?} */
    RouteDataPropsBindComponent.prototype.inputs;
    /** @type {?} */
    RouteDataPropsBindComponent.prototype.outputs;
    /** @type {?} */
    RouteDataPropsBindComponent.prototype.hooks;
    /**
     * @type {?}
     * @private
     */
    RouteDataPropsBindComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,