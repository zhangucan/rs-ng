/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { StateNames } from '@er/types';
import { ConfigUtils, StatesUtils } from '@er/utils';
import { throwError } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { LogService } from '../../services/log/service';
import { DateSyncUtils } from '../../utils/date-sync';
export class HttpLogInterceptor {
    /**
     * @param {?} logService
     */
    constructor(logService) {
        this.logService = logService;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        /** @type {?} */
        const started = Date.now();
        return next.handle(req)
            .pipe(tap(event => {
            if (event instanceof HttpResponse) {
                /** @type {?} */
                const elapsed = Date.now() - started;
                StatesUtils.set(StateNames.httpTimer, { elapsed });
                /** @type {?} */
                const dates = event.headers.getAll('Date');
                if (dates && dates.length > 0) {
                    DateSyncUtils.updateLocalDate(dates[0]);
                }
            }
        }), catchError((err) => {
            if (!ConfigUtils.getConfig().isProduction) {
                this.logService.debug(this, '网络请求失败！', req.url, err);
            }
            return throwError(err);
        }));
    }
}
HttpLogInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HttpLogInterceptor.ctorParameters = () => [
    { type: LogService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpLogInterceptor.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcmNlcHRvcnMvbG9nL2ludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQXVELFlBQVksRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3hHLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNyQyxPQUFPLEVBQUMsV0FBVyxFQUFFLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNuRCxPQUFPLEVBQWEsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzVDLE9BQU8sRUFBQyxVQUFVLEVBQUUsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDL0MsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ3RELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUdwRCxNQUFNLE9BQU8sa0JBQWtCOzs7O0lBRTdCLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7SUFDMUMsQ0FBQzs7Ozs7O0lBRUQsU0FBUyxDQUFDLEdBQXFCLEVBQUUsSUFBaUI7O2NBQzFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFO1FBQzFCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDcEIsSUFBSSxDQUNILEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNWLElBQUksS0FBSyxZQUFZLFlBQVksRUFBRTs7c0JBQzNCLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsT0FBTztnQkFDcEMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQzs7c0JBQzNDLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7Z0JBQzFDLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO29CQUM3QixhQUFhLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUN6QzthQUNGO1FBQ0gsQ0FBQyxDQUFDLEVBQ0YsVUFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDakIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxZQUFZLEVBQUU7Z0JBQ3pDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQzthQUN0RDtZQUNELE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDTixDQUFDOzs7WUEzQkYsVUFBVTs7OztZQUhILFVBQVU7Ozs7Ozs7SUFNSix3Q0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0h0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3QsIEh0dHBSZXNwb25zZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7U3RhdGVOYW1lc30gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q29uZmlnVXRpbHMsIFN0YXRlc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCB0aHJvd0Vycm9yfSBmcm9tICdyeGpzJztcbmltcG9ydCB7Y2F0Y2hFcnJvciwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0xvZ1NlcnZpY2V9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2xvZy9zZXJ2aWNlJztcbmltcG9ydCB7RGF0ZVN5bmNVdGlsc30gZnJvbSAnLi4vLi4vdXRpbHMvZGF0ZS1zeW5jJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEh0dHBMb2dJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2dTZXJ2aWNlOiBMb2dTZXJ2aWNlKSB7XG4gIH1cblxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBjb25zdCBzdGFydGVkID0gRGF0ZS5ub3coKTtcbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKVxuICAgICAgLnBpcGUoXG4gICAgICAgIHRhcChldmVudCA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlKSB7XG4gICAgICAgICAgICBjb25zdCBlbGFwc2VkID0gRGF0ZS5ub3coKSAtIHN0YXJ0ZWQ7XG4gICAgICAgICAgICBTdGF0ZXNVdGlscy5zZXQoU3RhdGVOYW1lcy5odHRwVGltZXIsIHtlbGFwc2VkfSk7XG4gICAgICAgICAgICBjb25zdCBkYXRlcyA9IGV2ZW50LmhlYWRlcnMuZ2V0QWxsKCdEYXRlJyk7XG4gICAgICAgICAgICBpZiAoZGF0ZXMgJiYgZGF0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBEYXRlU3luY1V0aWxzLnVwZGF0ZUxvY2FsRGF0ZShkYXRlc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB7XG4gICAgICAgICAgaWYgKCFDb25maWdVdGlscy5nZXRDb25maWcoKS5pc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMubG9nU2VydmljZS5kZWJ1Zyh0aGlzLCAn572R57uc6K+35rGC5aSx6LSl77yBJywgcmVxLnVybCwgZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cbn1cbiJdfQ==