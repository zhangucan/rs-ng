/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ConfigUtils } from '@er/utils';
import { AuthUtils } from '../../utils/auth';
export class HttpJwtAuthInterceptor {
    constructor() {
        this.headerName = ConfigUtils.getConfig().auth.headerName;
        this.authScheme = ConfigUtils.getConfig().auth.authScheme;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        /** @type {?} */
        const currentUser = AuthUtils.getCurrentUser();
        if (currentUser && currentUser.jwtToken) {
            //  if (JwtUtils.isValid(currentUser.jwtToken))
            {
                req = req.clone({
                    setHeaders: {
                        [this.headerName]: `${this.authScheme}${currentUser.jwtToken}`
                    }
                });
            }
        }
        return next.handle(req);
    }
}
HttpJwtAuthInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HttpJwtAuthInterceptor.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpJwtAuthInterceptor.prototype.headerName;
    /**
     * @type {?}
     * @private
     */
    HttpJwtAuthInterceptor.prototype.authScheme;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcmNlcHRvcnMvand0L2ludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXpDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFdEMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRzNDLE1BQU0sT0FBTyxzQkFBc0I7SUFNakM7UUFDRSxJQUFJLENBQUMsVUFBVSxHQUFHLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzFELElBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDNUQsQ0FBQzs7Ozs7O0lBRUQsU0FBUyxDQUFDLEdBQXFCLEVBQUUsSUFBaUI7O2NBQzFDLFdBQVcsR0FBUyxTQUFTLENBQUMsY0FBYyxFQUFFO1FBQ3BELElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxRQUFRLEVBQUU7WUFDdkMsK0NBQStDO1lBQy9DO2dCQUNFLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO29CQUNkLFVBQVUsRUFBRTt3QkFDVixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRTtxQkFDL0Q7aUJBQ0YsQ0FBQyxDQUFDO2FBQ0o7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDOzs7WUF6QkYsVUFBVTs7Ozs7Ozs7O0lBR1QsNENBQW9DOzs7OztJQUVwQyw0Q0FBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0h0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3R9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1VzZXJ9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge0NvbmZpZ1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7QXV0aFV0aWxzfSBmcm9tICcuLi8uLi91dGlscy9hdXRoJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEh0dHBKd3RBdXRoSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgaGVhZGVyTmFtZTogc3RyaW5nO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgYXV0aFNjaGVtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaGVhZGVyTmFtZSA9IENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmF1dGguaGVhZGVyTmFtZTtcbiAgICB0aGlzLmF1dGhTY2hlbWUgPSBDb25maWdVdGlscy5nZXRDb25maWcoKS5hdXRoLmF1dGhTY2hlbWU7XG4gIH1cblxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBjb25zdCBjdXJyZW50VXNlcjogVXNlciA9IEF1dGhVdGlscy5nZXRDdXJyZW50VXNlcigpO1xuICAgIGlmIChjdXJyZW50VXNlciAmJiBjdXJyZW50VXNlci5qd3RUb2tlbikge1xuICAgICAgLy8gIGlmIChKd3RVdGlscy5pc1ZhbGlkKGN1cnJlbnRVc2VyLmp3dFRva2VuKSlcbiAgICAgIHtcbiAgICAgICAgcmVxID0gcmVxLmNsb25lKHtcbiAgICAgICAgICBzZXRIZWFkZXJzOiB7XG4gICAgICAgICAgICBbdGhpcy5oZWFkZXJOYW1lXTogYCR7dGhpcy5hdXRoU2NoZW1lfSR7Y3VycmVudFVzZXIuand0VG9rZW59YFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpO1xuICB9XG59XG4iXX0=