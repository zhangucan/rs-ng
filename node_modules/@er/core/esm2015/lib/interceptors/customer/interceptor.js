/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ConfigUtils } from '@er/utils';
export class HttpAppConfiguredInterceptor {
    constructor() {
        this.customerInterceptors = ConfigUtils.getConfig().httpInterceptors;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        // const cloned = req.clone();
        // if (this.customerInterceptors) {
        //   this.customerInterceptors.forEach((interceptor: HttpInterceptorConfig) => {
        //     if (req && interceptor.request && RegUtils.test(req.url, interceptor.urlPatterns)) {
        //      // cloned = interceptor.request(cloned);
        //     }
        //   });
        // }
        return next.handle(req);
        // .pipe(
        //    map(response => {
        //      if (this.customerInterceptors) {
        //        this.customerInterceptors.forEach((interceptor: HttpInterceptorConfig) => {
        //          if (interceptor.response && RegUtils.test(req.url, interceptor.urlPatterns)) {
        //            interceptor.response(response);
        //          }
        //        });
        //        return response;
        //      } else {
        //        return response;
        //      }
        //    })
        // );
    }
}
HttpAppConfiguredInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HttpAppConfiguredInterceptor.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    HttpAppConfiguredInterceptor.prototype.customerInterceptors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcmNlcHRvcnMvY3VzdG9tZXIvaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUt0QyxNQUFNLE9BQU8sNEJBQTRCO0lBSXZDO1FBQ0UsSUFBSSxDQUFDLG9CQUFvQixHQUFHLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztJQUN2RSxDQUFDOzs7Ozs7SUFFRCxTQUFTLENBQUMsR0FBcUIsRUFBRSxJQUFpQjtRQUNqRCw4QkFBOEI7UUFDN0IsbUNBQW1DO1FBQ25DLGdGQUFnRjtRQUNoRiwyRkFBMkY7UUFDM0YsZ0RBQWdEO1FBQ2hELFFBQVE7UUFDUixRQUFRO1FBQ1IsSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixTQUFTO1FBQ1QsdUJBQXVCO1FBQ3ZCLHdDQUF3QztRQUN4QyxxRkFBcUY7UUFDckYsMEZBQTBGO1FBQzFGLDZDQUE2QztRQUM3QyxhQUFhO1FBQ2IsYUFBYTtRQUNiLDBCQUEwQjtRQUMxQixnQkFBZ0I7UUFDaEIsMEJBQTBCO1FBQzFCLFNBQVM7UUFDVCxRQUFRO1FBQ1IsS0FBSztJQUNULENBQUM7OztZQWpDRixVQUFVOzs7Ozs7SUFHVCw0REFBOEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0h0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3R9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0h0dHBJbnRlcmNlcHRvckNvbmZpZ30gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q29uZmlnVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBIdHRwQXBwQ29uZmlndXJlZEludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcblxuICBjdXN0b21lckludGVyY2VwdG9yczogSHR0cEludGVyY2VwdG9yQ29uZmlnW107XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jdXN0b21lckludGVyY2VwdG9ycyA9IENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmh0dHBJbnRlcmNlcHRvcnM7XG4gIH1cblxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgIC8vIGNvbnN0IGNsb25lZCA9IHJlcS5jbG9uZSgpO1xuICAgIC8vIGlmICh0aGlzLmN1c3RvbWVySW50ZXJjZXB0b3JzKSB7XG4gICAgLy8gICB0aGlzLmN1c3RvbWVySW50ZXJjZXB0b3JzLmZvckVhY2goKGludGVyY2VwdG9yOiBIdHRwSW50ZXJjZXB0b3JDb25maWcpID0+IHtcbiAgICAvLyAgICAgaWYgKHJlcSAmJiBpbnRlcmNlcHRvci5yZXF1ZXN0ICYmIFJlZ1V0aWxzLnRlc3QocmVxLnVybCwgaW50ZXJjZXB0b3IudXJsUGF0dGVybnMpKSB7XG4gICAgLy8gICAgICAvLyBjbG9uZWQgPSBpbnRlcmNlcHRvci5yZXF1ZXN0KGNsb25lZCk7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgIH0pO1xuICAgIC8vIH1cbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKTtcbiAgICAgIC8vIC5waXBlKFxuICAgICAgLy8gICAgbWFwKHJlc3BvbnNlID0+IHtcbiAgICAgIC8vICAgICAgaWYgKHRoaXMuY3VzdG9tZXJJbnRlcmNlcHRvcnMpIHtcbiAgICAgIC8vICAgICAgICB0aGlzLmN1c3RvbWVySW50ZXJjZXB0b3JzLmZvckVhY2goKGludGVyY2VwdG9yOiBIdHRwSW50ZXJjZXB0b3JDb25maWcpID0+IHtcbiAgICAgIC8vICAgICAgICAgIGlmIChpbnRlcmNlcHRvci5yZXNwb25zZSAmJiBSZWdVdGlscy50ZXN0KHJlcS51cmwsIGludGVyY2VwdG9yLnVybFBhdHRlcm5zKSkge1xuICAgICAgLy8gICAgICAgICAgICBpbnRlcmNlcHRvci5yZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAvLyAgICAgICAgICB9XG4gICAgICAvLyAgICAgICAgfSk7XG4gICAgICAvLyAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgLy8gICAgICB9IGVsc2Uge1xuICAgICAgLy8gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgIC8vICAgICAgfVxuICAgICAgLy8gICAgfSlcbiAgICAgIC8vICk7XG4gIH1cbn1cbiJdfQ==