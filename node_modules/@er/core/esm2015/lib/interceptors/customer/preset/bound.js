/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonsUtils } from '@er/utils';
/**
 * @param {?} bounds
 * @return {?}
 */
export function esBoundInterceptor(bounds) {
    return (req) => {
        /** @type {?} */
        let must = [];
        /** @type {?} */
        const query = CommonsUtils.get(req, 'body.query');
        if (query) {
            /** @type {?} */
            const bool = CommonsUtils.get(req, 'body.query.bool');
            if (!bool) {
                must.push(query);
            }
        }
        must = CommonsUtils.get(req, 'body.query.bool.must', must);
        if (!CommonsUtils.isArray(must)) {
            must = [must];
        }
        /** @type {?} */
        let _bounds = bounds;
        if (!CommonsUtils.isArray(bounds)) {
            _bounds = [bounds];
        }
        _bounds.forEach(bound => {
            if (must.indexOf(bound) === -1) {
                if (bound.toJSON) {
                    must.push(bound.toJSON());
                }
                else if (CommonsUtils.isFunction(bound)) {
                    must.push(bound(req));
                }
                else if (CommonsUtils.isJson(bound)) {
                    must.push(bound);
                }
            }
        });
        CommonsUtils.set(req, 'body.query.bool.must', must);
        console.log(must);
        return req;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcmNlcHRvcnMvY3VzdG9tZXIvcHJlc2V0L2JvdW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sV0FBVyxDQUFDOzs7OztBQUV2QyxNQUFNLFVBQVUsa0JBQWtCLENBQUMsTUFBbUI7SUFFcEQsT0FBTyxDQUFDLEdBQXFCLEVBQW9CLEVBQUU7O1lBRTdDLElBQUksR0FBRyxFQUFFOztjQUVQLEtBQUssR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUM7UUFFakQsSUFBSSxLQUFLLEVBQUU7O2tCQUNILElBQUksR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsQ0FBQztZQUNyRCxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNULElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDbEI7U0FDRjtRQUVELElBQUksR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxzQkFBc0IsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUUzRCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMvQixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNmOztZQUVHLE9BQU8sR0FBRyxNQUFNO1FBQ3BCLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2pDLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3BCO1FBRUQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN0QixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQzlCLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtvQkFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztpQkFDM0I7cUJBQU0sSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUN2QjtxQkFBTSxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ3JDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ2xCO2FBQ0Y7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLHNCQUFzQixFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDakIsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtIdHRwUmVxdWVzdH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtDb21tb25zVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBlc0JvdW5kSW50ZXJjZXB0b3IoYm91bmRzOiBhbnkgfCBhbnlbXSkge1xuXG4gIHJldHVybiAocmVxOiBIdHRwUmVxdWVzdDxhbnk+KTogSHR0cFJlcXVlc3Q8YW55PiA9PiB7XG5cbiAgICBsZXQgbXVzdCA9IFtdO1xuXG4gICAgY29uc3QgcXVlcnkgPSBDb21tb25zVXRpbHMuZ2V0KHJlcSwgJ2JvZHkucXVlcnknKTtcblxuICAgIGlmIChxdWVyeSkge1xuICAgICAgY29uc3QgYm9vbCA9IENvbW1vbnNVdGlscy5nZXQocmVxLCAnYm9keS5xdWVyeS5ib29sJyk7XG4gICAgICBpZiAoIWJvb2wpIHtcbiAgICAgICAgbXVzdC5wdXNoKHF1ZXJ5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtdXN0ID0gQ29tbW9uc1V0aWxzLmdldChyZXEsICdib2R5LnF1ZXJ5LmJvb2wubXVzdCcsIG11c3QpO1xuXG4gICAgaWYgKCFDb21tb25zVXRpbHMuaXNBcnJheShtdXN0KSkge1xuICAgICAgbXVzdCA9IFttdXN0XTtcbiAgICB9XG5cbiAgICBsZXQgX2JvdW5kcyA9IGJvdW5kcztcbiAgICBpZiAoIUNvbW1vbnNVdGlscy5pc0FycmF5KGJvdW5kcykpIHtcbiAgICAgIF9ib3VuZHMgPSBbYm91bmRzXTtcbiAgICB9XG5cbiAgICBfYm91bmRzLmZvckVhY2goYm91bmQgPT4ge1xuICAgICAgaWYgKG11c3QuaW5kZXhPZihib3VuZCkgPT09IC0xKSB7XG4gICAgICAgIGlmIChib3VuZC50b0pTT04pIHtcbiAgICAgICAgICBtdXN0LnB1c2goYm91bmQudG9KU09OKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKENvbW1vbnNVdGlscy5pc0Z1bmN0aW9uKGJvdW5kKSkge1xuICAgICAgICAgIG11c3QucHVzaChib3VuZChyZXEpKTtcbiAgICAgICAgfSBlbHNlIGlmIChDb21tb25zVXRpbHMuaXNKc29uKGJvdW5kKSkge1xuICAgICAgICAgIG11c3QucHVzaChib3VuZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBDb21tb25zVXRpbHMuc2V0KHJlcSwgJ2JvZHkucXVlcnkuYm9vbC5tdXN0JywgbXVzdCk7XG4gICAgY29uc29sZS5sb2cobXVzdClcbiAgICByZXR1cm4gcmVxO1xuICB9O1xufVxuIl19