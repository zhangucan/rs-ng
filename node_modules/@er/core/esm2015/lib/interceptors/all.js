/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { HttpAppConfiguredInterceptor } from './customer/interceptor';
import { HttpErrorHandlerInterceptor } from './error/interceptor';
import { HttpJwtAuthInterceptor } from './jwt/interceptor';
import { HttpLogInterceptor } from './log/interceptor';
import { HttpProgressInterceptor } from './progress/interceptor';
import { HttpTimeoutInterceptor } from './timeout/interceptor';
export { HttpAppConfiguredInterceptor } from './customer/interceptor';
export { HttpErrorHandlerInterceptor } from './error/interceptor';
export { HttpJwtAuthInterceptor } from './jwt/interceptor';
export { HttpProgressInterceptor } from './progress/interceptor';
export { HttpLogInterceptor } from './log/interceptor';
export { HttpTimeoutInterceptor } from './timeout/interceptor';
export { esBoundInterceptor, credentialHttpRequestInterceptor } from './customer/preset/all';
/** @type {?} */
export const CoreInterceptors = [
    { provide: HTTP_INTERCEPTORS, useClass: HttpErrorHandlerInterceptor, multi: true },
    { provide: HTTP_INTERCEPTORS, useClass: HttpProgressInterceptor, multi: true },
    { provide: HTTP_INTERCEPTORS, useClass: HttpLogInterceptor, multi: true },
    { provide: HTTP_INTERCEPTORS, useClass: HttpTimeoutInterceptor, multi: true },
    { provide: HTTP_INTERCEPTORS, useClass: HttpJwtAuthInterceptor, multi: true },
    { provide: HTTP_INTERCEPTORS, useClass: HttpAppConfiguredInterceptor, multi: true }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvaW50ZXJjZXB0b3JzL2FsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDdkQsT0FBTyxFQUFDLDRCQUE0QixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDcEUsT0FBTyxFQUFDLDJCQUEyQixFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDaEUsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDekQsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDckQsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDL0QsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFFN0QsT0FBTyxFQUFDLDRCQUE0QixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDcEUsT0FBTyxFQUFDLDJCQUEyQixFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDaEUsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDekQsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDL0QsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDckQsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QscUVBQWMsdUJBQXVCLENBQUM7O0FBRXRDLE1BQU0sT0FBTyxnQkFBZ0IsR0FBRztJQUM5QixFQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsMkJBQTJCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQztJQUNoRixFQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQztJQUM1RSxFQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQztJQUN2RSxFQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQztJQUMzRSxFQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQztJQUMzRSxFQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsNEJBQTRCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQztDQUNsRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SFRUUF9JTlRFUkNFUFRPUlN9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7SHR0cEFwcENvbmZpZ3VyZWRJbnRlcmNlcHRvcn0gZnJvbSAnLi9jdXN0b21lci9pbnRlcmNlcHRvcic7XG5pbXBvcnQge0h0dHBFcnJvckhhbmRsZXJJbnRlcmNlcHRvcn0gZnJvbSAnLi9lcnJvci9pbnRlcmNlcHRvcic7XG5pbXBvcnQge0h0dHBKd3RBdXRoSW50ZXJjZXB0b3J9IGZyb20gJy4vand0L2ludGVyY2VwdG9yJztcbmltcG9ydCB7SHR0cExvZ0ludGVyY2VwdG9yfSBmcm9tICcuL2xvZy9pbnRlcmNlcHRvcic7XG5pbXBvcnQge0h0dHBQcm9ncmVzc0ludGVyY2VwdG9yfSBmcm9tICcuL3Byb2dyZXNzL2ludGVyY2VwdG9yJztcbmltcG9ydCB7SHR0cFRpbWVvdXRJbnRlcmNlcHRvcn0gZnJvbSAnLi90aW1lb3V0L2ludGVyY2VwdG9yJztcblxuZXhwb3J0IHtIdHRwQXBwQ29uZmlndXJlZEludGVyY2VwdG9yfSBmcm9tICcuL2N1c3RvbWVyL2ludGVyY2VwdG9yJztcbmV4cG9ydCB7SHR0cEVycm9ySGFuZGxlckludGVyY2VwdG9yfSBmcm9tICcuL2Vycm9yL2ludGVyY2VwdG9yJztcbmV4cG9ydCB7SHR0cEp3dEF1dGhJbnRlcmNlcHRvcn0gZnJvbSAnLi9qd3QvaW50ZXJjZXB0b3InO1xuZXhwb3J0IHtIdHRwUHJvZ3Jlc3NJbnRlcmNlcHRvcn0gZnJvbSAnLi9wcm9ncmVzcy9pbnRlcmNlcHRvcic7XG5leHBvcnQge0h0dHBMb2dJbnRlcmNlcHRvcn0gZnJvbSAnLi9sb2cvaW50ZXJjZXB0b3InO1xuZXhwb3J0IHtIdHRwVGltZW91dEludGVyY2VwdG9yfSBmcm9tICcuL3RpbWVvdXQvaW50ZXJjZXB0b3InO1xuZXhwb3J0ICogZnJvbSAnLi9jdXN0b21lci9wcmVzZXQvYWxsJztcblxuZXhwb3J0IGNvbnN0IENvcmVJbnRlcmNlcHRvcnMgPSBbXG4gIHtwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUywgdXNlQ2xhc3M6IEh0dHBFcnJvckhhbmRsZXJJbnRlcmNlcHRvciwgbXVsdGk6IHRydWV9LFxuICB7cHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsIHVzZUNsYXNzOiBIdHRwUHJvZ3Jlc3NJbnRlcmNlcHRvciwgbXVsdGk6IHRydWV9LFxuICB7cHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsIHVzZUNsYXNzOiBIdHRwTG9nSW50ZXJjZXB0b3IsIG11bHRpOiB0cnVlfSxcbiAge3Byb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLCB1c2VDbGFzczogSHR0cFRpbWVvdXRJbnRlcmNlcHRvciwgbXVsdGk6IHRydWV9LFxuICB7cHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsIHVzZUNsYXNzOiBIdHRwSnd0QXV0aEludGVyY2VwdG9yLCBtdWx0aTogdHJ1ZX0sXG4gIHtwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUywgdXNlQ2xhc3M6IEh0dHBBcHBDb25maWd1cmVkSW50ZXJjZXB0b3IsIG11bHRpOiB0cnVlfVxuXTtcblxuXG4iXX0=