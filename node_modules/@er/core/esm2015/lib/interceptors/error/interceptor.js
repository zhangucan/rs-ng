/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpErrorResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { NotifyLevel, StateNames } from '@er/types';
import { ConfigUtils, StatesUtils } from '@er/utils';
import { throwError, TimeoutError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { RouteUtils } from '../../utils/nav';
export class HttpErrorHandlerInterceptor {
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        return next.handle(req)
            .pipe(catchError((err) => {
            if (err instanceof HttpErrorResponse) {
                if (err.status === 401) {
                    RouteUtils.nav(ConfigUtils.getConfig().auth.loginRouter);
                }
                else if (err.status === 403) {
                    StatesUtils.create(StateNames.notify, {
                        message: '没有操作权限！',
                        level: NotifyLevel.ERROR
                    });
                }
                else {
                    this.errorHandler(err);
                }
            }
            else if (err instanceof TimeoutError) {
                StatesUtils.create(StateNames.notify, {
                    message: '网络访问超时！',
                    level: NotifyLevel.ERROR
                });
            }
            return throwError(err);
        }));
    }
    /**
     * @private
     * @param {?} err
     * @return {?}
     */
    errorHandler(err) {
        /** @type {?} */
        let message = '';
        if (err.error instanceof Error) {
            message = err.error.message;
        }
        else {
            if (err.status === 0) {
                message = '网络链接已断开';
            }
            else if (err.status === 404) {
                message = '请求地址不存在';
            }
            else if (err.status === 500) {
                message = '服务器程序错误';
            }
            else {
                message = '数据请求错误';
            }
        }
        StatesUtils.create(StateNames.notify, {
            level: NotifyLevel.ERROR,
            message: `${message},错误代码:【${err.status}】`,
            title: '网络访问失败'
        });
    }
}
HttpErrorHandlerInterceptor.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcmNlcHRvcnMvZXJyb3IvaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxpQkFBaUIsRUFBdUQsTUFBTSxzQkFBc0IsQ0FBQztBQUM3RyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxXQUFXLEVBQUUsVUFBVSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2xELE9BQU8sRUFBQyxXQUFXLEVBQUUsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ25ELE9BQU8sRUFBYSxVQUFVLEVBQUUsWUFBWSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzFELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFHM0MsTUFBTSxPQUFPLDJCQUEyQjs7Ozs7O0lBRXRDLFNBQVMsQ0FBQyxHQUFxQixFQUFFLElBQWlCO1FBQ2hELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDcEIsSUFBSSxDQUNILFVBQVUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ2pCLElBQUksR0FBRyxZQUFZLGlCQUFpQixFQUFFO2dCQUNwQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO29CQUN0QixVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7aUJBQzFEO3FCQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7b0JBQzdCLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTt3QkFDcEMsT0FBTyxFQUFFLFNBQVM7d0JBQ2xCLEtBQUssRUFBRSxXQUFXLENBQUMsS0FBSztxQkFDekIsQ0FBQyxDQUFDO2lCQUNKO3FCQUFNO29CQUNMLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3hCO2FBQ0Y7aUJBQU0sSUFBSSxHQUFHLFlBQVksWUFBWSxFQUFFO2dCQUN0QyxXQUFXLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUU7b0JBQ3BDLE9BQU8sRUFBRSxTQUFTO29CQUNsQixLQUFLLEVBQUUsV0FBVyxDQUFDLEtBQUs7aUJBQ3pCLENBQUMsQ0FBQzthQUNKO1lBQ0QsT0FBTyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNOLENBQUM7Ozs7OztJQUVPLFlBQVksQ0FBQyxHQUFzQjs7WUFDckMsT0FBTyxHQUFHLEVBQUU7UUFDaEIsSUFBSSxHQUFHLENBQUMsS0FBSyxZQUFZLEtBQUssRUFBRTtZQUM5QixPQUFPLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7U0FDN0I7YUFBTTtZQUNMLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3BCLE9BQU8sR0FBRyxTQUFTLENBQUM7YUFDckI7aUJBQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtnQkFDN0IsT0FBTyxHQUFHLFNBQVMsQ0FBQzthQUNyQjtpQkFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO2dCQUM3QixPQUFPLEdBQUcsU0FBUyxDQUFDO2FBQ3JCO2lCQUFNO2dCQUNMLE9BQU8sR0FBRyxRQUFRLENBQUM7YUFDcEI7U0FDRjtRQUNELFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTtZQUNwQyxLQUFLLEVBQUUsV0FBVyxDQUFDLEtBQUs7WUFDeEIsT0FBTyxFQUFFLEdBQUcsT0FBTyxVQUFVLEdBQUcsQ0FBQyxNQUFNLEdBQUc7WUFDMUMsS0FBSyxFQUFFLFFBQVE7U0FDaEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBakRGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0h0dHBFcnJvclJlc3BvbnNlLCBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOb3RpZnlMZXZlbCwgU3RhdGVOYW1lc30gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q29uZmlnVXRpbHMsIFN0YXRlc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCB0aHJvd0Vycm9yLCBUaW1lb3V0RXJyb3J9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtjYXRjaEVycm9yfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1JvdXRlVXRpbHN9IGZyb20gJy4uLy4uL3V0aWxzL25hdic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBIdHRwRXJyb3JIYW5kbGVySW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuXG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpXG4gICAgICAucGlwZShcbiAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB7XG4gICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAoZXJyLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICAgICAgICAgIFJvdXRlVXRpbHMubmF2KENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmF1dGgubG9naW5Sb3V0ZXIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlcnIuc3RhdHVzID09PSA0MDMpIHtcbiAgICAgICAgICAgICAgU3RhdGVzVXRpbHMuY3JlYXRlKFN0YXRlTmFtZXMubm90aWZ5LCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ+ayoeacieaTjeS9nOadg+mZkO+8gScsXG4gICAgICAgICAgICAgICAgbGV2ZWw6IE5vdGlmeUxldmVsLkVSUk9SXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGVyciBpbnN0YW5jZW9mIFRpbWVvdXRFcnJvcikge1xuICAgICAgICAgICAgU3RhdGVzVXRpbHMuY3JlYXRlKFN0YXRlTmFtZXMubm90aWZ5LCB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICfnvZHnu5zorr/pl67otoXml7bvvIEnLFxuICAgICAgICAgICAgICBsZXZlbDogTm90aWZ5TGV2ZWwuRVJST1JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnIpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZXJyb3JIYW5kbGVyKGVycjogSHR0cEVycm9yUmVzcG9uc2UpIHtcbiAgICBsZXQgbWVzc2FnZSA9ICcnO1xuICAgIGlmIChlcnIuZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgbWVzc2FnZSA9IGVyci5lcnJvci5tZXNzYWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZXJyLnN0YXR1cyA9PT0gMCkge1xuICAgICAgICBtZXNzYWdlID0gJ+e9kee7nOmTvuaOpeW3suaWreW8gCc7XG4gICAgICB9IGVsc2UgaWYgKGVyci5zdGF0dXMgPT09IDQwNCkge1xuICAgICAgICBtZXNzYWdlID0gJ+ivt+axguWcsOWdgOS4jeWtmOWcqCc7XG4gICAgICB9IGVsc2UgaWYgKGVyci5zdGF0dXMgPT09IDUwMCkge1xuICAgICAgICBtZXNzYWdlID0gJ+acjeWKoeWZqOeoi+W6j+mUmeivryc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlID0gJ+aVsOaNruivt+axgumUmeivryc7XG4gICAgICB9XG4gICAgfVxuICAgIFN0YXRlc1V0aWxzLmNyZWF0ZShTdGF0ZU5hbWVzLm5vdGlmeSwge1xuICAgICAgbGV2ZWw6IE5vdGlmeUxldmVsLkVSUk9SLFxuICAgICAgbWVzc2FnZTogYCR7bWVzc2FnZX0s6ZSZ6K+v5Luj56CBOuOAkCR7ZXJyLnN0YXR1c33jgJFgLFxuICAgICAgdGl0bGU6ICfnvZHnu5zorr/pl67lpLHotKUnXG4gICAgfSk7XG4gIH1cbn1cblxuXG4iXX0=