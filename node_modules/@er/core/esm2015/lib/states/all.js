/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StateNames } from '@er/types';
import { StatesUtils } from '@er/utils';
import { distinctUntilChanged, filter, map } from 'rxjs/operators';
/** @type {?} */
export const HTTP_STATE$ = StatesUtils.observe(StateNames.rootHttp)
    .pipe(distinctUntilChanged(), map(state => state && state.inProcess && state.inProcess > 0));
/** @type {?} */
export const HTTP_TAG_STATE$ = (httpTag) => {
    return StatesUtils.observe(StateNames.http, httpTag)
        .pipe(distinctUntilChanged(), filter(state => !!state), map(state => state && state.start));
};
/** @type {?} */
export const ROUTE_STATE$ = StatesUtils.observe(StateNames.nav)
    .pipe(distinctUntilChanged(), filter(state => !!state), map(state => state && state.start && state.outlet === 'primary'));
/** @type {?} */
export const ROUTE_OUTLET_STATE$ = (outlet) => {
    return StatesUtils.observe(StateNames.nav)
        .pipe(distinctUntilChanged(), filter(state => !!state), map(state => state && state.start && state.outlet === outlet));
};
/** @type {?} */
export const WEB_SOCKET_STATES = StatesUtils.observe(StateNames.socket)
    .pipe(distinctUntilChanged(), filter(state => !!state), map(state => state.state));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvc3RhdGVzL2FsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNyQyxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRXRDLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7O0FBR2pFLE1BQU0sT0FBTyxXQUFXLEdBQXdCLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztLQUNyRixJQUFJLENBQ0gsb0JBQW9CLEVBQUUsRUFDdEIsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FDOUQ7O0FBRUgsTUFBTSxPQUFPLGVBQWUsR0FBRyxDQUFDLE9BQU8sRUFBdUIsRUFBRTtJQUM5RCxPQUFPLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7U0FDakQsSUFBSSxDQUNILG9CQUFvQixFQUFFLEVBQ3RCLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDeEIsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FDbkMsQ0FBQztBQUNOLENBQUM7O0FBRUQsTUFBTSxPQUFPLFlBQVksR0FBd0IsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDO0tBQ2pGLElBQUksQ0FDSCxvQkFBb0IsRUFBRSxFQUN0QixNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQ3hCLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDLENBQ2pFOztBQUVILE1BQU0sT0FBTyxtQkFBbUIsR0FBRyxDQUFDLE1BQU0sRUFBdUIsRUFBRTtJQUNqRSxPQUFPLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztTQUN2QyxJQUFJLENBQ0gsb0JBQW9CLEVBQUUsRUFDdEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUN4QixHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUM5RCxDQUFDO0FBQ04sQ0FBQzs7QUFFRCxNQUFNLE9BQU8saUJBQWlCLEdBQXVCLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztLQUN4RixJQUFJLENBQ0gsb0JBQW9CLEVBQUUsRUFDdEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUN4QixHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQzFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdGF0ZU5hbWVzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtTdGF0ZXNVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBmaWx0ZXIsIG1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5cbmV4cG9ydCBjb25zdCBIVFRQX1NUQVRFJDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IFN0YXRlc1V0aWxzLm9ic2VydmUoU3RhdGVOYW1lcy5yb290SHR0cClcbiAgLnBpcGUoXG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICBtYXAoc3RhdGUgPT4gc3RhdGUgJiYgc3RhdGUuaW5Qcm9jZXNzICYmIHN0YXRlLmluUHJvY2VzcyA+IDApXG4gICk7XG5cbmV4cG9ydCBjb25zdCBIVFRQX1RBR19TVEFURSQgPSAoaHR0cFRhZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4gPT4ge1xuICByZXR1cm4gU3RhdGVzVXRpbHMub2JzZXJ2ZShTdGF0ZU5hbWVzLmh0dHAsIGh0dHBUYWcpXG4gICAgLnBpcGUoXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgZmlsdGVyKHN0YXRlID0+ICEhc3RhdGUpLFxuICAgICAgbWFwKHN0YXRlID0+IHN0YXRlICYmIHN0YXRlLnN0YXJ0KVxuICAgICk7XG59O1xuXG5leHBvcnQgY29uc3QgUk9VVEVfU1RBVEUkOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0gU3RhdGVzVXRpbHMub2JzZXJ2ZShTdGF0ZU5hbWVzLm5hdilcbiAgLnBpcGUoXG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICBmaWx0ZXIoc3RhdGUgPT4gISFzdGF0ZSksXG4gICAgbWFwKHN0YXRlID0+IHN0YXRlICYmIHN0YXRlLnN0YXJ0ICYmIHN0YXRlLm91dGxldCA9PT0gJ3ByaW1hcnknKVxuICApO1xuXG5leHBvcnQgY29uc3QgUk9VVEVfT1VUTEVUX1NUQVRFJCA9IChvdXRsZXQpOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0+IHtcbiAgcmV0dXJuIFN0YXRlc1V0aWxzLm9ic2VydmUoU3RhdGVOYW1lcy5uYXYpXG4gICAgLnBpcGUoXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgZmlsdGVyKHN0YXRlID0+ICEhc3RhdGUpLFxuICAgICAgbWFwKHN0YXRlID0+IHN0YXRlICYmIHN0YXRlLnN0YXJ0ICYmIHN0YXRlLm91dGxldCA9PT0gb3V0bGV0KVxuICAgICk7XG59O1xuXG5leHBvcnQgY29uc3QgV0VCX1NPQ0tFVF9TVEFURVM6IE9ic2VydmFibGU8c3RyaW5nPiA9IFN0YXRlc1V0aWxzLm9ic2VydmUoU3RhdGVOYW1lcy5zb2NrZXQpXG4gIC5waXBlKFxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgZmlsdGVyKHN0YXRlID0+ICEhc3RhdGUpLFxuICAgIG1hcChzdGF0ZSA9PiBzdGF0ZS5zdGF0ZSlcbiAgKTtcbiJdfQ==