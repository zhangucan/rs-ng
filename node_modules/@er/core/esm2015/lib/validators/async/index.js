/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonsUtils } from '@er/utils';
import { map } from 'rxjs/operators';
import { ApiUtils } from '../../utils/api';
/** @type {?} */
export const NgAsyncValidator = function (requestProps, errorKey) {
    /** @type {?} */
    const fn = (control) => {
        /** @type {?} */
        let props = requestProps;
        if (requestProps.query && CommonsUtils.isFunction(requestProps.query)) {
            /** @type {?} */
            const query = ((/** @type {?} */ (requestProps.query)))(control.value);
            props = Object.assign({}, props, { query });
        }
        /** @type {?} */
        const httpRequest = ApiUtils.fetch(props)
            .pipe(map(data => {
            return !data ? null : { [errorKey]: true };
        }));
        return httpRequest;
    };
    return fn;
};
/** @type {?} */
export const FormlyAsyncValidator = function (requestProps) {
    /** @type {?} */
    const fn = (control) => {
        /** @type {?} */
        let props = requestProps;
        if (requestProps.query && CommonsUtils.isFunction(requestProps.query)) {
            /** @type {?} */
            const query = ((/** @type {?} */ (requestProps.query)))(control.value);
            props = Object.assign({}, props, { query });
        }
        /** @type {?} */
        const httpRequest = ApiUtils.fetch(props)
            .pipe(map(data => !data));
        return httpRequest.toPromise();
    };
    return fn;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi92YWxpZGF0b3JzL2FzeW5jL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuQyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7O0FBRXpDLE1BQU0sT0FBTyxnQkFBZ0IsR0FBRyxVQUFVLFlBQTBCLEVBQUUsUUFBaUI7O1VBQy9FLEVBQUUsR0FBRyxDQUFDLE9BQXdCLEVBQUUsRUFBRTs7WUFDbEMsS0FBSyxHQUFHLFlBQVk7UUFDeEIsSUFBSSxZQUFZLENBQUMsS0FBSyxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFOztrQkFDL0QsS0FBSyxHQUFHLENBQUMsbUJBQUEsWUFBWSxDQUFDLEtBQUssRUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUM3RCxLQUFLLHFCQUNBLEtBQUssSUFDUixLQUFLLEdBQ04sQ0FBQztTQUNIOztjQUNLLFdBQVcsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQzthQUN0QyxJQUFJLENBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ1QsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQ0g7UUFDSCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDOztBQUdELE1BQU0sT0FBTyxvQkFBb0IsR0FBRyxVQUFVLFlBQTBCOztVQUNoRSxFQUFFLEdBQUcsQ0FBQyxPQUF3QixFQUFFLEVBQUU7O1lBQ2xDLEtBQUssR0FBRyxZQUFZO1FBQ3hCLElBQUksWUFBWSxDQUFDLEtBQUssSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTs7a0JBQy9ELEtBQUssR0FBRyxDQUFDLG1CQUFBLFlBQVksQ0FBQyxLQUFLLEVBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDN0QsS0FBSyxxQkFDQSxLQUFLLElBQ1IsS0FBSyxHQUNOLENBQUM7U0FDSDs7Y0FDSyxXQUFXLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7YUFDdEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ3ZCO1FBQ0gsT0FBTyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUNELE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWJzdHJhY3RDb250cm9sLCBBc3luY1ZhbGlkYXRvckZufSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0FwaURhdGFQcm9wc30gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHttYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7QXBpVXRpbHN9IGZyb20gJy4uLy4uL3V0aWxzL2FwaSc7XG5cbmV4cG9ydCBjb25zdCBOZ0FzeW5jVmFsaWRhdG9yID0gZnVuY3Rpb24gKHJlcXVlc3RQcm9wczogQXBpRGF0YVByb3BzLCBlcnJvcktleT86IHN0cmluZyk6IEFzeW5jVmFsaWRhdG9yRm4ge1xuICBjb25zdCBmbiA9IChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+IHtcbiAgICBsZXQgcHJvcHMgPSByZXF1ZXN0UHJvcHM7XG4gICAgaWYgKHJlcXVlc3RQcm9wcy5xdWVyeSAmJiBDb21tb25zVXRpbHMuaXNGdW5jdGlvbihyZXF1ZXN0UHJvcHMucXVlcnkpKSB7XG4gICAgICBjb25zdCBxdWVyeSA9IChyZXF1ZXN0UHJvcHMucXVlcnkgYXMgRnVuY3Rpb24pKGNvbnRyb2wudmFsdWUpO1xuICAgICAgcHJvcHMgPSB7XG4gICAgICAgIC4uLnByb3BzLFxuICAgICAgICBxdWVyeVxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgaHR0cFJlcXVlc3QgPSBBcGlVdGlscy5mZXRjaChwcm9wcylcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAoZGF0YSA9PiB7XG4gICAgICAgICAgcmV0dXJuICFkYXRhID8gbnVsbCA6IHtbZXJyb3JLZXldOiB0cnVlfTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgcmV0dXJuIGh0dHBSZXF1ZXN0O1xuICB9O1xuICByZXR1cm4gZm47XG59O1xuXG5cbmV4cG9ydCBjb25zdCBGb3JtbHlBc3luY1ZhbGlkYXRvciA9IGZ1bmN0aW9uIChyZXF1ZXN0UHJvcHM6IEFwaURhdGFQcm9wcykge1xuICBjb25zdCBmbiA9IChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+IHtcbiAgICBsZXQgcHJvcHMgPSByZXF1ZXN0UHJvcHM7XG4gICAgaWYgKHJlcXVlc3RQcm9wcy5xdWVyeSAmJiBDb21tb25zVXRpbHMuaXNGdW5jdGlvbihyZXF1ZXN0UHJvcHMucXVlcnkpKSB7XG4gICAgICBjb25zdCBxdWVyeSA9IChyZXF1ZXN0UHJvcHMucXVlcnkgYXMgRnVuY3Rpb24pKGNvbnRyb2wudmFsdWUpO1xuICAgICAgcHJvcHMgPSB7XG4gICAgICAgIC4uLnByb3BzLFxuICAgICAgICBxdWVyeVxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgaHR0cFJlcXVlc3QgPSBBcGlVdGlscy5mZXRjaChwcm9wcylcbiAgICAgIC5waXBlKG1hcChkYXRhID0+ICFkYXRhKVxuICAgICAgKTtcbiAgICByZXR1cm4gaHR0cFJlcXVlc3QudG9Qcm9taXNlKCk7XG4gIH07XG4gIHJldHVybiBmbjtcbn07XG4iXX0=