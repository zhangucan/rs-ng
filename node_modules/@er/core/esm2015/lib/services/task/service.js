/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { Title } from '@angular/platform-browser';
import { StateNames } from '@er/types';
import { CommonsUtils, ConfigUtils, StatesUtils } from '@er/utils';
import { timer } from 'rxjs';
import { distinctUntilChanged, filter, map } from 'rxjs/operators';
import { DiUtils } from '../../utils/di';
import * as i0 from "@angular/core";
/** @type {?} */
export const BACKGROUND_TASK_TOKEN = new InjectionToken('BACKGROUND_TASK_TOKEN');
/**
 * used to run background task globally
 */
export class TaskService {
    /**
     * @param {?=} tasks
     */
    constructor(tasks = []) {
        this.subs = [];
        StatesUtils.create(StateNames.appTitle, ConfigUtils.getConfig().appTitle, true);
        setTimeout(() => {
            this.cleanStates();
            /** @type {?} */
            const _tasks = CommonsUtils.flatten(tasks);
            if (_tasks && _tasks.length > 0) {
                _tasks.forEach(task => this.startTask((/** @type {?} */ (task))));
            }
        }, 2000);
    }
    /**
     * @return {?}
     */
    updateTitle() {
        this.subs.push(StatesUtils.observe(StateNames.appTitle)
            .pipe(filter(state => state && state.hasOwnProperty('title')), map(state => state.title), distinctUntilChanged())
            .subscribe(title => {
            DiUtils.get(Title).setTitle(title);
        }));
    }
    /**
     * @return {?}
     */
    cleanStates() {
        this.subs.push(timer(30000, 30000)
            .subscribe(() => {
            /** @type {?} */
            let store = StatesUtils.getStore().value;
            Object.keys(store).forEach(key => {
                if (store[key]) {
                    if (!store[key].preserved && (store[key].state && store[key].state.observers.length === 0)) {
                        store = CommonsUtils.omit(store, key);
                    }
                }
            });
            StatesUtils.getStore().next(store);
        }));
    }
    /**
     * @param {?} task
     * @return {?}
     */
    startTask(task) {
        if (CommonsUtils.isFunction(task)) {
            ((/** @type {?} */ (task)))();
        }
        else {
            /** @type {?} */
            const schedule = (/** @type {?} */ (task));
            /** @type {?} */
            let context = schedule.context;
            if (CommonsUtils.isFunction(schedule.context)) {
                context = schedule.context();
            }
            if (schedule.interval) {
                this.subs.push(timer(0, schedule.interval)
                    .subscribe(() => {
                    schedule.run(context);
                }));
            }
            else {
                schedule.run(context);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subs.forEach(sub => {
            sub.unsubscribe();
        });
    }
}
TaskService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TaskService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [BACKGROUND_TASK_TOKEN,] }] }
];
/** @nocollapse */ TaskService.ngInjectableDef = i0.defineInjectable({ factory: function TaskService_Factory() { return new TaskService(i0.inject(BACKGROUND_TASK_TOKEN, 8)); }, token: TaskService, providedIn: "root" });
if (false) {
    /** @type {?} */
    TaskService.prototype.subs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3Rhc2svc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFhLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN0RixPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDaEQsT0FBTyxFQUFnQixVQUFVLEVBQU8sTUFBTSxXQUFXLENBQUM7QUFDMUQsT0FBTyxFQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2pFLE9BQU8sRUFBZSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDekMsT0FBTyxFQUFDLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRSxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7OztBQUV2QyxNQUFNLE9BQU8scUJBQXFCLEdBQUcsSUFBSSxjQUFjLENBQU8sdUJBQXVCLENBQUM7Ozs7QUFRdEYsTUFBTSxPQUFPLFdBQVc7Ozs7SUFJdEIsWUFBdUQsUUFBZ0IsRUFBRTtRQUZ6RSxTQUFJLEdBQW1CLEVBQUUsQ0FBQztRQUd4QixXQUFXLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoRixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDOztrQkFDYixNQUFNLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDMUMsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQy9CLE1BQU0sQ0FBQyxP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QztJQUNMLENBQUM7OztZQTNFRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7d0NBS2MsUUFBUSxZQUFJLE1BQU0sU0FBQyxxQkFBcUI7Ozs7O0lBRnJELDJCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgT25EZXN0cm95LCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1RpdGxlfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7U2NoZWR1bGVkVGFzaywgU3RhdGVOYW1lcywgVGFza30gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzLCBDb25maWdVdGlscywgU3RhdGVzVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge1N1YnNjcmlwdGlvbiwgdGltZXJ9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgZmlsdGVyLCBtYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7RGlVdGlsc30gZnJvbSAnLi4vLi4vdXRpbHMvZGknO1xuXG5leHBvcnQgY29uc3QgQkFDS0dST1VORF9UQVNLX1RPS0VOID0gbmV3IEluamVjdGlvblRva2VuPFRhc2s+KCdCQUNLR1JPVU5EX1RBU0tfVE9LRU4nKTtcblxuLyoqXG4gKiB1c2VkIHRvIHJ1biBiYWNrZ3JvdW5kIHRhc2sgZ2xvYmFsbHlcbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVGFza1NlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gIHN1YnM6IFN1YnNjcmlwdGlvbltdID0gW107XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChCQUNLR1JPVU5EX1RBU0tfVE9LRU4pIHRhc2tzOiBUYXNrW10gPSBbXSkge1xuICAgIFN0YXRlc1V0aWxzLmNyZWF0ZShTdGF0ZU5hbWVzLmFwcFRpdGxlLCBDb25maWdVdGlscy5nZXRDb25maWcoKS5hcHBUaXRsZSwgdHJ1ZSk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmNsZWFuU3RhdGVzKCk7XG4gICAgICBjb25zdCBfdGFza3MgPSBDb21tb25zVXRpbHMuZmxhdHRlbih0YXNrcyk7XG4gICAgICBpZiAoX3Rhc2tzICYmIF90YXNrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIF90YXNrcy5mb3JFYWNoKHRhc2sgPT4gdGhpcy5zdGFydFRhc2soPFRhc2s+dGFzaykpO1xuICAgICAgfVxuICAgIH0sIDIwMDApO1xuICB9XG5cbiAgdXBkYXRlVGl0bGUoKSB7XG4gICAgdGhpcy5zdWJzLnB1c2goXG4gICAgICBTdGF0ZXNVdGlscy5vYnNlcnZlKFN0YXRlTmFtZXMuYXBwVGl0bGUpXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIGZpbHRlcihzdGF0ZSA9PiBzdGF0ZSAmJiBzdGF0ZS5oYXNPd25Qcm9wZXJ0eSgndGl0bGUnKSksXG4gICAgICAgICAgbWFwKHN0YXRlID0+IHN0YXRlLnRpdGxlKSxcbiAgICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZSh0aXRsZSA9PiB7XG4gICAgICAgICAgRGlVdGlscy5nZXQ8VGl0bGU+KFRpdGxlKS5zZXRUaXRsZSh0aXRsZSk7XG4gICAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGNsZWFuU3RhdGVzKCkge1xuICAgIHRoaXMuc3Vicy5wdXNoKFxuICAgICAgdGltZXIoMzAwMDAsIDMwMDAwKVxuICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICBsZXQgc3RvcmUgPSBTdGF0ZXNVdGlscy5nZXRTdG9yZSgpLnZhbHVlO1xuICAgICAgICAgIE9iamVjdC5rZXlzKHN0b3JlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBpZiAoc3RvcmVba2V5XSkge1xuICAgICAgICAgICAgICBpZiAoIXN0b3JlW2tleV0ucHJlc2VydmVkICYmIChzdG9yZVtrZXldLnN0YXRlICYmIHN0b3JlW2tleV0uc3RhdGUub2JzZXJ2ZXJzLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgICBzdG9yZSA9IENvbW1vbnNVdGlscy5vbWl0KHN0b3JlLCBrZXkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgU3RhdGVzVXRpbHMuZ2V0U3RvcmUoKS5uZXh0KHN0b3JlKTtcbiAgICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgc3RhcnRUYXNrKHRhc2s6IFRhc2spIHtcbiAgICBpZiAoQ29tbW9uc1V0aWxzLmlzRnVuY3Rpb24odGFzaykpIHtcbiAgICAgICh0YXNrIGFzIEZ1bmN0aW9uKSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzY2hlZHVsZSA9IHRhc2sgYXMgU2NoZWR1bGVkVGFzaztcbiAgICAgIGxldCBjb250ZXh0ID0gc2NoZWR1bGUuY29udGV4dDtcbiAgICAgIGlmIChDb21tb25zVXRpbHMuaXNGdW5jdGlvbihzY2hlZHVsZS5jb250ZXh0KSkge1xuICAgICAgICBjb250ZXh0ID0gc2NoZWR1bGUuY29udGV4dCgpO1xuICAgICAgfVxuICAgICAgaWYgKHNjaGVkdWxlLmludGVydmFsKSB7XG4gICAgICAgIHRoaXMuc3Vicy5wdXNoKFxuICAgICAgICAgIHRpbWVyKDAsIHNjaGVkdWxlLmludGVydmFsKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgIHNjaGVkdWxlLnJ1bihjb250ZXh0KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY2hlZHVsZS5ydW4oY29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzLmZvckVhY2goc3ViID0+IHtcbiAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=