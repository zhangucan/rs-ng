/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { LogLevel } from '@er/types';
import { CommonsUtils, ConfigUtils, DateUtils, DialogUtils } from '@er/utils';
import { HttpUtils } from '../../utils/http';
import * as i0 from "@angular/core";
export class LogService {
    /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    debug(from, message, ...context) {
        if (!ConfigUtils.getConfig().isProduction
            && ConfigUtils.getConfig().log.enableApp
            && ConfigUtils.getConfig().log.level <= LogLevel.DEBUG) {
            if ((typeof from) !== 'string' && from.constructor) {
                from = from.constructor.name;
            }
            if (ConfigUtils.getConfig().log.blackLList.indexOf(from) < 0) {
                this.getLogger().log(`[${DateUtils.getFormattedTime()}] %c DEBUG `, 'color: white; background: green; font-size: 18px;', this.getLogData([from, message, ...context]));
            }
        }
    }
    /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    info(from, message, ...context) {
        if (ConfigUtils.getConfig().log.level <= LogLevel.INFO) {
            if (typeof from !== 'string' && from.constructor) {
                from = from.constructor.name;
            }
            if (ConfigUtils.getConfig().log.blackLList.indexOf(from) < 0) {
                this.getLogger().log(`[${DateUtils.getFormattedTime()}] %c INFO `, 'color: white; background: blue; font-size: 18px;', this.getLogData([from, message, ...context]));
            }
        }
    }
    /**
     * @param {?} messages
     * @return {?}
     */
    warn(messages) {
        if (ConfigUtils.getConfig().log.level <= LogLevel.WARN) {
            this.getLogger().log(`[${DateUtils.getFormattedTime()}] %c WARN `, 'color: white; background: blue; font-size: 18px;', this.getLogData(messages));
        }
    }
    /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    error(from, message, ...context) {
        DialogUtils.error('错误', message);
        if (ConfigUtils.getConfig().log.level <= LogLevel.ERROR) {
            this.getLogger().log(`[${DateUtils.getFormattedTime()}] %c ERROR `, 'color: white; background: red; font-size: 18px;', this.getLogData([from, message, ...context]));
            if (ConfigUtils.getConfig().log.httpPost) {
                if (CommonsUtils.isFunction(from)) {
                    from = from.constructor.name;
                }
                this.getHttpLogger().log(DateUtils.getFormattedDateTime(), this.getLogData([from, message]));
            }
        }
    }
    /**
     * @protected
     * @return {?}
     */
    getLogger() {
        return console;
    }
    /**
     * @protected
     * @return {?}
     */
    getHttpLogger() {
        return (/** @type {?} */ ({
            log: (message, ...optionalParams) => {
                HttpUtils.request(Object.assign({}, ConfigUtils.getConfig().logHttpOptions, { body: Object.assign({ message }, optionalParams) }));
            }
        }));
    }
    /**
     * @private
     * @param {?} messages
     * @return {?}
     */
    getLogData(messages) {
        return Object.assign({}, messages);
    }
}
LogService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ LogService.ngInjectableDef = i0.defineInjectable({ factory: function LogService_Factory() { return new LogService(); }, token: LogService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2xvZy9zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUM1RSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sa0JBQWtCLENBQUM7O0FBSzNDLE1BQU0sT0FBTyxVQUFVOzs7Ozs7O0lBRXJCLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBZSxFQUFFLEdBQUcsT0FBYztRQUM1QyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLFlBQVk7ZUFDcEMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTO2VBQ3JDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUU7WUFDeEQsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ2xELElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQzthQUM5QjtZQUNELElBQUksV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDNUQsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxhQUFhLEVBQ2hFLG1EQUFtRCxFQUNuRCxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxFQUFF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WUEvRUYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TG9nTGV2ZWx9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge0NvbW1vbnNVdGlscywgQ29uZmlnVXRpbHMsIERhdGVVdGlscywgRGlhbG9nVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge0h0dHBVdGlsc30gZnJvbSAnLi4vLi4vdXRpbHMvaHR0cCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIExvZ1NlcnZpY2Uge1xuXG4gIGRlYnVnKGZyb20sIG1lc3NhZ2U6IHN0cmluZywgLi4uY29udGV4dDogYW55W10pIHtcbiAgICBpZiAoIUNvbmZpZ1V0aWxzLmdldENvbmZpZygpLmlzUHJvZHVjdGlvblxuICAgICAgJiYgQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkubG9nLmVuYWJsZUFwcFxuICAgICAgJiYgQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkubG9nLmxldmVsIDw9IExvZ0xldmVsLkRFQlVHKSB7XG4gICAgICBpZiAoKHR5cGVvZiBmcm9tKSAhPT0gJ3N0cmluZycgJiYgZnJvbS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICBmcm9tID0gZnJvbS5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgfVxuICAgICAgaWYgKENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmxvZy5ibGFja0xMaXN0LmluZGV4T2YoZnJvbSkgPCAwKSB7XG4gICAgICAgIHRoaXMuZ2V0TG9nZ2VyKCkubG9nKGBbJHtEYXRlVXRpbHMuZ2V0Rm9ybWF0dGVkVGltZSgpfV0gJWMgREVCVUcgYCxcbiAgICAgICAgICAnY29sb3I6IHdoaXRlOyBiYWNrZ3JvdW5kOiBncmVlbjsgZm9udC1zaXplOiAxOHB4OycsXG4gICAgICAgICAgdGhpcy5nZXRMb2dEYXRhKFtmcm9tLCBtZXNzYWdlLCAuLi5jb250ZXh0XSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGluZm8oZnJvbSwgbWVzc2FnZTogc3RyaW5nLCAuLi5jb250ZXh0OiBhbnlbXSkge1xuICAgIGlmIChDb25maWdVdGlscy5nZXRDb25maWcoKS5sb2cubGV2ZWwgPD0gTG9nTGV2ZWwuSU5GTykge1xuICAgICAgaWYgKHR5cGVvZiBmcm9tICE9PSAnc3RyaW5nJyAmJiBmcm9tLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIGZyb20gPSBmcm9tLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICB9XG4gICAgICBpZiAoQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkubG9nLmJsYWNrTExpc3QuaW5kZXhPZihmcm9tKSA8IDApIHtcbiAgICAgICAgdGhpcy5nZXRMb2dnZXIoKS5sb2coYFske0RhdGVVdGlscy5nZXRGb3JtYXR0ZWRUaW1lKCl9XSAlYyBJTkZPIGAsXG4gICAgICAgICAgJ2NvbG9yOiB3aGl0ZTsgYmFja2dyb3VuZDogYmx1ZTsgZm9udC1zaXplOiAxOHB4OycsXG4gICAgICAgICAgdGhpcy5nZXRMb2dEYXRhKFtmcm9tLCBtZXNzYWdlLCAuLi5jb250ZXh0XSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHdhcm4obWVzc2FnZXM6IGFueSkge1xuICAgIGlmIChDb25maWdVdGlscy5nZXRDb25maWcoKS5sb2cubGV2ZWwgPD0gTG9nTGV2ZWwuV0FSTikge1xuICAgICAgdGhpcy5nZXRMb2dnZXIoKS5sb2coYFske0RhdGVVdGlscy5nZXRGb3JtYXR0ZWRUaW1lKCl9XSAlYyBXQVJOIGAsXG4gICAgICAgICdjb2xvcjogd2hpdGU7IGJhY2tncm91bmQ6IGJsdWU7IGZvbnQtc2l6ZTogMThweDsnLFxuICAgICAgICB0aGlzLmdldExvZ0RhdGEobWVzc2FnZXMpKTtcbiAgICB9XG4gIH1cblxuICBlcnJvcihmcm9tLCBtZXNzYWdlLCAuLi5jb250ZXh0OiBhbnlbXSkge1xuICAgIERpYWxvZ1V0aWxzLmVycm9yKCfplJnor68nLCBtZXNzYWdlKTtcbiAgICBpZiAoQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkubG9nLmxldmVsIDw9IExvZ0xldmVsLkVSUk9SKSB7XG4gICAgICB0aGlzLmdldExvZ2dlcigpLmxvZyhgWyR7RGF0ZVV0aWxzLmdldEZvcm1hdHRlZFRpbWUoKX1dICVjIEVSUk9SIGAsXG4gICAgICAgICdjb2xvcjogd2hpdGU7IGJhY2tncm91bmQ6IHJlZDsgZm9udC1zaXplOiAxOHB4OycsXG4gICAgICAgIHRoaXMuZ2V0TG9nRGF0YShbZnJvbSwgbWVzc2FnZSwgLi4uY29udGV4dF0pKTtcbiAgICAgIGlmIChDb25maWdVdGlscy5nZXRDb25maWcoKS5sb2cuaHR0cFBvc3QpIHtcbiAgICAgICAgaWYgKENvbW1vbnNVdGlscy5pc0Z1bmN0aW9uKGZyb20pKSB7XG4gICAgICAgICAgZnJvbSA9IGZyb20uY29uc3RydWN0b3IubmFtZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdldEh0dHBMb2dnZXIoKS5sb2coRGF0ZVV0aWxzLmdldEZvcm1hdHRlZERhdGVUaW1lKCksXG4gICAgICAgICAgdGhpcy5nZXRMb2dEYXRhKFtmcm9tLCBtZXNzYWdlXSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRMb2dnZXIoKTogQ29uc29sZSB7XG4gICAgcmV0dXJuIGNvbnNvbGU7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0SHR0cExvZ2dlcigpOiBDb25zb2xlIHtcbiAgICByZXR1cm4gPENvbnNvbGU+e1xuICAgICAgbG9nOiAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gICAgICAgIEh0dHBVdGlscy5yZXF1ZXN0KHtcbiAgICAgICAgICAuLi5Db25maWdVdGlscy5nZXRDb25maWcoKS5sb2dIdHRwT3B0aW9ucyxcbiAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgLi4ub3B0aW9uYWxQYXJhbXNcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGdldExvZ0RhdGEobWVzc2FnZXM6IGFueSkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5tZXNzYWdlc1xuICAgIH07XG4gIH1cbn1cbiJdfQ==