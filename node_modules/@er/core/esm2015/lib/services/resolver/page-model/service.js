/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { CommonsUtils } from '@er/utils';
import { EMPTY, of } from 'rxjs';
import * as i0 from "@angular/core";
export class PathPropsDataResolver {
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    resolve(route, state) {
        /** @type {?} */
        const routeData = route.data;
        if (routeData) {
            if (!CommonsUtils.isEmpty(routeData)) {
                /** @type {?} */
                const pathValues = route.url.map(seg => seg.path);
                if (routeData['$props']) {
                    return of(CommonsUtils.get(routeData['$props'], pathValues.join('.')));
                }
            }
        }
        if (routeData.resource) {
            // return forkJoin([]).pipe(
            //   map(results => ({
            //     tree: results[0],
            //     table: results[1]
            //   }))
        }
        return EMPTY;
    }
}
PathPropsDataResolver.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ PathPropsDataResolver.ngInjectableDef = i0.defineInjectable({ factory: function PathPropsDataResolver_Factory() { return new PathPropsDataResolver(); }, token: PathPropsDataResolver, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3Jlc29sdmVyL3BhZ2UtbW9kZWwvc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUd6QyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxLQUFLLEVBQWMsRUFBRSxFQUFDLE1BQU0sTUFBTSxDQUFDOztBQU0zQyxNQUFNLE9BQU8scUJBQXFCOzs7Ozs7SUFFaEMsT0FBTyxDQUFDLEtBQTZCLEVBQUUsS0FBMEI7O2NBQ3pELFNBQVMsR0FBZ0IsS0FBSyxDQUFDLElBQUk7UUFDekMsSUFBSSxTQUFTLEVBQUU7WUFDYixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTs7c0JBQzlCLFVBQVUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQ2pELElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO29CQUN2QixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDeEU7YUFDRjtTQUNGO1FBQ0QsSUFBSSxTQUFTLENBQUMsUUFBUSxFQUFFO1lBQ3RCLDRCQUE0QjtZQUM1QixzQkFBc0I7WUFDdEIsd0JBQXdCO1lBQ3hCLHdCQUF3QjtZQUN4QixRQUFRO1NBQ1Q7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7OztZQXZCRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSZXNvbHZlLCBSb3V0ZXJTdGF0ZVNuYXBzaG90fSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtFclJvdXRlRGF0YX0gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtFTVBUWSwgT2JzZXJ2YWJsZSwgb2Z9IGZyb20gJ3J4anMnO1xuXG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFBhdGhQcm9wc0RhdGFSZXNvbHZlciBpbXBsZW1lbnRzIFJlc29sdmU8e30+IHtcblxuICByZXNvbHZlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IE9ic2VydmFibGU8e30+IHtcbiAgICBjb25zdCByb3V0ZURhdGE6IEVyUm91dGVEYXRhID0gcm91dGUuZGF0YTtcbiAgICBpZiAocm91dGVEYXRhKSB7XG4gICAgICBpZiAoIUNvbW1vbnNVdGlscy5pc0VtcHR5KHJvdXRlRGF0YSkpIHtcbiAgICAgICAgY29uc3QgcGF0aFZhbHVlcyA9IHJvdXRlLnVybC5tYXAoc2VnID0+IHNlZy5wYXRoKTtcbiAgICAgICAgaWYgKHJvdXRlRGF0YVsnJHByb3BzJ10pIHtcbiAgICAgICAgICByZXR1cm4gb2YoQ29tbW9uc1V0aWxzLmdldChyb3V0ZURhdGFbJyRwcm9wcyddLCBwYXRoVmFsdWVzLmpvaW4oJy4nKSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChyb3V0ZURhdGEucmVzb3VyY2UpIHtcbiAgICAgIC8vIHJldHVybiBmb3JrSm9pbihbXSkucGlwZShcbiAgICAgIC8vICAgbWFwKHJlc3VsdHMgPT4gKHtcbiAgICAgIC8vICAgICB0cmVlOiByZXN1bHRzWzBdLFxuICAgICAgLy8gICAgIHRhYmxlOiByZXN1bHRzWzFdXG4gICAgICAvLyAgIH0pKVxuICAgIH1cbiAgICByZXR1cm4gRU1QVFk7XG4gIH1cbn1cbiJdfQ==