/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// https://itnext.io/cache-components-with-angular-routereusestrategy-3e4c8b174d5f
export class CachedRouteReuseStrategy {
    constructor() {
        this.storedRouteHandles = new Map();
        this.allowRetrieveCache = {};
    }
    /**
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    shouldReuseRoute(future, curr) {
        if (this.isInOutlet(future['_routerState'].url) || this.isInOutlet(curr['_routerState'].url)) {
            return future.routeConfig === curr.routeConfig;
        }
        return future.routeConfig === curr.routeConfig && (false !== (future.data && future.data.$reuse));
    }
    /**
     * @param {?} route
     * @return {?}
     */
    retrieve(route) {
        return (/** @type {?} */ (this.storedRouteHandles.get(this.getPath(route))));
    }
    /**
     * @param {?} route
     * @return {?}
     */
    shouldAttach(route) {
        /** @type {?} */
        const path = this.getPath(route);
        if (this.allowRetrieveCache[path]) {
            return this.storedRouteHandles.has(this.getPath(route));
        }
        return false;
    }
    /**
     * @param {?} route
     * @return {?}
     */
    shouldDetach(route) {
        /** @type {?} */
        const path = this.getPath(route);
        if (this.allowRetrieveCache.hasOwnProperty(path)) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} route
     * @param {?} detachedTree
     * @return {?}
     */
    store(route, detachedTree) {
        this.storedRouteHandles.set(this.getPath(route), detachedTree);
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    isInOutlet(url) {
        return /.*\(.*:.*\).*/.test(url);
    }
    /**
     * @private
     * @param {?} route
     * @return {?}
     */
    getPath(route) {
        if (route.routeConfig !== null && route.routeConfig.path !== null) {
            return route.routeConfig.path;
        }
        return '';
    }
}
if (false) {
    /** @type {?} */
    CachedRouteReuseStrategy.prototype.storedRouteHandles;
    /** @type {?} */
    CachedRouteReuseStrategy.prototype.allowRetrieveCache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3N0cmF0ZWd5L3NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFJQSxNQUFNLE9BQU8sd0JBQXdCO0lBQXJDO1FBQ0UsdUJBQWtCLEdBQUcsSUFBSSxHQUFHLEVBQStCLENBQUM7UUFDNUQsdUJBQWtCLEdBQUcsRUFBRSxDQUFDO0lBMkMxQixDQUFDOzs7Ozs7SUF6Q0MsZ0JBQWdCLENBQUMsTUFBOEIsRUFBRSxJQUE0QjtRQUMzRSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzVGLE9BQU8sTUFBTSxDQUFDLFdBQVcsS0FBSyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ2hEO1FBQ0QsT0FBTyxNQUFNLENBQUMsV0FBVyxLQUFLLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNwRyxDQUFDOzs7OztJQUVELFFBQVEsQ0FBQyxLQUE2QjtRQUNwQyxPQUFPLG1CQUFBLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUF1QixDQUFDO0lBQ2pGLENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLEtBQTZCOztjQUNsQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDaEMsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakMsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUN6RDtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFRCxZQUFZLENBQUMsS0FBNkI7O2NBQ2xDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUNoQyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDaEQsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7O0lBRUQsS0FBSyxDQUFDLEtBQTZCLEVBQUUsWUFBaUM7UUFDcEUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Ozs7OztJQUVPLFVBQVUsQ0FBQyxHQUFHO1FBQ3BCLE9BQU8sZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7Ozs7SUFFTyxPQUFPLENBQUMsS0FBNkI7UUFDM0MsSUFBSSxLQUFLLENBQUMsV0FBVyxLQUFLLElBQUksSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7WUFDakUsT0FBTyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztTQUMvQjtRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztDQUNGOzs7SUE1Q0Msc0RBQTREOztJQUM1RCxzREFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FjdGl2YXRlZFJvdXRlU25hcHNob3QsIERldGFjaGVkUm91dGVIYW5kbGV9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge1JvdXRlUmV1c2VTdHJhdGVneX0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyLyc7XG5cbi8vIGh0dHBzOi8vaXRuZXh0LmlvL2NhY2hlLWNvbXBvbmVudHMtd2l0aC1hbmd1bGFyLXJvdXRlcmV1c2VzdHJhdGVneS0zZTRjOGIxNzRkNWZcbmV4cG9ydCBjbGFzcyBDYWNoZWRSb3V0ZVJldXNlU3RyYXRlZ3kgaW1wbGVtZW50cyBSb3V0ZVJldXNlU3RyYXRlZ3kge1xuICBzdG9yZWRSb3V0ZUhhbmRsZXMgPSBuZXcgTWFwPHN0cmluZywgRGV0YWNoZWRSb3V0ZUhhbmRsZT4oKTtcbiAgYWxsb3dSZXRyaWV2ZUNhY2hlID0ge307XG5cbiAgc2hvdWxkUmV1c2VSb3V0ZShmdXR1cmU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIGN1cnI6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5pc0luT3V0bGV0KGZ1dHVyZVsnX3JvdXRlclN0YXRlJ10udXJsKSB8fCB0aGlzLmlzSW5PdXRsZXQoY3VyclsnX3JvdXRlclN0YXRlJ10udXJsKSkge1xuICAgICAgcmV0dXJuIGZ1dHVyZS5yb3V0ZUNvbmZpZyA9PT0gY3Vyci5yb3V0ZUNvbmZpZztcbiAgICB9XG4gICAgcmV0dXJuIGZ1dHVyZS5yb3V0ZUNvbmZpZyA9PT0gY3Vyci5yb3V0ZUNvbmZpZyAmJiAoZmFsc2UgIT09IChmdXR1cmUuZGF0YSAmJiBmdXR1cmUuZGF0YS4kcmV1c2UpKTtcbiAgfVxuXG4gIHJldHJpZXZlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KTogRGV0YWNoZWRSb3V0ZUhhbmRsZSB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLnN0b3JlZFJvdXRlSGFuZGxlcy5nZXQodGhpcy5nZXRQYXRoKHJvdXRlKSkgYXMgRGV0YWNoZWRSb3V0ZUhhbmRsZTtcbiAgfVxuXG4gIHNob3VsZEF0dGFjaChyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmdldFBhdGgocm91dGUpO1xuICAgIGlmICh0aGlzLmFsbG93UmV0cmlldmVDYWNoZVtwYXRoXSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RvcmVkUm91dGVIYW5kbGVzLmhhcyh0aGlzLmdldFBhdGgocm91dGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc2hvdWxkRGV0YWNoKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KTogYm9vbGVhbiB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuZ2V0UGF0aChyb3V0ZSk7XG4gICAgaWYgKHRoaXMuYWxsb3dSZXRyaWV2ZUNhY2hlLmhhc093blByb3BlcnR5KHBhdGgpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RvcmUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIGRldGFjaGVkVHJlZTogRGV0YWNoZWRSb3V0ZUhhbmRsZSk6IHZvaWQge1xuICAgIHRoaXMuc3RvcmVkUm91dGVIYW5kbGVzLnNldCh0aGlzLmdldFBhdGgocm91dGUpLCBkZXRhY2hlZFRyZWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0luT3V0bGV0KHVybCkge1xuICAgIHJldHVybiAvLipcXCguKjouKlxcKS4qLy50ZXN0KHVybCk7XG4gIH1cblxuICBwcml2YXRlIGdldFBhdGgocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBzdHJpbmcge1xuICAgIGlmIChyb3V0ZS5yb3V0ZUNvbmZpZyAhPT0gbnVsbCAmJiByb3V0ZS5yb3V0ZUNvbmZpZy5wYXRoICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gcm91dGUucm91dGVDb25maWcucGF0aDtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG4iXX0=