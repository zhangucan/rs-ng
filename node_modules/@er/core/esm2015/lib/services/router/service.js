/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NavigationCancel, NavigationEnd, NavigationError, NavigationStart, Router } from '@angular/router';
import { StateNames } from '@er/types';
import { StatesUtils } from '@er/utils';
import { RouteUtils } from '../../utils/nav';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
export class RouterStateService {
    /**
     * @param {?} router
     */
    constructor(router) {
        this.router = router;
        router.events.subscribe((event) => {
            this.navigationInterceptor(event);
        });
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    navigationInterceptor(event) {
        /** @type {?} */
        const activeRoute = RouteUtils.getActiveRoute();
        if (event instanceof NavigationStart) {
            StatesUtils.create(StateNames.nav, {
                start: true,
                url: activeRoute.url,
                outlet: activeRoute.outlet,
                route: activeRoute
            });
        }
        if (event instanceof NavigationEnd) {
            StatesUtils.update(StateNames.nav, {
                start: false,
                status: 'success',
                url: activeRoute.url,
                outlet: activeRoute.outlet,
                route: activeRoute
            });
            StatesUtils.update(StateNames.currentRoute, { activeRoute });
            /** @type {?} */
            const title = activeRoute.data && activeRoute.data['title'];
            if (title) {
                StatesUtils.update(StateNames.appTitle, { title });
            }
        }
        if (event instanceof NavigationCancel) {
            StatesUtils.update(StateNames.nav, {
                start: false,
                status: 'cancel',
                url: activeRoute.url,
                outlet: activeRoute.outlet,
                route: activeRoute
            });
        }
        if (event instanceof NavigationError) {
            StatesUtils.update(StateNames.nav, {
                start: false,
                status: 'error',
                url: activeRoute.url,
                outlet: activeRoute.outlet,
                route: activeRoute
            });
        }
    }
}
RouterStateService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
RouterStateService.ctorParameters = () => [
    { type: Router }
];
/** @nocollapse */ RouterStateService.ngInjectableDef = i0.defineInjectable({ factory: function RouterStateService_Factory() { return new RouterStateService(i0.inject(i1.Router)); }, token: RouterStateService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    RouterStateService.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3JvdXRlci9zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQWMsTUFBTSxpQkFBaUIsQ0FBQztBQUN2SCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGlCQUFpQixDQUFDOzs7QUFLM0MsTUFBTSxPQUFPLGtCQUFrQjs7OztJQUU3QixZQUFvQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQWtCLEVBQUUsRUFBRTtZQUM3QyxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7SUFFTyxxQkFBcUIsQ0FBQyxLQUFrQjs7Y0FFeEMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxjQUFjLEVBQUU7UUFFL0MsSUFBSSxLQUFLLFlBQVksZUFBZSxFQUFFO1lBQ3BDLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDakMsS0FBSyxFQUFFLElBQUk7Z0JBQ1gsR0FBRyxFQUFFLFdBQVcsQ0FBQyxHQUFHO2dCQUNwQixNQUFNLEVBQUUsV0FBVyxDQUFDLE1BQU07Z0JBQzFCLEtBQUssRUFBRSxXQUFXO2FBQ25CLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxLQUFLLFlBQVksYUFBYSxFQUFFO1lBQ2xDLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDakMsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osTUFBTSxFQUFFLFNBQVM7Z0JBQ2pCLEdBQUcsRUFBRSxXQUFXLENBQUMsR0FBRztnQkFDcEIsTUFBTSxFQUFFLFdBQVcsQ0FBQyxNQUFNO2dCQUMxQixLQUFLLEVBQUUsV0FBVzthQUNuQixDQUFDLENBQUM7WUFDSCxXQUFXLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsRUFBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDOztrQkFDckQsS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFJLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDM0QsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsV0FBVyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQzthQUNsRDtTQUNGO1FBRUQsSUFBSSxLQUFLLFlBQVksZ0JBQWdCLEVBQUU7WUFDckMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNqQyxLQUFLLEVBQUUsS0FBSztnQkFDWixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsR0FBRyxFQUFFLFdBQVcsQ0FBQyxHQUFHO2dCQUNwQixNQUFNLEVBQUUsV0FBVyxDQUFDLE1BQU07Z0JBQzFCLEtBQUssRUFBRSxXQUFXO2FBQ25CLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxLQUFLLFlBQVksZUFBZSxFQUFFO1lBQ3BDLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDakMsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osTUFBTSxFQUFFLE9BQU87Z0JBQ2YsR0FBRyxFQUFFLFdBQVcsQ0FBQyxHQUFHO2dCQUNwQixNQUFNLEVBQUUsV0FBVyxDQUFDLE1BQU07Z0JBQzFCLEtBQUssRUFBRSxXQUFXO2FBQ25CLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7O1lBMURGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQVAwRSxNQUFNOzs7Ozs7OztJQVVuRSxvQ0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOYXZpZ2F0aW9uQ2FuY2VsLCBOYXZpZ2F0aW9uRW5kLCBOYXZpZ2F0aW9uRXJyb3IsIE5hdmlnYXRpb25TdGFydCwgUm91dGVyLCBSb3V0ZXJFdmVudH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7U3RhdGVOYW1lc30gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7U3RhdGVzVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge1JvdXRlVXRpbHN9IGZyb20gJy4uLy4uL3V0aWxzL25hdic7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFJvdXRlclN0YXRlU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikge1xuICAgIHJvdXRlci5ldmVudHMuc3Vic2NyaWJlKChldmVudDogUm91dGVyRXZlbnQpID0+IHtcbiAgICAgIHRoaXMubmF2aWdhdGlvbkludGVyY2VwdG9yKGV2ZW50KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgbmF2aWdhdGlvbkludGVyY2VwdG9yKGV2ZW50OiBSb3V0ZXJFdmVudCkge1xuXG4gICAgY29uc3QgYWN0aXZlUm91dGUgPSBSb3V0ZVV0aWxzLmdldEFjdGl2ZVJvdXRlKCk7XG5cbiAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uU3RhcnQpIHtcbiAgICAgIFN0YXRlc1V0aWxzLmNyZWF0ZShTdGF0ZU5hbWVzLm5hdiwge1xuICAgICAgICBzdGFydDogdHJ1ZSxcbiAgICAgICAgdXJsOiBhY3RpdmVSb3V0ZS51cmwsXG4gICAgICAgIG91dGxldDogYWN0aXZlUm91dGUub3V0bGV0LFxuICAgICAgICByb3V0ZTogYWN0aXZlUm91dGVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQpIHtcbiAgICAgIFN0YXRlc1V0aWxzLnVwZGF0ZShTdGF0ZU5hbWVzLm5hdiwge1xuICAgICAgICBzdGFydDogZmFsc2UsXG4gICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnLFxuICAgICAgICB1cmw6IGFjdGl2ZVJvdXRlLnVybCxcbiAgICAgICAgb3V0bGV0OiBhY3RpdmVSb3V0ZS5vdXRsZXQsXG4gICAgICAgIHJvdXRlOiBhY3RpdmVSb3V0ZVxuICAgICAgfSk7XG4gICAgICBTdGF0ZXNVdGlscy51cGRhdGUoU3RhdGVOYW1lcy5jdXJyZW50Um91dGUsIHthY3RpdmVSb3V0ZX0pO1xuICAgICAgY29uc3QgdGl0bGUgPSBhY3RpdmVSb3V0ZS5kYXRhICYmIGFjdGl2ZVJvdXRlLmRhdGFbJ3RpdGxlJ107XG4gICAgICBpZiAodGl0bGUpIHtcbiAgICAgICAgU3RhdGVzVXRpbHMudXBkYXRlKFN0YXRlTmFtZXMuYXBwVGl0bGUsIHt0aXRsZX0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25DYW5jZWwpIHtcbiAgICAgIFN0YXRlc1V0aWxzLnVwZGF0ZShTdGF0ZU5hbWVzLm5hdiwge1xuICAgICAgICBzdGFydDogZmFsc2UsXG4gICAgICAgIHN0YXR1czogJ2NhbmNlbCcsXG4gICAgICAgIHVybDogYWN0aXZlUm91dGUudXJsLFxuICAgICAgICBvdXRsZXQ6IGFjdGl2ZVJvdXRlLm91dGxldCxcbiAgICAgICAgcm91dGU6IGFjdGl2ZVJvdXRlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRXJyb3IpIHtcbiAgICAgIFN0YXRlc1V0aWxzLnVwZGF0ZShTdGF0ZU5hbWVzLm5hdiwge1xuICAgICAgICBzdGFydDogZmFsc2UsXG4gICAgICAgIHN0YXR1czogJ2Vycm9yJyxcbiAgICAgICAgdXJsOiBhY3RpdmVSb3V0ZS51cmwsXG4gICAgICAgIG91dGxldDogYWN0aXZlUm91dGUub3V0bGV0LFxuICAgICAgICByb3V0ZTogYWN0aXZlUm91dGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIl19