/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { LogUtils } from '../../utils/log';
import * as i0 from "@angular/core";
export class ConfigurablePreloadingStrategy {
    constructor() {
        this.preloadedModules = [];
    }
    /**
     * @param {?} route
     * @param {?} load
     * @return {?}
     */
    preload(route, load) {
        if (route.data && route.data['preload']) {
            this.preloadedModules.push(route.path);
            LogUtils.debug('Preloaded: ', route.path);
            return load();
        }
        else {
            return of(null);
        }
    }
}
ConfigurablePreloadingStrategy.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ ConfigurablePreloadingStrategy.ngInjectableDef = i0.defineInjectable({ factory: function ConfigurablePreloadingStrategy_Factory() { return new ConfigurablePreloadingStrategy(); }, token: ConfigurablePreloadingStrategy, providedIn: "root" });
if (false) {
    /** @type {?} */
    ConfigurablePreloadingStrategy.prototype.preloadedModules;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3ByZS1sb2FkaW5nL3NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFhLEVBQUUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNwQyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7O0FBS3pDLE1BQU0sT0FBTyw4QkFBOEI7SUFIM0M7UUFJRSxxQkFBZ0IsR0FBYSxFQUFFLENBQUM7S0FjakM7Ozs7OztJQVpDLE9BQU8sQ0FBQyxLQUFZLEVBQUUsSUFBMkI7UUFDL0MsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFFdkMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFdkMsUUFBUSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRTFDLE9BQU8sSUFBSSxFQUFFLENBQUM7U0FDZjthQUFNO1lBQ0wsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakI7SUFDSCxDQUFDOzs7WUFqQkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7OztJQUVDLDBEQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1ByZWxvYWRpbmdTdHJhdGVneSwgUm91dGV9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge09ic2VydmFibGUsIG9mfSBmcm9tICdyeGpzJztcbmltcG9ydCB7TG9nVXRpbHN9IGZyb20gJy4uLy4uL3V0aWxzL2xvZyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENvbmZpZ3VyYWJsZVByZWxvYWRpbmdTdHJhdGVneSBpbXBsZW1lbnRzIFByZWxvYWRpbmdTdHJhdGVneSB7XG4gIHByZWxvYWRlZE1vZHVsZXM6IHN0cmluZ1tdID0gW107XG5cbiAgcHJlbG9hZChyb3V0ZTogUm91dGUsIGxvYWQ6ICgpID0+IE9ic2VydmFibGU8YW55Pik6IE9ic2VydmFibGU8YW55PiB7XG4gICAgaWYgKHJvdXRlLmRhdGEgJiYgcm91dGUuZGF0YVsncHJlbG9hZCddKSB7XG5cbiAgICAgIHRoaXMucHJlbG9hZGVkTW9kdWxlcy5wdXNoKHJvdXRlLnBhdGgpO1xuXG4gICAgICBMb2dVdGlscy5kZWJ1ZygnUHJlbG9hZGVkOiAnLCByb3V0ZS5wYXRoKTtcblxuICAgICAgcmV0dXJuIGxvYWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9mKG51bGwpO1xuICAgIH1cbiAgfVxufVxuIl19