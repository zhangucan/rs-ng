/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonsUtils } from '@er/utils';
export class ChangesUtils {
    /**
     * @param {?} diff
     * @return {?}
     */
    static getChangeByDiff(diff) {
        if (!diff) {
            return {};
        }
        /** @type {?} */
        const changes = {
            changed: [],
            added: [],
            deleted: []
        };
        if (diff) {
            diff.forEachChangedItem(r => {
                changes.changed.push({
                    key: r.key,
                    value: r.currentValue,
                    from: r.previousValue
                });
            });
            diff.forEachAddedItem(r => {
                changes.added.push({
                    key: r.key,
                    value: r.currentValue
                });
            });
            diff.forEachRemovedItem(r => {
                changes.deleted.push({
                    key: r.key,
                    value: r.previousValue
                });
            });
        }
        return CommonsUtils.omitBy(changes, CommonsUtils.lodash().isEmpty);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9jaGFuZ2VzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRXZDLE1BQU0sT0FBTyxZQUFZOzs7OztJQUV2QixNQUFNLENBQUMsZUFBZSxDQUFDLElBQStCO1FBS3BELElBQUksQ0FBQyxJQUFJLEVBQUU7WUFBRSxPQUFPLEVBQUUsQ0FBQztTQUFFOztjQUNuQixPQUFPLEdBQUc7WUFDZCxPQUFPLEVBQUUsRUFBRTtZQUNYLEtBQUssRUFBRSxFQUFFO1lBQ1QsT0FBTyxFQUFFLEVBQUU7U0FDWjtRQUNELElBQUksSUFBSSxFQUFFO1lBQ1IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUMxQixPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztvQkFDbkIsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHO29CQUNWLEtBQUssRUFBRSxDQUFDLENBQUMsWUFBWTtvQkFDckIsSUFBSSxFQUFFLENBQUMsQ0FBQyxhQUFhO2lCQUN0QixDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDeEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7b0JBQ2pCLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRztvQkFDVixLQUFLLEVBQUUsQ0FBQyxDQUFDLFlBQVk7aUJBQ3RCLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUMxQixPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztvQkFDbkIsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHO29CQUNWLEtBQUssRUFBRSxDQUFDLENBQUMsYUFBYTtpQkFDdkIsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7S2V5VmFsdWVDaGFuZ2VzfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgQ2hhbmdlc1V0aWxzIHtcblxuICBzdGF0aWMgZ2V0Q2hhbmdlQnlEaWZmKGRpZmY6IEtleVZhbHVlQ2hhbmdlczxhbnksIGFueT4pOiB7XG4gICAgY2hhbmdlZD86IHsga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnksIGZyb206IGFueSB9W10sXG4gICAgYWRkZWQ/OiB7IGtleTogc3RyaW5nLCB2YWx1ZTogYW55IH1bXSxcbiAgICBkZWxldGVkPzogeyBrZXk6IHN0cmluZywgdmFsdWU6IGFueSB9W11cbiAgfSB7XG4gICAgaWYgKCFkaWZmKSB7IHJldHVybiB7fTsgfVxuICAgIGNvbnN0IGNoYW5nZXMgPSB7XG4gICAgICBjaGFuZ2VkOiBbXSxcbiAgICAgIGFkZGVkOiBbXSxcbiAgICAgIGRlbGV0ZWQ6IFtdXG4gICAgfTtcbiAgICBpZiAoZGlmZikge1xuICAgICAgZGlmZi5mb3JFYWNoQ2hhbmdlZEl0ZW0ociA9PiB7XG4gICAgICAgIGNoYW5nZXMuY2hhbmdlZC5wdXNoKHtcbiAgICAgICAgICBrZXk6IHIua2V5LFxuICAgICAgICAgIHZhbHVlOiByLmN1cnJlbnRWYWx1ZSxcbiAgICAgICAgICBmcm9tOiByLnByZXZpb3VzVmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGRpZmYuZm9yRWFjaEFkZGVkSXRlbShyID0+IHtcbiAgICAgICAgY2hhbmdlcy5hZGRlZC5wdXNoKHtcbiAgICAgICAgICBrZXk6IHIua2V5LFxuICAgICAgICAgIHZhbHVlOiByLmN1cnJlbnRWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZGlmZi5mb3JFYWNoUmVtb3ZlZEl0ZW0ociA9PiB7XG4gICAgICAgIGNoYW5nZXMuZGVsZXRlZC5wdXNoKHtcbiAgICAgICAgICBrZXk6IHIua2V5LFxuICAgICAgICAgIHZhbHVlOiByLnByZXZpb3VzVmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIENvbW1vbnNVdGlscy5vbWl0QnkoY2hhbmdlcywgQ29tbW9uc1V0aWxzLmxvZGFzaCgpLmlzRW1wdHkpO1xuICB9XG59XG4iXX0=