/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Order } from '@er/types';
import { CommonsUtils, DialogUtils, StatesUtils } from '@er/utils';
import * as esb from 'elastic-builder';
import { throwError } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { ApiUtils } from '../api';
/**
 * @record
 */
export function NextSeqProps() { }
if (false) {
    /** @type {?|undefined} */
    NextSeqProps.prototype.apiEntry;
    /** @type {?|undefined} */
    NextSeqProps.prototype.parent;
    /** @type {?|undefined} */
    NextSeqProps.prototype.query;
    /** @type {?|undefined} */
    NextSeqProps.prototype.parentKey;
    /** @type {?|undefined} */
    NextSeqProps.prototype.seqKey;
    /** @type {?|undefined} */
    NextSeqProps.prototype.seqLen;
    /** @type {?|undefined} */
    NextSeqProps.prototype.withParent;
}
/**
 * @record
 */
export function DistinctValueProps() { }
if (false) {
    /** @type {?|undefined} */
    DistinctValueProps.prototype.apiProps;
    /** @type {?|undefined} */
    DistinctValueProps.prototype.id;
}
export class DataUtils {
    /**
     * @param {?} options
     * @return {?}
     */
    static getNextValue(options) {
        /** @type {?} */
        const opt = CommonsUtils.defaults(options || {}, DataUtils.DEFAULT_PROPS);
        /** @type {?} */
        const q = CommonsUtils.getArrayValue(opt.query) || [];
        if (opt.parent) {
            q.push(esb.termQuery(opt.parentKey, opt.parent));
        }
        return ApiUtils.getByQuery(`${opt.apiEntry}`, (/** @type {?} */ ({
            query: q,
            sort: { [opt.seqKey]: Order.DESC },
            size: 1
        }))).pipe(map((data) => {
            /** @type {?} */
            const prefix = '0'.repeat(opt.seqLen);
            /** @type {?} */
            let next = 1;
            if (data.total !== 0) {
                /** @type {?} */
                const last = data.items[0];
                if (last[opt.seqKey]) {
                    next = parseInt(last[opt.seqKey].replace(/^0+/, '')) + 1;
                }
                else {
                    DialogUtils.error('错误', '无法生成新的序列号');
                    throwError('无法生成新的序列号');
                }
            }
            /** @type {?} */
            const seq = (prefix + next).slice(-prefix.length);
            if (opt.withParent && opt.parent) {
                return opt.parent + seq;
            }
            else {
                return seq;
            }
        }));
    }
    /**
     * @param {?} props
     * @return {?}
     */
    static checkDistinct(props) {
        /** @type {?} */
        const result$ = ApiUtils.fetch(Object.assign({}, props.apiProps, { size: 2 })).pipe(map((data) => !data.items || data.items.length === 0 ||
            (data.items.length === 1 && data.items[0]['id'] === props.id)), tap(distinct => {
            if (!distinct) {
                DialogUtils.error('验证失败', `数值【${props.apiProps.queryValue}】已经存在，请修改后再执行本操作！`);
            }
        }));
        return result$;
    }
    /**
     * @param {?} event
     * @param {?} keyOrQuery
     * @return {?}
     */
    static onNodeSelect(event, keyOrQuery) {
        /** @type {?} */
        const treeProps = event['$from'].$props;
        /** @type {?} */
        const tableId = CommonsUtils.get(treeProps, '$ext.$container.table.$id');
        if (tableId) {
            /** @type {?} */
            let q = keyOrQuery;
            /** @type {?} */
            const nodeCode = event.node.data && event.node.data.code;
            if (nodeCode && CommonsUtils.isString(keyOrQuery)) {
                q = esb.prefixQuery(keyOrQuery, nodeCode);
            }
            StatesUtils.update(tableId, (/** @type {?} */ ({
                query: nodeCode ? q : esb.matchAllQuery()
            })));
        }
    }
}
DataUtils.DEFAULT_ROOT_SEQ = '001';
DataUtils.DEFAULT_PROPS = {
    parentKey: 'parent.code',
    seqKey: 'code',
    seqLen: 3
};
if (false) {
    /** @type {?} */
    DataUtils.DEFAULT_ROOT_SEQ;
    /** @type {?} */
    DataUtils.DEFAULT_PROPS;
}
//# sourceMappingURL=data:application/json;base64,