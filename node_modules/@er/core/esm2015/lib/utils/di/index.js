/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ApplicationRef } from '@angular/core';
import { CacheUtils } from '@er/utils';
/** @type {?} */
const cacheKey = '$rootInjectables';
/** @type {?} */
let viewContainerRef = null;
export class DiUtils {
    /**
     * @template T
     * @param {?} token
     * @return {?}
     */
    static get(token) {
        /** @type {?} */
        let cached = CacheUtils.get(cacheKey, token);
        if (!cached) {
            if (!DiUtils.injector) {
                throw new Error('rootInjector 初始化失败');
            }
            cached = DiUtils.injector.get(token);
            if (cached) {
                CacheUtils.put(cacheKey, token, cached);
            }
        }
        return cached;
    }
    /**
     * @return {?}
     */
    static getRootViewContainerRef() {
        if (!viewContainerRef) {
            /** @type {?} */
            const applicationRef = DiUtils.get(ApplicationRef);
            /** @type {?} */
            const appInstance = applicationRef.components[0].instance;
            if (!appInstance.rootViewContainerRef) {
                /** @type {?} */
                const appName = applicationRef.componentTypes[0].name;
                throw new Error(`${appName} constructor中未定义rootViewContainerRef`);
            }
            viewContainerRef = appInstance.rootViewContainerRef;
        }
        return viewContainerRef;
    }
}
DiUtils.injector = null;
if (false) {
    /** @type {?} */
    DiUtils.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9kaS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLGNBQWMsRUFBbUIsTUFBTSxlQUFlLENBQUM7QUFDL0QsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFdBQVcsQ0FBQzs7TUFFL0IsUUFBUSxHQUFHLGtCQUFrQjs7SUFDL0IsZ0JBQWdCLEdBQXFCLElBQUk7QUFFN0MsTUFBTSxPQUFPLE9BQU87Ozs7OztJQUlsQixNQUFNLENBQUMsR0FBRyxDQUFJLEtBQUs7O1lBQ2IsTUFBTSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQztRQUM1QyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUU7Z0JBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQzthQUN2QztZQUNELE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyQyxJQUFJLE1BQU0sRUFBRTtnQkFDVixVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDekM7U0FDRjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Ozs7SUFFRCxNQUFNLENBQUMsdUJBQXVCO1FBQzVCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTs7a0JBQ2YsY0FBYyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQWlCLGNBQWMsQ0FBQzs7a0JBQzVELFdBQVcsR0FBRyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVE7WUFDekQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsRUFBRTs7c0JBQy9CLE9BQU8sR0FBRyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7Z0JBQ3JELE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxPQUFPLHNDQUFzQyxDQUFDLENBQUM7YUFDbkU7WUFDRCxnQkFBZ0IsR0FBRyxXQUFXLENBQUMsb0JBQW9CLENBQUM7U0FDckQ7UUFDRCxPQUFPLGdCQUFnQixDQUFDO0lBQzFCLENBQUM7O0FBM0JNLGdCQUFRLEdBQUcsSUFBSSxDQUFDOzs7SUFBdkIsaUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBcHBsaWNhdGlvblJlZiwgVmlld0NvbnRhaW5lclJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0NhY2hlVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5cbmNvbnN0IGNhY2hlS2V5ID0gJyRyb290SW5qZWN0YWJsZXMnO1xubGV0IHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYgPSBudWxsO1xuXG5leHBvcnQgY2xhc3MgRGlVdGlscyB7XG5cbiAgc3RhdGljIGluamVjdG9yID0gbnVsbDtcblxuICBzdGF0aWMgZ2V0PFQ+KHRva2VuKTogVCB7XG4gICAgbGV0IGNhY2hlZCA9IENhY2hlVXRpbHMuZ2V0KGNhY2hlS2V5LCB0b2tlbik7XG4gICAgaWYgKCFjYWNoZWQpIHtcbiAgICAgIGlmICghRGlVdGlscy5pbmplY3Rvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Jvb3RJbmplY3RvciDliJ3lp4vljJblpLHotKUnKTtcbiAgICAgIH1cbiAgICAgIGNhY2hlZCA9IERpVXRpbHMuaW5qZWN0b3IuZ2V0KHRva2VuKTtcbiAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgQ2FjaGVVdGlscy5wdXQoY2FjaGVLZXksIHRva2VuLCBjYWNoZWQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2FjaGVkO1xuICB9XG5cbiAgc3RhdGljIGdldFJvb3RWaWV3Q29udGFpbmVyUmVmKCk6IFZpZXdDb250YWluZXJSZWYge1xuICAgIGlmICghdmlld0NvbnRhaW5lclJlZikge1xuICAgICAgY29uc3QgYXBwbGljYXRpb25SZWYgPSBEaVV0aWxzLmdldDxBcHBsaWNhdGlvblJlZj4oQXBwbGljYXRpb25SZWYpO1xuICAgICAgY29uc3QgYXBwSW5zdGFuY2UgPSBhcHBsaWNhdGlvblJlZi5jb21wb25lbnRzWzBdLmluc3RhbmNlO1xuICAgICAgaWYgKCFhcHBJbnN0YW5jZS5yb290Vmlld0NvbnRhaW5lclJlZikge1xuICAgICAgICBjb25zdCBhcHBOYW1lID0gYXBwbGljYXRpb25SZWYuY29tcG9uZW50VHlwZXNbMF0ubmFtZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2FwcE5hbWV9IGNvbnN0cnVjdG9y5Lit5pyq5a6a5LmJcm9vdFZpZXdDb250YWluZXJSZWZgKTtcbiAgICAgIH1cbiAgICAgIHZpZXdDb250YWluZXJSZWYgPSBhcHBJbnN0YW5jZS5yb290Vmlld0NvbnRhaW5lclJlZjtcbiAgICB9XG4gICAgcmV0dXJuIHZpZXdDb250YWluZXJSZWY7XG4gIH1cblxufVxuIl19