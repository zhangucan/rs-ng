/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter } from '@angular/core';
import { CommonsUtils } from '@er/utils';
import { takeUntil } from 'rxjs/operators';
import { LogUtils } from '../log/index';
export class ComponentUtils {
    /**
     * @param {?} compInstance
     * @param {?} props
     * @return {?}
     */
    static resolveProps(compInstance, props) {
        /** @type {?} */
        const result = {
            inputs: {},
            outputs: {}
        };
        if (compInstance && CommonsUtils.isJson(props)) {
            Object.keys(props).forEach(key => {
                if (compInstance[key] instanceof EventEmitter) {
                    result.outputs[key] = props[key];
                }
                else {
                    result.inputs[key] = props[key];
                }
            });
        }
        return result;
    }
    /**
     * @param {?} compInstance
     * @param {?} hooks
     * @param {?} constructor
     * @param {?} destructor
     * @return {?}
     */
    static bindLifeCycles(compInstance, hooks, constructor, destructor) {
        /** @type {?} */
        let originalLifeCycles;
        if (hooks) {
            originalLifeCycles = {};
            Object.keys(hooks).forEach(eventName => {
                /** @type {?} */
                const ngEventName = `ng${CommonsUtils.capitalize(eventName)}`;
                if (compInstance[`__${ngEventName}`] === true) {
                    ((/** @type {?} */ (hooks[eventName]))).call(compInstance, compInstance);
                }
                else {
                    /** @type {?} */
                    const original = constructor.prototype[ngEventName];
                    constructor.prototype[ngEventName] = function () {
                        CommonsUtils.isFunction(original) && original.apply(compInstance, arguments);
                        /** @type {?} */
                        const args = Array.prototype.slice.call(arguments);
                        ((/** @type {?} */ (hooks[eventName]))).call(compInstance, ...args, compInstance);
                    };
                    originalLifeCycles[ngEventName] = original;
                }
            });
            if (Object.keys(originalLifeCycles).length > 0) {
                /** @type {?} */
                const destroyLifeCycle = 'ngOnDestroy';
                constructor.prototype[destroyLifeCycle] = function () {
                    Object.keys(originalLifeCycles).forEach(lifeCycleName => {
                        constructor.prototype[lifeCycleName] = originalLifeCycles[lifeCycleName];
                    });
                    CommonsUtils.isFunction(destructor) && destructor.apply(compInstance);
                    constructor.prototype[destroyLifeCycle] = destructor;
                };
            }
        }
    }
    // static bindLifeCycles(compInstance, hooks) {
    //   if (!CommonsUtils.isEmpty(hooks)) {
    //     Object.keys(hooks).forEach(eventName => {
    //       const hookName = `ng${CommonsUtils.capitalize(eventName)}`;
    //       const original = compInstance.__proto__[hookName];
    //       compInstance.__proto__[hookName] = function () {
    //         CommonsUtils.isFunction(original) && original.apply(compInstance, arguments);
    //         const args = Array.prototype.slice.call(arguments);
    //         (<Function>hooks[eventName]).call(compInstance, ...args, compInstance);
    //       };
    //     });
    //   }
    // }
    /**
     * set component instance attributes and event from props object
     * @param {?} compInstance
     * @param {?} props
     * @param {?=} unSubscribe
     * @return {?}
     */
    static bind(compInstance, props, unSubscribe) {
        for (const prop in props) {
            if (prop === 'hooks') {
                /** @type {?} */
                const constructor = ComponentUtils.getConstructor(compInstance);
                /** @type {?} */
                const destructor = constructor.prototype['ngOnDestroy'];
                ComponentUtils.bindLifeCycles(compInstance, props[prop], constructor, destructor);
            }
            else if ((compInstance[prop] instanceof EventEmitter)) {
                ((/** @type {?} */ (compInstance[prop])))
                    .pipe(takeUntil(unSubscribe || compInstance['destroyed$']))
                    .subscribe(event => {
                    try {
                        if (CommonsUtils.isFunction(compInstance['getEventContext'])) {
                            event = compInstance.getEventContext(event);
                        }
                        props[prop].call(compInstance, event);
                    }
                    catch (e) {
                        LogUtils.error(compInstance, '操作失败', e);
                    }
                });
            }
            else {
                compInstance[prop] = props[prop];
            }
        }
    }
    /**
     * @param {?} compInstance
     * @param {?} methodName
     * @param {?} newFun
     * @param {?=} position
     * @return {?}
     */
    static reWriteMethod(compInstance, methodName, newFun, position = 'after') {
        /** @type {?} */
        const buildInFn = compInstance[methodName];
        Object.defineProperty(compInstance, methodName, {
            get: () => {
                return (args) => {
                    if (buildInFn && position === 'after') {
                        buildInFn.call(compInstance, args);
                    }
                    newFun.call(compInstance, args);
                    if (buildInFn && position === 'before') {
                        buildInFn.call(compInstance, args);
                    }
                };
            }
        });
    }
    /**
     * @param {?} viewContainer
     * @return {?}
     */
    static getHostComponentInst(viewContainer) {
        if (viewContainer) {
            /** @type {?} */
            const componentView = viewContainer['_data'].componentView;
            if (componentView) {
                return componentView.component;
            }
        }
        return null;
    }
    /**
     * @param {?} viewContainer
     * @return {?}
     */
    static getViewComponentRef(viewContainer) {
        if (viewContainer) {
            /** @type {?} */
            const view = viewContainer['_view'];
            if (view) {
                return view.component;
            }
        }
        return null;
    }
    /**
     * @param {?} component
     * @return {?}
     */
    static getConstructor(component) {
        return component.__proto__.constructor;
    }
}
//# sourceMappingURL=data:application/json;base64,