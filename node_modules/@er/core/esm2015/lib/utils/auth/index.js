/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StateNames } from '@er/types';
import { CommonsUtils, ConfigUtils, JwtUtils, StatesUtils } from '@er/utils';
import { filter, tap } from 'rxjs/operators';
import { ApiUtils } from '../api';
import { RouteUtils } from '../nav';
import { PermissionUtils } from '../permission';
/**
 * @param {?} route
 * @param {?} state
 * @return {?}
 */
export function anyRoleUser(route, state) {
    if (AuthUtils.getCurrentUser().roles) {
        return AuthUtils.getCurrentUser().roles;
    }
    else {
        return 'NO_ROLE_USER';
    }
}
export class AuthUtils {
    /**
     * @param {?} payLoad
     * @param {?=} isRememberMe
     * @return {?}
     */
    static login(payLoad, isRememberMe) {
        /** @type {?} */
        const login$ = ApiUtils.login(Object.assign({}, payLoad, { rememberMe: isRememberMe }), Object.assign({}, ConfigUtils.getConfig().auth.loginApiOptions || {}, { tag: StateNames.auth }))
            .pipe(filter(loginUser => !!loginUser), tap(loginUser => {
            if (loginUser.jwtToken) {
                if (ConfigUtils.getConfig().auth.getUserInfo) {
                    ConfigUtils.getConfig().auth.getUserInfo(loginUser)
                        .subscribe(userInfo => {
                        /** @type {?} */
                        const user = Object.assign({}, loginUser, userInfo);
                        AuthUtils.onLoginSuccess(user, isRememberMe);
                    });
                }
                else {
                    AuthUtils.onLoginSuccess(loginUser, isRememberMe);
                }
            }
        }));
        return login$;
    }
    /**
     * @param {?} payLoad
     * @return {?}
     */
    static register(payLoad) {
        /** @type {?} */
        const reg$ = ApiUtils.register(payLoad, Object.assign({}, ConfigUtils.getConfig().auth.registerApiOptions || ConfigUtils.getConfig().auth.loginApiOptions, { tag: StateNames.auth }));
        return reg$;
    }
    /**
     * @return {?}
     */
    static logout() {
        ApiUtils.logout(Object.assign({}, ConfigUtils.getConfig().auth.logoutApiOptions || ConfigUtils.getConfig().auth.loginApiOptions, { tag: StateNames.auth }))
            .subscribe(success => {
            if (success) {
                AuthUtils.updateUser({});
                PermissionUtils.clearRoles();
                PermissionUtils.clearPermission();
                /** @type {?} */
                const url = ConfigUtils.getConfig().auth.logoutSuccessRouter;
                RouteUtils.nav(url);
            }
        });
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    static changePwd(payload) {
        /** @type {?} */
        const pwd$ = ApiUtils.changePwd(payload, Object.assign({}, ConfigUtils.getConfig().auth.changePwdApiOptions || ConfigUtils.getConfig().auth.loginApiOptions, { tag: StateNames.auth }));
        return pwd$;
    }
    /**
     * @return {?}
     */
    static getCurrentUser() {
        if (AuthUtils.CURRENT_USER) {
            return AuthUtils.CURRENT_USER || {};
        }
        /** @type {?} */
        const storageKey = ConfigUtils.getConfig().auth.storageKey;
        /** @type {?} */
        let user = (/** @type {?} */ ((JSON.parse(sessionStorage.getItem(storageKey)))));
        if (!user) {
            user = (/** @type {?} */ ((JSON.parse(localStorage.getItem(storageKey)))));
        }
        if (user && user.isSu) {
            user.isAdmin = true;
        }
        AuthUtils.CURRENT_USER = user;
        return AuthUtils.CURRENT_USER || {};
    }
    /**
     * @param {?} patch
     * @param {?=} remeber
     * @return {?}
     */
    static updateUser(patch, remeber) {
        if (!CommonsUtils.isEmpty(patch)) {
            AuthUtils.CURRENT_USER = Object.assign({}, AuthUtils.CURRENT_USER, patch);
        }
        else {
            AuthUtils.CURRENT_USER = {};
        }
        StatesUtils.update(StateNames.user, AuthUtils.CURRENT_USER);
        /** @type {?} */
        const storageKey = ConfigUtils.getConfig().auth.storageKey;
        sessionStorage.setItem(storageKey, JSON.stringify(AuthUtils.CURRENT_USER));
        if (remeber) {
            if (!CommonsUtils.isEmpty(AuthUtils.CURRENT_USER)) {
                localStorage.setItem(storageKey, JSON.stringify(AuthUtils.CURRENT_USER));
            }
            else {
                localStorage.removeItem(storageKey);
            }
        }
    }
    /**
     * @param {?} returnUrl
     * @return {?}
     */
    static checkLogin(returnUrl) {
        /** @type {?} */
        const currentUser = AuthUtils.getCurrentUser();
        if (currentUser.jwtToken && JwtUtils.isValid(currentUser.jwtToken)) {
            return true;
        }
        else {
            if (true === StatesUtils.getValue(StateNames.auth, 'dialog')) {
                StatesUtils.update(StateNames.popup, {
                    content: ConfigUtils.getConfig().auth.component,
                    header: ConfigUtils.getConfig().auth.title,
                    visible: true,
                    minWidth: 500,
                    minHeight: 300,
                    contentMaxWidth: 500,
                    contentMaxHeight: 300
                });
            }
            else {
                /** @type {?} */
                const loginRouter = ConfigUtils.getConfig().auth.loginRouter;
                StatesUtils.update(StateNames.auth, { successUrl: returnUrl });
                RouteUtils.nav(loginRouter);
            }
            return false;
        }
    }
    /**
     * @private
     * @param {?} user
     * @param {?} isRememberMe
     * @return {?}
     */
    static onLoginSuccess(user, isRememberMe) {
        if (ConfigUtils.getConfig().auth.onLoginSuccess) {
            ConfigUtils.getConfig().auth.onLoginSuccess(user);
        }
        user.enabled = true;
        AuthUtils.updateUser(user, isRememberMe);
        PermissionUtils.addRoles(user.roles);
        if (ConfigUtils.getConfig().auth.defaultRules) {
            PermissionUtils.addRoles(ConfigUtils.getConfig().auth.defaultRules);
        }
        PermissionUtils.addPermissions(user.permissions || []);
        /** @type {?} */
        const key = ConfigUtils.getConfig().auth.requiredUserProps;
        if (key) {
            if (!CommonsUtils.get(user, key)) {
                RouteUtils.nav(ConfigUtils.getConfig().auth.failedPropsRouter);
            }
            else {
                /** @type {?} */
                const successUrl = ConfigUtils.getConfig().auth.loginSuccessRouter;
                RouteUtils.nav(successUrl);
            }
        }
        else {
            /** @type {?} */
            const successUrl = ConfigUtils.getConfig().auth.loginSuccessRouter;
            RouteUtils.nav(successUrl);
        }
    }
}
AuthUtils.CURRENT_USER = null;
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthUtils.CURRENT_USER;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9hdXRoL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUMsVUFBVSxFQUFPLE1BQU0sV0FBVyxDQUFDO0FBQzNDLE9BQU8sRUFBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFM0UsT0FBTyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFDbEMsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7Ozs7O0FBRTlDLE1BQU0sVUFBVSxXQUFXLENBQUMsS0FBNkIsRUFBRSxLQUEwQjtJQUNuRixJQUFJLFNBQVMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLEVBQUU7UUFDcEMsT0FBTyxTQUFTLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxDQUFDO0tBQ3pDO1NBQU07UUFDTCxPQUFPLGNBQWMsQ0FBQztLQUN2QjtBQUNILENBQUM7QUFFRCxNQUFNLE9BQU8sU0FBUzs7Ozs7O0lBSXBCLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBVyxFQUFFLFlBQXNCOztjQUN4QyxNQUFNLEdBQUcsUUFBUSxDQUFDLEtBQUssbUJBQ3hCLE9BQU8sSUFDVixVQUFVLEVBQUUsWUFBWSx1QkFFckIsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksRUFBRSxJQUNyRCxHQUFHLEVBQUUsVUFBVSxDQUFDLElBQUksSUFDcEI7YUFDQyxJQUFJLENBQ0gsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUNoQyxHQUFH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QUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3pDLGVBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDN0MsZUFBZSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3JFO1FBQ0QsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQyxDQUFDOztjQUNqRCxHQUFHLEdBQUcsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUI7UUFDMUQsSUFBSSxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUU7Z0JBQ2hDLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2FBQ2hFO2lCQUFNOztzQkFDQyxVQUFVLEdBQUcsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0I7Z0JBQ2xFLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDNUI7U0FDRjthQUFNOztrQkFDQyxVQUFVLEdBQUcsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0I7WUFDbEUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUM1QjtJQUNILENBQUM7O0FBdEpjLHNCQUFZLEdBQVMsSUFBSSxDQUFDOzs7Ozs7SUFBekMsdUJBQXlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSb3V0ZXJTdGF0ZVNuYXBzaG90fSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtTdGF0ZU5hbWVzLCBVc2VyfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb21tb25zVXRpbHMsIENvbmZpZ1V0aWxzLCBKd3RVdGlscywgU3RhdGVzVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmaWx0ZXIsIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtBcGlVdGlsc30gZnJvbSAnLi4vYXBpJztcbmltcG9ydCB7Um91dGVVdGlsc30gZnJvbSAnLi4vbmF2JztcbmltcG9ydCB7UGVybWlzc2lvblV0aWxzfSBmcm9tICcuLi9wZXJtaXNzaW9uJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFueVJvbGVVc2VyKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCkge1xuICBpZiAoQXV0aFV0aWxzLmdldEN1cnJlbnRVc2VyKCkucm9sZXMpIHtcbiAgICByZXR1cm4gQXV0aFV0aWxzLmdldEN1cnJlbnRVc2VyKCkucm9sZXM7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICdOT19ST0xFX1VTRVInO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBdXRoVXRpbHMge1xuXG4gIHByaXZhdGUgc3RhdGljIENVUlJFTlRfVVNFUjogVXNlciA9IG51bGw7XG5cbiAgc3RhdGljIGxvZ2luKHBheUxvYWQ6IHt9LCBpc1JlbWVtYmVyTWU/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCBsb2dpbiQgPSBBcGlVdGlscy5sb2dpbih7XG4gICAgICAuLi5wYXlMb2FkLFxuICAgICAgcmVtZW1iZXJNZTogaXNSZW1lbWJlck1lXG4gICAgfSwge1xuICAgICAgLi4uQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkuYXV0aC5sb2dpbkFwaU9wdGlvbnMgfHwge30sXG4gICAgICB0YWc6IFN0YXRlTmFtZXMuYXV0aFxuICAgIH0pXG4gICAgICAucGlwZShcbiAgICAgICAgZmlsdGVyKGxvZ2luVXNlciA9PiAhIWxvZ2luVXNlciksXG4gICAgICAgIHRhcChsb2dpblVzZXIgPT4ge1xuICAgICAgICAgIGlmIChsb2dpblVzZXIuand0VG9rZW4pIHtcbiAgICAgICAgICAgIGlmIChDb25maWdVdGlscy5nZXRDb25maWcoKS5hdXRoLmdldFVzZXJJbmZvKSB7XG4gICAgICAgICAgICAgIENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmF1dGguZ2V0VXNlckluZm8obG9naW5Vc2VyKVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUodXNlckluZm8gPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgdXNlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4ubG9naW5Vc2VyLFxuICAgICAgICAgICAgICAgICAgICAuLi51c2VySW5mb1xuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIEF1dGhVdGlscy5vbkxvZ2luU3VjY2Vzcyh1c2VyLCBpc1JlbWVtYmVyTWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgQXV0aFV0aWxzLm9uTG9naW5TdWNjZXNzKGxvZ2luVXNlciwgaXNSZW1lbWJlck1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIHJldHVybiBsb2dpbiQ7XG4gIH1cblxuICBzdGF0aWMgcmVnaXN0ZXIocGF5TG9hZDoge30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHJlZyQgPSBBcGlVdGlscy5yZWdpc3RlcihwYXlMb2FkLCB7XG4gICAgICAuLi5Db25maWdVdGlscy5nZXRDb25maWcoKS5hdXRoLnJlZ2lzdGVyQXBpT3B0aW9ucyB8fCBDb25maWdVdGlscy5nZXRDb25maWcoKS5hdXRoLmxvZ2luQXBpT3B0aW9ucyxcbiAgICAgIHRhZzogU3RhdGVOYW1lcy5hdXRoXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlZyQ7XG4gIH1cblxuICBzdGF0aWMgbG9nb3V0KCkge1xuICAgIEFwaVV0aWxzLmxvZ291dCh7XG4gICAgICAuLi5Db25maWdVdGlscy5nZXRDb25maWcoKS5hdXRoLmxvZ291dEFwaU9wdGlvbnMgfHwgQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkuYXV0aC5sb2dpbkFwaU9wdGlvbnMsXG4gICAgICB0YWc6IFN0YXRlTmFtZXMuYXV0aFxuICAgIH0pXG4gICAgICAuc3Vic2NyaWJlKHN1Y2Nlc3MgPT4ge1xuICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgIEF1dGhVdGlscy51cGRhdGVVc2VyKHt9KTtcbiAgICAgICAgICBQZXJtaXNzaW9uVXRpbHMuY2xlYXJSb2xlcygpO1xuICAgICAgICAgIFBlcm1pc3Npb25VdGlscy5jbGVhclBlcm1pc3Npb24oKTtcbiAgICAgICAgICBjb25zdCB1cmwgPSBDb25maWdVdGlscy5nZXRDb25maWcoKS5hdXRoLmxvZ291dFN1Y2Nlc3NSb3V0ZXI7XG4gICAgICAgICAgUm91dGVVdGlscy5uYXYodXJsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICBzdGF0aWMgY2hhbmdlUHdkKHBheWxvYWQpIHtcbiAgICBjb25zdCBwd2QkID0gQXBpVXRpbHMuY2hhbmdlUHdkKHBheWxvYWQsIHtcbiAgICAgIC4uLkNvbmZpZ1V0aWxzLmdldENvbmZpZygpLmF1dGguY2hhbmdlUHdkQXBpT3B0aW9ucyB8fCBDb25maWdVdGlscy5nZXRDb25maWcoKS5hdXRoLmxvZ2luQXBpT3B0aW9ucyxcbiAgICAgIHRhZzogU3RhdGVOYW1lcy5hdXRoXG4gICAgfSk7XG4gICAgcmV0dXJuIHB3ZCQ7XG4gIH1cblxuICBzdGF0aWMgZ2V0Q3VycmVudFVzZXIoKTogVXNlciB7XG4gICAgaWYgKEF1dGhVdGlscy5DVVJSRU5UX1VTRVIpIHtcbiAgICAgIHJldHVybiBBdXRoVXRpbHMuQ1VSUkVOVF9VU0VSIHx8IHt9O1xuICAgIH1cbiAgICBjb25zdCBzdG9yYWdlS2V5ID0gQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkuYXV0aC5zdG9yYWdlS2V5O1xuICAgIGxldCB1c2VyID0gKEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShzdG9yYWdlS2V5KSkpIGFzIFVzZXI7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICB1c2VyID0gKEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oc3RvcmFnZUtleSkpKSBhcyBVc2VyO1xuICAgIH1cbiAgICBpZiAodXNlciAmJiB1c2VyLmlzU3UpIHtcbiAgICAgIHVzZXIuaXNBZG1pbiA9IHRydWU7XG4gICAgfVxuICAgIEF1dGhVdGlscy5DVVJSRU5UX1VTRVIgPSB1c2VyO1xuICAgIHJldHVybiBBdXRoVXRpbHMuQ1VSUkVOVF9VU0VSIHx8IHt9O1xuICB9XG5cbiAgc3RhdGljIHVwZGF0ZVVzZXIocGF0Y2g6IFVzZXIsIHJlbWViZXI/OiBib29sZWFuKSB7XG4gICAgaWYgKCFDb21tb25zVXRpbHMuaXNFbXB0eShwYXRjaCkpIHtcbiAgICAgIEF1dGhVdGlscy5DVVJSRU5UX1VTRVIgPSB7XG4gICAgICAgIC4uLkF1dGhVdGlscy5DVVJSRU5UX1VTRVIsXG4gICAgICAgIC4uLnBhdGNoXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBBdXRoVXRpbHMuQ1VSUkVOVF9VU0VSID0ge307XG4gICAgfVxuICAgIFN0YXRlc1V0aWxzLnVwZGF0ZShTdGF0ZU5hbWVzLnVzZXIsIEF1dGhVdGlscy5DVVJSRU5UX1VTRVIpO1xuICAgIGNvbnN0IHN0b3JhZ2VLZXkgPSBDb25maWdVdGlscy5nZXRDb25maWcoKS5hdXRoLnN0b3JhZ2VLZXk7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShzdG9yYWdlS2V5LCBKU09OLnN0cmluZ2lmeShBdXRoVXRpbHMuQ1VSUkVOVF9VU0VSKSk7XG4gICAgaWYgKHJlbWViZXIpIHtcbiAgICAgIGlmICghQ29tbW9uc1V0aWxzLmlzRW1wdHkoQXV0aFV0aWxzLkNVUlJFTlRfVVNFUikpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSwgSlNPTi5zdHJpbmdpZnkoQXV0aFV0aWxzLkNVUlJFTlRfVVNFUikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oc3RvcmFnZUtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGNoZWNrTG9naW4ocmV0dXJuVXJsOiBzdHJpbmcpIHtcblxuICAgIGNvbnN0IGN1cnJlbnRVc2VyOiBVc2VyID0gQXV0aFV0aWxzLmdldEN1cnJlbnRVc2VyKCk7XG5cbiAgICBpZiAoY3VycmVudFVzZXIuand0VG9rZW4gJiYgSnd0VXRpbHMuaXNWYWxpZChjdXJyZW50VXNlci5qd3RUb2tlbikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHJ1ZSA9PT0gU3RhdGVzVXRpbHMuZ2V0VmFsdWUoU3RhdGVOYW1lcy5hdXRoLCAnZGlhbG9nJykpIHtcbiAgICAgICAgU3RhdGVzVXRpbHMudXBkYXRlKFN0YXRlTmFtZXMucG9wdXAsIHtcbiAgICAgICAgICBjb250ZW50OiBDb25maWdVdGlscy5nZXRDb25maWcoKS5hdXRoLmNvbXBvbmVudCxcbiAgICAgICAgICBoZWFkZXI6IENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmF1dGgudGl0bGUsXG4gICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICBtaW5XaWR0aDogNTAwLFxuICAgICAgICAgIG1pbkhlaWdodDogMzAwLFxuICAgICAgICAgIGNvbnRlbnRNYXhXaWR0aDogNTAwLFxuICAgICAgICAgIGNvbnRlbnRNYXhIZWlnaHQ6IDMwMFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGxvZ2luUm91dGVyID0gQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkuYXV0aC5sb2dpblJvdXRlcjtcbiAgICAgICAgU3RhdGVzVXRpbHMudXBkYXRlKFN0YXRlTmFtZXMuYXV0aCwge3N1Y2Nlc3NVcmw6IHJldHVyblVybH0pO1xuICAgICAgICBSb3V0ZVV0aWxzLm5hdihsb2dpblJvdXRlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgb25Mb2dpblN1Y2Nlc3ModXNlciwgaXNSZW1lbWJlck1lKSB7XG4gICAgaWYgKENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmF1dGgub25Mb2dpblN1Y2Nlc3MpIHtcbiAgICAgIENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmF1dGgub25Mb2dpblN1Y2Nlc3ModXNlcik7XG4gICAgfVxuICAgIHVzZXIuZW5hYmxlZCA9IHRydWU7XG4gICAgQXV0aFV0aWxzLnVwZGF0ZVVzZXIodXNlciwgaXNSZW1lbWJlck1lKTtcbiAgICBQZXJtaXNzaW9uVXRpbHMuYWRkUm9sZXModXNlci5yb2xlcyk7XG4gICAgaWYgKENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmF1dGguZGVmYXVsdFJ1bGVzKSB7XG4gICAgICBQZXJtaXNzaW9uVXRpbHMuYWRkUm9sZXMoQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkuYXV0aC5kZWZhdWx0UnVsZXMpO1xuICAgIH1cbiAgICBQZXJtaXNzaW9uVXRpbHMuYWRkUGVybWlzc2lvbnModXNlci5wZXJtaXNzaW9ucyB8fCBbXSk7XG4gICAgY29uc3Qga2V5ID0gQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkuYXV0aC5yZXF1aXJlZFVzZXJQcm9wcztcbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAoIUNvbW1vbnNVdGlscy5nZXQodXNlciwga2V5KSkge1xuICAgICAgICBSb3V0ZVV0aWxzLm5hdihDb25maWdVdGlscy5nZXRDb25maWcoKS5hdXRoLmZhaWxlZFByb3BzUm91dGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHN1Y2Nlc3NVcmwgPSBDb25maWdVdGlscy5nZXRDb25maWcoKS5hdXRoLmxvZ2luU3VjY2Vzc1JvdXRlcjtcbiAgICAgICAgUm91dGVVdGlscy5uYXYoc3VjY2Vzc1VybCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHN1Y2Nlc3NVcmwgPSBDb25maWdVdGlscy5nZXRDb25maWcoKS5hdXRoLmxvZ2luU3VjY2Vzc1JvdXRlcjtcbiAgICAgIFJvdXRlVXRpbHMubmF2KHN1Y2Nlc3NVcmwpO1xuICAgIH1cbiAgfVxufVxuIl19