/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonsUtils, ConfigUtils } from '@er/utils';
import { NgxPermissionsService, NgxRolesService } from 'ngx-permissions';
import { of } from 'rxjs';
import { DiUtils } from '../di';
export class PermissionUtils {
    /**
     * @return {?}
     */
    static getPermissionsService() {
        if (!PermissionUtils._permissionsService) {
            PermissionUtils._permissionsService = DiUtils.get(NgxPermissionsService);
        }
        return PermissionUtils._permissionsService;
    }
    /**
     * @return {?}
     */
    static getRolesService() {
        if (!PermissionUtils._rolesService) {
            PermissionUtils._rolesService = DiUtils.get(NgxRolesService);
        }
        return PermissionUtils._rolesService;
    }
    /**
     * @param {?} roles
     * @return {?}
     */
    static getRolePermissions(roles) {
        return (ConfigUtils.getConfig().auth.getRolePermissions
            && ConfigUtils.getConfig().auth.getRolePermissions(roles))
            || of([]);
    }
    /**
     * @param {?} permissionName
     * @return {?}
     */
    static HasModulePermission(permissionName) {
        /** @type {?} */
        const permissions = PermissionUtils.getPermissionsService().getPermissions();
        /** @type {?} */
        const matched = Object.keys(permissions).some(name => {
            return name === permissionName
                || name.startsWith(permissionName + ':');
        });
        return matched && Object.keys(matched).length > 0;
    }
    /**
     * @param {?} permissions
     * @param {?=} validationFunction
     * @return {?}
     */
    static addPermissions(permissions, validationFunction) {
        PermissionUtils.getPermissionsService().addPermission(permissions, validationFunction);
    }
    /**
     * @param {?} roleName
     * @param {?=} validationFunction
     * @return {?}
     */
    static addRole(roleName, validationFunction) {
        if (!validationFunction) {
            validationFunction = () => true;
        }
        PermissionUtils.getRolesService().addRole(roleName, validationFunction);
    }
    /**
     * @param {?} roles
     * @return {?}
     */
    static addRoles(roles) {
        /** @type {?} */
        const _roles = CommonsUtils.getArrayValue(roles);
        if (_roles) {
            /** @type {?} */
            const roleService = PermissionUtils.getRolesService();
            _roles.filter(role => !!role).forEach(role => roleService.addRole(role, () => true));
        }
    }
    /**
     * @param {?} role
     * @return {?}
     */
    static hasRole(role) {
        /** @type {?} */
        const userRoles = PermissionUtils.getRolesService().getRoles();
        return userRoles.hasOwnProperty(role);
    }
    /**
     * @param {?} roles
     * @return {?}
     */
    static hasAnyRole(roles) {
        /** @type {?} */
        const _roles = CommonsUtils.getArrayValue(roles);
        /** @type {?} */
        const userRoles = PermissionUtils.getRolesService().getRoles();
        return _roles.some(role => userRoles.hasOwnProperty(role));
    }
    /**
     * @param {?} roles
     * @return {?}
     */
    static hasAllRoles(roles) {
        /** @type {?} */
        const _roles = CommonsUtils.getArrayValue(roles);
        /** @type {?} */
        const userRoles = PermissionUtils.getRolesService().getRoles();
        return _roles.every(role => userRoles.hasOwnProperty(role));
    }
    /**
     * @return {?}
     */
    static getPermissions() {
        return PermissionUtils.getPermissionsService().permissions$;
    }
    /**
     * @return {?}
     */
    static getRoles() {
        return PermissionUtils.getRolesService().roles$;
    }
    /**
     * @param {?} permission
     * @return {?}
     */
    static hasPermission(permission) {
        /** @type {?} */
        const userPermissions = PermissionUtils.getPermissionsService().getPermissions();
        return userPermissions.hasOwnProperty(permission);
    }
    /**
     * @param {?} permissios
     * @return {?}
     */
    static hasAnyPermission(permissios) {
        /** @type {?} */
        const _permissions = CommonsUtils.getArrayValue(permissios);
        /** @type {?} */
        const userPermissions = PermissionUtils.getPermissionsService().getPermissions();
        return _permissions.some(permisiion => userPermissions.hasOwnProperty(permisiion));
    }
    /**
     * @param {?} permissions
     * @return {?}
     */
    static hasAllPermissions(permissions) {
        /** @type {?} */
        const _permissions = CommonsUtils.getArrayValue(permissions);
        /** @type {?} */
        const userPermissions = PermissionUtils.getPermissionsService().getPermissions();
        return _permissions.every(permisiion => userPermissions.hasOwnProperty(permisiion));
    }
    /**
     * @param {?} roleOrPermission
     * @return {?}
     */
    static hasAuth(roleOrPermission) {
        return PermissionUtils.hasAnyRole(roleOrPermission) || PermissionUtils.hasAnyPermission(roleOrPermission);
    }
    /**
     * @param {?} roleOrPermissions
     * @return {?}
     */
    static hasAllAuths(roleOrPermissions) {
        return PermissionUtils.hasAllRoles(roleOrPermissions) || PermissionUtils.hasAllPermissions(roleOrPermissions);
    }
    /**
     * @return {?}
     */
    static clearRoles() {
        PermissionUtils.getRolesService().flushRoles();
    }
    /**
     * @return {?}
     */
    static clearPermission() {
        PermissionUtils.getPermissionsService().flushPermissions();
    }
}
PermissionUtils._permissionsService = null;
PermissionUtils._rolesService = null;
if (false) {
    /** @type {?} */
    PermissionUtils._permissionsService;
    /** @type {?} */
    PermissionUtils._rolesService;
}
//# sourceMappingURL=data:application/json;base64,