/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ApiServerType, NotifyLevel, StateNames } from '@er/types';
import { CommonsUtils, ConfigUtils, ContextUtils, DialogUtils, EsUtils, StatesUtils } from '@er/utils';
import { of, zip } from 'rxjs';
import { filter, first, map, switchMap } from 'rxjs/operators';
import { HttpUtils } from '../http';
import { LogUtils } from '../log';
/** @type {?} */
export const DEFAULT_API_REQUEST_OPTIONS = {
    notifyFailure: true
};
export class ApiUtils {
    /**
     * @param {?} serverType
     * @return {?}
     */
    static getPresetApiOptions(serverType) {
        if (!serverType) {
            serverType = CommonsUtils.get(ConfigUtils.getConfig(), 'api.default') || ApiServerType.ES;
        }
        ApiUtils.presetApiOptions[serverType] = Object.assign({}, DEFAULT_API_REQUEST_OPTIONS, CommonsUtils.get(ConfigUtils.getConfig(), `api.servers.${serverType}`, {}));
        if (!ApiUtils.presetApiOptions[serverType].actions) {
            ApiUtils.presetApiOptions[serverType].actions = {};
        }
        return ApiUtils.presetApiOptions[serverType];
    }
    /**
     * @param {?} payload
     * @param {?=} options
     * @return {?}
     */
    static login(payload, options = {}) {
        /** @type {?} */
        const presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.login || {};
        return ApiUtils.doRequest(null, payload, presetActionOptions, options);
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    static logout(options = {}) {
        /** @type {?} */
        const presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.logout || {};
        return ApiUtils.doRequest(null, null, presetActionOptions, options);
    }
    /**
     * @param {?} payload
     * @param {?=} options
     * @return {?}
     */
    static changePwd(payload, options = {}) {
        /** @type {?} */
        const presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.changePwd || {};
        return ApiUtils.doRequest(null, payload, presetActionOptions, options);
    }
    /**
     * @param {?} payload
     * @param {?=} options
     * @return {?}
     */
    static register(payload, options = {}) {
        /** @type {?} */
        const presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.register || {};
        return ApiUtils.doRequest(null, payload, presetActionOptions, options);
    }
    /**
     * @param {?} apiEntry
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    static save(apiEntry, data, options = {}) {
        if (data) {
            /** @type {?} */
            const _data = Object.assign({}, data);
            if (_data['id']) {
                /** @type {?} */
                const id = _data['id'];
                delete _data['id'];
                return ApiUtils.patchById.call(this, apiEntry, id, _data, options);
            }
            else {
                return ApiUtils.create.call(this, apiEntry, _data, options);
            }
        }
    }
    /**
     * @param {?} apiEntry
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    static create(apiEntry, data, options = {}) {
        /** @type {?} */
        const presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.create || {};
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, data, presetActionOptions, options);
    }
    /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?=} options
     * @return {?}
     */
    static getById(apiEntry, id, options = {}) {
        /** @type {?} */
        const presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.getById || {};
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, { id }, presetActionOptions, options);
    }
    /**
     * @param {?} apiEntry
     * @param {?} ids
     * @param {?=} options
     * @return {?}
     */
    static getByIds(apiEntry, ids, options = {}) {
        /** @type {?} */
        const presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.getByIds || {};
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, ids, presetActionOptions, options);
    }
    /**
     * @param {?} apiEntry
     * @param {?=} payload
     * @param {?=} options
     * @return {?}
     */
    static getByQuery(apiEntry, payload, options = {}) {
        /** @type {?} */
        const presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.getByQuery;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, payload, presetActionOptions, options);
    }
    /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    static updateById(apiEntry, id, data, options = {}) {
        /** @type {?} */
        const presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.updateById;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, Object.assign({ id }, data), presetActionOptions, options);
    }
    /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    static patchById(apiEntry, id, data, options = {}) {
        /** @type {?} */
        const presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.patchById;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, Object.assign({ id }, data), presetActionOptions, options);
    }
    /**
     * @param {?} apiEntry
     * @param {?} query
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    static updateByQuery(apiEntry, query, data, options = {}) {
        /** @type {?} */
        const presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.updateByQuery;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, query, presetActionOptions, options);
    }
    /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?=} options
     * @return {?}
     */
    static deleteById(apiEntry, id, options = {}) {
        /** @type {?} */
        const obv = DialogUtils.confirm('操作确认', '确认执行<b>删除</b>操作吗?')
            .pipe(first(), filter(accept => accept), switchMap(_ => {
            /** @type {?} */
            const presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.deleteById;
            return ApiUtils.doRequest(apiEntry, id, presetActionOptions, options);
        }));
        return obv;
    }
    /**
     * @param {?} apiEntry
     * @param {?} query
     * @param {?=} options
     * @return {?}
     */
    static deleteByQuery(apiEntry, query, options = {}) {
        /** @type {?} */
        const presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.deleteByQuery;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, query, presetActionOptions, options);
    }
    /**
     * @param {?} apiEntry
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    static batch(apiEntry, body, options = {}) {
        /** @type {?} */
        const presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.batch;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, body, presetActionOptions, options);
    }
    /**
     * @param {?} dataSource
     * @param {?=} tag
     * @return {?}
     */
    static batchFetch(dataSource, tag) {
        if (dataSource) {
            /** @type {?} */
            let _apiDataProp = dataSource;
            if (dataSource['apiDataProps']) {
                _apiDataProp = dataSource['apiDataProps'];
            }
            _apiDataProp = CommonsUtils.copy(_apiDataProp);
            /** @type {?} */
            const apiDataProps = CommonsUtils.getArrayValue(_apiDataProp);
            if (CommonsUtils.isEmpty(apiDataProps)) {
                return;
            }
            if (!tag) {
                tag = dataSource['id'] || apiDataProps[0].id || '';
            }
            apiDataProps.forEach(apiDataProp => {
                if (dataSource['query']) {
                    /** @type {?} */
                    const query = dataSource['query'];
                    /** @type {?} */
                    const apiQuery = CommonsUtils.getArrayValue(apiDataProp.query || []);
                    apiQuery.concat(CommonsUtils.getArrayValue(query));
                    apiDataProp.query = apiQuery;
                }
                /** @type {?} */
                const _filter = apiDataProp.filter;
                if (CommonsUtils.isFunction(_filter)) {
                    if (dataSource['queryValue']) {
                        apiDataProp.filter = ((/** @type {?} */ (apiDataProp.filter)))(dataSource['queryValue']);
                    }
                    else {
                        delete apiDataProp.filter;
                    }
                }
                if (dataSource['interval']) {
                    CommonsUtils.set((/** @type {?} */ (apiDataProp)), 'aggProps.interval', dataSource['interval']);
                }
                if (dataSource['format']) {
                    CommonsUtils.set((/** @type {?} */ (apiDataProp)), 'aggProps.format', dataSource['format']);
                }
            });
            // return forkJoin(...apiDataProps.map(apiDataProp => ApiUtils.fetch(apiDataProp, tag)))
            //   .pipe(
            //     catchError((err) => throwError(err))
            //   );
            return zip(...apiDataProps.map(apiDataProp => ApiUtils.fetch(apiDataProp, tag)))
                .pipe(map(dataSet => {
                /** @type {?} */
                let resultList;
                /** @type {?} */
                let resultMap;
                dataSet.forEach((data, i) => {
                    if (apiDataProps[i].id) {
                        if (!resultMap) {
                            resultMap = {};
                        }
                        resultMap[apiDataProps[i].id] = data;
                    }
                    else {
                        if (!resultList) {
                            resultList = [];
                        }
                        resultList.push(data);
                    }
                });
                if (resultList && resultList.length === 1) {
                    resultList = resultList[0];
                }
                if (resultMap && resultList) {
                    return Object.assign({}, resultMap, { data: resultList });
                }
                else {
                    return resultMap || resultList || [];
                }
            }));
        }
    }
    /**
     * @param {?} apiDataProps
     * @param {?=} tag
     * @return {?}
     */
    static fetch(apiDataProps, tag) {
        if (!apiDataProps.apiEntry) {
            LogUtils.error('apiUtil', '没有定义apiEntry');
            return of([]);
        }
        /** @type {?} */
        let queryPayload;
        if (CommonsUtils.isFunction(apiDataProps.payload)) {
            queryPayload = ((/** @type {?} */ (apiDataProps.payload))).call(undefined, apiDataProps);
        }
        else if (apiDataProps.payload) {
            queryPayload = apiDataProps.payload;
        }
        if (!queryPayload) {
            /** @type {?} */
            const qBody = EsUtils.buildQueryBody(apiDataProps);
            queryPayload = qBody;
        }
        /** @type {?} */
        const options = apiDataProps.requestOptions || {};
        if (!options.tag) {
            options.tag = tag || '';
        }
        LogUtils.debug('apiUtils', 'apiData数据查询', { apiDataProps: apiDataProps, apiRequestBody: queryPayload });
        return ApiUtils.getByQuery(apiDataProps.apiEntry, queryPayload, options)
            .pipe(map(data => {
            /** @type {?} */
            let aggs;
            if (data && data.aggs) {
                aggs = EsUtils.resolveAggs(data.aggs);
                data.aggs = aggs;
            }
            if (CommonsUtils.isEmpty(data.items)) {
                delete data.items;
            }
            if (CommonsUtils.isEmpty(data.aggs)) {
                delete data.aggs;
            }
            /** @type {?} */
            let path = apiDataProps.dataPath || (apiDataProps.aggProps ? 'aggs' : undefined);
            if (path === '/') {
                path = undefined;
            }
            return path ? CommonsUtils.get(data, path) : data;
        }));
    }
    /**
     * @private
     * @param {?} options
     * @param {?} context
     * @return {?}
     */
    static setContext(options, context) {
        options = options || {};
        options.context = context;
    }
    /**
     * @private
     * @param {?} apiEntry
     * @param {?} payload
     * @param {?} presetActionOptions
     * @param {?=} actionOptions
     * @return {?}
     */
    static doRequest(apiEntry, payload, presetActionOptions, actionOptions) {
        /** @type {?} */
        const apiRequestOptions = Object.assign({}, presetActionOptions, actionOptions);
        delete apiRequestOptions.actions;
        /** @type {?} */
        const requestPayload = payload;
        /** @type {?} */
        const requestOptions = Object.assign({}, apiRequestOptions, { uri: ApiUtils.buildUri(apiEntry, requestPayload, apiRequestOptions), payload: ApiUtils.buildPayload(apiEntry, requestPayload, apiRequestOptions) });
        delete requestOptions.paramsKeys;
        delete requestOptions.uriResolver;
        delete requestOptions.payloadResolver;
        if (!requestOptions.uri || !requestOptions.uri.startsWith('http')) {
            /** @type {?} */
            const apiServer = ApiUtils.getPresetApiOptions(presetActionOptions.serverType).uri || '';
            requestOptions.uri = apiServer + (requestOptions.uri.startsWith('/') ? '' : '/') + requestOptions.uri;
        }
        return HttpUtils.request(requestOptions)
            .pipe(filter(response => !!response), map(response => {
            if (response.success === true) {
                if (apiRequestOptions.alertSuccess) {
                    DialogUtils.info('操作完成', apiRequestOptions.successMessage);
                }
                if (apiRequestOptions.notifySuccess) {
                    StatesUtils.create(StateNames.notify, {
                        title: '操作完成',
                        message: apiRequestOptions.successMessage
                    });
                }
                if (apiRequestOptions.onSuccess) {
                    return apiRequestOptions.onSuccess.call(requestOptions.context, response, requestOptions);
                }
                else {
                    if (apiRequestOptions.dataPath) {
                        return CommonsUtils.get(response.content, apiRequestOptions.dataPath);
                    }
                    return response.content || response;
                }
            }
            else if (!response.success === false) {
                if (apiRequestOptions.alertFailure) {
                    DialogUtils.error('操作失败', response.message);
                }
                if (apiRequestOptions.notifyFailure) {
                    StatesUtils.create(StateNames.notify, {
                        level: NotifyLevel.ERROR,
                        title: response.error,
                        message: response.message
                    });
                }
                if (apiRequestOptions.onFailure) {
                    return apiRequestOptions.onFailure.call(requestOptions.context, response, requestOptions);
                }
                return response;
            }
            return response;
        }), first());
    }
    /**
     * @private
     * @param {?} apiEntry
     * @param {?} payload
     * @param {?} options
     * @return {?}
     */
    static buildUri(apiEntry, payload, options) {
        /** @type {?} */
        let uri = apiEntry;
        if (CommonsUtils.isTemplateStr(apiEntry)) {
            // apiEntry = CommonsUtils.templateStr(apiEntry, ContextUtils.context());
        }
        if (CommonsUtils.isString(options.uriResolver)) {
            uri = (/** @type {?} */ (options.uriResolver));
        }
        else if (CommonsUtils.isFunction(options.uriResolver)) {
            uri = ((/** @type {?} */ (options.uriResolver))).call(options.context, apiEntry, payload, options);
        }
        else if (!uri) {
            uri = options.uri || '';
        }
        if (!uri.startsWith('http')) {
            /** @type {?} */
            const serverUri = ApiUtils.getPresetApiOptions(options.serverType).uri;
            if (serverUri) {
                uri = serverUri + (uri.startsWith('/') ? uri : '/' + uri);
            }
        }
        return uri;
    }
    /**
     * @private
     * @param {?} apiEntry
     * @param {?} payload
     * @param {?} options
     * @return {?}
     */
    static buildPayload(apiEntry, payload, options) {
        /** @type {?} */
        let _payload = payload;
        if (CommonsUtils.isJson(_payload)) {
            _payload = CommonsUtils.merge({}, _payload || {}, options.payload || {}, options.body || options.params || {});
        }
        if (options.payloadResolver) {
            _payload = ((/** @type {?} */ (options.payloadResolver))).call(options.context, apiEntry, _payload, options);
        }
        if (CommonsUtils.isString(_payload)) {
            return _payload;
        }
        else if (CommonsUtils.isString(options.body)) {
            return options.body;
        }
        else if (CommonsUtils.isEmpty(_payload)) {
            return undefined;
        }
        _payload = ContextUtils.resolveVariables(_payload);
        _payload = ApiUtils.resolveApiParamsName(options.paramsKeys || ApiUtils.getPresetApiOptions(options.serverType).paramsKeys || {}, _payload);
        if (CommonsUtils.isEmpty(_payload)) {
            return undefined;
        }
        return _payload;
    }
    /**
     * @private
     * @param {?} paramsKeys
     * @param {?} payload
     * @return {?}
     */
    static resolveApiParamsName(paramsKeys, payload) {
        if (!CommonsUtils.isJson(payload)) {
            return payload;
        }
        /** @type {?} */
        const resolved = {};
        for (const key in payload) {
            if (paramsKeys.hasOwnProperty(key)) {
                resolved[paramsKeys[key]] = payload[key];
            }
            else {
                resolved[key] = payload[key];
            }
        }
        return resolved;
    }
}
ApiUtils.presetApiOptions = {};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ApiUtils.presetApiOptions;
}
//# sourceMappingURL=data:application/json;base64,