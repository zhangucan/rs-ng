/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient, HttpEventType, HttpHeaders, HttpParams, HttpRequest } from '@angular/common/http';
import { HttpContentType, HttpMethod, HttpRequestPayloadType, HttpResponseType, StateNames } from '@er/types';
import { CommonsUtils, ConfigUtils, RxUtils, StatesUtils } from '@er/utils';
import { of } from 'rxjs';
import { catchError, filter, map, tap } from 'rxjs/operators';
import { DiUtils } from '../di';
export class HttpUtils {
    /**
     * @return {?}
     */
    static getHttpClient() {
        if (!HttpUtils._httpClient) {
            HttpUtils._httpClient = DiUtils.get(HttpClient);
        }
        return HttpUtils._httpClient;
    }
    /**
     * @return {?}
     */
    static timeout() {
        if (HttpUtils._timeout) {
            HttpUtils._timeout = ConfigUtils.getConfig().httpTimeout || 5000;
        }
        return HttpUtils._timeout;
    }
    /**
     * @template T
     * @param {?} options
     * @return {?}
     */
    static request(options) {
        /** @type {?} */
        let httpRequestOptions;
        if (CommonsUtils.isString(options)) {
            httpRequestOptions = CommonsUtils.getObjWhenStr(options, 'uri');
        }
        else {
            httpRequestOptions = (/** @type {?} */ (options));
        }
        if (httpRequestOptions.stateName) {
            return StatesUtils.get(httpRequestOptions.stateName);
        }
        if (httpRequestOptions.onRequest) {
            /** @type {?} */
            const result = httpRequestOptions.onRequest(httpRequestOptions);
            if (result === false) {
                return;
            }
            httpRequestOptions = (/** @type {?} */ (result));
        }
        /** @type {?} */
        let url = httpRequestOptions.uri || '/';
        if (!url.startsWith('http') && url.indexOf('assets/') < 0) {
            if (!url.startsWith('/')) {
                url = '/' + url;
            }
            url = ConfigUtils.getConfig().api.servers[httpRequestOptions.serverType || ConfigUtils.getConfig().api.default].uri + url;
        }
        /** @type {?} */
        const requestOptions = {};
        requestOptions.observe = httpRequestOptions.observe || 'body';
        requestOptions.responseType = httpRequestOptions.responseType || HttpResponseType.JSON;
        requestOptions.headers = HttpUtils.getRequestHeader(httpRequestOptions);
        /** @type {?} */
        const method = httpRequestOptions.method || ((httpRequestOptions.body || httpRequestOptions.payload) ? HttpMethod.POST : HttpMethod.GET);
        if (httpRequestOptions.payload) {
            if (httpRequestOptions.payloadType === HttpRequestPayloadType.PARAMS) {
                httpRequestOptions.params = httpRequestOptions.payload;
            }
            else if (httpRequestOptions.payloadType === HttpRequestPayloadType.BODY) {
                httpRequestOptions.body = httpRequestOptions.payload;
            }
            else if (!method || httpRequestOptions.method === HttpMethod.GET) {
                httpRequestOptions.params = httpRequestOptions.payload;
            }
            else {
                httpRequestOptions.body = httpRequestOptions.payload;
            }
        }
        if (httpRequestOptions.params) {
            requestOptions.params = HttpUtils.getRequestParams(httpRequestOptions);
        }
        if (httpRequestOptions.body) {
            requestOptions.body = HttpUtils.getRequestBody(httpRequestOptions);
        }
        if (!httpRequestOptions.context) {
            httpRequestOptions.context = this; // use HttpUtils.request.call(this,...) to init context
        }
        return HttpUtils.getHttpClient().request(method, url, Object.assign({}, requestOptions, { observe: 'events' }))
            .pipe(RxUtils.retry(httpRequestOptions.retry, HttpUtils.timeout()), filter(event => event.type === HttpEventType.Sent || event.type === HttpEventType.Response), tap(event => {
            if (event.type === HttpEventType.Sent) {
                HttpUtils.updateHttpTagState(httpRequestOptions.tag, true, { url, opts: httpRequestOptions });
            }
        }), filter(event => event.type === HttpEventType.Response), map(event => {
            /** @type {?} */
            let response = event;
            if (!httpRequestOptions.observe || httpRequestOptions.observe === 'body') {
                response = event.body;
            }
            HttpUtils.updateHttpTagState(httpRequestOptions.tag, false, {
                status: 'success',
                httpRequestOptions
            });
            /** @type {?} */
            const resp = httpRequestOptions.onResponse
                ? httpRequestOptions.onResponse.call(httpRequestOptions.context, response, httpRequestOptions)
                : response;
            if (httpRequestOptions.stateName) {
                StatesUtils.update(httpRequestOptions.stateName, resp);
            }
            return resp;
        }), catchError((error) => {
            HttpUtils.updateHttpTagState(httpRequestOptions.tag, false, { status: 'error', error });
            if (httpRequestOptions.onError) {
                httpRequestOptions.onError.call(httpRequestOptions.context, error, httpRequestOptions);
            }
            return of('服务器请求失败，状态码:' + error.status);
        }));
    }
    /**
     * @private
     * @param {?} tag
     * @param {?} state
     * @param {?=} extra
     * @return {?}
     */
    static updateHttpTagState(tag, state, extra) {
        if (tag) {
            StatesUtils.create([StateNames.http, tag], Object.assign({ start: state }, extra));
        }
    }
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    static getRequestParams(options) {
        /** @type {?} */
        let params;
        if (typeof options.params === 'string') {
            params = new HttpParams({ fromString: options.params });
        }
        else {
            params = new HttpParams();
            for (const key in options.params) {
                if (key) {
                    if (options.params.hasOwnProperty(key) && (options.params[key] !== null || options.params[key] !== undefined)) {
                        params = params.append(key, CommonsUtils.toString(options.params[key]));
                    }
                }
            }
        }
        return params;
    }
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    static getRequestBody(options) {
        return options.body;
    }
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    static getRequestHeader(options) {
        /** @type {?} */
        let headers = new HttpHeaders();
        if (options.contentType) {
            headers = headers.append('Content-Type', options.contentType);
        }
        else {
            headers = headers.append('Content-Type', HttpContentType.JSON);
        }
        if (options.headers) {
            for (const key in options.headers) {
                if (key) {
                    headers = headers.append(key, options.headers[key]);
                }
            }
        }
        return headers;
    }
    /**
     * @param {?} file
     * @return {?}
     */
    upload(file) {
        /** @type {?} */
        const formdata = new FormData();
        formdata.append('file', file);
        /** @type {?} */
        const req = new HttpRequest('POST', `upload`, formdata, {
            reportProgress: true,
            responseType: 'text'
        });
        return HttpUtils.getHttpClient().request(req);
    }
}
HttpUtils._httpClient = null;
HttpUtils._timeout = 3000;
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpUtils._httpClient;
    /**
     * @type {?}
     * @private
     */
    HttpUtils._timeout;
}
//# sourceMappingURL=data:application/json;base64,