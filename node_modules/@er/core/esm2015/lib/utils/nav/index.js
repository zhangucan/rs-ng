/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Location } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { StateNames } from '@er/types';
import { CommonsUtils, StatesUtils } from '@er/utils';
import { DiUtils } from '../di';
export class RouteUtils {
    /**
     * @return {?}
     */
    static getActiveRoute() {
        /** @type {?} */
        let route = DiUtils.get(ActivatedRoute);
        while (route.firstChild) {
            route = route.firstChild;
        }
        return route;
    }
    /**
     * @return {?}
     */
    static getActiveRouteData() {
        /** @type {?} */
        const route = RouteUtils.getActiveRoute();
        return route && route.snapshot.data;
    }
    /**
     * @param {?=} outletName
     * @param {?=} isRelative
     * @return {?}
     */
    static clearOutlet(outletName = 'primary', isRelative = false) {
        /** @type {?} */
        const extra = {};
        if (!isRelative) {
            extra['relativeTo'] = RouteUtils.getActiveRoute();
        }
        DiUtils.get(Router).navigate([{ outlets: { [outletName]: null } }], extra);
    }
    /**
     * @param {?} commands
     * @param {?=} paramsOrRelative
     * @param {?=} extras
     * @return {?}
     */
    static nav(commands, paramsOrRelative, extras) {
        if (CommonsUtils.isString(commands)) {
            commands = [commands];
        }
        if (!extras) {
            extras = (/** @type {?} */ ({}));
        }
        if (paramsOrRelative && Object.keys(paramsOrRelative).length > 0) {
            CommonsUtils.set((/** @type {?} */ (extras)), 'queryParams', paramsOrRelative);
        }
        if ((CommonsUtils.isString(commands) && !((/** @type {?} */ (commands))).startsWith('/'))
            || (paramsOrRelative === true)) {
            CommonsUtils.set((/** @type {?} */ (extras)), 'relativeTo', RouteUtils.getActiveRoute());
        }
        DiUtils.get(Router).navigate((/** @type {?} */ (commands)), extras);
    }
    /**
     * @return {?}
     */
    static back() {
        DiUtils.get(Location).back();
    }
    /**
     * @return {?}
     */
    static forward() {
        DiUtils.get(Location).forward();
    }
    /**
     * @return {?}
     */
    static refresh() {
        RouteUtils.navigate(StatesUtils.getValue(StateNames.nav)['url']);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    static navigate(url) {
        if (url.startsWith('http')) {
            window.location.href = url;
        }
        else {
            DiUtils.get(Router).navigateByUrl(url);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9uYXYvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsY0FBYyxFQUFvQixNQUFNLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxZQUFZLEVBQUUsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3BELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxPQUFPLENBQUM7QUFFOUIsTUFBTSxPQUFPLFVBQVU7Ozs7SUFFckIsTUFBTSxDQUFDLGNBQWM7O1lBQ2YsS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQWlCLGNBQWMsQ0FBQztRQUN2RCxPQUFPLEtBQUssQ0FBQyxVQUFVLEVBQUU7WUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7U0FDMUI7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7SUFFRCxNQUFNLENBQUMsa0JBQWtCOztjQUNqQixLQUFLLEdBQUcsVUFBVSxDQUFDLGNBQWMsRUFBRTtRQUN6QyxPQUFPLEtBQUssSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztJQUN0QyxDQUFDOzs7Ozs7SUFFRCxNQUFNLENBQUMsV0FBVyxDQUFDLGFBQXFCLFNBQVMsRUFBRSxVQUFVLEdBQUcsS0FBSzs7Y0FDN0QsS0FBSyxHQUFHLEVBQUU7UUFDaEIsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxVQUFVLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDbkQ7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFTLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUMsT0FBTyxFQUFFLEVBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxJQUFJLEVBQUMsRUFBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakYsQ0FBQzs7Ozs7OztJQUVELE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBd0IsRUFBRSxnQkFBK0IsRUFBRSxNQUF5QjtRQUM3RixJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDbkMsUUFBUSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdkI7UUFDRCxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsTUFBTSxHQUFHLG1CQUFrQixFQUFFLEVBQUEsQ0FBQztTQUMvQjtRQUNELElBQUksZ0JBQWdCLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDaEUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxtQkFBSSxNQUFNLEVBQUEsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztTQUMvRDtRQUNELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxtQkFBUSxRQUFRLEVBQUEsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztlQUN2RSxDQUFDLGdCQUFnQixLQUFLLElBQUksQ0FBQyxFQUFFO1lBQ2hDLFlBQVksQ0FBQyxHQUFHLENBQUMsbUJBQUksTUFBTSxFQUFBLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO1NBQ3pFO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBUyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsbUJBQU8sUUFBUSxFQUFBLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDaEUsQ0FBQzs7OztJQUVELE1BQU0sQ0FBQyxJQUFJO1FBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBVyxRQUFRLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN6QyxDQUFDOzs7O0lBRUQsTUFBTSxDQUFDLE9BQU87UUFDWixPQUFPLENBQUMsR0FBRyxDQUFXLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzVDLENBQUM7Ozs7SUFFRCxNQUFNLENBQUMsT0FBTztRQUNaLFVBQVUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBVztRQUN6QixJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDMUIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1NBQzVCO2FBQU07WUFDTCxPQUFPLENBQUMsR0FBRyxDQUFTLE1BQU0sQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNoRDtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TG9jYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0FjdGl2YXRlZFJvdXRlLCBOYXZpZ2F0aW9uRXh0cmFzLCBSb3V0ZXJ9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge1N0YXRlTmFtZXN9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge0NvbW1vbnNVdGlscywgU3RhdGVzVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge0RpVXRpbHN9IGZyb20gJy4uL2RpJztcblxuZXhwb3J0IGNsYXNzIFJvdXRlVXRpbHMge1xuXG4gIHN0YXRpYyBnZXRBY3RpdmVSb3V0ZSgpIHtcbiAgICBsZXQgcm91dGUgPSBEaVV0aWxzLmdldDxBY3RpdmF0ZWRSb3V0ZT4oQWN0aXZhdGVkUm91dGUpO1xuICAgIHdoaWxlIChyb3V0ZS5maXJzdENoaWxkKSB7XG4gICAgICByb3V0ZSA9IHJvdXRlLmZpcnN0Q2hpbGQ7XG4gICAgfVxuICAgIHJldHVybiByb3V0ZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBY3RpdmVSb3V0ZURhdGEoKSB7XG4gICAgY29uc3Qgcm91dGUgPSBSb3V0ZVV0aWxzLmdldEFjdGl2ZVJvdXRlKCk7XG4gICAgcmV0dXJuIHJvdXRlICYmIHJvdXRlLnNuYXBzaG90LmRhdGE7XG4gIH1cblxuICBzdGF0aWMgY2xlYXJPdXRsZXQob3V0bGV0TmFtZTogc3RyaW5nID0gJ3ByaW1hcnknLCBpc1JlbGF0aXZlID0gZmFsc2UpIHtcbiAgICBjb25zdCBleHRyYSA9IHt9O1xuICAgIGlmICghaXNSZWxhdGl2ZSkge1xuICAgICAgZXh0cmFbJ3JlbGF0aXZlVG8nXSA9IFJvdXRlVXRpbHMuZ2V0QWN0aXZlUm91dGUoKTtcbiAgICB9XG4gICAgRGlVdGlscy5nZXQ8Um91dGVyPihSb3V0ZXIpLm5hdmlnYXRlKFt7b3V0bGV0czoge1tvdXRsZXROYW1lXTogbnVsbH19XSwgZXh0cmEpO1xuICB9XG5cbiAgc3RhdGljIG5hdihjb21tYW5kczogc3RyaW5nIHwgYW55W10sIHBhcmFtc09yUmVsYXRpdmU/OiB7fSB8IGJvb2xlYW4sIGV4dHJhcz86IE5hdmlnYXRpb25FeHRyYXMpIHtcbiAgICBpZiAoQ29tbW9uc1V0aWxzLmlzU3RyaW5nKGNvbW1hbmRzKSkge1xuICAgICAgY29tbWFuZHMgPSBbY29tbWFuZHNdO1xuICAgIH1cbiAgICBpZiAoIWV4dHJhcykge1xuICAgICAgZXh0cmFzID0gPE5hdmlnYXRpb25FeHRyYXM+e307XG4gICAgfVxuICAgIGlmIChwYXJhbXNPclJlbGF0aXZlICYmIE9iamVjdC5rZXlzKHBhcmFtc09yUmVsYXRpdmUpLmxlbmd0aCA+IDApIHtcbiAgICAgIENvbW1vbnNVdGlscy5zZXQoPHt9PmV4dHJhcywgJ3F1ZXJ5UGFyYW1zJywgcGFyYW1zT3JSZWxhdGl2ZSk7XG4gICAgfVxuICAgIGlmICgoQ29tbW9uc1V0aWxzLmlzU3RyaW5nKGNvbW1hbmRzKSAmJiAhKDxzdHJpbmc+Y29tbWFuZHMpLnN0YXJ0c1dpdGgoJy8nKSlcbiAgICAgIHx8IChwYXJhbXNPclJlbGF0aXZlID09PSB0cnVlKSkge1xuICAgICAgQ29tbW9uc1V0aWxzLnNldCg8e30+ZXh0cmFzLCAncmVsYXRpdmVUbycsIFJvdXRlVXRpbHMuZ2V0QWN0aXZlUm91dGUoKSk7XG4gICAgfVxuICAgIERpVXRpbHMuZ2V0PFJvdXRlcj4oUm91dGVyKS5uYXZpZ2F0ZSg8YW55W10+Y29tbWFuZHMsIGV4dHJhcyk7XG4gIH1cblxuICBzdGF0aWMgYmFjaygpIHtcbiAgICBEaVV0aWxzLmdldDxMb2NhdGlvbj4oTG9jYXRpb24pLmJhY2soKTtcbiAgfVxuXG4gIHN0YXRpYyBmb3J3YXJkKCkge1xuICAgIERpVXRpbHMuZ2V0PExvY2F0aW9uPihMb2NhdGlvbikuZm9yd2FyZCgpO1xuICB9XG5cbiAgc3RhdGljIHJlZnJlc2goKSB7XG4gICAgUm91dGVVdGlscy5uYXZpZ2F0ZShTdGF0ZXNVdGlscy5nZXRWYWx1ZShTdGF0ZU5hbWVzLm5hdilbJ3VybCddKTtcbiAgfVxuXG4gIHN0YXRpYyBuYXZpZ2F0ZSh1cmw6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICh1cmwuc3RhcnRzV2l0aCgnaHR0cCcpKSB7XG4gICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgRGlVdGlscy5nZXQ8Um91dGVyPihSb3V0ZXIpLm5hdmlnYXRlQnlVcmwodXJsKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==