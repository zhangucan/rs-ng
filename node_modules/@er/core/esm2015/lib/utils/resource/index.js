/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonsUtils, ConfigUtils, StatesUtils } from '@er/utils';
import { take, tap } from 'rxjs/operators';
import { HttpUtils } from '../http';
export class ResourceUtils {
    /**
     * @param {?} options
     * @return {?}
     */
    static getConfigs(options) {
        /** @type {?} */
        let root = '';
        /** @type {?} */
        let path;
        /** @type {?} */
        let resourceUri = options.path;
        /** @type {?} */
        const resourcesConfig = Object.assign({}, ConfigUtils.getConfig().resources, options);
        if (resourcesConfig.root) {
            if (!resourceUri.startsWith('/')) {
                root = resourcesConfig.root;
            }
            else {
                resourceUri = resourceUri.substr(1);
            }
            if (!resourceUri.endsWith('.json')) {
                resourceUri += '.json';
            }
        }
        else {
            root = resourcesConfig.uri;
        }
        if (options.state) {
            path = options.state;
        }
        else {
            path = [options.module, options.key];
        }
        /** @type {?} */
        const state = StatesUtils.get(path, true);
        if (!state.value || options.reload) {
            if (options.initial) {
                state.next(options.initial);
            }
            return HttpUtils.request({
                uri: `${root}/${resourceUri}`,
                tag: path,
                onResponse: (response) => response ? CommonsUtils.restoreJsonFn(response) : null
            }).pipe(take(1), tap(response => StatesUtils.create(path, response, resourcesConfig.reserve || resourcesConfig.state !== undefined)));
        }
        else {
            return state;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9yZXNvdXJjZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRWpFLE9BQU8sRUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUVsQyxNQUFNLE9BQU8sYUFBYTs7Ozs7SUFFeEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUF3Qjs7WUFDcEMsSUFBSSxHQUFHLEVBQUU7O1lBQUUsSUFBSTs7WUFDZixXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUk7O2NBQ3hCLGVBQWUscUJBQ2hCLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxTQUFTLEVBQ2pDLE9BQU8sQ0FDWDtRQUNELElBQUksZUFBZSxDQUFDLElBQUksRUFBRTtZQUN4QixJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDaEMsSUFBSSxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUM7YUFDN0I7aUJBQU07Z0JBQ0wsV0FBVyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDckM7WUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDbEMsV0FBVyxJQUFJLE9BQU8sQ0FBQzthQUN4QjtTQUNGO2FBQU07WUFDTCxJQUFJLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQztTQUM1QjtRQUVELElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtZQUNqQixJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztTQUN0QjthQUFNO1lBQ0wsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdEM7O2NBRUssS0FBSyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztRQUV6QyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ2xDLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtnQkFDbkIsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDN0I7WUFDRCxPQUFPLFNBQVMsQ0FBQyxPQUFPLENBQUM7Z0JBQ3ZCLEdBQUcsRUFBRSxHQUFHLElBQUksSUFBSSxXQUFXLEVBQUU7Z0JBQzdCLEdBQUcsRUFBRSxJQUFJO2dCQUNULFVBQVUsRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO2FBQ2pGLENBQUMsQ0FBQyxJQUFJLENBQ0wsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxlQUFlLENBQUMsT0FBTyxJQUFJLGVBQWUsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FDcEgsQ0FBQztTQUNIO2FBQU07WUFDTCxPQUFPLEtBQUssQ0FBQztTQUNkO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSZXNvdXJjZU9wdGlvbnN9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge0NvbW1vbnNVdGlscywgQ29uZmlnVXRpbHMsIFN0YXRlc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7dGFrZSwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0h0dHBVdGlsc30gZnJvbSAnLi4vaHR0cCc7XG5cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZVV0aWxzIHtcblxuICBzdGF0aWMgZ2V0Q29uZmlncyhvcHRpb25zOiBSZXNvdXJjZU9wdGlvbnMpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGxldCByb290ID0gJycsIHBhdGg7XG4gICAgbGV0IHJlc291cmNlVXJpID0gb3B0aW9ucy5wYXRoO1xuICAgIGNvbnN0IHJlc291cmNlc0NvbmZpZyA9IHtcbiAgICAgIC4uLkNvbmZpZ1V0aWxzLmdldENvbmZpZygpLnJlc291cmNlcyxcbiAgICAgIC4uLm9wdGlvbnNcbiAgICB9O1xuICAgIGlmIChyZXNvdXJjZXNDb25maWcucm9vdCkge1xuICAgICAgaWYgKCFyZXNvdXJjZVVyaS5zdGFydHNXaXRoKCcvJykpIHtcbiAgICAgICAgcm9vdCA9IHJlc291cmNlc0NvbmZpZy5yb290O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb3VyY2VVcmkgPSByZXNvdXJjZVVyaS5zdWJzdHIoMSk7XG4gICAgICB9XG4gICAgICBpZiAoIXJlc291cmNlVXJpLmVuZHNXaXRoKCcuanNvbicpKSB7XG4gICAgICAgIHJlc291cmNlVXJpICs9ICcuanNvbic7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3QgPSByZXNvdXJjZXNDb25maWcudXJpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnN0YXRlKSB7XG4gICAgICBwYXRoID0gb3B0aW9ucy5zdGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0aCA9IFtvcHRpb25zLm1vZHVsZSwgb3B0aW9ucy5rZXldO1xuICAgIH1cblxuICAgIGNvbnN0IHN0YXRlID0gU3RhdGVzVXRpbHMuZ2V0KHBhdGgsIHRydWUpO1xuXG4gICAgaWYgKCFzdGF0ZS52YWx1ZSB8fCBvcHRpb25zLnJlbG9hZCkge1xuICAgICAgaWYgKG9wdGlvbnMuaW5pdGlhbCkge1xuICAgICAgICBzdGF0ZS5uZXh0KG9wdGlvbnMuaW5pdGlhbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gSHR0cFV0aWxzLnJlcXVlc3Qoe1xuICAgICAgICB1cmk6IGAke3Jvb3R9LyR7cmVzb3VyY2VVcml9YCxcbiAgICAgICAgdGFnOiBwYXRoLFxuICAgICAgICBvblJlc3BvbnNlOiAocmVzcG9uc2UpID0+IHJlc3BvbnNlID8gQ29tbW9uc1V0aWxzLnJlc3RvcmVKc29uRm4ocmVzcG9uc2UpIDogbnVsbFxuICAgICAgfSkucGlwZShcbiAgICAgICAgdGFrZSgxKSxcbiAgICAgICAgdGFwKHJlc3BvbnNlID0+IFN0YXRlc1V0aWxzLmNyZWF0ZShwYXRoLCByZXNwb25zZSwgcmVzb3VyY2VzQ29uZmlnLnJlc2VydmUgfHwgcmVzb3VyY2VzQ29uZmlnLnN0YXRlICE9PSB1bmRlZmluZWQpKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbiAgfVxufVxuIl19