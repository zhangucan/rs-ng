/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DataAttr, DataType, RegPatterns } from '@er/types';
import { CommonsUtils, ConfigUtils } from '@er/utils';
import * as esb from 'elastic-builder';
import { LogUtils } from '../log';
export class DataFieldUtils {
    /**
     * @param {?} dataField
     * @return {?}
     */
    static getFieldDefaultProps(dataField) {
        switch (dataField.dataAttr) {
            case DataAttr.DATA_CODE:
                return DataFieldUtils.getDataCodeFieldProps(dataField);
            case DataAttr.URL:
                dataField.dataType = DataType.STRING;
                dataField.pattern = RegPatterns.url;
                break;
            case DataAttr.PHONE:
                dataField.dataType = DataType.STRING;
                dataField.pattern = RegPatterns.phone;
                break;
            case DataAttr.ID_CARD:
                dataField.dataType = DataType.STRING;
                break;
            case DataAttr.EMAIL:
                dataField.dataType = DataType.STRING;
                dataField.pattern = RegPatterns.email;
                break;
            case DataAttr.CURRENCY:
                dataField.defaultValue = 0;
                dataField.dataType = DataType.NUMBER;
                dataField.pattern = RegPatterns.pNumeric;
                break;
        }
        return dataField;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    static getDefaultFieldName(field) {
        if (field) {
            if (field.defaultKey) {
                return field.defaultKey;
            }
            else {
                return field.key;
            }
        }
    }
    /**
     * @param {?} fieldValue
     * @param {?} field
     * @return {?}
     */
    static getFieldDisplayContent(fieldValue, field) {
        if (!fieldValue) {
            return '';
        }
        if (field) {
            if (CommonsUtils.isJson(fieldValue)) {
                /** @type {?} */
                let key;
                if (field) {
                    key = DataFieldUtils.getDefaultFieldName(field);
                }
                if (key) {
                    return CommonsUtils.get(fieldValue, key);
                }
                else {
                    /** @type {?} */
                    const trans = {};
                    Object.keys(fieldValue).forEach(sub => {
                        /** @type {?} */
                        const label = CommonsUtils.get(field, `fields.${sub}.label`)
                            && CommonsUtils.get(field, `refer.entity.${sub}.label`)
                            && CommonsUtils.get(field, `refer.${sub}.label`);
                        if (label) {
                            trans[label] = fieldValue[sub];
                        }
                        else {
                            trans[sub] = fieldValue[sub];
                        }
                    });
                    fieldValue = trans;
                }
            }
        }
        if (CommonsUtils.isBoolean(fieldValue)) {
            return fieldValue ? '是' : '否';
        }
        else {
            return CommonsUtils.getText(fieldValue);
        }
    }
    /**
     * @private
     * @param {?} dataField
     * @return {?}
     */
    static getDataCodeFieldProps(dataField) {
        /** @type {?} */
        const props = ConfigUtils.getConfig().dataFieldProps.dataCode;
        if (!dataField.catCode) {
            LogUtils.error('DataFieldUtils', `dataCode字段没有定义【catCode】属性`, dataField);
            return;
        }
        return (/** @type {?} */ ({
            dataType: DataType.JSON,
            sortKey: props.codeKey,
            aggKey: props.codeKey,
            defaultKey: props.nameKey,
            apiDataProps: (/** @type {?} */ ({
                apiEntry: props.apiEntry,
                searchFields: [props.nameKey, props.codeKey, props.abbrKey],
                returnFields: [props.nameKey, props.codeKey],
                query: [
                    esb.termQuery(`${props.catKey}.code`, dataField.catCode),
                    props.inUseKey ? esb.boolQuery().mustNot(esb.termQuery(props.inUseKey, false)) : undefined
                ],
                sort: props.codeKey,
                size: 10
            })),
            dataItemProps: {
                labelKey: props.nameKey,
                valueKey: [props.nameKey, props.codeKey],
                idKey: props.codeKey,
                template: (item) => {
                    return `<span><b>${item[props.nameKey]}</b></span>  <span class="badge badge-info"> ${item[props.codeKey]}</span> `;
                }
            }
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,