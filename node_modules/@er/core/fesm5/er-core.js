import { NgxPermissionsService, NgxRolesService } from 'ngx-permissions';
import { NgValidators } from '@er/validate';
import { BehaviorSubject as BehaviorSubject$1 } from 'rxjs/internal/BehaviorSubject';
import { Subject as Subject$1 } from 'rxjs/index';
import { Observable as Observable$1 } from 'rxjs/internal/Observable';
import JSONFormatter from 'json-formatter-js';
import { DomSanitizer, Title } from '@angular/platform-browser';
import 'reflect-metadata';
import { Subject, Subscription, of, BehaviorSubject, zip, Observable, timer, throwError, TimeoutError, EMPTY } from 'rxjs';
import { termQuery, prefixQuery, matchAllQuery, boolQuery } from 'elastic-builder';
import { __spread, __extends, __assign, __read } from 'tslib';
import { Location, NgIf, LocationStrategy, PathLocationStrategy, CommonModule } from '@angular/common';
import { HttpClient, HttpEventType, HttpHeaders, HttpParams, HttpRequest, HttpErrorResponse, HttpResponse, HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';
import { EventEmitter, Directive, Input, TemplateRef, ContentChildren, ApplicationRef, Injectable, Component, Inject, InjectionToken, Optional, ChangeDetectionStrategy, ElementRef, Output, Renderer2, ViewContainerRef, HostBinding, Pipe, ChangeDetectorRef, NgZone, HostListener, Compiler, ComponentFactoryResolver, NgModule, SimpleChange, Injector, defineInjectable, inject, INJECTOR, forwardRef, KeyValueDiffers, ViewChild } from '@angular/core';
import { FormControl, FormGroup, FormBuilder, Validators, NG_VALIDATORS, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { ActivatedRoute, Router, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, DefaultUrlSerializer, RouteReuseStrategy, RouterModule } from '@angular/router';
import { HttpContentType, HttpMethod, HttpRequestPayloadType, HttpResponseType, StateNames, LogLevel, NO_OP, ApiServerType, NotifyLevel, ContentType, THEME_COLORS, Order, DataAttr, DataType, RegPatterns, NotifyType, StompStates } from '@er/types';
import { CommonsUtils, CacheUtils, ConfigUtils, RxUtils, StatesUtils, DateUtils, DialogUtils, IdUtils, ContextUtils, EsUtils, DataItemUtils, JwtUtils, BrowserOsUtils, RegUtils, DomUtils, ColorUtils, IdCardUtils, TreeUtils } from '@er/utils';
import { StompConfig, StompService } from '@stomp/ng2-stompjs';
import { dynamicDirectiveDef, DynamicModule } from 'ng-dynamic-component';
import { NgPipesModule } from 'ngx-pipes';
import { catchError, filter, map, tap, takeUntil, first, switchMap, distinctUntilChanged, mapTo, scan, startWith, takeWhile, timeout, take } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BaseClass = /** @class */ (function () {
    function BaseClass() {
    }
    return BaseClass;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * provide auto unsubscribe support
 */
var  /**
 * provide auto unsubscribe support
 */
Unsubscribe = /** @class */ (function (_super) {
    __extends(Unsubscribe, _super);
    function Unsubscribe() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.destroyed$ = new Subject();
        _this._$subscriptions = [];
        return _this;
    }
    Object.defineProperty(Unsubscribe.prototype, "$subscriptions", {
        set: /**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) {
            this._$subscriptions.push(subscription);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Unsubscribe.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.stopSubscribe();
        this._$subscriptions
            .filter(function (sub) { return sub; })
            .map(function (sub) { return sub.unsubscribe(); });
        for (var prop in this) {
            if (this[prop]) {
                /** @type {?} */
                var m = this[prop];
                if (m && m instanceof Subscription) {
                    m.unsubscribe();
                }
            }
        }
    };
    /**
     * @return {?}
     */
    Unsubscribe.prototype.stopSubscribe = /**
     * @return {?}
     */
    function () {
        this.destroyed$.next();
        this.destroyed$.complete();
    };
    return Unsubscribe;
}(BaseClass));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * provide event emit support
 * @abstract
 */
var  /**
 * provide event emit support
 * @abstract
 */
BaseDirective = /** @class */ (function (_super) {
    __extends(BaseDirective, _super);
    function BaseDirective() {
        var _this = _super.call(this) || this;
        _this.animations = {};
        _this.ctx = {
            $from: (/** @type {?} */ (_this))
        };
        return _this;
    }
    /**
     * @return {?}
     */
    BaseDirective.prototype.getContext = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var id;
        if (!this['$id'] && this['$props'] && this['$props'].$id) {
            id = this['$props'].$id;
            this['$id'] = id;
        }
        /** @type {?} */
        var context = {
            $from: (/** @type {?} */ (this))
        };
        return id ? __assign({ $id: id }, context) : context;
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    BaseDirective.prototype.getEventContext = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        return __assign({}, this.getContext(), event || {});
    };
    /**
     * @param {?} eventName
     * @param {?} event
     * @return {?}
     */
    BaseDirective.prototype.emitEvent = /**
     * @param {?} eventName
     * @param {?} event
     * @return {?}
     */
    function (eventName, event) {
        /** @type {?} */
        var eventEmitter = this[eventName];
        if (!eventEmitter) {
            eventEmitter = new EventEmitter();
            this[eventName] = eventEmitter;
        }
        if (eventEmitter instanceof EventEmitter) {
            return eventEmitter.emit(this.getEventContext(event));
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    BaseDirective.prototype.isFirstChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        return Object.keys(changes).every(function (prop) { return changes[prop].isFirstChange(); });
    };
    /**
     * @param {?=} name
     * @return {?}
     */
    BaseDirective.prototype.animate = /**
     * @param {?=} name
     * @return {?}
     */
    function (name) {
        return !(this.animations[name] || false);
    };
    return BaseDirective;
}(Unsubscribe));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
BaseService = /** @class */ (function (_super) {
    __extends(BaseService, _super);
    function BaseService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BaseService;
}(Unsubscribe));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TypedTemplateDirective = /** @class */ (function () {
    function TypedTemplateDirective(template) {
        this.template = template;
    }
    /**
     * @return {?}
     */
    TypedTemplateDirective.prototype.getType = /**
     * @return {?}
     */
    function () {
        return this.type;
    };
    TypedTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erTypedTemplate]'
                },] }
    ];
    /** @nocollapse */
    TypedTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    TypedTemplateDirective.propDecorators = {
        type: [{ type: Input, args: ['erTypedTemplate',] }]
    };
    return TypedTemplateDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * provide template & dynamic query support
 * @abstract
 */
var BaseComponent = /** @class */ (function (_super) {
    __extends(BaseComponent, _super);
    function BaseComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.templates = {};
        return _this;
    }
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.typedTemplates && this.typedTemplates.length > 0) {
            this.typedTemplates.forEach(function (item) {
                if (item.type) {
                    CommonsUtils.set(_this.templates, item.type, item.template);
                }
                else {
                    _this.templates['_'] = item.template;
                }
            });
        }
    };
    /**
     * @param {?} outputs
     * @param {?} eventName
     * @param {?} defaultHandler
     * @param {?} event
     * @return {?}
     */
    BaseComponent.prototype.eventHandler = /**
     * @param {?} outputs
     * @param {?} eventName
     * @param {?} defaultHandler
     * @param {?} event
     * @return {?}
     */
    function (outputs, eventName, defaultHandler, event) {
        if (outputs && outputs[eventName]) {
            return outputs[eventName].call(this, event);
        }
        else {
            return defaultHandler(event);
        }
    };
    /**
     * @param {?=} name
     * @param {...?} defaultTpls
     * @return {?}
     */
    BaseComponent.prototype.template = /**
     * @param {?=} name
     * @param {...?} defaultTpls
     * @return {?}
     */
    function (name) {
        var defaultTpls = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            defaultTpls[_i - 1] = arguments[_i];
        }
        if (!name) {
            name = '_';
        }
        if (this.templates[name]) {
            return this.templates[name];
        }
        else if (defaultTpls.length > 0) {
            /** @type {?} */
            var tpls = CommonsUtils.filter(defaultTpls, function (defaultTpl) { return !!defaultTpl; });
            if (tpls.length > 0) {
                return tpls[0];
            }
        }
        return undefined;
    };
    /**
     * @template C
     * @param {?} id
     * @return {?}
     */
    BaseComponent.prototype.getComponentBySelectorId = /**
     * @template C
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (this.selectors) {
            /** @type {?} */
            var matched = this.selectors.toArray().filter(function (comp) { return comp.id === id; });
            if (matched.length === 1) {
                return matched[0].hostComponent;
            }
        }
        return undefined;
    };
    /**
     * @param {?} name
     * @param {...?} defaultTpls
     * @return {?}
     */
    BaseComponent.prototype.hasTemplate = /**
     * @param {?} name
     * @param {...?} defaultTpls
     * @return {?}
     */
    function (name) {
        var defaultTpls = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            defaultTpls[_i - 1] = arguments[_i];
        }
        return this.template.apply(this, __spread([name], defaultTpls)) !== undefined;
    };
    /**
     * @param {?} templates
     * @return {?}
     */
    BaseComponent.prototype.hasChildren = /**
     * @param {?} templates
     * @return {?}
     */
    function (templates) {
        return CommonsUtils.isJson(templates);
    };
    // empty hooks for dyna bind
    // empty hooks for dyna bind
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngAfterContentChecked = 
    // empty hooks for dyna bind
    /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this['__ngAfterViewInit'] = true;
    };
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this['__ngOnInit'] = true;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    BaseComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    BaseComponent.propDecorators = {
        customerTpl: [{ type: Input }],
        typedTemplates: [{ type: ContentChildren, args: [TypedTemplateDirective,] }]
    };
    return BaseComponent;
}(BaseDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var cacheKey = '$rootInjectables';
/** @type {?} */
var viewContainerRef = null;
var DiUtils = /** @class */ (function () {
    function DiUtils() {
    }
    /**
     * @template T
     * @param {?} token
     * @return {?}
     */
    DiUtils.get = /**
     * @template T
     * @param {?} token
     * @return {?}
     */
    function (token) {
        /** @type {?} */
        var cached = CacheUtils.get(cacheKey, token);
        if (!cached) {
            if (!DiUtils.injector) {
                throw new Error('rootInjector 初始化失败');
            }
            cached = DiUtils.injector.get(token);
            if (cached) {
                CacheUtils.put(cacheKey, token, cached);
            }
        }
        return cached;
    };
    /**
     * @return {?}
     */
    DiUtils.getRootViewContainerRef = /**
     * @return {?}
     */
    function () {
        if (!viewContainerRef) {
            /** @type {?} */
            var applicationRef = DiUtils.get(ApplicationRef);
            /** @type {?} */
            var appInstance = applicationRef.components[0].instance;
            if (!appInstance.rootViewContainerRef) {
                /** @type {?} */
                var appName = applicationRef.componentTypes[0].name;
                throw new Error(appName + " constructor\u4E2D\u672A\u5B9A\u4E49rootViewContainerRef");
            }
            viewContainerRef = appInstance.rootViewContainerRef;
        }
        return viewContainerRef;
    };
    DiUtils.injector = null;
    return DiUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HttpUtils = /** @class */ (function () {
    function HttpUtils() {
    }
    /**
     * @return {?}
     */
    HttpUtils.getHttpClient = /**
     * @return {?}
     */
    function () {
        if (!HttpUtils._httpClient) {
            HttpUtils._httpClient = DiUtils.get(HttpClient);
        }
        return HttpUtils._httpClient;
    };
    /**
     * @return {?}
     */
    HttpUtils.timeout = /**
     * @return {?}
     */
    function () {
        if (HttpUtils._timeout) {
            HttpUtils._timeout = ConfigUtils.getConfig().httpTimeout || 5000;
        }
        return HttpUtils._timeout;
    };
    /**
     * @template T
     * @param {?} options
     * @return {?}
     */
    HttpUtils.request = /**
     * @template T
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var httpRequestOptions;
        if (CommonsUtils.isString(options)) {
            httpRequestOptions = CommonsUtils.getObjWhenStr(options, 'uri');
        }
        else {
            httpRequestOptions = (/** @type {?} */ (options));
        }
        if (httpRequestOptions.stateName) {
            return StatesUtils.get(httpRequestOptions.stateName);
        }
        if (httpRequestOptions.onRequest) {
            /** @type {?} */
            var result = httpRequestOptions.onRequest(httpRequestOptions);
            if (result === false) {
                return;
            }
            httpRequestOptions = (/** @type {?} */ (result));
        }
        /** @type {?} */
        var url = httpRequestOptions.uri || '/';
        if (!url.startsWith('http') && url.indexOf('assets/') < 0) {
            if (!url.startsWith('/')) {
                url = '/' + url;
            }
            url = ConfigUtils.getConfig().api.servers[httpRequestOptions.serverType || ConfigUtils.getConfig().api.default].uri + url;
        }
        /** @type {?} */
        var requestOptions = {};
        requestOptions.observe = httpRequestOptions.observe || 'body';
        requestOptions.responseType = httpRequestOptions.responseType || HttpResponseType.JSON;
        requestOptions.headers = HttpUtils.getRequestHeader(httpRequestOptions);
        /** @type {?} */
        var method = httpRequestOptions.method || ((httpRequestOptions.body || httpRequestOptions.payload) ? HttpMethod.POST : HttpMethod.GET);
        if (httpRequestOptions.payload) {
            if (httpRequestOptions.payloadType === HttpRequestPayloadType.PARAMS) {
                httpRequestOptions.params = httpRequestOptions.payload;
            }
            else if (httpRequestOptions.payloadType === HttpRequestPayloadType.BODY) {
                httpRequestOptions.body = httpRequestOptions.payload;
            }
            else if (!method || httpRequestOptions.method === HttpMethod.GET) {
                httpRequestOptions.params = httpRequestOptions.payload;
            }
            else {
                httpRequestOptions.body = httpRequestOptions.payload;
            }
        }
        if (httpRequestOptions.params) {
            requestOptions.params = HttpUtils.getRequestParams(httpRequestOptions);
        }
        if (httpRequestOptions.body) {
            requestOptions.body = HttpUtils.getRequestBody(httpRequestOptions);
        }
        if (!httpRequestOptions.context) {
            httpRequestOptions.context = this; // use HttpUtils.request.call(this,...) to init context
        }
        return HttpUtils.getHttpClient().request(method, url, __assign({}, requestOptions, { observe: 'events' }))
            .pipe(RxUtils.retry(httpRequestOptions.retry, HttpUtils.timeout()), filter(function (event) { return event.type === HttpEventType.Sent || event.type === HttpEventType.Response; }), tap(function (event) {
            if (event.type === HttpEventType.Sent) {
                HttpUtils.updateHttpTagState(httpRequestOptions.tag, true, { url: url, opts: httpRequestOptions });
            }
        }), filter(function (event) { return event.type === HttpEventType.Response; }), map(function (event) {
            /** @type {?} */
            var response = event;
            if (!httpRequestOptions.observe || httpRequestOptions.observe === 'body') {
                response = event.body;
            }
            HttpUtils.updateHttpTagState(httpRequestOptions.tag, false, {
                status: 'success',
                httpRequestOptions: httpRequestOptions
            });
            /** @type {?} */
            var resp = httpRequestOptions.onResponse
                ? httpRequestOptions.onResponse.call(httpRequestOptions.context, response, httpRequestOptions)
                : response;
            if (httpRequestOptions.stateName) {
                StatesUtils.update(httpRequestOptions.stateName, resp);
            }
            return resp;
        }), catchError(function (error) {
            HttpUtils.updateHttpTagState(httpRequestOptions.tag, false, { status: 'error', error: error });
            if (httpRequestOptions.onError) {
                httpRequestOptions.onError.call(httpRequestOptions.context, error, httpRequestOptions);
            }
            return of('服务器请求失败，状态码:' + error.status);
        }));
    };
    /**
     * @private
     * @param {?} tag
     * @param {?} state
     * @param {?=} extra
     * @return {?}
     */
    HttpUtils.updateHttpTagState = /**
     * @private
     * @param {?} tag
     * @param {?} state
     * @param {?=} extra
     * @return {?}
     */
    function (tag, state, extra) {
        if (tag) {
            StatesUtils.create([StateNames.http, tag], __assign({ start: state }, extra));
        }
    };
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    HttpUtils.getRequestParams = /**
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var params;
        if (typeof options.params === 'string') {
            params = new HttpParams({ fromString: options.params });
        }
        else {
            params = new HttpParams();
            for (var key in options.params) {
                if (key) {
                    if (options.params.hasOwnProperty(key) && (options.params[key] !== null || options.params[key] !== undefined)) {
                        params = params.append(key, CommonsUtils.toString(options.params[key]));
                    }
                }
            }
        }
        return params;
    };
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    HttpUtils.getRequestBody = /**
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return options.body;
    };
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    HttpUtils.getRequestHeader = /**
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var headers = new HttpHeaders();
        if (options.contentType) {
            headers = headers.append('Content-Type', options.contentType);
        }
        else {
            headers = headers.append('Content-Type', HttpContentType.JSON);
        }
        if (options.headers) {
            for (var key in options.headers) {
                if (key) {
                    headers = headers.append(key, options.headers[key]);
                }
            }
        }
        return headers;
    };
    /**
     * @param {?} file
     * @return {?}
     */
    HttpUtils.prototype.upload = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var formdata = new FormData();
        formdata.append('file', file);
        /** @type {?} */
        var req = new HttpRequest('POST', "upload", formdata, {
            reportProgress: true,
            responseType: 'text'
        });
        return HttpUtils.getHttpClient().request(req);
    };
    HttpUtils._httpClient = null;
    HttpUtils._timeout = 3000;
    return HttpUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LogService = /** @class */ (function () {
    function LogService() {
    }
    /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    LogService.prototype.debug = /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    function (from, message) {
        var context = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            context[_i - 2] = arguments[_i];
        }
        if (!ConfigUtils.getConfig().isProduction
            && ConfigUtils.getConfig().log.enableApp
            && ConfigUtils.getConfig().log.level <= LogLevel.DEBUG) {
            if ((typeof from) !== 'string' && from.constructor) {
                from = from.constructor.name;
            }
            if (ConfigUtils.getConfig().log.blackLList.indexOf(from) < 0) {
                this.getLogger().log("[" + DateUtils.getFormattedTime() + "] %c DEBUG ", 'color: white; background: green; font-size: 18px;', this.getLogData(__spread([from, message], context)));
            }
        }
    };
    /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    LogService.prototype.info = /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    function (from, message) {
        var context = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            context[_i - 2] = arguments[_i];
        }
        if (ConfigUtils.getConfig().log.level <= LogLevel.INFO) {
            if (typeof from !== 'string' && from.constructor) {
                from = from.constructor.name;
            }
            if (ConfigUtils.getConfig().log.blackLList.indexOf(from) < 0) {
                this.getLogger().log("[" + DateUtils.getFormattedTime() + "] %c INFO ", 'color: white; background: blue; font-size: 18px;', this.getLogData(__spread([from, message], context)));
            }
        }
    };
    /**
     * @param {?} messages
     * @return {?}
     */
    LogService.prototype.warn = /**
     * @param {?} messages
     * @return {?}
     */
    function (messages) {
        if (ConfigUtils.getConfig().log.level <= LogLevel.WARN) {
            this.getLogger().log("[" + DateUtils.getFormattedTime() + "] %c WARN ", 'color: white; background: blue; font-size: 18px;', this.getLogData(messages));
        }
    };
    /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    LogService.prototype.error = /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    function (from, message) {
        var context = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            context[_i - 2] = arguments[_i];
        }
        DialogUtils.error('错误', message);
        if (ConfigUtils.getConfig().log.level <= LogLevel.ERROR) {
            this.getLogger().log("[" + DateUtils.getFormattedTime() + "] %c ERROR ", 'color: white; background: red; font-size: 18px;', this.getLogData(__spread([from, message], context)));
            if (ConfigUtils.getConfig().log.httpPost) {
                if (CommonsUtils.isFunction(from)) {
                    from = from.constructor.name;
                }
                this.getHttpLogger().log(DateUtils.getFormattedDateTime(), this.getLogData([from, message]));
            }
        }
    };
    /**
     * @protected
     * @return {?}
     */
    LogService.prototype.getLogger = /**
     * @protected
     * @return {?}
     */
    function () {
        return console;
    };
    /**
     * @protected
     * @return {?}
     */
    LogService.prototype.getHttpLogger = /**
     * @protected
     * @return {?}
     */
    function () {
        return (/** @type {?} */ ({
            log: function (message) {
                var optionalParams = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    optionalParams[_i - 1] = arguments[_i];
                }
                HttpUtils.request(__assign({}, ConfigUtils.getConfig().logHttpOptions, { body: __assign({ message: message }, optionalParams) }));
            }
        }));
    };
    /**
     * @private
     * @param {?} messages
     * @return {?}
     */
    LogService.prototype.getLogData = /**
     * @private
     * @param {?} messages
     * @return {?}
     */
    function (messages) {
        return __assign({}, messages);
    };
    LogService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ LogService.ngInjectableDef = defineInjectable({ factory: function LogService_Factory() { return new LogService(); }, token: LogService, providedIn: "root" });
    return LogService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LogUtils = /** @class */ (function () {
    function LogUtils() {
    }
    /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    LogUtils.debug = /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    function (from, message) {
        var context = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            context[_i - 2] = arguments[_i];
        }
        LogUtils.getLogService().debug(from, message, context);
    };
    /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    LogUtils.info = /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    function (from, message) {
        var context = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            context[_i - 2] = arguments[_i];
        }
        LogUtils.getLogService().info(from, message, context);
    };
    /**
     * @param {?} messages
     * @return {?}
     */
    LogUtils.warn = /**
     * @param {?} messages
     * @return {?}
     */
    function (messages) {
        LogUtils.getLogService().warn(messages);
    };
    /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    LogUtils.error = /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    function (from, message) {
        var context = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            context[_i - 2] = arguments[_i];
        }
        LogUtils.getLogService().error(from, message, context);
    };
    /**
     * @private
     * @return {?}
     */
    LogUtils.getLogService = /**
     * @private
     * @return {?}
     */
    function () {
        if (!LogUtils._logService) {
            LogUtils._logService = DiUtils.get(LogService);
        }
        return LogUtils._logService;
    };
    LogUtils._logService = null;
    return LogUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComponentUtils = /** @class */ (function () {
    function ComponentUtils() {
    }
    /**
     * @param {?} compInstance
     * @param {?} props
     * @return {?}
     */
    ComponentUtils.resolveProps = /**
     * @param {?} compInstance
     * @param {?} props
     * @return {?}
     */
    function (compInstance, props) {
        /** @type {?} */
        var result = {
            inputs: {},
            outputs: {}
        };
        if (compInstance && CommonsUtils.isJson(props)) {
            Object.keys(props).forEach(function (key) {
                if (compInstance[key] instanceof EventEmitter) {
                    result.outputs[key] = props[key];
                }
                else {
                    result.inputs[key] = props[key];
                }
            });
        }
        return result;
    };
    /**
     * @param {?} compInstance
     * @param {?} hooks
     * @param {?} constructor
     * @param {?} destructor
     * @return {?}
     */
    ComponentUtils.bindLifeCycles = /**
     * @param {?} compInstance
     * @param {?} hooks
     * @param {?} constructor
     * @param {?} destructor
     * @return {?}
     */
    function (compInstance, hooks, constructor, destructor) {
        /** @type {?} */
        var originalLifeCycles;
        if (hooks) {
            originalLifeCycles = {};
            Object.keys(hooks).forEach(function (eventName) {
                /** @type {?} */
                var ngEventName = "ng" + CommonsUtils.capitalize(eventName);
                if (compInstance["__" + ngEventName] === true) {
                    ((/** @type {?} */ (hooks[eventName]))).call(compInstance, compInstance);
                }
                else {
                    /** @type {?} */
                    var original_1 = constructor.prototype[ngEventName];
                    constructor.prototype[ngEventName] = function () {
                        var _a;
                        CommonsUtils.isFunction(original_1) && original_1.apply(compInstance, arguments);
                        /** @type {?} */
                        var args = Array.prototype.slice.call(arguments);
                        (_a = ((/** @type {?} */ (hooks[eventName])))).call.apply(_a, __spread([compInstance], args, [compInstance]));
                    };
                    originalLifeCycles[ngEventName] = original_1;
                }
            });
            if (Object.keys(originalLifeCycles).length > 0) {
                /** @type {?} */
                var destroyLifeCycle_1 = 'ngOnDestroy';
                constructor.prototype[destroyLifeCycle_1] = function () {
                    Object.keys(originalLifeCycles).forEach(function (lifeCycleName) {
                        constructor.prototype[lifeCycleName] = originalLifeCycles[lifeCycleName];
                    });
                    CommonsUtils.isFunction(destructor) && destructor.apply(compInstance);
                    constructor.prototype[destroyLifeCycle_1] = destructor;
                };
            }
        }
    };
    // static bindLifeCycles(compInstance, hooks) {
    //   if (!CommonsUtils.isEmpty(hooks)) {
    //     Object.keys(hooks).forEach(eventName => {
    //       const hookName = `ng${CommonsUtils.capitalize(eventName)}`;
    //       const original = compInstance.__proto__[hookName];
    //       compInstance.__proto__[hookName] = function () {
    //         CommonsUtils.isFunction(original) && original.apply(compInstance, arguments);
    //         const args = Array.prototype.slice.call(arguments);
    //         (<Function>hooks[eventName]).call(compInstance, ...args, compInstance);
    //       };
    //     });
    //   }
    // }
    /**
     * set component instance attributes and event from props object
     */
    // static bindLifeCycles(compInstance, hooks) {
    //   if (!CommonsUtils.isEmpty(hooks)) {
    //     Object.keys(hooks).forEach(eventName => {
    //       const hookName = `ng${CommonsUtils.capitalize(eventName)}`;
    //       const original = compInstance.__proto__[hookName];
    //       compInstance.__proto__[hookName] = function () {
    //         CommonsUtils.isFunction(original) && original.apply(compInstance, arguments);
    //         const args = Array.prototype.slice.call(arguments);
    //         (<Function>hooks[eventName]).call(compInstance, ...args, compInstance);
    //       };
    //     });
    //   }
    // }
    /**
     * set component instance attributes and event from props object
     * @param {?} compInstance
     * @param {?} props
     * @param {?=} unSubscribe
     * @return {?}
     */
    ComponentUtils.bind = 
    // static bindLifeCycles(compInstance, hooks) {
    //   if (!CommonsUtils.isEmpty(hooks)) {
    //     Object.keys(hooks).forEach(eventName => {
    //       const hookName = `ng${CommonsUtils.capitalize(eventName)}`;
    //       const original = compInstance.__proto__[hookName];
    //       compInstance.__proto__[hookName] = function () {
    //         CommonsUtils.isFunction(original) && original.apply(compInstance, arguments);
    //         const args = Array.prototype.slice.call(arguments);
    //         (<Function>hooks[eventName]).call(compInstance, ...args, compInstance);
    //       };
    //     });
    //   }
    // }
    /**
     * set component instance attributes and event from props object
     * @param {?} compInstance
     * @param {?} props
     * @param {?=} unSubscribe
     * @return {?}
     */
    function (compInstance, props, unSubscribe) {
        var _loop_1 = function (prop) {
            if (prop === 'hooks') {
                /** @type {?} */
                var constructor = ComponentUtils.getConstructor(compInstance);
                /** @type {?} */
                var destructor = constructor.prototype['ngOnDestroy'];
                ComponentUtils.bindLifeCycles(compInstance, props[prop], constructor, destructor);
            }
            else if ((compInstance[prop] instanceof EventEmitter)) {
                ((/** @type {?} */ (compInstance[prop])))
                    .pipe(takeUntil(unSubscribe || compInstance['destroyed$']))
                    .subscribe(function (event) {
                    try {
                        if (CommonsUtils.isFunction(compInstance['getEventContext'])) {
                            event = compInstance.getEventContext(event);
                        }
                        props[prop].call(compInstance, event);
                    }
                    catch (e) {
                        LogUtils.error(compInstance, '操作失败', e);
                    }
                });
            }
            else {
                compInstance[prop] = props[prop];
            }
        };
        for (var prop in props) {
            _loop_1(prop);
        }
    };
    /**
     * @param {?} compInstance
     * @param {?} methodName
     * @param {?} newFun
     * @param {?=} position
     * @return {?}
     */
    ComponentUtils.reWriteMethod = /**
     * @param {?} compInstance
     * @param {?} methodName
     * @param {?} newFun
     * @param {?=} position
     * @return {?}
     */
    function (compInstance, methodName, newFun, position) {
        if (position === void 0) { position = 'after'; }
        /** @type {?} */
        var buildInFn = compInstance[methodName];
        Object.defineProperty(compInstance, methodName, {
            get: function () {
                return function (args) {
                    if (buildInFn && position === 'after') {
                        buildInFn.call(compInstance, args);
                    }
                    newFun.call(compInstance, args);
                    if (buildInFn && position === 'before') {
                        buildInFn.call(compInstance, args);
                    }
                };
            }
        });
    };
    /**
     * @param {?} viewContainer
     * @return {?}
     */
    ComponentUtils.getHostComponentInst = /**
     * @param {?} viewContainer
     * @return {?}
     */
    function (viewContainer) {
        if (viewContainer) {
            /** @type {?} */
            var componentView = viewContainer['_data'].componentView;
            if (componentView) {
                return componentView.component;
            }
        }
        return null;
    };
    /**
     * @param {?} viewContainer
     * @return {?}
     */
    ComponentUtils.getViewComponentRef = /**
     * @param {?} viewContainer
     * @return {?}
     */
    function (viewContainer) {
        if (viewContainer) {
            /** @type {?} */
            var view = viewContainer['_view'];
            if (view) {
                return view.component;
            }
        }
        return null;
    };
    /**
     * @param {?} component
     * @return {?}
     */
    ComponentUtils.getConstructor = /**
     * @param {?} component
     * @return {?}
     */
    function (component) {
        return component.__proto__.constructor;
    };
    return ComponentUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RouteUtils = /** @class */ (function () {
    function RouteUtils() {
    }
    /**
     * @return {?}
     */
    RouteUtils.getActiveRoute = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var route = DiUtils.get(ActivatedRoute);
        while (route.firstChild) {
            route = route.firstChild;
        }
        return route;
    };
    /**
     * @return {?}
     */
    RouteUtils.getActiveRouteData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var route = RouteUtils.getActiveRoute();
        return route && route.snapshot.data;
    };
    /**
     * @param {?=} outletName
     * @param {?=} isRelative
     * @return {?}
     */
    RouteUtils.clearOutlet = /**
     * @param {?=} outletName
     * @param {?=} isRelative
     * @return {?}
     */
    function (outletName, isRelative) {
        if (outletName === void 0) { outletName = 'primary'; }
        if (isRelative === void 0) { isRelative = false; }
        var _a;
        /** @type {?} */
        var extra = {};
        if (!isRelative) {
            extra['relativeTo'] = RouteUtils.getActiveRoute();
        }
        DiUtils.get(Router).navigate([{ outlets: (_a = {}, _a[outletName] = null, _a) }], extra);
    };
    /**
     * @param {?} commands
     * @param {?=} paramsOrRelative
     * @param {?=} extras
     * @return {?}
     */
    RouteUtils.nav = /**
     * @param {?} commands
     * @param {?=} paramsOrRelative
     * @param {?=} extras
     * @return {?}
     */
    function (commands, paramsOrRelative, extras) {
        if (CommonsUtils.isString(commands)) {
            commands = [commands];
        }
        if (!extras) {
            extras = (/** @type {?} */ ({}));
        }
        if (paramsOrRelative && Object.keys(paramsOrRelative).length > 0) {
            CommonsUtils.set((/** @type {?} */ (extras)), 'queryParams', paramsOrRelative);
        }
        if ((CommonsUtils.isString(commands) && !((/** @type {?} */ (commands))).startsWith('/'))
            || (paramsOrRelative === true)) {
            CommonsUtils.set((/** @type {?} */ (extras)), 'relativeTo', RouteUtils.getActiveRoute());
        }
        DiUtils.get(Router).navigate((/** @type {?} */ (commands)), extras);
    };
    /**
     * @return {?}
     */
    RouteUtils.back = /**
     * @return {?}
     */
    function () {
        DiUtils.get(Location).back();
    };
    /**
     * @return {?}
     */
    RouteUtils.forward = /**
     * @return {?}
     */
    function () {
        DiUtils.get(Location).forward();
    };
    /**
     * @return {?}
     */
    RouteUtils.refresh = /**
     * @return {?}
     */
    function () {
        RouteUtils.navigate(StatesUtils.getValue(StateNames.nav)['url']);
    };
    /**
     * @param {?} url
     * @return {?}
     */
    RouteUtils.navigate = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (url.startsWith('http')) {
            window.location.href = url;
        }
        else {
            DiUtils.get(Router).navigateByUrl(url);
        }
    };
    return RouteUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RouteBindComponent = /** @class */ (function (_super) {
    __extends(RouteBindComponent, _super);
    function RouteBindComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    RouteBindComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.$subscriptions = RouteUtils.getActiveRoute().url.subscribe(function (url) {
            /** @type {?} */
            var activeRoute = RouteUtils.getActiveRoute();
            if (!activeRoute) {
                return;
            }
            /** @type {?} */
            var data = CommonsUtils.copy(activeRoute.snapshot.data);
            /** @type {?} */
            var params = __assign({}, activeRoute.snapshot.params || {}, activeRoute.snapshot.queryParams || {});
            while (activeRoute && !activeRoute.snapshot.data['$props']) {
                activeRoute = activeRoute.parent;
            }
            /** @type {?} */
            var routeData = __assign({}, activeRoute.snapshot.data, data);
            /** @type {?} */
            var props = CommonsUtils.copy(routeData['$resolvedProps'] || routeData['$props']);
            if (data['$propsKey']) {
                props = CommonsUtils.get(props, data['$propsKey']);
            }
            Object.keys(data).forEach(function (key) {
                if (CommonsUtils.isFunction(data[key])) {
                    props[key] = ((/** @type {?} */ (data[key])))(props, params, data);
                }
                else if (CommonsUtils.isString(data[key]) && data[key].startsWith(':')) {
                    /** @type {?} */
                    var param = ((/** @type {?} */ (data[key]))).substring(1);
                    if (params[param]) {
                        props[key] = params[param];
                    }
                }
                else if (key !== '$propsKey' && key !== '$propsWrapperKey' && key !== '$props') {
                    props[key] = data[key];
                }
            });
            props['$routeParams'] = params;
            LogUtils.debug(_this, '路由数据', routeData);
            props = _this.beforeRoutePropsBind(props);
            ComponentUtils.bind(_this, props);
            _this.afterRoutePropsBind();
        });
    };
    /**
     * @param {?} props
     * @return {?}
     */
    RouteBindComponent.prototype.beforeRoutePropsBind = /**
     * @param {?} props
     * @return {?}
     */
    function (props) {
        return props;
    };
    /**
     * @return {?}
     */
    RouteBindComponent.prototype.afterRoutePropsBind = /**
     * @return {?}
     */
    function () {
    };
    return RouteBindComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ControlComponent = /** @class */ (function (_super) {
    __extends(ControlComponent, _super);
    function ControlComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.disabled = false;
        _this.disabled$ = new BehaviorSubject(false);
        _this.onTouched = NO_OP;
        _this.onChange = NO_OP;
        return _this;
    }
    Object.defineProperty(ControlComponent.prototype, "opacity", {
        get: /**
         * @return {?}
         */
        function () {
            return this.disabled ? 0.25 : 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlComponent.prototype, "cursor", {
        get: /**
         * @return {?}
         */
        function () {
            return this.disabled ? 'not-allowed' : 'default';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.innerValue;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!value || value !== this.innerValue) {
                /** @type {?} */
                var v = this.parser ? this.parser(value) : value;
                this.innerValue = v;
                this.onChange(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.defaultValue) {
            this.innerValue = this.defaultValue;
        }
    };
    /**
     * @return {?}
     */
    ControlComponent.prototype.updateTouch = /**
     * @return {?}
     */
    function () {
        this.onTouched();
    };
    /**
     * @param {?} model
     * @return {?}
     */
    ControlComponent.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        /** @type {?} */
        var v = this.formatter ? this.formatter(model) : model;
        if (v !== this.innerValue) {
            this.innerValue = v;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ControlComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ControlComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    ControlComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
        this.disabled$.next(isDisabled);
    };
    ControlComponent.propDecorators = {
        parser: [{ type: Input }],
        formatter: [{ type: Input }],
        disabled: [{ type: Input }],
        opacity: [{ type: HostBinding, args: ['style.opacity',] }],
        cursor: [{ type: HostBinding, args: ['style.cursor',] }]
    };
    return ControlComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template T
 */
var WrapperComponent = /** @class */ (function (_super) {
    __extends(WrapperComponent, _super);
    function WrapperComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    WrapperComponent.prototype._initProps = /**
     * @return {?}
     */
    function () {
        this.$props = CommonsUtils.defaults({}, this.$props || {}, this.$defaultProps || {});
        if (!this.$props.$id) {
            this.$props.$id = IdUtils.getRandom();
        }
        if (!this.$props.$ext) {
            this.$props.$ext = {};
        }
        if (this.$props.$ext['apiDataProps']) {
            if (!this.$props.$ext['apiDataProps'].requestOptions) {
                this.$props.$ext['apiDataProps'].requestOptions = {};
            }
            CommonsUtils.defaults(this.$props.$ext['apiDataProps'].requestOptions, {
                context: this,
                tag: this.$props.$id
            });
        }
        this.onPropsInit();
    };
    /**
     * @return {?}
     */
    WrapperComponent.prototype._propsBind = /**
     * @return {?}
     */
    function () {
        this.onPropsBind();
    };
    /**
     * @return {?}
     */
    WrapperComponent.prototype.onPropsInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    WrapperComponent.prototype.onPropsBind = /**
     * @return {?}
     */
    function () {
    };
    WrapperComponent.propDecorators = {
        outputContext: [{ type: Input }],
        attrs: [{ type: Input }]
    };
    return WrapperComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var ControlWrapperComponent = /** @class */ (function (_super) {
    __extends(ControlWrapperComponent, _super);
    function ControlWrapperComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.resettable = true;
        _this.disabled = false;
        _this.onTouched = NO_OP;
        _this.onChange = NO_OP;
        return _this;
    }
    Object.defineProperty(ControlWrapperComponent.prototype, "opacity", {
        get: /**
         * @return {?}
         */
        function () {
            return this.disabled ? 0.25 : 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlWrapperComponent.prototype, "cursor", {
        get: /**
         * @return {?}
         */
        function () {
            return this.disabled ? 'not-allowed' : 'default';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlWrapperComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.innerValue;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var v = this.valueParser ? this.valueParser(value) : value;
            if (!CommonsUtils.isEqual(v, this.innerValue)) {
                this.innerValue = v;
                this.onChange(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ControlWrapperComponent.prototype.updateTouch = /**
     * @return {?}
     */
    function () {
        this.onTouched();
    };
    /**
     * @param {?} model
     * @return {?}
     */
    ControlWrapperComponent.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        /** @type {?} */
        var v = this.modelFormatter ? this.modelFormatter(model) : model;
        if (v !== this.innerValue) {
            this.innerValue = v;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ControlWrapperComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ControlWrapperComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    ControlWrapperComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @return {?}
     */
    ControlWrapperComponent.prototype.onPropsInit = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            this.$props['disabled'] = this.disabled;
        }
    };
    /**
     * @return {?}
     */
    ControlWrapperComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.value = null;
    };
    ControlWrapperComponent.propDecorators = {
        valueParser: [{ type: Input }],
        modelFormatter: [{ type: Input }],
        resettable: [{ type: Input }],
        disabled: [{ type: Input }],
        opacity: [{ type: HostBinding, args: ['style.opacity',] }],
        cursor: [{ type: HostBinding, args: ['style.cursor',] }]
    };
    return ControlWrapperComponent;
}(WrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_API_REQUEST_OPTIONS = {
    notifyFailure: true
};
var ApiUtils = /** @class */ (function () {
    function ApiUtils() {
    }
    /**
     * @param {?} serverType
     * @return {?}
     */
    ApiUtils.getPresetApiOptions = /**
     * @param {?} serverType
     * @return {?}
     */
    function (serverType) {
        if (!serverType) {
            serverType = CommonsUtils.get(ConfigUtils.getConfig(), 'api.default') || ApiServerType.ES;
        }
        ApiUtils.presetApiOptions[serverType] = __assign({}, DEFAULT_API_REQUEST_OPTIONS, CommonsUtils.get(ConfigUtils.getConfig(), "api.servers." + serverType, {}));
        if (!ApiUtils.presetApiOptions[serverType].actions) {
            ApiUtils.presetApiOptions[serverType].actions = {};
        }
        return ApiUtils.presetApiOptions[serverType];
    };
    /**
     * @param {?} payload
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.login = /**
     * @param {?} payload
     * @param {?=} options
     * @return {?}
     */
    function (payload, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.login || {};
        return ApiUtils.doRequest(null, payload, presetActionOptions, options);
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.logout = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.logout || {};
        return ApiUtils.doRequest(null, null, presetActionOptions, options);
    };
    /**
     * @param {?} payload
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.changePwd = /**
     * @param {?} payload
     * @param {?=} options
     * @return {?}
     */
    function (payload, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.changePwd || {};
        return ApiUtils.doRequest(null, payload, presetActionOptions, options);
    };
    /**
     * @param {?} payload
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.register = /**
     * @param {?} payload
     * @param {?=} options
     * @return {?}
     */
    function (payload, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.register || {};
        return ApiUtils.doRequest(null, payload, presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.save = /**
     * @param {?} apiEntry
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, data, options) {
        if (options === void 0) { options = {}; }
        if (data) {
            /** @type {?} */
            var _data = __assign({}, data);
            if (_data['id']) {
                /** @type {?} */
                var id = _data['id'];
                delete _data['id'];
                return ApiUtils.patchById.call(this, apiEntry, id, _data, options);
            }
            else {
                return ApiUtils.create.call(this, apiEntry, _data, options);
            }
        }
    };
    /**
     * @param {?} apiEntry
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.create = /**
     * @param {?} apiEntry
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, data, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.create || {};
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, data, presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.getById = /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, id, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.getById || {};
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, { id: id }, presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?} ids
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.getByIds = /**
     * @param {?} apiEntry
     * @param {?} ids
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, ids, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.getByIds || {};
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, ids, presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?=} payload
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.getByQuery = /**
     * @param {?} apiEntry
     * @param {?=} payload
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, payload, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.getByQuery;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, payload, presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.updateById = /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, id, data, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.updateById;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, __assign({ id: id }, data), presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.patchById = /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, id, data, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.patchById;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, __assign({ id: id }, data), presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?} query
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.updateByQuery = /**
     * @param {?} apiEntry
     * @param {?} query
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, query, data, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.updateByQuery;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, query, presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.deleteById = /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, id, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var obv = DialogUtils.confirm('操作确认', '确认执行<b>删除</b>操作吗?')
            .pipe(first(), filter(function (accept) { return accept; }), switchMap(function (_) {
            /** @type {?} */
            var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.deleteById;
            return ApiUtils.doRequest(apiEntry, id, presetActionOptions, options);
        }));
        return obv;
    };
    /**
     * @param {?} apiEntry
     * @param {?} query
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.deleteByQuery = /**
     * @param {?} apiEntry
     * @param {?} query
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, query, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.deleteByQuery;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, query, presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.batch = /**
     * @param {?} apiEntry
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, body, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.batch;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, body, presetActionOptions, options);
    };
    /**
     * @param {?} dataSource
     * @param {?=} tag
     * @return {?}
     */
    ApiUtils.batchFetch = /**
     * @param {?} dataSource
     * @param {?=} tag
     * @return {?}
     */
    function (dataSource, tag) {
        if (dataSource) {
            /** @type {?} */
            var _apiDataProp = dataSource;
            if (dataSource['apiDataProps']) {
                _apiDataProp = dataSource['apiDataProps'];
            }
            _apiDataProp = CommonsUtils.copy(_apiDataProp);
            /** @type {?} */
            var apiDataProps_1 = CommonsUtils.getArrayValue(_apiDataProp);
            if (CommonsUtils.isEmpty(apiDataProps_1)) {
                return;
            }
            if (!tag) {
                tag = dataSource['id'] || apiDataProps_1[0].id || '';
            }
            apiDataProps_1.forEach(function (apiDataProp) {
                if (dataSource['query']) {
                    /** @type {?} */
                    var query = dataSource['query'];
                    /** @type {?} */
                    var apiQuery = CommonsUtils.getArrayValue(apiDataProp.query || []);
                    apiQuery.concat(CommonsUtils.getArrayValue(query));
                    apiDataProp.query = apiQuery;
                }
                /** @type {?} */
                var _filter = apiDataProp.filter;
                if (CommonsUtils.isFunction(_filter)) {
                    if (dataSource['queryValue']) {
                        apiDataProp.filter = ((/** @type {?} */ (apiDataProp.filter)))(dataSource['queryValue']);
                    }
                    else {
                        delete apiDataProp.filter;
                    }
                }
                if (dataSource['interval']) {
                    CommonsUtils.set((/** @type {?} */ (apiDataProp)), 'aggProps.interval', dataSource['interval']);
                }
                if (dataSource['format']) {
                    CommonsUtils.set((/** @type {?} */ (apiDataProp)), 'aggProps.format', dataSource['format']);
                }
            });
            // return forkJoin(...apiDataProps.map(apiDataProp => ApiUtils.fetch(apiDataProp, tag)))
            //   .pipe(
            //     catchError((err) => throwError(err))
            //   );
            return zip.apply(void 0, __spread(apiDataProps_1.map(function (apiDataProp) { return ApiUtils.fetch(apiDataProp, tag); }))).pipe(map(function (dataSet) {
                /** @type {?} */
                var resultList;
                /** @type {?} */
                var resultMap;
                dataSet.forEach(function (data, i) {
                    if (apiDataProps_1[i].id) {
                        if (!resultMap) {
                            resultMap = {};
                        }
                        resultMap[apiDataProps_1[i].id] = data;
                    }
                    else {
                        if (!resultList) {
                            resultList = [];
                        }
                        resultList.push(data);
                    }
                });
                if (resultList && resultList.length === 1) {
                    resultList = resultList[0];
                }
                if (resultMap && resultList) {
                    return __assign({}, resultMap, { data: resultList });
                }
                else {
                    return resultMap || resultList || [];
                }
            }));
        }
    };
    /**
     * @param {?} apiDataProps
     * @param {?=} tag
     * @return {?}
     */
    ApiUtils.fetch = /**
     * @param {?} apiDataProps
     * @param {?=} tag
     * @return {?}
     */
    function (apiDataProps, tag) {
        if (!apiDataProps.apiEntry) {
            LogUtils.error('apiUtil', '没有定义apiEntry');
            return of([]);
        }
        /** @type {?} */
        var queryPayload;
        if (CommonsUtils.isFunction(apiDataProps.payload)) {
            queryPayload = ((/** @type {?} */ (apiDataProps.payload))).call(undefined, apiDataProps);
        }
        else if (apiDataProps.payload) {
            queryPayload = apiDataProps.payload;
        }
        if (!queryPayload) {
            /** @type {?} */
            var qBody = EsUtils.buildQueryBody(apiDataProps);
            queryPayload = qBody;
        }
        /** @type {?} */
        var options = apiDataProps.requestOptions || {};
        if (!options.tag) {
            options.tag = tag || '';
        }
        LogUtils.debug('apiUtils', 'apiData数据查询', { apiDataProps: apiDataProps, apiRequestBody: queryPayload });
        return ApiUtils.getByQuery(apiDataProps.apiEntry, queryPayload, options)
            .pipe(map(function (data) {
            /** @type {?} */
            var aggs;
            if (data && data.aggs) {
                aggs = EsUtils.resolveAggs(data.aggs);
                data.aggs = aggs;
            }
            if (CommonsUtils.isEmpty(data.items)) {
                delete data.items;
            }
            if (CommonsUtils.isEmpty(data.aggs)) {
                delete data.aggs;
            }
            /** @type {?} */
            var path = apiDataProps.dataPath || (apiDataProps.aggProps ? 'aggs' : undefined);
            if (path === '/') {
                path = undefined;
            }
            return path ? CommonsUtils.get(data, path) : data;
        }));
    };
    /**
     * @private
     * @param {?} options
     * @param {?} context
     * @return {?}
     */
    ApiUtils.setContext = /**
     * @private
     * @param {?} options
     * @param {?} context
     * @return {?}
     */
    function (options, context) {
        options = options || {};
        options.context = context;
    };
    /**
     * @private
     * @param {?} apiEntry
     * @param {?} payload
     * @param {?} presetActionOptions
     * @param {?=} actionOptions
     * @return {?}
     */
    ApiUtils.doRequest = /**
     * @private
     * @param {?} apiEntry
     * @param {?} payload
     * @param {?} presetActionOptions
     * @param {?=} actionOptions
     * @return {?}
     */
    function (apiEntry, payload, presetActionOptions, actionOptions) {
        /** @type {?} */
        var apiRequestOptions = __assign({}, presetActionOptions, actionOptions);
        delete apiRequestOptions.actions;
        /** @type {?} */
        var requestPayload = payload;
        /** @type {?} */
        var requestOptions = __assign({}, apiRequestOptions, { uri: ApiUtils.buildUri(apiEntry, requestPayload, apiRequestOptions), payload: ApiUtils.buildPayload(apiEntry, requestPayload, apiRequestOptions) });
        delete requestOptions.paramsKeys;
        delete requestOptions.uriResolver;
        delete requestOptions.payloadResolver;
        if (!requestOptions.uri || !requestOptions.uri.startsWith('http')) {
            /** @type {?} */
            var apiServer = ApiUtils.getPresetApiOptions(presetActionOptions.serverType).uri || '';
            requestOptions.uri = apiServer + (requestOptions.uri.startsWith('/') ? '' : '/') + requestOptions.uri;
        }
        return HttpUtils.request(requestOptions)
            .pipe(filter(function (response) { return !!response; }), map(function (response) {
            if (response.success === true) {
                if (apiRequestOptions.alertSuccess) {
                    DialogUtils.info('操作完成', apiRequestOptions.successMessage);
                }
                if (apiRequestOptions.notifySuccess) {
                    StatesUtils.create(StateNames.notify, {
                        title: '操作完成',
                        message: apiRequestOptions.successMessage
                    });
                }
                if (apiRequestOptions.onSuccess) {
                    return apiRequestOptions.onSuccess.call(requestOptions.context, response, requestOptions);
                }
                else {
                    if (apiRequestOptions.dataPath) {
                        return CommonsUtils.get(response.content, apiRequestOptions.dataPath);
                    }
                    return response.content || response;
                }
            }
            else if (!response.success === false) {
                if (apiRequestOptions.alertFailure) {
                    DialogUtils.error('操作失败', response.message);
                }
                if (apiRequestOptions.notifyFailure) {
                    StatesUtils.create(StateNames.notify, {
                        level: NotifyLevel.ERROR,
                        title: response.error,
                        message: response.message
                    });
                }
                if (apiRequestOptions.onFailure) {
                    return apiRequestOptions.onFailure.call(requestOptions.context, response, requestOptions);
                }
                return response;
            }
            return response;
        }), first());
    };
    /**
     * @private
     * @param {?} apiEntry
     * @param {?} payload
     * @param {?} options
     * @return {?}
     */
    ApiUtils.buildUri = /**
     * @private
     * @param {?} apiEntry
     * @param {?} payload
     * @param {?} options
     * @return {?}
     */
    function (apiEntry, payload, options) {
        /** @type {?} */
        var uri = apiEntry;
        if (CommonsUtils.isTemplateStr(apiEntry)) ;
        if (CommonsUtils.isString(options.uriResolver)) {
            uri = (/** @type {?} */ (options.uriResolver));
        }
        else if (CommonsUtils.isFunction(options.uriResolver)) {
            uri = ((/** @type {?} */ (options.uriResolver))).call(options.context, apiEntry, payload, options);
        }
        else if (!uri) {
            uri = options.uri || '';
        }
        if (!uri.startsWith('http')) {
            /** @type {?} */
            var serverUri = ApiUtils.getPresetApiOptions(options.serverType).uri;
            if (serverUri) {
                uri = serverUri + (uri.startsWith('/') ? uri : '/' + uri);
            }
        }
        return uri;
    };
    /**
     * @private
     * @param {?} apiEntry
     * @param {?} payload
     * @param {?} options
     * @return {?}
     */
    ApiUtils.buildPayload = /**
     * @private
     * @param {?} apiEntry
     * @param {?} payload
     * @param {?} options
     * @return {?}
     */
    function (apiEntry, payload, options) {
        /** @type {?} */
        var _payload = payload;
        if (CommonsUtils.isJson(_payload)) {
            _payload = CommonsUtils.merge({}, _payload || {}, options.payload || {}, options.body || options.params || {});
        }
        if (options.payloadResolver) {
            _payload = ((/** @type {?} */ (options.payloadResolver))).call(options.context, apiEntry, _payload, options);
        }
        if (CommonsUtils.isString(_payload)) {
            return _payload;
        }
        else if (CommonsUtils.isString(options.body)) {
            return options.body;
        }
        else if (CommonsUtils.isEmpty(_payload)) {
            return undefined;
        }
        _payload = ContextUtils.resolveVariables(_payload);
        _payload = ApiUtils.resolveApiParamsName(options.paramsKeys || ApiUtils.getPresetApiOptions(options.serverType).paramsKeys || {}, _payload);
        if (CommonsUtils.isEmpty(_payload)) {
            return undefined;
        }
        return _payload;
    };
    /**
     * @private
     * @param {?} paramsKeys
     * @param {?} payload
     * @return {?}
     */
    ApiUtils.resolveApiParamsName = /**
     * @private
     * @param {?} paramsKeys
     * @param {?} payload
     * @return {?}
     */
    function (paramsKeys, payload) {
        if (!CommonsUtils.isJson(payload)) {
            return payload;
        }
        /** @type {?} */
        var resolved = {};
        for (var key in payload) {
            if (paramsKeys.hasOwnProperty(key)) {
                resolved[paramsKeys[key]] = payload[key];
            }
            else {
                resolved[key] = payload[key];
            }
        }
        return resolved;
    };
    ApiUtils.presetApiOptions = {};
    return ApiUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ApiDataDirective = /** @class */ (function (_super) {
    __extends(ApiDataDirective, _super);
    function ApiDataDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onDataReady = new EventEmitter();
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ApiDataDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.apiDataProps
            && changes.apiDataProps.currentValue
            && (this.apiDataProps.autoFetch !== false || !changes.apiDataProps.isFirstChange())) {
            this.fetchData();
        }
    };
    /**
     * @return {?}
     */
    ApiDataDirective.prototype.fetchData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (CommonsUtils.isEmpty(this.apiDataProps)) {
            LogUtils.debug('apiDataDirective', '没有定义apiDataProps');
            return;
        }
        ApiUtils.fetch(this.apiDataProps)
            .subscribe(function (data) {
            LogUtils.debug(_this, 'apiData待订阅数据', data);
            if (_this.apiDataProps.data$) {
                _this.apiDataProps.data$.next(data);
            }
            _this.onDataReady.emit(data);
        });
    };
    ApiDataDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erApiData]'
                },] }
    ];
    ApiDataDirective.propDecorators = {
        apiDataProps: [{ type: Input, args: ['erApiData',] }],
        onRequestData: [{ type: Output }],
        onDataReady: [{ type: Output }]
    };
    return ApiDataDirective;
}(BaseDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var DataAwareControlWrapperComponent = /** @class */ (function (_super) {
    __extends(DataAwareControlWrapperComponent, _super);
    function DataAwareControlWrapperComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.data$ = new BehaviorSubject(undefined);
        return _this;
    }
    Object.defineProperty(DataAwareControlWrapperComponent.prototype, "apiDataProps", {
        get: /**
         * @return {?}
         */
        function () {
            return this._apiDataProps || {};
        },
        set: /**
         * @param {?} props
         * @return {?}
         */
        function (props) {
            this._apiDataProps = props;
            if (this._apiDataProps && !this._apiDataProps.data$) {
                this._apiDataProps.data$ = this.data$;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DataAwareControlWrapperComponent.prototype.onPropsInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.onPropsInit.call(this);
        this.initLocalDataItem();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DataAwareControlWrapperComponent.prototype.parseValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        try {
            if (value && this.$props.$ext.dataItemProps && !CommonsUtils.isString(value)) {
                return DataItemUtils.getItemValue(value, this.$props.$ext.dataItemProps.valueKey);
            }
            return value;
        }
        catch (e) {
            LogUtils.error(this, '数据解析错误', e);
            return undefined;
        }
    };
    /**
     * @param {?} model
     * @return {?}
     */
    DataAwareControlWrapperComponent.prototype.formatModel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        try {
            if (CommonsUtils.isJson(model) && this.$props.$ext.dataItemProps) {
                return DataItemUtils.getItemLabel(model, this.$props.$ext.dataItemProps.labelKey);
            }
            return model;
        }
        catch (e) {
            LogUtils.error(this, '数据解析错误', e);
            return undefined;
        }
    };
    /**
     * @return {?}
     */
    DataAwareControlWrapperComponent.prototype.initLocalDataItem = /**
     * @return {?}
     */
    function () {
        if (this.$props.$ext && this.$props.$ext.dataItems) {
            /** @type {?} */
            var data = this.$props.$ext.dataItems;
            data = data.map(function (d) { return d['data'] = d; });
            this.data$.next(data);
        }
    };
    DataAwareControlWrapperComponent.propDecorators = {
        apiData: [{ type: ViewChild, args: [ApiDataDirective,] }],
        apiDataProps: [{ type: Input }]
    };
    return DataAwareControlWrapperComponent;
}(ControlWrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var BaseFormComponent = /** @class */ (function (_super) {
    __extends(BaseFormComponent, _super);
    function BaseFormComponent(cd) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.options = {};
        _this.buttonsStyleClass = 'text-center my-5';
        _this.submitBtnStyleClass = 'btn btn-success';
        _this.resetBtnStyleClass = 'btn btn-danger';
        _this.initBtnStyleClass = 'btn btn-alert';
        _this.onSubmit = new EventEmitter();
        _this.onSubmitted = new EventEmitter();
        _this.onModel = new EventEmitter();
        _this.onFormValueChanges = new EventEmitter();
        _this.form = new FormGroup({});
        _this.templateNames = {
            header: 'header',
            buttons: 'buttons',
            footer: 'footer'
        };
        _this.runtimeData = {};
        _this.hasUpdated = false;
        return _this;
    }
    Object.defineProperty(BaseFormComponent.prototype, "model", {
        get: /**
         * @return {?}
         */
        function () {
            return this._model;
        },
        set: /**
         * @param {?} model
         * @return {?}
         */
        function (model) {
            this._model = CommonsUtils.omitBy(model, CommonsUtils.lodash().isUndefined);
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        this.$subscriptions = this.form.valueChanges.subscribe(function (event) { return _this.onFormValueChanges.emit(event); });
    };
    Object.defineProperty(BaseFormComponent.prototype, "modelId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._modelId;
        },
        set: /**
         * @param {?} modelId
         * @return {?}
         */
        function (modelId) {
            var _this = this;
            if (modelId !== this.modelId) {
                this._modelId = modelId;
                if (!modelId || modelId === '') {
                    this.resetModel();
                }
                else if (this.apiEntry) {
                    ApiUtils.getById(this.apiEntry, modelId, this.getModelOptions)
                        .subscribe(function (result) {
                        _this.model = result;
                        _this.form.updateValueAndValidity({ onlySelf: false, emitEvent: true });
                    });
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFormComponent.prototype, "isFormValid", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.hasUpdated) {
                this.updateControls();
            }
            return this.form.valid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFormComponent.prototype, "httpTag", {
        get: /**
         * @return {?}
         */
        function () {
            return "http" + ('-' + this.formId || '');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFormComponent.prototype, "formId", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFormComponent.prototype, "submitModel", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var model = __assign({}, this.model);
            if (this.submitRootKey) {
                model = this.model[this.submitRootKey];
            }
            if (this.submitExcludeKeys) {
                model = CommonsUtils.removeKeys.apply(CommonsUtils, __spread([model], CommonsUtils.getArrayValue(this.submitExcludeKeys)));
            }
            Object.keys(model).forEach(function (key) {
                if (key.startsWith('$_')) {
                    delete model[key];
                }
            });
            return model;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fieldName
     * @return {?}
     */
    BaseFormComponent.prototype.formControl = /**
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        return this.form.controls[fieldName];
    };
    /**
     * @param {?} fieldName
     * @return {?}
     */
    BaseFormComponent.prototype.fieldComponent = /**
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        return this.form['components'][fieldName];
    };
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.getFormErrorFields = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var errors = [];
        Object.keys(this.form.controls).forEach(function (key) {
            /** @type {?} */
            var controlErrors = _this.form.get(key).errors;
            if (controlErrors != null) {
                Object.keys(controlErrors).forEach(function (keyError) {
                    errors.push(key); // + ', err value: ', controlErrors[keyError]);
                });
            }
        });
        return errors;
    };
    /**
     * @param {?} model
     * @return {?}
     */
    BaseFormComponent.prototype.patchModel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        this.model = Object.assign({}, this.model || {}, model);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BaseFormComponent.prototype.patchRuntimeData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        Object.assign(this.runtimeData, data);
    };
    /**
     * @param {?} path
     * @return {?}
     */
    BaseFormComponent.prototype.isFieldValid = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var field = this.field(path);
        if (field) {
            return field.valid;
        }
        else {
            return undefined;
        }
    };
    /**
     * @param {?} fieldNamePath
     * @return {?}
     */
    BaseFormComponent.prototype.isFieldTouched = /**
     * @param {?} fieldNamePath
     * @return {?}
     */
    function (fieldNamePath) {
        /** @type {?} */
        var field = this.field(fieldNamePath);
        if (field) {
            return field.touched;
        }
        else {
            return undefined;
        }
    };
    /**
     * @param {?=} form
     * @return {?}
     */
    BaseFormComponent.prototype.updateControls = /**
     * @param {?=} form
     * @return {?}
     */
    function (form) {
        var _this = this;
        if (!form) {
            form = this.form;
        }
        Object.keys(form.controls).forEach(function (field) {
            /** @type {?} */
            var control = form.get(field);
            if (control instanceof FormControl) {
                control.markAsTouched({ onlySelf: true });
                // control.updateValueAndValidity({onlySelf: true});
            }
            else if (control instanceof FormGroup) {
                _this.updateControls(control);
            }
        });
        this.hasUpdated = true;
    };
    /**
     * @param {?} path
     * @return {?}
     */
    BaseFormComponent.prototype.field = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        return this.form.get(path);
    };
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.resetForm = /**
     * @return {?}
     */
    function () {
        this.form.reset({});
    };
    /**
     * @param {?=} reset
     * @return {?}
     */
    BaseFormComponent.prototype.resetModel = /**
     * @param {?=} reset
     * @return {?}
     */
    function (reset) {
        if (this.initModel) {
            this.model = CommonsUtils.copy(this.initModel);
        }
        else if (CommonsUtils.isJson(reset)) {
            this.model = __assign({}, reset);
        }
        else if (this.options['resetModel']) {
            this.options['resetModel']();
        }
        else {
            this.model = {};
        }
        this.form.reset(this.model, { emitEvent: true });
    };
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.setInitModel = /**
     * @return {?}
     */
    function () {
        this.initModel = CommonsUtils.copy(this.model);
        if (this.options['updateInitialValue']) {
            this.options['updateInitialValue']();
        }
    };
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.refresh = /**
     * @return {?}
     */
    function () {
        this.cd.detectChanges();
    };
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.submit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.isFormValid) {
            DialogUtils.error('操作失败', '请填写完整信息后，再执行本操作！');
            return;
        }
        /** @type {?} */
        var result;
        if (this.beforeSubmit) {
            result = this.beforeSubmit(this.getEventContext());
            if (result instanceof Observable) {
                ((/** @type {?} */ (result)))
                    .pipe(first())
                    .subscribe(function (data) {
                    _this.submitAfterBefore(data);
                });
            }
            else {
                this.submitAfterBefore(result);
            }
        }
        else {
            this.doSubmit();
        }
    };
    /**
     * @param {?=} submitModel
     * @return {?}
     */
    BaseFormComponent.prototype.defaultSubmit = /**
     * @param {?=} submitModel
     * @return {?}
     */
    function (submitModel) {
        var _this = this;
        this.$subscriptions = ApiUtils.save.call(this, this.apiEntry, submitModel || this.submitModel, __assign({ tag: this.formId }, this.submitOptions || {}))
            .subscribe(function (data) {
            if (data.id && data.id !== _this.model['id']) {
                _this.model['id'] = data.id;
            }
            _this.onSubmitted.emit(_this.getEventContext({ response: data, model: _this.model, submitted: submitModel || _this.submitModel }));
            if (_this.afterSubmit) {
                /** @type {?} */
                var result = _this.afterSubmit(_this.getEventContext({ submitModel: submitModel || _this.submitModel, id: data.id }));
                if (result instanceof Observable) {
                    ((/** @type {?} */ (result)))
                        .pipe(first())
                        .subscribe(function (dat) {
                        _this.doPostSubmit(dat);
                    });
                }
                else {
                    _this.doPostSubmit(result);
                }
            }
            else {
                _this.doPostSubmit();
            }
        });
    };
    /**
     * @param {?=} other
     * @return {?}
     */
    BaseFormComponent.prototype.getEventContext = /**
     * @param {?=} other
     * @return {?}
     */
    function (other) {
        return (__assign({ formlyForm: this, form: (/** @type {?} */ (this.form)), model: this.model, modelId: this.modelId, entry: this.apiEntry, entity: (/** @type {?} */ (this.entity)) }, other || {}));
    };
    /**
     * @private
     * @param {?} result
     * @return {?}
     */
    BaseFormComponent.prototype.submitAfterBefore = /**
     * @private
     * @param {?} result
     * @return {?}
     */
    function (result) {
        if (result !== false) {
            if (CommonsUtils.isJson(result) && !CommonsUtils.isEmpty(result)) {
                this.doSubmit(result);
            }
            else {
                this.doSubmit();
            }
        }
    };
    /**
     * @private
     * @param {?=} submitModel
     * @return {?}
     */
    BaseFormComponent.prototype.doSubmit = /**
     * @private
     * @param {?=} submitModel
     * @return {?}
     */
    function (submitModel) {
        if (this.onSubmit.observers.length > 0) {
            this.onSubmit.emit(this.getEventContext({ submitModel: submitModel }));
        }
        else {
            this.defaultSubmit(submitModel);
        }
    };
    /**
     * @private
     * @param {?=} model
     * @return {?}
     */
    BaseFormComponent.prototype.doPostSubmit = /**
     * @private
     * @param {?=} model
     * @return {?}
     */
    function (model) {
        var _this = this;
        if (model) {
            this.resetModel(model);
        }
        else if (this.resetKeys) {
            /** @type {?} */
            var keys = CommonsUtils.getArrayValue(this.resetKeys);
            keys.forEach(function (key) { return delete _this.model[key]; });
            delete this.model['id'];
            this.form.reset(this.model, { emitEvent: true });
        }
        else if (this.resetAfterSubmit !== false) {
            this.resetModel(this.entity && this.entity.initValue || {});
        }
    };
    BaseFormComponent.propDecorators = {
        $id: [{ type: Input }],
        entity: [{ type: Input }],
        apiEntry: [{ type: Input }],
        options: [{ type: Input }],
        submitRootKey: [{ type: Input }],
        submitExcludeKeys: [{ type: Input }],
        resetKeys: [{ type: Input }],
        styleClass: [{ type: Input }],
        style: [{ type: Input }],
        formStyleClass: [{ type: Input }],
        formStyle: [{ type: Input }],
        buttonsStyleClass: [{ type: Input }],
        submitBtnStyleClass: [{ type: Input }],
        resetBtnStyleClass: [{ type: Input }],
        initBtnStyleClass: [{ type: Input }],
        header: [{ type: Input }],
        footer: [{ type: Input }],
        buttons: [{ type: Input }],
        getModelOptions: [{ type: Input }],
        submitOptions: [{ type: Input }],
        beforeSubmit: [{ type: Input }],
        afterSubmit: [{ type: Input }],
        valueChanges: [{ type: Input }],
        resetAfterSubmit: [{ type: Input }],
        onSubmit: [{ type: Output }],
        onSubmitted: [{ type: Output }],
        onModel: [{ type: Output }],
        onFormValueChanges: [{ type: Output }],
        model: [{ type: Input }],
        modelId: [{ type: Input }]
    };
    return BaseFormComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var HTTP_STATE$ = StatesUtils.observe(StateNames.rootHttp)
    .pipe(distinctUntilChanged(), map(function (state) { return state && state.inProcess && state.inProcess > 0; }));
/** @type {?} */
var HTTP_TAG_STATE$ = function (httpTag) {
    return StatesUtils.observe(StateNames.http, httpTag)
        .pipe(distinctUntilChanged(), filter(function (state) { return !!state; }), map(function (state) { return state && state.start; }));
};
/** @type {?} */
var ROUTE_STATE$ = StatesUtils.observe(StateNames.nav)
    .pipe(distinctUntilChanged(), filter(function (state) { return !!state; }), map(function (state) { return state && state.start && state.outlet === 'primary'; }));
/** @type {?} */
var ROUTE_OUTLET_STATE$ = function (outlet) {
    return StatesUtils.observe(StateNames.nav)
        .pipe(distinctUntilChanged(), filter(function (state) { return !!state; }), map(function (state) { return state && state.start && state.outlet === outlet; }));
};
/** @type {?} */
var WEB_SOCKET_STATES = StatesUtils.observe(StateNames.socket)
    .pipe(distinctUntilChanged(), filter(function (state) { return !!state; }), map(function (state) { return state.state; }));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PermissionUtils = /** @class */ (function () {
    function PermissionUtils() {
    }
    /**
     * @return {?}
     */
    PermissionUtils.getPermissionsService = /**
     * @return {?}
     */
    function () {
        if (!PermissionUtils._permissionsService) {
            PermissionUtils._permissionsService = DiUtils.get(NgxPermissionsService);
        }
        return PermissionUtils._permissionsService;
    };
    /**
     * @return {?}
     */
    PermissionUtils.getRolesService = /**
     * @return {?}
     */
    function () {
        if (!PermissionUtils._rolesService) {
            PermissionUtils._rolesService = DiUtils.get(NgxRolesService);
        }
        return PermissionUtils._rolesService;
    };
    /**
     * @param {?} roles
     * @return {?}
     */
    PermissionUtils.getRolePermissions = /**
     * @param {?} roles
     * @return {?}
     */
    function (roles) {
        return (ConfigUtils.getConfig().auth.getRolePermissions
            && ConfigUtils.getConfig().auth.getRolePermissions(roles))
            || of([]);
    };
    /**
     * @param {?} permissionName
     * @return {?}
     */
    PermissionUtils.HasModulePermission = /**
     * @param {?} permissionName
     * @return {?}
     */
    function (permissionName) {
        /** @type {?} */
        var permissions = PermissionUtils.getPermissionsService().getPermissions();
        /** @type {?} */
        var matched = Object.keys(permissions).some(function (name) {
            return name === permissionName
                || name.startsWith(permissionName + ':');
        });
        return matched && Object.keys(matched).length > 0;
    };
    /**
     * @param {?} permissions
     * @param {?=} validationFunction
     * @return {?}
     */
    PermissionUtils.addPermissions = /**
     * @param {?} permissions
     * @param {?=} validationFunction
     * @return {?}
     */
    function (permissions, validationFunction) {
        PermissionUtils.getPermissionsService().addPermission(permissions, validationFunction);
    };
    /**
     * @param {?} roleName
     * @param {?=} validationFunction
     * @return {?}
     */
    PermissionUtils.addRole = /**
     * @param {?} roleName
     * @param {?=} validationFunction
     * @return {?}
     */
    function (roleName, validationFunction) {
        if (!validationFunction) {
            validationFunction = function () { return true; };
        }
        PermissionUtils.getRolesService().addRole(roleName, validationFunction);
    };
    /**
     * @param {?} roles
     * @return {?}
     */
    PermissionUtils.addRoles = /**
     * @param {?} roles
     * @return {?}
     */
    function (roles) {
        /** @type {?} */
        var _roles = CommonsUtils.getArrayValue(roles);
        if (_roles) {
            /** @type {?} */
            var roleService_1 = PermissionUtils.getRolesService();
            _roles.filter(function (role) { return !!role; }).forEach(function (role) { return roleService_1.addRole(role, function () { return true; }); });
        }
    };
    /**
     * @param {?} role
     * @return {?}
     */
    PermissionUtils.hasRole = /**
     * @param {?} role
     * @return {?}
     */
    function (role) {
        /** @type {?} */
        var userRoles = PermissionUtils.getRolesService().getRoles();
        return userRoles.hasOwnProperty(role);
    };
    /**
     * @param {?} roles
     * @return {?}
     */
    PermissionUtils.hasAnyRole = /**
     * @param {?} roles
     * @return {?}
     */
    function (roles) {
        /** @type {?} */
        var _roles = CommonsUtils.getArrayValue(roles);
        /** @type {?} */
        var userRoles = PermissionUtils.getRolesService().getRoles();
        return _roles.some(function (role) { return userRoles.hasOwnProperty(role); });
    };
    /**
     * @param {?} roles
     * @return {?}
     */
    PermissionUtils.hasAllRoles = /**
     * @param {?} roles
     * @return {?}
     */
    function (roles) {
        /** @type {?} */
        var _roles = CommonsUtils.getArrayValue(roles);
        /** @type {?} */
        var userRoles = PermissionUtils.getRolesService().getRoles();
        return _roles.every(function (role) { return userRoles.hasOwnProperty(role); });
    };
    /**
     * @return {?}
     */
    PermissionUtils.getPermissions = /**
     * @return {?}
     */
    function () {
        return PermissionUtils.getPermissionsService().permissions$;
    };
    /**
     * @return {?}
     */
    PermissionUtils.getRoles = /**
     * @return {?}
     */
    function () {
        return PermissionUtils.getRolesService().roles$;
    };
    /**
     * @param {?} permission
     * @return {?}
     */
    PermissionUtils.hasPermission = /**
     * @param {?} permission
     * @return {?}
     */
    function (permission) {
        /** @type {?} */
        var userPermissions = PermissionUtils.getPermissionsService().getPermissions();
        return userPermissions.hasOwnProperty(permission);
    };
    /**
     * @param {?} permissios
     * @return {?}
     */
    PermissionUtils.hasAnyPermission = /**
     * @param {?} permissios
     * @return {?}
     */
    function (permissios) {
        /** @type {?} */
        var _permissions = CommonsUtils.getArrayValue(permissios);
        /** @type {?} */
        var userPermissions = PermissionUtils.getPermissionsService().getPermissions();
        return _permissions.some(function (permisiion) { return userPermissions.hasOwnProperty(permisiion); });
    };
    /**
     * @param {?} permissions
     * @return {?}
     */
    PermissionUtils.hasAllPermissions = /**
     * @param {?} permissions
     * @return {?}
     */
    function (permissions) {
        /** @type {?} */
        var _permissions = CommonsUtils.getArrayValue(permissions);
        /** @type {?} */
        var userPermissions = PermissionUtils.getPermissionsService().getPermissions();
        return _permissions.every(function (permisiion) { return userPermissions.hasOwnProperty(permisiion); });
    };
    /**
     * @param {?} roleOrPermission
     * @return {?}
     */
    PermissionUtils.hasAuth = /**
     * @param {?} roleOrPermission
     * @return {?}
     */
    function (roleOrPermission) {
        return PermissionUtils.hasAnyRole(roleOrPermission) || PermissionUtils.hasAnyPermission(roleOrPermission);
    };
    /**
     * @param {?} roleOrPermissions
     * @return {?}
     */
    PermissionUtils.hasAllAuths = /**
     * @param {?} roleOrPermissions
     * @return {?}
     */
    function (roleOrPermissions) {
        return PermissionUtils.hasAllRoles(roleOrPermissions) || PermissionUtils.hasAllPermissions(roleOrPermissions);
    };
    /**
     * @return {?}
     */
    PermissionUtils.clearRoles = /**
     * @return {?}
     */
    function () {
        PermissionUtils.getRolesService().flushRoles();
    };
    /**
     * @return {?}
     */
    PermissionUtils.clearPermission = /**
     * @return {?}
     */
    function () {
        PermissionUtils.getPermissionsService().flushPermissions();
    };
    PermissionUtils._permissionsService = null;
    PermissionUtils._rolesService = null;
    return PermissionUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} route
 * @param {?} state
 * @return {?}
 */
function anyRoleUser(route, state) {
    if (AuthUtils.getCurrentUser().roles) {
        return AuthUtils.getCurrentUser().roles;
    }
    else {
        return 'NO_ROLE_USER';
    }
}
var AuthUtils = /** @class */ (function () {
    function AuthUtils() {
    }
    /**
     * @param {?} payLoad
     * @param {?=} isRememberMe
     * @return {?}
     */
    AuthUtils.login = /**
     * @param {?} payLoad
     * @param {?=} isRememberMe
     * @return {?}
     */
    function (payLoad, isRememberMe) {
        /** @type {?} */
        var login$ = ApiUtils.login(__assign({}, payLoad, { rememberMe: isRememberMe }), __assign({}, ConfigUtils.getConfig().auth.loginApiOptions || {}, { tag: StateNames.auth }))
            .pipe(filter(function (loginUser) { return !!loginUser; }), tap(function (loginUser) {
            if (loginUser.jwtToken) {
                if (ConfigUtils.getConfig().auth.getUserInfo) {
                    ConfigUtils.getConfig().auth.getUserInfo(loginUser)
                        .subscribe(function (userInfo) {
                        /** @type {?} */
                        var user = __assign({}, loginUser, userInfo);
                        AuthUtils.onLoginSuccess(user, isRememberMe);
                    });
                }
                else {
                    AuthUtils.onLoginSuccess(loginUser, isRememberMe);
                }
            }
        }));
        return login$;
    };
    /**
     * @param {?} payLoad
     * @return {?}
     */
    AuthUtils.register = /**
     * @param {?} payLoad
     * @return {?}
     */
    function (payLoad) {
        /** @type {?} */
        var reg$ = ApiUtils.register(payLoad, __assign({}, ConfigUtils.getConfig().auth.registerApiOptions || ConfigUtils.getConfig().auth.loginApiOptions, { tag: StateNames.auth }));
        return reg$;
    };
    /**
     * @return {?}
     */
    AuthUtils.logout = /**
     * @return {?}
     */
    function () {
        ApiUtils.logout(__assign({}, ConfigUtils.getConfig().auth.logoutApiOptions || ConfigUtils.getConfig().auth.loginApiOptions, { tag: StateNames.auth }))
            .subscribe(function (success) {
            if (success) {
                AuthUtils.updateUser({});
                PermissionUtils.clearRoles();
                PermissionUtils.clearPermission();
                /** @type {?} */
                var url = ConfigUtils.getConfig().auth.logoutSuccessRouter;
                RouteUtils.nav(url);
            }
        });
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    AuthUtils.changePwd = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        /** @type {?} */
        var pwd$ = ApiUtils.changePwd(payload, __assign({}, ConfigUtils.getConfig().auth.changePwdApiOptions || ConfigUtils.getConfig().auth.loginApiOptions, { tag: StateNames.auth }));
        return pwd$;
    };
    /**
     * @return {?}
     */
    AuthUtils.getCurrentUser = /**
     * @return {?}
     */
    function () {
        if (AuthUtils.CURRENT_USER) {
            return AuthUtils.CURRENT_USER || {};
        }
        /** @type {?} */
        var storageKey = ConfigUtils.getConfig().auth.storageKey;
        /** @type {?} */
        var user = (/** @type {?} */ ((JSON.parse(sessionStorage.getItem(storageKey)))));
        if (!user) {
            user = (/** @type {?} */ ((JSON.parse(localStorage.getItem(storageKey)))));
        }
        if (user && user.isSu) {
            user.isAdmin = true;
        }
        AuthUtils.CURRENT_USER = user;
        return AuthUtils.CURRENT_USER || {};
    };
    /**
     * @param {?} patch
     * @param {?=} remeber
     * @return {?}
     */
    AuthUtils.updateUser = /**
     * @param {?} patch
     * @param {?=} remeber
     * @return {?}
     */
    function (patch, remeber) {
        if (!CommonsUtils.isEmpty(patch)) {
            AuthUtils.CURRENT_USER = __assign({}, AuthUtils.CURRENT_USER, patch);
        }
        else {
            AuthUtils.CURRENT_USER = {};
        }
        StatesUtils.update(StateNames.user, AuthUtils.CURRENT_USER);
        /** @type {?} */
        var storageKey = ConfigUtils.getConfig().auth.storageKey;
        sessionStorage.setItem(storageKey, JSON.stringify(AuthUtils.CURRENT_USER));
        if (remeber) {
            if (!CommonsUtils.isEmpty(AuthUtils.CURRENT_USER)) {
                localStorage.setItem(storageKey, JSON.stringify(AuthUtils.CURRENT_USER));
            }
            else {
                localStorage.removeItem(storageKey);
            }
        }
    };
    /**
     * @param {?} returnUrl
     * @return {?}
     */
    AuthUtils.checkLogin = /**
     * @param {?} returnUrl
     * @return {?}
     */
    function (returnUrl) {
        /** @type {?} */
        var currentUser = AuthUtils.getCurrentUser();
        if (currentUser.jwtToken && JwtUtils.isValid(currentUser.jwtToken)) {
            return true;
        }
        else {
            if (true === StatesUtils.getValue(StateNames.auth, 'dialog')) {
                StatesUtils.update(StateNames.popup, {
                    content: ConfigUtils.getConfig().auth.component,
                    header: ConfigUtils.getConfig().auth.title,
                    visible: true,
                    minWidth: 500,
                    minHeight: 300,
                    contentMaxWidth: 500,
                    contentMaxHeight: 300
                });
            }
            else {
                /** @type {?} */
                var loginRouter = ConfigUtils.getConfig().auth.loginRouter;
                StatesUtils.update(StateNames.auth, { successUrl: returnUrl });
                RouteUtils.nav(loginRouter);
            }
            return false;
        }
    };
    /**
     * @private
     * @param {?} user
     * @param {?} isRememberMe
     * @return {?}
     */
    AuthUtils.onLoginSuccess = /**
     * @private
     * @param {?} user
     * @param {?} isRememberMe
     * @return {?}
     */
    function (user, isRememberMe) {
        if (ConfigUtils.getConfig().auth.onLoginSuccess) {
            ConfigUtils.getConfig().auth.onLoginSuccess(user);
        }
        user.enabled = true;
        AuthUtils.updateUser(user, isRememberMe);
        PermissionUtils.addRoles(user.roles);
        if (ConfigUtils.getConfig().auth.defaultRules) {
            PermissionUtils.addRoles(ConfigUtils.getConfig().auth.defaultRules);
        }
        PermissionUtils.addPermissions(user.permissions || []);
        /** @type {?} */
        var key = ConfigUtils.getConfig().auth.requiredUserProps;
        if (key) {
            if (!CommonsUtils.get(user, key)) {
                RouteUtils.nav(ConfigUtils.getConfig().auth.failedPropsRouter);
            }
            else {
                /** @type {?} */
                var successUrl = ConfigUtils.getConfig().auth.loginSuccessRouter;
                RouteUtils.nav(successUrl);
            }
        }
        else {
            /** @type {?} */
            var successUrl = ConfigUtils.getConfig().auth.loginSuccessRouter;
            RouteUtils.nav(successUrl);
        }
    };
    AuthUtils.CURRENT_USER = null;
    return AuthUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
AppConfigComponent = /** @class */ (function () {
    function AppConfigComponent(rootViewContainerRef) {
        this.rootViewContainerRef = rootViewContainerRef;
    }
    Object.defineProperty(AppConfigComponent.prototype, "loadingClass", {
        get: /**
         * @return {?}
         */
        function () {
            return ConfigUtils.getConfig().onLoading;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AppConfigComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var browserSupport = BrowserOsUtils.checkBrowser();
        this.resolveBrowserSupport(browserSupport);
        ConfigUtils.configApp(this.appConfig());
        setTimeout(function () {
            _this.httpState$ = HTTP_STATE$;
            _this.routeState$ = ROUTE_STATE$;
        }, 0);
        /** @type {?} */
        var user = AuthUtils.getCurrentUser();
        if (!CommonsUtils.isEmpty(user)) {
            PermissionUtils.addPermissions(user.permissions);
            PermissionUtils.addRoles(user.roles);
            if (user.roles && ConfigUtils.getConfig().auth.defaultRules) {
                PermissionUtils.addRoles(ConfigUtils.getConfig().auth.defaultRules);
            }
        }
    };
    /**
     * @param {?} browserSupport
     * @return {?}
     */
    AppConfigComponent.prototype.resolveBrowserSupport = /**
     * @param {?} browserSupport
     * @return {?}
     */
    function (browserSupport) {
        if (!browserSupport.version) {
            alert('当前浏览器版本太低，请升级浏览器!');
        }
        else if (!browserSupport.features) {
            alert('当前浏览器功能不全，请更换浏览器!');
        }
    };
    return AppConfigComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
ModuleConfigComponent = /** @class */ (function (_super) {
    __extends(ModuleConfigComponent, _super);
    function ModuleConfigComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    ModuleConfigComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var router = DiUtils.get(Router);
        ConfigUtils.configModule(this.moduleConfig() || {}, router.url);
    };
    return ModuleConfigComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AuthBaseComponent = /** @class */ (function (_super) {
    __extends(AuthBaseComponent, _super);
    function AuthBaseComponent() {
        var _this = _super.call(this) || this;
        _this.userToken = ConfigUtils.getConfig().auth.userTokenKey;
        _this.password = ConfigUtils.getConfig().auth.passwordKey;
        _this.rememberMe = ConfigUtils.getConfig().auth.rememberMeKey;
        _this.appName = ConfigUtils.getConfig().appName;
        _this.stateKey = StateNames.auth;
        return _this;
    }
    /**
     * @return {?}
     */
    AuthBaseComponent.prototype.login = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.error = undefined;
        AuthUtils.login(this.getSubmitData(this.form.value))
            .subscribe(function (response) {
            if (response.success === false) {
                _this.error = response.message;
            }
        });
    };
    /**
     * @return {?}
     */
    AuthBaseComponent.prototype.register = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.error = undefined;
        /** @type {?} */
        var data = this.form.value;
        delete data['rePassword'];
        AuthUtils.register(this.getSubmitData(this.form.value))
            .subscribe(function (response) {
            if (response.success === false) {
                _this.error = response.message;
            }
            else {
                RouteUtils.nav(ConfigUtils.getConfig().auth.loginSuccessRouter);
            }
        });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AuthBaseComponent.prototype.getSubmitData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return data;
    };
    return AuthBaseComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AbstractLoginComponent = /** @class */ (function (_super) {
    __extends(AbstractLoginComponent, _super);
    function AbstractLoginComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    AbstractLoginComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _a;
        this.form = DiUtils.get(FormBuilder).group((_a = {},
            _a[this.userToken] = ['', Validators.required],
            _a[this.password] = ['', Validators.required],
            _a[this.rememberMe] = [''],
            _a));
    };
    return AbstractLoginComponent;
}(AuthBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NgAsyncValidator = function (requestProps, errorKey) {
    /** @type {?} */
    var fn = function (control) {
        /** @type {?} */
        var props = requestProps;
        if (requestProps.query && CommonsUtils.isFunction(requestProps.query)) {
            /** @type {?} */
            var query = ((/** @type {?} */ (requestProps.query)))(control.value);
            props = __assign({}, props, { query: query });
        }
        /** @type {?} */
        var httpRequest = ApiUtils.fetch(props)
            .pipe(map(function (data) {
            var _a;
            return !data ? null : (_a = {}, _a[errorKey] = true, _a);
        }));
        return httpRequest;
    };
    return fn;
};
/** @type {?} */
var FormlyAsyncValidator = function (requestProps) {
    /** @type {?} */
    var fn = function (control) {
        /** @type {?} */
        var props = requestProps;
        if (requestProps.query && CommonsUtils.isFunction(requestProps.query)) {
            /** @type {?} */
            var query = ((/** @type {?} */ (requestProps.query)))(control.value);
            props = __assign({}, props, { query: query });
        }
        /** @type {?} */
        var httpRequest = ApiUtils.fetch(props)
            .pipe(map(function (data) { return !data; }));
        return httpRequest.toPromise();
    };
    return fn;
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AbstractRegisterComponent = /** @class */ (function (_super) {
    __extends(AbstractRegisterComponent, _super);
    function AbstractRegisterComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.checkExists = false;
        _this.inFocus = false;
        _this.errorMessage = {
            duplicated: '该用户名已经被注册'
        };
        return _this;
    }
    Object.defineProperty(AbstractRegisterComponent.prototype, "isUserNameValidate", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.inFocus && this.form.get(this.userToken).valid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AbstractRegisterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _a;
        this.form = DiUtils.get(FormBuilder).group((_a = {},
            _a[this.userToken] = new FormControl('', {
                validators: NgValidators.required,
                asyncValidators: NgAsyncValidator(this.userExistsApiOptions(), 'duplicated'),
                updateOn: 'blur'
            }),
            _a[this.password] = ['', [NgValidators.required, NgValidators.minLength(6)]],
            _a.rePassword = ['', [NgValidators.required, NgValidators.minLength(6), NgValidators.equalTo(this.password)]],
            _a));
    };
    /**
     * @return {?}
     */
    AbstractRegisterComponent.prototype.userExistsApiOptions = /**
     * @return {?}
     */
    function () {
        return {
            requestOptions: {
                serverType: ApiServerType.ER
            },
            apiEntry: 'user/exists',
            payload: function (val) {
                return { userName: val };
            }
        };
    };
    return AbstractRegisterComponent;
}(AuthBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AbstractChangePwdComponent = /** @class */ (function (_super) {
    __extends(AbstractChangePwdComponent, _super);
    function AbstractChangePwdComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    AbstractChangePwdComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _a;
        this.form = DiUtils.get(FormBuilder).group((_a = {},
            _a[this.oldPasswordKey] = ['', Validators.required],
            _a[this.newPasswordKey] = ['', [NgValidators.required, NgValidators.minLength(6)]],
            _a.reNewPassword = ['', [NgValidators.required, NgValidators.minLength(6), NgValidators.equalTo(this.newPasswordKey)]],
            _a));
    };
    /**
     * @return {?}
     */
    AbstractChangePwdComponent.prototype.changePwd = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.error = undefined;
        /** @type {?} */
        var data = this.form.value;
        delete data['reNewPassword'];
        data['userPwdSetDate'] = DateUtils.getFormattedDateTime();
        AuthUtils.changePwd(this.getSubmitData(this.form.value))
            .subscribe(function (response) {
            if (response.success === true) {
                RouteUtils.nav(ConfigUtils.getConfig().auth.changePwdSuccessRouter);
            }
            else {
                _this.error = response.message || '密码修改失败';
            }
        });
    };
    return AbstractChangePwdComponent;
}(AuthBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AnimateNumberComponent = /** @class */ (function (_super) {
    __extends(AnimateNumberComponent, _super);
    function AnimateNumberComponent(cd) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.currentNumber = 0;
        _this.fontSize = '.8em';
        _this.counter$ = new Subject();
        _this.$subscriptions = _this.counter$
            .pipe(switchMap(function (endRange) {
            return timer(1000, 200)
                .pipe(mapTo(_this.positiveOrNegative(endRange, _this.currentNumber)), startWith(_this.currentNumber), scan(function (acc, curr) { return acc + curr; }), takeWhile(_this.takeUntil(endRange, _this.currentNumber)));
        }))
            .subscribe(function (val) {
            _this.currentNumber = val;
            if (_this.currentNumber === _this.end) {
                _this.fontSize = '1em';
            }
            _this.cd.detectChanges();
        });
        return _this;
    }
    Object.defineProperty(AnimateNumberComponent.prototype, "end", {
        get: /**
         * @return {?}
         */
        function () {
            return this._end;
        },
        set: /**
         * @param {?} endRange
         * @return {?}
         */
        function (endRange) {
            this._end = endRange;
            this.currentNumber = endRange - CommonsUtils.getRandomNumber(20);
            this.counter$.next(endRange);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    AnimateNumberComponent.prototype.positiveOrNegative = /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    function (endRange, currentNumber) {
        return endRange > currentNumber ? 1 : -1;
    };
    /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    AnimateNumberComponent.prototype.takeUntil = /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    function (endRange, currentNumber) {
        return endRange > currentNumber
            ? function (val) { return val <= endRange; }
            : function (val) { return val >= endRange; };
    };
    AnimateNumberComponent.decorators = [
        { type: Component, args: [{
                    selector: 'animate-number',
                    template: "\n    <span [ngStyle]=\"{'font-size': fontSize, 'font-weight': 'bold'}\">\n       {{currentNumber}}\n    </span>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    AnimateNumberComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    AnimateNumberComponent.propDecorators = {
        end: [{ type: Input }]
    };
    return AnimateNumberComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var ROUTE_DATA_BREADCRUMB_KEY = 'breadcrumb';
var BreadcrumbsComponent = /** @class */ (function (_super) {
    __extends(BreadcrumbsComponent, _super);
    function BreadcrumbsComponent(router, route) {
        var _this = _super.call(this) || this;
        _this.router = router;
        _this.route = route;
        _this.outlet = 'primary';
        return _this;
    }
    /**
     * @return {?}
     */
    BreadcrumbsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.breadcrumbs$ = StatesUtils.observe(StateNames.nav)
            .pipe(filter(function (state) { return state && state.status === 'success'; }), map(function () { return _this.resolveRoute(); }));
    };
    /**
     * @param {?} breadcrumb
     * @return {?}
     */
    BreadcrumbsComponent.prototype.getRouterLink = /**
     * @param {?} breadcrumb
     * @return {?}
     */
    function (breadcrumb) {
        if (breadcrumb.params) {
            return [breadcrumb.url, breadcrumb.params];
        }
        else {
            return [breadcrumb.url];
        }
    };
    /**
     * @private
     * @return {?}
     */
    BreadcrumbsComponent.prototype.resolveRoute = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var breadcrumbs = [];
        /** @type {?} */
        var currentRoute = this.route.root;
        /** @type {?} */
        var menus = StatesUtils.getValue(StateNames.rootMenu);
        /** @type {?} */
        var url;
        /** @type {?} */
        var prefix = CommonsUtils.get(ConfigUtils.getConfig(), 'breadcrumb.prefix');
        /** @type {?} */
        var excludes = CommonsUtils.get(ConfigUtils.getConfig(), 'breadcrumb.excludes');
        /** @type {?} */
        var lastLabel = '';
        do {
            /** @type {?} */
            var childrenRoutes = currentRoute.children;
            currentRoute = null;
            childrenRoutes.forEach(function (route) {
                if (route.outlet === _this.outlet) {
                    /** @type {?} */
                    var routeSnapshot = route.snapshot;
                    /** @type {?} */
                    var label = null;
                    if (routeSnapshot.routeConfig && routeSnapshot.routeConfig.data && routeSnapshot.routeConfig.data[ROUTE_DATA_BREADCRUMB_KEY]) {
                        label = routeSnapshot.routeConfig.data[ROUTE_DATA_BREADCRUMB_KEY];
                    }
                    if (!label) {
                        /** @type {?} */
                        var currentUrl = routeSnapshot.url.join('/');
                        if (currentUrl && currentUrl.trim().length > 0) {
                            if (!url) {
                                url = currentUrl;
                            }
                            else {
                                url = url + '/' + currentUrl;
                            }
                        }
                        if (url && !RegUtils.test(url, excludes)) {
                            /** @type {?} */
                            var parts = url.split('/');
                            /** @type {?} */
                            var menu = CommonsUtils.deepFind(menus, { routerLink: url }, { routerLink: "/" + url }, { name: parts[parts.length - 1] });
                            if (menu && menu.length > 0) {
                                label = ((/** @type {?} */ (menu[0]))).label;
                            }
                        }
                    }
                    if (label && label.length !== 0 && label !== lastLabel) {
                        if (url.length === 0) {
                            routeSnapshot.params = {};
                        }
                        breadcrumbs.push((/** @type {?} */ ({
                            label: label,
                            url: url,
                            params: routeSnapshot.params
                        })));
                    }
                    currentRoute = route;
                    lastLabel = label;
                }
            });
        } while (currentRoute);
        if (prefix) {
            return prefix.concat(breadcrumbs);
        }
        else {
            return breadcrumbs;
        }
    };
    BreadcrumbsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-breadcrumbs',
                    template: "<ol class=\"breadcrumb\">\n    <ng-container *ngTemplateOutlet=\"templates?.before\"></ng-container>\n    <ng-container *ngFor=\"let breadcrumb of breadcrumbs$|async;let last=last\">\n        <li class=\"breadcrumb-item\" [ngClass]=\"{active: last}\">\n            <a *ngIf=\"!last\" [routerLink]=\"getRouterLink(breadcrumb)\">{{breadcrumb.label}}</a>\n            <span *ngIf=\"last\">{{breadcrumb.label}}</span>\n        </li>\n    </ng-container>\n    <ng-container *ngTemplateOutlet=\"templates?.after\"></ng-container>\n</ol>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    BreadcrumbsComponent.ctorParameters = function () { return [
        { type: Router },
        { type: ActivatedRoute }
    ]; };
    BreadcrumbsComponent.propDecorators = {
        outlet: [{ type: Input }]
    };
    return BreadcrumbsComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StateButtonComponent = /** @class */ (function (_super) {
    __extends(StateButtonComponent, _super);
    function StateButtonComponent(cd) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.type = 'button';
        _this.hint = '';
        _this.onClick = new EventEmitter();
        _this.onFocus = new EventEmitter();
        _this.onBlur = new EventEmitter();
        _this.processIcon = 'fa fa-cog fa-spin';
        _this.processing$ = new Subject();
        return _this;
    }
    Object.defineProperty(StateButtonComponent.prototype, "processing", {
        set: /**
         * @param {?} processing
         * @return {?}
         */
        function (processing) {
            this.processing$.next(processing);
            this.cd.markForCheck(); // used for not dom event modify
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StateButtonComponent.prototype, "btnLabel", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.processing) {
                return this.stateLabel || this.label;
            }
            else {
                return this.label || '';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StateButtonComponent.prototype, "btnTitle", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.processing) {
                return this.stateHint || '执行中...';
            }
            else {
                return this.hint || '';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    StateButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.stateKey) {
            this.$subscriptions = StatesUtils.observe(StateNames.http, this.stateKey)
                .pipe(filter(function (state) { return !!state; }), map(function (state) { return state['start']; })).subscribe(function (b) { return _this.processing$.next(b); });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    StateButtonComponent.prototype.click = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onClick.emit(__assign({}, event, this.context || {}));
    };
    StateButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-button',
                    template: "<button *ngIf=\"!hidden\"\n        [attr.type]=\"type\"\n        [ngClass]=\"styleClass\"\n        [ngStyle]=\"style\"\n        [disabled]=\"disabled || (processing$|async) \"\n        [title]=\"hint\"\n        (click)=\"click($event)\"\n        (focus)=\"emitEvent('onFocus',$event)\"\n        (blur)=\"emitEvent('onBlur',$event)\"\n>\n  <i *ngIf=\"!iconRight && !(processing$|async)\" [ngClass]=\"icon\"></i> {{btnLabel}}\n  <ng-content></ng-content>\n  <i *ngIf=\"iconRight && !(processing$|async)\" [ngClass]=\"icon\"  ></i>\n  <i *ngIf=\"processing$|async\" [ngClass]=\"processIcon\" style=\"margin-left: 5px\"></i>\n</button>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    StateButtonComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    StateButtonComponent.propDecorators = {
        type: [{ type: Input }],
        hint: [{ type: Input }],
        label: [{ type: Input }],
        icon: [{ type: Input }],
        style: [{ type: Input }],
        hidden: [{ type: Input }],
        styleClass: [{ type: Input }],
        disabled: [{ type: Input }],
        iconRight: [{ type: Input }],
        stateKey: [{ type: Input }],
        stateLabel: [{ type: Input }],
        stateHint: [{ type: Input }],
        context: [{ type: Input }],
        onClick: [{ type: Output }],
        onFocus: [{ type: Output }],
        onBlur: [{ type: Output }],
        processing: [{ type: Input }]
    };
    return StateButtonComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StateButtonsComponent = /** @class */ (function (_super) {
    __extends(StateButtonsComponent, _super);
    function StateButtonsComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StateButtonsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-buttons',
                    template: "\n    \n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    return StateButtonsComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DataItemComponent = /** @class */ (function (_super) {
    __extends(DataItemComponent, _super);
    function DataItemComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DataItemComponent.prototype, "labels", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var _label = DataItemUtils.getItemLabel(this.item, this.labelKeys);
            if (CommonsUtils.isArray(_label)) {
                return _label;
            }
            else {
                return [_label];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataItemComponent.prototype, "labelKeys", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var keys = this.props.dropDownOptionKey || this.props.labelKey;
            if (!keys) {
                if (this.item.hasOwnProperty('label')) {
                    keys = 'label';
                }
                else {
                    keys = Object.keys(this.item).filter(function (key) { return !key.startsWith('_') && key !== 'id'; });
                }
            }
            return keys;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DataItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.props) {
            this.props = {};
        }
    };
    DataItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-data-item',
                    template: "\n    <ng-container *ngIf=\"props.template;else default\">\n      <er-dyna-content [content]=\"props.template\" [context]=\"item\"></er-dyna-content>\n    </ng-container>\n    <ng-template #default>\n      <div class=\"d-flex data-item\" [ngClass]=\"props.itemStyleClass || 'ui-clearfix'\">\n        <span class=\"label mr-3 border-right\" *ngFor=\"let label of labels\" [ngClass]=\"props.labelStyleClass\" [innerHTML]=\"label\"></span>\n        <span class=\"pull-right count\" *ngIf=\"props.showCounter && item['value']\">\n          <span [ngClass]=\"props.counterStyleClass || 'badge badge-pill badge-info'\">{{item['value']}}</span>\n        </span>\n      </div>\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["/deep/ .ui-autocomplete-list-item{border-bottom:1px solid #9f9f9f!important;font-size:.8em!important;color:#000!important}/deep/ .ui-autocomplete-list-item:hover{background-color:transparent!important;font-weight:700!important;color:red!important;font-size:1em!important}"]
                }] }
    ];
    DataItemComponent.propDecorators = {
        item: [{ type: Input }],
        props: [{ type: Input }]
    };
    return DataItemComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var cacheKey$1 = '$component-factory';
var DynaComponentUtils = /** @class */ (function () {
    function DynaComponentUtils() {
    }
    /**
     * @param {?} hostViewContainerRef
     * @param {?} componentType
     * @return {?}
     */
    DynaComponentUtils.createComponentByType = /**
     * @param {?} hostViewContainerRef
     * @param {?} componentType
     * @return {?}
     */
    function (hostViewContainerRef, componentType) {
        if (!componentType) {
            return;
        }
        /** @type {?} */
        var componentFactory = CacheUtils.get(cacheKey$1, componentType);
        if (!componentFactory) {
            componentFactory = DynaComponentUtils.getComponentFactoryResolver().resolveComponentFactory(componentType);
            CacheUtils.put(cacheKey$1, componentType, componentFactory);
        }
        return DynaComponentUtils.createComponent(hostViewContainerRef, componentFactory);
    };
    /**
     * @param {?} hostViewContainerRef
     * @param {?} template
     * @return {?}
     */
    DynaComponentUtils.createComponentByTemplate = /**
     * @param {?} hostViewContainerRef
     * @param {?} template
     * @return {?}
     */
    function (hostViewContainerRef, template) {
        if (!template) {
            return;
        }
        /** @type {?} */
        var componentFactory = CacheUtils.get(cacheKey$1, template);
        if (!componentFactory) {
            /** @type {?} */
            var component_1 = DynaComponentUtils.createDecoratedComponent(null, template);
            /** @type {?} */
            var module = DynaComponentUtils.createNgModule(component_1);
            componentFactory = module.componentFactories.find(function (factory) { return factory.componentType === component_1; });
            CacheUtils.put(cacheKey$1, template, componentFactory);
        }
        return DynaComponentUtils.createComponent(hostViewContainerRef, componentFactory);
    };
    /**
     * @private
     * @return {?}
     */
    DynaComponentUtils.getComponentFactoryResolver = /**
     * @private
     * @return {?}
     */
    function () {
        if (!DynaComponentUtils._componentFactoryResolver) {
            DynaComponentUtils._componentFactoryResolver = DiUtils.get(ComponentFactoryResolver);
        }
        return DynaComponentUtils._componentFactoryResolver;
    };
    /**
     * @private
     * @param {?} useClass
     * @param {?} template
     * @return {?}
     */
    DynaComponentUtils.createDecoratedComponent = /**
     * @private
     * @param {?} useClass
     * @param {?} template
     * @return {?}
     */
    function (useClass, template) {
        /** @type {?} */
        var componentClass = useClass || /** @class */ (function () {
            function useClass() {
            }
            return useClass;
        }());
        return Component({
            template: template
        })(componentClass);
    };
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    DynaComponentUtils.createNgModule = /**
     * @private
     * @param {?} component
     * @return {?}
     */
    function (component) {
        /** @type {?} */
        var ngModule = NgModule({ declarations: [component] })(/** @class */ (function () {
            function class_1() {
            }
            return class_1;
        }()));
        return DiUtils.get(Compiler).compileModuleAndAllComponentsSync(ngModule);
    };
    /**
     * @private
     * @param {?} hostViewContainerRef
     * @param {?} componentFactory
     * @return {?}
     */
    DynaComponentUtils.createComponent = /**
     * @private
     * @param {?} hostViewContainerRef
     * @param {?} componentFactory
     * @return {?}
     */
    function (hostViewContainerRef, componentFactory) {
        hostViewContainerRef.clear();
        /** @type {?} */
        var componentRef = hostViewContainerRef.createComponent(componentFactory);
        return componentRef;
    };
    DynaComponentUtils._componentFactoryResolver = null;
    return DynaComponentUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynaCompComponent = /** @class */ (function () {
    function DynaCompComponent(viewContainerRef, el, renderer) {
        this.viewContainerRef = viewContainerRef;
        this.el = el;
        this.renderer = renderer;
        this.onCreated = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DynaCompComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.type) {
            this.createComponent();
        }
    };
    /**
     * @return {?}
     */
    DynaCompComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.component) {
            this.component.destroy();
            this.component = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    DynaCompComponent.prototype.createComponent = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.type) {
            if (CommonsUtils.isString(this.type)) {
                this.component = DynaComponentUtils.createComponentByTemplate(this.viewContainerRef, (/** @type {?} */ (this.type)));
            }
            else {
                this.component = DynaComponentUtils.createComponentByType(this.viewContainerRef, (/** @type {?} */ (this.type)));
            }
            ComponentUtils.bind(this.component.instance, this.props);
            this.onCreated.emit(this.component);
            /** @type {?} */
            var parent_1 = this.el.nativeElement.parentNode;
            this.renderer.removeChild(parent_1, this.el.nativeElement);
        }
    };
    DynaCompComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-dyna-component',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    DynaCompComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    DynaCompComponent.propDecorators = {
        type: [{ type: Input }],
        props: [{ type: Input }],
        onCreated: [{ type: Output }]
    };
    return DynaCompComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} val
 * @return {?}
 */
function createNewChange(val) {
    return new SimpleChange(undefined, val, true);
}
/**
 * @param {?} record
 * @param {?=} isFirstChange
 * @return {?}
 */
function recordToChange(record, isFirstChange) {
    if (isFirstChange === void 0) { isFirstChange = false; }
    return isFirstChange
        ? createNewChange(record.currentValue)
        : new SimpleChange(record.previousValue, record.currentValue, false);
}
/**
 * @param {?} isFirstChanges
 * @param {?} setter
 * @return {?}
 */
function setChangeFromRecord(isFirstChanges, setter) {
    return function (record) {
        return setter(record, recordToChange(record, isFirstChanges));
    };
}
/**
 * @param {?} isFirstChanges
 * @return {?}
 */
function getChangesRecords(isFirstChanges) {
    return function (changes) { return setChangeFromRecord(isFirstChanges, function (record, change) { return changes[record.key] = change; }); };
}
/**
 * @param {?} isFirstChanges
 * @return {?}
 */
function getNewChangesRecords(isFirstChanges) {
    return function (changes) { return setChangeFromRecord(isFirstChanges, function (record, change) {
        if (!changes[record.key]) {
            changes[record.key] = change;
        }
    }); };
}
/** @type {?} */
var defaultOpts = {
    isFirstChanges: false,
    onlyNewChanges: false,
};
/**
 * @param {?=} opts
 * @return {?}
 */
function changesFromRecord(opts) {
    if (opts === void 0) { opts = defaultOpts; }
    return opts.onlyNewChanges
        ? getNewChangesRecords(opts.isFirstChanges)
        : getChangesRecords(opts.isFirstChanges);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var recordToChanges = changesFromRecord({ isFirstChanges: true });
/** @type {?} */
var recordToNewChanges = changesFromRecord({ onlyNewChanges: true });
var PropsBindDirective = /** @class */ (function (_super) {
    __extends(PropsBindDirective, _super);
    function PropsBindDirective(differs, elementRef, renderer, viewContainerRef) {
        var _this = _super.call(this) || this;
        _this.differs = differs;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.viewContainerRef = viewContainerRef;
        _this.autoBind = true;
        _this.differ = _this.differs.find({}).create();
        _this._hostComponentInst = undefined;
        _this._viewComponentRef = undefined;
        return _this;
    }
    Object.defineProperty(PropsBindDirective.prototype, "hostComponentInst", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._hostComponentInst === undefined) {
                this._hostComponentInst = ComponentUtils.getHostComponentInst(this.viewContainerRef);
            }
            return this._hostComponentInst;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PropsBindDirective.prototype, "viewComponentRef", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._viewComponentRef === undefined) {
                this._viewComponentRef = ComponentUtils.getViewComponentRef(this.viewContainerRef);
            }
            return this._viewComponentRef;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    PropsBindDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.autoBind) {
            if (changes.props && !CommonsUtils.isEmpty(this.props)) {
                this.resolveProps();
                this.differs.find({}).create();
                LogUtils.debug(this, '属性绑定', this.props, this.inputs, this.outputs, this.hooks);
                if (this.methods) {
                    this.bindMethods();
                }
                if (this.inputs) {
                    /** @type {?} */
                    var inputsChanges = this.differ.diff(this.inputs);
                    this.expInputs = this.getExpressionInputs(this.inputs);
                    if (inputsChanges) {
                        this.updateInputsChanges(inputsChanges);
                        this.updateInputs(!this.lastInputChanges);
                    }
                }
                if (this.outputs) {
                    /** @type {?} */
                    var outputsChanges = this.differ.diff(this.outputs);
                    if (outputsChanges) {
                        this.bindOutputs();
                    }
                }
                if (this.hooks) {
                    this.bindLifeCycles();
                }
                if (changes.props.isFirstChange()) {
                    if (this.hostComponentInst._propsBind) {
                        this.hostComponentInst._propsBind();
                    }
                }
            }
            if (changes.attrs && this.attrs) {
                this.resolveAttrs();
                /** @type {?} */
                var attrChanges = this.differ.diff(this.attrs);
                if (attrChanges) {
                    this.lastAttrChanges = this.changesToAttrChanges(attrChanges);
                    this.updateAttributes(this.lastAttrChanges);
                }
                // this.expAttrs = this.getExpressionInputs(this.attrs);
            }
        }
    };
    /**
     * @return {?}
     */
    PropsBindDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.attrs && this.autoBind) {
            if (this.expAttrs && Object.keys(this.expAttrs).length > 0) {
                Object.keys(this.expAttrs).forEach(function (key) {
                    _this.attrs[key] = _this.expAttrs[key].call(_this, _this.getEventContext());
                });
            }
            /** @type {?} */
            var attrChanges = this.differ.diff(this.attrs);
            if (attrChanges) {
                this.lastAttrChanges = this.changesToAttrChanges(attrChanges);
                this.updateAttributes(this.lastAttrChanges);
            }
        }
        if (this.inputs && this.autoBind) {
            if (this.expInputs && Object.keys(this.expInputs).length > 0) {
                Object.keys(this.expInputs).forEach(function (key) {
                    /** @type {?} */
                    var result = _this.expInputs[key](_this.getEventContext());
                    if (result instanceof Observable) {
                        _this.$subscriptions = ((/** @type {?} */ (result))).subscribe(function (data) {
                            _this.inputs[key] = data;
                        });
                    }
                    else {
                        _this.inputs[key] = result;
                    }
                });
            }
            /** @type {?} */
            var inputsChanges = this.differ.diff(this.inputs);
            if (inputsChanges) {
                /** @type {?} */
                var isNotFirstChange = !!this.lastInputChanges;
                this.updateInputsChanges(inputsChanges);
                if (isNotFirstChange) {
                    this.updateInputs();
                }
            }
        }
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    PropsBindDirective.prototype.getEventContext = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        return __assign({}, event, { $from: this.hostComponentInst }, this.context || {});
    };
    /**
     * @private
     * @param {?=} isFirstChange
     * @return {?}
     */
    PropsBindDirective.prototype.updateInputs = /**
     * @private
     * @param {?=} isFirstChange
     * @return {?}
     */
    function (isFirstChange) {
        var _this = this;
        if (isFirstChange === void 0) { isFirstChange = false; }
        if (!this.hostComponentInst || !this.inputs) {
            return;
        }
        Object.keys(this.inputs)
            .forEach(function (p) { return (_this.hostComponentInst[p] = _this.inputs[p]); });
        this.notifyOnInputChanges(this.lastInputChanges, isFirstChange);
    };
    /**
     * @private
     * @return {?}
     */
    PropsBindDirective.prototype.bindOutputs = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.stopSubscribe();
        if (!this.outputs) {
            return;
        }
        Object.keys(this.outputs)
            .filter(function (p) { return _this.hostComponentInst[p]; })
            .forEach(function (p) {
            return _this.$subscriptions = ((/** @type {?} */ (_this.hostComponentInst[p])))
                .subscribe(function (event) {
                try {
                    _this.outputs[p](_this.getEventContext(event));
                }
                catch (e) {
                    LogUtils.error(_this.hostComponentInst, '操作失败', e);
                }
            });
        });
    };
    /**
     * @private
     * @return {?}
     */
    PropsBindDirective.prototype.bindLifeCycles = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var constructor = ComponentUtils.getConstructor(this.hostComponentInst);
        /** @type {?} */
        var destructor = constructor.prototype['ngOnDestroy'];
        ComponentUtils.bindLifeCycles(this.hostComponentInst, this.hooks, constructor, destructor);
    };
    /**
     * @private
     * @return {?}
     */
    PropsBindDirective.prototype.bindMethods = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.methods) {
            Object.keys(this.methods).forEach(function (method) {
                _this.hostComponentInst[method] = _this.methods[method].bind(_this.hostComponentInst);
            });
        }
    };
    /**
     * @private
     * @param {?=} changes
     * @param {?=} forceFirstChanges
     * @return {?}
     */
    PropsBindDirective.prototype.notifyOnInputChanges = /**
     * @private
     * @param {?=} changes
     * @param {?=} forceFirstChanges
     * @return {?}
     */
    function (changes, forceFirstChanges) {
        if (changes === void 0) { changes = {}; }
        if (!this.hostComponentInst.ngOnChanges) {
            return;
        }
        if (forceFirstChanges) {
            changes = this.collectFirstChanges();
        }
        this.hostComponentInst.ngOnChanges(changes);
        if (this.hostComponentInst.cd && this.hostComponentInst.cd.detectChanges) {
            this.hostComponentInst.cd.detectChanges();
        }
    };
    /**
     * @private
     * @param {?} props
     * @return {?}
     */
    PropsBindDirective.prototype.getExpressionInputs = /**
     * @private
     * @param {?} props
     * @return {?}
     */
    function (props) {
        if (props) {
            /** @type {?} */
            var expProps_1 = {};
            Object.keys(props).forEach(function (key) {
                if (props[key] instanceof Function) {
                    expProps_1[key] = props[key];
                }
            });
            return expProps_1;
        }
        return undefined;
    };
    /**
     * @private
     * @param {?} differ
     * @return {?}
     */
    PropsBindDirective.prototype.updateInputsChanges = /**
     * @private
     * @param {?} differ
     * @return {?}
     */
    function (differ) {
        this.lastInputChanges = this.collectChangesFromDiffer(differ);
    };
    /**
     * @private
     * @return {?}
     */
    PropsBindDirective.prototype.collectFirstChanges = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var changes = (/** @type {?} */ ({}));
        /** @type {?} */
        var inputs = this.inputs;
        Object.keys(inputs)
            .forEach(function (prop) { return (changes[prop] = new SimpleChange(undefined, inputs[prop], true)); });
        return changes;
    };
    /**
     * @private
     * @param {?} differ
     * @return {?}
     */
    PropsBindDirective.prototype.collectChangesFromDiffer = /**
     * @private
     * @param {?} differ
     * @return {?}
     */
    function (differ) {
        /** @type {?} */
        var changes = (/** @type {?} */ ({}));
        differ.forEachAddedItem(recordToChanges(changes));
        differ.forEachItem(recordToNewChanges(changes));
        return changes;
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    PropsBindDirective.prototype.changesToAttrChanges = /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var attrChanges = {
            set: {},
            remove: []
        };
        changes.forEachAddedItem(function (r) { return (attrChanges.set[r.key] = r.currentValue); });
        changes.forEachChangedItem(function (r) { return (attrChanges.set[r.key] = r.currentValue); });
        changes.forEachRemovedItem(function (r) { return attrChanges.remove.push(r.key); });
        return attrChanges;
    };
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    PropsBindDirective.prototype.updateAttributes = /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    function (actions) {
        var _this = this;
        Object.keys(actions.set).forEach(function (key) {
            return _this.setAttribute(key, actions.set[key]);
        });
        actions.remove.forEach(function (key) { return _this.removeAttribute(key); });
    };
    /**
     * @private
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    PropsBindDirective.prototype.setAttribute = /**
     * @private
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    function (name, value, namespace) {
        this.renderer.setAttribute(this.elementRef.nativeElement, name, value, namespace);
    };
    /**
     * @private
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    PropsBindDirective.prototype.removeAttribute = /**
     * @private
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    function (name, namespace) {
        this.renderer.removeAttribute(this.elementRef.nativeElement, name, namespace);
    };
    /**
     * @private
     * @return {?}
     */
    PropsBindDirective.prototype.resolveProps = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.hostComponentInst && CommonsUtils.isJson(this.props)) {
            this.inputs = {};
            this.outputs = {};
            if (this.hostComponentInst._initProps) {
                this.hostComponentInst.$props = CommonsUtils.merge({}, this.props);
                this.hostComponentInst._initProps();
                this.props = CommonsUtils.merge({}, this.hostComponentInst.$props);
            }
            if (!this.props['$id']) {
                this.props['$id'] = IdUtils.getRandom();
            }
            if (this.props['methods']) {
                this.methods = this.props['methods'];
                delete this.props['methods'];
            }
            if (this.props['hooks']) {
                this.hooks = this.props['hooks'];
                delete this.props['hooks'];
            }
            // else if (this.props['$ext'] && this.props['$ext'].hooks) {
            //   this.hooks = this.props['$ext'].hooks;
            //   delete this.props['$ext'].hooks;
            // }
            if (this.hostComponentInst instanceof WrapperComponent) {
                this.props = CommonsUtils.get(this.props, '$ext', {});
                if (this.props['hooks']) {
                    this.hooks = this.props['hooks'];
                    delete this.props['hooks'];
                }
            }
            else {
                this.props = CommonsUtils.omit(this.props, '$ext');
            }
            Object.keys(this.props).forEach(function (key) {
                if (_this.hostComponentInst[key] instanceof EventEmitter) {
                    _this.outputs[key] = _this.props[key];
                }
                else {
                    _this.inputs[key] = _this.props[key];
                }
            });
            if (Object.keys(this.inputs).length === 0) {
                this.inputs = undefined;
            }
            if (Object.keys(this.outputs).length === 0) {
                this.outputs = undefined;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    PropsBindDirective.prototype.resolveAttrs = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.hostComponentInst instanceof WrapperComponent) {
            this.attrs = CommonsUtils.get(this.attrs, '$ext', {});
        }
        else {
            this.attrs = CommonsUtils.omit(this.attrs, '$ext');
        }
    };
    PropsBindDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erPropsBind]'
                },] }
    ];
    /** @nocollapse */
    PropsBindDirective.ctorParameters = function () { return [
        { type: KeyValueDiffers },
        { type: ElementRef },
        { type: Renderer2 },
        { type: ViewContainerRef }
    ]; };
    PropsBindDirective.propDecorators = {
        props: [{ type: Input }],
        context: [{ type: Input }],
        attrs: [{ type: Input }],
        autoBind: [{ type: Input }]
    };
    return PropsBindDirective;
}(BaseDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynaContentComponent = /** @class */ (function (_super) {
    __extends(DynaContentComponent, _super);
    function DynaContentComponent(cd) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.CONTENT_TYPE = ContentType;
        _this.parsedContent$ = new BehaviorSubject$1(undefined);
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DynaContentComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.parse();
    };
    /**
     * @return {?}
     */
    DynaContentComponent.prototype.refresh = /**
     * @return {?}
     */
    function () {
        this.parse();
        this.cd.markForCheck();
    };
    /**
     * @private
     * @return {?}
     */
    DynaContentComponent.prototype.parse = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (CommonsUtils.isJson(this.content)) {
            if (this.content['content']) {
                if (this.content['styleClass']) {
                    this.styleClass = this.content['styleClass'];
                }
                if (this.content['style']) {
                    this.style = this.content['style'];
                }
                this.content = this.content['content'];
            }
            if (this.content['data']) {
                this.contentType = ContentType.DATA;
                this.parsedContent = [];
                Object.keys(this.content['data']).forEach(function (key) {
                    _this.parsedContent.push({
                        key: key,
                        value: CommonsUtils.getText(_this.content['data'][key])
                    });
                });
                return;
            }
            else if (this.content['type']) {
                this.contentType = ContentType.COMPONENT;
                this.dynaComponent = (/** @type {?} */ (this.content));
                /** @type {?} */
                var directives = this.dynaComponent.directives;
                /** @type {?} */
                var dynaDirectives_1 = [];
                if (directives) {
                    directives = CommonsUtils.getArrayValue(directives);
                    directives.filter(function (direct) { return !!direct.type; }).forEach(function (direct) {
                        dynaDirectives_1.push(dynamicDirectiveDef(direct.type, direct.inputs, direct.outputs));
                    });
                }
                if (this.dynaComponent.props || this.context) {
                    dynaDirectives_1.push(dynamicDirectiveDef(PropsBindDirective, Object.assign({}, this.dynaComponent.props || {}, this.context || {})));
                }
                this.dynaComponent.directives = dynaDirectives_1;
                return;
            }
            else {
                this.parsedContent = ((/** @type {?} */ (this.content))).content;
                this.parsedContext = __assign({}, ((/** @type {?} */ (this.content))).context || {}, this.context || {});
            }
        }
        else {
            this.parsedContent = this.content;
            this.parsedContext = this.context;
        }
        if (CommonsUtils.isString(this.parsedContent)) {
            if (CommonsUtils.isTemplateStr(this.parsedContent)) {
                this.parsedContent = CommonsUtils.templateStr(this.parsedContent, this.context) || '<span></span>';
                this.contentType = ContentType.TEMPLATE_STR;
            }
            else {
                this.contentType = ContentType.STRING;
            }
        }
        else if (this.parsedContent instanceof TemplateRef) {
            this.contentType = ContentType.TEMPLATE;
        }
        else if (CommonsUtils.isFunction(this.parsedContent)) {
            this.parsedContextFn = this.parsedContent;
            /** @type {?} */
            var rtn = this.parsedContextFn(this.parsedContext);
            if (rtn instanceof Observable) {
                ((/** @type {?} */ (rtn))).subscribe(function (result) { return _this.parsedContent$.next(CommonsUtils.toString(result)); });
            }
            else {
                this.parsedContent$.next(rtn);
            }
            this.contentType = ContentType.FUNCTION;
        }
    };
    DynaContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-dyna-content',
                    template: "\n    <ng-container [ngSwitch]=\"contentType\">\n      <div *ngSwitchCase=\"CONTENT_TYPE.STRING\" [ngClass]=\"styleClass\" [ngStyle]=\"style\" [innerHTML]=\"parsedContent|erSafeHtml\"></div>\n      <div *ngSwitchCase=\"CONTENT_TYPE.DATA\" class=\"d-flex\" [ngClass]=\"styleClass\" [ngStyle]=\"style\">\n        <div *ngFor=\"let item of parsedContent\" class=\"d-flex justify-content-center m-3\">\n          <span class=\"mr-2 font-weight-bold\">{{item.key}}</span>\n          <span [innerHTML]=\"item.value|erSafeHtml\"></span>\n        </div>\n      </div>\n      <span *ngSwitchCase=\"CONTENT_TYPE.TEMPLATE_STR\" [innerHTML]=\"parsedContent\" [ngClass]=\"styleClass\"\n            [ngStyle]=\"style\"></span>\n      <ng-container *ngSwitchCase=\"CONTENT_TYPE.FUNCTION\">\n        <ng-container *ngIf=\"parsedContent$|async as asyncContent\">\n          <span [innerHTML]=\"asyncContent\" [ngClass]=\"styleClass\" [ngStyle]=\"style\"></span>\n        </ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"CONTENT_TYPE.TEMPLATE\">\n        <ng-container *ngTemplateOutlet=\"parsedContent;context:parsedContext\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"CONTENT_TYPE.COMPONENT\">\n        <ndc-dynamic [ndcDynamicComponent]=\"dynaComponent.type\"\n                     [ndcDynamicDirectives]=\"dynaComponent.directives\"\n                     [ndcDynamicAttributes]=\"dynaComponent.attrs\"\n        >\n        </ndc-dynamic>\n      </ng-container>\n    </ng-container>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    DynaContentComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    DynaContentComponent.propDecorators = {
        content: [{ type: Input }],
        context: [{ type: Input }],
        styleClass: [{ type: Input }],
        style: [{ type: Input }]
    };
    return DynaContentComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HttpStatusComponent = /** @class */ (function (_super) {
    __extends(HttpStatusComponent, _super);
    function HttpStatusComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.loadingClass = 'loading-circle';
        return _this;
    }
    Object.defineProperty(HttpStatusComponent.prototype, "httpState$", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var subject;
            if (!this.tag) {
                subject = HTTP_STATE$;
            }
            else {
                subject = HTTP_TAG_STATE$(this.tag);
            }
            return subject;
        },
        enumerable: true,
        configurable: true
    });
    HttpStatusComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-http-status',
                    template: "    \n      <ng-container *ngIf=\"httpState$|async\">\n        <ng-container *ngTemplateOutlet=\"template('_',default)\"></ng-container>\n        <ng-template #default>\n          <div [ngClass]=\"loadingClass\"></div>\n        </ng-template>\n      </ng-container>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    HttpStatusComponent.propDecorators = {
        tag: [{ type: Input }],
        loadingClass: [{ type: Input }]
    };
    return HttpStatusComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ContainerComponent = /** @class */ (function () {
    function ContainerComponent() {
        this.styleClass = 'container';
    }
    ContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-container',
                    template: "\n    <div [ngClass]=\"styleClass\">\n       <ng-content></ng-content>\n     </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    ContainerComponent.propDecorators = {
        styleClass: [{ type: Input }]
    };
    return ContainerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FluidContainerComponent = /** @class */ (function () {
    function FluidContainerComponent() {
        this.styleClass = 'container-fluid';
    }
    FluidContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-fluid-container',
                    template: "\n    <div [ngClass]=\"styleClass\">\n       <ng-content></ng-content>\n     </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    FluidContainerComponent.propDecorators = {
        styleClass: [{ type: Input }]
    };
    return FluidContainerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LeftRightContainerComponent = /** @class */ (function (_super) {
    __extends(LeftRightContainerComponent, _super);
    function LeftRightContainerComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.leftStyleClass = 'col-3';
        _this.rightStyleClass = 'col-9';
        _this.switchable = true;
        _this.onLeftHide = new EventEmitter();
        _this.templateNames = {
            left: 'left',
            right: 'right'
        };
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    LeftRightContainerComponent.prototype.reLayout = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.hideLeft = event;
        this.onLeftHide.emit(event);
    };
    LeftRightContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-left-right',
                    template: "\n    <div class=\"d-flex\">\n      <div *ngIf=\"!hideLeft\" class=\"w-25 shadow-lg\">\n        <ng-container *ngTemplateOutlet=\"template(templateNames.left)\"></ng-container>\n      </div>\n      <div class=\"flex-grow-1\">\n        <div *ngIf=\"switchable\">\n          <i class=\"fa fa-2x  text-primary\" [title]=\"hideLeft?'\u5C55\u5F00\u5DE6\u4FA7\u5185\u5BB9':'\u6536\u8D77\u5DE6\u4FA7\u5185\u5BB9'\"\n             [ngClass]=\"hideLeft?'fa-arrow-circle-right':'fa-arrow-circle-left'\"\n             (click)=\"reLayout(!hideLeft)\"></i>\n        </div>\n        <ng-container *ngTemplateOutlet=\"template(templateNames.right)\"></ng-container>\n      </div>\n    </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    LeftRightContainerComponent.propDecorators = {
        leftStyleClass: [{ type: Input }],
        rightStyleClass: [{ type: Input }],
        hideLeft: [{ type: Input }],
        switchable: [{ type: Input }],
        onLeftHide: [{ type: Output }]
    };
    return LeftRightContainerComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var MobileType = {
    iphoneX: 'iphone-x',
    iphone8: 'iphone8',
    iphone8plus: 'iphone8plus',
    iphone5s: 'iphone5s',
    nexus5: 'nexus5',
    ipad: 'ipad',
    note8: 'note8',
    macbook: 'macbook',
};
var PhonePreviewComponent = /** @class */ (function (_super) {
    __extends(PhonePreviewComponent, _super);
    function PhonePreviewComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.MOBILE_TYPE = MobileType;
        _this.mobile = MobileType.iphone8;
        _this.isLandscape = false;
        _this.scale = 1;
        return _this;
    }
    /**
     * @return {?}
     */
    PhonePreviewComponent.prototype.zoomIn = /**
     * @return {?}
     */
    function () {
        if (this.scale > 0.25) {
            this.scale = (this.scale - 0.25);
        }
    };
    /**
     * @return {?}
     */
    PhonePreviewComponent.prototype.zoomOut = /**
     * @return {?}
     */
    function () {
        if (this.scale < 2) {
            this.scale = (this.scale + 0.25);
        }
    };
    PhonePreviewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-phone-preview',
                    template: "<!--http://marvelapp.github.io/devices.css/-->\n\n<div [ngStyle]=\"{zoom:scale}\">\n  <span style=\"display: block\">\n    <i class=\"fa fa-search-minus pull-left\" (click)=\"zoomIn()\"></i>\n    <i class=\"fa fa-search-plus pull-right\" (click)=\"zoomOut()\"></i>\n  </span>\n\n  <ng-container *ngIf=\"mobile === MOBILE_TYPE.ipad\">\n    <ng-container *ngTemplateOutlet=\"ipad\"></ng-container>\n  </ng-container>\n\n  <ng-container *ngIf=\"mobile === MOBILE_TYPE.iphone8\">\n    <ng-container *ngTemplateOutlet=\"iphone8\"></ng-container>\n  </ng-container>\n</div>\n\n\n<ng-template #ipad>\n  <div class=\"mobile-face ipad {{color || 'silver'}}\" [ngClass]=\"{landscape: isLandscape}\">\n    <div class=\"camera\"></div>\n    <div class=\"screen\">\n      <ng-content></ng-content>\n    </div>\n    <div class=\"home\"></div>\n  </div>\n</ng-template>\n\n<ng-template #iphone8>\n  <div class=\"mobile-face iphone8 {{color || 'black'}}\" [ngClass]=\"{landscape: isLandscape}\">\n    <div class=\"top-bar\"></div>\n    <div class=\"sleep\"></div>\n    <div class=\"volume\"></div>\n    <div class=\"camera\"></div>\n    <div class=\"sensor\"></div>\n    <div class=\"speaker\"></div>\n    <div class=\"screen\">\n      <ng-content></ng-content>\n    </div>\n    <div class=\"home\"></div>\n    <div class=\"bottom-bar\"></div>\n  </div>\n</ng-template>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".mobile-face{display:inline-block;position:relative;box-sizing:content-box!important}.mobile-face .screen{width:100%;position:relative;height:100%;z-index:3;background:#fff;overflow-y:scroll;display:block;border-radius:1px;box-shadow:0 0 0 3px #111}.mobile-face .bottom-bar,.mobile-face .top-bar{height:3px;background:#000;width:100%;display:block}.mobile-face .middle-bar{width:3px;height:4px;top:0;left:90px;background:#000;position:absolute}.mobile-face.iphone8{width:375px;height:667px;padding:105px 24px;background:#d9dbdc;border-radius:56px;box-shadow:inset 0 0 3px 0 rgba(0,0,0,.2)}.mobile-face.iphone8:before{width:calc(100% - 12px);height:calc(100% - 12px);position:absolute;top:6px;content:'';left:6px;border-radius:50px;background:#f8f8f8;z-index:1}.mobile-face.iphone8:after{width:calc(100% - 16px);height:calc(100% - 16px);position:absolute;top:8px;content:'';left:8px;border-radius:48px;box-shadow:inset 0 0 3px 0 rgba(0,0,0,.1),inset 0 0 6px 3px #fff;z-index:2}.mobile-face.iphone8 .home{border-radius:100%;width:68px;height:68px;position:absolute;left:50%;margin-left:-34px;bottom:22px;z-index:3;background:#303233;background:linear-gradient(135deg,#303233 0,#b5b7b9 50%,#f0f2f2 69%,#303233 100%)}.mobile-face.iphone8 .home:before{background:#f8f8f8;position:absolute;content:'';border-radius:100%;width:calc(100% - 8px);height:calc(100% - 8px);top:4px;left:4px}.mobile-face.iphone8 .top-bar{height:14px;background:#bfbfc0;position:absolute;top:68px;left:0}.mobile-face.iphone8 .bottom-bar{height:14px;background:#bfbfc0;position:absolute;bottom:68px;left:0}.mobile-face.iphone8 .sleep{position:absolute;top:190px;right:-4px;width:4px;height:66px;border-radius:0 2px 2px 0;background:#d9dbdc}.mobile-face.iphone8 .volume{position:absolute;left:-4px;top:188px;z-index:0;height:66px;width:4px;border-radius:2px 0 0 2px;background:#d9dbdc}.mobile-face.iphone8 .volume:before{position:absolute;left:2px;top:-78px;height:40px;width:2px;border-radius:2px 0 0 2px;background:inherit;content:'';display:block}.mobile-face.iphone8 .volume:after{position:absolute;left:0;top:82px;height:66px;width:4px;border-radius:2px 0 0 2px;background:inherit;content:'';display:block}.mobile-face.iphone8 .camera{background:#3c3d3d;width:12px;height:12px;position:absolute;top:24px;left:50%;margin-left:-6px;border-radius:100%;z-index:3}.mobile-face.iphone8 .sensor{background:#3c3d3d;width:16px;height:16px;position:absolute;top:49px;left:134px;z-index:3;border-radius:100%}.mobile-face.iphone8 .speaker{background:#292728;width:70px;height:6px;position:absolute;top:54px;left:50%;margin-left:-35px;border-radius:6px;z-index:3}.mobile-face.iphone8.gold{background:#f9e7d3}.mobile-face.iphone8.gold .bottom-bar,.mobile-face.iphone8.gold .top-bar{background:#fff}.mobile-face.iphone8.gold .sleep,.mobile-face.iphone8.gold .volume{background:#f9e7d3}.mobile-face.iphone8.gold .home{background:#cebba9;background:linear-gradient(135deg,#cebba9 0,#f9e7d3 50%,#cebba9 100%)}.mobile-face.iphone8.black{background:#464646;box-shadow:inset 0 0 3px 0 rgba(0,0,0,.7)}.mobile-face.iphone8.black:before{background:#080808}.mobile-face.iphone8.black:after{box-shadow:inset 0 0 3px 0 rgba(0,0,0,.1),inset 0 0 6px 3px #212121}.mobile-face.iphone8.black .bottom-bar,.mobile-face.iphone8.black .top-bar{background:#212121}.mobile-face.iphone8.black .sleep,.mobile-face.iphone8.black .volume{background:#464646}.mobile-face.iphone8.black .camera{background:#080808}.mobile-face.iphone8.black .home{background:#080808;background:linear-gradient(135deg,#080808 0,#464646 50%,#080808 100%)}.mobile-face.iphone8.black .home:before{background:#080808}.mobile-face.iphone8.landscape{padding:24px 105px;height:375px;width:667px}.mobile-face.iphone8.landscape .sleep{top:100%;border-radius:0 0 2px 2px;right:190px;height:4px;width:66px}.mobile-face.iphone8.landscape .volume{width:66px;height:4px;top:-4px;left:calc(100% - 188px - 66px);border-radius:2px 2px 0 0}.mobile-face.iphone8.landscape .volume:before{width:40px;height:2px;top:2px;right:-78px;left:auto;border-radius:2px 2px 0 0}.mobile-face.iphone8.landscape .volume:after{left:-82px;width:66px;height:4px;top:0;border-radius:2px 2px 0 0}.mobile-face.iphone8.landscape .top-bar{width:14px;height:100%;left:calc(100% - 68px - 14px);top:0}.mobile-face.iphone8.landscape .bottom-bar{width:14px;height:100%;left:68px;top:0}.mobile-face.iphone8.landscape .home{top:50%;margin-top:-34px;margin-left:0;left:22px}.mobile-face.iphone8.landscape .sensor{top:134px;left:calc(100% - 49px - 16px)}.mobile-face.iphone8.landscape .speaker{height:70px;width:6px;left:calc(100% - 54px - 6px);top:50%;margin-left:0;margin-top:-35px}.mobile-face.iphone8.landscape .camera{left:calc(100% - 32px);top:50%;margin-left:0;margin-top:-5px}.mobile-face.iphone8plus{width:414px;height:736px;padding:112px 26px;background:#d9dbdc;border-radius:56px;box-shadow:inset 0 0 3px 0 rgba(0,0,0,.2)}.mobile-face.iphone8plus:before{width:calc(100% - 12px);height:calc(100% - 12px);position:absolute;top:6px;content:'';left:6px;border-radius:50px;background:#f8f8f8;z-index:1}.mobile-face.iphone8plus:after{width:calc(100% - 16px);height:calc(100% - 16px);position:absolute;top:8px;content:'';left:8px;border-radius:48px;box-shadow:inset 0 0 3px 0 rgba(0,0,0,.1),inset 0 0 6px 3px #fff;z-index:2}.mobile-face.iphone8plus .home{border-radius:100%;width:68px;height:68px;position:absolute;left:50%;margin-left:-34px;bottom:24px;z-index:3;background:#303233;background:linear-gradient(135deg,#303233 0,#b5b7b9 50%,#f0f2f2 69%,#303233 100%)}.mobile-face.iphone8plus .home:before{background:#f8f8f8;position:absolute;content:'';border-radius:100%;width:calc(100% - 8px);height:calc(100% - 8px);top:4px;left:4px}.mobile-face.iphone8plus .top-bar{height:14px;background:#bfbfc0;position:absolute;top:68px;left:0}.mobile-face.iphone8plus .bottom-bar{height:14px;background:#bfbfc0;position:absolute;bottom:68px;left:0}.mobile-face.iphone8plus .sleep{position:absolute;top:190px;right:-4px;width:4px;height:66px;border-radius:0 2px 2px 0;background:#d9dbdc}.mobile-face.iphone8plus .volume{position:absolute;left:-4px;top:188px;z-index:0;height:66px;width:4px;border-radius:2px 0 0 2px;background:#d9dbdc}.mobile-face.iphone8plus .volume:before{position:absolute;left:2px;top:-78px;height:40px;width:2px;border-radius:2px 0 0 2px;background:inherit;content:'';display:block}.mobile-face.iphone8plus .volume:after{position:absolute;left:0;top:82px;height:66px;width:4px;border-radius:2px 0 0 2px;background:inherit;content:'';display:block}.mobile-face.iphone8plus .camera{background:#3c3d3d;width:12px;height:12px;position:absolute;top:29px;left:50%;margin-left:-6px;border-radius:100%;z-index:3}.mobile-face.iphone8plus .sensor{background:#3c3d3d;width:16px;height:16px;position:absolute;top:54px;left:154px;z-index:3;border-radius:100%}.mobile-face.iphone8plus .speaker{background:#292728;width:70px;height:6px;position:absolute;top:59px;left:50%;margin-left:-35px;border-radius:6px;z-index:3}.mobile-face.iphone8plus.gold{background:#f9e7d3}.mobile-face.iphone8plus.gold .bottom-bar,.mobile-face.iphone8plus.gold .top-bar{background:#fff}.mobile-face.iphone8plus.gold .sleep,.mobile-face.iphone8plus.gold .volume{background:#f9e7d3}.mobile-face.iphone8plus.gold .home{background:#cebba9;background:linear-gradient(135deg,#cebba9 0,#f9e7d3 50%,#cebba9 100%)}.mobile-face.iphone8plus.black{background:#464646;box-shadow:inset 0 0 3px 0 rgba(0,0,0,.7)}.mobile-face.iphone8plus.black:before{background:#080808}.mobile-face.iphone8plus.black:after{box-shadow:inset 0 0 3px 0 rgba(0,0,0,.1),inset 0 0 6px 3px #212121}.mobile-face.iphone8plus.black .bottom-bar,.mobile-face.iphone8plus.black .top-bar{background:#212121}.mobile-face.iphone8plus.black .sleep,.mobile-face.iphone8plus.black .volume{background:#464646}.mobile-face.iphone8plus.black .camera{background:#080808}.mobile-face.iphone8plus.black .home{background:#080808;background:linear-gradient(135deg,#080808 0,#464646 50%,#080808 100%)}.mobile-face.iphone8plus.black .home:before{background:#080808}.mobile-face.iphone8plus.landscape{padding:26px 112px;height:414px;width:736px}.mobile-face.iphone8plus.landscape .sleep{top:100%;border-radius:0 0 2px 2px;right:190px;height:4px;width:66px}.mobile-face.iphone8plus.landscape .volume{width:66px;height:4px;top:-4px;left:calc(100% - 188px - 66px);border-radius:2px 2px 0 0}.mobile-face.iphone8plus.landscape .volume:before{width:40px;height:2px;top:2px;right:-78px;left:auto;border-radius:2px 2px 0 0}.mobile-face.iphone8plus.landscape .volume:after{left:-82px;width:66px;height:4px;top:0;border-radius:2px 2px 0 0}.mobile-face.iphone8plus.landscape .top-bar{width:14px;height:100%;left:calc(100% - 68px - 14px);top:0}.mobile-face.iphone8plus.landscape .bottom-bar{width:14px;height:100%;left:68px;top:0}.mobile-face.iphone8plus.landscape .home{top:50%;margin-top:-34px;margin-left:0;left:24px}.mobile-face.iphone8plus.landscape .sensor{top:154px;left:calc(100% - 54px - 16px)}.mobile-face.iphone8plus.landscape .speaker{height:70px;width:6px;left:calc(100% - 59px - 6px);top:50%;margin-left:0;margin-top:-35px}.mobile-face.iphone8plus.landscape .camera{left:calc(100% - 29px);top:50%;margin-left:0;margin-top:-5px}.mobile-face.iphone5s{padding:105px 22px;background:#2c2b2c;width:320px;height:568px;border-radius:50px}.mobile-face.iphone5s:before{width:calc(100% - 8px);height:calc(100% - 8px);position:absolute;top:4px;content:'';left:4px;border-radius:46px;background:#1e1e1e;z-index:1}.mobile-face.iphone5s .sleep{position:absolute;top:-4px;right:60px;width:60px;height:4px;border-radius:2px 2px 0 0;background:#282727}.mobile-face.iphone5s .volume{position:absolute;left:-4px;top:180px;z-index:0;height:27px;width:4px;border-radius:2px 0 0 2px;background:#282727}.mobile-face.iphone5s .volume:before{position:absolute;left:0;top:-75px;height:35px;width:4px;border-radius:2px 0 0 2px;background:inherit;content:'';display:block}.mobile-face.iphone5s .volume:after{position:absolute;left:0;bottom:-64px;height:27px;width:4px;border-radius:2px 0 0 2px;background:inherit;content:'';display:block}.mobile-face.iphone5s .camera{background:#3c3d3d;width:10px;height:10px;position:absolute;top:32px;left:50%;margin-left:-5px;border-radius:5px;z-index:3}.mobile-face.iphone5s .sensor{background:#3c3d3d;width:10px;height:10px;position:absolute;top:60px;left:160px;z-index:3;margin-left:-32px;border-radius:5px}.mobile-face.iphone5s .speaker{background:#292728;width:64px;height:10px;position:absolute;top:60px;left:50%;margin-left:-32px;border-radius:5px;z-index:3}.mobile-face.iphone5s .home{border-radius:36px;width:68px;box-shadow:inset 0 0 0 4px #2c2b2c;height:68px;position:absolute;left:50%;margin-left:-34px;bottom:19px;z-index:3}.mobile-face.iphone5s .top-bar{top:70px;position:absolute;left:0}.mobile-face.iphone5s .bottom-bar{bottom:70px;position:absolute;left:0}.mobile-face.iphone5s.landscape{padding:22px 105px;height:320px;width:568px}.mobile-face.iphone5s.landscape .sleep{right:-4px;top:calc(100% - 120px);height:60px;width:4px;border-radius:0 2px 2px 0}.mobile-face.iphone5s.landscape .volume{width:27px;height:4px;top:-4px;left:calc(100% - 180px);border-radius:2px 2px 0 0}.mobile-face.iphone5s.landscape .volume:before{width:35px;height:4px;top:0;right:-75px;left:auto;border-radius:2px 2px 0 0}.mobile-face.iphone5s.landscape .volume:after{bottom:0;left:-64px;z-index:999;height:4px;width:27px;border-radius:2px 2px 0 0}.mobile-face.iphone5s.landscape .sensor{top:160px;left:calc(100% - 60px);margin-left:0;margin-top:-32px}.mobile-face.iphone5s.landscape .speaker{height:64px;width:10px;left:calc(100% - 60px);top:50%;margin-left:0;margin-top:-32px}.mobile-face.iphone5s.landscape .camera{left:calc(100% - 32px);top:50%;margin-left:0;margin-top:-5px}.mobile-face.iphone5s.landscape .home{left:19px;bottom:50%;margin-bottom:-34px;margin-left:0}.mobile-face.iphone5s.landscape .top-bar{left:70px;top:0;width:3px;height:100%}.mobile-face.iphone5s.landscape .bottom-bar{right:70px;left:auto;bottom:0;width:3px;height:100%}.mobile-face.iphone5s.silver{background:#bcbcbc}.mobile-face.iphone5s.silver:before{background:#fcfcfc}.mobile-face.iphone5s.silver .sleep,.mobile-face.iphone5s.silver .volume{background:#d6d6d6}.mobile-face.iphone5s.silver .bottom-bar,.mobile-face.iphone5s.silver .top-bar{background:#eaebec}.mobile-face.iphone5s.silver .home{box-shadow:inset 0 0 0 4px #bcbcbc}.mobile-face.iphone5s.gold{background:#f9e7d3}.mobile-face.iphone5s.gold:before{background:#fcfcfc}.mobile-face.iphone5s.gold .sleep,.mobile-face.iphone5s.gold .volume{background:#f9e7d3}.mobile-face.iphone5s.gold .bottom-bar,.mobile-face.iphone5s.gold .top-bar{background:#fff}.mobile-face.iphone5s.gold .home{box-shadow:inset 0 0 0 4px #f9e7d3}.mobile-face.nexus5{padding:50px 15px;width:320px;height:568px;background:#1e1e1e;border-radius:20px}.mobile-face.nexus5:before{border-radius:600px/50px;background:inherit;content:'';position:absolute;height:103.1%;width:calc(100% - 26px);top:50%;left:50%;-webkit-transform:translateX(-50%) translateY(-50%);transform:translateX(-50%) translateY(-50%)}.mobile-face.nexus5 .top-bar{width:calc(100% - 8px);height:calc(100% - 6px);position:absolute;top:3px;left:4px;border-radius:20px;background:#181818}.mobile-face.nexus5 .top-bar:before{border-radius:600px/50px;background:inherit;content:'';position:absolute;height:103%;width:calc(100% - 26px);top:50%;left:50%;-webkit-transform:translateX(-50%) translateY(-50%);transform:translateX(-50%) translateY(-50%)}.mobile-face.nexus5 .bottom-bar{display:none}.mobile-face.nexus5 .sleep{width:3px;position:absolute;left:-3px;top:110px;height:100px;background:inherit;border-radius:2px 0 0 2px}.mobile-face.nexus5 .volume{width:3px;position:absolute;right:-3px;top:70px;height:45px;background:inherit;border-radius:0 2px 2px 0}.mobile-face.nexus5 .camera{background:#3c3d3d;width:10px;height:10px;position:absolute;top:18px;left:50%;z-index:3;margin-left:-5px;border-radius:100%}.mobile-face.nexus5 .camera:before{background:#3c3d3d;width:6px;height:6px;content:'';display:block;position:absolute;top:2px;left:-100px;z-index:3;border-radius:100%}.mobile-face.nexus5.landscape{padding:15px 50px;height:320px;width:568px}.mobile-face.nexus5.landscape:before{width:103.1%;height:calc(100% - 26px);border-radius:50px/600px}.mobile-face.nexus5.landscape .top-bar{left:3px;top:4px;height:calc(100% - 8px);width:calc(100% - 6px)}.mobile-face.nexus5.landscape .top-bar:before{width:103%;height:calc(100% - 26px);border-radius:50px/600px}.mobile-face.nexus5.landscape .sleep{height:3px;width:100px;left:calc(100% - 210px);top:-3px;border-radius:2px 2px 0 0}.mobile-face.nexus5.landscape .volume{height:3px;width:45px;right:70px;top:100%;border-radius:0 0 2px 2px}.mobile-face.nexus5.landscape .camera{top:50%;left:calc(100% - 18px);margin-left:0;margin-top:-5px}.mobile-face.nexus5.landscape .camera:before{top:-100px;left:2px}.mobile-face.ipad{width:576px;height:768px;padding:90px 25px;background:#242324;border-radius:44px}.mobile-face.ipad:before{width:calc(100% - 8px);height:calc(100% - 8px);position:absolute;content:'';display:block;top:4px;left:4px;border-radius:40px;background:#1e1e1e}.mobile-face.ipad .camera{background:#3c3d3d;width:10px;height:10px;position:absolute;top:44px;left:50%;margin-left:-5px;border-radius:100%}.mobile-face.ipad .bottom-bar,.mobile-face.ipad .top-bar{display:none}.mobile-face.ipad .home{background:#242324;border-radius:36px;width:50px;height:50px;position:absolute;left:50%;margin-left:-25px;bottom:22px}.mobile-face.ipad .home:after{width:15px;height:15px;margin-top:-8px;margin-left:-8px;border:1px solid rgba(255,255,255,.1);border-radius:4px;position:absolute;display:block;content:'';top:50%;left:50%}.mobile-face.ipad.landscape{height:576px;width:768px;padding:25px 90px}.mobile-face.ipad.landscape .camera{left:calc(100% - 44px);top:50%;margin-left:0;margin-top:-5px}.mobile-face.ipad.landscape .home{top:50%;left:22px;margin-left:0;margin-top:-25px}.mobile-face.ipad.silver{background:#bcbcbc}.mobile-face.ipad.silver:before{background:#fcfcfc}.mobile-face.ipad.silver .home{background:#fcfcfc;box-shadow:inset 0 0 0 1px #bcbcbc}.mobile-face.ipad.silver .home:after{border:1px solid rgba(0,0,0,.2)}.mobile-face.macbook{width:960px;height:600px;padding:44px 44px 76px;margin:0 auto;background:#bebebe;border-radius:34px}.mobile-face.macbook:before{width:calc(100% - 8px);height:calc(100% - 8px);position:absolute;content:'';display:block;top:4px;left:4px;border-radius:30px;background:#1e1e1e}.mobile-face.macbook .top-bar{width:calc(100% + 2 * 70px);height:40px;position:absolute;content:'';display:block;top:680px;left:-70px;border-bottom-left-radius:90px 18px;border-bottom-right-radius:90px 18px;background:#bebebe;box-shadow:inset 0 -4px 13px 3px rgba(34,34,34,.6)}.mobile-face.macbook .top-bar:before{width:100%;height:24px;content:'';display:block;top:0;left:0;background:#f0f0f0;border-bottom:2px solid #aaa;border-radius:5px;position:relative}.mobile-face.macbook .top-bar:after{width:16%;height:14px;content:'';display:block;top:0;background:#ddd;position:absolute;margin-left:auto;margin-right:auto;left:0;right:0;border-radius:0 0 20px 20px;box-shadow:inset 0 -3px 10px #999}.mobile-face.macbook .bottom-bar{background:0 0;width:calc(100% + 2 * 70px);height:26px;position:absolute;content:'';display:block;top:680px;left:-70px}.mobile-face.macbook .bottom-bar:after,.mobile-face.macbook .bottom-bar:before{height:calc(100% - 2px);width:80px;content:'';display:block;top:0;position:absolute}.mobile-face.macbook .bottom-bar:before{left:0;background:#f0f0f0;background:linear-gradient(to right,#747474 0,#c3c3c3 5%,#ebebeb 14%,#979797 41%,#f0f0f0 80%,#f0f0f0 100%,#f0f0f0 100%)}.mobile-face.macbook .bottom-bar:after{right:0;background:#f0f0f0;background:linear-gradient(to right,#f0f0f0 0,#f0f0f0 0,#f0f0f0 20%,#979797 59%,#ebebeb 86%,#c3c3c3 95%,#747474 100%)}.mobile-face.macbook .camera{background:#3c3d3d;width:10px;height:10px;position:absolute;top:20px;left:50%;margin-left:-5px;border-radius:100%}.mobile-face.macbook .home{display:none}.mobile-face.iphone-x{width:375px;height:812px;padding:26px;background:#fdfdfd;box-shadow:inset 0 0 11px 0 #000;border-radius:66px}.mobile-face.iphone-x .overflow{width:100%;height:100%;position:absolute;top:0;left:0;border-radius:66px;overflow:hidden}.mobile-face.iphone-x .shadow{border-radius:100%;width:90px;height:90px;position:absolute;background:radial-gradient(ellipse at center,rgba(0,0,0,.6) 0,rgba(255,255,255,0) 60%)}.mobile-face.iphone-x .shadow--tl{top:-20px;left:-20px}.mobile-face.iphone-x .shadow--tr{top:-20px;right:-20px}.mobile-face.iphone-x .shadow--bl{bottom:-20px;left:-20px}.mobile-face.iphone-x .shadow--br{bottom:-20px;right:-20px}.mobile-face.iphone-x:before{width:calc(100% - 10px);height:calc(100% - 10px);position:absolute;top:5px;content:'';left:5px;border-radius:61px;background:#000;z-index:1}.mobile-face.iphone-x .inner-shadow{width:calc(100% - 20px);height:calc(100% - 20px);position:absolute;top:10px;overflow:hidden;left:10px;border-radius:56px;box-shadow:inset 0 0 15px 0 rgba(255,255,255,.66);z-index:1}.mobile-face.iphone-x .inner-shadow:before{box-shadow:inset 0 0 20px 0 #fff;width:100%;height:116%;position:absolute;top:-8%;content:'';left:0;border-radius:200px/112px;z-index:2}.mobile-face.iphone-x .screen{border-radius:40px;box-shadow:none}.mobile-face.iphone-x .bottom-bar,.mobile-face.iphone-x .top-bar{width:100%;position:absolute;height:8px;background:rgba(0,0,0,.1);left:0}.mobile-face.iphone-x .top-bar{top:80px}.mobile-face.iphone-x .bottom-bar{bottom:80px}.mobile-face.iphone-x .sleep,.mobile-face.iphone-x .volume,.mobile-face.iphone-x .volume:after,.mobile-face.iphone-x .volume:before{width:3px;background:#b5b5b5;position:absolute}.mobile-face.iphone-x .volume{left:-3px;top:116px;height:32px}.mobile-face.iphone-x .volume:before{height:62px;top:62px;content:'';left:0}.mobile-face.iphone-x .volume:after{height:62px;top:140px;content:'';left:0}.mobile-face.iphone-x .sleep{height:96px;top:200px;right:-3px}.mobile-face.iphone-x .camera{width:6px;height:6px;top:9px;border-radius:100%;position:absolute;left:154px;background:#0d4d71}.mobile-face.iphone-x .speaker{height:6px;width:60px;left:50%;position:absolute;top:9px;margin-left:-30px;background:#171818;border-radius:6px}.mobile-face.iphone-x .notch{position:absolute;width:210px;height:30px;top:26px;left:108px;z-index:4;background:#000;border-bottom-left-radius:24px;border-bottom-right-radius:24px}.mobile-face.iphone-x .notch:after,.mobile-face.iphone-x .notch:before{content:'';height:8px;position:absolute;top:0;width:8px}.mobile-face.iphone-x .notch:after{background:radial-gradient(circle at bottom left,transparent 0,transparent 70%,#000 70%,#000 100%);left:-8px}.mobile-face.iphone-x .notch:before{background:radial-gradient(circle at bottom right,transparent 0,transparent 70%,#000 70%,#000 100%);right:-8px}.mobile-face.iphone-x.landscape{height:375px;width:812px}.mobile-face.iphone-x.landscape .bottom-bar,.mobile-face.iphone-x.landscape .top-bar{width:8px;height:100%;top:0}.mobile-face.iphone-x.landscape .top-bar{left:80px}.mobile-face.iphone-x.landscape .bottom-bar{right:80px;bottom:auto;left:auto}.mobile-face.iphone-x.landscape .sleep,.mobile-face.iphone-x.landscape .volume,.mobile-face.iphone-x.landscape .volume:after,.mobile-face.iphone-x.landscape .volume:before{height:3px}.mobile-face.iphone-x.landscape .inner-shadow:before{height:100%;width:116%;left:-8%;top:0;border-radius:112px/200px}.mobile-face.iphone-x.landscape .volume{bottom:-3px;top:auto;left:116px;width:32px}.mobile-face.iphone-x.landscape .volume:before{width:62px;left:62px;top:0}.mobile-face.iphone-x.landscape .volume:after{width:62px;left:140px;top:0}.mobile-face.iphone-x.landscape .sleep{width:96px;left:200px;top:-3px;right:auto}.mobile-face.iphone-x.landscape .camera{left:9px;bottom:154px;top:auto}.mobile-face.iphone-x.landscape .speaker{width:6px;height:60px;left:9px;top:50%;margin-top:-30px;margin-left:0}.mobile-face.iphone-x.landscape .notch{height:210px;width:30px;left:26px;bottom:108px;top:auto;border-top-right-radius:24px;border-bottom-right-radius:24px;border-bottom-left-radius:0}.mobile-face.iphone-x.landscape .notch:after,.mobile-face.iphone-x.landscape .notch:before{left:0}.mobile-face.iphone-x.landscape .notch:after{background:radial-gradient(circle at bottom right,transparent 0,transparent 70%,#000 70%,#000 100%);bottom:-8px;top:auto}.mobile-face.iphone-x.landscape .notch:before{background:radial-gradient(circle at top right,transparent 0,transparent 70%,#000 70%,#000 100%);top:-8px}.mobile-face.note8{width:400px;height:822px;background:#000;border-radius:34px;padding:45px 10px}.mobile-face.note8 .overflow{width:100%;height:100%;position:absolute;top:0;left:0;border-radius:34px;overflow:hidden}.mobile-face.note8 .speaker{height:8px;width:56px;left:50%;position:absolute;top:25px;margin-left:-28px;background:#171818;z-index:1;border-radius:8px}.mobile-face.note8 .camera{height:18px;width:18px;left:86px;position:absolute;top:18px;background:#212b36;z-index:1;border-radius:100%}.mobile-face.note8 .camera:before{content:'';height:8px;width:8px;left:-22px;position:absolute;top:5px;background:#212b36;z-index:1;border-radius:100%}.mobile-face.note8 .sensors{height:10px;width:10px;left:120px;position:absolute;top:22px;background:#1d233b;z-index:1;border-radius:100%}.mobile-face.note8 .sensors:before{content:'';height:10px;width:10px;left:18px;position:absolute;top:0;background:#1d233b;z-index:1;border-radius:100%}.mobile-face.note8 .more-sensors{height:16px;width:16px;left:285px;position:absolute;top:18px;background:#33244a;box-shadow:0 0 0 2px rgba(255,255,255,.1);z-index:1;border-radius:100%}.mobile-face.note8 .more-sensors:before{content:'';height:11px;width:11px;left:40px;position:absolute;top:4px;background:#214a61;z-index:1;border-radius:100%}.mobile-face.note8 .sleep{width:2px;height:56px;background:#000;position:absolute;top:288px;right:-2px}.mobile-face.note8 .volume{width:2px;height:120px;background:#000;position:absolute;top:168px;left:-2px}.mobile-face.note8 .volume:before{content:'';top:168px;width:2px;position:absolute;left:0;background:#000;height:56px}.mobile-face.note8 .inner{width:100%;height:calc(100% - 8px);position:absolute;top:2px;content:'';left:0;border-radius:34px;border-top:2px solid #9fa0a2;border-bottom:2px solid #9fa0a2;background:#000;z-index:1;box-shadow:inset 0 0 6px 0 rgba(255,255,255,.5)}.mobile-face.note8 .shadow{box-shadow:inset 0 0 60px 0 #fff,inset 0 0 30px 0 rgba(255,255,255,.5),0 0 20px 0 #fff,0 0 20px 0 rgba(255,255,255,.5);height:101%;position:absolute;top:-.5%;content:'';width:calc(100% - 20px);left:10px;border-radius:38px;z-index:5;pointer-events:none}.mobile-face.note8 .screen{border-radius:14px;box-shadow:none}.mobile-face.note8.landscape{height:400px;width:822px;padding:10px 45px}.mobile-face.note8.landscape .speaker{height:56px;width:8px;top:50%;margin-top:-28px;margin-left:0;right:25px;left:auto}.mobile-face.note8.landscape .camera{top:86px;right:18px;left:auto}.mobile-face.note8.landscape .camera:before{top:-22px;left:5px}.mobile-face.note8.landscape .sensors{top:120px;right:22px;left:auto}.mobile-face.note8.landscape .sensors:before{top:18px;left:0}.mobile-face.note8.landscape .more-sensors{top:285px;right:18px;left:auto}.mobile-face.note8.landscape .more-sensors:before{top:40px;left:4px}.mobile-face.note8.landscape .sleep{bottom:-2px;top:auto;right:288px;width:56px;height:2px}.mobile-face.note8.landscape .volume{width:120px;height:2px;top:-2px;right:168px;left:auto}.mobile-face.note8.landscape .volume:before{right:168px;left:auto;top:0;width:56px;height:2px}.mobile-face.note8.landscape .inner{height:100%;width:calc(100% - 8px);left:2px;top:0;border-top:0;border-bottom:0;border-left:2px solid #9fa0a2;border-right:2px solid #9fa0a2}.mobile-face.note8.landscape .shadow{width:101%;height:calc(100% - 20px);left:-.5%;top:10px}"]
                }] }
    ];
    PhonePreviewComponent.propDecorators = {
        mobile: [{ type: Input }],
        color: [{ type: Input }],
        isLandscape: [{ type: Input }],
        scale: [{ type: Input }]
    };
    return PhonePreviewComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_QUERY_BUILDER_BOOTSTRAP_STYLES_CLASS = {
    removeIcon: 'fa fa-minus',
    addIcon: 'fa fa-plus',
    button: 'btn',
    buttonGroup: 'btn-group',
    rightAlign: 'order-12 ml-auto',
    switchRow: 'd-flex px-2',
    switchGroup: 'd-flex align-items-center',
    switchRadio: 'custom-control-input',
    switchLabel: 'custom-control-label',
    switchControl: 'custom-control custom-radio custom-control-inline',
    row: 'row p-2 m-1',
    connector: 'q-connector',
    rule: 'border',
    ruleSet: 'border',
    invalidRuleSet: 'alert alert-danger',
    emptyWarning: 'text-danger mx-auto',
    operatorControl: 'form-control',
    operatorControlSize: 'col-auto pr-0',
    fieldControl: 'form-control',
    fieldControlSize: 'col-auto pr-0',
    entityControl: 'form-control',
    entityControlSize: 'col-auto pr-0',
    inputControl: 'form-control',
    inputControlSize: 'col-auto'
};
// export const DEFAULT_QUERY_BUILDER_TYPE_OPERATORS = {
//   string: ['=', '!=', 'contains', 'like'],
//   number: ['=', '!=', '>', '>=', '<', '<='],
//   time: ['=', '!=', '>', '>=', '<', '<='],
//   date: ['=', '!=', '>', '>=', '<', '<='],
//   category: ['=', '!=', 'in', 'not in'],
//   boolean: ['=']
// };
/** @type {?} */
var EMPTY_QUERY_RULE_SET = { condition: 'AND', rules: [] };
/** @type {?} */
var DEFAULT_QUERY_BUILDER_PROPS = {
    fields: [],
    styleClasses: DEFAULT_QUERY_BUILDER_BOOTSTRAP_STYLES_CLASS,
    allowRuleSet: true
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return QueryBuilderComponent; }),
    multi: true
};
/** @type {?} */
var VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return QueryBuilderComponent; }),
    multi: true
};
var QueryBuilderComponent = /** @class */ (function (_super) {
    __extends(QueryBuilderComponent, _super);
    function QueryBuilderComponent(changeDetectorRef) {
        var _this = _super.call(this) || this;
        _this.changeDetectorRef = changeDetectorRef;
        _this.ruleSet = { condition: 'AND', rules: [] };
        _this.defaultValue = EMPTY_QUERY_RULE_SET;
        _this.templateNames = {
            buttonGroup: 'buttonGroup',
            switchGroup: 'switchGroup',
            removeButton: 'removeButton',
            entity: 'entity',
            field: 'field',
            operator: 'operator',
            input: 'input',
            empty: 'empty'
        };
        _this._config = {};
        return _this;
    }
    Object.defineProperty(QueryBuilderComponent.prototype, "config", {
        get: /**
         * @return {?}
         */
        function () {
            return this._config;
        },
        set: /**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            CommonsUtils.defaults(this._config, config, DEFAULT_QUERY_BUILDER_PROPS);
            LogUtils.debug(this, '查询构造器配置', this._config);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryBuilderComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.ruleSet;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.ruleSet = value || { condition: 'AND', rules: [] };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} control
     * @return {?}
     */
    QueryBuilderComponent.prototype.validate = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var errors = {};
        /** @type {?} */
        var ruleErrorStore = [];
        /** @type {?} */
        var hasErrors = false;
        if (!this.config.allowEmptyRuleSet && this.checkEmptyRuleInRuleSet(this.value)) {
            errors.empty = '查询定义不能为空.';
            hasErrors = true;
        }
        this.validateRulesInRuleSet(this.value, ruleErrorStore);
        if (ruleErrorStore.length) {
            errors.rules = ruleErrorStore;
            hasErrors = true;
        }
        return hasErrors ? errors : null;
    };
    /**
     * @param {?=} index
     * @return {?}
     */
    QueryBuilderComponent.prototype.ruleSetStyle = /**
     * @param {?=} index
     * @return {?}
     */
    function (index) {
        if (index === void 0) { index = 0; }
        /** @type {?} */
        var bgColor = Object.keys(THEME_COLORS).filter(function (color, i) { return i === index; });
        if (bgColor.length === 0) {
            bgColor[0] = 'blue';
        }
        return {
            'border-left-width': '5px',
            'border-left-style': 'solid',
            'border-left-color': THEME_COLORS[bgColor[0]]
        };
    };
    /**
     * @param {?} field
     * @return {?}
     */
    QueryBuilderComponent.prototype.getOperators = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var _this = this;
        if (CommonsUtils.isFunction(this.config.operators)) {
            return ((/** @type {?} */ (this.config.operators)))(field);
        }
        else {
            /** @type {?} */
            var operators_1 = [];
            Object.keys(this.config.operators).forEach(function (key) {
                if (key === field.key) {
                    operators_1.push(_this.config.operators[key]);
                }
            });
            return operators_1;
        }
    };
    /**
     * @param {?=} entityKey
     * @return {?}
     */
    QueryBuilderComponent.prototype.getFields = /**
     * @param {?=} entityKey
     * @return {?}
     */
    function (entityKey) {
        if (this.config.entities && entityKey) {
            return this.config.fields.filter(function (field) {
                return field && field['entityKey'] === entityKey;
            });
        }
        else {
            return this.config.fields;
        }
    };
    /**
     * @param {?} rule
     * @return {?}
     */
    QueryBuilderComponent.prototype.getField = /**
     * @param {?} rule
     * @return {?}
     */
    function (rule) {
        /** @type {?} */
        var fields = this.getFields(rule.entity);
        if (fields) {
            /** @type {?} */
            var matched = fields.filter(function (field) { return field.key === rule.field; });
            if (matched && matched.length > 0) {
                return matched[0];
            }
        }
        return undefined;
    };
    /**
     * @param {...?} args
     * @return {?}
     */
    QueryBuilderComponent.prototype.getClassNames = /**
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        /** @type {?} */
        var styleClasses = this.config.styleClasses;
        /** @type {?} */
        var classNames = args.map(function (id) { return styleClasses[id]; }).filter(function (c) { return !!c; });
        return classNames.length ? classNames.join(' ') : null;
    };
    /**
     * @param {?} rule
     * @return {?}
     */
    QueryBuilderComponent.prototype.isInValidRule = /**
     * @param {?} rule
     * @return {?}
     */
    function (rule) {
        return this.config.allowRuleSet && rule.rules && rule.rules.length === 0;
    };
    /**
     * @param {?} rule
     * @return {?}
     */
    QueryBuilderComponent.prototype.getRuleClassName = /**
     * @param {?} rule
     * @return {?}
     */
    function (rule) {
        /** @type {?} */
        var cls = this.getClassNames('row', 'connector', 'transition');
        cls += ' ' + this.getClassNames(rule['condition'] ? 'ruleSet' : 'rule');
        // if (ruleMeta.invalid) {
        // cls += ' ' + this.getClassNames('invalidRuleSet');
        // }
        return cls;
    };
    /**
     * @param {?} entity
     * @return {?}
     */
    QueryBuilderComponent.prototype.getDefaultDataField = /**
     * @param {?} entity
     * @return {?}
     */
    function (entity) {
        if (!entity) {
            return null;
        }
        else if (entity.defaultField !== undefined) {
            return this.getDefaultValue(entity.defaultField);
        }
        else {
            /** @type {?} */
            var entityDataFields = this.config.fields.filter(function (field) {
                return field && field['entityKey'] === entity.key;
            });
            if (entityDataFields && entityDataFields.length) {
                return entityDataFields[0];
            }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    QueryBuilderComponent.prototype.getDefaultOperator = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field && field['defaultOperator'] !== undefined) {
            return this.getDefaultValue(field['defaultOperator']);
        }
        else {
            /** @type {?} */
            var operators = this.getOperators(field);
            if (operators && operators.length) ;
        }
    };
    /**
     * @return {?}
     */
    QueryBuilderComponent.prototype.addRule = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var parent = this.ruleSet;
        if (this.config.addRule) {
            this.config.addRule(parent);
        }
        else {
            /** @type {?} */
            var field = this.config.fields[0];
            parent.rules = __spread(parent.rules, [
                {
                    field: field.key,
                    entity: field['entityKey'],
                    operator: this.getDefaultOperator(field),
                    value: this.getDefaultValue(field.defaultValue)
                }
            ]);
        }
    };
    /**
     * @return {?}
     */
    QueryBuilderComponent.prototype.addRuleSet = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var parent = this.ruleSet;
        if (this.config.addRuleSet) {
            this.config.addRuleSet(parent);
        }
        else {
            parent.rules = __spread(parent.rules, [
                { condition: 'AND', rules: [] }
            ]);
        }
    };
    /**
     * @param {?} rule
     * @return {?}
     */
    QueryBuilderComponent.prototype.removeRule = /**
     * @param {?} rule
     * @return {?}
     */
    function (rule) {
        /** @type {?} */
        var parent = this.ruleSet;
        if (this.config.removeRule) {
            this.config.removeRule(rule, parent);
        }
        else {
            parent.rules = parent.rules.filter(function (r) { return r !== rule; });
        }
    };
    /**
     * @param {?=} ruleSet
     * @return {?}
     */
    QueryBuilderComponent.prototype.removeRuleSet = /**
     * @param {?=} ruleSet
     * @return {?}
     */
    function (ruleSet) {
        ruleSet = ruleSet || this.ruleSet;
        /** @type {?} */
        var parent = this.parentRuleSet;
        if (this.config.removeRuleSet) {
            this.config.removeRuleSet(ruleSet, parent);
        }
        else {
            parent.rules = parent.rules.filter(function (r) { return r !== ruleSet; });
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    QueryBuilderComponent.prototype.changeCondition = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.ruleSet.condition = value;
    };
    /**
     * @param {?} key
     * @param {?} rule
     * @return {?}
     */
    QueryBuilderComponent.prototype.changeField = /**
     * @param {?} key
     * @param {?} rule
     * @return {?}
     */
    function (key, rule) {
        /** @type {?} */
        var field = this.config.fields[key];
        if (field && field.defaultValue !== undefined) {
            rule.value = this.getDefaultValue(field.defaultValue);
        }
        else {
            delete rule.value;
        }
        rule.operator = this.getDefaultOperator(field);
    };
    /**
     * @param {?} entityValue
     * @param {?} rule
     * @return {?}
     */
    QueryBuilderComponent.prototype.changeEntity = /**
     * @param {?} entityValue
     * @param {?} rule
     * @return {?}
     */
    function (entityValue, rule) {
        if (this.disabled) {
            return;
        }
        // const currentEntity: DataEntity = this.config.entities.find((e) => e.value === entityValue);
        // const defaultDataField: DataField = this.getDefaultDataField(currentEntity);
        // if (defaultDataField) {
        //   this.changeDataField(defaultDataField.key, rule);
        // }
    };
    /**
     * @param {?} defaultValue
     * @return {?}
     */
    QueryBuilderComponent.prototype.getDefaultValue = /**
     * @param {?} defaultValue
     * @return {?}
     */
    function (defaultValue) {
        switch (typeof defaultValue) {
            case 'function':
                return defaultValue();
            default:
                return defaultValue;
        }
    };
    /**
     * @param {?=} context
     * @return {?}
     */
    QueryBuilderComponent.prototype.context = /**
     * @param {?=} context
     * @return {?}
     */
    function (context) {
        return __assign({ qb: (/** @type {?} */ (this)) }, context);
    };
    /**
     * @private
     * @param {?} ruleSet
     * @return {?}
     */
    QueryBuilderComponent.prototype.checkEmptyRuleInRuleSet = /**
     * @private
     * @param {?} ruleSet
     * @return {?}
     */
    function (ruleSet) {
        var _this = this;
        if (!ruleSet || !ruleSet.rules || ruleSet.rules.length === 0) {
            return true;
        }
        else {
            return ruleSet.rules.some(function (item) {
                if (item.rules) {
                    return _this.checkEmptyRuleInRuleSet(item);
                }
                else {
                    return false;
                }
            });
        }
    };
    /**
     * @private
     * @param {?} ruleSet
     * @param {?} errorStore
     * @return {?}
     */
    QueryBuilderComponent.prototype.validateRulesInRuleSet = /**
     * @private
     * @param {?} ruleSet
     * @param {?} errorStore
     * @return {?}
     */
    function (ruleSet, errorStore) {
        var _this = this;
        if (ruleSet && ruleSet.rules && ruleSet.rules.length > 0) {
            ruleSet.rules.forEach(function (item) {
                if (((/** @type {?} */ (item))).rules) {
                    return _this.validateRulesInRuleSet((/** @type {?} */ (item)), errorStore);
                }
                else if (((/** @type {?} */ (item))).field) {
                    /** @type {?} */
                    var field = _this.config.fields[((/** @type {?} */ (item))).field];
                    if (field && field['validator'] && field['validator'].apply) {
                        /** @type {?} */
                        var error = field['validator']((/** @type {?} */ (item)), ruleSet);
                        if (error != null) {
                            errorStore.push(error);
                        }
                    }
                }
            });
        }
    };
    QueryBuilderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-query-builder',
                    template: "<div [ngStyle]=\"ruleSetStyle(index)\" class=\"ruleSet\">\n  <div [ngClass]=\"getClassNames('switchRow')\">\n    <ng-container *ngIf=\"templates[templateNames.buttonGroup] as customer; else defaultButtonGroup\">\n      <div [ngClass]=\"getClassNames('buttonGroup', 'rightAlign')\">\n        <ng-container *ngTemplateOutlet=\"customer; context: context()\"></ng-container>\n      </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"templates[templateNames.switchGroup] as customer; else defaultSwitchGroup\">\n      <ng-container *ngTemplateOutlet=\"customer; context: context()\"></ng-container>\n    </ng-container>\n  </div>\n  <ul [ngClass]=\"getClassNames('tree')\" *ngIf=\"ruleSet && ruleSet.rules\">\n    <ng-container *ngFor=\"let rule of ruleSet.rules; let index = index\">\n\n      <li [ngClass]=\"getRuleClassName(rule)\">\n\n        <ng-container *ngIf=\"!rule['condition']\">\n          <er-query-builder-rule [rule]=\"rule\" [ruleIndex]=\"index\"></er-query-builder-rule>\n        </ng-container>\n\n        <ng-container *ngIf=\"rule['condition']\">\n          <er-query-builder [config]=\"config\" [ruleSet]=\"rule\" [parentRuleSet]=\"ruleSet\" [index]=\"index\">\n          </er-query-builder>\n        </ng-container>\n\n        <ng-container *ngIf=\"templates[templateNames.empty] as customer; else defaultEmptyWarning\">\n          <ng-container *ngIf=\"isInValidRule(rule)\">\n            <ng-container *ngTemplateOutlet=\"customer; context: context()\"></ng-container>\n          </ng-container>\n        </ng-container>\n\n        <ng-template #defaultEmptyWarning>\n          <p [ngClass]=\"getClassNames('emptyWarning')\" *ngIf=\"isInValidRule(rule)\"\n             [innerHTML]=\"config.emptyMessage|erSafeHtml\">\n          </p>\n        </ng-template>\n\n      </li>\n    </ng-container>\n  </ul>\n</div>\n<ng-template #defaultButtonGroup>\n  <div [ngClass]=\"getClassNames('buttonGroup', 'rightAlign')\">\n    <button (click)=\"addRule()\" [ngClass]=\"getClassNames('button')\" [disabled]=disabled>\n      <i [ngClass]=\"getClassNames('addIcon')\"></i> \u6761\u4EF6\n    </button>\n    <button (click)=\"addRuleSet()\" [ngClass]=\"getClassNames('button')\" *ngIf=\"config.allowRuleSet\"\n            [disabled]=disabled>\n      <i [ngClass]=\"getClassNames('addIcon')\"></i> \u6761\u4EF6\u7EC4\n    </button>\n    <ng-container *ngIf=\"!!parentRuleSet && config.allowRuleSet\">\n      <button (click)=\"removeRuleSet()\" [ngClass]=\"getClassNames('button', 'removeButton')\"\n              [disabled]=disabled>\n        <i [ngClass]=\"getClassNames('removeIcon')\"></i>\n      </button>\n    </ng-container>\n  </div>\n</ng-template>\n\n<ng-template #defaultSwitchGroup>\n  <div [ngClass]=\"getClassNames('switchGroup', 'transition')\" *ngIf=\"ruleSet\">\n    <div [ngClass]=\"getClassNames('switchControl')\">\n      <input type=\"radio\" [ngClass]=\"getClassNames('switchRadio')\" [(ngModel)]=\"ruleSet.condition\"\n             [disabled]=disabled\n             value=\"and\" #andOption/>\n      <label (click)=\"changeCondition(andOption.value)\" [ngClass]=\"getClassNames('switchLabel')\">\u5E76\u4E14</label>\n    </div>\n    <div [ngClass]=\"getClassNames('switchControl')\">\n      <input type=\"radio\" [ngClass]=\"getClassNames('switchRadio')\" [(ngModel)]=\"ruleSet.condition\"\n             [disabled]=disabled\n             value=\"or\" #orOption/>\n      <label (click)=\"changeCondition(orOption.value)\" [ngClass]=\"getClassNames('switchLabel')\">\u6216\u8005</label>\n    </div>\n    <div [ngClass]=\"getClassNames('switchControl')\">\n      <input type=\"radio\" [ngClass]=\"getClassNames('switchRadio')\" [(ngModel)]=\"ruleSet.condition\"\n             [disabled]=disabled\n             value=\"not\" #notOption/>\n      <label (click)=\"changeCondition(notOption.value)\" [ngClass]=\"getClassNames('switchLabel')\">\u4E0D\u662F</label>\n    </div>\n  </div>\n</ng-template>\n\n\n",
                    providers: [CONTROL_VALUE_ACCESSOR, VALIDATOR],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["@charset \"UTF-8\";:host::ng-deep{display:block;width:100%;font-size:.8em}:host::ng-deep .q-icon{font-style:normal;font-size:12px}:host::ng-deep .q-remove-icon::before{content:'\u274C'}:host::ng-deep .q-add-icon{color:#555}:host::ng-deep .q-add-icon::before{content:'\u2795'}:host::ng-deep .q-remove-button{color:#b3415d;width:31px}:host::ng-deep .q-button-group,:host::ng-deep .q-switch-group{overflow:hidden}:host::ng-deep .q-right-align{float:right}:host::ng-deep .q-button{margin-left:8px;padding:0 8px;background-color:#fff}:host::ng-deep .q-button:disabled{display:none}:host::ng-deep .q-control-size{display:inline-block;vertical-align:top;padding-right:10px}:host::ng-deep .q-entity-control,:host::ng-deep .q-field-control,:host::ng-deep .q-input-control,:host::ng-deep .q-operator-control{display:inline-block;padding:5px 8px;color:#555;background-color:#fff;background-image:none;border:1px solid #ccc;border-radius:4px;box-sizing:border-box;width:auto}:host::ng-deep .q-entity-control:disabled,:host::ng-deep .q-field-control:disabled,:host::ng-deep .q-input-control:disabled,:host::ng-deep .q-operator-control:disabled{border-color:transparent}:host::ng-deep .q-entity-control,:host::ng-deep .q-field-control,:host::ng-deep .q-input-control:not([type=checkbox]),:host::ng-deep .q-operator-control{min-height:32px;-webkit-appearance:none}:host::ng-deep .q-button,:host::ng-deep .q-switch-label{float:left;margin-bottom:0;font-size:14px;line-height:30px;font-weight:400;text-align:center;text-shadow:none;border:1px solid rgba(0,0,0,.2);box-sizing:border-box}:host::ng-deep .q-button:hover,:host::ng-deep .q-switch-label:hover{cursor:pointer;background-color:#f0f0f0}:host::ng-deep .q-switch-label{background-color:#e4e4e4;padding:0 8px}:host::ng-deep .q-switch-radio{position:absolute;clip:rect(0,0,0,0);height:1px;width:1px;border:0;overflow:hidden}:host::ng-deep .q-switch-radio:checked+.q-switch-label{border:1px solid #619ed7;background:#fff;color:#3176b3}:host::ng-deep .q-switch-radio:disabled+.q-switch-label{display:none}:host::ng-deep .q-switch-radio:checked:disabled+.q-switch-label{display:initial;color:initial;cursor:default;border-color:transparent}:host::ng-deep .q-invalid-ruleset{border:1px solid rgba(179,65,93,.5)!important;background:rgba(179,65,93,.1)!important}:host::ng-deep .q-empty-warning{color:#8d252e;text-align:center}:host::ng-deep .q-ruleset{border:1px solid #ccc}:host::ng-deep .q-rule{border:1px solid #ccc;background:#fff}:host::ng-deep .q-transition{transition:.1s ease-in-out}:host::ng-deep .q-tree{list-style:none;margin:4px 0 2px}:host::ng-deep .q-row{padding:6px 8px;margin-top:6px}:host::ng-deep .q-connector{position:relative}:host::ng-deep .q-connector::before{top:-5px;border-width:0 0 2px 2px}:host::ng-deep .q-connector::after{border-width:0 0 0 2px;top:50%}:host::ng-deep .q-connector::after,:host::ng-deep .q-connector::before{content:'';left:-12px;border-color:#ccc;border-style:solid;width:9px;height:calc(50% + 6px);position:absolute}:host::ng-deep .q-connector:last-child::after{content:none}:host::ng-deep .q-inline-block-display{display:inline-block;vertical-align:top}"]
                }] }
    ];
    /** @nocollapse */
    QueryBuilderComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    QueryBuilderComponent.propDecorators = {
        ruleSet: [{ type: Input }],
        index: [{ type: Input }],
        parentRuleSet: [{ type: Input }],
        config: [{ type: Input }],
        value: [{ type: Input }]
    };
    return QueryBuilderComponent;
}(ControlComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var QueryBuilderRuleComponent = /** @class */ (function (_super) {
    __extends(QueryBuilderRuleComponent, _super);
    function QueryBuilderRuleComponent(qb) {
        var _this = _super.call(this) || this;
        _this.qb = qb;
        _this.ruleChange = new EventEmitter();
        return _this;
    }
    Object.defineProperty(QueryBuilderRuleComponent.prototype, "rule", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rule;
        },
        set: /**
         * @param {?} rule
         * @return {?}
         */
        function (rule) {
            this._rule = rule;
            this.ruleChange.emit(this._rule);
        },
        enumerable: true,
        configurable: true
    });
    QueryBuilderRuleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-query-builder-rule',
                    template: "<div class=\"d-flex justify-content-between align-items-center rule\">\n\n  <div class=\"badge badge-info rounded-circle\">{{ruleIndex+1}}</div>\n\n  <ng-container *ngIf=\"qb.templates[qb.templateNames.removeButton] as custumer; else defaultRemoveButton\">\n    <div [ngClass]=\"qb.getClassNames('buttonGroup', 'rightAlign')\">\n      <ng-container *ngTemplateOutlet=\"custumer; context: qb.context({$implicit:rule})\"></ng-container>\n    </div>\n  </ng-container>\n\n  <div *ngIf=\"qb.config.entities?.length > 0\" class=\"q-inline-block-display\">\n    <ng-container *ngIf=\"qb.templates[qb.templateNames.entity] as customer; else defaultEntity\">\n      <ng-container *ngTemplateOutlet=\"customer; context: qb.context({$implicit:rule})\"></ng-container>\n    </ng-container>\n  </div>\n\n  <ng-container *ngIf=\"qb.templates[qb.templateNames.field] as customer; else defaultField\">\n    <ng-container *ngTemplateOutlet=\"customer; context: qb.context({$implicit:rule})\"></ng-container>\n  </ng-container>\n\n  <ng-container *ngIf=\"qb.templates[qb.templateNames.operator] as customer; else defaultOperator\">\n    <ng-container *ngTemplateOutlet=\"customer; context: qb.context({$implicit:rule})\"></ng-container>\n  </ng-container>\n\n  <div [ngClass]=\"qb.getClassNames('inputControlSize')\">\n    <ng-container\n      *ngTemplateOutlet=\"qb.templates[qb.templateNames.input]; context: qb.context({$implicit:rule})\"></ng-container>\n  </div>\n\n</div>\n\n<ng-template #defaultRemoveButton>\n  <div [ngClass]=\"qb.getClassNames('removeButtonSize', 'rightAlign')\">\n    <button [ngClass]=\"qb.getClassNames('button', 'removeButton')\" (click)=\"qb.removeRule(rule)\"\n            [disabled]=qb.disabled>\n      <i [ngClass]=\"qb.getClassNames('removeIcon')\"></i>\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #defaultEntity>\n  <div [ngClass]=\"qb.getClassNames('entityControlSize')\">\n    <select [ngClass]=\"qb.getClassNames('entityControl')\" [(ngModel)]=\"rule.entity\"\n            (change)=\"qb.changeEntity($event, rule)\" [disabled]=\"qb.disabled\">\n      <option *ngFor=\"let entity of qb.config.entities\" [ngValue]=\"entity.key\">\n        {{entity.label}}\n      </option>\n    </select>\n  </div>\n</ng-template>\n\n<ng-template #defaultField>\n  <div [ngClass]=\"qb.getClassNames('fieldControlSize')\">\n    <select [ngClass]=\"qb.getClassNames('fieldControl')\" [(ngModel)]=\"rule.field\"\n            (change)=\"qb.changeField($event, rule)\" [disabled]=\"qb.disabled\">\n      <option *ngFor=\"let field of qb.getFields(rule.entity)\" [value]=\"field.key\">\n        {{field.label}}\n      </option>\n    </select>\n  </div>\n</ng-template>\n\n<ng-template #defaultOperator>\n  <div [ngClass]=\"qb.getClassNames('operatorControlSize')\">\n    <select [ngClass]=\"qb.getClassNames('operatorControl')\" [(ngModel)]=\"rule.operator\"\n            [disabled]=\"qb.disabled\">\n      <option *ngFor=\"let operator of qb.getOperators(rule.field)\" [value]=\"operator.value\">\n        {{operator.label}}\n      </option>\n    </select>\n  </div>\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".rule:hover{background-color:green}"]
                }] }
    ];
    /** @nocollapse */
    QueryBuilderRuleComponent.ctorParameters = function () { return [
        { type: QueryBuilderComponent }
    ]; };
    QueryBuilderRuleComponent.propDecorators = {
        ruleIndex: [{ type: Input }],
        ruleChange: [{ type: Output }],
        rule: [{ type: Input }]
    };
    return QueryBuilderRuleComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 不能多次创建组件，不能用
 */
var RouteDataPropsBindComponent = /** @class */ (function (_super) {
    __extends(RouteDataPropsBindComponent, _super);
    function RouteDataPropsBindComponent(cd) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        return _this;
    }
    /**
     * @return {?}
     */
    RouteDataPropsBindComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.$subscriptions = RouteUtils.getActiveRoute().data.subscribe(function (data) {
            if (!data['$component']) {
                LogUtils.error(_this, '没有定义组件类型', data);
                return;
            }
            /** @type {?} */
            var activeRoute = RouteUtils.getActiveRoute();
            /** @type {?} */
            var params = __assign({}, activeRoute.snapshot.params || {}, activeRoute.snapshot.queryParams || {});
            while (activeRoute && !activeRoute.snapshot.data['$props']) {
                activeRoute = activeRoute.parent;
            }
            /** @type {?} */
            var routeData = __assign({}, activeRoute.snapshot.data, data);
            LogUtils.debug(_this, '路由数据', routeData);
            /** @type {?} */
            var props = routeData['$resolvedProps'] || routeData['$props'];
            if (routeData['$propsKey']) {
                props = CommonsUtils.get(props, routeData['$propsKey']);
            }
            /** @type {?} */
            var component = routeData['$component'];
            Object.keys(data).forEach(function (key) {
                if (CommonsUtils.isFunction(data[key])) {
                    data[key] = ((/** @type {?} */ (data[key])))(props, params, data);
                }
                else if (CommonsUtils.isString(data[key]) && data[key].startsWith(':')) {
                    /** @type {?} */
                    var param = ((/** @type {?} */ (data[key]))).substring(1);
                    if (param === 'USER_ID') ;
                    else if (params[param]) {
                        props[key] = params[param];
                    }
                }
                else if (key !== '$component' && key !== '$propsKey') {
                    props[key] = data[key];
                }
            });
            _this.type = component;
            _this.props = props;
            _this.inputs = props['inputs'] || props || {};
            _this.outputs = props['outputs'] || {};
            if (props['hooks']) {
                _this.hooks = props['hooks'];
                delete props['hooks'];
            }
            if (!props['inputs'] && !props['outputs']) {
                props['$props'] = CommonsUtils.copy(props);
            }
            _this.cd.detectChanges();
        });
    };
    /**
     * @param {?} componentRef
     * @return {?}
     */
    RouteDataPropsBindComponent.prototype.created = /**
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        if (!CommonsUtils.isEmpty(this.hooks)) {
            /** @type {?} */
            var constructor = ComponentUtils.getConstructor(componentRef);
            /** @type {?} */
            var destructor = constructor.prototype['ngOnDestroy'];
            ComponentUtils.bindLifeCycles(componentRef.instance, this.hooks, constructor, destructor);
        }
    };
    RouteDataPropsBindComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-route-bind',
                    template: "\n    <ndc-dynamic [ndcDynamicComponent]=\"type\"\n                 [ndcDynamicInputs]=\"inputs\"\n                 [ndcDynamicOutputs]=\"outputs\"\n                 (ndcDynamicCreated)=\"created($event)\"\n    >\n    </ndc-dynamic>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    RouteDataPropsBindComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    return RouteDataPropsBindComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WechatQrCodeComponent = /** @class */ (function () {
    function WechatQrCodeComponent() {
        this.height = 300;
        this.width = 300;
        this.baseUrl = 'https://open.weixin.qq.com/connect/qrconnect';
    }
    Object.defineProperty(WechatQrCodeComponent.prototype, "qrCodeUrl", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var wechat = ConfigUtils.getConfig().wechat;
            /** @type {?} */
            var redirect = encodeURIComponent(wechat.redirect_uri);
            /** @type {?} */
            var url = this.baseUrl + "?appid=" + wechat.appid + "&redirect_uri=" + redirect + "&scope=" + wechat.scope + "&response_type=code";
            url += wechat.style ? '&style=' + wechat.style : '';
            url += wechat.self_redirect ? '&self_redirect=' + wechat.self_redirect : '';
            url += wechat.href ? '&href=' + wechat.href : '';
            return url;
        },
        enumerable: true,
        configurable: true
    });
    WechatQrCodeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'wechat-qrcode',
                    template: "\n    <iframe [src]=\"qrCodeUrl|erSafeHtml:'resource'\" [width]=\"width\" [height]=\"height\" scrolling=\"no\" [attr.frameborder]=\"0\"></iframe>\n  "
                }] }
    ];
    WechatQrCodeComponent.propDecorators = {
        height: [{ type: Input }],
        width: [{ type: Input }]
    };
    return WechatQrCodeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var CoreComponents = [
    BreadcrumbsComponent,
    DataItemComponent,
    HttpStatusComponent,
    DynaContentComponent,
    StateButtonComponent,
    StateButtonsComponent,
    ContainerComponent,
    FluidContainerComponent,
    LeftRightContainerComponent,
    PhonePreviewComponent,
    RouteDataPropsBindComponent,
    QueryBuilderComponent,
    QueryBuilderRuleComponent,
    AnimateNumberComponent,
    WechatQrCodeComponent,
    DynaCompComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} el
 * @param {?} maxWait
 * @return {?}
 */
function animationEndSafe(el, maxWait) {
    return Observable$1.create(function (observer) {
        el.addEventListener('animationend', observer);
        setTimeout(observer, maxWait);
    });
    // return new Promise((resolve, reject) => {
    //   el.addEventListener('animationend', resolve);
    //   setTimeout(resolve, maxWait);
    // });
}
var AnimatedIfDirective = /** @class */ (function (_super) {
    __extends(AnimatedIfDirective, _super);
    function AnimatedIfDirective(viewContainer, _templateRef) {
        var _this = _super.call(this, viewContainer, _templateRef) || this;
        _this.viewContainer = viewContainer;
        _this.animatedIfOnShow = new EventEmitter(false);
        _this.animatedIfOnHide = new EventEmitter(false);
        _this.visible = false;
        _this.destroyed$ = new Subject$1();
        return _this;
    }
    Object.defineProperty(AnimatedIfDirective.prototype, "erAnimatedIf", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (this.visible && !val) {
                this.hide();
            }
            else if (!this.visible && val) {
                this.show();
            }
            this.visible = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    AnimatedIfDirective.prototype.getContainer = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.viewContainer.length > 0) {
            return ((/** @type {?} */ (this.viewContainer.get(0)))).rootNodes[0];
        }
        else {
            return null;
        }
    };
    /**
     * Hides the element. Animation is performed through css on the container.
     * This method will set the class to hiding and preserve the element for the animation duration.
     */
    /**
     * Hides the element. Animation is performed through css on the container.
     * This method will set the class to hiding and preserve the element for the animation duration.
     * @private
     * @return {?}
     */
    AnimatedIfDirective.prototype.hide = /**
     * Hides the element. Animation is performed through css on the container.
     * This method will set the class to hiding and preserve the element for the animation duration.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var container = this.getContainer();
        if (!!container) {
            container.classList.remove('showing');
            container.classList.add('hiding');
            animationEndSafe(container, 1000)
                .pipe(takeUntil(this.destroyed$))
                .subscribe(function () {
                _this.ngIf = _this.visible;
                container.classList.remove('hiding');
            });
            this.animatedIfOnHide.emit();
        }
    };
    /**
     * Shows the element. Animation is performed through css on the container
     */
    /**
     * Shows the element. Animation is performed through css on the container
     * @private
     * @return {?}
     */
    AnimatedIfDirective.prototype.show = /**
     * Shows the element. Animation is performed through css on the container
     * @private
     * @return {?}
     */
    function () {
        this.ngIf = true;
        /** @type {?} */
        var container = this.getContainer();
        if (!!container) {
            container.classList.remove('hiding');
            container.classList.add('showing');
            animationEndSafe(container, 1000)
                .pipe(takeUntil(this.destroyed$))
                .subscribe(function () {
                container.classList.remove('showing');
            });
            this.animatedIfOnShow.emit();
        }
    };
    /**
     * @return {?}
     */
    AnimatedIfDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyed$.next();
        this.destroyed$.complete();
    };
    AnimatedIfDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erAnimatedIf]'
                },] }
    ];
    /** @nocollapse */
    AnimatedIfDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: TemplateRef }
    ]; };
    AnimatedIfDirective.propDecorators = {
        animatedIfOnShow: [{ type: Output }],
        animatedIfOnHide: [{ type: Output }],
        erAnimatedIf: [{ type: Input }]
    };
    return AnimatedIfDirective;
}(NgIf));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AnimateDirective = /** @class */ (function () {
    function AnimateDirective(el) {
        this.el = el;
        this._animations = [
            'fadeIn',
            'fadeInLeft',
            'fadeInRight',
            'fadeInUp',
            'fadeInDown',
            'zoomIn',
            'zoomInLeft',
            'zoomInRight',
            'zoomInUp',
            'slideInDown',
            'slideInLeft',
            'slideInRight',
            'slideInUp'
        ];
    }
    /**
     * @return {?}
     */
    AnimateDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var classes = 'animated ';
        if (this.animation) {
            classes += this.animation;
        }
        else {
            classes += this._animations[CommonsUtils.getRandomNumber(this._animations.length - 1)];
        }
        DomUtils.addClasses(this.el.nativeElement, classes);
    };
    AnimateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erAnimate]'
                },] }
    ];
    /** @nocollapse */
    AnimateDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    AnimateDirective.propDecorators = {
        animation: [{ type: Input, args: ['erAnimate',] }]
    };
    return AnimateDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DynaTemplateDirective = /** @class */ (function (_super) {
    __extends(DynaTemplateDirective, _super);
    function DynaTemplateDirective(viewContainerRef, el, renderer) {
        var _this = _super.call(this) || this;
        _this.viewContainerRef = viewContainerRef;
        _this.el = el;
        _this.renderer = renderer;
        return _this;
    }
    /**
     * @return {?}
     */
    DynaTemplateDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (CommonsUtils.isEmptyString(this.template)) {
            this.template = this.el.nativeElement.innerHTML;
        }
        if (CommonsUtils.isEmptyString(this.template)) {
            return;
        }
        this.template = this.template.replace(/\[\[/g, '{{');
        this.template = this.template.replace(/]]/g, '}}');
        this.componentRef = DynaComponentUtils.createComponentByTemplate(this.viewContainerRef, this.template);
        /** @type {?} */
        var parent = this.el.nativeElement.parentNode;
        this.renderer.removeChild(parent, this.el.nativeElement);
    };
    /**
     * @return {?}
     */
    DynaTemplateDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnDestroy.call(this);
        if (this.componentRef) {
            this.componentRef.destroy();
            this.componentRef = null;
        }
    };
    DynaTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erDynaTemplate]',
                },] }
    ];
    /** @nocollapse */
    DynaTemplateDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    DynaTemplateDirective.propDecorators = {
        template: [{ type: Input, args: ['erDynaTemplate',] }],
        context: [{ type: Input }]
    };
    return DynaTemplateDirective;
}(BaseDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FocusHighlightDirective = /** @class */ (function (_super) {
    __extends(FocusHighlightDirective, _super);
    function FocusHighlightDirective(el) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.defaultBgColor = 'yellow';
        return _this;
    }
    /**
     * @return {?}
     */
    FocusHighlightDirective.prototype.onMouseEnter = /**
     * @return {?}
     */
    function () {
        this.highlight(this.bgColor || this.defaultBgColor);
    };
    /**
     * @return {?}
     */
    FocusHighlightDirective.prototype.onMouseLeave = /**
     * @return {?}
     */
    function () {
        this.highlight(null);
    };
    /**
     * @private
     * @param {?} color
     * @return {?}
     */
    FocusHighlightDirective.prototype.highlight = /**
     * @private
     * @param {?} color
     * @return {?}
     */
    function (color) {
        this.el.nativeElement.style.backgroundColor = color;
    };
    FocusHighlightDirective.decorators = [
        { type: Directive, args: [{ selector: '[erFocusHighlight]' },] }
    ];
    /** @nocollapse */
    FocusHighlightDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    FocusHighlightDirective.propDecorators = {
        bgColor: [{ type: Input }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }]
    };
    return FocusHighlightDirective;
}(BaseDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HighlightDirective = /** @class */ (function (_super) {
    __extends(HighlightDirective, _super);
    function HighlightDirective(el) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.searchTerm = undefined;
        _this.caseSensitive = true;
        _this.viewRendered = false;
        _this.WRAPPER_TOKEN = '==--==##';
        return _this;
    }
    Object.defineProperty(HighlightDirective.prototype, "caseSensitivity", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.caseSensitive ? '' : 'i';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    HighlightDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.highlightSearchTerm();
    };
    /**
     * @return {?}
     */
    HighlightDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.highlightSearchTerm();
    };
    /**
     * @return {?}
     */
    HighlightDirective.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.viewRendered = true;
    };
    /**
     * @return {?}
     */
    HighlightDirective.prototype.highlightSearchTerm = /**
     * @return {?}
     */
    function () {
        if (!this.searchTerm) {
            if (this.viewRendered) {
                this.removePreviouslyMarkedTextInNode();
            }
            return;
        }
        if (this.el.nativeElement) {
            this.removePreviouslyMarkedTextInNode();
            this.markMatchedTextTokens(this.el.nativeElement);
        }
    };
    /**
     * @private
     * @param {?} htmlNode
     * @return {?}
     */
    HighlightDirective.prototype.markMatchedTextTokens = /**
     * @private
     * @param {?} htmlNode
     * @return {?}
     */
    function (htmlNode) {
        var _this = this;
        /** @type {?} */
        var _searchTerm = this.getSearchTerm();
        /** @type {?} */
        var searchRegex = new RegExp(_searchTerm, 'gmi');
        /** @type {?} */
        var _searchTermUniqueTokens = this.getUniqueTokenWrappedSearchTerm();
        /** @type {?} */
        var searchRegexUniqueTokens = new RegExp(_searchTermUniqueTokens, 'gmi');
        this.traverseHtmlElementsTree(htmlNode, function (e) {
            _this.traverseNodesInElement(htmlNode.childNodes, function (node) { return _this.wrapUniqueTokensAroundMatchedText(node, searchRegex); });
        });
        this.markMatchedTextAndRemoveUniqueTokens(htmlNode, searchRegexUniqueTokens);
    };
    /**
     * @private
     * @param {?} htmlNode
     * @param {?} searchRegex
     * @return {?}
     */
    HighlightDirective.prototype.markMatchedTextAndRemoveUniqueTokens = /**
     * @private
     * @param {?} htmlNode
     * @param {?} searchRegex
     * @return {?}
     */
    function (htmlNode, searchRegex) {
        var _this = this;
        if (htmlNode.innerHTML) {
            /** @type {?} */
            var innerHtml = htmlNode.innerHTML;
            /** @type {?} */
            var newHtml = innerHtml.replace(searchRegex, function (match) {
                /** @type {?} */
                var wrapperLength = _this.WRAPPER_TOKEN.length;
                /** @type {?} */
                var markedStr = match.substr(wrapperLength, match.length - (wrapperLength * 2));
                return "<mark>" + markedStr + "</mark>";
            });
            htmlNode.innerHTML = newHtml;
        }
    };
    /**
     * @private
     * @param {?} nodes
     * @param {?} visitCallback
     * @return {?}
     */
    HighlightDirective.prototype.traverseNodesInElement = /**
     * @private
     * @param {?} nodes
     * @param {?} visitCallback
     * @return {?}
     */
    function (nodes, visitCallback) {
        for (var i = 0; i < nodes.length; i++) {
            /** @type {?} */
            var node = nodes[i];
            if (node.nodeType === 3) {
                visitCallback(node);
            }
        }
    };
    /**
     * @private
     * @param {?} htmlNode
     * @param {?} searchRegex
     * @return {?}
     */
    HighlightDirective.prototype.wrapUniqueTokensAroundMatchedText = /**
     * @private
     * @param {?} htmlNode
     * @param {?} searchRegex
     * @return {?}
     */
    function (htmlNode, searchRegex) {
        /** @type {?} */
        var innerText = htmlNode.nodeValue;
        /** @type {?} */
        var newText = innerText.replace(searchRegex, this.WRAPPER_TOKEN + "$&" + this.WRAPPER_TOKEN);
        htmlNode.nodeValue = newText;
    };
    /**
     * @private
     * @param {?} currentNode
     * @param {?} visitCallback
     * @return {?}
     */
    HighlightDirective.prototype.traverseHtmlElementsTree = /**
     * @private
     * @param {?} currentNode
     * @param {?} visitCallback
     * @return {?}
     */
    function (currentNode, visitCallback) {
        if (currentNode) {
            visitCallback(currentNode);
        }
        for (var i = 0; i < currentNode.children.length; i++) {
            /** @type {?} */
            var childNode = currentNode.children[i];
            this.markMatchedTextTokens((/** @type {?} */ (childNode)));
        }
    };
    /**
     * @private
     * @return {?}
     */
    HighlightDirective.prototype.removePreviouslyMarkedTextInNode = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var node = this.el.nativeElement;
        /** @type {?} */
        var markingPattern = new RegExp('<mark>|<\/mark>', 'g');
        /** @type {?} */
        var cleanText = node.innerHTML.replace(markingPattern, '');
        node.innerHTML = cleanText;
    };
    // private highlightedNewTextInNode() {
    //   const node = this.el.nativeElement;
    //   const htmlNegativeLookaheadPattern = '(?![^<>]*>)';
    //   const searchTermPattern = this.getSearchTerm();
    //   const searchRegex = new RegExp(searchTermPattern + htmlNegativeLookaheadPattern, 'gmi');
    //   const markedText = node.innerHTML.replace(searchRegex, '<mark>$&</mark>');
    //   node.innerHTML = markedText;
    // }
    // private highlightedNewTextInNode() {
    //   const node = this.el.nativeElement;
    //   const htmlNegativeLookaheadPattern = '(?![^<>]*>)';
    //   const searchTermPattern = this.getSearchTerm();
    //   const searchRegex = new RegExp(searchTermPattern + htmlNegativeLookaheadPattern, 'gmi');
    //   const markedText = node.innerHTML.replace(searchRegex, '<mark>$&</mark>');
    //   node.innerHTML = markedText;
    // }
    /**
     * @private
     * @return {?}
     */
    HighlightDirective.prototype.getSearchTerm = 
    // private highlightedNewTextInNode() {
    //   const node = this.el.nativeElement;
    //   const htmlNegativeLookaheadPattern = '(?![^<>]*>)';
    //   const searchTermPattern = this.getSearchTerm();
    //   const searchRegex = new RegExp(searchTermPattern + htmlNegativeLookaheadPattern, 'gmi');
    //   const markedText = node.innerHTML.replace(searchRegex, '<mark>$&</mark>');
    //   node.innerHTML = markedText;
    // }
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var escapedSearchTerm = "" + this.escapeRegExp(this.searchTerm);
        /** @type {?} */
        var spaceToMultiMatchRegex = new RegExp(' ', 'gm');
        escapedSearchTerm = escapedSearchTerm.replace(spaceToMultiMatchRegex, '|');
        return escapedSearchTerm;
    };
    /**
     * @private
     * @return {?}
     */
    HighlightDirective.prototype.getUniqueTokenWrappedSearchTerm = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var escapedSearchTerm = this.escapeRegExp(this.searchTerm);
        /** @type {?} */
        var spaceToMultiMatchRegex = new RegExp(' ', 'gm');
        escapedSearchTerm = escapedSearchTerm.replace(spaceToMultiMatchRegex, this.WRAPPER_TOKEN + "|" + this.WRAPPER_TOKEN);
        escapedSearchTerm = "" + this.WRAPPER_TOKEN + escapedSearchTerm + this.WRAPPER_TOKEN;
        return escapedSearchTerm;
    };
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    HighlightDirective.prototype.escapeRegExp = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str.replace('/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g', '\\$&');
    };
    HighlightDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erHighlight]'
                },] }
    ];
    /** @nocollapse */
    HighlightDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    HighlightDirective.propDecorators = {
        searchTerm: [{ type: Input, args: ['erHighlight',] }],
        caseSensitive: [{ type: Input }]
    };
    return HighlightDirective;
}(BaseDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ObjectDiff = /** @class */ (function () {
    function ObjectDiff() {
        this.openChar = '{';
        this.closeChar = '}';
    }
    /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    ObjectDiff.diff = /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    function (obj1, obj2) {
        if (!ObjectDiff.instance) {
            ObjectDiff.instance = new ObjectDiff();
        }
        /** @type {?} */
        var diff = ObjectDiff.instance.diffOwnProperties(obj1, obj2);
        return '<pre>' + ObjectDiff.instance.formatChangesToHtml(diff) + '</pre>';
    };
    /**
     * @param {?} a
     * @param {?} b
     * @param {?} shallow
     * @param {?} isOwn
     * @return {?}
     */
    ObjectDiff.prototype.diff = /**
     * @param {?} a
     * @param {?} b
     * @param {?} shallow
     * @param {?} isOwn
     * @return {?}
     */
    function (a, b, shallow, isOwn) {
        if (a === b) {
            return this.equalObj(a);
        }
        /** @type {?} */
        var diffValue = {};
        /** @type {?} */
        var equal = true;
        if (!a) {
            a = {};
        }
        for (var key in a) {
            if ((!isOwn && key in b) || (isOwn && b && b.hasOwnProperty(key))) {
                if (a[key] === b[key]) {
                    diffValue[key] = this.equalObj(a[key]);
                }
                else {
                    if (!shallow && this.isValidAttr(a[key], b[key])) {
                        /** @type {?} */
                        var valueDiff = this.diff(a[key], b[key], shallow, isOwn);
                        if (valueDiff.changed === 'equal') {
                            diffValue[key] = this.equalObj(a[key]);
                        }
                        else {
                            equal = false;
                            diffValue[key] = valueDiff;
                        }
                    }
                    else {
                        equal = false;
                        diffValue[key] = {
                            changed: 'primitive change',
                            removed: a[key],
                            added: b[key]
                        };
                    }
                }
            }
            else {
                equal = false;
                diffValue[key] = {
                    changed: 'removed',
                    value: a[key]
                };
            }
        }
        for (var key in b) {
            if ((!isOwn && !(key in a)) || (isOwn && typeof a !== 'undefined' && !a.hasOwnProperty(key))) {
                equal = false;
                diffValue[key] = {
                    changed: 'added',
                    value: b[key]
                };
            }
        }
        if (equal) {
            return this.equalObj(a);
        }
        else {
            return {
                changed: 'object change',
                value: diffValue
            };
        }
    };
    /**
     * @param {?} a
     * @param {?} b
     * @param {?=} shallow
     * @return {?}
     */
    ObjectDiff.prototype.diffOwnProperties = /**
     * @param {?} a
     * @param {?} b
     * @param {?=} shallow
     * @return {?}
     */
    function (a, b, shallow) {
        return this.diff(a, b, shallow, true);
    };
    /**
     * @param {?} changes
     * @param {?=} shallow
     * @return {?}
     */
    ObjectDiff.prototype.formatToJsonXMLString = /**
     * @param {?} changes
     * @param {?=} shallow
     * @return {?}
     */
    function (changes, shallow) {
        /** @type {?} */
        var properties = [];
        /** @type {?} */
        var diff = changes.value;
        if (changes.changed === 'equal') {
            return this.inspect(diff, shallow);
        }
        for (var key in diff) {
            properties.push(this.formatChange(key, diff[key], shallow));
        }
        return '<span>' + this.openChar + '</span>\n<div class="diff-level">' + properties.join('<span>,</span>\n') + '\n</div><span>' + this.closeChar + '</span>';
    };
    /**
     * @param {?} obj
     * @param {?} shallow
     * @return {?}
     */
    ObjectDiff.prototype.formatToJson = /**
     * @param {?} obj
     * @param {?} shallow
     * @return {?}
     */
    function (obj, shallow) {
        return this.inspect(obj, shallow);
    };
    /**
     * @param {?} changes
     * @param {?=} shallow
     * @return {?}
     */
    ObjectDiff.prototype.formatChangesToHtml = /**
     * @param {?} changes
     * @param {?=} shallow
     * @return {?}
     */
    function (changes, shallow) {
        /** @type {?} */
        var properties = [];
        if (changes.changed === 'equal') {
            return '';
        }
        /** @type {?} */
        var diff = changes.value;
        for (var key in diff) {
            /** @type {?} */
            var changed = diff[key].changed;
            if (changed !== 'equal')
                properties.push(this.formatChange(key, diff[key], shallow, true));
        }
        return '<span>' + this.openChar + '</span>\n<div class="diff-level">' + properties.join('<span>,</span>\n') + '\n</div><span>' + this.closeChar + '</span>';
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ObjectDiff.prototype.equalObj = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return {
            changed: 'equal',
            value: obj
        };
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    ObjectDiff.prototype.isValidAttr = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        /** @type {?} */
        var typeA = typeof a;
        /** @type {?} */
        var typeB = typeof b;
        return (a && b && (typeA === 'object' || typeA === 'function') && (typeB === 'object' || typeB === 'function'));
    };
    /**
     * @param {?} key
     * @param {?} diffItem
     * @param {?} shallow
     * @param {?=} diffOnly
     * @return {?}
     */
    ObjectDiff.prototype.formatChange = /**
     * @param {?} key
     * @param {?} diffItem
     * @param {?} shallow
     * @param {?=} diffOnly
     * @return {?}
     */
    function (key, diffItem, shallow, diffOnly) {
        /** @type {?} */
        var changed = diffItem.changed;
        /** @type {?} */
        var property;
        switch (changed) {
            case 'equal':
                property = (this.stringifyObjectKey(this.escapeHTML(key)) + '<span>: </span>' + this.inspect(diffItem.value));
                break;
            case 'removed':
                property = ('<del class="diff">' + this.stringifyObjectKey(this.escapeHTML(key)) + '<span>: </span>' + this.inspect(diffItem.value) + '</del>');
                break;
            case 'added':
                property = ('<ins class="diff">' + this.stringifyObjectKey(this.escapeHTML(key)) + '<span>: </span>' + this.inspect(diffItem.value) + '</ins>');
                break;
            case 'primitive change':
                /** @type {?} */
                var prefix = this.stringifyObjectKey(this.escapeHTML(key)) + '<span>: </span>';
                property = ('<del class="diff diff-key">' + prefix + this.inspect(diffItem.removed) + '</del><span>,</span>\n' +
                    '<ins class="diff diff-key">' + prefix + this.inspect(diffItem.added) + '</ins>');
                break;
            case 'object change':
                property = shallow ? '' : (this.stringifyObjectKey(key) + '<span>: </span>' + (diffOnly ? this.formatChangesToHtml(diffItem) : this.formatToJsonXMLString(diffItem)));
                break;
        }
        return property;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ObjectDiff.prototype.stringifyObjectKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return /^[a-z0-9_$]*$/i.test(key) ?
            key :
            JSON.stringify(key);
    };
    /**
     * @param {?} string
     * @return {?}
     */
    ObjectDiff.prototype.escapeHTML = /**
     * @param {?} string
     * @return {?}
     */
    function (string) {
        return string.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    };
    /**
     * @param {?} obj
     * @param {?=} shallow
     * @return {?}
     */
    ObjectDiff.prototype.inspect = /**
     * @param {?} obj
     * @param {?=} shallow
     * @return {?}
     */
    function (obj, shallow) {
        /** @type {?} */
        var that = this;
        return _inspect('', obj, shallow);
        /**
         * @param {?} accumulator
         * @param {?} obj
         * @param {?=} shallow
         * @return {?}
         */
        function _inspect(accumulator, obj, shallow) {
            switch (typeof obj) {
                case 'object':
                    if (!obj) {
                        accumulator += 'null';
                        break;
                    }
                    if (shallow) {
                        accumulator += '[object]';
                        break;
                    }
                    /** @type {?} */
                    var keys = Object.keys(obj);
                    /** @type {?} */
                    var length_1 = keys.length;
                    if (length_1 === 0) {
                        accumulator += '<span>' + that.openChar + that.closeChar + '</span>';
                    }
                    else {
                        accumulator += '<span>' + that.openChar + '</span>\n<div class="diff-level">';
                        for (var i = 0; i < length_1; i++) {
                            /** @type {?} */
                            var key = keys[i];
                            accumulator = _inspect(accumulator + that.stringifyObjectKey(that.escapeHTML(key)) + '<span>: </span>', obj[key]);
                            if (i < length_1 - 1) {
                                accumulator += '<span>,</span>\n';
                            }
                        }
                        accumulator += '\n</div><span>' + that.closeChar + '</span>';
                    }
                    break;
                case 'string':
                    accumulator += JSON.stringify(that.escapeHTML(obj));
                    break;
                case 'undefined':
                    accumulator += 'undefined';
                    break;
                default:
                    accumulator += that.escapeHTML(String(obj));
                    break;
            }
            return accumulator;
        }
    };
    ObjectDiff.instance = undefined;
    return ObjectDiff;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JsonViewerDirective = /** @class */ (function (_super) {
    __extends(JsonViewerDirective, _super);
    function JsonViewerDirective(el, cd) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.cd = cd;
        _this.showCurrent = true;
        _this.openLevel = 2;
        _this.showDiff = false;
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    JsonViewerDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.model) {
            this.model = changes.model.currentValue;
            if (this.model) {
                Object.keys(this.model).forEach(function (key) {
                    if (_this.model[key] instanceof BehaviorSubject) {
                        _this.model[key] = _this.model[key].value;
                    }
                    else if (_this.model[key] instanceof Observable) {
                        ((/** @type {?} */ (_this.model[key])))
                            .pipe(takeUntil(_this.destroyed$))
                            .subscribe(function (v) { return _this.model[key] = v; });
                    }
                    else if (_this.showDiff) {
                        try {
                            _this.diff = ObjectDiff.diff(changes.model.previousValue, changes.model.currentValue);
                        }
                        catch (e) {
                        }
                    }
                });
            }
            this.showJson();
        }
    };
    /**
     * @return {?}
     */
    JsonViewerDirective.prototype.showJson = /**
     * @return {?}
     */
    function () {
        this.el.nativeElement.innerHTML = '';
        if (this.showCurrent) {
            /** @type {?} */
            var formatter = new JSONFormatter(this.model || {}, this.openLevel, {
                hoverPreviewEnabled: true
            });
            try {
                /** @type {?} */
                var divEle = formatter.render();
                divEle.classList.add('json-viewer');
                this.el.nativeElement.appendChild(divEle);
            }
            catch (e) {
            }
        }
        if (this.showDiff) {
            /** @type {?} */
            var divEle = document.createElement('div');
            divEle.classList.add('diff-viewer');
            divEle.innerHTML = this.diff;
            this.el.nativeElement.appendChild(divEle);
        }
    };
    JsonViewerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erJsonViewer]'
                },] }
    ];
    /** @nocollapse */
    JsonViewerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    JsonViewerDirective.propDecorators = {
        model: [{ type: Input, args: ['erJsonViewer',] }],
        showCurrent: [{ type: Input, args: ['current',] }],
        openLevel: [{ type: Input }],
        showDiff: [{ type: Input, args: ['diff',] }]
    };
    return JsonViewerDirective;
}(BaseDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MovableHandleDirective = /** @class */ (function () {
    function MovableHandleDirective(element) {
        this.element = element;
        this.movableEnabled = false;
        this.isMoving = false;
        this.isHandle = true;
    }
    MovableHandleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[movableHandle]'
                },] }
    ];
    /** @nocollapse */
    MovableHandleDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MovableHandleDirective.propDecorators = {
        movableEnabled: [{ type: HostBinding, args: ['class.movable-enabled',] }],
        isMoving: [{ type: HostBinding, args: ['class.movable-moving',] }],
        movableHandle: [{ type: Input }],
        isHandle: [{ type: HostBinding, args: ['class.movable-handle',] }]
    };
    return MovableHandleDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Position = /** @class */ (function () {
    function Position(pos) {
        this.height = null;
        this.width = null;
        if (this.containsNumberProp(pos, ['top', 'left'])) {
            this.top = ((/** @type {?} */ (pos))).top;
            this.left = ((/** @type {?} */ (pos))).left;
            if (this.containsNumberProp(pos, ['height', 'width'])) {
                this.height = ((/** @type {?} */ (pos))).height;
                this.width = ((/** @type {?} */ (pos))).width;
            }
        }
        else if (this.containsNumberProp(pos, ['clientY', 'clientX'])) {
            this.top = ((/** @type {?} */ (pos))).clientY;
            this.left = ((/** @type {?} */ (pos))).clientX;
        }
        else if (((/** @type {?} */ (pos))).changedTouches
            && ((/** @type {?} */ (pos))).changedTouches.length > 0
            && ((/** @type {?} */ (pos))).changedTouches[0]
            && this.containsNumberProp(((/** @type {?} */ (pos))).changedTouches[0], ['clientY', 'clientX'])) {
            this.top = ((/** @type {?} */ (pos))).changedTouches[0].clientY;
            this.left = ((/** @type {?} */ (pos))).changedTouches[0].clientX;
        }
    }
    Object.defineProperty(Position.prototype, "bottom", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.height === null) ? null : this.top + this.height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Position.prototype, "right", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.width === null) ? null : this.left + this.width;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} position
     * @return {?}
     */
    Position.prototype.minus = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        return new Position({
            top: (this.top - position.top),
            left: (this.left - position.left),
            height: this.height,
            width: this.width
        });
    };
    /**
     * @param {?} position
     * @return {?}
     */
    Position.prototype.plus = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        return new Position({
            top: (this.top + position.top),
            left: (this.left + position.left),
            height: this.height,
            width: this.width
        });
    };
    /**
     * @protected
     * @param {?} object
     * @param {?} props
     * @return {?}
     */
    Position.prototype.containsNumberProp = /**
     * @protected
     * @param {?} object
     * @param {?} props
     * @return {?}
     */
    function (object, props) {
        return props.every(function (prop) { return prop in object && typeof object[prop] === 'number'; });
    };
    return Position;
}());
var MovableDirective = /** @class */ (function () {
    function MovableDirective(element, cd) {
        this.element = element;
        this.cd = cd;
        this.movableConstrained = true;
        /**
         * true if moving is in progress.
         */
        this.isMoving = false;
        this.isHandle = false;
        /**
         * set class on host to indicate movable support.
         */
        this.isMovable = true;
        this.handles = [];
        /**
         * set class depending on the status.
         */
        this._movableEnabled = true;
    }
    Object.defineProperty(MovableDirective.prototype, "movableEnabled", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this._movableEnabled;
        },
        /** optional input to toggle movable status. */
        set: /**
         * optional input to toggle movable status.
         * @protected
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._movableEnabled = value;
            // propagate enabled status to handles
            if (this.handles.length > 0) {
                this.handles.forEach(function (handle) { return handle.movableEnabled = value; });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MovableDirective.prototype, "movable", {
        set: /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.movableName = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MovableDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var position = this.getStyle(this.element.nativeElement, 'position');
        if (position === 'static') {
            this.positionStyle = 'relative';
            this.cd.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    MovableDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.allHandles.changes.subscribe(function (handles) { return _this.updateQuery(handles); });
        // TODO: workaround for https://github.com/angular/angular/issues/12818 and https://github.com/angular/angular/issues/9689
        // manually trigger first update.
        this.updateQuery(this.allHandles);
    };
    /**
     * @protected
     * @param {?} handles
     * @return {?}
     */
    MovableDirective.prototype.updateQuery = /**
     * @protected
     * @param {?} handles
     * @return {?}
     */
    function (handles) {
        var _this = this;
        this.handles = handles.filter(function (handle) { return handle.movableHandle === _this.movableName; });
        // fallback to this as handle if not specified
        if (this.handles.length === 0) {
            this.isHandle = true;
        }
        // propagate enabled status to handles
        if (this.handles.length > 0) {
            this.handles.forEach(function (handle) { return handle.movableEnabled = _this.movableEnabled; });
        }
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.onMouseDown = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.startMoving(event);
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.onMouseUp = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.stopMoving();
    };
    // using document to move even pointer leaves the host (fast moving)
    // using document to move even pointer leaves the host (fast moving)
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.onMouseMove = 
    // using document to move even pointer leaves the host (fast moving)
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.moveElement(event);
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.onTouchStart = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.startMoving(event);
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.onTouchEnd = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.stopMoving();
    };
    // using document to move even pointer leaves the host (fast moving)
    // using document to move even pointer leaves the host (fast moving)
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.onTouchMove = 
    // using document to move even pointer leaves the host (fast moving)
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.moveElement(event);
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.startMoving = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isEventInHandle(event) && this.movableEnabled) {
            this.startPosition = new Position(event).minus(this.getRelativeRect(this.element.nativeElement));
            this.isMoving = true;
            if (this.handles.length > 0) {
                this.handles.forEach(function (handle) { return handle.isMoving = true; });
            }
            this.cd.detectChanges();
        }
    };
    /**
     * @protected
     * @return {?}
     */
    MovableDirective.prototype.stopMoving = /**
     * @protected
     * @return {?}
     */
    function () {
        this.isMoving = false;
        if (this.handles.length > 0) {
            this.handles.forEach(function (handle) { return handle.isMoving = false; });
        }
        this.cd.detectChanges();
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.moveElement = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isMoving) {
            /** @type {?} */
            var moved = false;
            /** @type {?} */
            var newPosition = new Position(event).minus(this.startPosition);
            if (!this.movableConstrained) {
                this.positionTop = newPosition.top;
                this.positionLeft = newPosition.left;
                moved = true;
            }
            else {
                /** @type {?} */
                var constainedByElement = this.element.nativeElement.ownerDocument.getElementById(this.movableConstraint);
                /** @type {?} */
                var constainedByAbsPos = void 0;
                if (constainedByElement) {
                    constainedByAbsPos = new Position(constainedByElement.getBoundingClientRect());
                }
                else {
                    constainedByAbsPos = this.getViewPos(this.element.nativeElement);
                }
                /** @type {?} */
                var elementAbsPos = new Position(this.element.nativeElement.getBoundingClientRect());
                /** @type {?} */
                var diffAbsToRel = elementAbsPos.minus(this.getRelativeRect(this.element.nativeElement));
                /** @type {?} */
                var newAbsPos = diffAbsToRel.plus(newPosition);
                if (newAbsPos.top >= constainedByAbsPos.top && newAbsPos.bottom <= constainedByAbsPos.bottom) {
                    this.positionTop = newPosition.top;
                    moved = true;
                }
                else {
                    if (newAbsPos.top < constainedByAbsPos.top) {
                        // max to top limit, to prevent sticking of the movable on fast move
                        this.positionTop = constainedByAbsPos.minus(diffAbsToRel).top;
                        moved = true;
                    }
                    if (newAbsPos.bottom > constainedByAbsPos.bottom) {
                        // max to bottom limit, to prevent sticking of the movable on fast move
                        this.positionTop = constainedByAbsPos.minus(diffAbsToRel).bottom - elementAbsPos.height;
                        moved = true;
                    }
                }
                if (newAbsPos.left >= constainedByAbsPos.left && newAbsPos.right <= constainedByAbsPos.right) {
                    this.positionLeft = newPosition.left;
                    moved = true;
                }
                else {
                    if (newAbsPos.left < constainedByAbsPos.left) {
                        // max to left limit, to prevent sticking of the movable on fast move
                        this.positionLeft = constainedByAbsPos.minus(diffAbsToRel).left;
                        moved = true;
                    }
                    if (newAbsPos.right > constainedByAbsPos.right) {
                        // max to right limit, to prevent sticking of the movable on fast move
                        this.positionLeft = constainedByAbsPos.minus(diffAbsToRel).right - elementAbsPos.width;
                        moved = true;
                    }
                }
            }
            if (moved) {
                // prevent selection and other side effects during moving, only when position moved, i.e. to allow buttons to be clicked
                event.preventDefault();
                event.stopPropagation();
                this.cd.detectChanges();
            }
        }
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.isEventInHandle = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var srcElement = event.target || event.srcElement;
        if (this.isHandle) {
            // check parent elements too.
            while (srcElement instanceof HTMLElement && srcElement !== this.element.nativeElement && srcElement.parentElement) {
                srcElement = srcElement.parentElement;
            }
            return this.element.nativeElement === srcElement;
        }
        else {
            return this.handles.some(function (handle) {
                // check parent elements too.
                while (srcElement instanceof HTMLElement && srcElement !== handle.element.nativeElement && srcElement.parentElement) {
                    srcElement = srcElement.parentElement;
                }
                return handle.element.nativeElement === srcElement;
            });
        }
    };
    /**
     * @protected
     * @param {?} element
     * @return {?}
     */
    MovableDirective.prototype.getRelativeRect = /**
     * @protected
     * @param {?} element
     * @return {?}
     */
    function (element) {
        return new Position({
            top: this.parseStyleInt(this.getStyle(element, 'top')) || 0,
            left: this.parseStyleInt(this.getStyle(element, 'left')) || 0,
            height: this.parseStyleInt(this.getStyle(element, 'height')) || 0,
            width: this.parseStyleInt(this.getStyle(element, 'width')) || 0
        });
    };
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    MovableDirective.prototype.parseStyleInt = /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return parseInt(value, 10);
    };
    /**
     * @protected
     * @param {?} element
     * @param {?} property
     * @return {?}
     */
    MovableDirective.prototype.getStyle = /**
     * @protected
     * @param {?} element
     * @param {?} property
     * @return {?}
     */
    function (element, property) {
        /** @type {?} */
        var view = this.getView(element);
        return view.getComputedStyle(element, null).getPropertyValue(property);
    };
    /**
     * @protected
     * @param {?} element
     * @return {?}
     */
    MovableDirective.prototype.getView = /**
     * @protected
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var view = element.ownerDocument.defaultView;
        if (!view || view.opener) {
            view = window;
        }
        return view;
    };
    /**
     * @protected
     * @param {?} element
     * @return {?}
     */
    MovableDirective.prototype.getViewPos = /**
     * @protected
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var view = this.getView(element);
        return new Position({
            top: 0,
            left: 0,
            height: view.innerHeight || element.ownerDocument.documentElement.clientHeight,
            width: view.innerWidth || element.ownerDocument.documentElement.clientWidth
        });
    };
    MovableDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[movable]'
                },] }
    ];
    /** @nocollapse */
    MovableDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    MovableDirective.propDecorators = {
        movableConstrained: [{ type: Input }],
        movableConstraint: [{ type: Input }],
        isMoving: [{ type: HostBinding, args: ['class.movable-moving',] }],
        isHandle: [{ type: HostBinding, args: ['class.movable-handle',] }],
        positionStyle: [{ type: HostBinding, args: ['style.position',] }],
        positionTop: [{ type: HostBinding, args: ['style.top.px',] }],
        positionLeft: [{ type: HostBinding, args: ['style.left.px',] }],
        isMovable: [{ type: HostBinding, args: ['class.movable',] }],
        allHandles: [{ type: ContentChildren, args: [MovableHandleDirective, { descendants: true },] }],
        _movableEnabled: [{ type: HostBinding, args: ['class.movable-enabled',] }],
        movableEnabled: [{ type: Input }],
        movable: [{ type: Input }],
        onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
        onMouseUp: [{ type: HostListener, args: ['document:mouseup', ['$event'],] }],
        onMouseMove: [{ type: HostListener, args: ['document:mousemove', ['$event'],] }],
        onTouchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
        onTouchEnd: [{ type: HostListener, args: ['document:touchend', ['$event'],] }],
        onTouchMove: [{ type: HostListener, args: ['document:touchmove', ['$event'],] }]
    };
    return MovableDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PositionDirective = /** @class */ (function () {
    function PositionDirective(el, render) {
        this.el = el;
        this.render = render;
    }
    /**
     * @return {?}
     */
    PositionDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.render.addClass(this.el.nativeElement.parentNode, 'd-flex');
        this.render.addClass(this.el.nativeElement.parentNode, 'align-items-center');
        this.render.addClass(this.el.nativeElement.parentNode, 'justify-content-center');
        this.render.addClass(this.el.nativeElement, this.positionClass || 'text-center');
    };
    PositionDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erPosition]'
                },] }
    ];
    /** @nocollapse */
    PositionDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    PositionDirective.propDecorators = {
        positionClass: [{ type: Input, args: ['erPosition',] }]
    };
    return PositionDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RemoveMeDirective = /** @class */ (function () {
    function RemoveMeDirective(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    RemoveMeDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var nativeElement = this.el.nativeElement;
        /** @type {?} */
        var parentElement = nativeElement.parentElement;
        if (!this.parentContent) {
            this.parentContent = parentElement.innerHTML;
        }
        else {
            parentElement.innerHTML = this.parentContent;
        }
        // move all children out of the element
        while (nativeElement.firstChild) {
            parentElement.insertBefore(nativeElement.firstChild, nativeElement);
        }
        // remove the empty element(the host)
        parentElement.removeChild(nativeElement);
    };
    RemoveMeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erInsideOut]'
                },] }
    ];
    /** @nocollapse */
    RemoveMeDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return RemoveMeDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SelectorDirective = /** @class */ (function (_super) {
    __extends(SelectorDirective, _super);
    function SelectorDirective(viewContainerRef) {
        var _this = _super.call(this) || this;
        _this.viewContainerRef = viewContainerRef;
        return _this;
    }
    Object.defineProperty(SelectorDirective.prototype, "hostComponent", {
        get: /**
         * @return {?}
         */
        function () {
            return this.viewContainerRef['_data'].componentView.component;
        },
        enumerable: true,
        configurable: true
    });
    SelectorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erSelector]'
                },] }
    ];
    /** @nocollapse */
    SelectorDirective.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    SelectorDirective.propDecorators = {
        id: [{ type: Input, args: ['erSelector',] }]
    };
    return SelectorDirective;
}(BaseDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var SpinnerBaseDirective = /** @class */ (function (_super) {
    __extends(SpinnerBaseDirective, _super);
    function SpinnerBaseDirective(el, renderer) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.renderer = renderer;
        _this.position = 'right';
        return _this;
    }
    /**
     * @return {?}
     */
    SpinnerBaseDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.onInit();
    };
    /**
     * @return {?}
     */
    SpinnerBaseDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.spinElement = this.createElement('span', ['spinner', this.position, 'd-none']);
        if (!this.spinnerClass) {
            this.spinnerClass = ConfigUtils.getConfig().onLoading || 'fa fa-cog fa-spin fa-spin-2x';
        }
        /** @type {?} */
        var spinnerEle = this.createElement('i', this.spinnerClass.split(' '));
        this.renderer.appendChild(this.spinElement, spinnerEle);
        this.placeSpin();
    };
    /**
     * @protected
     * @return {?}
     */
    SpinnerBaseDirective.prototype.placeSpin = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var element = this.el.nativeElement;
        if (element instanceof HTMLDivElement) {
            this.addSpin(element);
        }
        else if (element instanceof HTMLButtonElement) {
            this.appendChildSpin(element);
        }
        else if (element instanceof HTMLImageElement) {
            this.replaceWithWrapper();
        }
        else if (element instanceof HTMLUListElement) {
            this.replaceWithWrapper();
        }
        else if (element instanceof HTMLInputElement) {
            switch (element.type) {
                case 'text':
                case 'file': {
                    this.replaceWithWrapper();
                    break;
                }
                case 'checkbox':
                case 'radio':
                case 'button': {
                    this.replaceWithWrapper('span');
                    break;
                }
                default:
                    this.replaceWithWrapper();
            }
        }
        else {
            this.replaceWithWrapper();
        }
    };
    /**
     * @protected
     * @param {?} parent
     * @return {?}
     */
    SpinnerBaseDirective.prototype.appendChildSpin = /**
     * @protected
     * @param {?} parent
     * @return {?}
     */
    function (parent) {
        this.renderer.appendChild(parent, this.spinElement);
    };
    /**
     * @protected
     * @param {?} parent
     * @return {?}
     */
    SpinnerBaseDirective.prototype.addSpin = /**
     * @protected
     * @param {?} parent
     * @return {?}
     */
    function (parent) {
        this.renderer.addClass(parent, 'spin-container');
        this.renderer.removeClass(this.spinElement, this.position);
        this.renderer.addClass(this.spinElement, 'fa-2x');
        this.renderer.addClass(this.spinElement, 'center');
        this.appendChildSpin(parent);
    };
    /**
     * @protected
     * @param {?=} tag
     * @return {?}
     */
    SpinnerBaseDirective.prototype.replaceWithWrapper = /**
     * @protected
     * @param {?=} tag
     * @return {?}
     */
    function (tag) {
        if (tag === void 0) { tag = 'div'; }
        this.containerElement = this.createElement(tag, ['spin-container']);
        /** @type {?} */
        var parent = this.el.nativeElement.parentNode;
        this.renderer.insertBefore(parent, this.containerElement, this.el.nativeElement);
        this.renderer.removeChild(parent, this.el.nativeElement);
        if (tag !== 'div') {
            this.renderer.addClass(this.spinElement, 'spin-inline');
            if (this.position === 'left') {
                this.renderer.appendChild(this.containerElement, this.spinElement);
                this.renderer.appendChild(this.containerElement, this.el.nativeElement);
            }
        }
        else {
            this.renderer.appendChild(this.containerElement, this.el.nativeElement);
            this.renderer.appendChild(this.containerElement, this.spinElement);
        }
    };
    /**
     * @protected
     * @param {?} tag
     * @param {?} classNames
     * @return {?}
     */
    SpinnerBaseDirective.prototype.createElement = /**
     * @protected
     * @param {?} tag
     * @param {?} classNames
     * @return {?}
     */
    function (tag, classNames) {
        var _this = this;
        /** @type {?} */
        var element = this.renderer.createElement(tag);
        if (classNames) {
            classNames.forEach(function (className) {
                return _this.renderer.addClass(element, className);
            });
        }
        return element;
    };
    SpinnerBaseDirective.propDecorators = {
        spinnerClass: [{ type: Input }],
        position: [{ type: Input }]
    };
    return SpinnerBaseDirective;
}(BaseDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HttpSpinnerDirective = /** @class */ (function (_super) {
    __extends(HttpSpinnerDirective, _super);
    function HttpSpinnerDirective(el, renderer) {
        return _super.call(this, el, renderer) || this;
    }
    /**
     * @return {?}
     */
    HttpSpinnerDirective.prototype.onInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.$subscriptions = StatesUtils.observe(StateNames.http, this.spinnerTag)
            .subscribe(function (state) {
            if (state && state.start) {
                _this.renderer.removeClass(_this.spinElement, 'd-none');
                _this.renderer.setAttribute(_this.el.nativeElement, 'disabled', 'true');
                if (_this.containerElement) {
                    _this.renderer.setStyle(_this.el.nativeElement, 'opacity', 0.5);
                }
            }
            else {
                if (_this.spinElement) {
                    _this.renderer.addClass(_this.spinElement, 'd-none');
                    _this.renderer.removeAttribute(_this.el.nativeElement, 'disabled');
                    if (_this.containerElement) {
                        _this.renderer.setStyle(_this.el.nativeElement, 'opacity', 1);
                    }
                }
            }
        });
    };
    HttpSpinnerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erHttpState]'
                },] }
    ];
    /** @nocollapse */
    HttpSpinnerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    HttpSpinnerDirective.propDecorators = {
        spinnerTag: [{ type: Input, args: ['erHttpState',] }]
    };
    return HttpSpinnerDirective;
}(SpinnerBaseDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NotifySpinnerDirective = /** @class */ (function (_super) {
    __extends(NotifySpinnerDirective, _super);
    function NotifySpinnerDirective(el, renderer) {
        return _super.call(this, el, renderer) || this;
    }
    /**
     * @return {?}
     */
    NotifySpinnerDirective.prototype.onInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.$subscriptions =
            this.notifier
                .subscribe(function (state) {
                !!state
                    ? _this.renderer.removeClass(_this.spinElement, 'd-none')
                    : _this.renderer.addClass(_this.spinElement, 'd-none');
            });
    };
    NotifySpinnerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erNotifySpinner]'
                },] }
    ];
    /** @nocollapse */
    NotifySpinnerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    NotifySpinnerDirective.propDecorators = {
        notifier: [{ type: Input, args: ['notifySpinner',] }]
    };
    return NotifySpinnerDirective;
}(SpinnerBaseDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TagDirective = /** @class */ (function (_super) {
    __extends(TagDirective, _super);
    function TagDirective(el, render) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.render = render;
        return _this;
    }
    /**
     * @return {?}
     */
    TagDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!CommonsUtils.isEmpty(this.color)) {
            this.render.setStyle(this.el.nativeElement, 'color', this.color);
        }
        if (!CommonsUtils.isEmpty(this.bg)) {
            this.render.setStyle(this.el.nativeElement, 'background-color', this.bg);
        }
        if (CommonsUtils.isEmpty(this.color) && CommonsUtils.isEmpty(this.bg)) {
            if (!this.text) {
                this.text = this.el.nativeElement.innerHTML;
            }
            this.render.setStyle(this.el.nativeElement, 'background', ColorUtils.getColor(this.text));
            this.render.setStyle(this.el.nativeElement, 'color', 'white');
        }
        this.render.addClass(this.el.nativeElement, 'badge-pill');
        this.render.addClass(this.el.nativeElement, 'badge');
    };
    TagDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erTag]'
                },] }
    ];
    /** @nocollapse */
    TagDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    TagDirective.propDecorators = {
        text: [{ type: Input }],
        bg: [{ type: Input }],
        color: [{ type: Input }]
    };
    return TagDirective;
}(BaseDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var CoreDirectives = [
    AnimateDirective,
    AnimatedIfDirective,
    ApiDataDirective,
    TypedTemplateDirective,
    DynaTemplateDirective,
    TagDirective,
    SelectorDirective,
    PositionDirective,
    RemoveMeDirective,
    PropsBindDirective,
    MovableDirective,
    MovableHandleDirective,
    JsonViewerDirective,
    HttpSpinnerDirective,
    NotifySpinnerDirective,
    HighlightDirective,
    FocusHighlightDirective
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HttpAppConfiguredInterceptor = /** @class */ (function () {
    function HttpAppConfiguredInterceptor() {
        this.customerInterceptors = ConfigUtils.getConfig().httpInterceptors;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    HttpAppConfiguredInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        // const cloned = req.clone();
        // if (this.customerInterceptors) {
        //   this.customerInterceptors.forEach((interceptor: HttpInterceptorConfig) => {
        //     if (req && interceptor.request && RegUtils.test(req.url, interceptor.urlPatterns)) {
        //      // cloned = interceptor.request(cloned);
        //     }
        //   });
        // }
        return next.handle(req);
        // .pipe(
        //    map(response => {
        //      if (this.customerInterceptors) {
        //        this.customerInterceptors.forEach((interceptor: HttpInterceptorConfig) => {
        //          if (interceptor.response && RegUtils.test(req.url, interceptor.urlPatterns)) {
        //            interceptor.response(response);
        //          }
        //        });
        //        return response;
        //      } else {
        //        return response;
        //      }
        //    })
        // );
    };
    HttpAppConfiguredInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpAppConfiguredInterceptor.ctorParameters = function () { return []; };
    return HttpAppConfiguredInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HttpErrorHandlerInterceptor = /** @class */ (function () {
    function HttpErrorHandlerInterceptor() {
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    HttpErrorHandlerInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        return next.handle(req)
            .pipe(catchError(function (err) {
            if (err instanceof HttpErrorResponse) {
                if (err.status === 401) {
                    RouteUtils.nav(ConfigUtils.getConfig().auth.loginRouter);
                }
                else if (err.status === 403) {
                    StatesUtils.create(StateNames.notify, {
                        message: '没有操作权限！',
                        level: NotifyLevel.ERROR
                    });
                }
                else {
                    _this.errorHandler(err);
                }
            }
            else if (err instanceof TimeoutError) {
                StatesUtils.create(StateNames.notify, {
                    message: '网络访问超时！',
                    level: NotifyLevel.ERROR
                });
            }
            return throwError(err);
        }));
    };
    /**
     * @private
     * @param {?} err
     * @return {?}
     */
    HttpErrorHandlerInterceptor.prototype.errorHandler = /**
     * @private
     * @param {?} err
     * @return {?}
     */
    function (err) {
        /** @type {?} */
        var message = '';
        if (err.error instanceof Error) {
            message = err.error.message;
        }
        else {
            if (err.status === 0) {
                message = '网络链接已断开';
            }
            else if (err.status === 404) {
                message = '请求地址不存在';
            }
            else if (err.status === 500) {
                message = '服务器程序错误';
            }
            else {
                message = '数据请求错误';
            }
        }
        StatesUtils.create(StateNames.notify, {
            level: NotifyLevel.ERROR,
            message: message + ",\u9519\u8BEF\u4EE3\u7801:\u3010" + err.status + "\u3011",
            title: '网络访问失败'
        });
    };
    HttpErrorHandlerInterceptor.decorators = [
        { type: Injectable }
    ];
    return HttpErrorHandlerInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HttpJwtAuthInterceptor = /** @class */ (function () {
    function HttpJwtAuthInterceptor() {
        this.headerName = ConfigUtils.getConfig().auth.headerName;
        this.authScheme = ConfigUtils.getConfig().auth.authScheme;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    HttpJwtAuthInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _a;
        /** @type {?} */
        var currentUser = AuthUtils.getCurrentUser();
        if (currentUser && currentUser.jwtToken) {
            //  if (JwtUtils.isValid(currentUser.jwtToken))
            {
                req = req.clone({
                    setHeaders: (_a = {},
                        _a[this.headerName] = "" + this.authScheme + currentUser.jwtToken,
                        _a)
                });
            }
        }
        return next.handle(req);
    };
    HttpJwtAuthInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpJwtAuthInterceptor.ctorParameters = function () { return []; };
    return HttpJwtAuthInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateSyncUtils = /** @class */ (function () {
    function DateSyncUtils() {
    }
    /**
     * @return {?}
     */
    DateSyncUtils.start = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var timeServer = ConfigUtils.getConfig().api.servers.timer;
        if (timeServer) {
            HttpUtils.request({
                uri: timeServer.uri,
                observe: 'events'
            })
                .pipe(first())
                .subscribe(function (response) {
                /** @type {?} */
                var dates = response.headers && response.headers.getAll('Date');
                if (dates) {
                    LogUtils.info('DateSyncUtils', '同步服务器时间', dates);
                    if (dates && dates.length > 0) {
                        DateSyncUtils.updateLocalDate(dates[0]);
                    }
                }
            });
        }
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DateSyncUtils.updateLocalDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var d = new Date(date);
        DateSyncUtils.timeServer$.next(d);
        DateSyncUtils.stopSyncSchedule();
        DateSyncUtils.startRefreshSchedule();
        DateSyncUtils.startSyncSchedule();
    };
    /**
     * @private
     * @return {?}
     */
    DateSyncUtils.stopSyncSchedule = /**
     * @private
     * @return {?}
     */
    function () {
        if (DateSyncUtils.interval) {
            clearInterval(DateSyncUtils.interval);
        }
    };
    /**
     * @private
     * @return {?}
     */
    DateSyncUtils.startRefreshSchedule = /**
     * @private
     * @return {?}
     */
    function () {
        DateSyncUtils.interval = setInterval(function () {
            /** @type {?} */
            var d = DateSyncUtils.timeServer$.value;
            d.setSeconds(DateSyncUtils.timeServer$.value.getSeconds() + 1);
            DateSyncUtils.timeServer$.next(d);
            StatesUtils.create(StateNames.serverTime, { date: d }, true);
        }, 1000);
    };
    /**
     * @private
     * @return {?}
     */
    DateSyncUtils.startSyncSchedule = /**
     * @private
     * @return {?}
     */
    function () {
        setInterval(function () {
            DateSyncUtils.start();
        }, 1000 * 60 * 15);
    };
    DateSyncUtils.timeServer$ = new BehaviorSubject(new Date());
    DateSyncUtils.interval = undefined;
    return DateSyncUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HttpLogInterceptor = /** @class */ (function () {
    function HttpLogInterceptor(logService) {
        this.logService = logService;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    HttpLogInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        /** @type {?} */
        var started = Date.now();
        return next.handle(req)
            .pipe(tap(function (event) {
            if (event instanceof HttpResponse) {
                /** @type {?} */
                var elapsed = Date.now() - started;
                StatesUtils.set(StateNames.httpTimer, { elapsed: elapsed });
                /** @type {?} */
                var dates = event.headers.getAll('Date');
                if (dates && dates.length > 0) {
                    DateSyncUtils.updateLocalDate(dates[0]);
                }
            }
        }), catchError(function (err) {
            if (!ConfigUtils.getConfig().isProduction) {
                _this.logService.debug(_this, '网络请求失败！', req.url, err);
            }
            return throwError(err);
        }));
    };
    HttpLogInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpLogInterceptor.ctorParameters = function () { return [
        { type: LogService }
    ]; };
    return HttpLogInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HttpProgressInterceptor = /** @class */ (function () {
    function HttpProgressInterceptor() {
        this.inProcess = 0;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    HttpProgressInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        return next
            .handle(req).pipe(tap(function (event) {
            if (event.type === HttpEventType.Sent) {
                StatesUtils.update(StateNames.rootHttp, { inProcess: ++_this.inProcess, request: req });
            }
            else if (event instanceof HttpResponse) {
                StatesUtils.update(StateNames.rootHttp, { inProcess: --_this.inProcess, request: req });
            }
        }), catchError(function (err) {
            StatesUtils.update(StateNames.rootHttp, { inProcess: --_this.inProcess, request: req });
            return throwError(err);
        }));
    };
    HttpProgressInterceptor.decorators = [
        { type: Injectable }
    ];
    return HttpProgressInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HttpTimeoutInterceptor = /** @class */ (function () {
    function HttpTimeoutInterceptor() {
        this.timeout = ConfigUtils.getConfig().httpTimeout || 5000;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    HttpTimeoutInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        /** @type {?} */
        var reqTimeout = Number(req.headers.get('timeout')) || this.timeout;
        return next.handle(req)
            .pipe(timeout(reqTimeout));
    };
    HttpTimeoutInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpTimeoutInterceptor.ctorParameters = function () { return []; };
    return HttpTimeoutInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} bounds
 * @return {?}
 */
function esBoundInterceptor(bounds) {
    return function (req) {
        /** @type {?} */
        var must = [];
        /** @type {?} */
        var query = CommonsUtils.get(req, 'body.query');
        if (query) {
            /** @type {?} */
            var bool = CommonsUtils.get(req, 'body.query.bool');
            if (!bool) {
                must.push(query);
            }
        }
        must = CommonsUtils.get(req, 'body.query.bool.must', must);
        if (!CommonsUtils.isArray(must)) {
            must = [must];
        }
        /** @type {?} */
        var _bounds = bounds;
        if (!CommonsUtils.isArray(bounds)) {
            _bounds = [bounds];
        }
        _bounds.forEach(function (bound) {
            if (must.indexOf(bound) === -1) {
                if (bound.toJSON) {
                    must.push(bound.toJSON());
                }
                else if (CommonsUtils.isFunction(bound)) {
                    must.push(bound(req));
                }
                else if (CommonsUtils.isJson(bound)) {
                    must.push(bound);
                }
            }
        });
        CommonsUtils.set(req, 'body.query.bool.must', must);
        console.log(must);
        return req;
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function credentialHttpRequestInterceptor() {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var CoreInterceptors = [
    { provide: HTTP_INTERCEPTORS, useClass: HttpErrorHandlerInterceptor, multi: true },
    { provide: HTTP_INTERCEPTORS, useClass: HttpProgressInterceptor, multi: true },
    { provide: HTTP_INTERCEPTORS, useClass: HttpLogInterceptor, multi: true },
    { provide: HTTP_INTERCEPTORS, useClass: HttpTimeoutInterceptor, multi: true },
    { provide: HTTP_INTERCEPTORS, useClass: HttpJwtAuthInterceptor, multi: true },
    { provide: HTTP_INTERCEPTORS, useClass: HttpAppConfiguredInterceptor, multi: true }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var KeyValuePipe = /** @class */ (function () {
    function KeyValuePipe() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    KeyValuePipe.prototype.transform = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var lst = [];
        Object.keys(data).map(function (key) {
            lst.push({ key: key, value: data[key] });
        });
        return lst;
    };
    KeyValuePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'erKeyValue'
                },] }
    ];
    return KeyValuePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Base64DecodePipe = /** @class */ (function () {
    function Base64DecodePipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    Base64DecodePipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return decodeURIComponent(atob(value));
    };
    Base64DecodePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'base64Decode'
                },] }
    ];
    return Base64DecodePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommaSeparatedNumberPipe = /** @class */ (function () {
    function CommaSeparatedNumberPipe() {
    }
    /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    CommaSeparatedNumberPipe.prototype.transform = /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    function (value, args) {
        /** @type {?} */
        var reg = /(^[+-]?\d+)(\d{3})/;
        /** @type {?} */
        var n = value.toString();
        while (reg.test(n)) {
            n = n.replace(reg, '$1' + ',' + '$2');
        }
        return n;
    };
    CommaSeparatedNumberPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'erCommaSeparatedNumber'
                },] }
    ];
    return CommaSeparatedNumberPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DataItemsPipe = /** @class */ (function () {
    function DataItemsPipe() {
    }
    /**
     * @param {?} items
     * @param {?} config
     * @return {?}
     */
    DataItemsPipe.prototype.transform = /**
     * @param {?} items
     * @param {?} config
     * @return {?}
     */
    function (items, config) {
        if (!items) {
            return items;
        }
        return DataItemUtils.transItems(items, config || {});
    };
    DataItemsPipe.decorators = [
        { type: Pipe, args: [{ name: 'erDataItems' },] }
    ];
    return DataItemsPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DefaultPipe = /** @class */ (function () {
    function DefaultPipe() {
    }
    /**
     * @param {?} data
     * @param {?} dft
     * @return {?}
     */
    DefaultPipe.prototype.transform = /**
     * @param {?} data
     * @param {?} dft
     * @return {?}
     */
    function (data, dft) {
        return !!data ? data : dft;
    };
    DefaultPipe.decorators = [
        { type: Pipe, args: [{ name: 'erDefault' },] }
    ];
    return DefaultPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var emojiDictionary = [
    { patterns: [':)', ':-)', '=)'], unicode: '😃' },
    { patterns: [':D', ':-D', '=D'], unicode: '😀' },
    { patterns: [':(', ':-(', '=('], unicode: '🙁' },
    { patterns: [':|', ':-|', '=|'], unicode: '😐' },
    { patterns: [':*', ':-*', '=*'], unicode: '😙' },
    { patterns: ['T_T', 'T.T'], unicode: '😭' },
    { patterns: [':O', ':-O', '=O', ':o', ':-o', '=o'], unicode: '😮' },
    { patterns: [':P', ':-P', '=P', ':p', ':-p', '=p'], unicode: '😋' },
    { patterns: ['>.<'], unicode: '😣' },
    { patterns: ['@.@'], unicode: '😵' },
    { patterns: ['*.*'], unicode: '😍' },
    { patterns: ['<3'], unicode: '❤️' },
    { patterns: ['^.^'], unicode: '😊' },
    { patterns: [':+1'], unicode: '👍' },
    { patterns: [':-1'], unicode: '👎' }
];
var EmojifyPipe = /** @class */ (function () {
    function EmojifyPipe() {
    }
    /**
     * @param {?} message
     * @param {?=} pipeEnabled
     * @return {?}
     */
    EmojifyPipe.prototype.transform = /**
     * @param {?} message
     * @param {?=} pipeEnabled
     * @return {?}
     */
    function (message, pipeEnabled) {
        if (pipeEnabled === void 0) { pipeEnabled = true; }
        if (pipeEnabled && message && message.length > 1) {
            emojiDictionary.forEach(function (emoji) {
                emoji.patterns.forEach(function (pattern) {
                    message = message.replace(pattern, emoji.unicode);
                });
            });
        }
        return message;
    };
    EmojifyPipe.decorators = [
        { type: Pipe, args: [{ name: 'erEmojify' },] }
    ];
    return EmojifyPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FilterPipe = /** @class */ (function () {
    function FilterPipe() {
    }
    /**
     * @param {?} arr
     * @param {?} criteria
     * @param {?=} matcher
     * @return {?}
     */
    FilterPipe.prototype.transform = /**
     * @param {?} arr
     * @param {?} criteria
     * @param {?=} matcher
     * @return {?}
     */
    function (arr, criteria, matcher) {
        if (!criteria)
            return arr;
        return arr.filter(function (value) {
            if (CommonsUtils.isJson(value)) {
                return value[criteria.key] && value[criteria.key].toLowerCase().indexOf(criteria.value.toLowerCase()) > -1;
            }
            else
                return value === criteria;
        });
    };
    FilterPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'erFilter'
                },] }
    ];
    return FilterPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HighLightPipe = /** @class */ (function () {
    function HighLightPipe() {
    }
    /**
     * @param {?} text
     * @param {...?} keywords
     * @return {?}
     */
    HighLightPipe.prototype.transform = /**
     * @param {?} text
     * @param {...?} keywords
     * @return {?}
     */
    function (text) {
        var keywords = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            keywords[_i - 1] = arguments[_i];
        }
        if (text && keywords.length > 0) {
            keywords.forEach(function (keyword) {
                text = text.replace(new RegExp('(' + keyword + ')', 'gi'), '<span class="keyword">$1</span>');
            });
        }
        return text;
    };
    HighLightPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'erHighLight'
                },] }
    ];
    return HighLightPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IdCardPipe = /** @class */ (function () {
    function IdCardPipe() {
    }
    /**
     * @param {?} idCardNo
     * @param {?=} attr
     * @return {?}
     */
    IdCardPipe.prototype.transform = /**
     * @param {?} idCardNo
     * @param {?=} attr
     * @return {?}
     */
    function (idCardNo, attr) {
        /** @type {?} */
        var attrs = IdCardUtils.parse(idCardNo);
        if (attrs && Object.keys(attrs).length > 0) {
            return attr ? attrs[attr] : attrs;
        }
        else {
            return '';
        }
    };
    IdCardPipe.decorators = [
        { type: Pipe, args: [{ name: 'idCard' },] }
    ];
    return IdCardPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JoinPipe = /** @class */ (function () {
    function JoinPipe() {
    }
    /**
     * @param {?} arr
     * @param {?=} seperator
     * @return {?}
     */
    JoinPipe.prototype.transform = /**
     * @param {?} arr
     * @param {?=} seperator
     * @return {?}
     */
    function (arr, seperator) {
        return CommonsUtils.join(arr, seperator);
    };
    JoinPipe.decorators = [
        { type: Pipe, args: [{ name: 'join' },] }
    ];
    return JoinPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LinkifyPipe = /** @class */ (function () {
    function LinkifyPipe() {
    }
    /**
     * @param {?} text
     * @param {?=} pipeEnabled
     * @return {?}
     */
    LinkifyPipe.prototype.transform = /**
     * @param {?} text
     * @param {?=} pipeEnabled
     * @return {?}
     */
    function (text, pipeEnabled) {
        if (pipeEnabled === void 0) { pipeEnabled = true; }
        if (pipeEnabled && !CommonsUtils.isEmpty(text)) {
            return this.linkify(text);
        }
        return text;
    };
    /**
     * @private
     * @param {?} plainText
     * @param {?=} pipeEnabled
     * @return {?}
     */
    LinkifyPipe.prototype.linkify = /**
     * @private
     * @param {?} plainText
     * @param {?=} pipeEnabled
     * @return {?}
     */
    function (plainText, pipeEnabled) {
        if (pipeEnabled === void 0) { pipeEnabled = true; }
        if (pipeEnabled) {
            /** @type {?} */
            var replacedText = void 0;
            /** @type {?} */
            var replacePattern1 = void 0;
            /** @type {?} */
            var replacePattern2 = void 0;
            /** @type {?} */
            var replacePattern3 = void 0;
            // URLs starting with http://, https://, or ftp://
            replacePattern1 = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
            replacedText = plainText.replace(replacePattern1, '<a href="$1" target=`${options.target|"_blank"}`>$1</a>');
            // URLs starting with "www." (without // before it, or it'd re-link the ones done above).
            replacePattern2 = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
            replacedText = replacedText.replace(replacePattern2, '$1<a href="http://$2" target=`${options.target|"_blank"}`>$2</a>');
            // Change email addresses to mailto:: links.
            replacePattern3 = /(([a-zA-Z0-9\-\_\.])+@[a-zA-Z\_]+?(\.[a-zA-Z]{2,6})+)/gim;
            replacedText = replacedText.replace(replacePattern3, '<a href="mailto:$1">$1</a>');
            return replacedText;
        }
        return plainText;
    };
    LinkifyPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'erLinkify',
                    pure: false
                },] }
    ];
    return LinkifyPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var KeysPipe = /** @class */ (function () {
    function KeysPipe() {
    }
    /**
     * @param {?} src
     * @return {?}
     */
    KeysPipe.prototype.transform = /**
     * @param {?} src
     * @return {?}
     */
    function (src) {
        return Object.keys(src);
    };
    KeysPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'erKeys'
                },] }
    ];
    return KeysPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NumberToTextPipe = /** @class */ (function () {
    function NumberToTextPipe() {
        this.numbers = {
            0: '',
            '00': '',
            '000': '',
            1: 'one',
            2: 'two',
            3: 'three',
            4: 'four',
            5: 'five',
            6: 'six',
            7: 'seven',
            8: 'eight',
            9: 'nine',
            10: 'ten',
            11: 'eleven',
            12: 'twelve',
            13: 'thirteen',
            14: 'fourteen',
            15: 'fifteen',
            16: 'sixteen',
            17: 'seventeen',
            18: 'eighteen',
            19: 'nineteen',
            20: 'twenty',
            30: 'thirty',
            40: 'forty',
            50: 'fifty',
            60: 'sixty',
            70: 'seventy',
            80: 'eighty',
            90: 'ninety'
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    NumberToTextPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var numberWords = [];
        if (typeof value !== 'string') {
            value = value.toString();
        }
        if (value.indexOf(',') > -1) {
            /** @type {?} */
            var re = new RegExp(',', 'g');
            value = value.replace(re, '');
        }
        /** @type {?} */
        var numLength = value.length;
        /** @type {?} */
        var numberString = '';
        /** @type {?} */
        var divide = Math.ceil(value.length / 3);
        /** @type {?} */
        var splits = [];
        for (var i = 0; i < divide; i++) {
            if (value.length % 3 === 2) {
                splits.push([value[0], value[1]]);
                value = value.substring(2);
            }
            else if (value.length % 3 === 1) {
                splits.push([value[0]]);
                value = value.substring(1);
            }
            else {
                splits.push([value[0], value[1], value[2]]);
                value = value.substring(3);
            }
        }
        switch (divide) {
            case 2: {
                numberWords = ['thousand'];
                break;
            }
            case 3: {
                numberWords = ['million', 'thousand'];
                break;
            }
            case 4: {
                numberWords = ['billion', 'million', 'thousand'];
                break;
            }
            case 5: {
                numberWords = ['trillion', 'billion', 'million', 'thousand'];
                break;
            }
        }
        for (var i = 0; i < splits.length; i++) {
            if (numberWords.length > 0) {
                switch (splits[i].length) {
                    case 1:
                        numberString += this.numbers[splits[i][0]] + ' ' + numberWords[0];
                        break;
                    case 2:
                        if (this.numbers[splits[i][0].toString() + splits[i][1].toString()] !== undefined) {
                            numberString += this.numbers[splits[i][0].toString() + splits[i][1].toString()] + ' ' + numberWords[0];
                        }
                        else {
                            numberString += this.numbers[splits[i][0] + '0'] + ' ' + this.numbers[splits[i][1]] + ' ' + numberWords[0];
                        }
                        break;
                    case 3:
                        if (this.numbers[splits[i][0].toString() + splits[i][1].toString() + splits[i][2].toString()] !== undefined) {
                            numberString = numberString.substring(0, numberString.length - 1);
                            break;
                        }
                        else if (this.numbers[splits[i][1].toString() + splits[i][2].toString()] !== undefined) {
                            //Need to properly handle spaces when its double 00's
                            if (splits[i][1].toString() + splits[i][2].toString() === '00') {
                                numberString += this.numbers[splits[i][0]] + ' hundred' + ' ' + numberWords[0];
                            }
                            else {
                                numberString += this.numbers[splits[i][0]] + ' hundred ' + this.numbers[splits[i][1].toString() + splits[i][2].toString()] + ' ' + numberWords[0];
                            }
                        }
                        else {
                            numberString += this.numbers[splits[i][0]] + ' hundred ' + this.numbers[splits[i][1] + '0'] + ' ' + this.numbers[splits[i][2]] + ' ' + numberWords[0];
                        }
                        break;
                }
                numberWords.shift();
                numberString += ' ';
            }
            else {
                switch (splits[i].length) {
                    case 1:
                        if (splits[i][0] === '0') {
                            numberString += 'zero';
                        }
                        else {
                            numberString += this.numbers[splits[i][0]];
                        }
                        break;
                    case 2:
                        if (this.numbers[splits[i][0].toString() + splits[i][1].toString()] !== undefined) {
                            numberString += this.numbers[splits[i][0].toString() + splits[i][1].toString()];
                        }
                        else {
                            numberString += this.numbers[splits[i][0] + '0'] + ' ' + this.numbers[splits[i][1]];
                        }
                        break;
                    case 3:
                        if (this.numbers[splits[i][0].toString() + splits[i][1].toString() + splits[i][2].toString()] !== undefined) {
                            numberString = numberString.substring(0, numberString.length - 1);
                            break;
                        }
                        else if (this.numbers[splits[i][1].toString() + splits[i][2].toString()] !== undefined) {
                            numberString += this.numbers[splits[i][0]] + ' hundred ' + this.numbers[splits[i][1].toString() + splits[i][2].toString()];
                        }
                        else {
                            numberString += this.numbers[splits[i][0]] + ' hundred ' + this.numbers[splits[i][1] + '0'] + ' ' + this.numbers[splits[i][2]];
                        }
                        break;
                }
            }
        }
        return numberString;
    };
    NumberToTextPipe.decorators = [
        { type: Pipe, args: [{ name: 'erNumberToText' },] }
    ];
    return NumberToTextPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ObservablePipe = /** @class */ (function () {
    function ObservablePipe() {
    }
    /**
     * @param {?} input
     * @return {?}
     */
    ObservablePipe.prototype.transform = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        return of(input);
    };
    ObservablePipe.decorators = [
        { type: Pipe, args: [{ name: 'observable', pure: false },] }
    ];
    return ObservablePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var OrderByPipe = /** @class */ (function () {
    function OrderByPipe() {
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    OrderByPipe._orderByComparator = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        try { // HACK cuz error when delete entire textbox of number and it compares
            if ((isNaN(parseFloat(a)) || !isFinite(a)) || (isNaN(parseFloat(b)) || !isFinite(b))) {
                //Isn't a number so lowercase the string to properly compare
                if (a.toLowerCase() < b.toLowerCase()) {
                    return -1;
                }
                if (a.toLowerCase() > b.toLowerCase()) {
                    return 1;
                }
            }
            else {
                // Parse strings as numbers to compare properly
                if (parseFloat(a) < parseFloat(b)) {
                    return -1;
                }
                if (parseFloat(a) > parseFloat(b)) {
                    return 1;
                }
            }
        }
        catch (e) {
            return 1;
        }
        return 0; //equal each other
    };
    /* filter property by string 'parent.child.item.orderKey' */
    /* filter property by string 'parent.child.item.orderKey' */
    /**
     * @param {?} obj
     * @param {?} propertyPath
     * @return {?}
     */
    OrderByPipe._getDeepValue = /* filter property by string 'parent.child.item.orderKey' */
    /**
     * @param {?} obj
     * @param {?} propertyPath
     * @return {?}
     */
    function (obj, propertyPath) {
        /** @type {?} */
        var pathList = propertyPath.split('??');
        if (pathList.length > 0) {
            /** @type {?} */
            var index = 0;
            /** @type {?} */
            var flag = false;
            /** @type {?} */
            var result = '';
            while (!flag) {
                result = getDeepValueByPath(obj, pathList[index]);
                if (result !== undefined) {
                    flag = true;
                }
                else {
                    index++;
                    if (pathList.length === index) {
                        flag = true;
                    }
                }
            }
            return result;
        }
        else {
            return getDeepValueByPath(obj, propertyPath);
        }
        /**
         * @param {?} obj
         * @param {?} path
         * @return {?}
         */
        function getDeepValueByPath(obj, path) {
            path = path.split('.');
            if (path.length > 0) {
                for (var i = 0; i < path.length; i++) {
                    if (obj[path[i]] !== undefined) {
                        obj = obj[path[i]];
                    }
                    else {
                        obj = undefined;
                        break;
                    }
                }
                return obj;
            }
            else {
                return obj[path];
            }
        }
    };
    /**
     * @param {?} input
     * @param {?} __1
     * @return {?}
     */
    OrderByPipe.prototype.transform = /**
     * @param {?} input
     * @param {?} __1
     * @return {?}
     */
    function (input, _a) {
        var _b = __read(_a, 1), _c = _b[0], config = _c === void 0 ? '+' : _c;
        if (!Array.isArray(input)) {
            return input;
        }
        if (!Array.isArray(config) || (Array.isArray(config) && config.length === 1)) {
            /** @type {?} */
            var propertyToCheck = !Array.isArray(config) ? config : config[0];
            /** @type {?} */
            var desc_1 = propertyToCheck.substr(0, 1) === '-';
            //Basic array
            if (!propertyToCheck || propertyToCheck === '-' || propertyToCheck === '+') {
                return !desc_1 ? input.sort() : input.sort().reverse();
            }
            else {
                /** @type {?} */
                var property_1 = propertyToCheck.substr(0, 1) === '+' || propertyToCheck.substr(0, 1) === '-'
                    ? propertyToCheck.substr(1)
                    : propertyToCheck;
                return input.sort(function (a, b) {
                    return !desc_1
                        ? OrderByPipe._orderByComparator(OrderByPipe._getDeepValue(a, property_1), OrderByPipe._getDeepValue(b, property_1))
                        : -OrderByPipe._orderByComparator(OrderByPipe._getDeepValue(a, property_1), OrderByPipe._getDeepValue(b, property_1));
                });
            }
        }
        else {
            //Loop over property of the array in order and sort
            return input.sort(function (a, b) {
                for (var i = 0; i < config.length; i++) {
                    /** @type {?} */
                    var desc = config[i].substr(0, 1) === '-';
                    /** @type {?} */
                    var property = config[i].substr(0, 1) === '+' || config[i].substr(0, 1) === '-'
                        ? config[i].substr(1)
                        : config[i];
                    /** @type {?} */
                    var comparison = !desc
                        ? OrderByPipe._orderByComparator(OrderByPipe._getDeepValue(a, property), OrderByPipe._getDeepValue(b, property))
                        : -OrderByPipe._orderByComparator(OrderByPipe._getDeepValue(a, property), OrderByPipe._getDeepValue(b, property));
                    //Don't return 0 yet in case of needing to sort by next property
                    if (comparison !== 0) {
                        return comparison;
                    }
                }
                return 0; //equal each other
            });
        }
    };
    OrderByPipe.decorators = [
        { type: Pipe, args: [{ name: 'orderBy', pure: false },] }
    ];
    return OrderByPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PercentPipe = /** @class */ (function () {
    function PercentPipe() {
    }
    /**
     * @param {?} num
     * @return {?}
     */
    PercentPipe.prototype.transform = /**
     * @param {?} num
     * @return {?}
     */
    function (num) {
        if (num && CommonsUtils.isNumber(num)) {
            return num * 100 + "%";
        }
        return num;
    };
    PercentPipe.decorators = [
        { type: Pipe, args: [{ name: 'erPercent' },] }
    ];
    return PercentPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SafeHtmlPipe = /** @class */ (function () {
    function SafeHtmlPipe(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} content
     * @param {?=} type
     * @return {?}
     */
    SafeHtmlPipe.prototype.transform = /**
     * @param {?} content
     * @param {?=} type
     * @return {?}
     */
    function (content, type) {
        if (!content) {
            return '';
        }
        switch (type) {
            case 'url':
                return this.sanitizer.bypassSecurityTrustUrl(content);
            case 'resource':
                return this.sanitizer.bypassSecurityTrustResourceUrl(content);
            case 'style':
                return this.sanitizer.bypassSecurityTrustStyle(content);
            case 'script':
                return this.sanitizer.bypassSecurityTrustScript(content);
            default:
                return this.sanitizer.bypassSecurityTrustHtml(content);
        }
    };
    SafeHtmlPipe.decorators = [
        { type: Pipe, args: [{ name: 'erSafeHtml' },] }
    ];
    /** @nocollapse */
    SafeHtmlPipe.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    return SafeHtmlPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SplitPipe = /** @class */ (function () {
    function SplitPipe() {
    }
    /**
     * @param {?} data
     * @param {?=} seperator
     * @return {?}
     */
    SplitPipe.prototype.transform = /**
     * @param {?} data
     * @param {?=} seperator
     * @return {?}
     */
    function (data, seperator) {
        if (data) {
            return data.split(seperator ? seperator : ',');
        }
        return [];
    };
    SplitPipe.decorators = [
        { type: Pipe, args: [{ name: 'split' },] }
    ];
    return SplitPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StylePipe = /** @class */ (function () {
    function StylePipe() {
    }
    /**
     * @param {?} src
     * @return {?}
     */
    StylePipe.prototype.transform = /**
     * @param {?} src
     * @return {?}
     */
    function (src) {
        if (typeof src === 'string') {
            return src;
        }
        else {
            return JSON.stringify(src);
        }
    };
    StylePipe.decorators = [
        { type: Pipe, args: [{ name: 'erStyle' },] }
    ];
    return StylePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SubPipe = /** @class */ (function () {
    function SubPipe() {
    }
    /**
     * @param {?} value
     * @param {?=} start
     * @param {?=} end
     * @return {?}
     */
    SubPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} start
     * @param {?=} end
     * @return {?}
     */
    function (value, start, end) {
        if (!value) {
            return;
        }
        /** @type {?} */
        var iStart = start || 0;
        /** @type {?} */
        var iEnd = end;
        if (CommonsUtils.isString(value)) {
            if (!iEnd) {
                iEnd = value.length;
            }
            return value.substr(iStart, iEnd) + '...';
        }
        else if (CommonsUtils.isArray(value)) {
            if (!iEnd) {
                iEnd = value.length;
            }
            return ((/** @type {?} */ (value))).slice(iStart, iEnd);
        }
        return value;
    };
    SubPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'erSub'
                },] }
    ];
    return SubPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TextPipe = /** @class */ (function () {
    function TextPipe() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    TextPipe.prototype.transform = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return CommonsUtils.getText(data);
    };
    TextPipe.decorators = [
        { type: Pipe, args: [{ name: 'erText' },] }
    ];
    return TextPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TimerPipe = /** @class */ (function () {
    function TimerPipe() {
    }
    /**
     * @param {?=} start
     * @return {?}
     */
    TimerPipe.prototype.transform = /**
     * @param {?=} start
     * @return {?}
     */
    function (start) {
        if (!start) {
            start = new Date();
        }
        return timer(0, 1000)
            .pipe(map(function () {
            start.setSeconds(start.getSeconds() + 1);
            return new Date(start.getTime());
        }));
    };
    TimerPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'erTimer'
                },] }
    ];
    return TimerPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TrackerPipe = /** @class */ (function () {
    function TrackerPipe(cd) {
        this.cd = cd;
        this.currentNumber = 0;
        this.counter$ = new BehaviorSubject(0);
        //   .subscribe();
    }
    /**
     * @param {?} number
     * @param {?=} offset
     * @return {?}
     */
    TrackerPipe.prototype.transform = /**
     * @param {?} number
     * @param {?=} offset
     * @return {?}
     */
    function (number, offset) {
        var _this = this;
        if (offset === void 0) { offset = 20; }
        this.currentNumber = number - CommonsUtils.getRandomNumber(offset);
        this.counter$.next(this.currentNumber);
        this.counter$
            .pipe(switchMap(function (endRange) {
            return timer(1000, 200)
                .pipe(mapTo(_this.positiveOrNegative(endRange, _this.currentNumber)), startWith(_this.currentNumber), scan(function (acc, curr) { return acc + curr; }), tap(function (n) { return console.log(n); })
            //  takeWhile(this.takeUntil(endRange, this.currentNumber))
            );
        })).subscribe(function () { return _this.cd.detectChanges(); });
        return this.counter$;
    };
    /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    TrackerPipe.prototype.positiveOrNegative = /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    function (endRange, currentNumber) {
        return endRange > currentNumber ? 1 : -1;
    };
    /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    TrackerPipe.prototype.takeUntil = /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    function (endRange, currentNumber) {
        return endRange > currentNumber
            ? function (val) { return val <= endRange; }
            : function (val) { return val >= endRange; };
    };
    TrackerPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'erTracker'
                },] }
    ];
    /** @nocollapse */
    TrackerPipe.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    return TrackerPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TreeNodesPipe = /** @class */ (function () {
    function TreeNodesPipe() {
    }
    /**
     * @param {?} items
     * @param {?} keyMap
     * @return {?}
     */
    TreeNodesPipe.prototype.transform = /**
     * @param {?} items
     * @param {?} keyMap
     * @return {?}
     */
    function (items, keyMap) {
        if (!items) {
            return items;
        }
        return TreeUtils.transNodes(items, keyMap);
    };
    TreeNodesPipe.decorators = [
        { type: Pipe, args: [{ name: 'erTreeNodes' },] }
    ];
    return TreeNodesPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UniquePipe = /** @class */ (function () {
    function UniquePipe() {
    }
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    UniquePipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    function (value, args) {
        if (value !== undefined && value !== null) {
            return CommonsUtils.unique(value, args);
        }
        return value;
    };
    UniquePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'unique'
                },] }
    ];
    return UniquePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UnitNumberPipe = /** @class */ (function () {
    function UnitNumberPipe(ele) {
        this.ele = ele;
    }
    /**
     * @param {?} value
     * @param {?=} decimal
     * @return {?}
     */
    UnitNumberPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} decimal
     * @return {?}
     */
    function (value, decimal) {
        if (!value) {
            return null;
        }
        if (typeof value === 'string') {
            value = parseFloat(value);
        }
        /** @type {?} */
        var number;
        /** @type {?} */
        var suffix;
        /** @type {?} */
        var numeral = [
            { thresholds: 1, suffix: '' },
            { thresholds: 1e3, suffix: 'K' },
            { thresholds: 1e6, suffix: 'M' },
            { thresholds: 1e9, suffix: 'B' },
            { thresholds: 1e12, suffix: 'T' },
            { thresholds: 1e15, suffix: 'Q' }
        ];
        for (var i = numeral.length - 1; i >= 0; i--) {
            if (value >= numeral[i].thresholds) {
                number = value / numeral[i].thresholds;
                suffix = numeral[i].suffix;
                break;
            }
        }
        if (value > 1e3) {
            if (!decimal) {
                if (number < 10) {
                    number = number.toFixed(1);
                }
                else {
                    number = number.toFixed(0);
                }
            }
            else {
                if (decimal === 0 || decimal === 1 || decimal === 2) {
                    number = number.toFixed(decimal);
                }
                else {
                    throw new Error('must be integer 0, 1 or 2');
                }
            }
        }
        else {
            if (decimal === 0 || decimal === 1 || decimal === 2) {
                number = number.toFixed(decimal);
            }
            else {
                number = Math.round(number);
            }
        }
        // add hint of original value
        // this.ele.nativeElement;
        return number + suffix;
    };
    UnitNumberPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'erUnitNumber'
                },] }
    ];
    /** @nocollapse */
    UnitNumberPipe.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return UnitNumberPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UpToNowPipe = /** @class */ (function () {
    function UpToNowPipe(cd, ngZone) {
        this.cd = cd;
        this.ngZone = ngZone;
    }
    /**
     * @param {?} value
     * @param {?=} due
     * @return {?}
     */
    UpToNowPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} due
     * @return {?}
     */
    function (value, due) {
        var _this = this;
        /** @type {?} */
        var d = DateUtils.toDate(value);
        if (!d) {
            return '';
        }
        /** @type {?} */
        var span = DateUtils.getDateByNow(d, due);
        this.removeTimer();
        /** @type {?} */
        var timeToUpdate = (Number.isNaN(span.seconds)) ? 1000 : DateUtils.getUpdateSeconds(span.seconds) * 1000;
        this.timer = this.ngZone.runOutsideAngular(function () {
            if (typeof window !== 'undefined') {
                return window.setTimeout(function () {
                    _this.ngZone.run(function () { return _this.cd.detectChanges(); });
                }, timeToUpdate);
            }
            return null;
        });
        return span.message;
    };
    /**
     * @return {?}
     */
    UpToNowPipe.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeTimer();
    };
    /**
     * @private
     * @return {?}
     */
    UpToNowPipe.prototype.removeTimer = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.timer) {
            window.clearTimeout(this.timer);
            this.timer = null;
        }
    };
    UpToNowPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'erUpToNow',
                    pure: false
                },] }
    ];
    /** @nocollapse */
    UpToNowPipe.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone }
    ]; };
    return UpToNowPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ValuePipe = /** @class */ (function () {
    function ValuePipe() {
    }
    /**
     * @param {?} data
     * @param {?} key
     * @return {?}
     */
    ValuePipe.prototype.transform = /**
     * @param {?} data
     * @param {?} key
     * @return {?}
     */
    function (data, key) {
        if (CommonsUtils.isJson(data)) {
            if (key) {
                return CommonsUtils.get(data, key) || '';
            }
            else {
                return CommonsUtils.toString(data);
            }
        }
        else {
            return CommonsUtils.toString(data) || '';
        }
    };
    ValuePipe.decorators = [
        { type: Pipe, args: [{ name: 'erValue' },] }
    ];
    return ValuePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var CorePipes = [
    UpToNowPipe,
    Base64DecodePipe,
    CommaSeparatedNumberPipe,
    LinkifyPipe,
    NumberToTextPipe,
    UnitNumberPipe,
    SubPipe,
    EmojifyPipe,
    IdCardPipe,
    ObservablePipe,
    StylePipe,
    SafeHtmlPipe,
    HighLightPipe,
    FilterPipe,
    TrackerPipe,
    KeyValuePipe,
    KeysPipe,
    DataItemsPipe,
    TreeNodesPipe,
    JoinPipe,
    OrderByPipe,
    SplitPipe,
    UniquePipe,
    StylePipe,
    TextPipe,
    ValuePipe,
    DefaultPipe,
    TimerPipe,
    PercentPipe
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AuthGuard = /** @class */ (function () {
    function AuthGuard() {
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    AuthGuard.prototype.canActivate = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        /** @type {?} */
        var url = state.url;
        return AuthUtils.checkLogin(url);
    };
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    AuthGuard.prototype.canActivateChild = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        return this.canActivate(route, state);
    };
    /**
     * @param {?} route
     * @return {?}
     */
    AuthGuard.prototype.canLoad = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        /** @type {?} */
        var url = "/" + route.path;
        return AuthUtils.checkLogin(url);
    };
    AuthGuard.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ AuthGuard.ngInjectableDef = defineInjectable({ factory: function AuthGuard_Factory() { return new AuthGuard(); }, token: AuthGuard, providedIn: "root" });
    return AuthGuard;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DeactivateGuard = /** @class */ (function () {
    function DeactivateGuard() {
    }
    /**
     * @param {?} component
     * @param {?} currentRoute
     * @param {?} currentState
     * @return {?}
     */
    DeactivateGuard.prototype.canDeactivate = /**
     * @param {?} component
     * @param {?} currentRoute
     * @param {?} currentState
     * @return {?}
     */
    function (component, currentRoute, currentState) {
        return component.canDeactivate ? component.canDeactivate() : true;
    };
    DeactivateGuard.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ DeactivateGuard.ngInjectableDef = defineInjectable({ factory: function DeactivateGuard_Factory() { return new DeactivateGuard(); }, token: DeactivateGuard, providedIn: "root" });
    return DeactivateGuard;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GlobalErrorHandler = /** @class */ (function () {
    function GlobalErrorHandler(injector, zone) {
        this.injector = injector;
        this.zone = zone;
        this.logService = injector.get(LogService);
        this.location = injector.get(LocationStrategy);
    }
    /**
     * @param {?} error
     * @return {?}
     */
    GlobalErrorHandler.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        /** @type {?} */
        var message = error.message ? error.message : error.toString();
        /** @type {?} */
        var url = this.location instanceof PathLocationStrategy
            ? this.location.path() : '';
        this.logService.error(this, message, url, DomUtils.resolveUserAgent());
    };
    GlobalErrorHandler.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    GlobalErrorHandler.ctorParameters = function () { return [
        { type: Injector },
        { type: NgZone }
    ]; };
    /** @nocollapse */ GlobalErrorHandler.ngInjectableDef = defineInjectable({ factory: function GlobalErrorHandler_Factory() { return new GlobalErrorHandler(inject(INJECTOR), inject(NgZone)); }, token: GlobalErrorHandler, providedIn: "root" });
    return GlobalErrorHandler;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ConfigurablePreloadingStrategy = /** @class */ (function () {
    function ConfigurablePreloadingStrategy() {
        this.preloadedModules = [];
    }
    /**
     * @param {?} route
     * @param {?} load
     * @return {?}
     */
    ConfigurablePreloadingStrategy.prototype.preload = /**
     * @param {?} route
     * @param {?} load
     * @return {?}
     */
    function (route, load) {
        if (route.data && route.data['preload']) {
            this.preloadedModules.push(route.path);
            LogUtils.debug('Preloaded: ', route.path);
            return load();
        }
        else {
            return of(null);
        }
    };
    ConfigurablePreloadingStrategy.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ ConfigurablePreloadingStrategy.ngInjectableDef = defineInjectable({ factory: function ConfigurablePreloadingStrategy_Factory() { return new ConfigurablePreloadingStrategy(); }, token: ConfigurablePreloadingStrategy, providedIn: "root" });
    return ConfigurablePreloadingStrategy;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PathPropsDataResolver = /** @class */ (function () {
    function PathPropsDataResolver() {
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    PathPropsDataResolver.prototype.resolve = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        /** @type {?} */
        var routeData = route.data;
        if (routeData) {
            if (!CommonsUtils.isEmpty(routeData)) {
                /** @type {?} */
                var pathValues = route.url.map(function (seg) { return seg.path; });
                if (routeData['$props']) {
                    return of(CommonsUtils.get(routeData['$props'], pathValues.join('.')));
                }
            }
        }
        if (routeData.resource) ;
        return EMPTY;
    };
    PathPropsDataResolver.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ PathPropsDataResolver.ngInjectableDef = defineInjectable({ factory: function PathPropsDataResolver_Factory() { return new PathPropsDataResolver(); }, token: PathPropsDataResolver, providedIn: "root" });
    return PathPropsDataResolver;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * resolve page model from router
 */
var ResourceResolver = /** @class */ (function () {
    function ResourceResolver() {
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    ResourceResolver.prototype.resolve = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        if (!route.data || !route.data['props']) {
            return;
        }
    };
    ResourceResolver.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ ResourceResolver.ngInjectableDef = defineInjectable({ factory: function ResourceResolver_Factory() { return new ResourceResolver(); }, token: ResourceResolver, providedIn: "root" });
    return ResourceResolver;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RouterStateService = /** @class */ (function () {
    function RouterStateService(router) {
        var _this = this;
        this.router = router;
        router.events.subscribe(function (event) {
            _this.navigationInterceptor(event);
        });
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RouterStateService.prototype.navigationInterceptor = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var activeRoute = RouteUtils.getActiveRoute();
        if (event instanceof NavigationStart) {
            StatesUtils.create(StateNames.nav, {
                start: true,
                url: activeRoute.url,
                outlet: activeRoute.outlet,
                route: activeRoute
            });
        }
        if (event instanceof NavigationEnd) {
            StatesUtils.update(StateNames.nav, {
                start: false,
                status: 'success',
                url: activeRoute.url,
                outlet: activeRoute.outlet,
                route: activeRoute
            });
            StatesUtils.update(StateNames.currentRoute, { activeRoute: activeRoute });
            /** @type {?} */
            var title = activeRoute.data && activeRoute.data['title'];
            if (title) {
                StatesUtils.update(StateNames.appTitle, { title: title });
            }
        }
        if (event instanceof NavigationCancel) {
            StatesUtils.update(StateNames.nav, {
                start: false,
                status: 'cancel',
                url: activeRoute.url,
                outlet: activeRoute.outlet,
                route: activeRoute
            });
        }
        if (event instanceof NavigationError) {
            StatesUtils.update(StateNames.nav, {
                start: false,
                status: 'error',
                url: activeRoute.url,
                outlet: activeRoute.outlet,
                route: activeRoute
            });
        }
    };
    RouterStateService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    RouterStateService.ctorParameters = function () { return [
        { type: Router }
    ]; };
    /** @nocollapse */ RouterStateService.ngInjectableDef = defineInjectable({ factory: function RouterStateService_Factory() { return new RouterStateService(inject(Router)); }, token: RouterStateService, providedIn: "root" });
    return RouterStateService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var BACKGROUND_TASK_TOKEN = new InjectionToken('BACKGROUND_TASK_TOKEN');
/**
 * used to run background task globally
 */
var TaskService = /** @class */ (function () {
    function TaskService(tasks) {
        if (tasks === void 0) { tasks = []; }
        var _this = this;
        this.subs = [];
        StatesUtils.create(StateNames.appTitle, ConfigUtils.getConfig().appTitle, true);
        setTimeout(function () {
            _this.cleanStates();
            /** @type {?} */
            var _tasks = CommonsUtils.flatten(tasks);
            if (_tasks && _tasks.length > 0) {
                _tasks.forEach(function (task) { return _this.startTask((/** @type {?} */ (task))); });
            }
        }, 2000);
    }
    /**
     * @return {?}
     */
    TaskService.prototype.updateTitle = /**
     * @return {?}
     */
    function () {
        this.subs.push(StatesUtils.observe(StateNames.appTitle)
            .pipe(filter(function (state) { return state && state.hasOwnProperty('title'); }), map(function (state) { return state.title; }), distinctUntilChanged())
            .subscribe(function (title) {
            DiUtils.get(Title).setTitle(title);
        }));
    };
    /**
     * @return {?}
     */
    TaskService.prototype.cleanStates = /**
     * @return {?}
     */
    function () {
        this.subs.push(timer(30000, 30000)
            .subscribe(function () {
            /** @type {?} */
            var store = StatesUtils.getStore().value;
            Object.keys(store).forEach(function (key) {
                if (store[key]) {
                    if (!store[key].preserved && (store[key].state && store[key].state.observers.length === 0)) {
                        store = CommonsUtils.omit(store, key);
                    }
                }
            });
            StatesUtils.getStore().next(store);
        }));
    };
    /**
     * @param {?} task
     * @return {?}
     */
    TaskService.prototype.startTask = /**
     * @param {?} task
     * @return {?}
     */
    function (task) {
        if (CommonsUtils.isFunction(task)) {
            ((/** @type {?} */ (task)))();
        }
        else {
            /** @type {?} */
            var schedule_1 = (/** @type {?} */ (task));
            /** @type {?} */
            var context_1 = schedule_1.context;
            if (CommonsUtils.isFunction(schedule_1.context)) {
                context_1 = schedule_1.context();
            }
            if (schedule_1.interval) {
                this.subs.push(timer(0, schedule_1.interval)
                    .subscribe(function () {
                    schedule_1.run(context_1);
                }));
            }
            else {
                schedule_1.run(context_1);
            }
        }
    };
    /**
     * @return {?}
     */
    TaskService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subs.forEach(function (sub) {
            sub.unsubscribe();
        });
    };
    TaskService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TaskService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [BACKGROUND_TASK_TOKEN,] }] }
    ]; };
    /** @nocollapse */ TaskService.ngInjectableDef = defineInjectable({ factory: function TaskService_Factory() { return new TaskService(inject(BACKGROUND_TASK_TOKEN, 8)); }, token: TaskService, providedIn: "root" });
    return TaskService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var CoreServices = [
    LogService,
    ResourceResolver,
    TaskService,
    RouterStateService,
    AuthGuard,
    DeactivateGuard,
    GlobalErrorHandler,
    ConfigurablePreloadingStrategy,
    PathPropsDataResolver
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var updateTitleTask = function () {
    StatesUtils.observe(StateNames.appTitle)
        .pipe(filter(function (appTitle) { return appTitle && appTitle.hasOwnProperty('title'); }), map(function (appTitle) { return appTitle.title; }), distinctUntilChanged())
        .subscribe(function (title) {
        DiUtils.get(Title).setTitle(title);
    });
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var CORE_TASKS = [
    updateTitleTask
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AnnotationsUtils = /** @class */ (function () {
    function AnnotationsUtils() {
    }
    /**
     * @param {?} type
     * @return {?}
     */
    AnnotationsUtils.getFor = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        /** @type {?} */
        var annotations = Reflect.getOwnMetadata('design:type', type);
        if (!Array.isArray(annotations)) {
            throw Error("Annotations: Annotations not available for type '" + type.name + "'");
        }
        return annotations[0];
    };
    /**
     * @param {?} type
     * @return {?}
     */
    AnnotationsUtils.getForDirective = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return AnnotationsUtils.getFor(type);
    };
    /**
     * @param {?} type
     * @return {?}
     */
    AnnotationsUtils.getForComponent = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return AnnotationsUtils.getFor(type);
    };
    /**
     * @param {?} type
     * @return {?}
     */
    AnnotationsUtils.getForPipe = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return AnnotationsUtils.getFor(type);
    };
    return AnnotationsUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DataUtils = /** @class */ (function () {
    function DataUtils() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    DataUtils.getNextValue = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _a;
        /** @type {?} */
        var opt = CommonsUtils.defaults(options || {}, DataUtils.DEFAULT_PROPS);
        /** @type {?} */
        var q = CommonsUtils.getArrayValue(opt.query) || [];
        if (opt.parent) {
            q.push(termQuery(opt.parentKey, opt.parent));
        }
        return ApiUtils.getByQuery("" + opt.apiEntry, (/** @type {?} */ ({
            query: q,
            sort: (_a = {}, _a[opt.seqKey] = Order.DESC, _a),
            size: 1
        }))).pipe(map(function (data) {
            /** @type {?} */
            var prefix = '0'.repeat(opt.seqLen);
            /** @type {?} */
            var next = 1;
            if (data.total !== 0) {
                /** @type {?} */
                var last = data.items[0];
                if (last[opt.seqKey]) {
                    next = parseInt(last[opt.seqKey].replace(/^0+/, '')) + 1;
                }
                else {
                    DialogUtils.error('错误', '无法生成新的序列号');
                    throwError('无法生成新的序列号');
                }
            }
            /** @type {?} */
            var seq = (prefix + next).slice(-prefix.length);
            if (opt.withParent && opt.parent) {
                return opt.parent + seq;
            }
            else {
                return seq;
            }
        }));
    };
    /**
     * @param {?} props
     * @return {?}
     */
    DataUtils.checkDistinct = /**
     * @param {?} props
     * @return {?}
     */
    function (props) {
        /** @type {?} */
        var result$ = ApiUtils.fetch(__assign({}, props.apiProps, { size: 2 })).pipe(map(function (data) { return !data.items || data.items.length === 0 ||
            (data.items.length === 1 && data.items[0]['id'] === props.id); }), tap(function (distinct) {
            if (!distinct) {
                DialogUtils.error('验证失败', "\u6570\u503C\u3010" + props.apiProps.queryValue + "\u3011\u5DF2\u7ECF\u5B58\u5728\uFF0C\u8BF7\u4FEE\u6539\u540E\u518D\u6267\u884C\u672C\u64CD\u4F5C\uFF01");
            }
        }));
        return result$;
    };
    /**
     * @param {?} event
     * @param {?} keyOrQuery
     * @return {?}
     */
    DataUtils.onNodeSelect = /**
     * @param {?} event
     * @param {?} keyOrQuery
     * @return {?}
     */
    function (event, keyOrQuery) {
        /** @type {?} */
        var treeProps = event['$from'].$props;
        /** @type {?} */
        var tableId = CommonsUtils.get(treeProps, '$ext.$container.table.$id');
        if (tableId) {
            /** @type {?} */
            var q = keyOrQuery;
            /** @type {?} */
            var nodeCode = event.node.data && event.node.data.code;
            if (nodeCode && CommonsUtils.isString(keyOrQuery)) {
                q = prefixQuery(keyOrQuery, nodeCode);
            }
            StatesUtils.update(tableId, (/** @type {?} */ ({
                query: nodeCode ? q : matchAllQuery()
            })));
        }
    };
    DataUtils.DEFAULT_ROOT_SEQ = '001';
    DataUtils.DEFAULT_PROPS = {
        parentKey: 'parent.code',
        seqKey: 'code',
        seqLen: 3
    };
    return DataUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DataFieldUtils = /** @class */ (function () {
    function DataFieldUtils() {
    }
    /**
     * @param {?} dataField
     * @return {?}
     */
    DataFieldUtils.getFieldDefaultProps = /**
     * @param {?} dataField
     * @return {?}
     */
    function (dataField) {
        switch (dataField.dataAttr) {
            case DataAttr.DATA_CODE:
                return DataFieldUtils.getDataCodeFieldProps(dataField);
            case DataAttr.URL:
                dataField.dataType = DataType.STRING;
                dataField.pattern = RegPatterns.url;
                break;
            case DataAttr.PHONE:
                dataField.dataType = DataType.STRING;
                dataField.pattern = RegPatterns.phone;
                break;
            case DataAttr.ID_CARD:
                dataField.dataType = DataType.STRING;
                break;
            case DataAttr.EMAIL:
                dataField.dataType = DataType.STRING;
                dataField.pattern = RegPatterns.email;
                break;
            case DataAttr.CURRENCY:
                dataField.defaultValue = 0;
                dataField.dataType = DataType.NUMBER;
                dataField.pattern = RegPatterns.pNumeric;
                break;
        }
        return dataField;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    DataFieldUtils.getDefaultFieldName = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field) {
            if (field.defaultKey) {
                return field.defaultKey;
            }
            else {
                return field.key;
            }
        }
    };
    /**
     * @param {?} fieldValue
     * @param {?} field
     * @return {?}
     */
    DataFieldUtils.getFieldDisplayContent = /**
     * @param {?} fieldValue
     * @param {?} field
     * @return {?}
     */
    function (fieldValue, field) {
        if (!fieldValue) {
            return '';
        }
        if (field) {
            if (CommonsUtils.isJson(fieldValue)) {
                /** @type {?} */
                var key = void 0;
                if (field) {
                    key = DataFieldUtils.getDefaultFieldName(field);
                }
                if (key) {
                    return CommonsUtils.get(fieldValue, key);
                }
                else {
                    /** @type {?} */
                    var trans_1 = {};
                    Object.keys(fieldValue).forEach(function (sub) {
                        /** @type {?} */
                        var label = CommonsUtils.get(field, "fields." + sub + ".label")
                            && CommonsUtils.get(field, "refer.entity." + sub + ".label")
                            && CommonsUtils.get(field, "refer." + sub + ".label");
                        if (label) {
                            trans_1[label] = fieldValue[sub];
                        }
                        else {
                            trans_1[sub] = fieldValue[sub];
                        }
                    });
                    fieldValue = trans_1;
                }
            }
        }
        if (CommonsUtils.isBoolean(fieldValue)) {
            return fieldValue ? '是' : '否';
        }
        else {
            return CommonsUtils.getText(fieldValue);
        }
    };
    /**
     * @private
     * @param {?} dataField
     * @return {?}
     */
    DataFieldUtils.getDataCodeFieldProps = /**
     * @private
     * @param {?} dataField
     * @return {?}
     */
    function (dataField) {
        /** @type {?} */
        var props = ConfigUtils.getConfig().dataFieldProps.dataCode;
        if (!dataField.catCode) {
            LogUtils.error('DataFieldUtils', "dataCode\u5B57\u6BB5\u6CA1\u6709\u5B9A\u4E49\u3010catCode\u3011\u5C5E\u6027", dataField);
            return;
        }
        return (/** @type {?} */ ({
            dataType: DataType.JSON,
            sortKey: props.codeKey,
            aggKey: props.codeKey,
            defaultKey: props.nameKey,
            apiDataProps: (/** @type {?} */ ({
                apiEntry: props.apiEntry,
                searchFields: [props.nameKey, props.codeKey, props.abbrKey],
                returnFields: [props.nameKey, props.codeKey],
                query: [
                    termQuery(props.catKey + ".code", dataField.catCode),
                    props.inUseKey ? boolQuery().mustNot(termQuery(props.inUseKey, false)) : undefined
                ],
                sort: props.codeKey,
                size: 10
            })),
            dataItemProps: {
                labelKey: props.nameKey,
                valueKey: [props.nameKey, props.codeKey],
                idKey: props.codeKey,
                template: function (item) {
                    return "<span><b>" + item[props.nameKey] + "</b></span>  <span class=\"badge badge-info\"> " + item[props.codeKey] + "</span> ";
                }
            }
        }));
    };
    return DataFieldUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ChangesUtils = /** @class */ (function () {
    function ChangesUtils() {
    }
    /**
     * @param {?} diff
     * @return {?}
     */
    ChangesUtils.getChangeByDiff = /**
     * @param {?} diff
     * @return {?}
     */
    function (diff) {
        if (!diff) {
            return {};
        }
        /** @type {?} */
        var changes = {
            changed: [],
            added: [],
            deleted: []
        };
        if (diff) {
            diff.forEachChangedItem(function (r) {
                changes.changed.push({
                    key: r.key,
                    value: r.currentValue,
                    from: r.previousValue
                });
            });
            diff.forEachAddedItem(function (r) {
                changes.added.push({
                    key: r.key,
                    value: r.currentValue
                });
            });
            diff.forEachRemovedItem(function (r) {
                changes.deleted.push({
                    key: r.key,
                    value: r.previousValue
                });
            });
        }
        return CommonsUtils.omitBy(changes, CommonsUtils.lodash().isEmpty);
    };
    return ChangesUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ResourceUtils = /** @class */ (function () {
    function ResourceUtils() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    ResourceUtils.getConfigs = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var root = '';
        /** @type {?} */
        var path;
        /** @type {?} */
        var resourceUri = options.path;
        /** @type {?} */
        var resourcesConfig = __assign({}, ConfigUtils.getConfig().resources, options);
        if (resourcesConfig.root) {
            if (!resourceUri.startsWith('/')) {
                root = resourcesConfig.root;
            }
            else {
                resourceUri = resourceUri.substr(1);
            }
            if (!resourceUri.endsWith('.json')) {
                resourceUri += '.json';
            }
        }
        else {
            root = resourcesConfig.uri;
        }
        if (options.state) {
            path = options.state;
        }
        else {
            path = [options.module, options.key];
        }
        /** @type {?} */
        var state = StatesUtils.get(path, true);
        if (!state.value || options.reload) {
            if (options.initial) {
                state.next(options.initial);
            }
            return HttpUtils.request({
                uri: root + "/" + resourceUri,
                tag: path,
                onResponse: function (response) { return response ? CommonsUtils.restoreJsonFn(response) : null; }
            }).pipe(take(1), tap(function (response) { return StatesUtils.create(path, response, resourcesConfig.reserve || resourcesConfig.state !== undefined); }));
        }
        else {
            return state;
        }
    };
    return ResourceUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UrlUtils = /** @class */ (function () {
    function UrlUtils() {
    }
    /**
     * @param {?} url
     * @return {?}
     */
    UrlUtils.parse = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return UrlUtils.serializer.parse(url.toLowerCase());
    };
    /**
     * @param {?} tree
     * @return {?}
     */
    UrlUtils.serialize = /**
     * @param {?} tree
     * @return {?}
     */
    function (tree) {
        return UrlUtils.serialize(tree);
    };
    UrlUtils.serializer = new DefaultUrlSerializer();
    return UrlUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// https://itnext.io/cache-components-with-angular-routereusestrategy-3e4c8b174d5f
var  
// https://itnext.io/cache-components-with-angular-routereusestrategy-3e4c8b174d5f
CachedRouteReuseStrategy = /** @class */ (function () {
    function CachedRouteReuseStrategy() {
        this.storedRouteHandles = new Map();
        this.allowRetrieveCache = {};
    }
    /**
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    CachedRouteReuseStrategy.prototype.shouldReuseRoute = /**
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    function (future, curr) {
        if (this.isInOutlet(future['_routerState'].url) || this.isInOutlet(curr['_routerState'].url)) {
            return future.routeConfig === curr.routeConfig;
        }
        return future.routeConfig === curr.routeConfig && (false !== (future.data && future.data.$reuse));
    };
    /**
     * @param {?} route
     * @return {?}
     */
    CachedRouteReuseStrategy.prototype.retrieve = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        return (/** @type {?} */ (this.storedRouteHandles.get(this.getPath(route))));
    };
    /**
     * @param {?} route
     * @return {?}
     */
    CachedRouteReuseStrategy.prototype.shouldAttach = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        /** @type {?} */
        var path = this.getPath(route);
        if (this.allowRetrieveCache[path]) {
            return this.storedRouteHandles.has(this.getPath(route));
        }
        return false;
    };
    /**
     * @param {?} route
     * @return {?}
     */
    CachedRouteReuseStrategy.prototype.shouldDetach = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        /** @type {?} */
        var path = this.getPath(route);
        if (this.allowRetrieveCache.hasOwnProperty(path)) {
            return true;
        }
        return false;
    };
    /**
     * @param {?} route
     * @param {?} detachedTree
     * @return {?}
     */
    CachedRouteReuseStrategy.prototype.store = /**
     * @param {?} route
     * @param {?} detachedTree
     * @return {?}
     */
    function (route, detachedTree) {
        this.storedRouteHandles.set(this.getPath(route), detachedTree);
    };
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    CachedRouteReuseStrategy.prototype.isInOutlet = /**
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return /.*\(.*:.*\).*/.test(url);
    };
    /**
     * @private
     * @param {?} route
     * @return {?}
     */
    CachedRouteReuseStrategy.prototype.getPath = /**
     * @private
     * @param {?} route
     * @return {?}
     */
    function (route) {
        if (route.routeConfig !== null && route.routeConfig.path !== null) {
            return route.routeConfig.path;
        }
        return '';
    };
    return CachedRouteReuseStrategy;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var APP_CONFIG = new InjectionToken('APP_CONFIG');
var ErCoreModule = /** @class */ (function () {
    function ErCoreModule(injector) {
        this.injector = injector;
        if (!DiUtils.injector) {
            DiUtils.injector = injector;
            // load services
            injector.get(RouterStateService);
            injector.get(TaskService);
            try {
                /** @type {?} */
                var stompService = injector.get(StompService);
                if (stompService && ConfigUtils.getConfig().stomp.enabled) {
                    stompService.state
                        .pipe(distinctUntilChanged(), tap(function (state) {
                        StatesUtils.update(StateNames.socket, { state: StompStates[state] });
                        StatesUtils.update(StateNames.notify, {
                            type: state === 0 ? NotifyType.ANNOUNCE : NotifyType.ALERT,
                            message: "\u6D88\u606F\u670D\u52A1\u5668\u72B6\u6001\uFF1A" + StompStates[state],
                            level: state === 0 ? NotifyLevel.ERROR : NotifyLevel.INFO
                        });
                    })).subscribe();
                }
            }
            catch (e) {
            }
        }
    }
    /**
     * @param {?} appConfig
     * @return {?}
     */
    ErCoreModule.forRoot = /**
     * @param {?} appConfig
     * @return {?}
     */
    function (appConfig) {
        return {
            ngModule: ErCoreModule,
            providers: __spread([
                { provide: APP_CONFIG, useValue: appConfig }
            ], CoreInterceptors, [
                appConfig.stomp.enabled ? StompService : [],
                appConfig.stomp.enabled ? { provide: StompConfig, useValue: appConfig.stomp } : [],
                { provide: BACKGROUND_TASK_TOKEN, useValue: DateSyncUtils.start, multi: true },
                { provide: BACKGROUND_TASK_TOKEN, useValue: CORE_TASKS, multi: true },
                {
                    provide: RouteReuseStrategy,
                    useClass: CachedRouteReuseStrategy
                }
            ])
        };
    };
    ErCoreModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        RouterModule,
                        HttpClientModule,
                        NgPipesModule,
                        DynamicModule.withComponents(CoreComponents)
                    ],
                    declarations: __spread(CoreComponents, CoreDirectives, CorePipes),
                    exports: __spread([
                        CommonModule,
                        RouterModule,
                        HttpClientModule,
                        NgPipesModule
                    ], CoreComponents, CoreDirectives, CorePipes)
                },] }
    ];
    /** @nocollapse */
    ErCoreModule.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return ErCoreModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ErCoreModule, BaseClass, Unsubscribe, BaseDirective, BaseService, BaseComponent, RouteBindComponent, ControlComponent, WrapperComponent, ControlWrapperComponent, DataAwareControlWrapperComponent, BaseFormComponent, AppConfigComponent, ModuleConfigComponent, AbstractLoginComponent, AbstractRegisterComponent, AbstractChangePwdComponent, AuthBaseComponent, CoreComponents, BreadcrumbsComponent, StateButtonComponent, StateButtonsComponent, DynaContentComponent, ContainerComponent, DataItemComponent, HttpStatusComponent, FluidContainerComponent, LeftRightContainerComponent, MobileType, PhonePreviewComponent, RouteDataPropsBindComponent, QueryBuilderComponent, QueryBuilderRuleComponent, AnimateNumberComponent, DynaCompComponent, JsonViewerDirective, ObjectDiff, CoreDirectives, AnimateDirective, ApiDataDirective, TypedTemplateDirective, DynaTemplateDirective, PropsBindDirective, TagDirective, SelectorDirective, PositionDirective, RemoveMeDirective, HttpSpinnerDirective, NotifySpinnerDirective, HighlightDirective, FocusHighlightDirective, MovableHandleDirective, Position, MovableDirective, HttpAppConfiguredInterceptor, HttpErrorHandlerInterceptor, HttpJwtAuthInterceptor, HttpProgressInterceptor, HttpLogInterceptor, HttpTimeoutInterceptor, CoreInterceptors, esBoundInterceptor, credentialHttpRequestInterceptor, FilterPipe, HighLightPipe, KeysPipe, SafeHtmlPipe, StylePipe, KeyValuePipe, JoinPipe, ObservablePipe, OrderByPipe, IdCardPipe, SplitPipe, UniquePipe, Base64DecodePipe, CommaSeparatedNumberPipe, LinkifyPipe, NumberToTextPipe, UnitNumberPipe, DataItemsPipe, TreeNodesPipe, PercentPipe, SubPipe, TextPipe, TimerPipe, UpToNowPipe, ValuePipe, DefaultPipe, TrackerPipe, EmojifyPipe, CorePipes, GlobalErrorHandler, AuthGuard, DeactivateGuard, ConfigurablePreloadingStrategy, TaskService, BACKGROUND_TASK_TOKEN, RouterStateService, ResourceResolver, LogService, PathPropsDataResolver, CoreServices, updateTitleTask, CORE_TASKS, HTTP_STATE$, HTTP_TAG_STATE$, ROUTE_STATE$, ROUTE_OUTLET_STATE$, WEB_SOCKET_STATES, AnnotationsUtils, DEFAULT_API_REQUEST_OPTIONS, ApiUtils, anyRoleUser, AuthUtils, PermissionUtils, DateSyncUtils, DataUtils, DataFieldUtils, ComponentUtils, ChangesUtils, DiUtils, LogUtils, DynaComponentUtils, HttpUtils, RouteUtils, ResourceUtils, UrlUtils, NgAsyncValidator, FormlyAsyncValidator, WechatQrCodeComponent as ɵb, AnimatedIfDirective as ɵc, SpinnerBaseDirective as ɵd, APP_CONFIG as ɵa, CachedRouteReuseStrategy as ɵe };

//# sourceMappingURL=er-core.js.map