import { ApiDataProps, ApiPayload, ApiRequestOptions, DataSource, Query } from '@er/types';
import { RequestBodySearch } from 'elastic-builder';
import { Observable } from 'rxjs';
export declare const DEFAULT_API_REQUEST_OPTIONS: ApiRequestOptions;
export declare class ApiUtils {
    private static presetApiOptions;
    static getPresetApiOptions(serverType: any): ApiRequestOptions;
    static login(payload: {}, options?: ApiRequestOptions): Observable<any>;
    static logout(options?: ApiRequestOptions): Observable<any>;
    static changePwd(payload: {}, options?: ApiRequestOptions): Observable<any>;
    static register(payload: {}, options?: ApiRequestOptions): Observable<any>;
    static save(apiEntry: string, data: {}, options?: ApiRequestOptions): Observable<any>;
    static create(apiEntry: string, data: {}, options?: ApiRequestOptions): Observable<any>;
    static getById(apiEntry: string, id: string, options?: ApiRequestOptions): Observable<any>;
    static getByIds(apiEntry: string, ids: string | string[], options?: ApiRequestOptions): Observable<any>;
    static getByQuery(apiEntry: string, payload?: ApiPayload | string | RequestBodySearch, options?: ApiRequestOptions): Observable<any>;
    static updateById(apiEntry: string, id: string, data: {}, options?: ApiRequestOptions): Observable<any>;
    static patchById(apiEntry: string, id: string, data: {}, options?: ApiRequestOptions): Observable<any>;
    static updateByQuery(apiEntry: string, query: Query | Query[] | RequestBodySearch, data: {}, options?: ApiRequestOptions): Observable<any>;
    static deleteById(apiEntry: string, id: string, options?: ApiRequestOptions): Observable<any>;
    static deleteByQuery(apiEntry: string, query: Query | RequestBodySearch, options?: ApiRequestOptions): Observable<any>;
    static batch(apiEntry: string, body: any, options?: ApiRequestOptions): Observable<any>;
    static batchFetch(dataSource: ApiDataProps | ApiDataProps[] | DataSource, tag?: any): Observable<any>;
    static fetch(apiDataProps: ApiDataProps, tag?: any): Observable<any>;
    private static setContext;
    private static doRequest;
    private static buildUri;
    private static buildPayload;
    private static resolveApiParamsName;
}
