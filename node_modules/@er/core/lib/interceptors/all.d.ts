import { HttpAppConfiguredInterceptor } from './customer/interceptor';
import { HttpErrorHandlerInterceptor } from './error/interceptor';
import { HttpJwtAuthInterceptor } from './jwt/interceptor';
import { HttpLogInterceptor } from './log/interceptor';
import { HttpProgressInterceptor } from './progress/interceptor';
import { HttpTimeoutInterceptor } from './timeout/interceptor';
export { HttpAppConfiguredInterceptor } from './customer/interceptor';
export { HttpErrorHandlerInterceptor } from './error/interceptor';
export { HttpJwtAuthInterceptor } from './jwt/interceptor';
export { HttpProgressInterceptor } from './progress/interceptor';
export { HttpLogInterceptor } from './log/interceptor';
export { HttpTimeoutInterceptor } from './timeout/interceptor';
export * from './customer/preset/all';
export declare const CoreInterceptors: ({
    provide: import("@angular/core/src/di/injection_token").InjectionToken<import("@angular/common/http/src/interceptor").HttpInterceptor[]>;
    useClass: typeof HttpErrorHandlerInterceptor;
    multi: boolean;
} | {
    provide: import("@angular/core/src/di/injection_token").InjectionToken<import("@angular/common/http/src/interceptor").HttpInterceptor[]>;
    useClass: typeof HttpProgressInterceptor;
    multi: boolean;
} | {
    provide: import("@angular/core/src/di/injection_token").InjectionToken<import("@angular/common/http/src/interceptor").HttpInterceptor[]>;
    useClass: typeof HttpLogInterceptor;
    multi: boolean;
} | {
    provide: import("@angular/core/src/di/injection_token").InjectionToken<import("@angular/common/http/src/interceptor").HttpInterceptor[]>;
    useClass: typeof HttpTimeoutInterceptor;
    multi: boolean;
} | {
    provide: import("@angular/core/src/di/injection_token").InjectionToken<import("@angular/common/http/src/interceptor").HttpInterceptor[]>;
    useClass: typeof HttpJwtAuthInterceptor;
    multi: boolean;
} | {
    provide: import("@angular/core/src/di/injection_token").InjectionToken<import("@angular/common/http/src/interceptor").HttpInterceptor[]>;
    useClass: typeof HttpAppConfiguredInterceptor;
    multi: boolean;
})[];
