import { ChangeDetectorRef, EventEmitter } from '@angular/core';
import { AbstractControl, FormGroup } from '@angular/forms';
import { ApiRequestOptions, ButtonProps, DataEntity, DynaContent } from '@er/types';
import { Observable } from 'rxjs';
import { BaseComponent } from './component';
export declare abstract class BaseFormComponent extends BaseComponent {
    protected cd: ChangeDetectorRef;
    $id?: any;
    entity: DataEntity;
    apiEntry: string;
    options: {};
    submitRootKey: string;
    submitExcludeKeys: string | string[];
    resetKeys: string | string[];
    styleClass: any;
    style: any;
    formStyleClass: any;
    formStyle: any;
    buttonsStyleClass: any;
    submitBtnStyleClass: any;
    resetBtnStyleClass: any;
    initBtnStyleClass: any;
    header: DynaContent;
    footer: DynaContent;
    buttons?: ButtonProps[];
    getModelOptions: ApiRequestOptions;
    submitOptions: ApiRequestOptions;
    beforeSubmit: (context: any) => boolean | Observable<boolean>;
    afterSubmit: (context: any) => void | {} | Observable<any>;
    valueChanges: (context: any) => void;
    resetAfterSubmit: boolean;
    onSubmit: EventEmitter<{}>;
    onSubmitted: EventEmitter<{}>;
    onModel: EventEmitter<{}>;
    onFormValueChanges: EventEmitter<any>;
    form: FormGroup;
    templateNames: {
        header: string;
        buttons: string;
        footer: string;
    };
    private initModel;
    runtimeData: {};
    private hasUpdated;
    constructor(cd: ChangeDetectorRef);
    private _model;
    model: {};
    private _modelId;
    ngOnInit(): void;
    modelId: any;
    readonly isFormValid: boolean;
    readonly httpTag: string;
    readonly formId: any;
    readonly submitModel: {};
    formControl(fieldName: any): AbstractControl;
    fieldComponent(fieldName: any): any;
    getFormErrorFields(): any[];
    patchModel(model: any): void;
    patchRuntimeData(data: any): void;
    isFieldValid(path: string | string[]): boolean;
    isFieldTouched(fieldNamePath: string): boolean;
    updateControls(form?: FormGroup): void;
    field(path: string | string[]): AbstractControl;
    resetForm(): void;
    resetModel(reset?: any): void;
    setInitModel(): void;
    refresh(): void;
    submit(): void;
    defaultSubmit(submitModel?: any): void;
    getEventContext(other?: any): any;
    private submitAfterBefore;
    private doSubmit;
    private doPostSubmit;
}
