import { ChangeDetectorRef } from '@angular/core';
import { AbstractControl, ValidationErrors, Validator } from '@angular/forms';
import { DataEntity, DataField, DataItem, QueryBuilderProps, QueryRule, QueryRuleSet } from '@er/types';
import { ControlComponent } from '../../bases/control';
export declare class QueryBuilderComponent extends ControlComponent implements Validator {
    private changeDetectorRef;
    ruleSet: QueryRuleSet;
    index: number;
    parentRuleSet: QueryRuleSet;
    defaultValue: QueryRuleSet;
    templateNames: {
        buttonGroup: string;
        switchGroup: string;
        removeButton: string;
        entity: string;
        field: string;
        operator: string;
        input: string;
        empty: string;
    };
    constructor(changeDetectorRef: ChangeDetectorRef);
    private _config;
    config: QueryBuilderProps;
    value: QueryRuleSet;
    validate(control: AbstractControl): ValidationErrors | null;
    ruleSetStyle(index?: number): {
        'border-left-width': string;
        'border-left-style': string;
        'border-left-color': any;
    };
    getOperators(field: DataField): DataItem[];
    getFields(entityKey?: string): DataField[];
    getField(rule: QueryRule): DataField;
    getClassNames(...args: any[]): string;
    isInValidRule(rule: any): boolean;
    getRuleClassName(rule: any): string;
    getDefaultDataField(entity: DataEntity): DataField;
    getDefaultOperator(field: DataField): string;
    addRule(): void;
    addRuleSet(): void;
    removeRule(rule: QueryRule): void;
    removeRuleSet(ruleSet?: QueryRuleSet): void;
    changeCondition(value: any): void;
    changeField(key: string, rule: QueryRule): void;
    changeEntity(entityValue: string, rule: QueryRule): void;
    getDefaultValue(defaultValue: any): any;
    context(context?: {}): {
        qb: QueryBuilderComponent;
    };
    private checkEmptyRuleInRuleSet;
    private validateRulesInRuleSet;
}
