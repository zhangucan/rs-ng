import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, QueryList } from '@angular/core';
import { MovableHandleDirective } from './movable-handle.directive';
export interface Coordinates {
    top: number;
    left: number;
}
export interface Rects {
    top: number;
    left: number;
    height: number;
    width: number;
}
export interface ITouchEvent extends UIEvent {
    changedTouches: Coordinates[];
}
export declare type Positions = Coordinates | Rects | ITouchEvent | MouseEvent;
export declare class Position {
    top: number;
    left: number;
    height: number;
    width: number;
    constructor(pos: Positions);
    readonly bottom: number;
    readonly right: number;
    minus(position: Coordinates): Position;
    plus(position: Coordinates): Position;
    protected containsNumberProp(object: any, props: string[]): boolean;
}
export declare class MovableDirective implements AfterViewInit, AfterContentInit {
    element: ElementRef;
    protected cd: ChangeDetectorRef;
    movableConstrained: boolean;
    movableConstraint: string;
    /** saved start position when moving starts. */
    protected startPosition: Position;
    /** true if moving is in progress. */
    protected isMoving: boolean;
    protected isHandle: boolean;
    /** set position style on host to relative. */
    protected positionStyle: string;
    /** current Y position of the native element. */
    protected positionTop: number;
    /** current X position of the native element. */
    protected positionLeft: number;
    /** set class on host to indicate movable support. */
    protected isMovable: boolean;
    protected movableName: string;
    protected allHandles: QueryList<MovableHandleDirective>;
    protected handles: MovableHandleDirective[];
    constructor(element: ElementRef, cd: ChangeDetectorRef);
    /** set class depending on the status. */
    protected _movableEnabled: boolean;
    /** optional input to toggle movable status. */
    protected movableEnabled: boolean;
    protected movable: string;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    protected updateQuery(handles: QueryList<MovableHandleDirective>): void;
    protected onMouseDown(event: MouseEvent): void;
    protected onMouseUp(event: MouseEvent): void;
    protected onMouseMove(event: MouseEvent): void;
    protected onTouchStart(event: ITouchEvent): void;
    protected onTouchEnd(event: ITouchEvent): void;
    protected onTouchMove(event: any): void;
    protected startMoving(event: ITouchEvent | MouseEvent): void;
    protected stopMoving(): void;
    protected moveElement(event: ITouchEvent | MouseEvent): void;
    protected isEventInHandle(event: ITouchEvent | MouseEvent): boolean;
    protected getRelativeRect(element: HTMLElement): Position;
    protected parseStyleInt(value: string): number;
    protected getStyle(element: HTMLElement, property: string): string;
    protected getView(element: HTMLElement): Window;
    protected getViewPos(element: HTMLElement): Position;
}
