/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CommonsUtils } from '@er/utils';
import { map } from 'rxjs/operators';
import { ApiUtils } from '../../utils/api';
/** @type {?} */
export var NgAsyncValidator = function (requestProps, errorKey) {
    /** @type {?} */
    var fn = function (control) {
        /** @type {?} */
        var props = requestProps;
        if (requestProps.query && CommonsUtils.isFunction(requestProps.query)) {
            /** @type {?} */
            var query = ((/** @type {?} */ (requestProps.query)))(control.value);
            props = tslib_1.__assign({}, props, { query: query });
        }
        /** @type {?} */
        var httpRequest = ApiUtils.fetch(props)
            .pipe(map(function (data) {
            var _a;
            return !data ? null : (_a = {}, _a[errorKey] = true, _a);
        }));
        return httpRequest;
    };
    return fn;
};
/** @type {?} */
export var FormlyAsyncValidator = function (requestProps) {
    /** @type {?} */
    var fn = function (control) {
        /** @type {?} */
        var props = requestProps;
        if (requestProps.query && CommonsUtils.isFunction(requestProps.query)) {
            /** @type {?} */
            var query = ((/** @type {?} */ (requestProps.query)))(control.value);
            props = tslib_1.__assign({}, props, { query: query });
        }
        /** @type {?} */
        var httpRequest = ApiUtils.fetch(props)
            .pipe(map(function (data) { return !data; }));
        return httpRequest.toPromise();
    };
    return fn;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi92YWxpZGF0b3JzL2FzeW5jL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUN2QyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkMsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDOztBQUV6QyxNQUFNLEtBQU8sZ0JBQWdCLEdBQUcsVUFBVSxZQUEwQixFQUFFLFFBQWlCOztRQUMvRSxFQUFFLEdBQUcsVUFBQyxPQUF3Qjs7WUFDOUIsS0FBSyxHQUFHLFlBQVk7UUFDeEIsSUFBSSxZQUFZLENBQUMsS0FBSyxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFOztnQkFDL0QsS0FBSyxHQUFHLENBQUMsbUJBQUEsWUFBWSxDQUFDLEtBQUssRUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUM3RCxLQUFLLHdCQUNBLEtBQUssSUFDUixLQUFLLE9BQUEsR0FDTixDQUFDO1NBQ0g7O1lBQ0ssV0FBVyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO2FBQ3RDLElBQUksQ0FDSCxHQUFHLENBQUMsVUFBQSxJQUFJOztZQUNOLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQUUsR0FBQyxRQUFRLElBQUcsSUFBSSxLQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQ0g7UUFDSCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDOztBQUdELE1BQU0sS0FBTyxvQkFBb0IsR0FBRyxVQUFVLFlBQTBCOztRQUNoRSxFQUFFLEdBQUcsVUFBQyxPQUF3Qjs7WUFDOUIsS0FBSyxHQUFHLFlBQVk7UUFDeEIsSUFBSSxZQUFZLENBQUMsS0FBSyxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFOztnQkFDL0QsS0FBSyxHQUFHLENBQUMsbUJBQUEsWUFBWSxDQUFDLEtBQUssRUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUM3RCxLQUFLLHdCQUNBLEtBQUssSUFDUixLQUFLLE9BQUEsR0FDTixDQUFDO1NBQ0g7O1lBQ0ssV0FBVyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO2FBQ3RDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxDQUFDLElBQUksRUFBTCxDQUFLLENBQUMsQ0FDdkI7UUFDSCxPQUFPLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBYnN0cmFjdENvbnRyb2wsIEFzeW5jVmFsaWRhdG9yRm59IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7QXBpRGF0YVByb3BzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb21tb25zVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge21hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtBcGlVdGlsc30gZnJvbSAnLi4vLi4vdXRpbHMvYXBpJztcblxuZXhwb3J0IGNvbnN0IE5nQXN5bmNWYWxpZGF0b3IgPSBmdW5jdGlvbiAocmVxdWVzdFByb3BzOiBBcGlEYXRhUHJvcHMsIGVycm9yS2V5Pzogc3RyaW5nKTogQXN5bmNWYWxpZGF0b3JGbiB7XG4gIGNvbnN0IGZuID0gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT4ge1xuICAgIGxldCBwcm9wcyA9IHJlcXVlc3RQcm9wcztcbiAgICBpZiAocmVxdWVzdFByb3BzLnF1ZXJ5ICYmIENvbW1vbnNVdGlscy5pc0Z1bmN0aW9uKHJlcXVlc3RQcm9wcy5xdWVyeSkpIHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gKHJlcXVlc3RQcm9wcy5xdWVyeSBhcyBGdW5jdGlvbikoY29udHJvbC52YWx1ZSk7XG4gICAgICBwcm9wcyA9IHtcbiAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgIHF1ZXJ5XG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBodHRwUmVxdWVzdCA9IEFwaVV0aWxzLmZldGNoKHByb3BzKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChkYXRhID0+IHtcbiAgICAgICAgICByZXR1cm4gIWRhdGEgPyBudWxsIDoge1tlcnJvcktleV06IHRydWV9O1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICByZXR1cm4gaHR0cFJlcXVlc3Q7XG4gIH07XG4gIHJldHVybiBmbjtcbn07XG5cblxuZXhwb3J0IGNvbnN0IEZvcm1seUFzeW5jVmFsaWRhdG9yID0gZnVuY3Rpb24gKHJlcXVlc3RQcm9wczogQXBpRGF0YVByb3BzKSB7XG4gIGNvbnN0IGZuID0gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT4ge1xuICAgIGxldCBwcm9wcyA9IHJlcXVlc3RQcm9wcztcbiAgICBpZiAocmVxdWVzdFByb3BzLnF1ZXJ5ICYmIENvbW1vbnNVdGlscy5pc0Z1bmN0aW9uKHJlcXVlc3RQcm9wcy5xdWVyeSkpIHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gKHJlcXVlc3RQcm9wcy5xdWVyeSBhcyBGdW5jdGlvbikoY29udHJvbC52YWx1ZSk7XG4gICAgICBwcm9wcyA9IHtcbiAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgIHF1ZXJ5XG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBodHRwUmVxdWVzdCA9IEFwaVV0aWxzLmZldGNoKHByb3BzKVxuICAgICAgLnBpcGUobWFwKGRhdGEgPT4gIWRhdGEpXG4gICAgICApO1xuICAgIHJldHVybiBodHRwUmVxdWVzdC50b1Byb21pc2UoKTtcbiAgfTtcbiAgcmV0dXJuIGZuO1xufTtcbiJdfQ==