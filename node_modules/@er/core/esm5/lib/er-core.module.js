/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { HttpClientModule } from '@angular/common/http';
import { InjectionToken, Injector, NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { RouteReuseStrategy, RouterModule } from '@angular/router';
import { NotifyLevel, NotifyType, StateNames, StompStates } from '@er/types';
import { ConfigUtils, StatesUtils } from '@er/utils';
import { StompConfig, StompService } from '@stomp/ng2-stompjs';
import { DynamicModule } from 'ng-dynamic-component';
import { NgPipesModule } from 'ngx-pipes';
import { distinctUntilChanged, tap } from 'rxjs/operators';
import { CoreComponents } from './components/all';
import { CoreDirectives } from './directives/all';
import { CoreInterceptors } from './interceptors/all';
import { CorePipes } from './pipes/all';
import { BACKGROUND_TASK_TOKEN } from './services/all';
import { RouterStateService } from './services/router/service';
import { CachedRouteReuseStrategy } from './services/strategy/service';
import { TaskService } from './services/task/service';
import { CORE_TASKS } from './tasks/all';
import { DateSyncUtils } from './utils/date-sync';
import { DiUtils } from './utils/di';
/** @type {?} */
export var APP_CONFIG = new InjectionToken('APP_CONFIG');
/**
 * @param {?} appConfig
 * @return {?}
 */
export function initialize(appConfig) {
    return function () {
        // ConfigUtils.configApp(appConfig);
    };
}
var ErCoreModule = /** @class */ (function () {
    function ErCoreModule(injector) {
        this.injector = injector;
        if (!DiUtils.injector) {
            DiUtils.injector = injector;
            // load services
            injector.get(RouterStateService);
            injector.get(TaskService);
            try {
                /** @type {?} */
                var stompService = injector.get(StompService);
                if (stompService && ConfigUtils.getConfig().stomp.enabled) {
                    stompService.state
                        .pipe(distinctUntilChanged(), tap(function (state) {
                        StatesUtils.update(StateNames.socket, { state: StompStates[state] });
                        StatesUtils.update(StateNames.notify, {
                            type: state === 0 ? NotifyType.ANNOUNCE : NotifyType.ALERT,
                            message: "\u6D88\u606F\u670D\u52A1\u5668\u72B6\u6001\uFF1A" + StompStates[state],
                            level: state === 0 ? NotifyLevel.ERROR : NotifyLevel.INFO
                        });
                    })).subscribe();
                }
            }
            catch (e) {
            }
        }
    }
    /**
     * @param {?} appConfig
     * @return {?}
     */
    ErCoreModule.forRoot = /**
     * @param {?} appConfig
     * @return {?}
     */
    function (appConfig) {
        return {
            ngModule: ErCoreModule,
            providers: tslib_1.__spread([
                { provide: APP_CONFIG, useValue: appConfig }
            ], CoreInterceptors, [
                appConfig.stomp.enabled ? StompService : [],
                appConfig.stomp.enabled ? { provide: StompConfig, useValue: appConfig.stomp } : [],
                { provide: BACKGROUND_TASK_TOKEN, useValue: DateSyncUtils.start, multi: true },
                { provide: BACKGROUND_TASK_TOKEN, useValue: CORE_TASKS, multi: true },
                {
                    provide: RouteReuseStrategy,
                    useClass: CachedRouteReuseStrategy
                }
            ])
        };
    };
    ErCoreModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        RouterModule,
                        HttpClientModule,
                        NgPipesModule,
                        DynamicModule.withComponents(CoreComponents)
                    ],
                    declarations: tslib_1.__spread(CoreComponents, CoreDirectives, CorePipes),
                    exports: tslib_1.__spread([
                        CommonModule,
                        RouterModule,
                        HttpClientModule,
                        NgPipesModule
                    ], CoreComponents, CoreDirectives, CorePipes)
                },] }
    ];
    /** @nocollapse */
    ErCoreModule.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return ErCoreModule;
}());
export { ErCoreModule };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ErCoreModule.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,