/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, TemplateRef } from '@angular/core';
import { ContentType } from '@er/types';
import { CommonsUtils } from '@er/utils';
import { dynamicDirectiveDef } from 'ng-dynamic-component';
import { Observable } from 'rxjs';
import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';
import { BaseComponent } from '../../bases/component';
import { PropsBindDirective } from '../../directives/props-bind/directive';
var DynaContentComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DynaContentComponent, _super);
    function DynaContentComponent(cd) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.CONTENT_TYPE = ContentType;
        _this.parsedContent$ = new BehaviorSubject(undefined);
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DynaContentComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.parse();
    };
    /**
     * @return {?}
     */
    DynaContentComponent.prototype.refresh = /**
     * @return {?}
     */
    function () {
        this.parse();
        this.cd.markForCheck();
    };
    /**
     * @private
     * @return {?}
     */
    DynaContentComponent.prototype.parse = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (CommonsUtils.isJson(this.content)) {
            if (this.content['content']) {
                if (this.content['styleClass']) {
                    this.styleClass = this.content['styleClass'];
                }
                if (this.content['style']) {
                    this.style = this.content['style'];
                }
                this.content = this.content['content'];
            }
            if (this.content['data']) {
                this.contentType = ContentType.DATA;
                this.parsedContent = [];
                Object.keys(this.content['data']).forEach(function (key) {
                    _this.parsedContent.push({
                        key: key,
                        value: CommonsUtils.getText(_this.content['data'][key])
                    });
                });
                return;
            }
            else if (this.content['type']) {
                this.contentType = ContentType.COMPONENT;
                this.dynaComponent = (/** @type {?} */ (this.content));
                /** @type {?} */
                var directives = this.dynaComponent.directives;
                /** @type {?} */
                var dynaDirectives_1 = [];
                if (directives) {
                    directives = CommonsUtils.getArrayValue(directives);
                    directives.filter(function (direct) { return !!direct.type; }).forEach(function (direct) {
                        dynaDirectives_1.push(dynamicDirectiveDef(direct.type, direct.inputs, direct.outputs));
                    });
                }
                if (this.dynaComponent.props || this.context) {
                    dynaDirectives_1.push(dynamicDirectiveDef(PropsBindDirective, Object.assign({}, this.dynaComponent.props || {}, this.context || {})));
                }
                this.dynaComponent.directives = dynaDirectives_1;
                return;
            }
            else {
                this.parsedContent = ((/** @type {?} */ (this.content))).content;
                this.parsedContext = tslib_1.__assign({}, ((/** @type {?} */ (this.content))).context || {}, this.context || {});
            }
        }
        else {
            this.parsedContent = this.content;
            this.parsedContext = this.context;
        }
        if (CommonsUtils.isString(this.parsedContent)) {
            if (CommonsUtils.isTemplateStr(this.parsedContent)) {
                this.parsedContent = CommonsUtils.templateStr(this.parsedContent, this.context) || '<span></span>';
                this.contentType = ContentType.TEMPLATE_STR;
            }
            else {
                this.contentType = ContentType.STRING;
            }
        }
        else if (this.parsedContent instanceof TemplateRef) {
            this.contentType = ContentType.TEMPLATE;
        }
        else if (CommonsUtils.isFunction(this.parsedContent)) {
            this.parsedContextFn = this.parsedContent;
            /** @type {?} */
            var rtn = this.parsedContextFn(this.parsedContext);
            if (rtn instanceof Observable) {
                ((/** @type {?} */ (rtn))).subscribe(function (result) { return _this.parsedContent$.next(CommonsUtils.toString(result)); });
            }
            else {
                this.parsedContent$.next(rtn);
            }
            this.contentType = ContentType.FUNCTION;
        }
    };
    DynaContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-dyna-content',
                    template: "\n    <ng-container [ngSwitch]=\"contentType\">\n      <div *ngSwitchCase=\"CONTENT_TYPE.STRING\" [ngClass]=\"styleClass\" [ngStyle]=\"style\" [innerHTML]=\"parsedContent|erSafeHtml\"></div>\n      <div *ngSwitchCase=\"CONTENT_TYPE.DATA\" class=\"d-flex\" [ngClass]=\"styleClass\" [ngStyle]=\"style\">\n        <div *ngFor=\"let item of parsedContent\" class=\"d-flex justify-content-center m-3\">\n          <span class=\"mr-2 font-weight-bold\">{{item.key}}</span>\n          <span [innerHTML]=\"item.value|erSafeHtml\"></span>\n        </div>\n      </div>\n      <span *ngSwitchCase=\"CONTENT_TYPE.TEMPLATE_STR\" [innerHTML]=\"parsedContent\" [ngClass]=\"styleClass\"\n            [ngStyle]=\"style\"></span>\n      <ng-container *ngSwitchCase=\"CONTENT_TYPE.FUNCTION\">\n        <ng-container *ngIf=\"parsedContent$|async as asyncContent\">\n          <span [innerHTML]=\"asyncContent\" [ngClass]=\"styleClass\" [ngStyle]=\"style\"></span>\n        </ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"CONTENT_TYPE.TEMPLATE\">\n        <ng-container *ngTemplateOutlet=\"parsedContent;context:parsedContext\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"CONTENT_TYPE.COMPONENT\">\n        <ndc-dynamic [ndcDynamicComponent]=\"dynaComponent.type\"\n                     [ndcDynamicDirectives]=\"dynaComponent.directives\"\n                     [ndcDynamicAttributes]=\"dynaComponent.attrs\"\n        >\n        </ndc-dynamic>\n      </ng-container>\n    </ng-container>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    DynaContentComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    DynaContentComponent.propDecorators = {
        content: [{ type: Input }],
        context: [{ type: Input }],
        styleClass: [{ type: Input }],
        style: [{ type: Input }]
    };
    return DynaContentComponent;
}(BaseComponent));
export { DynaContentComponent };
if (false) {
    /** @type {?} */
    DynaContentComponent.prototype.CONTENT_TYPE;
    /** @type {?} */
    DynaContentComponent.prototype.content;
    /** @type {?} */
    DynaContentComponent.prototype.context;
    /** @type {?} */
    DynaContentComponent.prototype.styleClass;
    /** @type {?} */
    DynaContentComponent.prototype.style;
    /** @type {?} */
    DynaContentComponent.prototype.parsedContent;
    /** @type {?} */
    DynaContentComponent.prototype.parsedContent$;
    /** @type {?} */
    DynaContentComponent.prototype.contentType;
    /** @type {?} */
    DynaContentComponent.prototype.parsedContext;
    /** @type {?} */
    DynaContentComponent.prototype.parsedContextFn;
    /** @type {?} */
    DynaContentComponent.prototype.dynaComponent;
    /** @type {?} */
    DynaContentComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,