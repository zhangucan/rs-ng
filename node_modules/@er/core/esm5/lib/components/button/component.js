/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';
import { StateNames } from '@er/types';
import { StatesUtils } from '@er/utils';
import { Subject } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { BaseComponent } from '../../bases/component';
var StateButtonComponent = /** @class */ (function (_super) {
    tslib_1.__extends(StateButtonComponent, _super);
    function StateButtonComponent(cd) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.type = 'button';
        _this.hint = '';
        _this.onClick = new EventEmitter();
        _this.onFocus = new EventEmitter();
        _this.onBlur = new EventEmitter();
        _this.processIcon = 'fa fa-cog fa-spin';
        _this.processing$ = new Subject();
        return _this;
    }
    Object.defineProperty(StateButtonComponent.prototype, "processing", {
        set: /**
         * @param {?} processing
         * @return {?}
         */
        function (processing) {
            this.processing$.next(processing);
            this.cd.markForCheck(); // used for not dom event modify
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StateButtonComponent.prototype, "btnLabel", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.processing) {
                return this.stateLabel || this.label;
            }
            else {
                return this.label || '';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StateButtonComponent.prototype, "btnTitle", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.processing) {
                return this.stateHint || '执行中...';
            }
            else {
                return this.hint || '';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    StateButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.stateKey) {
            this.$subscriptions = StatesUtils.observe(StateNames.http, this.stateKey)
                .pipe(filter(function (state) { return !!state; }), map(function (state) { return state['start']; })).subscribe(function (b) { return _this.processing$.next(b); });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    StateButtonComponent.prototype.click = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onClick.emit(tslib_1.__assign({}, event, this.context || {}));
    };
    StateButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-button',
                    template: "<button *ngIf=\"!hidden\"\n        [attr.type]=\"type\"\n        [ngClass]=\"styleClass\"\n        [ngStyle]=\"style\"\n        [disabled]=\"disabled || (processing$|async) \"\n        [title]=\"hint\"\n        (click)=\"click($event)\"\n        (focus)=\"emitEvent('onFocus',$event)\"\n        (blur)=\"emitEvent('onBlur',$event)\"\n>\n  <i *ngIf=\"!iconRight && !(processing$|async)\" [ngClass]=\"icon\"></i> {{btnLabel}}\n  <ng-content></ng-content>\n  <i *ngIf=\"iconRight && !(processing$|async)\" [ngClass]=\"icon\"  ></i>\n  <i *ngIf=\"processing$|async\" [ngClass]=\"processIcon\" style=\"margin-left: 5px\"></i>\n</button>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    StateButtonComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    StateButtonComponent.propDecorators = {
        type: [{ type: Input }],
        hint: [{ type: Input }],
        label: [{ type: Input }],
        icon: [{ type: Input }],
        style: [{ type: Input }],
        hidden: [{ type: Input }],
        styleClass: [{ type: Input }],
        disabled: [{ type: Input }],
        iconRight: [{ type: Input }],
        stateKey: [{ type: Input }],
        stateLabel: [{ type: Input }],
        stateHint: [{ type: Input }],
        context: [{ type: Input }],
        onClick: [{ type: Output }],
        onFocus: [{ type: Output }],
        onBlur: [{ type: Output }],
        processing: [{ type: Input }]
    };
    return StateButtonComponent;
}(BaseComponent));
export { StateButtonComponent };
if (false) {
    /** @type {?} */
    StateButtonComponent.prototype.type;
    /** @type {?} */
    StateButtonComponent.prototype.hint;
    /** @type {?} */
    StateButtonComponent.prototype.label;
    /** @type {?} */
    StateButtonComponent.prototype.icon;
    /** @type {?} */
    StateButtonComponent.prototype.style;
    /** @type {?} */
    StateButtonComponent.prototype.hidden;
    /** @type {?} */
    StateButtonComponent.prototype.styleClass;
    /** @type {?} */
    StateButtonComponent.prototype.disabled;
    /** @type {?} */
    StateButtonComponent.prototype.iconRight;
    /** @type {?} */
    StateButtonComponent.prototype.stateKey;
    /** @type {?} */
    StateButtonComponent.prototype.stateLabel;
    /** @type {?} */
    StateButtonComponent.prototype.stateHint;
    /** @type {?} */
    StateButtonComponent.prototype.context;
    /** @type {?} */
    StateButtonComponent.prototype.onClick;
    /** @type {?} */
    StateButtonComponent.prototype.onFocus;
    /** @type {?} */
    StateButtonComponent.prototype.onBlur;
    /** @type {?} */
    StateButtonComponent.prototype.processIcon;
    /** @type {?} */
    StateButtonComponent.prototype.processing$;
    /**
     * @type {?}
     * @protected
     */
    StateButtonComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9idXR0b24vY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6SCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUMsTUFBTSxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUVwRDtJQUswQyxnREFBYTtJQXdCckQsOEJBQXNCLEVBQXFCO1FBQTNDLFlBQ0UsaUJBQU8sU0FDUjtRQUZxQixRQUFFLEdBQUYsRUFBRSxDQUFtQjtRQXRCbEMsVUFBSSxHQUFzQixRQUFRLENBQUM7UUFDbkMsVUFBSSxHQUFHLEVBQUUsQ0FBQztRQWFULGFBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNoRCxhQUFPLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDaEQsWUFBTSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRXpELGlCQUFXLEdBQUcsbUJBQW1CLENBQUM7UUFFbEMsaUJBQVcsR0FBcUIsSUFBSSxPQUFPLEVBQVcsQ0FBQzs7SUFJdkQsQ0FBQztJQUVELHNCQUNJLDRDQUFVOzs7OztRQURkLFVBQ2UsVUFBbUI7WUFDaEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLGdDQUFnQztRQUMxRCxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLDBDQUFROzs7O1FBQVo7WUFDRSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ25CLE9BQU8sSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQ3RDO2lCQUFNO2dCQUNMLE9BQU8sSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7YUFDekI7UUFDSCxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLDBDQUFROzs7O1FBQVo7WUFDRSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ25CLE9BQU8sSUFBSSxDQUFDLFNBQVMsSUFBSSxRQUFRLENBQUM7YUFDbkM7aUJBQU07Z0JBQ0wsT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQzthQUN4QjtRQUNILENBQUM7OztPQUFBOzs7O0lBRUQsdUNBQVE7OztJQUFSO1FBQUEsaUJBUUM7UUFQQyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLGNBQWMsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQztpQkFDdEUsSUFBSSxDQUNILE1BQU0sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLENBQUMsQ0FBQyxLQUFLLEVBQVAsQ0FBTyxDQUFDLEVBQ3hCLEdBQUcsQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBZCxDQUFjLENBQUMsQ0FDN0IsQ0FBQyxTQUFTLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBeEIsQ0FBd0IsQ0FBQyxDQUFDO1NBQzlDO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxvQ0FBSzs7OztJQUFMLFVBQU0sS0FBSztRQUNULElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxzQkFDWixLQUFLLEVBQ0wsSUFBSSxDQUFDLE9BQU8sSUFBSSxFQUFFLEVBQ3JCLENBQUM7SUFDTCxDQUFDOztnQkF0RUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxXQUFXO29CQUNyQixxb0JBQXVCO29CQUN2QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7Ozs7Z0JBWGdDLGlCQUFpQjs7O3VCQWMvQyxLQUFLO3VCQUNMLEtBQUs7d0JBQ0wsS0FBSzt1QkFDTCxLQUFLO3dCQUNMLEtBQUs7eUJBQ0wsS0FBSzs2QkFDTCxLQUFLOzJCQUNMLEtBQUs7NEJBQ0wsS0FBSzsyQkFDTCxLQUFLOzZCQUNMLEtBQUs7NEJBQ0wsS0FBSzswQkFDTCxLQUFLOzBCQUVMLE1BQU07MEJBQ04sTUFBTTt5QkFDTixNQUFNOzZCQVVOLEtBQUs7O0lBc0NSLDJCQUFDO0NBQUEsQUF2RUQsQ0FLMEMsYUFBYSxHQWtFdEQ7U0FsRVksb0JBQW9COzs7SUFFL0Isb0NBQTRDOztJQUM1QyxvQ0FBbUI7O0lBQ25CLHFDQUF1Qjs7SUFDdkIsb0NBQXNCOztJQUN0QixxQ0FBbUI7O0lBQ25CLHNDQUF5Qjs7SUFDekIsMENBQTRCOztJQUM1Qix3Q0FBMkI7O0lBQzNCLHlDQUE0Qjs7SUFDNUIsd0NBQTBCOztJQUMxQiwwQ0FBNEI7O0lBQzVCLHlDQUEyQjs7SUFDM0IsdUNBQXFCOztJQUVyQix1Q0FBMEQ7O0lBQzFELHVDQUEwRDs7SUFDMUQsc0NBQXlEOztJQUV6RCwyQ0FBa0M7O0lBRWxDLDJDQUF1RDs7Ozs7SUFFM0Msa0NBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTdGF0ZU5hbWVzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtTdGF0ZXNVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZpbHRlciwgbWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0Jhc2VDb21wb25lbnR9IGZyb20gJy4uLy4uL2Jhc2VzL2NvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2VyLWJ1dHRvbicsXG4gIHRlbXBsYXRlVXJsOiAndHBsLmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBTdGF0ZUJ1dHRvbkNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIHR5cGU6ICdidXR0b24nIHwgJ2xpbmsnID0gJ2J1dHRvbic7XG4gIEBJbnB1dCgpIGhpbnQgPSAnJztcbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgaWNvbjogc3RyaW5nO1xuICBASW5wdXQoKSBzdHlsZToge307XG4gIEBJbnB1dCgpIGhpZGRlbjogYm9vbGVhbjtcbiAgQElucHV0KCkgc3R5bGVDbGFzczogc3RyaW5nO1xuICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbjtcbiAgQElucHV0KCkgaWNvblJpZ2h0OiBib29sZWFuO1xuICBASW5wdXQoKSBzdGF0ZUtleTogc3RyaW5nO1xuICBASW5wdXQoKSBzdGF0ZUxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHN0YXRlSGludDogc3RyaW5nO1xuICBASW5wdXQoKSBjb250ZXh0OiB7fTtcblxuICBAT3V0cHV0KCkgb25DbGljazogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBvbkZvY3VzOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIG9uQmx1cjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcHJvY2Vzc0ljb24gPSAnZmEgZmEtY29nIGZhLXNwaW4nO1xuXG4gIHByb2Nlc3NpbmckOiBTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBwcm9jZXNzaW5nKHByb2Nlc3Npbmc6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnByb2Nlc3NpbmckLm5leHQocHJvY2Vzc2luZyk7XG4gICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTsgLy8gdXNlZCBmb3Igbm90IGRvbSBldmVudCBtb2RpZnlcbiAgfVxuXG4gIGdldCBidG5MYWJlbCgpIHtcbiAgICBpZiAodGhpcy5wcm9jZXNzaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZUxhYmVsIHx8IHRoaXMubGFiZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmxhYmVsIHx8ICcnO1xuICAgIH1cbiAgfVxuXG4gIGdldCBidG5UaXRsZSgpIHtcbiAgICBpZiAodGhpcy5wcm9jZXNzaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZUhpbnQgfHwgJ+aJp+ihjOS4rS4uLic7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmhpbnQgfHwgJyc7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGVLZXkpIHtcbiAgICAgIHRoaXMuJHN1YnNjcmlwdGlvbnMgPSBTdGF0ZXNVdGlscy5vYnNlcnZlKFN0YXRlTmFtZXMuaHR0cCwgdGhpcy5zdGF0ZUtleSlcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgZmlsdGVyKHN0YXRlID0+ICEhc3RhdGUpLFxuICAgICAgICAgIG1hcChzdGF0ZSA9PiBzdGF0ZVsnc3RhcnQnXSlcbiAgICAgICAgKS5zdWJzY3JpYmUoYiA9PiB0aGlzLnByb2Nlc3NpbmckLm5leHQoYikpO1xuICAgIH1cbiAgfVxuXG4gIGNsaWNrKGV2ZW50KSB7XG4gICAgdGhpcy5vbkNsaWNrLmVtaXQoe1xuICAgICAgLi4uZXZlbnQsXG4gICAgICAuLi50aGlzLmNvbnRleHQgfHwge31cbiAgICB9KTtcbiAgfVxufVxuIl19