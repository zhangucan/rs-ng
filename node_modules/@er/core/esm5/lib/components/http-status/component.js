/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { BaseComponent } from '../../bases/component';
import { HTTP_STATE$, HTTP_TAG_STATE$ } from '../../states/all';
var HttpStatusComponent = /** @class */ (function (_super) {
    tslib_1.__extends(HttpStatusComponent, _super);
    function HttpStatusComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.loadingClass = 'loading-circle';
        return _this;
    }
    Object.defineProperty(HttpStatusComponent.prototype, "httpState$", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var subject;
            if (!this.tag) {
                subject = HTTP_STATE$;
            }
            else {
                subject = HTTP_TAG_STATE$(this.tag);
            }
            return subject;
        },
        enumerable: true,
        configurable: true
    });
    HttpStatusComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-http-status',
                    template: "    \n      <ng-container *ngIf=\"httpState$|async\">\n        <ng-container *ngTemplateOutlet=\"template('_',default)\"></ng-container>\n        <ng-template #default>\n          <div [ngClass]=\"loadingClass\"></div>\n        </ng-template>\n      </ng-container>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    HttpStatusComponent.propDecorators = {
        tag: [{ type: Input }],
        loadingClass: [{ type: Input }]
    };
    return HttpStatusComponent;
}(BaseComponent));
export { HttpStatusComponent };
if (false) {
    /** @type {?} */
    HttpStatusComponent.prototype.tag;
    /** @type {?} */
    HttpStatusComponent.prototype.loadingClass;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9odHRwLXN0YXR1cy9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN4RSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDcEQsT0FBTyxFQUFDLFdBQVcsRUFBRSxlQUFlLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUc5RDtJQVl5QywrQ0FBYTtJQVp0RDtRQUFBLHFFQTRCQztRQVpVLGtCQUFZLEdBQUcsZ0JBQWdCLENBQUM7O0lBWTNDLENBQUM7SUFWQyxzQkFBSSwyQ0FBVTs7OztRQUFkOztnQkFDTSxPQUFPO1lBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ2IsT0FBTyxHQUFHLFdBQVcsQ0FBQzthQUN2QjtpQkFBTTtnQkFDTCxPQUFPLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNyQztZQUNELE9BQU8sT0FBTyxDQUFDO1FBQ2pCLENBQUM7OztPQUFBOztnQkExQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFFBQVEsRUFBRSwrUUFPVDtvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7OztzQkFHRSxLQUFLOytCQUVMLEtBQUs7O0lBWVIsMEJBQUM7Q0FBQSxBQTVCRCxDQVl5QyxhQUFhLEdBZ0JyRDtTQWhCWSxtQkFBbUI7OztJQUU5QixrQ0FBYTs7SUFFYiwyQ0FBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmFzZUNvbXBvbmVudH0gZnJvbSAnLi4vLi4vYmFzZXMvY29tcG9uZW50JztcbmltcG9ydCB7SFRUUF9TVEFURSQsIEhUVFBfVEFHX1NUQVRFJH0gZnJvbSAnLi4vLi4vc3RhdGVzL2FsbCc7XG5cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZXItaHR0cC1zdGF0dXMnLFxuICB0ZW1wbGF0ZTogYCAgICBcbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJodHRwU3RhdGUkfGFzeW5jXCI+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0ZW1wbGF0ZSgnXycsZGVmYXVsdClcIj48L25nLWNvbnRhaW5lcj5cbiAgICAgICAgPG5nLXRlbXBsYXRlICNkZWZhdWx0PlxuICAgICAgICAgIDxkaXYgW25nQ2xhc3NdPVwibG9hZGluZ0NsYXNzXCI+PC9kaXY+XG4gICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgYCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIEh0dHBTdGF0dXNDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcblxuICBASW5wdXQoKSB0YWc7XG5cbiAgQElucHV0KCkgbG9hZGluZ0NsYXNzID0gJ2xvYWRpbmctY2lyY2xlJztcblxuICBnZXQgaHR0cFN0YXRlJCgpIHtcbiAgICBsZXQgc3ViamVjdDtcbiAgICBpZiAoIXRoaXMudGFnKSB7XG4gICAgICBzdWJqZWN0ID0gSFRUUF9TVEFURSQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1YmplY3QgPSBIVFRQX1RBR19TVEFURSQodGhpcy50YWcpO1xuICAgIH1cbiAgICByZXR1cm4gc3ViamVjdDtcbiAgfVxuXG59XG4iXX0=