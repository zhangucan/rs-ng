/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, Renderer2, ViewContainerRef } from '@angular/core';
import { CommonsUtils } from '@er/utils';
import { ComponentUtils } from '../../utils/component';
import { DynaComponentUtils } from '../../utils/dyna';
var DynaCompComponent = /** @class */ (function () {
    function DynaCompComponent(viewContainerRef, el, renderer) {
        this.viewContainerRef = viewContainerRef;
        this.el = el;
        this.renderer = renderer;
        this.onCreated = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DynaCompComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.type) {
            this.createComponent();
        }
    };
    /**
     * @return {?}
     */
    DynaCompComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.component) {
            this.component.destroy();
            this.component = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    DynaCompComponent.prototype.createComponent = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.type) {
            if (CommonsUtils.isString(this.type)) {
                this.component = DynaComponentUtils.createComponentByTemplate(this.viewContainerRef, (/** @type {?} */ (this.type)));
            }
            else {
                this.component = DynaComponentUtils.createComponentByType(this.viewContainerRef, (/** @type {?} */ (this.type)));
            }
            ComponentUtils.bind(this.component.instance, this.props);
            this.onCreated.emit(this.component);
            /** @type {?} */
            var parent_1 = this.el.nativeElement.parentNode;
            this.renderer.removeChild(parent_1, this.el.nativeElement);
        }
    };
    DynaCompComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-dyna-component',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    DynaCompComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    DynaCompComponent.propDecorators = {
        type: [{ type: Input }],
        props: [{ type: Input }],
        onCreated: [{ type: Output }]
    };
    return DynaCompComponent;
}());
export { DynaCompComponent };
if (false) {
    /** @type {?} */
    DynaCompComponent.prototype.type;
    /** @type {?} */
    DynaCompComponent.prototype.props;
    /** @type {?} */
    DynaCompComponent.prototype.onCreated;
    /**
     * @type {?}
     * @private
     */
    DynaCompComponent.prototype.component;
    /**
     * @type {?}
     * @private
     */
    DynaCompComponent.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    DynaCompComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DynaCompComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9keW5hLWNvbXBvbmVudC9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUVULFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFDTixTQUFTLEVBR1QsZ0JBQWdCLEVBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3JELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBR3BEO0lBWUUsMkJBQW9CLGdCQUFrQyxFQUNsQyxFQUFjLEVBQ2QsUUFBbUI7UUFGbkIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQU43QixjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQU96QyxDQUFDOzs7OztJQUVELHVDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDaEIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQzs7OztJQUVELHVDQUFXOzs7SUFBWDtRQUNFLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQzs7Ozs7SUFFTywyQ0FBZTs7OztJQUF2QjtRQUNFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3BDLElBQUksQ0FBQyxTQUFTLEdBQUcsa0JBQWtCLENBQUMseUJBQXlCLENBQzNELElBQUksQ0FBQyxnQkFBZ0IsRUFDckIsbUJBQVEsSUFBSSxDQUFDLElBQUksRUFBQSxDQUNsQixDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQyxxQkFBcUIsQ0FDdkQsSUFBSSxDQUFDLGdCQUFnQixFQUNyQixtQkFBVyxJQUFJLENBQUMsSUFBSSxFQUFBLENBQ3JCLENBQUM7YUFDSDtZQUNELGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzs7Z0JBQzlCLFFBQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVO1lBQy9DLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFFBQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzFEO0lBQ0gsQ0FBQzs7Z0JBaERGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixRQUFRLEVBQUUsRUFBRTtvQkFDWixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7Ozs7Z0JBWEMsZ0JBQWdCO2dCQVBoQixVQUFVO2dCQUlWLFNBQVM7Ozt1QkFnQlIsS0FBSzt3QkFDTCxLQUFLOzRCQUNMLE1BQU07O0lBeUNULHdCQUFDO0NBQUEsQUFqREQsSUFpREM7U0E1Q1ksaUJBQWlCOzs7SUFDNUIsaUNBQWtDOztJQUNsQyxrQ0FBbUI7O0lBQ25CLHNDQUF5Qzs7Ozs7SUFFekMsc0NBQW9DOzs7OztJQUV4Qiw2Q0FBMEM7Ozs7O0lBQzFDLCtCQUFzQjs7Ozs7SUFDdEIscUNBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgQ29tcG9uZW50UmVmLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIFJlbmRlcmVyMixcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVHlwZSxcbiAgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtDb21wb25lbnRVdGlsc30gZnJvbSAnLi4vLi4vdXRpbHMvY29tcG9uZW50JztcbmltcG9ydCB7RHluYUNvbXBvbmVudFV0aWxzfSBmcm9tICcuLi8uLi91dGlscy9keW5hJztcblxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdlci1keW5hLWNvbXBvbmVudCcsXG4gIHRlbXBsYXRlOiAnJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgRHluYUNvbXBDb21wb25lbnQge1xuICBASW5wdXQoKSB0eXBlOiBUeXBlPGFueT4gfCBzdHJpbmc7XG4gIEBJbnB1dCgpIHByb3BzOiB7fTtcbiAgQE91dHB1dCgpIG9uQ3JlYXRlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBwcml2YXRlIGNvbXBvbmVudDogQ29tcG9uZW50UmVmPHt9PjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLnR5cGUpIHtcbiAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XG4gICAgICB0aGlzLmNvbXBvbmVudC5kZXN0cm95KCk7XG4gICAgICB0aGlzLmNvbXBvbmVudCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVDb21wb25lbnQoKSB7XG4gICAgaWYgKHRoaXMudHlwZSkge1xuICAgICAgaWYgKENvbW1vbnNVdGlscy5pc1N0cmluZyh0aGlzLnR5cGUpKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gRHluYUNvbXBvbmVudFV0aWxzLmNyZWF0ZUNvbXBvbmVudEJ5VGVtcGxhdGUoXG4gICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLFxuICAgICAgICAgIDxzdHJpbmc+dGhpcy50eXBlXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbXBvbmVudCA9IER5bmFDb21wb25lbnRVdGlscy5jcmVhdGVDb21wb25lbnRCeVR5cGUoXG4gICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLFxuICAgICAgICAgIDxUeXBlPGFueT4+dGhpcy50eXBlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBDb21wb25lbnRVdGlscy5iaW5kKHRoaXMuY29tcG9uZW50Lmluc3RhbmNlLCB0aGlzLnByb3BzKTtcbiAgICAgIHRoaXMub25DcmVhdGVkLmVtaXQodGhpcy5jb21wb25lbnQpO1xuICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNoaWxkKHBhcmVudCwgdGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==