/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { StateNames } from '@er/types';
import { CommonsUtils, ConfigUtils, RegUtils, StatesUtils } from '@er/utils';
import { filter, map } from 'rxjs/operators';
import { BaseComponent } from '../../bases/component';
/** @type {?} */
var ROUTE_DATA_BREADCRUMB_KEY = 'breadcrumb';
var BreadcrumbsComponent = /** @class */ (function (_super) {
    tslib_1.__extends(BreadcrumbsComponent, _super);
    function BreadcrumbsComponent(router, route) {
        var _this = _super.call(this) || this;
        _this.router = router;
        _this.route = route;
        _this.outlet = 'primary';
        return _this;
    }
    /**
     * @return {?}
     */
    BreadcrumbsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.breadcrumbs$ = StatesUtils.observe(StateNames.nav)
            .pipe(filter(function (state) { return state && state.status === 'success'; }), map(function () { return _this.resolveRoute(); }));
    };
    /**
     * @param {?} breadcrumb
     * @return {?}
     */
    BreadcrumbsComponent.prototype.getRouterLink = /**
     * @param {?} breadcrumb
     * @return {?}
     */
    function (breadcrumb) {
        if (breadcrumb.params) {
            return [breadcrumb.url, breadcrumb.params];
        }
        else {
            return [breadcrumb.url];
        }
    };
    /**
     * @private
     * @return {?}
     */
    BreadcrumbsComponent.prototype.resolveRoute = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var breadcrumbs = [];
        /** @type {?} */
        var currentRoute = this.route.root;
        /** @type {?} */
        var menus = StatesUtils.getValue(StateNames.rootMenu);
        /** @type {?} */
        var url;
        /** @type {?} */
        var prefix = CommonsUtils.get(ConfigUtils.getConfig(), 'breadcrumb.prefix');
        /** @type {?} */
        var excludes = CommonsUtils.get(ConfigUtils.getConfig(), 'breadcrumb.excludes');
        /** @type {?} */
        var lastLabel = '';
        do {
            /** @type {?} */
            var childrenRoutes = currentRoute.children;
            currentRoute = null;
            childrenRoutes.forEach(function (route) {
                if (route.outlet === _this.outlet) {
                    /** @type {?} */
                    var routeSnapshot = route.snapshot;
                    /** @type {?} */
                    var label = null;
                    if (routeSnapshot.routeConfig && routeSnapshot.routeConfig.data && routeSnapshot.routeConfig.data[ROUTE_DATA_BREADCRUMB_KEY]) {
                        label = routeSnapshot.routeConfig.data[ROUTE_DATA_BREADCRUMB_KEY];
                    }
                    if (!label) {
                        /** @type {?} */
                        var currentUrl = routeSnapshot.url.join('/');
                        if (currentUrl && currentUrl.trim().length > 0) {
                            if (!url) {
                                url = currentUrl;
                            }
                            else {
                                url = url + '/' + currentUrl;
                            }
                        }
                        if (url && !RegUtils.test(url, excludes)) {
                            /** @type {?} */
                            var parts = url.split('/');
                            /** @type {?} */
                            var menu = CommonsUtils.deepFind(menus, { routerLink: url }, { routerLink: "/" + url }, { name: parts[parts.length - 1] });
                            if (menu && menu.length > 0) {
                                label = ((/** @type {?} */ (menu[0]))).label;
                            }
                        }
                    }
                    if (label && label.length !== 0 && label !== lastLabel) {
                        if (url.length === 0) {
                            routeSnapshot.params = {};
                        }
                        breadcrumbs.push((/** @type {?} */ ({
                            label: label,
                            url: url,
                            params: routeSnapshot.params
                        })));
                    }
                    currentRoute = route;
                    lastLabel = label;
                }
            });
        } while (currentRoute);
        if (prefix) {
            return prefix.concat(breadcrumbs);
        }
        else {
            return breadcrumbs;
        }
    };
    BreadcrumbsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-breadcrumbs',
                    template: "<ol class=\"breadcrumb\">\n    <ng-container *ngTemplateOutlet=\"templates?.before\"></ng-container>\n    <ng-container *ngFor=\"let breadcrumb of breadcrumbs$|async;let last=last\">\n        <li class=\"breadcrumb-item\" [ngClass]=\"{active: last}\">\n            <a *ngIf=\"!last\" [routerLink]=\"getRouterLink(breadcrumb)\">{{breadcrumb.label}}</a>\n            <span *ngIf=\"last\">{{breadcrumb.label}}</span>\n        </li>\n    </ng-container>\n    <ng-container *ngTemplateOutlet=\"templates?.after\"></ng-container>\n</ol>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    BreadcrumbsComponent.ctorParameters = function () { return [
        { type: Router },
        { type: ActivatedRoute }
    ]; };
    BreadcrumbsComponent.propDecorators = {
        outlet: [{ type: Input }]
    };
    return BreadcrumbsComponent;
}(BaseComponent));
export { BreadcrumbsComponent };
if (false) {
    /** @type {?} */
    BreadcrumbsComponent.prototype.outlet;
    /** @type {?} */
    BreadcrumbsComponent.prototype.breadcrumbs$;
    /**
     * @type {?}
     * @private
     */
    BreadcrumbsComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    BreadcrumbsComponent.prototype.route;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9icmVhZGNydW1iL2NvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBQyxjQUFjLEVBQUUsTUFBTSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDdkQsT0FBTyxFQUE2QixVQUFVLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDakUsT0FBTyxFQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUUzRSxPQUFPLEVBQUMsTUFBTSxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQzs7SUFFOUMseUJBQXlCLEdBQUcsWUFBWTtBQUU5QztJQUswQyxnREFBYTtJQU1yRCw4QkFBb0IsTUFBYyxFQUNkLEtBQXFCO1FBRHpDLFlBRUUsaUJBQU8sU0FDUjtRQUhtQixZQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsV0FBSyxHQUFMLEtBQUssQ0FBZ0I7UUFMaEMsWUFBTSxHQUFHLFNBQVMsQ0FBQzs7SUFPNUIsQ0FBQzs7OztJQUVELHVDQUFROzs7SUFBUjtRQUFBLGlCQU1DO1FBTEMsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7YUFDcEQsSUFBSSxDQUNILE1BQU0sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBbkMsQ0FBbUMsQ0FBQyxFQUNwRCxHQUFHLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxZQUFZLEVBQUUsRUFBbkIs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LE1BQU0sR0FBRyxFQUFFLENBQUM7eUJBQUU7d0JBQ3BELFdBQVcsQ0FBQyxJQUFJLENBQUMsbUJBQVk7NEJBQzNCLEtBQUssRUFBRSxLQUFLOzRCQUNaLEdBQUcsRUFBRSxHQUFHOzRCQUNSLE1BQU0sRUFBRSxhQUFhLENBQUMsTUFBTTt5QkFDN0IsRUFBQSxDQUFDLENBQUM7cUJBQ0o7b0JBQ0QsWUFBWSxHQUFHLEtBQUssQ0FBQztvQkFDckIsU0FBUyxHQUFHLEtBQUssQ0FBQztpQkFDbkI7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKLFFBQVEsWUFBWSxFQUFFO1FBRXZCLElBQUksTUFBTSxFQUFFO1lBQ1YsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ25DO2FBQU07WUFDTCxPQUFPLFdBQVcsQ0FBQztTQUNwQjtJQUNILENBQUM7O2dCQXRGRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsZ2lCQUF1QjtvQkFDdkIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzs7O2dCQWJ1QixNQUFNO2dCQUF0QixjQUFjOzs7eUJBZ0JuQixLQUFLOztJQWlGUiwyQkFBQztDQUFBLEFBeEZELENBSzBDLGFBQWEsR0FtRnREO1NBbkZZLG9CQUFvQjs7O0lBRS9CLHNDQUE0Qjs7SUFFNUIsNENBQXVDOzs7OztJQUUzQixzQ0FBc0I7Ozs7O0lBQ3RCLHFDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0FjdGl2YXRlZFJvdXRlLCBSb3V0ZXJ9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge0JyZWFkY3J1bWIsIE1lbnUsIE1lbnVJdGVtLCBTdGF0ZU5hbWVzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb21tb25zVXRpbHMsIENvbmZpZ1V0aWxzLCBSZWdVdGlscywgU3RhdGVzVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmaWx0ZXIsIG1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtCYXNlQ29tcG9uZW50fSBmcm9tICcuLi8uLi9iYXNlcy9jb21wb25lbnQnO1xuXG5jb25zdCBST1VURV9EQVRBX0JSRUFEQ1JVTUJfS0VZID0gJ2JyZWFkY3J1bWInO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdlci1icmVhZGNydW1icycsXG4gIHRlbXBsYXRlVXJsOiAndHBsLmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgQnJlYWRjcnVtYnNDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoKSBvdXRsZXQgPSAncHJpbWFyeSc7XG5cbiAgYnJlYWRjcnVtYnMkOiBPYnNlcnZhYmxlPEJyZWFkY3J1bWJbXT47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICAgICAgICAgICAgcHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGUpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5icmVhZGNydW1icyQgPSBTdGF0ZXNVdGlscy5vYnNlcnZlKFN0YXRlTmFtZXMubmF2KVxuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbHRlcihzdGF0ZSA9PiBzdGF0ZSAmJiBzdGF0ZS5zdGF0dXMgPT09ICdzdWNjZXNzJyksXG4gICAgICAgIG1hcCgoKSA9PiB0aGlzLnJlc29sdmVSb3V0ZSgpKVxuICAgICAgKTtcbiAgfVxuXG4gIGdldFJvdXRlckxpbmsoYnJlYWRjcnVtYjogQnJlYWRjcnVtYikge1xuICAgIGlmIChicmVhZGNydW1iLnBhcmFtcykge1xuICAgICAgcmV0dXJuIFticmVhZGNydW1iLnVybCwgYnJlYWRjcnVtYi5wYXJhbXNdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW2JyZWFkY3J1bWIudXJsXTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlc29sdmVSb3V0ZSgpIHtcbiAgICBjb25zdCBicmVhZGNydW1icyA9IFtdO1xuICAgIGxldCBjdXJyZW50Um91dGUgPSB0aGlzLnJvdXRlLnJvb3Q7XG4gICAgY29uc3QgbWVudXM6IE1lbnUgPSBTdGF0ZXNVdGlscy5nZXRWYWx1ZShTdGF0ZU5hbWVzLnJvb3RNZW51KTtcbiAgICBsZXQgdXJsO1xuICAgIGNvbnN0IHByZWZpeCA9IENvbW1vbnNVdGlscy5nZXQoQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCksICdicmVhZGNydW1iLnByZWZpeCcpO1xuICAgIGNvbnN0IGV4Y2x1ZGVzID0gQ29tbW9uc1V0aWxzLmdldChDb25maWdVdGlscy5nZXRDb25maWcoKSwgJ2JyZWFkY3J1bWIuZXhjbHVkZXMnKTtcbiAgICBsZXQgbGFzdExhYmVsID0gJyc7XG4gICAgZG8ge1xuICAgICAgY29uc3QgY2hpbGRyZW5Sb3V0ZXMgPSBjdXJyZW50Um91dGUuY2hpbGRyZW47XG4gICAgICBjdXJyZW50Um91dGUgPSBudWxsO1xuICAgICAgY2hpbGRyZW5Sb3V0ZXMuZm9yRWFjaChyb3V0ZSA9PiB7XG4gICAgICAgIGlmIChyb3V0ZS5vdXRsZXQgPT09IHRoaXMub3V0bGV0KSB7XG4gICAgICAgICAgY29uc3Qgcm91dGVTbmFwc2hvdCA9IHJvdXRlLnNuYXBzaG90O1xuICAgICAgICAgIGxldCBsYWJlbCA9IG51bGw7XG4gICAgICAgICAgaWYgKHJvdXRlU25hcHNob3Qucm91dGVDb25maWcgJiYgcm91dGVTbmFwc2hvdC5yb3V0ZUNvbmZpZy5kYXRhICYmIHJvdXRlU25hcHNob3Qucm91dGVDb25maWcuZGF0YVtST1VURV9EQVRBX0JSRUFEQ1JVTUJfS0VZXSkge1xuICAgICAgICAgICAgbGFiZWwgPSByb3V0ZVNuYXBzaG90LnJvdXRlQ29uZmlnLmRhdGFbUk9VVEVfREFUQV9CUkVBRENSVU1CX0tFWV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghbGFiZWwpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRVcmwgPSByb3V0ZVNuYXBzaG90LnVybC5qb2luKCcvJyk7XG4gICAgICAgICAgICBpZiAoY3VycmVudFVybCAmJiBjdXJyZW50VXJsLnRyaW0oKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGlmICghdXJsKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gY3VycmVudFVybDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cmwgPSB1cmwgKyAnLycgKyBjdXJyZW50VXJsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXJsICYmICFSZWdVdGlscy50ZXN0KHVybCwgZXhjbHVkZXMpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gdXJsLnNwbGl0KCcvJyk7XG4gICAgICAgICAgICAgIGNvbnN0IG1lbnUgPSBDb21tb25zVXRpbHMuZGVlcEZpbmQobWVudXMsIHtyb3V0ZXJMaW5rOiB1cmx9LCB7cm91dGVyTGluazogYC8ke3VybH1gfSwge25hbWU6IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdfSk7XG4gICAgICAgICAgICAgIGlmIChtZW51ICYmIG1lbnUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGxhYmVsID0gKDxNZW51SXRlbT5tZW51WzBdKS5sYWJlbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobGFiZWwgJiYgbGFiZWwubGVuZ3RoICE9PSAwICYmIGxhYmVsICE9PSBsYXN0TGFiZWwpIHtcbiAgICAgICAgICAgIGlmICh1cmwubGVuZ3RoID09PSAwKSB7IHJvdXRlU25hcHNob3QucGFyYW1zID0ge307IH1cbiAgICAgICAgICAgIGJyZWFkY3J1bWJzLnB1c2goPEJyZWFkY3J1bWI+e1xuICAgICAgICAgICAgICBsYWJlbDogbGFiZWwsXG4gICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICBwYXJhbXM6IHJvdXRlU25hcHNob3QucGFyYW1zXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudFJvdXRlID0gcm91dGU7XG4gICAgICAgICAgbGFzdExhYmVsID0gbGFiZWw7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gd2hpbGUgKGN1cnJlbnRSb3V0ZSk7XG5cbiAgICBpZiAocHJlZml4KSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNvbmNhdChicmVhZGNydW1icyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBicmVhZGNydW1icztcbiAgICB9XG4gIH1cblxufVxuIl19