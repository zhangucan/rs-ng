/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';
import { CommonsUtils } from '@er/utils';
import { BaseComponent } from '../../bases/component';
import { ComponentUtils } from '../../utils/component';
import { LogUtils } from '../../utils/log';
import { RouteUtils } from '../../utils/nav';
/**
 * 不能多次创建组件，不能用
 */
var RouteDataPropsBindComponent = /** @class */ (function (_super) {
    tslib_1.__extends(RouteDataPropsBindComponent, _super);
    function RouteDataPropsBindComponent(cd) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        return _this;
    }
    /**
     * @return {?}
     */
    RouteDataPropsBindComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.$subscriptions = RouteUtils.getActiveRoute().data.subscribe(function (data) {
            if (!data['$component']) {
                LogUtils.error(_this, '没有定义组件类型', data);
                return;
            }
            /** @type {?} */
            var activeRoute = RouteUtils.getActiveRoute();
            /** @type {?} */
            var params = tslib_1.__assign({}, activeRoute.snapshot.params || {}, activeRoute.snapshot.queryParams || {});
            while (activeRoute && !activeRoute.snapshot.data['$props']) {
                activeRoute = activeRoute.parent;
            }
            /** @type {?} */
            var routeData = tslib_1.__assign({}, activeRoute.snapshot.data, data);
            LogUtils.debug(_this, '路由数据', routeData);
            /** @type {?} */
            var props = routeData['$resolvedProps'] || routeData['$props'];
            if (routeData['$propsKey']) {
                props = CommonsUtils.get(props, routeData['$propsKey']);
            }
            /** @type {?} */
            var component = routeData['$component'];
            Object.keys(data).forEach(function (key) {
                if (CommonsUtils.isFunction(data[key])) {
                    data[key] = ((/** @type {?} */ (data[key])))(props, params, data);
                }
                else if (CommonsUtils.isString(data[key]) && data[key].startsWith(':')) {
                    /** @type {?} */
                    var param = ((/** @type {?} */ (data[key]))).substring(1);
                    if (param === 'USER_ID') {
                    }
                    else if (params[param]) {
                        props[key] = params[param];
                    }
                }
                else if (key !== '$component' && key !== '$propsKey') {
                    props[key] = data[key];
                }
            });
            _this.type = component;
            _this.props = props;
            _this.inputs = props['inputs'] || props || {};
            _this.outputs = props['outputs'] || {};
            if (props['hooks']) {
                _this.hooks = props['hooks'];
                delete props['hooks'];
            }
            if (!props['inputs'] && !props['outputs']) {
                props['$props'] = CommonsUtils.copy(props);
            }
            _this.cd.detectChanges();
        });
    };
    /**
     * @param {?} componentRef
     * @return {?}
     */
    RouteDataPropsBindComponent.prototype.created = /**
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        if (!CommonsUtils.isEmpty(this.hooks)) {
            /** @type {?} */
            var constructor = ComponentUtils.getConstructor(componentRef);
            /** @type {?} */
            var destructor = constructor.prototype['ngOnDestroy'];
            ComponentUtils.bindLifeCycles(componentRef.instance, this.hooks, constructor, destructor);
        }
    };
    RouteDataPropsBindComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-route-bind',
                    template: "\n    <ndc-dynamic [ndcDynamicComponent]=\"type\"\n                 [ndcDynamicInputs]=\"inputs\"\n                 [ndcDynamicOutputs]=\"outputs\"\n                 (ndcDynamicCreated)=\"created($event)\"\n    >\n    </ndc-dynamic>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    RouteDataPropsBindComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    return RouteDataPropsBindComponent;
}(BaseComponent));
export { RouteDataPropsBindComponent };
if (false) {
    /** @type {?} */
    RouteDataPropsBindComponent.prototype.props;
    /** @type {?} */
    RouteDataPropsBindComponent.prototype.type;
    /** @type {?} */
    RouteDataPropsBindComponent.prototype.inputs;
    /** @type {?} */
    RouteDataPropsBindComponent.prototype.outputs;
    /** @type {?} */
    RouteDataPropsBindComponent.prototype.hooks;
    /**
     * @type {?}
     * @private
     */
    RouteDataPropsBindComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,