/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { THEME_COLORS } from '@er/types';
import { CommonsUtils } from '@er/utils';
import { ControlComponent } from '../../bases/control';
import { LogUtils } from '../../utils/log';
import { DEFAULT_QUERY_BUILDER_PROPS, EMPTY_QUERY_RULE_SET } from './defaults';
/** @type {?} */
var CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return QueryBuilderComponent; }),
    multi: true
};
/** @type {?} */
var VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return QueryBuilderComponent; }),
    multi: true
};
var QueryBuilderComponent = /** @class */ (function (_super) {
    tslib_1.__extends(QueryBuilderComponent, _super);
    function QueryBuilderComponent(changeDetectorRef) {
        var _this = _super.call(this) || this;
        _this.changeDetectorRef = changeDetectorRef;
        _this.ruleSet = { condition: 'AND', rules: [] };
        _this.defaultValue = EMPTY_QUERY_RULE_SET;
        _this.templateNames = {
            buttonGroup: 'buttonGroup',
            switchGroup: 'switchGroup',
            removeButton: 'removeButton',
            entity: 'entity',
            field: 'field',
            operator: 'operator',
            input: 'input',
            empty: 'empty'
        };
        _this._config = {};
        return _this;
    }
    Object.defineProperty(QueryBuilderComponent.prototype, "config", {
        get: /**
         * @return {?}
         */
        function () {
            return this._config;
        },
        set: /**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            CommonsUtils.defaults(this._config, config, DEFAULT_QUERY_BUILDER_PROPS);
            LogUtils.debug(this, '查询构造器配置', this._config);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryBuilderComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.ruleSet;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.ruleSet = value || { condition: 'AND', rules: [] };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} control
     * @return {?}
     */
    QueryBuilderComponent.prototype.validate = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var errors = {};
        /** @type {?} */
        var ruleErrorStore = [];
        /** @type {?} */
        var hasErrors = false;
        if (!this.config.allowEmptyRuleSet && this.checkEmptyRuleInRuleSet(this.value)) {
            errors.empty = '查询定义不能为空.';
            hasErrors = true;
        }
        this.validateRulesInRuleSet(this.value, ruleErrorStore);
        if (ruleErrorStore.length) {
            errors.rules = ruleErrorStore;
            hasErrors = true;
        }
        return hasErrors ? errors : null;
    };
    /**
     * @param {?=} index
     * @return {?}
     */
    QueryBuilderComponent.prototype.ruleSetStyle = /**
     * @param {?=} index
     * @return {?}
     */
    function (index) {
        if (index === void 0) { index = 0; }
        /** @type {?} */
        var bgColor = Object.keys(THEME_COLORS).filter(function (color, i) { return i === index; });
        if (bgColor.length === 0) {
            bgColor[0] = 'blue';
        }
        return {
            'border-left-width': '5px',
            'border-left-style': 'solid',
            'border-left-color': THEME_COLORS[bgColor[0]]
        };
    };
    /**
     * @param {?} field
     * @return {?}
     */
    QueryBuilderComponent.prototype.getOperators = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var _this = this;
        if (CommonsUtils.isFunction(this.config.operators)) {
            return ((/** @type {?} */ (this.config.operators)))(field);
        }
        else {
            /** @type {?} */
            var operators_1 = [];
            Object.keys(this.config.operators).forEach(function (key) {
                if (key === field.key) {
                    operators_1.push(_this.config.operators[key]);
                }
            });
            return operators_1;
        }
    };
    /**
     * @param {?=} entityKey
     * @return {?}
     */
    QueryBuilderComponent.prototype.getFields = /**
     * @param {?=} entityKey
     * @return {?}
     */
    function (entityKey) {
        if (this.config.entities && entityKey) {
            return this.config.fields.filter(function (field) {
                return field && field['entityKey'] === entityKey;
            });
        }
        else {
            return this.config.fields;
        }
    };
    /**
     * @param {?} rule
     * @return {?}
     */
    QueryBuilderComponent.prototype.getField = /**
     * @param {?} rule
     * @return {?}
     */
    function (rule) {
        /** @type {?} */
        var fields = this.getFields(rule.entity);
        if (fields) {
            /** @type {?} */
            var matched = fields.filter(function (field) { return field.key === rule.field; });
            if (matched && matched.length > 0) {
                return matched[0];
            }
        }
        return undefined;
    };
    /**
     * @param {...?} args
     * @return {?}
     */
    QueryBuilderComponent.prototype.getClassNames = /**
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        /** @type {?} */
        var styleClasses = this.config.styleClasses;
        /** @type {?} */
        var classNames = args.map(function (id) { return styleClasses[id]; }).filter(function (c) { return !!c; });
        return classNames.length ? classNames.join(' ') : null;
    };
    /**
     * @param {?} rule
     * @return {?}
     */
    QueryBuilderComponent.prototype.isInValidRule = /**
     * @param {?} rule
     * @return {?}
     */
    function (rule) {
        return this.config.allowRuleSet && rule.rules && rule.rules.length === 0;
    };
    /**
     * @param {?} rule
     * @return {?}
     */
    QueryBuilderComponent.prototype.getRuleClassName = /**
     * @param {?} rule
     * @return {?}
     */
    function (rule) {
        /** @type {?} */
        var cls = this.getClassNames('row', 'connector', 'transition');
        cls += ' ' + this.getClassNames(rule['condition'] ? 'ruleSet' : 'rule');
        // if (ruleMeta.invalid) {
        // cls += ' ' + this.getClassNames('invalidRuleSet');
        // }
        return cls;
    };
    /**
     * @param {?} entity
     * @return {?}
     */
    QueryBuilderComponent.prototype.getDefaultDataField = /**
     * @param {?} entity
     * @return {?}
     */
    function (entity) {
        if (!entity) {
            return null;
        }
        else if (entity.defaultField !== undefined) {
            return this.getDefaultValue(entity.defaultField);
        }
        else {
            /** @type {?} */
            var entityDataFields = this.config.fields.filter(function (field) {
                return field && field['entityKey'] === entity.key;
            });
            if (entityDataFields && entityDataFields.length) {
                return entityDataFields[0];
            }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    QueryBuilderComponent.prototype.getDefaultOperator = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field && field['defaultOperator'] !== undefined) {
            return this.getDefaultValue(field['defaultOperator']);
        }
        else {
            /** @type {?} */
            var operators = this.getOperators(field);
            if (operators && operators.length) {
                //  return operators[0];
            }
        }
    };
    /**
     * @return {?}
     */
    QueryBuilderComponent.prototype.addRule = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var parent = this.ruleSet;
        if (this.config.addRule) {
            this.config.addRule(parent);
        }
        else {
            /** @type {?} */
            var field = this.config.fields[0];
            parent.rules = tslib_1.__spread(parent.rules, [
                {
                    field: field.key,
                    entity: field['entityKey'],
                    operator: this.getDefaultOperator(field),
                    value: this.getDefaultValue(field.defaultValue)
                }
            ]);
        }
    };
    /**
     * @return {?}
     */
    QueryBuilderComponent.prototype.addRuleSet = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var parent = this.ruleSet;
        if (this.config.addRuleSet) {
            this.config.addRuleSet(parent);
        }
        else {
            parent.rules = tslib_1.__spread(parent.rules, [
                { condition: 'AND', rules: [] }
            ]);
        }
    };
    /**
     * @param {?} rule
     * @return {?}
     */
    QueryBuilderComponent.prototype.removeRule = /**
     * @param {?} rule
     * @return {?}
     */
    function (rule) {
        /** @type {?} */
        var parent = this.ruleSet;
        if (this.config.removeRule) {
            this.config.removeRule(rule, parent);
        }
        else {
            parent.rules = parent.rules.filter(function (r) { return r !== rule; });
        }
    };
    /**
     * @param {?=} ruleSet
     * @return {?}
     */
    QueryBuilderComponent.prototype.removeRuleSet = /**
     * @param {?=} ruleSet
     * @return {?}
     */
    function (ruleSet) {
        ruleSet = ruleSet || this.ruleSet;
        /** @type {?} */
        var parent = this.parentRuleSet;
        if (this.config.removeRuleSet) {
            this.config.removeRuleSet(ruleSet, parent);
        }
        else {
            parent.rules = parent.rules.filter(function (r) { return r !== ruleSet; });
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    QueryBuilderComponent.prototype.changeCondition = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.ruleSet.condition = value;
    };
    /**
     * @param {?} key
     * @param {?} rule
     * @return {?}
     */
    QueryBuilderComponent.prototype.changeField = /**
     * @param {?} key
     * @param {?} rule
     * @return {?}
     */
    function (key, rule) {
        /** @type {?} */
        var field = this.config.fields[key];
        if (field && field.defaultValue !== undefined) {
            rule.value = this.getDefaultValue(field.defaultValue);
        }
        else {
            delete rule.value;
        }
        rule.operator = this.getDefaultOperator(field);
    };
    /**
     * @param {?} entityValue
     * @param {?} rule
     * @return {?}
     */
    QueryBuilderComponent.prototype.changeEntity = /**
     * @param {?} entityValue
     * @param {?} rule
     * @return {?}
     */
    function (entityValue, rule) {
        if (this.disabled) {
            return;
        }
        // const currentEntity: DataEntity = this.config.entities.find((e) => e.value === entityValue);
        // const defaultDataField: DataField = this.getDefaultDataField(currentEntity);
        // if (defaultDataField) {
        //   this.changeDataField(defaultDataField.key, rule);
        // }
    };
    /**
     * @param {?} defaultValue
     * @return {?}
     */
    QueryBuilderComponent.prototype.getDefaultValue = /**
     * @param {?} defaultValue
     * @return {?}
     */
    function (defaultValue) {
        switch (typeof defaultValue) {
            case 'function':
                return defaultValue();
            default:
                return defaultValue;
        }
    };
    /**
     * @param {?=} context
     * @return {?}
     */
    QueryBuilderComponent.prototype.context = /**
     * @param {?=} context
     * @return {?}
     */
    function (context) {
        return tslib_1.__assign({ qb: (/** @type {?} */ (this)) }, context);
    };
    /**
     * @private
     * @param {?} ruleSet
     * @return {?}
     */
    QueryBuilderComponent.prototype.checkEmptyRuleInRuleSet = /**
     * @private
     * @param {?} ruleSet
     * @return {?}
     */
    function (ruleSet) {
        var _this = this;
        if (!ruleSet || !ruleSet.rules || ruleSet.rules.length === 0) {
            return true;
        }
        else {
            return ruleSet.rules.some(function (item) {
                if (item.rules) {
                    return _this.checkEmptyRuleInRuleSet(item);
                }
                else {
                    return false;
                }
            });
        }
    };
    /**
     * @private
     * @param {?} ruleSet
     * @param {?} errorStore
     * @return {?}
     */
    QueryBuilderComponent.prototype.validateRulesInRuleSet = /**
     * @private
     * @param {?} ruleSet
     * @param {?} errorStore
     * @return {?}
     */
    function (ruleSet, errorStore) {
        var _this = this;
        if (ruleSet && ruleSet.rules && ruleSet.rules.length > 0) {
            ruleSet.rules.forEach(function (item) {
                if (((/** @type {?} */ (item))).rules) {
                    return _this.validateRulesInRuleSet((/** @type {?} */ (item)), errorStore);
                }
                else if (((/** @type {?} */ (item))).field) {
                    /** @type {?} */
                    var field = _this.config.fields[((/** @type {?} */ (item))).field];
                    if (field && field['validator'] && field['validator'].apply) {
                        /** @type {?} */
                        var error = field['validator']((/** @type {?} */ (item)), ruleSet);
                        if (error != null) {
                            errorStore.push(error);
                        }
                    }
                }
            });
        }
    };
    QueryBuilderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-query-builder',
                    template: "<div [ngStyle]=\"ruleSetStyle(index)\" class=\"ruleSet\">\n  <div [ngClass]=\"getClassNames('switchRow')\">\n    <ng-container *ngIf=\"templates[templateNames.buttonGroup] as customer; else defaultButtonGroup\">\n      <div [ngClass]=\"getClassNames('buttonGroup', 'rightAlign')\">\n        <ng-container *ngTemplateOutlet=\"customer; context: context()\"></ng-container>\n      </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"templates[templateNames.switchGroup] as customer; else defaultSwitchGroup\">\n      <ng-container *ngTemplateOutlet=\"customer; context: context()\"></ng-container>\n    </ng-container>\n  </div>\n  <ul [ngClass]=\"getClassNames('tree')\" *ngIf=\"ruleSet && ruleSet.rules\">\n    <ng-container *ngFor=\"let rule of ruleSet.rules; let index = index\">\n\n      <li [ngClass]=\"getRuleClassName(rule)\">\n\n        <ng-container *ngIf=\"!rule['condition']\">\n          <er-query-builder-rule [rule]=\"rule\" [ruleIndex]=\"index\"></er-query-builder-rule>\n        </ng-container>\n\n        <ng-container *ngIf=\"rule['condition']\">\n          <er-query-builder [config]=\"config\" [ruleSet]=\"rule\" [parentRuleSet]=\"ruleSet\" [index]=\"index\">\n          </er-query-builder>\n        </ng-container>\n\n        <ng-container *ngIf=\"templates[templateNames.empty] as customer; else defaultEmptyWarning\">\n          <ng-container *ngIf=\"isInValidRule(rule)\">\n            <ng-container *ngTemplateOutlet=\"customer; context: context()\"></ng-container>\n          </ng-container>\n        </ng-container>\n\n        <ng-template #defaultEmptyWarning>\n          <p [ngClass]=\"getClassNames('emptyWarning')\" *ngIf=\"isInValidRule(rule)\"\n             [innerHTML]=\"config.emptyMessage|erSafeHtml\">\n          </p>\n        </ng-template>\n\n      </li>\n    </ng-container>\n  </ul>\n</div>\n<ng-template #defaultButtonGroup>\n  <div [ngClass]=\"getClassNames('buttonGroup', 'rightAlign')\">\n    <button (click)=\"addRule()\" [ngClass]=\"getClassNames('button')\" [disabled]=disabled>\n      <i [ngClass]=\"getClassNames('addIcon')\"></i> \u6761\u4EF6\n    </button>\n    <button (click)=\"addRuleSet()\" [ngClass]=\"getClassNames('button')\" *ngIf=\"config.allowRuleSet\"\n            [disabled]=disabled>\n      <i [ngClass]=\"getClassNames('addIcon')\"></i> \u6761\u4EF6\u7EC4\n    </button>\n    <ng-container *ngIf=\"!!parentRuleSet && config.allowRuleSet\">\n      <button (click)=\"removeRuleSet()\" [ngClass]=\"getClassNames('button', 'removeButton')\"\n              [disabled]=disabled>\n        <i [ngClass]=\"getClassNames('removeIcon')\"></i>\n      </button>\n    </ng-container>\n  </div>\n</ng-template>\n\n<ng-template #defaultSwitchGroup>\n  <div [ngClass]=\"getClassNames('switchGroup', 'transition')\" *ngIf=\"ruleSet\">\n    <div [ngClass]=\"getClassNames('switchControl')\">\n      <input type=\"radio\" [ngClass]=\"getClassNames('switchRadio')\" [(ngModel)]=\"ruleSet.condition\"\n             [disabled]=disabled\n             value=\"and\" #andOption/>\n      <label (click)=\"changeCondition(andOption.value)\" [ngClass]=\"getClassNames('switchLabel')\">\u5E76\u4E14</label>\n    </div>\n    <div [ngClass]=\"getClassNames('switchControl')\">\n      <input type=\"radio\" [ngClass]=\"getClassNames('switchRadio')\" [(ngModel)]=\"ruleSet.condition\"\n             [disabled]=disabled\n             value=\"or\" #orOption/>\n      <label (click)=\"changeCondition(orOption.value)\" [ngClass]=\"getClassNames('switchLabel')\">\u6216\u8005</label>\n    </div>\n    <div [ngClass]=\"getClassNames('switchControl')\">\n      <input type=\"radio\" [ngClass]=\"getClassNames('switchRadio')\" [(ngModel)]=\"ruleSet.condition\"\n             [disabled]=disabled\n             value=\"not\" #notOption/>\n      <label (click)=\"changeCondition(notOption.value)\" [ngClass]=\"getClassNames('switchLabel')\">\u4E0D\u662F</label>\n    </div>\n  </div>\n</ng-template>\n\n\n",
                    providers: [CONTROL_VALUE_ACCESSOR, VALIDATOR],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["@charset \"UTF-8\";:host::ng-deep{display:block;width:100%;font-size:.8em}:host::ng-deep .q-icon{font-style:normal;font-size:12px}:host::ng-deep .q-remove-icon::before{content:'\u274C'}:host::ng-deep .q-add-icon{color:#555}:host::ng-deep .q-add-icon::before{content:'\u2795'}:host::ng-deep .q-remove-button{color:#b3415d;width:31px}:host::ng-deep .q-button-group,:host::ng-deep .q-switch-group{overflow:hidden}:host::ng-deep .q-right-align{float:right}:host::ng-deep .q-button{margin-left:8px;padding:0 8px;background-color:#fff}:host::ng-deep .q-button:disabled{display:none}:host::ng-deep .q-control-size{display:inline-block;vertical-align:top;padding-right:10px}:host::ng-deep .q-entity-control,:host::ng-deep .q-field-control,:host::ng-deep .q-input-control,:host::ng-deep .q-operator-control{display:inline-block;padding:5px 8px;color:#555;background-color:#fff;background-image:none;border:1px solid #ccc;border-radius:4px;box-sizing:border-box;width:auto}:host::ng-deep .q-entity-control:disabled,:host::ng-deep .q-field-control:disabled,:host::ng-deep .q-input-control:disabled,:host::ng-deep .q-operator-control:disabled{border-color:transparent}:host::ng-deep .q-entity-control,:host::ng-deep .q-field-control,:host::ng-deep .q-input-control:not([type=checkbox]),:host::ng-deep .q-operator-control{min-height:32px;-webkit-appearance:none}:host::ng-deep .q-button,:host::ng-deep .q-switch-label{float:left;margin-bottom:0;font-size:14px;line-height:30px;font-weight:400;text-align:center;text-shadow:none;border:1px solid rgba(0,0,0,.2);box-sizing:border-box}:host::ng-deep .q-button:hover,:host::ng-deep .q-switch-label:hover{cursor:pointer;background-color:#f0f0f0}:host::ng-deep .q-switch-label{background-color:#e4e4e4;padding:0 8px}:host::ng-deep .q-switch-radio{position:absolute;clip:rect(0,0,0,0);height:1px;width:1px;border:0;overflow:hidden}:host::ng-deep .q-switch-radio:checked+.q-switch-label{border:1px solid #619ed7;background:#fff;color:#3176b3}:host::ng-deep .q-switch-radio:disabled+.q-switch-label{display:none}:host::ng-deep .q-switch-radio:checked:disabled+.q-switch-label{display:initial;color:initial;cursor:default;border-color:transparent}:host::ng-deep .q-invalid-ruleset{border:1px solid rgba(179,65,93,.5)!important;background:rgba(179,65,93,.1)!important}:host::ng-deep .q-empty-warning{color:#8d252e;text-align:center}:host::ng-deep .q-ruleset{border:1px solid #ccc}:host::ng-deep .q-rule{border:1px solid #ccc;background:#fff}:host::ng-deep .q-transition{transition:.1s ease-in-out}:host::ng-deep .q-tree{list-style:none;margin:4px 0 2px}:host::ng-deep .q-row{padding:6px 8px;margin-top:6px}:host::ng-deep .q-connector{position:relative}:host::ng-deep .q-connector::before{top:-5px;border-width:0 0 2px 2px}:host::ng-deep .q-connector::after{border-width:0 0 0 2px;top:50%}:host::ng-deep .q-connector::after,:host::ng-deep .q-connector::before{content:'';left:-12px;border-color:#ccc;border-style:solid;width:9px;height:calc(50% + 6px);position:absolute}:host::ng-deep .q-connector:last-child::after{content:none}:host::ng-deep .q-inline-block-display{display:inline-block;vertical-align:top}"]
                }] }
    ];
    /** @nocollapse */
    QueryBuilderComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    QueryBuilderComponent.propDecorators = {
        ruleSet: [{ type: Input }],
        index: [{ type: Input }],
        parentRuleSet: [{ type: Input }],
        config: [{ type: Input }],
        value: [{ type: Input }]
    };
    return QueryBuilderComponent;
}(ControlComponent));
export { QueryBuilderComponent };
if (false) {
    /** @type {?} */
    QueryBuilderComponent.prototype.ruleSet;
    /** @type {?} */
    QueryBuilderComponent.prototype.index;
    /** @type {?} */
    QueryBuilderComponent.prototype.parentRuleSet;
    /** @type {?} */
    QueryBuilderComponent.prototype.defaultValue;
    /** @type {?} */
    QueryBuilderComponent.prototype.templateNames;
    /**
     * @type {?}
     * @private
     */
    QueryBuilderComponent.prototype._config;
    /**
     * @type {?}
     * @private
     */
    QueryBuilderComponent.prototype.changeDetectorRef;
}
//# sourceMappingURL=data:application/json;base64,