/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';
import { CommonsUtils } from '@er/utils';
import { Subject, timer } from 'rxjs';
import { mapTo, scan, startWith, switchMap, takeWhile } from 'rxjs/operators';
import { BaseComponent } from '../../bases/component';
var AnimateNumberComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AnimateNumberComponent, _super);
    function AnimateNumberComponent(cd) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.currentNumber = 0;
        _this.fontSize = '.8em';
        _this.counter$ = new Subject();
        _this.$subscriptions = _this.counter$
            .pipe(switchMap(function (endRange) {
            return timer(1000, 200)
                .pipe(mapTo(_this.positiveOrNegative(endRange, _this.currentNumber)), startWith(_this.currentNumber), scan(function (acc, curr) { return acc + curr; }), takeWhile(_this.takeUntil(endRange, _this.currentNumber)));
        }))
            .subscribe(function (val) {
            _this.currentNumber = val;
            if (_this.currentNumber === _this.end) {
                _this.fontSize = '1em';
            }
            _this.cd.detectChanges();
        });
        return _this;
    }
    Object.defineProperty(AnimateNumberComponent.prototype, "end", {
        get: /**
         * @return {?}
         */
        function () {
            return this._end;
        },
        set: /**
         * @param {?} endRange
         * @return {?}
         */
        function (endRange) {
            this._end = endRange;
            this.currentNumber = endRange - CommonsUtils.getRandomNumber(20);
            this.counter$.next(endRange);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    AnimateNumberComponent.prototype.positiveOrNegative = /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    function (endRange, currentNumber) {
        return endRange > currentNumber ? 1 : -1;
    };
    /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    AnimateNumberComponent.prototype.takeUntil = /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    function (endRange, currentNumber) {
        return endRange > currentNumber
            ? function (val) { return val <= endRange; }
            : function (val) { return val >= endRange; };
    };
    AnimateNumberComponent.decorators = [
        { type: Component, args: [{
                    selector: 'animate-number',
                    template: "\n    <span [ngStyle]=\"{'font-size': fontSize, 'font-weight': 'bold'}\">\n       {{currentNumber}}\n    </span>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    AnimateNumberComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    AnimateNumberComponent.propDecorators = {
        end: [{ type: Input }]
    };
    return AnimateNumberComponent;
}(BaseComponent));
export { AnimateNumberComponent };
if (false) {
    /** @type {?} */
    AnimateNumberComponent.prototype.currentNumber;
    /** @type {?} */
    AnimateNumberComponent.prototype.fontSize;
    /**
     * @type {?}
     * @private
     */
    AnimateNumberComponent.prototype.counter$;
    /**
     * @type {?}
     * @private
     */
    AnimateNumberComponent.prototype._end;
    /**
     * @type {?}
     * @private
     */
    AnimateNumberComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9hbmltYXRlLW51bWJlci9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3BDLE9BQU8sRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUUsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBR3BEO0lBUzRDLGtEQUFhO0lBUXZELGdDQUFvQixFQUFxQjtRQUF6QyxZQUNFLGlCQUFPLFNBcUJSO1FBdEJtQixRQUFFLEdBQUYsRUFBRSxDQUFtQjtRQU56QyxtQkFBYSxHQUFHLENBQUMsQ0FBQztRQUVsQixjQUFRLEdBQUcsTUFBTSxDQUFDO1FBRVYsY0FBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFJL0IsS0FBSSxDQUFDLGNBQWMsR0FBRyxLQUFJLENBQUMsUUFBUTthQUNoQyxJQUFJLENBQ0gsU0FBUyxDQUFDLFVBQUEsUUFBUTtZQUNkLE9BQU8sS0FBSyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUM7aUJBQ3BCLElBQUksQ0FDSCxLQUFLLENBQUMsS0FBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxLQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsRUFDNUQsU0FBUyxDQUFDLEtBQUksQ0FBQyxhQUFhLENBQUMsRUFDN0IsSUFBSSxDQUFDLFVBQUMsR0FBRyxFQUFFLElBQUksSUFBSyxPQUFBLEdBQUcsR0FBRyxJQUFJLEVBQVYsQ0FBVSxDQUFDLEVBQy9CLFNBQVMsQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxLQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FDeEQsQ0FBQztRQUNOLENBQUMsQ0FDRixDQUNGO2FBQ0EsU0FBUyxDQUFDLFVBQUEsR0FBRztZQUNaLEtBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDO1lBQ3pCLElBQUksS0FBSSxDQUFDLGFBQWEsS0FBSyxLQUFJLENBQUMsR0FBRyxFQUFFO2dCQUNuQyxLQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQzthQUN2QjtZQUNELEtBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7O0lBQ1AsQ0FBQztJQUlELHNCQUFJLHVDQUFHOzs7O1FBQVA7WUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDbkIsQ0FBQzs7Ozs7UUFFRCxVQUNRLFFBQWdCO1lBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxHQUFHLFlBQVksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDakUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0IsQ0FBQzs7O09BUEE7Ozs7Ozs7SUFTTyxtREFBa0I7Ozs7OztJQUExQixVQUEyQixRQUFRLEVBQUUsYUFBYTtRQUNoRCxPQUFPLFFBQVEsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7Ozs7OztJQUVPLDBDQUFTOzs7Ozs7SUFBakIsVUFBa0IsUUFBUSxFQUFFLGFBQWE7UUFDdkMsT0FBTyxRQUFRLEdBQUcsYUFBYTtZQUM3QixDQUFDLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLElBQUksUUFBUSxFQUFmLENBQWU7WUFDeEIsQ0FBQyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxJQUFJLFFBQVEsRUFBZixDQUFlLENBQUM7SUFDN0IsQ0FBQzs7Z0JBOURGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixRQUFRLEVBQUUsc0hBSVQ7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzs7O2dCQWZnQyxpQkFBaUI7OztzQkFzRC9DLEtBQUs7O0lBaUJSLDZCQUFDO0NBQUEsQUFoRUQsQ0FTNEMsYUFBYSxHQXVEeEQ7U0F2RFksc0JBQXNCOzs7SUFFakMsK0NBQWtCOztJQUVsQiwwQ0FBa0I7Ozs7O0lBRWxCLDBDQUFpQzs7Ozs7SUEwQmpDLHNDQUFxQjs7Ozs7SUF4QlQsb0NBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDb21tb25zVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge1N1YmplY3QsIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwVG8sIHNjYW4sIHN0YXJ0V2l0aCwgc3dpdGNoTWFwLCB0YWtlV2hpbGV9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7QmFzZUNvbXBvbmVudH0gZnJvbSAnLi4vLi4vYmFzZXMvY29tcG9uZW50JztcblxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhbmltYXRlLW51bWJlcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPHNwYW4gW25nU3R5bGVdPVwieydmb250LXNpemUnOiBmb250U2l6ZSwgJ2ZvbnQtd2VpZ2h0JzogJ2JvbGQnfVwiPlxuICAgICAgIHt7Y3VycmVudE51bWJlcn19XG4gICAgPC9zcGFuPlxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBBbmltYXRlTnVtYmVyQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG5cbiAgY3VycmVudE51bWJlciA9IDA7XG5cbiAgZm9udFNpemUgPSAnLjhlbSc7XG5cbiAgcHJpdmF0ZSBjb3VudGVyJCA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuJHN1YnNjcmlwdGlvbnMgPSB0aGlzLmNvdW50ZXIkXG4gICAgICAucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKGVuZFJhbmdlID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aW1lcigxMDAwLCAyMDApXG4gICAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcFRvKHRoaXMucG9zaXRpdmVPck5lZ2F0aXZlKGVuZFJhbmdlLCB0aGlzLmN1cnJlbnROdW1iZXIpKSxcbiAgICAgICAgICAgICAgICBzdGFydFdpdGgodGhpcy5jdXJyZW50TnVtYmVyKSxcbiAgICAgICAgICAgICAgICBzY2FuKChhY2MsIGN1cnIpID0+IGFjYyArIGN1cnIpLFxuICAgICAgICAgICAgICAgIHRha2VXaGlsZSh0aGlzLnRha2VVbnRpbChlbmRSYW5nZSwgdGhpcy5jdXJyZW50TnVtYmVyKSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUodmFsID0+IHtcbiAgICAgICAgdGhpcy5jdXJyZW50TnVtYmVyID0gdmFsO1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50TnVtYmVyID09PSB0aGlzLmVuZCkge1xuICAgICAgICAgIHRoaXMuZm9udFNpemUgPSAnMWVtJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfZW5kOiBudW1iZXI7XG5cbiAgZ2V0IGVuZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZW5kO1xuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IGVuZChlbmRSYW5nZTogbnVtYmVyKSB7XG4gICAgdGhpcy5fZW5kID0gZW5kUmFuZ2U7XG4gICAgdGhpcy5jdXJyZW50TnVtYmVyID0gZW5kUmFuZ2UgLSBDb21tb25zVXRpbHMuZ2V0UmFuZG9tTnVtYmVyKDIwKTtcbiAgICB0aGlzLmNvdW50ZXIkLm5leHQoZW5kUmFuZ2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBwb3NpdGl2ZU9yTmVnYXRpdmUoZW5kUmFuZ2UsIGN1cnJlbnROdW1iZXIpIHtcbiAgICByZXR1cm4gZW5kUmFuZ2UgPiBjdXJyZW50TnVtYmVyID8gMSA6IC0xO1xuICB9XG5cbiAgcHJpdmF0ZSB0YWtlVW50aWwoZW5kUmFuZ2UsIGN1cnJlbnROdW1iZXIpIHtcbiAgICByZXR1cm4gZW5kUmFuZ2UgPiBjdXJyZW50TnVtYmVyXG4gICAgICA/IHZhbCA9PiB2YWwgPD0gZW5kUmFuZ2VcbiAgICAgIDogdmFsID0+IHZhbCA+PSBlbmRSYW5nZTtcbiAgfVxuXG59XG5cbiJdfQ==