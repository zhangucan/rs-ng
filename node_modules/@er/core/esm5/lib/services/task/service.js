/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { Title } from '@angular/platform-browser';
import { StateNames } from '@er/types';
import { CommonsUtils, ConfigUtils, StatesUtils } from '@er/utils';
import { timer } from 'rxjs';
import { distinctUntilChanged, filter, map } from 'rxjs/operators';
import { DiUtils } from '../../utils/di';
import * as i0 from "@angular/core";
/** @type {?} */
export var BACKGROUND_TASK_TOKEN = new InjectionToken('BACKGROUND_TASK_TOKEN');
/**
 * used to run background task globally
 */
var TaskService = /** @class */ (function () {
    function TaskService(tasks) {
        if (tasks === void 0) { tasks = []; }
        var _this = this;
        this.subs = [];
        StatesUtils.create(StateNames.appTitle, ConfigUtils.getConfig().appTitle, true);
        setTimeout(function () {
            _this.cleanStates();
            /** @type {?} */
            var _tasks = CommonsUtils.flatten(tasks);
            if (_tasks && _tasks.length > 0) {
                _tasks.forEach(function (task) { return _this.startTask((/** @type {?} */ (task))); });
            }
        }, 2000);
    }
    /**
     * @return {?}
     */
    TaskService.prototype.updateTitle = /**
     * @return {?}
     */
    function () {
        this.subs.push(StatesUtils.observe(StateNames.appTitle)
            .pipe(filter(function (state) { return state && state.hasOwnProperty('title'); }), map(function (state) { return state.title; }), distinctUntilChanged())
            .subscribe(function (title) {
            DiUtils.get(Title).setTitle(title);
        }));
    };
    /**
     * @return {?}
     */
    TaskService.prototype.cleanStates = /**
     * @return {?}
     */
    function () {
        this.subs.push(timer(30000, 30000)
            .subscribe(function () {
            /** @type {?} */
            var store = StatesUtils.getStore().value;
            Object.keys(store).forEach(function (key) {
                if (store[key]) {
                    if (!store[key].preserved && (store[key].state && store[key].state.observers.length === 0)) {
                        store = CommonsUtils.omit(store, key);
                    }
                }
            });
            StatesUtils.getStore().next(store);
        }));
    };
    /**
     * @param {?} task
     * @return {?}
     */
    TaskService.prototype.startTask = /**
     * @param {?} task
     * @return {?}
     */
    function (task) {
        if (CommonsUtils.isFunction(task)) {
            ((/** @type {?} */ (task)))();
        }
        else {
            /** @type {?} */
            var schedule_1 = (/** @type {?} */ (task));
            /** @type {?} */
            var context_1 = schedule_1.context;
            if (CommonsUtils.isFunction(schedule_1.context)) {
                context_1 = schedule_1.context();
            }
            if (schedule_1.interval) {
                this.subs.push(timer(0, schedule_1.interval)
                    .subscribe(function () {
                    schedule_1.run(context_1);
                }));
            }
            else {
                schedule_1.run(context_1);
            }
        }
    };
    /**
     * @return {?}
     */
    TaskService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subs.forEach(function (sub) {
            sub.unsubscribe();
        });
    };
    TaskService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TaskService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [BACKGROUND_TASK_TOKEN,] }] }
    ]; };
    /** @nocollapse */ TaskService.ngInjectableDef = i0.defineInjectable({ factory: function TaskService_Factory() { return new TaskService(i0.inject(BACKGROUND_TASK_TOKEN, 8)); }, token: TaskService, providedIn: "root" });
    return TaskService;
}());
export { TaskService };
if (false) {
    /** @type {?} */
    TaskService.prototype.subs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3Rhc2svc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFhLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN0RixPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDaEQsT0FBTyxFQUFnQixVQUFVLEVBQU8sTUFBTSxXQUFXLENBQUM7QUFDMUQsT0FBTyxFQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2pFLE9BQU8sRUFBZSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDekMsT0FBTyxFQUFDLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRSxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7OztBQUV2QyxNQUFNLEtBQU8scUJBQXFCLEdBQUcsSUFBSSxjQUFjLENBQU8sdUJBQXVCLENBQUM7Ozs7QUFLdEY7SUFPRSxxQkFBdUQsS0FBa0I7UUFBN0Qsc0JBQUEsRUFBQSxVQUE2RDtRQUF6RSxpQkFTQztRQVhELFNBQUksR0FBbUIsRUFBRSxDQUFDO1FBR3hCLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hGLFVBQVUsQ0FBQztZQUNULEtBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQzs7Z0JBQ2IsTUFBTSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1lBQzFDLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMvQixNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsS0FBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBTSxJQUFJLEVBQUEsQ0FBQyxFQUExQixDQUEwQixDQUFDLENBQUM7YUFDcEQ7UUFDSCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDWCxDQUFDOzs7O0lBRUQsaUNBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ1osV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO2FBQ3JDLElBQUksQ0FDSCxNQUFNLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsRUFBdEMsQ0FBc0MsQ0FBQyxFQUN2RCxHQUFHLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLENBQUMsS0FBSyxFQUFYLENBQVcsQ0FBQyxFQUN6QixvQkFBb0IsRUFBRSxDQUN2QjthQUNBLFNBQVMsQ0FBQyxVQUFBLEtBQUs7WUFDZCxPQUFPLENBQUMsR0FBRyxDQUFRLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FDTCxDQUFDO0lBQ0osQ0FBQzs7OztJQUVELGlDQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUNaLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO2FBQ2hCLFNBQVMsQ0FBQzs7Z0JBQ0wsS0FBSyxHQUFHLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLO1lBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRztnQkFDNUIsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsRUFBRTt3QkFDMUYsS0FBSyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO3FCQUN2QztpQkFDRjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FDTCxDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFRCwrQkFBUzs7OztJQUFULFVBQVUsSUFBVTtRQUNsQixJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakMsQ0FBQyxtQkFBQSxJQUFJLEVBQVksQ0FBQyxFQUFFLENBQUM7U0FDdEI7YUFBTTs7Z0JBQ0MsVUFBUSxHQUFHLG1CQUFBLElBQUksRUFBaUI7O2dCQUNsQyxTQUFPLEdBQUcsVUFBUSxDQUFDLE9BQU87WUFDOUIsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDLFVBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDN0MsU0FBTyxHQUFHLFVBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUM5QjtZQUNELElBQUksVUFBUSxDQUFDLFFBQVEsRUFBRTtnQkFDckIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ1osS0FBSyxDQUFDLENBQUMsRUFBRSxVQUFRLENBQUMsUUFBUSxDQUFDO3FCQUN4QixTQUFTLENBQUM7b0JBQ1QsVUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFPLENBQUMsQ0FBQztnQkFDeEIsQ0FBQyxDQUFDLENBQ0wsQ0FBQzthQUNIO2lCQUFNO2dCQUNMLFVBQVEsQ0FBQyxHQUFHLENBQUMsU0FBTyxDQUFDLENBQUM7YUFDdkI7U0FDRjtJQUNILENBQUM7Ozs7SUFFRCxpQ0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUc7WUFDbkIsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBM0VGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7NENBS2MsUUFBUSxZQUFJLE1BQU0sU0FBQyxxQkFBcUI7OztzQkFwQnZEO0NBeUZDLEFBNUVELElBNEVDO1NBekVZLFdBQVc7OztJQUV0QiwyQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIE9uRGVzdHJveSwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUaXRsZX0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQge1NjaGVkdWxlZFRhc2ssIFN0YXRlTmFtZXMsIFRhc2t9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge0NvbW1vbnNVdGlscywgQ29uZmlnVXRpbHMsIFN0YXRlc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtTdWJzY3JpcHRpb24sIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIGZpbHRlciwgbWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0RpVXRpbHN9IGZyb20gJy4uLy4uL3V0aWxzL2RpJztcblxuZXhwb3J0IGNvbnN0IEJBQ0tHUk9VTkRfVEFTS19UT0tFTiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxUYXNrPignQkFDS0dST1VORF9UQVNLX1RPS0VOJyk7XG5cbi8qKlxuICogdXNlZCB0byBydW4gYmFja2dyb3VuZCB0YXNrIGdsb2JhbGx5XG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRhc2tTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICBzdWJzOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoQkFDS0dST1VORF9UQVNLX1RPS0VOKSB0YXNrczogVGFza1tdID0gW10pIHtcbiAgICBTdGF0ZXNVdGlscy5jcmVhdGUoU3RhdGVOYW1lcy5hcHBUaXRsZSwgQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkuYXBwVGl0bGUsIHRydWUpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5jbGVhblN0YXRlcygpO1xuICAgICAgY29uc3QgX3Rhc2tzID0gQ29tbW9uc1V0aWxzLmZsYXR0ZW4odGFza3MpO1xuICAgICAgaWYgKF90YXNrcyAmJiBfdGFza3MubGVuZ3RoID4gMCkge1xuICAgICAgICBfdGFza3MuZm9yRWFjaCh0YXNrID0+IHRoaXMuc3RhcnRUYXNrKDxUYXNrPnRhc2spKTtcbiAgICAgIH1cbiAgICB9LCAyMDAwKTtcbiAgfVxuXG4gIHVwZGF0ZVRpdGxlKCkge1xuICAgIHRoaXMuc3Vicy5wdXNoKFxuICAgICAgU3RhdGVzVXRpbHMub2JzZXJ2ZShTdGF0ZU5hbWVzLmFwcFRpdGxlKVxuICAgICAgICAucGlwZShcbiAgICAgICAgICBmaWx0ZXIoc3RhdGUgPT4gc3RhdGUgJiYgc3RhdGUuaGFzT3duUHJvcGVydHkoJ3RpdGxlJykpLFxuICAgICAgICAgIG1hcChzdGF0ZSA9PiBzdGF0ZS50aXRsZSksXG4gICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxuICAgICAgICApXG4gICAgICAgIC5zdWJzY3JpYmUodGl0bGUgPT4ge1xuICAgICAgICAgIERpVXRpbHMuZ2V0PFRpdGxlPihUaXRsZSkuc2V0VGl0bGUodGl0bGUpO1xuICAgICAgICB9KVxuICAgICk7XG4gIH1cblxuICBjbGVhblN0YXRlcygpIHtcbiAgICB0aGlzLnN1YnMucHVzaChcbiAgICAgIHRpbWVyKDMwMDAwLCAzMDAwMClcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgbGV0IHN0b3JlID0gU3RhdGVzVXRpbHMuZ2V0U3RvcmUoKS52YWx1ZTtcbiAgICAgICAgICBPYmplY3Qua2V5cyhzdG9yZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgaWYgKHN0b3JlW2tleV0pIHtcbiAgICAgICAgICAgICAgaWYgKCFzdG9yZVtrZXldLnByZXNlcnZlZCAmJiAoc3RvcmVba2V5XS5zdGF0ZSAmJiBzdG9yZVtrZXldLnN0YXRlLm9ic2VydmVycy5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgICAgICAgc3RvcmUgPSBDb21tb25zVXRpbHMub21pdChzdG9yZSwga2V5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIFN0YXRlc1V0aWxzLmdldFN0b3JlKCkubmV4dChzdG9yZSk7XG4gICAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHN0YXJ0VGFzayh0YXNrOiBUYXNrKSB7XG4gICAgaWYgKENvbW1vbnNVdGlscy5pc0Z1bmN0aW9uKHRhc2spKSB7XG4gICAgICAodGFzayBhcyBGdW5jdGlvbikoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2NoZWR1bGUgPSB0YXNrIGFzIFNjaGVkdWxlZFRhc2s7XG4gICAgICBsZXQgY29udGV4dCA9IHNjaGVkdWxlLmNvbnRleHQ7XG4gICAgICBpZiAoQ29tbW9uc1V0aWxzLmlzRnVuY3Rpb24oc2NoZWR1bGUuY29udGV4dCkpIHtcbiAgICAgICAgY29udGV4dCA9IHNjaGVkdWxlLmNvbnRleHQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzY2hlZHVsZS5pbnRlcnZhbCkge1xuICAgICAgICB0aGlzLnN1YnMucHVzaChcbiAgICAgICAgICB0aW1lcigwLCBzY2hlZHVsZS5pbnRlcnZhbClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICBzY2hlZHVsZS5ydW4oY29udGV4dCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NoZWR1bGUucnVuKGNvbnRleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuc3Vicy5mb3JFYWNoKHN1YiA9PiB7XG4gICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICB9KTtcbiAgfVxufVxuIl19