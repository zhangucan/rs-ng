/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { LogLevel } from '@er/types';
import { CommonsUtils, ConfigUtils, DateUtils, DialogUtils } from '@er/utils';
import { HttpUtils } from '../../utils/http';
import * as i0 from "@angular/core";
var LogService = /** @class */ (function () {
    function LogService() {
    }
    /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    LogService.prototype.debug = /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    function (from, message) {
        var context = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            context[_i - 2] = arguments[_i];
        }
        if (!ConfigUtils.getConfig().isProduction
            && ConfigUtils.getConfig().log.enableApp
            && ConfigUtils.getConfig().log.level <= LogLevel.DEBUG) {
            if ((typeof from) !== 'string' && from.constructor) {
                from = from.constructor.name;
            }
            if (ConfigUtils.getConfig().log.blackLList.indexOf(from) < 0) {
                this.getLogger().log("[" + DateUtils.getFormattedTime() + "] %c DEBUG ", 'color: white; background: green; font-size: 18px;', this.getLogData(tslib_1.__spread([from, message], context)));
            }
        }
    };
    /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    LogService.prototype.info = /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    function (from, message) {
        var context = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            context[_i - 2] = arguments[_i];
        }
        if (ConfigUtils.getConfig().log.level <= LogLevel.INFO) {
            if (typeof from !== 'string' && from.constructor) {
                from = from.constructor.name;
            }
            if (ConfigUtils.getConfig().log.blackLList.indexOf(from) < 0) {
                this.getLogger().log("[" + DateUtils.getFormattedTime() + "] %c INFO ", 'color: white; background: blue; font-size: 18px;', this.getLogData(tslib_1.__spread([from, message], context)));
            }
        }
    };
    /**
     * @param {?} messages
     * @return {?}
     */
    LogService.prototype.warn = /**
     * @param {?} messages
     * @return {?}
     */
    function (messages) {
        if (ConfigUtils.getConfig().log.level <= LogLevel.WARN) {
            this.getLogger().log("[" + DateUtils.getFormattedTime() + "] %c WARN ", 'color: white; background: blue; font-size: 18px;', this.getLogData(messages));
        }
    };
    /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    LogService.prototype.error = /**
     * @param {?} from
     * @param {?} message
     * @param {...?} context
     * @return {?}
     */
    function (from, message) {
        var context = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            context[_i - 2] = arguments[_i];
        }
        DialogUtils.error('错误', message);
        if (ConfigUtils.getConfig().log.level <= LogLevel.ERROR) {
            this.getLogger().log("[" + DateUtils.getFormattedTime() + "] %c ERROR ", 'color: white; background: red; font-size: 18px;', this.getLogData(tslib_1.__spread([from, message], context)));
            if (ConfigUtils.getConfig().log.httpPost) {
                if (CommonsUtils.isFunction(from)) {
                    from = from.constructor.name;
                }
                this.getHttpLogger().log(DateUtils.getFormattedDateTime(), this.getLogData([from, message]));
            }
        }
    };
    /**
     * @protected
     * @return {?}
     */
    LogService.prototype.getLogger = /**
     * @protected
     * @return {?}
     */
    function () {
        return console;
    };
    /**
     * @protected
     * @return {?}
     */
    LogService.prototype.getHttpLogger = /**
     * @protected
     * @return {?}
     */
    function () {
        return (/** @type {?} */ ({
            log: function (message) {
                var optionalParams = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    optionalParams[_i - 1] = arguments[_i];
                }
                HttpUtils.request(tslib_1.__assign({}, ConfigUtils.getConfig().logHttpOptions, { body: tslib_1.__assign({ message: message }, optionalParams) }));
            }
        }));
    };
    /**
     * @private
     * @param {?} messages
     * @return {?}
     */
    LogService.prototype.getLogData = /**
     * @private
     * @param {?} messages
     * @return {?}
     */
    function (messages) {
        return tslib_1.__assign({}, messages);
    };
    LogService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ LogService.ngInjectableDef = i0.defineInjectable({ factory: function LogService_Factory() { return new LogService(); }, token: LogService, providedIn: "root" });
    return LogService;
}());
export { LogService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2xvZy9zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDNUUsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGtCQUFrQixDQUFDOztBQUUzQztJQUFBO0tBZ0ZDOzs7Ozs7O0lBM0VDLDBCQUFLOzs7Ozs7SUFBTCxVQUFNLElBQUksRUFBRSxPQUFlO1FBQUUsaUJBQWlCO2FBQWpCLFVBQWlCLEVBQWpCLHFCQUFpQixFQUFqQixJQUFpQjtZQUFqQixnQ0FBaUI7O1FBQzVDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUMsWUFBWTtlQUNwQyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVM7ZUFDckMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRTtZQUN4RCxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsS0FBSyxRQUFRLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDbEQsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO2FBQzlCO1lBQ0QsSUFBSSxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUM1RCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQUksU0FBUyxDQUFDLGdCQUFnQixFQUFFLGdC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QUF3Qjs7Z0JBQzNDLFNBQVMsQ0FBQyxPQUFPLHNCQUNaLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxjQUFjLElBQ3pDLElBQUkscUJBQ0YsT0FBTyxTQUFBLElBQ0osY0FBYyxLQUVuQixDQUFDO1lBQ0wsQ0FBQztTQUNGLEVBQUEsQ0FBQztJQUNKLENBQUM7Ozs7OztJQUVPLCtCQUFVOzs7OztJQUFsQixVQUFtQixRQUFhO1FBQzlCLDRCQUNLLFFBQVEsRUFDWDtJQUNKLENBQUM7O2dCQS9FRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7cUJBUEQ7Q0FxRkMsQUFoRkQsSUFnRkM7U0E3RVksVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0xvZ0xldmVsfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb21tb25zVXRpbHMsIENvbmZpZ1V0aWxzLCBEYXRlVXRpbHMsIERpYWxvZ1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtIdHRwVXRpbHN9IGZyb20gJy4uLy4uL3V0aWxzL2h0dHAnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBMb2dTZXJ2aWNlIHtcblxuICBkZWJ1Zyhmcm9tLCBtZXNzYWdlOiBzdHJpbmcsIC4uLmNvbnRleHQ6IGFueVtdKSB7XG4gICAgaWYgKCFDb25maWdVdGlscy5nZXRDb25maWcoKS5pc1Byb2R1Y3Rpb25cbiAgICAgICYmIENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmxvZy5lbmFibGVBcHBcbiAgICAgICYmIENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmxvZy5sZXZlbCA8PSBMb2dMZXZlbC5ERUJVRykge1xuICAgICAgaWYgKCh0eXBlb2YgZnJvbSkgIT09ICdzdHJpbmcnICYmIGZyb20uY29uc3RydWN0b3IpIHtcbiAgICAgICAgZnJvbSA9IGZyb20uY29uc3RydWN0b3IubmFtZTtcbiAgICAgIH1cbiAgICAgIGlmIChDb25maWdVdGlscy5nZXRDb25maWcoKS5sb2cuYmxhY2tMTGlzdC5pbmRleE9mKGZyb20pIDwgMCkge1xuICAgICAgICB0aGlzLmdldExvZ2dlcigpLmxvZyhgWyR7RGF0ZVV0aWxzLmdldEZvcm1hdHRlZFRpbWUoKX1dICVjIERFQlVHIGAsXG4gICAgICAgICAgJ2NvbG9yOiB3aGl0ZTsgYmFja2dyb3VuZDogZ3JlZW47IGZvbnQtc2l6ZTogMThweDsnLFxuICAgICAgICAgIHRoaXMuZ2V0TG9nRGF0YShbZnJvbSwgbWVzc2FnZSwgLi4uY29udGV4dF0pKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpbmZvKGZyb20sIG1lc3NhZ2U6IHN0cmluZywgLi4uY29udGV4dDogYW55W10pIHtcbiAgICBpZiAoQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkubG9nLmxldmVsIDw9IExvZ0xldmVsLklORk8pIHtcbiAgICAgIGlmICh0eXBlb2YgZnJvbSAhPT0gJ3N0cmluZycgJiYgZnJvbS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICBmcm9tID0gZnJvbS5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgfVxuICAgICAgaWYgKENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmxvZy5ibGFja0xMaXN0LmluZGV4T2YoZnJvbSkgPCAwKSB7XG4gICAgICAgIHRoaXMuZ2V0TG9nZ2VyKCkubG9nKGBbJHtEYXRlVXRpbHMuZ2V0Rm9ybWF0dGVkVGltZSgpfV0gJWMgSU5GTyBgLFxuICAgICAgICAgICdjb2xvcjogd2hpdGU7IGJhY2tncm91bmQ6IGJsdWU7IGZvbnQtc2l6ZTogMThweDsnLFxuICAgICAgICAgIHRoaXMuZ2V0TG9nRGF0YShbZnJvbSwgbWVzc2FnZSwgLi4uY29udGV4dF0pKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB3YXJuKG1lc3NhZ2VzOiBhbnkpIHtcbiAgICBpZiAoQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkubG9nLmxldmVsIDw9IExvZ0xldmVsLldBUk4pIHtcbiAgICAgIHRoaXMuZ2V0TG9nZ2VyKCkubG9nKGBbJHtEYXRlVXRpbHMuZ2V0Rm9ybWF0dGVkVGltZSgpfV0gJWMgV0FSTiBgLFxuICAgICAgICAnY29sb3I6IHdoaXRlOyBiYWNrZ3JvdW5kOiBibHVlOyBmb250LXNpemU6IDE4cHg7JyxcbiAgICAgICAgdGhpcy5nZXRMb2dEYXRhKG1lc3NhZ2VzKSk7XG4gICAgfVxuICB9XG5cbiAgZXJyb3IoZnJvbSwgbWVzc2FnZSwgLi4uY29udGV4dDogYW55W10pIHtcbiAgICBEaWFsb2dVdGlscy5lcnJvcign6ZSZ6K+vJywgbWVzc2FnZSk7XG4gICAgaWYgKENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmxvZy5sZXZlbCA8PSBMb2dMZXZlbC5FUlJPUikge1xuICAgICAgdGhpcy5nZXRMb2dnZXIoKS5sb2coYFske0RhdGVVdGlscy5nZXRGb3JtYXR0ZWRUaW1lKCl9XSAlYyBFUlJPUiBgLFxuICAgICAgICAnY29sb3I6IHdoaXRlOyBiYWNrZ3JvdW5kOiByZWQ7IGZvbnQtc2l6ZTogMThweDsnLFxuICAgICAgICB0aGlzLmdldExvZ0RhdGEoW2Zyb20sIG1lc3NhZ2UsIC4uLmNvbnRleHRdKSk7XG4gICAgICBpZiAoQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkubG9nLmh0dHBQb3N0KSB7XG4gICAgICAgIGlmIChDb21tb25zVXRpbHMuaXNGdW5jdGlvbihmcm9tKSkge1xuICAgICAgICAgIGZyb20gPSBmcm9tLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nZXRIdHRwTG9nZ2VyKCkubG9nKERhdGVVdGlscy5nZXRGb3JtYXR0ZWREYXRlVGltZSgpLFxuICAgICAgICAgIHRoaXMuZ2V0TG9nRGF0YShbZnJvbSwgbWVzc2FnZV0pKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0TG9nZ2VyKCk6IENvbnNvbGUge1xuICAgIHJldHVybiBjb25zb2xlO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldEh0dHBMb2dnZXIoKTogQ29uc29sZSB7XG4gICAgcmV0dXJuIDxDb25zb2xlPntcbiAgICAgIGxvZzogKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4ge1xuICAgICAgICBIdHRwVXRpbHMucmVxdWVzdCh7XG4gICAgICAgICAgLi4uQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkubG9nSHR0cE9wdGlvbnMsXG4gICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIC4uLm9wdGlvbmFsUGFyYW1zXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRMb2dEYXRhKG1lc3NhZ2VzOiBhbnkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ubWVzc2FnZXNcbiAgICB9O1xuICB9XG59XG4iXX0=