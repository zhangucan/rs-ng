/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NavigationCancel, NavigationEnd, NavigationError, NavigationStart, Router } from '@angular/router';
import { StateNames } from '@er/types';
import { StatesUtils } from '@er/utils';
import { RouteUtils } from '../../utils/nav';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
var RouterStateService = /** @class */ (function () {
    function RouterStateService(router) {
        var _this = this;
        this.router = router;
        router.events.subscribe(function (event) {
            _this.navigationInterceptor(event);
        });
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RouterStateService.prototype.navigationInterceptor = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var activeRoute = RouteUtils.getActiveRoute();
        if (event instanceof NavigationStart) {
            StatesUtils.create(StateNames.nav, {
                start: true,
                url: activeRoute.url,
                outlet: activeRoute.outlet,
                route: activeRoute
            });
        }
        if (event instanceof NavigationEnd) {
            StatesUtils.update(StateNames.nav, {
                start: false,
                status: 'success',
                url: activeRoute.url,
                outlet: activeRoute.outlet,
                route: activeRoute
            });
            StatesUtils.update(StateNames.currentRoute, { activeRoute: activeRoute });
            /** @type {?} */
            var title = activeRoute.data && activeRoute.data['title'];
            if (title) {
                StatesUtils.update(StateNames.appTitle, { title: title });
            }
        }
        if (event instanceof NavigationCancel) {
            StatesUtils.update(StateNames.nav, {
                start: false,
                status: 'cancel',
                url: activeRoute.url,
                outlet: activeRoute.outlet,
                route: activeRoute
            });
        }
        if (event instanceof NavigationError) {
            StatesUtils.update(StateNames.nav, {
                start: false,
                status: 'error',
                url: activeRoute.url,
                outlet: activeRoute.outlet,
                route: activeRoute
            });
        }
    };
    RouterStateService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    RouterStateService.ctorParameters = function () { return [
        { type: Router }
    ]; };
    /** @nocollapse */ RouterStateService.ngInjectableDef = i0.defineInjectable({ factory: function RouterStateService_Factory() { return new RouterStateService(i0.inject(i1.Router)); }, token: RouterStateService, providedIn: "root" });
    return RouterStateService;
}());
export { RouterStateService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RouterStateService.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3JvdXRlci9zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQWMsTUFBTSxpQkFBaUIsQ0FBQztBQUN2SCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGlCQUFpQixDQUFDOzs7QUFFM0M7SUFLRSw0QkFBb0IsTUFBYztRQUFsQyxpQkFJQztRQUptQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQUMsS0FBa0I7WUFDekMsS0FBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7O0lBRU8sa0RBQXFCOzs7OztJQUE3QixVQUE4QixLQUFrQjs7WUFFeEMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxjQUFjLEVBQUU7UUFFL0MsSUFBSSxLQUFLLFlBQVksZUFBZSxFQUFFO1lBQ3BDLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDakMsS0FBSyxFQUFFLElBQUk7Z0JBQ1gsR0FBRyxFQUFFLFdBQVcsQ0FBQyxHQUFHO2dCQUNwQixNQUFNLEVBQUUsV0FBVyxDQUFDLE1BQU07Z0JBQzFCLEtBQUssRUFBRSxXQUFXO2FBQ25CLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxLQUFLLFlBQVksYUFBYSxFQUFFO1lBQ2xDLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDakMsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osTUFBTSxFQUFFLFNBQVM7Z0JBQ2pCLEdBQUcsRUFBRSxXQUFXLENBQUMsR0FBRztnQkFDcEIsTUFBTSxFQUFFLFdBQVcsQ0FBQyxNQUFNO2dCQUMxQixLQUFLLEVBQUUsV0FBVzthQUNuQixDQUFDLENBQUM7WUFDSCxXQUFXLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsRUFBQyxXQUFXLGFBQUEsRUFBQyxDQUFDLENBQUM7O2dCQUNyRCxLQUFLLEdBQUcsV0FBVyxDQUFDLElBQUksSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUMzRCxJQUFJLEtBQUssRUFBRTtnQkFDVCxXQUFXLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsRUFBQyxLQUFLLE9BQUEsRUFBQyxDQUFDLENBQUM7YUFDbEQ7U0FDRjtRQUVELElBQUksS0FBSyxZQUFZLGdCQUFnQixFQUFFO1lBQ3JDLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDakMsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLEdBQUcsRUFBRSxXQUFXLENBQUMsR0FBRztnQkFDcEIsTUFBTSxFQUFFLFdBQVcsQ0FBQyxNQUFNO2dCQUMxQixLQUFLLEVBQUUsV0FBVzthQUNuQixDQUFDLENBQUM7U0FDSjtRQUVELElBQUksS0FBSyxZQUFZLGVBQWUsRUFBRTtZQUNwQyxXQUFXLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2pDLEtBQUssRUFBRSxLQUFLO2dCQUNaLE1BQU0sRUFBRSxPQUFPO2dCQUNmLEdBQUcsRUFBRSxXQUFXLENBQUMsR0FBRztnQkFDcEIsTUFBTSxFQUFFLFdBQVcsQ0FBQyxNQUFNO2dCQUMxQixLQUFLLEVBQUUsV0FBVzthQUNuQixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7O2dCQTFERixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQVAwRSxNQUFNOzs7NkJBRGpGO0NBaUVDLEFBM0RELElBMkRDO1NBeERZLGtCQUFrQjs7Ozs7O0lBRWpCLG9DQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05hdmlnYXRpb25DYW5jZWwsIE5hdmlnYXRpb25FbmQsIE5hdmlnYXRpb25FcnJvciwgTmF2aWdhdGlvblN0YXJ0LCBSb3V0ZXIsIFJvdXRlckV2ZW50fSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtTdGF0ZU5hbWVzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtTdGF0ZXNVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7Um91dGVVdGlsc30gZnJvbSAnLi4vLi4vdXRpbHMvbmF2JztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUm91dGVyU3RhdGVTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7XG4gICAgcm91dGVyLmV2ZW50cy5zdWJzY3JpYmUoKGV2ZW50OiBSb3V0ZXJFdmVudCkgPT4ge1xuICAgICAgdGhpcy5uYXZpZ2F0aW9uSW50ZXJjZXB0b3IoZXZlbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBuYXZpZ2F0aW9uSW50ZXJjZXB0b3IoZXZlbnQ6IFJvdXRlckV2ZW50KSB7XG5cbiAgICBjb25zdCBhY3RpdmVSb3V0ZSA9IFJvdXRlVXRpbHMuZ2V0QWN0aXZlUm91dGUoKTtcblxuICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25TdGFydCkge1xuICAgICAgU3RhdGVzVXRpbHMuY3JlYXRlKFN0YXRlTmFtZXMubmF2LCB7XG4gICAgICAgIHN0YXJ0OiB0cnVlLFxuICAgICAgICB1cmw6IGFjdGl2ZVJvdXRlLnVybCxcbiAgICAgICAgb3V0bGV0OiBhY3RpdmVSb3V0ZS5vdXRsZXQsXG4gICAgICAgIHJvdXRlOiBhY3RpdmVSb3V0ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCkge1xuICAgICAgU3RhdGVzVXRpbHMudXBkYXRlKFN0YXRlTmFtZXMubmF2LCB7XG4gICAgICAgIHN0YXJ0OiBmYWxzZSxcbiAgICAgICAgc3RhdHVzOiAnc3VjY2VzcycsXG4gICAgICAgIHVybDogYWN0aXZlUm91dGUudXJsLFxuICAgICAgICBvdXRsZXQ6IGFjdGl2ZVJvdXRlLm91dGxldCxcbiAgICAgICAgcm91dGU6IGFjdGl2ZVJvdXRlXG4gICAgICB9KTtcbiAgICAgIFN0YXRlc1V0aWxzLnVwZGF0ZShTdGF0ZU5hbWVzLmN1cnJlbnRSb3V0ZSwge2FjdGl2ZVJvdXRlfSk7XG4gICAgICBjb25zdCB0aXRsZSA9IGFjdGl2ZVJvdXRlLmRhdGEgJiYgYWN0aXZlUm91dGUuZGF0YVsndGl0bGUnXTtcbiAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICBTdGF0ZXNVdGlscy51cGRhdGUoU3RhdGVOYW1lcy5hcHBUaXRsZSwge3RpdGxlfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkNhbmNlbCkge1xuICAgICAgU3RhdGVzVXRpbHMudXBkYXRlKFN0YXRlTmFtZXMubmF2LCB7XG4gICAgICAgIHN0YXJ0OiBmYWxzZSxcbiAgICAgICAgc3RhdHVzOiAnY2FuY2VsJyxcbiAgICAgICAgdXJsOiBhY3RpdmVSb3V0ZS51cmwsXG4gICAgICAgIG91dGxldDogYWN0aXZlUm91dGUub3V0bGV0LFxuICAgICAgICByb3V0ZTogYWN0aXZlUm91dGVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FcnJvcikge1xuICAgICAgU3RhdGVzVXRpbHMudXBkYXRlKFN0YXRlTmFtZXMubmF2LCB7XG4gICAgICAgIHN0YXJ0OiBmYWxzZSxcbiAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICB1cmw6IGFjdGl2ZVJvdXRlLnVybCxcbiAgICAgICAgb3V0bGV0OiBhY3RpdmVSb3V0ZS5vdXRsZXQsXG4gICAgICAgIHJvdXRlOiBhY3RpdmVSb3V0ZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=