/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LocationStrategy, PathLocationStrategy } from '@angular/common';
import { Injectable, Injector, NgZone } from '@angular/core';
import { DomUtils } from '@er/utils';
import { LogService } from '../log/service';
import * as i0 from "@angular/core";
var GlobalErrorHandler = /** @class */ (function () {
    function GlobalErrorHandler(injector, zone) {
        this.injector = injector;
        this.zone = zone;
        this.logService = injector.get(LogService);
        this.location = injector.get(LocationStrategy);
    }
    /**
     * @param {?} error
     * @return {?}
     */
    GlobalErrorHandler.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        /** @type {?} */
        var message = error.message ? error.message : error.toString();
        /** @type {?} */
        var url = this.location instanceof PathLocationStrategy
            ? this.location.path() : '';
        this.logService.error(this, message, url, DomUtils.resolveUserAgent());
    };
    GlobalErrorHandler.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    GlobalErrorHandler.ctorParameters = function () { return [
        { type: Injector },
        { type: NgZone }
    ]; };
    /** @nocollapse */ GlobalErrorHandler.ngInjectableDef = i0.defineInjectable({ factory: function GlobalErrorHandler_Factory() { return new GlobalErrorHandler(i0.inject(i0.INJECTOR), i0.inject(i0.NgZone)); }, token: GlobalErrorHandler, providedIn: "root" });
    return GlobalErrorHandler;
}());
export { GlobalErrorHandler };
if (false) {
    /**
     * @type {?}
     * @private
     */
    GlobalErrorHandler.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    GlobalErrorHandler.prototype.location;
    /**
     * @type {?}
     * @private
     */
    GlobalErrorHandler.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    GlobalErrorHandler.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2Vycm9yL3NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxnQkFBZ0IsRUFBRSxvQkFBb0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZFLE9BQU8sRUFBZSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6RSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFFMUM7SUFRRSw0QkFBb0IsUUFBa0IsRUFDbEIsSUFBWTtRQURaLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUM5QixJQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDakQsQ0FBQzs7Ozs7SUFFRCx3Q0FBVzs7OztJQUFYLFVBQVksS0FBSzs7WUFDVCxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTs7WUFDMUQsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLFlBQVksb0JBQW9CO1lBQ3ZELENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQzdCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDekUsQ0FBQzs7Z0JBbkJGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBTmlDLFFBQVE7Z0JBQUUsTUFBTTs7OzZCQURsRDtDQXlCQyxBQXBCRCxJQW9CQztTQWpCWSxrQkFBa0I7Ozs7OztJQUU3Qix3Q0FBK0I7Ozs7O0lBQy9CLHNDQUFtQzs7Ozs7SUFFdkIsc0NBQTBCOzs7OztJQUMxQixrQ0FBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xvY2F0aW9uU3RyYXRlZ3ksIFBhdGhMb2NhdGlvblN0cmF0ZWd5fSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtFcnJvckhhbmRsZXIsIEluamVjdGFibGUsIEluamVjdG9yLCBOZ1pvbmV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtEb21VdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7TG9nU2VydmljZX0gZnJvbSAnLi4vbG9nL3NlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBHbG9iYWxFcnJvckhhbmRsZXIgaW1wbGVtZW50cyBFcnJvckhhbmRsZXIge1xuXG4gIHByaXZhdGUgbG9nU2VydmljZTogTG9nU2VydmljZTtcbiAgcHJpdmF0ZSBsb2NhdGlvbjogTG9jYXRpb25TdHJhdGVneTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcbiAgICAgICAgICAgICAgcHJpdmF0ZSB6b25lOiBOZ1pvbmUpIHtcbiAgICB0aGlzLmxvZ1NlcnZpY2UgPSBpbmplY3Rvci5nZXQoTG9nU2VydmljZSk7XG4gICAgdGhpcy5sb2NhdGlvbiA9IGluamVjdG9yLmdldChMb2NhdGlvblN0cmF0ZWd5KTtcbiAgfVxuXG4gIGhhbmRsZUVycm9yKGVycm9yKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2UgPyBlcnJvci5tZXNzYWdlIDogZXJyb3IudG9TdHJpbmcoKTtcbiAgICBjb25zdCB1cmwgPSB0aGlzLmxvY2F0aW9uIGluc3RhbmNlb2YgUGF0aExvY2F0aW9uU3RyYXRlZ3lcbiAgICAgID8gdGhpcy5sb2NhdGlvbi5wYXRoKCkgOiAnJztcbiAgICB0aGlzLmxvZ1NlcnZpY2UuZXJyb3IodGhpcywgbWVzc2FnZSwgdXJsLCBEb21VdGlscy5yZXNvbHZlVXNlckFnZW50KCkpO1xuICB9XG59XG4iXX0=