/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpEventType, HttpResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { StateNames } from '@er/types';
import { StatesUtils } from '@er/utils';
import { throwError } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
var HttpProgressInterceptor = /** @class */ (function () {
    function HttpProgressInterceptor() {
        this.inProcess = 0;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    HttpProgressInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        return next
            .handle(req).pipe(tap(function (event) {
            if (event.type === HttpEventType.Sent) {
                StatesUtils.update(StateNames.rootHttp, { inProcess: ++_this.inProcess, request: req });
            }
            else if (event instanceof HttpResponse) {
                StatesUtils.update(StateNames.rootHttp, { inProcess: --_this.inProcess, request: req });
            }
        }), catchError(function (err) {
            StatesUtils.update(StateNames.rootHttp, { inProcess: --_this.inProcess, request: req });
            return throwError(err);
        }));
    };
    HttpProgressInterceptor.decorators = [
        { type: Injectable }
    ];
    return HttpProgressInterceptor;
}());
export { HttpProgressInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpProgressInterceptor.prototype.inProcess;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcmNlcHRvcnMvcHJvZ3Jlc3MvaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBWSxhQUFhLEVBQTZDLFlBQVksRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3ZILE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNyQyxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3RDLE9BQU8sRUFBYSxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUUvQztJQUFBO1FBR1UsY0FBUyxHQUFHLENBQUMsQ0FBQztJQW1CeEIsQ0FBQzs7Ozs7O0lBakJDLDJDQUFTOzs7OztJQUFULFVBQVUsR0FBcUIsRUFBRSxJQUFpQjtRQUFsRCxpQkFnQkM7UUFkQyxPQUFPLElBQUk7YUFDUixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUNmLEdBQUcsQ0FBQyxVQUFBLEtBQUs7WUFDUCxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLElBQUksRUFBRTtnQkFDckMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEVBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQzthQUN0RjtpQkFBTSxJQUFJLEtBQUssWUFBWSxZQUFZLEVBQUU7Z0JBQ3hDLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxFQUFDLFNBQVMsRUFBRSxFQUFFLEtBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBQyxDQUFDLENBQUM7YUFDdEY7UUFDSCxDQUFDLENBQUMsRUFDRixVQUFVLENBQUMsVUFBQyxHQUFHO1lBQ2IsV0FBVyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEVBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQztZQUNyRixPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ04sQ0FBQzs7Z0JBckJGLFVBQVU7O0lBc0JYLDhCQUFDO0NBQUEsQUF0QkQsSUFzQkM7U0FyQlksdUJBQXVCOzs7Ozs7SUFFbEMsNENBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtIdHRwRXZlbnQsIEh0dHBFdmVudFR5cGUsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0LCBIdHRwUmVzcG9uc2V9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1N0YXRlTmFtZXN9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge1N0YXRlc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCB0aHJvd0Vycm9yfSBmcm9tICdyeGpzJztcbmltcG9ydCB7Y2F0Y2hFcnJvciwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBIdHRwUHJvZ3Jlc3NJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG5cbiAgcHJpdmF0ZSBpblByb2Nlc3MgPSAwO1xuXG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuXG4gICAgcmV0dXJuIG5leHRcbiAgICAgIC5oYW5kbGUocmVxKS5waXBlKFxuICAgICAgICB0YXAoZXZlbnQgPT4ge1xuICAgICAgICAgIGlmIChldmVudC50eXBlID09PSBIdHRwRXZlbnRUeXBlLlNlbnQpIHtcbiAgICAgICAgICAgIFN0YXRlc1V0aWxzLnVwZGF0ZShTdGF0ZU5hbWVzLnJvb3RIdHRwLCB7aW5Qcm9jZXNzOiArK3RoaXMuaW5Qcm9jZXNzLCByZXF1ZXN0OiByZXF9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlKSB7XG4gICAgICAgICAgICBTdGF0ZXNVdGlscy51cGRhdGUoU3RhdGVOYW1lcy5yb290SHR0cCwge2luUHJvY2VzczogLS10aGlzLmluUHJvY2VzcywgcmVxdWVzdDogcmVxfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB7XG4gICAgICAgICAgU3RhdGVzVXRpbHMudXBkYXRlKFN0YXRlTmFtZXMucm9vdEh0dHAsIHtpblByb2Nlc3M6IC0tdGhpcy5pblByb2Nlc3MsIHJlcXVlc3Q6IHJlcX0pO1xuICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycik7XG4gICAgICAgIH0pXG4gICAgICApO1xuICB9XG59XG4iXX0=