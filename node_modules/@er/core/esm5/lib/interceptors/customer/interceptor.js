/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ConfigUtils } from '@er/utils';
var HttpAppConfiguredInterceptor = /** @class */ (function () {
    function HttpAppConfiguredInterceptor() {
        this.customerInterceptors = ConfigUtils.getConfig().httpInterceptors;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    HttpAppConfiguredInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        // const cloned = req.clone();
        // if (this.customerInterceptors) {
        //   this.customerInterceptors.forEach((interceptor: HttpInterceptorConfig) => {
        //     if (req && interceptor.request && RegUtils.test(req.url, interceptor.urlPatterns)) {
        //      // cloned = interceptor.request(cloned);
        //     }
        //   });
        // }
        return next.handle(req);
        // .pipe(
        //    map(response => {
        //      if (this.customerInterceptors) {
        //        this.customerInterceptors.forEach((interceptor: HttpInterceptorConfig) => {
        //          if (interceptor.response && RegUtils.test(req.url, interceptor.urlPatterns)) {
        //            interceptor.response(response);
        //          }
        //        });
        //        return response;
        //      } else {
        //        return response;
        //      }
        //    })
        // );
    };
    HttpAppConfiguredInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpAppConfiguredInterceptor.ctorParameters = function () { return []; };
    return HttpAppConfiguredInterceptor;
}());
export { HttpAppConfiguredInterceptor };
if (false) {
    /** @type {?} */
    HttpAppConfiguredInterceptor.prototype.customerInterceptors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcmNlcHRvcnMvY3VzdG9tZXIvaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUl0QztJQUtFO1FBQ0UsSUFBSSxDQUFDLG9CQUFvQixHQUFHLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztJQUN2RSxDQUFDOzs7Ozs7SUFFRCxnREFBUzs7Ozs7SUFBVCxVQUFVLEdBQXFCLEVBQUUsSUFBaUI7UUFDakQsOEJBQThCO1FBQzdCLG1DQUFtQztRQUNuQyxnRkFBZ0Y7UUFDaEYsMkZBQTJGO1FBQzNGLGdEQUFnRDtRQUNoRCxRQUFRO1FBQ1IsUUFBUTtRQUNSLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEIsU0FBUztRQUNULHVCQUF1QjtRQUN2Qix3Q0FBd0M7UUFDeEMscUZBQXFGO1FBQ3JGLDBGQUEwRjtRQUMxRiw2Q0FBNkM7UUFDN0MsYUFBYTtRQUNiLGFBQWE7UUFDYiwwQkFBMEI7UUFDMUIsZ0JBQWdCO1FBQ2hCLDBCQUEwQjtRQUMxQixTQUFTO1FBQ1QsUUFBUTtRQUNSLEtBQUs7SUFDVCxDQUFDOztnQkFqQ0YsVUFBVTs7OztJQWtDWCxtQ0FBQztDQUFBLEFBbENELElBa0NDO1NBakNZLDRCQUE0Qjs7O0lBRXZDLDREQUE4QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cEludGVyY2VwdG9yLCBIdHRwUmVxdWVzdH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SHR0cEludGVyY2VwdG9yQ29uZmlnfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb25maWdVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEh0dHBBcHBDb25maWd1cmVkSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuXG4gIGN1c3RvbWVySW50ZXJjZXB0b3JzOiBIdHRwSW50ZXJjZXB0b3JDb25maWdbXTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmN1c3RvbWVySW50ZXJjZXB0b3JzID0gQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkuaHR0cEludGVyY2VwdG9ycztcbiAgfVxuXG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgLy8gY29uc3QgY2xvbmVkID0gcmVxLmNsb25lKCk7XG4gICAgLy8gaWYgKHRoaXMuY3VzdG9tZXJJbnRlcmNlcHRvcnMpIHtcbiAgICAvLyAgIHRoaXMuY3VzdG9tZXJJbnRlcmNlcHRvcnMuZm9yRWFjaCgoaW50ZXJjZXB0b3I6IEh0dHBJbnRlcmNlcHRvckNvbmZpZykgPT4ge1xuICAgIC8vICAgICBpZiAocmVxICYmIGludGVyY2VwdG9yLnJlcXVlc3QgJiYgUmVnVXRpbHMudGVzdChyZXEudXJsLCBpbnRlcmNlcHRvci51cmxQYXR0ZXJucykpIHtcbiAgICAvLyAgICAgIC8vIGNsb25lZCA9IGludGVyY2VwdG9yLnJlcXVlc3QoY2xvbmVkKTtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgfSk7XG4gICAgLy8gfVxuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpO1xuICAgICAgLy8gLnBpcGUoXG4gICAgICAvLyAgICBtYXAocmVzcG9uc2UgPT4ge1xuICAgICAgLy8gICAgICBpZiAodGhpcy5jdXN0b21lckludGVyY2VwdG9ycykge1xuICAgICAgLy8gICAgICAgIHRoaXMuY3VzdG9tZXJJbnRlcmNlcHRvcnMuZm9yRWFjaCgoaW50ZXJjZXB0b3I6IEh0dHBJbnRlcmNlcHRvckNvbmZpZykgPT4ge1xuICAgICAgLy8gICAgICAgICAgaWYgKGludGVyY2VwdG9yLnJlc3BvbnNlICYmIFJlZ1V0aWxzLnRlc3QocmVxLnVybCwgaW50ZXJjZXB0b3IudXJsUGF0dGVybnMpKSB7XG4gICAgICAvLyAgICAgICAgICAgIGludGVyY2VwdG9yLnJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgIC8vICAgICAgICAgIH1cbiAgICAgIC8vICAgICAgICB9KTtcbiAgICAgIC8vICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAvLyAgICAgIH0gZWxzZSB7XG4gICAgICAvLyAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgLy8gICAgICB9XG4gICAgICAvLyAgICB9KVxuICAgICAgLy8gKTtcbiAgfVxufVxuIl19