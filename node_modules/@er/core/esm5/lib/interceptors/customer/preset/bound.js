/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonsUtils } from '@er/utils';
/**
 * @param {?} bounds
 * @return {?}
 */
export function esBoundInterceptor(bounds) {
    return function (req) {
        /** @type {?} */
        var must = [];
        /** @type {?} */
        var query = CommonsUtils.get(req, 'body.query');
        if (query) {
            /** @type {?} */
            var bool = CommonsUtils.get(req, 'body.query.bool');
            if (!bool) {
                must.push(query);
            }
        }
        must = CommonsUtils.get(req, 'body.query.bool.must', must);
        if (!CommonsUtils.isArray(must)) {
            must = [must];
        }
        /** @type {?} */
        var _bounds = bounds;
        if (!CommonsUtils.isArray(bounds)) {
            _bounds = [bounds];
        }
        _bounds.forEach(function (bound) {
            if (must.indexOf(bound) === -1) {
                if (bound.toJSON) {
                    must.push(bound.toJSON());
                }
                else if (CommonsUtils.isFunction(bound)) {
                    must.push(bound(req));
                }
                else if (CommonsUtils.isJson(bound)) {
                    must.push(bound);
                }
            }
        });
        CommonsUtils.set(req, 'body.query.bool.must', must);
        console.log(must);
        return req;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcmNlcHRvcnMvY3VzdG9tZXIvcHJlc2V0L2JvdW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sV0FBVyxDQUFDOzs7OztBQUV2QyxNQUFNLFVBQVUsa0JBQWtCLENBQUMsTUFBbUI7SUFFcEQsT0FBTyxVQUFDLEdBQXFCOztZQUV2QixJQUFJLEdBQUcsRUFBRTs7WUFFUCxLQUFLLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDO1FBRWpELElBQUksS0FBSyxFQUFFOztnQkFDSCxJQUFJLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUM7WUFDckQsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDVCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ2xCO1NBQ0Y7UUFFRCxJQUFJLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFM0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDL0IsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDZjs7WUFFRyxPQUFPLEdBQUcsTUFBTTtRQUNwQixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNqQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNwQjtRQUVELE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBQSxLQUFLO1lBQ25CLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDOUIsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO29CQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO2lCQUMzQjtxQkFBTSxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ3ZCO3FCQUFNLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDckMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDbEI7YUFDRjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNqQixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0h0dHBSZXF1ZXN0fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge0NvbW1vbnNVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGVzQm91bmRJbnRlcmNlcHRvcihib3VuZHM6IGFueSB8IGFueVtdKSB7XG5cbiAgcmV0dXJuIChyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBIdHRwUmVxdWVzdDxhbnk+ID0+IHtcblxuICAgIGxldCBtdXN0ID0gW107XG5cbiAgICBjb25zdCBxdWVyeSA9IENvbW1vbnNVdGlscy5nZXQocmVxLCAnYm9keS5xdWVyeScpO1xuXG4gICAgaWYgKHF1ZXJ5KSB7XG4gICAgICBjb25zdCBib29sID0gQ29tbW9uc1V0aWxzLmdldChyZXEsICdib2R5LnF1ZXJ5LmJvb2wnKTtcbiAgICAgIGlmICghYm9vbCkge1xuICAgICAgICBtdXN0LnB1c2gocXVlcnkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIG11c3QgPSBDb21tb25zVXRpbHMuZ2V0KHJlcSwgJ2JvZHkucXVlcnkuYm9vbC5tdXN0JywgbXVzdCk7XG5cbiAgICBpZiAoIUNvbW1vbnNVdGlscy5pc0FycmF5KG11c3QpKSB7XG4gICAgICBtdXN0ID0gW211c3RdO1xuICAgIH1cblxuICAgIGxldCBfYm91bmRzID0gYm91bmRzO1xuICAgIGlmICghQ29tbW9uc1V0aWxzLmlzQXJyYXkoYm91bmRzKSkge1xuICAgICAgX2JvdW5kcyA9IFtib3VuZHNdO1xuICAgIH1cblxuICAgIF9ib3VuZHMuZm9yRWFjaChib3VuZCA9PiB7XG4gICAgICBpZiAobXVzdC5pbmRleE9mKGJvdW5kKSA9PT0gLTEpIHtcbiAgICAgICAgaWYgKGJvdW5kLnRvSlNPTikge1xuICAgICAgICAgIG11c3QucHVzaChib3VuZC50b0pTT04oKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoQ29tbW9uc1V0aWxzLmlzRnVuY3Rpb24oYm91bmQpKSB7XG4gICAgICAgICAgbXVzdC5wdXNoKGJvdW5kKHJlcSkpO1xuICAgICAgICB9IGVsc2UgaWYgKENvbW1vbnNVdGlscy5pc0pzb24oYm91bmQpKSB7XG4gICAgICAgICAgbXVzdC5wdXNoKGJvdW5kKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIENvbW1vbnNVdGlscy5zZXQocmVxLCAnYm9keS5xdWVyeS5ib29sLm11c3QnLCBtdXN0KTtcbiAgICBjb25zb2xlLmxvZyhtdXN0KVxuICAgIHJldHVybiByZXE7XG4gIH07XG59XG4iXX0=