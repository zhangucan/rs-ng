/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CommonsUtils, ConfigUtils, StatesUtils } from '@er/utils';
import { take, tap } from 'rxjs/operators';
import { HttpUtils } from '../http';
var ResourceUtils = /** @class */ (function () {
    function ResourceUtils() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    ResourceUtils.getConfigs = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var root = '';
        /** @type {?} */
        var path;
        /** @type {?} */
        var resourceUri = options.path;
        /** @type {?} */
        var resourcesConfig = tslib_1.__assign({}, ConfigUtils.getConfig().resources, options);
        if (resourcesConfig.root) {
            if (!resourceUri.startsWith('/')) {
                root = resourcesConfig.root;
            }
            else {
                resourceUri = resourceUri.substr(1);
            }
            if (!resourceUri.endsWith('.json')) {
                resourceUri += '.json';
            }
        }
        else {
            root = resourcesConfig.uri;
        }
        if (options.state) {
            path = options.state;
        }
        else {
            path = [options.module, options.key];
        }
        /** @type {?} */
        var state = StatesUtils.get(path, true);
        if (!state.value || options.reload) {
            if (options.initial) {
                state.next(options.initial);
            }
            return HttpUtils.request({
                uri: root + "/" + resourceUri,
                tag: path,
                onResponse: function (response) { return response ? CommonsUtils.restoreJsonFn(response) : null; }
            }).pipe(take(1), tap(function (response) { return StatesUtils.create(path, response, resourcesConfig.reserve || resourcesConfig.state !== undefined); }));
        }
        else {
            return state;
        }
    };
    return ResourceUtils;
}());
export { ResourceUtils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9yZXNvdXJjZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUVqRSxPQUFPLEVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFbEM7SUFBQTtJQThDQSxDQUFDOzs7OztJQTVDUSx3QkFBVTs7OztJQUFqQixVQUFrQixPQUF3Qjs7WUFDcEMsSUFBSSxHQUFHLEVBQUU7O1lBQUUsSUFBSTs7WUFDZixXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUk7O1lBQ3hCLGVBQWUsd0JBQ2hCLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxTQUFTLEVBQ2pDLE9BQU8sQ0FDWDtRQUNELElBQUksZUFBZSxDQUFDLElBQUksRUFBRTtZQUN4QixJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDaEMsSUFBSSxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUM7YUFDN0I7aUJBQU07Z0JBQ0wsV0FBVyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDckM7WUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDbEMsV0FBVyxJQUFJLE9BQU8sQ0FBQzthQUN4QjtTQUNGO2FBQU07WUFDTCxJQUFJLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQztTQUM1QjtRQUVELElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtZQUNqQixJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztTQUN0QjthQUFNO1lBQ0wsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdEM7O1lBRUssS0FBSyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztRQUV6QyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ2xDLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtnQkFDbkIsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDN0I7WUFDRCxPQUFPLFNBQVMsQ0FBQyxPQUFPLENBQUM7Z0JBQ3ZCLEdBQUcsRUFBSyxJQUFJLFNBQUksV0FBYTtnQkFDN0IsR0FBRyxFQUFFLElBQUk7Z0JBQ1QsVUFBVSxFQUFFLFVBQUMsUUFBUSxJQUFLLE9BQUEsUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQXRELENBQXNEO2FBQ2pGLENBQUMsQ0FBQyxJQUFJLENBQ0wsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLEdBQUcsQ0FBQyxVQUFBLFFBQVEsSUFBSSxPQUFBLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxlQUFlLENBQUMsT0FBTyxJQUFJLGVBQWUsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLEVBQWxHLENBQWtHLENBQUMsQ0FDcEgsQ0FBQztTQUNIO2FBQU07WUFDTCxPQUFPLEtBQUssQ0FBQztTQUNkO0lBQ0gsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQTlDRCxJQThDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UmVzb3VyY2VPcHRpb25zfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb21tb25zVXRpbHMsIENvbmZpZ1V0aWxzLCBTdGF0ZXNVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge3Rha2UsIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtIdHRwVXRpbHN9IGZyb20gJy4uL2h0dHAnO1xuXG5leHBvcnQgY2xhc3MgUmVzb3VyY2VVdGlscyB7XG5cbiAgc3RhdGljIGdldENvbmZpZ3Mob3B0aW9uczogUmVzb3VyY2VPcHRpb25zKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBsZXQgcm9vdCA9ICcnLCBwYXRoO1xuICAgIGxldCByZXNvdXJjZVVyaSA9IG9wdGlvbnMucGF0aDtcbiAgICBjb25zdCByZXNvdXJjZXNDb25maWcgPSB7XG4gICAgICAuLi5Db25maWdVdGlscy5nZXRDb25maWcoKS5yZXNvdXJjZXMsXG4gICAgICAuLi5vcHRpb25zXG4gICAgfTtcbiAgICBpZiAocmVzb3VyY2VzQ29uZmlnLnJvb3QpIHtcbiAgICAgIGlmICghcmVzb3VyY2VVcmkuc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgICAgIHJvb3QgPSByZXNvdXJjZXNDb25maWcucm9vdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc291cmNlVXJpID0gcmVzb3VyY2VVcmkuc3Vic3RyKDEpO1xuICAgICAgfVxuICAgICAgaWYgKCFyZXNvdXJjZVVyaS5lbmRzV2l0aCgnLmpzb24nKSkge1xuICAgICAgICByZXNvdXJjZVVyaSArPSAnLmpzb24nO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByb290ID0gcmVzb3VyY2VzQ29uZmlnLnVyaTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zdGF0ZSkge1xuICAgICAgcGF0aCA9IG9wdGlvbnMuc3RhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdGggPSBbb3B0aW9ucy5tb2R1bGUsIG9wdGlvbnMua2V5XTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGF0ZSA9IFN0YXRlc1V0aWxzLmdldChwYXRoLCB0cnVlKTtcblxuICAgIGlmICghc3RhdGUudmFsdWUgfHwgb3B0aW9ucy5yZWxvYWQpIHtcbiAgICAgIGlmIChvcHRpb25zLmluaXRpYWwpIHtcbiAgICAgICAgc3RhdGUubmV4dChvcHRpb25zLmluaXRpYWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEh0dHBVdGlscy5yZXF1ZXN0KHtcbiAgICAgICAgdXJpOiBgJHtyb290fS8ke3Jlc291cmNlVXJpfWAsXG4gICAgICAgIHRhZzogcGF0aCxcbiAgICAgICAgb25SZXNwb25zZTogKHJlc3BvbnNlKSA9PiByZXNwb25zZSA/IENvbW1vbnNVdGlscy5yZXN0b3JlSnNvbkZuKHJlc3BvbnNlKSA6IG51bGxcbiAgICAgIH0pLnBpcGUoXG4gICAgICAgIHRha2UoMSksXG4gICAgICAgIHRhcChyZXNwb25zZSA9PiBTdGF0ZXNVdGlscy5jcmVhdGUocGF0aCwgcmVzcG9uc2UsIHJlc291cmNlc0NvbmZpZy5yZXNlcnZlIHx8IHJlc291cmNlc0NvbmZpZy5zdGF0ZSAhPT0gdW5kZWZpbmVkKSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==