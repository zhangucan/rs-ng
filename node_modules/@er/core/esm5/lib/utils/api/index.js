/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ApiServerType, NotifyLevel, StateNames } from '@er/types';
import { CommonsUtils, ConfigUtils, ContextUtils, DialogUtils, EsUtils, StatesUtils } from '@er/utils';
import { of, zip } from 'rxjs';
import { filter, first, map, switchMap } from 'rxjs/operators';
import { HttpUtils } from '../http';
import { LogUtils } from '../log';
/** @type {?} */
export var DEFAULT_API_REQUEST_OPTIONS = {
    notifyFailure: true
};
var ApiUtils = /** @class */ (function () {
    function ApiUtils() {
    }
    /**
     * @param {?} serverType
     * @return {?}
     */
    ApiUtils.getPresetApiOptions = /**
     * @param {?} serverType
     * @return {?}
     */
    function (serverType) {
        if (!serverType) {
            serverType = CommonsUtils.get(ConfigUtils.getConfig(), 'api.default') || ApiServerType.ES;
        }
        ApiUtils.presetApiOptions[serverType] = tslib_1.__assign({}, DEFAULT_API_REQUEST_OPTIONS, CommonsUtils.get(ConfigUtils.getConfig(), "api.servers." + serverType, {}));
        if (!ApiUtils.presetApiOptions[serverType].actions) {
            ApiUtils.presetApiOptions[serverType].actions = {};
        }
        return ApiUtils.presetApiOptions[serverType];
    };
    /**
     * @param {?} payload
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.login = /**
     * @param {?} payload
     * @param {?=} options
     * @return {?}
     */
    function (payload, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.login || {};
        return ApiUtils.doRequest(null, payload, presetActionOptions, options);
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.logout = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.logout || {};
        return ApiUtils.doRequest(null, null, presetActionOptions, options);
    };
    /**
     * @param {?} payload
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.changePwd = /**
     * @param {?} payload
     * @param {?=} options
     * @return {?}
     */
    function (payload, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.changePwd || {};
        return ApiUtils.doRequest(null, payload, presetActionOptions, options);
    };
    /**
     * @param {?} payload
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.register = /**
     * @param {?} payload
     * @param {?=} options
     * @return {?}
     */
    function (payload, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.register || {};
        return ApiUtils.doRequest(null, payload, presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.save = /**
     * @param {?} apiEntry
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, data, options) {
        if (options === void 0) { options = {}; }
        if (data) {
            /** @type {?} */
            var _data = tslib_1.__assign({}, data);
            if (_data['id']) {
                /** @type {?} */
                var id = _data['id'];
                delete _data['id'];
                return ApiUtils.patchById.call(this, apiEntry, id, _data, options);
            }
            else {
                return ApiUtils.create.call(this, apiEntry, _data, options);
            }
        }
    };
    /**
     * @param {?} apiEntry
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.create = /**
     * @param {?} apiEntry
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, data, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.create || {};
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, data, presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.getById = /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, id, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.getById || {};
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, { id: id }, presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?} ids
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.getByIds = /**
     * @param {?} apiEntry
     * @param {?} ids
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, ids, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.getByIds || {};
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, ids, presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?=} payload
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.getByQuery = /**
     * @param {?} apiEntry
     * @param {?=} payload
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, payload, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.getByQuery;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, payload, presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.updateById = /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, id, data, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.updateById;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, tslib_1.__assign({ id: id }, data), presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.patchById = /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, id, data, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.patchById;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, tslib_1.__assign({ id: id }, data), presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?} query
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.updateByQuery = /**
     * @param {?} apiEntry
     * @param {?} query
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, query, data, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.updateByQuery;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, query, presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.deleteById = /**
     * @param {?} apiEntry
     * @param {?} id
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, id, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var obv = DialogUtils.confirm('操作确认', '确认执行<b>删除</b>操作吗?')
            .pipe(first(), filter(function (accept) { return accept; }), switchMap(function (_) {
            /** @type {?} */
            var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.deleteById;
            return ApiUtils.doRequest(apiEntry, id, presetActionOptions, options);
        }));
        return obv;
    };
    /**
     * @param {?} apiEntry
     * @param {?} query
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.deleteByQuery = /**
     * @param {?} apiEntry
     * @param {?} query
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, query, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.deleteByQuery;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, query, presetActionOptions, options);
    };
    /**
     * @param {?} apiEntry
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    ApiUtils.batch = /**
     * @param {?} apiEntry
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    function (apiEntry, body, options) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var presetActionOptions = ApiUtils.getPresetApiOptions(options.serverType).actions.batch;
        ApiUtils.setContext(options, this);
        return ApiUtils.doRequest(apiEntry, body, presetActionOptions, options);
    };
    /**
     * @param {?} dataSource
     * @param {?=} tag
     * @return {?}
     */
    ApiUtils.batchFetch = /**
     * @param {?} dataSource
     * @param {?=} tag
     * @return {?}
     */
    function (dataSource, tag) {
        if (dataSource) {
            /** @type {?} */
            var _apiDataProp = dataSource;
            if (dataSource['apiDataProps']) {
                _apiDataProp = dataSource['apiDataProps'];
            }
            _apiDataProp = CommonsUtils.copy(_apiDataProp);
            /** @type {?} */
            var apiDataProps_1 = CommonsUtils.getArrayValue(_apiDataProp);
            if (CommonsUtils.isEmpty(apiDataProps_1)) {
                return;
            }
            if (!tag) {
                tag = dataSource['id'] || apiDataProps_1[0].id || '';
            }
            apiDataProps_1.forEach(function (apiDataProp) {
                if (dataSource['query']) {
                    /** @type {?} */
                    var query = dataSource['query'];
                    /** @type {?} */
                    var apiQuery = CommonsUtils.getArrayValue(apiDataProp.query || []);
                    apiQuery.concat(CommonsUtils.getArrayValue(query));
                    apiDataProp.query = apiQuery;
                }
                /** @type {?} */
                var _filter = apiDataProp.filter;
                if (CommonsUtils.isFunction(_filter)) {
                    if (dataSource['queryValue']) {
                        apiDataProp.filter = ((/** @type {?} */ (apiDataProp.filter)))(dataSource['queryValue']);
                    }
                    else {
                        delete apiDataProp.filter;
                    }
                }
                if (dataSource['interval']) {
                    CommonsUtils.set((/** @type {?} */ (apiDataProp)), 'aggProps.interval', dataSource['interval']);
                }
                if (dataSource['format']) {
                    CommonsUtils.set((/** @type {?} */ (apiDataProp)), 'aggProps.format', dataSource['format']);
                }
            });
            // return forkJoin(...apiDataProps.map(apiDataProp => ApiUtils.fetch(apiDataProp, tag)))
            //   .pipe(
            //     catchError((err) => throwError(err))
            //   );
            return zip.apply(void 0, tslib_1.__spread(apiDataProps_1.map(function (apiDataProp) { return ApiUtils.fetch(apiDataProp, tag); }))).pipe(map(function (dataSet) {
                /** @type {?} */
                var resultList;
                /** @type {?} */
                var resultMap;
                dataSet.forEach(function (data, i) {
                    if (apiDataProps_1[i].id) {
                        if (!resultMap) {
                            resultMap = {};
                        }
                        resultMap[apiDataProps_1[i].id] = data;
                    }
                    else {
                        if (!resultList) {
                            resultList = [];
                        }
                        resultList.push(data);
                    }
                });
                if (resultList && resultList.length === 1) {
                    resultList = resultList[0];
                }
                if (resultMap && resultList) {
                    return tslib_1.__assign({}, resultMap, { data: resultList });
                }
                else {
                    return resultMap || resultList || [];
                }
            }));
        }
    };
    /**
     * @param {?} apiDataProps
     * @param {?=} tag
     * @return {?}
     */
    ApiUtils.fetch = /**
     * @param {?} apiDataProps
     * @param {?=} tag
     * @return {?}
     */
    function (apiDataProps, tag) {
        if (!apiDataProps.apiEntry) {
            LogUtils.error('apiUtil', '没有定义apiEntry');
            return of([]);
        }
        /** @type {?} */
        var queryPayload;
        if (CommonsUtils.isFunction(apiDataProps.payload)) {
            queryPayload = ((/** @type {?} */ (apiDataProps.payload))).call(undefined, apiDataProps);
        }
        else if (apiDataProps.payload) {
            queryPayload = apiDataProps.payload;
        }
        if (!queryPayload) {
            /** @type {?} */
            var qBody = EsUtils.buildQueryBody(apiDataProps);
            queryPayload = qBody;
        }
        /** @type {?} */
        var options = apiDataProps.requestOptions || {};
        if (!options.tag) {
            options.tag = tag || '';
        }
        LogUtils.debug('apiUtils', 'apiData数据查询', { apiDataProps: apiDataProps, apiRequestBody: queryPayload });
        return ApiUtils.getByQuery(apiDataProps.apiEntry, queryPayload, options)
            .pipe(map(function (data) {
            /** @type {?} */
            var aggs;
            if (data && data.aggs) {
                aggs = EsUtils.resolveAggs(data.aggs);
                data.aggs = aggs;
            }
            if (CommonsUtils.isEmpty(data.items)) {
                delete data.items;
            }
            if (CommonsUtils.isEmpty(data.aggs)) {
                delete data.aggs;
            }
            /** @type {?} */
            var path = apiDataProps.dataPath || (apiDataProps.aggProps ? 'aggs' : undefined);
            if (path === '/') {
                path = undefined;
            }
            return path ? CommonsUtils.get(data, path) : data;
        }));
    };
    /**
     * @private
     * @param {?} options
     * @param {?} context
     * @return {?}
     */
    ApiUtils.setContext = /**
     * @private
     * @param {?} options
     * @param {?} context
     * @return {?}
     */
    function (options, context) {
        options = options || {};
        options.context = context;
    };
    /**
     * @private
     * @param {?} apiEntry
     * @param {?} payload
     * @param {?} presetActionOptions
     * @param {?=} actionOptions
     * @return {?}
     */
    ApiUtils.doRequest = /**
     * @private
     * @param {?} apiEntry
     * @param {?} payload
     * @param {?} presetActionOptions
     * @param {?=} actionOptions
     * @return {?}
     */
    function (apiEntry, payload, presetActionOptions, actionOptions) {
        /** @type {?} */
        var apiRequestOptions = tslib_1.__assign({}, presetActionOptions, actionOptions);
        delete apiRequestOptions.actions;
        /** @type {?} */
        var requestPayload = payload;
        /** @type {?} */
        var requestOptions = tslib_1.__assign({}, apiRequestOptions, { uri: ApiUtils.buildUri(apiEntry, requestPayload, apiRequestOptions), payload: ApiUtils.buildPayload(apiEntry, requestPayload, apiRequestOptions) });
        delete requestOptions.paramsKeys;
        delete requestOptions.uriResolver;
        delete requestOptions.payloadResolver;
        if (!requestOptions.uri || !requestOptions.uri.startsWith('http')) {
            /** @type {?} */
            var apiServer = ApiUtils.getPresetApiOptions(presetActionOptions.serverType).uri || '';
            requestOptions.uri = apiServer + (requestOptions.uri.startsWith('/') ? '' : '/') + requestOptions.uri;
        }
        return HttpUtils.request(requestOptions)
            .pipe(filter(function (response) { return !!response; }), map(function (response) {
            if (response.success === true) {
                if (apiRequestOptions.alertSuccess) {
                    DialogUtils.info('操作完成', apiRequestOptions.successMessage);
                }
                if (apiRequestOptions.notifySuccess) {
                    StatesUtils.create(StateNames.notify, {
                        title: '操作完成',
                        message: apiRequestOptions.successMessage
                    });
                }
                if (apiRequestOptions.onSuccess) {
                    return apiRequestOptions.onSuccess.call(requestOptions.context, response, requestOptions);
                }
                else {
                    if (apiRequestOptions.dataPath) {
                        return CommonsUtils.get(response.content, apiRequestOptions.dataPath);
                    }
                    return response.content || response;
                }
            }
            else if (!response.success === false) {
                if (apiRequestOptions.alertFailure) {
                    DialogUtils.error('操作失败', response.message);
                }
                if (apiRequestOptions.notifyFailure) {
                    StatesUtils.create(StateNames.notify, {
                        level: NotifyLevel.ERROR,
                        title: response.error,
                        message: response.message
                    });
                }
                if (apiRequestOptions.onFailure) {
                    return apiRequestOptions.onFailure.call(requestOptions.context, response, requestOptions);
                }
                return response;
            }
            return response;
        }), first());
    };
    /**
     * @private
     * @param {?} apiEntry
     * @param {?} payload
     * @param {?} options
     * @return {?}
     */
    ApiUtils.buildUri = /**
     * @private
     * @param {?} apiEntry
     * @param {?} payload
     * @param {?} options
     * @return {?}
     */
    function (apiEntry, payload, options) {
        /** @type {?} */
        var uri = apiEntry;
        if (CommonsUtils.isTemplateStr(apiEntry)) {
            // apiEntry = CommonsUtils.templateStr(apiEntry, ContextUtils.context());
        }
        if (CommonsUtils.isString(options.uriResolver)) {
            uri = (/** @type {?} */ (options.uriResolver));
        }
        else if (CommonsUtils.isFunction(options.uriResolver)) {
            uri = ((/** @type {?} */ (options.uriResolver))).call(options.context, apiEntry, payload, options);
        }
        else if (!uri) {
            uri = options.uri || '';
        }
        if (!uri.startsWith('http')) {
            /** @type {?} */
            var serverUri = ApiUtils.getPresetApiOptions(options.serverType).uri;
            if (serverUri) {
                uri = serverUri + (uri.startsWith('/') ? uri : '/' + uri);
            }
        }
        return uri;
    };
    /**
     * @private
     * @param {?} apiEntry
     * @param {?} payload
     * @param {?} options
     * @return {?}
     */
    ApiUtils.buildPayload = /**
     * @private
     * @param {?} apiEntry
     * @param {?} payload
     * @param {?} options
     * @return {?}
     */
    function (apiEntry, payload, options) {
        /** @type {?} */
        var _payload = payload;
        if (CommonsUtils.isJson(_payload)) {
            _payload = CommonsUtils.merge({}, _payload || {}, options.payload || {}, options.body || options.params || {});
        }
        if (options.payloadResolver) {
            _payload = ((/** @type {?} */ (options.payloadResolver))).call(options.context, apiEntry, _payload, options);
        }
        if (CommonsUtils.isString(_payload)) {
            return _payload;
        }
        else if (CommonsUtils.isString(options.body)) {
            return options.body;
        }
        else if (CommonsUtils.isEmpty(_payload)) {
            return undefined;
        }
        _payload = ContextUtils.resolveVariables(_payload);
        _payload = ApiUtils.resolveApiParamsName(options.paramsKeys || ApiUtils.getPresetApiOptions(options.serverType).paramsKeys || {}, _payload);
        if (CommonsUtils.isEmpty(_payload)) {
            return undefined;
        }
        return _payload;
    };
    /**
     * @private
     * @param {?} paramsKeys
     * @param {?} payload
     * @return {?}
     */
    ApiUtils.resolveApiParamsName = /**
     * @private
     * @param {?} paramsKeys
     * @param {?} payload
     * @return {?}
     */
    function (paramsKeys, payload) {
        if (!CommonsUtils.isJson(payload)) {
            return payload;
        }
        /** @type {?} */
        var resolved = {};
        for (var key in payload) {
            if (paramsKeys.hasOwnProperty(key)) {
                resolved[paramsKeys[key]] = payload[key];
            }
            else {
                resolved[key] = payload[key];
            }
        }
        return resolved;
    };
    ApiUtils.presetApiOptions = {};
    return ApiUtils;
}());
export { ApiUtils };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ApiUtils.presetApiOptions;
}
//# sourceMappingURL=data:application/json;base64,