/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StateNames } from '@er/types';
import { ConfigUtils, StatesUtils } from '@er/utils';
import { BehaviorSubject } from 'rxjs';
import { first } from 'rxjs/operators';
import { HttpUtils } from '../http';
import { LogUtils } from '../log';
var DateSyncUtils = /** @class */ (function () {
    function DateSyncUtils() {
    }
    /**
     * @return {?}
     */
    DateSyncUtils.start = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var timeServer = ConfigUtils.getConfig().api.servers.timer;
        if (timeServer) {
            HttpUtils.request({
                uri: timeServer.uri,
                observe: 'events'
            })
                .pipe(first())
                .subscribe(function (response) {
                /** @type {?} */
                var dates = response.headers && response.headers.getAll('Date');
                if (dates) {
                    LogUtils.info('DateSyncUtils', '同步服务器时间', dates);
                    if (dates && dates.length > 0) {
                        DateSyncUtils.updateLocalDate(dates[0]);
                    }
                }
            });
        }
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DateSyncUtils.updateLocalDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var d = new Date(date);
        DateSyncUtils.timeServer$.next(d);
        DateSyncUtils.stopSyncSchedule();
        DateSyncUtils.startRefreshSchedule();
        DateSyncUtils.startSyncSchedule();
    };
    /**
     * @private
     * @return {?}
     */
    DateSyncUtils.stopSyncSchedule = /**
     * @private
     * @return {?}
     */
    function () {
        if (DateSyncUtils.interval) {
            clearInterval(DateSyncUtils.interval);
        }
    };
    /**
     * @private
     * @return {?}
     */
    DateSyncUtils.startRefreshSchedule = /**
     * @private
     * @return {?}
     */
    function () {
        DateSyncUtils.interval = setInterval(function () {
            /** @type {?} */
            var d = DateSyncUtils.timeServer$.value;
            d.setSeconds(DateSyncUtils.timeServer$.value.getSeconds() + 1);
            DateSyncUtils.timeServer$.next(d);
            StatesUtils.create(StateNames.serverTime, { date: d }, true);
        }, 1000);
    };
    /**
     * @private
     * @return {?}
     */
    DateSyncUtils.startSyncSchedule = /**
     * @private
     * @return {?}
     */
    function () {
        setInterval(function () {
            DateSyncUtils.start();
        }, 1000 * 60 * 15);
    };
    DateSyncUtils.timeServer$ = new BehaviorSubject(new Date());
    DateSyncUtils.interval = undefined;
    return DateSyncUtils;
}());
export { DateSyncUtils };
if (false) {
    /** @type {?} */
    DateSyncUtils.timeServer$;
    /**
     * @type {?}
     * @private
     */
    DateSyncUtils.interval;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9kYXRlLXN5bmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDckMsT0FBTyxFQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDbkQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNyQyxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUNsQyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBR2hDO0lBQUE7SUFzREEsQ0FBQzs7OztJQWhEUSxtQkFBSzs7O0lBQVo7O1lBQ1EsVUFBVSxHQUFHLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUs7UUFDNUQsSUFBSSxVQUFVLEVBQUU7WUFDZCxTQUFTLENBQUMsT0FBTyxDQUFDO2dCQUNkLEdBQUcsRUFBRSxVQUFVLENBQUMsR0FBRztnQkFDbkIsT0FBTyxFQUFFLFFBQVE7YUFDbEIsQ0FBQztpQkFDRCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7aUJBQ2IsU0FBUyxDQUFDLFVBQUEsUUFBUTs7b0JBQ1gsS0FBSyxHQUFHLFFBQVEsQ0FBQyxPQUFPLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO2dCQUNqRSxJQUFJLEtBQUssRUFBRTtvQkFDVCxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBQ2pELElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO3dCQUM3QixhQUFhLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUN6QztpQkFDRjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDSCxDQUFDOzs7OztJQUVNLDZCQUFlOzs7O0lBQXRCLFVBQXVCLElBQUk7O1lBQ25CLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDeEIsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsYUFBYSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDakMsYUFBYSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDckMsYUFBYSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDcEMsQ0FBQzs7Ozs7SUFFYyw4QkFBZ0I7Ozs7SUFBL0I7UUFDRSxJQUFJLGFBQWEsQ0FBQyxRQUFRLEVBQUU7WUFDMUIsYUFBYSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN2QztJQUNILENBQUM7Ozs7O0lBRWMsa0NBQW9COzs7O0lBQW5DO1FBQ0UsYUFBYSxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUM7O2dCQUM3QixDQUFDLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQyxLQUFLO1lBQ3pDLENBQUMsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDL0QsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzdELENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNYLENBQUM7Ozs7O0lBRWMsK0JBQWlCOzs7O0lBQWhDO1FBQ0UsV0FBVyxDQUFDO1lBQ1YsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3hCLENBQUMsRUFBRSxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFuRE0seUJBQVcsR0FBMEIsSUFBSSxlQUFlLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRTdELHNCQUFRLEdBQUcsU0FBUyxDQUFDO0lBa0R0QyxvQkFBQztDQUFBLEFBdERELElBc0RDO1NBdERZLGFBQWE7OztJQUV4QiwwQkFBNEU7Ozs7O0lBRTVFLHVCQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3RhdGVOYW1lc30gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q29uZmlnVXRpbHMsIFN0YXRlc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmaXJzdH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtIdHRwVXRpbHN9IGZyb20gJy4uL2h0dHAnO1xuaW1wb3J0IHtMb2dVdGlsc30gZnJvbSAnLi4vbG9nJztcblxuXG5leHBvcnQgY2xhc3MgRGF0ZVN5bmNVdGlscyB7XG5cbiAgc3RhdGljIHRpbWVTZXJ2ZXIkOiBCZWhhdmlvclN1YmplY3Q8RGF0ZT4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KG5ldyBEYXRlKCkpO1xuXG4gIHByaXZhdGUgc3RhdGljIGludGVydmFsID0gdW5kZWZpbmVkO1xuXG4gIHN0YXRpYyBzdGFydCgpIHtcbiAgICBjb25zdCB0aW1lU2VydmVyID0gQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkuYXBpLnNlcnZlcnMudGltZXI7XG4gICAgaWYgKHRpbWVTZXJ2ZXIpIHtcbiAgICAgIEh0dHBVdGlscy5yZXF1ZXN0KHtcbiAgICAgICAgICB1cmk6IHRpbWVTZXJ2ZXIudXJpLFxuICAgICAgICAgIG9ic2VydmU6ICdldmVudHMnXG4gICAgICAgIH0pXG4gICAgICAgIC5waXBlKGZpcnN0KCkpXG4gICAgICAgIC5zdWJzY3JpYmUocmVzcG9uc2UgPT4ge1xuICAgICAgICAgIGNvbnN0IGRhdGVzID0gcmVzcG9uc2UuaGVhZGVycyAmJiByZXNwb25zZS5oZWFkZXJzLmdldEFsbCgnRGF0ZScpO1xuICAgICAgICAgIGlmIChkYXRlcykge1xuICAgICAgICAgICAgTG9nVXRpbHMuaW5mbygnRGF0ZVN5bmNVdGlscycsICflkIzmraXmnI3liqHlmajml7bpl7QnLCBkYXRlcyk7XG4gICAgICAgICAgICBpZiAoZGF0ZXMgJiYgZGF0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBEYXRlU3luY1V0aWxzLnVwZGF0ZUxvY2FsRGF0ZShkYXRlc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgdXBkYXRlTG9jYWxEYXRlKGRhdGUpIHtcbiAgICBjb25zdCBkID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgRGF0ZVN5bmNVdGlscy50aW1lU2VydmVyJC5uZXh0KGQpO1xuICAgIERhdGVTeW5jVXRpbHMuc3RvcFN5bmNTY2hlZHVsZSgpO1xuICAgIERhdGVTeW5jVXRpbHMuc3RhcnRSZWZyZXNoU2NoZWR1bGUoKTtcbiAgICBEYXRlU3luY1V0aWxzLnN0YXJ0U3luY1NjaGVkdWxlKCk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBzdG9wU3luY1NjaGVkdWxlKCkge1xuICAgIGlmIChEYXRlU3luY1V0aWxzLmludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKERhdGVTeW5jVXRpbHMuaW50ZXJ2YWwpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHN0YXJ0UmVmcmVzaFNjaGVkdWxlKCkge1xuICAgIERhdGVTeW5jVXRpbHMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBjb25zdCBkID0gRGF0ZVN5bmNVdGlscy50aW1lU2VydmVyJC52YWx1ZTtcbiAgICAgIGQuc2V0U2Vjb25kcyhEYXRlU3luY1V0aWxzLnRpbWVTZXJ2ZXIkLnZhbHVlLmdldFNlY29uZHMoKSArIDEpO1xuICAgICAgRGF0ZVN5bmNVdGlscy50aW1lU2VydmVyJC5uZXh0KGQpO1xuICAgICAgU3RhdGVzVXRpbHMuY3JlYXRlKFN0YXRlTmFtZXMuc2VydmVyVGltZSwge2RhdGU6IGR9LCB0cnVlKTtcbiAgICB9LCAxMDAwKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHN0YXJ0U3luY1NjaGVkdWxlKCkge1xuICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIERhdGVTeW5jVXRpbHMuc3RhcnQoKTtcbiAgICB9LCAxMDAwICogNjAgKiAxNSk7XG4gIH1cbn1cbiJdfQ==