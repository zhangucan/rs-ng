/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Location } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { StateNames } from '@er/types';
import { CommonsUtils, StatesUtils } from '@er/utils';
import { DiUtils } from '../di';
var RouteUtils = /** @class */ (function () {
    function RouteUtils() {
    }
    /**
     * @return {?}
     */
    RouteUtils.getActiveRoute = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var route = DiUtils.get(ActivatedRoute);
        while (route.firstChild) {
            route = route.firstChild;
        }
        return route;
    };
    /**
     * @return {?}
     */
    RouteUtils.getActiveRouteData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var route = RouteUtils.getActiveRoute();
        return route && route.snapshot.data;
    };
    /**
     * @param {?=} outletName
     * @param {?=} isRelative
     * @return {?}
     */
    RouteUtils.clearOutlet = /**
     * @param {?=} outletName
     * @param {?=} isRelative
     * @return {?}
     */
    function (outletName, isRelative) {
        if (outletName === void 0) { outletName = 'primary'; }
        if (isRelative === void 0) { isRelative = false; }
        var _a;
        /** @type {?} */
        var extra = {};
        if (!isRelative) {
            extra['relativeTo'] = RouteUtils.getActiveRoute();
        }
        DiUtils.get(Router).navigate([{ outlets: (_a = {}, _a[outletName] = null, _a) }], extra);
    };
    /**
     * @param {?} commands
     * @param {?=} paramsOrRelative
     * @param {?=} extras
     * @return {?}
     */
    RouteUtils.nav = /**
     * @param {?} commands
     * @param {?=} paramsOrRelative
     * @param {?=} extras
     * @return {?}
     */
    function (commands, paramsOrRelative, extras) {
        if (CommonsUtils.isString(commands)) {
            commands = [commands];
        }
        if (!extras) {
            extras = (/** @type {?} */ ({}));
        }
        if (paramsOrRelative && Object.keys(paramsOrRelative).length > 0) {
            CommonsUtils.set((/** @type {?} */ (extras)), 'queryParams', paramsOrRelative);
        }
        if ((CommonsUtils.isString(commands) && !((/** @type {?} */ (commands))).startsWith('/'))
            || (paramsOrRelative === true)) {
            CommonsUtils.set((/** @type {?} */ (extras)), 'relativeTo', RouteUtils.getActiveRoute());
        }
        DiUtils.get(Router).navigate((/** @type {?} */ (commands)), extras);
    };
    /**
     * @return {?}
     */
    RouteUtils.back = /**
     * @return {?}
     */
    function () {
        DiUtils.get(Location).back();
    };
    /**
     * @return {?}
     */
    RouteUtils.forward = /**
     * @return {?}
     */
    function () {
        DiUtils.get(Location).forward();
    };
    /**
     * @return {?}
     */
    RouteUtils.refresh = /**
     * @return {?}
     */
    function () {
        RouteUtils.navigate(StatesUtils.getValue(StateNames.nav)['url']);
    };
    /**
     * @param {?} url
     * @return {?}
     */
    RouteUtils.navigate = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (url.startsWith('http')) {
            window.location.href = url;
        }
        else {
            DiUtils.get(Router).navigateByUrl(url);
        }
    };
    return RouteUtils;
}());
export { RouteUtils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9uYXYvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsY0FBYyxFQUFvQixNQUFNLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxZQUFZLEVBQUUsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3BELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxPQUFPLENBQUM7QUFFOUI7SUFBQTtJQTJEQSxDQUFDOzs7O0lBekRRLHlCQUFjOzs7SUFBckI7O1lBQ00sS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQWlCLGNBQWMsQ0FBQztRQUN2RCxPQUFPLEtBQUssQ0FBQyxVQUFVLEVBQUU7WUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7U0FDMUI7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7SUFFTSw2QkFBa0I7OztJQUF6Qjs7WUFDUSxLQUFLLEdBQUcsVUFBVSxDQUFDLGNBQWMsRUFBRTtRQUN6QyxPQUFPLEtBQUssSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztJQUN0QyxDQUFDOzs7Ozs7SUFFTSxzQkFBVzs7Ozs7SUFBbEIsVUFBbUIsVUFBOEIsRUFBRSxVQUFrQjtRQUFsRCwyQkFBQSxFQUFBLHNCQUE4QjtRQUFFLDJCQUFBLEVBQUEsa0JBQWtCOzs7WUFDN0QsS0FBSyxHQUFHLEVBQUU7UUFDaEIsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxVQUFVLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDbkQ7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFTLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUMsT0FBTyxZQUFHLEdBQUMsVUFBVSxJQUFHLElBQUksS0FBQyxFQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNqRixDQUFDOzs7Ozs7O0lBRU0sY0FBRzs7Ozs7O0lBQVYsVUFBVyxRQUF3QixFQUFFLGdCQUErQixFQUFFLE1BQXlCO1FBQzdGLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNuQyxRQUFRLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN2QjtRQUNELElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxNQUFNLEdBQUcsbUJBQWtCLEVBQUUsRUFBQSxDQUFDO1NBQy9CO1FBQ0QsSUFBSSxnQkFBZ0IsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNoRSxZQUFZLENBQUMsR0FBRyxDQUFDLG1CQUFJLE1BQU0sRUFBQSxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1NBQy9EO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLG1CQUFRLFFBQVEsRUFBQSxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2VBQ3ZFLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxDQUFDLEVBQUU7WUFDaEMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxtQkFBSSxNQUFNLEVBQUEsRUFBRSxZQUFZLEVBQUUsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7U0FDekU7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFTLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxtQkFBTyxRQUFRLEVBQUEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNoRSxDQUFDOzs7O0lBRU0sZUFBSTs7O0lBQVg7UUFDRSxPQUFPLENBQUMsR0FBRyxDQUFXLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pDLENBQUM7Ozs7SUFFTSxrQkFBTzs7O0lBQWQ7UUFDRSxPQUFPLENBQUMsR0FBRyxDQUFXLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzVDLENBQUM7Ozs7SUFFTSxrQkFBTzs7O0lBQWQ7UUFDRSxVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FBQzs7Ozs7SUFFTSxtQkFBUTs7OztJQUFmLFVBQWdCLEdBQVc7UUFDekIsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzFCLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztTQUM1QjthQUFNO1lBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBUyxNQUFNLENBQUMsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDaEQ7SUFDSCxDQUFDO0lBQ0gsaUJBQUM7QUFBRCxDQUFDLEFBM0RELElBMkRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtMb2NhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7QWN0aXZhdGVkUm91dGUsIE5hdmlnYXRpb25FeHRyYXMsIFJvdXRlcn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7U3RhdGVOYW1lc30gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzLCBTdGF0ZXNVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7RGlVdGlsc30gZnJvbSAnLi4vZGknO1xuXG5leHBvcnQgY2xhc3MgUm91dGVVdGlscyB7XG5cbiAgc3RhdGljIGdldEFjdGl2ZVJvdXRlKCkge1xuICAgIGxldCByb3V0ZSA9IERpVXRpbHMuZ2V0PEFjdGl2YXRlZFJvdXRlPihBY3RpdmF0ZWRSb3V0ZSk7XG4gICAgd2hpbGUgKHJvdXRlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHJvdXRlID0gcm91dGUuZmlyc3RDaGlsZDtcbiAgICB9XG4gICAgcmV0dXJuIHJvdXRlO1xuICB9XG5cbiAgc3RhdGljIGdldEFjdGl2ZVJvdXRlRGF0YSgpIHtcbiAgICBjb25zdCByb3V0ZSA9IFJvdXRlVXRpbHMuZ2V0QWN0aXZlUm91dGUoKTtcbiAgICByZXR1cm4gcm91dGUgJiYgcm91dGUuc25hcHNob3QuZGF0YTtcbiAgfVxuXG4gIHN0YXRpYyBjbGVhck91dGxldChvdXRsZXROYW1lOiBzdHJpbmcgPSAncHJpbWFyeScsIGlzUmVsYXRpdmUgPSBmYWxzZSkge1xuICAgIGNvbnN0IGV4dHJhID0ge307XG4gICAgaWYgKCFpc1JlbGF0aXZlKSB7XG4gICAgICBleHRyYVsncmVsYXRpdmVUbyddID0gUm91dGVVdGlscy5nZXRBY3RpdmVSb3V0ZSgpO1xuICAgIH1cbiAgICBEaVV0aWxzLmdldDxSb3V0ZXI+KFJvdXRlcikubmF2aWdhdGUoW3tvdXRsZXRzOiB7W291dGxldE5hbWVdOiBudWxsfX1dLCBleHRyYSk7XG4gIH1cblxuICBzdGF0aWMgbmF2KGNvbW1hbmRzOiBzdHJpbmcgfCBhbnlbXSwgcGFyYW1zT3JSZWxhdGl2ZT86IHt9IHwgYm9vbGVhbiwgZXh0cmFzPzogTmF2aWdhdGlvbkV4dHJhcykge1xuICAgIGlmIChDb21tb25zVXRpbHMuaXNTdHJpbmcoY29tbWFuZHMpKSB7XG4gICAgICBjb21tYW5kcyA9IFtjb21tYW5kc107XG4gICAgfVxuICAgIGlmICghZXh0cmFzKSB7XG4gICAgICBleHRyYXMgPSA8TmF2aWdhdGlvbkV4dHJhcz57fTtcbiAgICB9XG4gICAgaWYgKHBhcmFtc09yUmVsYXRpdmUgJiYgT2JqZWN0LmtleXMocGFyYW1zT3JSZWxhdGl2ZSkubGVuZ3RoID4gMCkge1xuICAgICAgQ29tbW9uc1V0aWxzLnNldCg8e30+ZXh0cmFzLCAncXVlcnlQYXJhbXMnLCBwYXJhbXNPclJlbGF0aXZlKTtcbiAgICB9XG4gICAgaWYgKChDb21tb25zVXRpbHMuaXNTdHJpbmcoY29tbWFuZHMpICYmICEoPHN0cmluZz5jb21tYW5kcykuc3RhcnRzV2l0aCgnLycpKVxuICAgICAgfHwgKHBhcmFtc09yUmVsYXRpdmUgPT09IHRydWUpKSB7XG4gICAgICBDb21tb25zVXRpbHMuc2V0KDx7fT5leHRyYXMsICdyZWxhdGl2ZVRvJywgUm91dGVVdGlscy5nZXRBY3RpdmVSb3V0ZSgpKTtcbiAgICB9XG4gICAgRGlVdGlscy5nZXQ8Um91dGVyPihSb3V0ZXIpLm5hdmlnYXRlKDxhbnlbXT5jb21tYW5kcywgZXh0cmFzKTtcbiAgfVxuXG4gIHN0YXRpYyBiYWNrKCkge1xuICAgIERpVXRpbHMuZ2V0PExvY2F0aW9uPihMb2NhdGlvbikuYmFjaygpO1xuICB9XG5cbiAgc3RhdGljIGZvcndhcmQoKSB7XG4gICAgRGlVdGlscy5nZXQ8TG9jYXRpb24+KExvY2F0aW9uKS5mb3J3YXJkKCk7XG4gIH1cblxuICBzdGF0aWMgcmVmcmVzaCgpIHtcbiAgICBSb3V0ZVV0aWxzLm5hdmlnYXRlKFN0YXRlc1V0aWxzLmdldFZhbHVlKFN0YXRlTmFtZXMubmF2KVsndXJsJ10pO1xuICB9XG5cbiAgc3RhdGljIG5hdmlnYXRlKHVybDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHVybC5zdGFydHNXaXRoKCdodHRwJykpIHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBEaVV0aWxzLmdldDxSb3V0ZXI+KFJvdXRlcikubmF2aWdhdGVCeVVybCh1cmwpO1xuICAgIH1cbiAgfVxufVxuIl19