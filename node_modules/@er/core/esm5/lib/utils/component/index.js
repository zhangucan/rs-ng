/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter } from '@angular/core';
import { CommonsUtils } from '@er/utils';
import { takeUntil } from 'rxjs/operators';
import { LogUtils } from '../log/index';
var ComponentUtils = /** @class */ (function () {
    function ComponentUtils() {
    }
    /**
     * @param {?} compInstance
     * @param {?} props
     * @return {?}
     */
    ComponentUtils.resolveProps = /**
     * @param {?} compInstance
     * @param {?} props
     * @return {?}
     */
    function (compInstance, props) {
        /** @type {?} */
        var result = {
            inputs: {},
            outputs: {}
        };
        if (compInstance && CommonsUtils.isJson(props)) {
            Object.keys(props).forEach(function (key) {
                if (compInstance[key] instanceof EventEmitter) {
                    result.outputs[key] = props[key];
                }
                else {
                    result.inputs[key] = props[key];
                }
            });
        }
        return result;
    };
    /**
     * @param {?} compInstance
     * @param {?} hooks
     * @param {?} constructor
     * @param {?} destructor
     * @return {?}
     */
    ComponentUtils.bindLifeCycles = /**
     * @param {?} compInstance
     * @param {?} hooks
     * @param {?} constructor
     * @param {?} destructor
     * @return {?}
     */
    function (compInstance, hooks, constructor, destructor) {
        /** @type {?} */
        var originalLifeCycles;
        if (hooks) {
            originalLifeCycles = {};
            Object.keys(hooks).forEach(function (eventName) {
                /** @type {?} */
                var ngEventName = "ng" + CommonsUtils.capitalize(eventName);
                if (compInstance["__" + ngEventName] === true) {
                    ((/** @type {?} */ (hooks[eventName]))).call(compInstance, compInstance);
                }
                else {
                    /** @type {?} */
                    var original_1 = constructor.prototype[ngEventName];
                    constructor.prototype[ngEventName] = function () {
                        var _a;
                        CommonsUtils.isFunction(original_1) && original_1.apply(compInstance, arguments);
                        /** @type {?} */
                        var args = Array.prototype.slice.call(arguments);
                        (_a = ((/** @type {?} */ (hooks[eventName])))).call.apply(_a, tslib_1.__spread([compInstance], args, [compInstance]));
                    };
                    originalLifeCycles[ngEventName] = original_1;
                }
            });
            if (Object.keys(originalLifeCycles).length > 0) {
                /** @type {?} */
                var destroyLifeCycle_1 = 'ngOnDestroy';
                constructor.prototype[destroyLifeCycle_1] = function () {
                    Object.keys(originalLifeCycles).forEach(function (lifeCycleName) {
                        constructor.prototype[lifeCycleName] = originalLifeCycles[lifeCycleName];
                    });
                    CommonsUtils.isFunction(destructor) && destructor.apply(compInstance);
                    constructor.prototype[destroyLifeCycle_1] = destructor;
                };
            }
        }
    };
    // static bindLifeCycles(compInstance, hooks) {
    //   if (!CommonsUtils.isEmpty(hooks)) {
    //     Object.keys(hooks).forEach(eventName => {
    //       const hookName = `ng${CommonsUtils.capitalize(eventName)}`;
    //       const original = compInstance.__proto__[hookName];
    //       compInstance.__proto__[hookName] = function () {
    //         CommonsUtils.isFunction(original) && original.apply(compInstance, arguments);
    //         const args = Array.prototype.slice.call(arguments);
    //         (<Function>hooks[eventName]).call(compInstance, ...args, compInstance);
    //       };
    //     });
    //   }
    // }
    /**
     * set component instance attributes and event from props object
     */
    // static bindLifeCycles(compInstance, hooks) {
    //   if (!CommonsUtils.isEmpty(hooks)) {
    //     Object.keys(hooks).forEach(eventName => {
    //       const hookName = `ng${CommonsUtils.capitalize(eventName)}`;
    //       const original = compInstance.__proto__[hookName];
    //       compInstance.__proto__[hookName] = function () {
    //         CommonsUtils.isFunction(original) && original.apply(compInstance, arguments);
    //         const args = Array.prototype.slice.call(arguments);
    //         (<Function>hooks[eventName]).call(compInstance, ...args, compInstance);
    //       };
    //     });
    //   }
    // }
    /**
     * set component instance attributes and event from props object
     * @param {?} compInstance
     * @param {?} props
     * @param {?=} unSubscribe
     * @return {?}
     */
    ComponentUtils.bind = 
    // static bindLifeCycles(compInstance, hooks) {
    //   if (!CommonsUtils.isEmpty(hooks)) {
    //     Object.keys(hooks).forEach(eventName => {
    //       const hookName = `ng${CommonsUtils.capitalize(eventName)}`;
    //       const original = compInstance.__proto__[hookName];
    //       compInstance.__proto__[hookName] = function () {
    //         CommonsUtils.isFunction(original) && original.apply(compInstance, arguments);
    //         const args = Array.prototype.slice.call(arguments);
    //         (<Function>hooks[eventName]).call(compInstance, ...args, compInstance);
    //       };
    //     });
    //   }
    // }
    /**
     * set component instance attributes and event from props object
     * @param {?} compInstance
     * @param {?} props
     * @param {?=} unSubscribe
     * @return {?}
     */
    function (compInstance, props, unSubscribe) {
        var _loop_1 = function (prop) {
            if (prop === 'hooks') {
                /** @type {?} */
                var constructor = ComponentUtils.getConstructor(compInstance);
                /** @type {?} */
                var destructor = constructor.prototype['ngOnDestroy'];
                ComponentUtils.bindLifeCycles(compInstance, props[prop], constructor, destructor);
            }
            else if ((compInstance[prop] instanceof EventEmitter)) {
                ((/** @type {?} */ (compInstance[prop])))
                    .pipe(takeUntil(unSubscribe || compInstance['destroyed$']))
                    .subscribe(function (event) {
                    try {
                        if (CommonsUtils.isFunction(compInstance['getEventContext'])) {
                            event = compInstance.getEventContext(event);
                        }
                        props[prop].call(compInstance, event);
                    }
                    catch (e) {
                        LogUtils.error(compInstance, '操作失败', e);
                    }
                });
            }
            else {
                compInstance[prop] = props[prop];
            }
        };
        for (var prop in props) {
            _loop_1(prop);
        }
    };
    /**
     * @param {?} compInstance
     * @param {?} methodName
     * @param {?} newFun
     * @param {?=} position
     * @return {?}
     */
    ComponentUtils.reWriteMethod = /**
     * @param {?} compInstance
     * @param {?} methodName
     * @param {?} newFun
     * @param {?=} position
     * @return {?}
     */
    function (compInstance, methodName, newFun, position) {
        if (position === void 0) { position = 'after'; }
        /** @type {?} */
        var buildInFn = compInstance[methodName];
        Object.defineProperty(compInstance, methodName, {
            get: function () {
                return function (args) {
                    if (buildInFn && position === 'after') {
                        buildInFn.call(compInstance, args);
                    }
                    newFun.call(compInstance, args);
                    if (buildInFn && position === 'before') {
                        buildInFn.call(compInstance, args);
                    }
                };
            }
        });
    };
    /**
     * @param {?} viewContainer
     * @return {?}
     */
    ComponentUtils.getHostComponentInst = /**
     * @param {?} viewContainer
     * @return {?}
     */
    function (viewContainer) {
        if (viewContainer) {
            /** @type {?} */
            var componentView = viewContainer['_data'].componentView;
            if (componentView) {
                return componentView.component;
            }
        }
        return null;
    };
    /**
     * @param {?} viewContainer
     * @return {?}
     */
    ComponentUtils.getViewComponentRef = /**
     * @param {?} viewContainer
     * @return {?}
     */
    function (viewContainer) {
        if (viewContainer) {
            /** @type {?} */
            var view = viewContainer['_view'];
            if (view) {
                return view.component;
            }
        }
        return null;
    };
    /**
     * @param {?} component
     * @return {?}
     */
    ComponentUtils.getConstructor = /**
     * @param {?} component
     * @return {?}
     */
    function (component) {
        return component.__proto__.constructor;
    };
    return ComponentUtils;
}());
export { ComponentUtils };
//# sourceMappingURL=data:application/json;base64,