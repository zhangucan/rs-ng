/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Order } from '@er/types';
import { CommonsUtils, DialogUtils, StatesUtils } from '@er/utils';
import * as esb from 'elastic-builder';
import { throwError } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { ApiUtils } from '../api';
/**
 * @record
 */
export function NextSeqProps() { }
if (false) {
    /** @type {?|undefined} */
    NextSeqProps.prototype.apiEntry;
    /** @type {?|undefined} */
    NextSeqProps.prototype.parent;
    /** @type {?|undefined} */
    NextSeqProps.prototype.query;
    /** @type {?|undefined} */
    NextSeqProps.prototype.parentKey;
    /** @type {?|undefined} */
    NextSeqProps.prototype.seqKey;
    /** @type {?|undefined} */
    NextSeqProps.prototype.seqLen;
    /** @type {?|undefined} */
    NextSeqProps.prototype.withParent;
}
/**
 * @record
 */
export function DistinctValueProps() { }
if (false) {
    /** @type {?|undefined} */
    DistinctValueProps.prototype.apiProps;
    /** @type {?|undefined} */
    DistinctValueProps.prototype.id;
}
var DataUtils = /** @class */ (function () {
    function DataUtils() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    DataUtils.getNextValue = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _a;
        /** @type {?} */
        var opt = CommonsUtils.defaults(options || {}, DataUtils.DEFAULT_PROPS);
        /** @type {?} */
        var q = CommonsUtils.getArrayValue(opt.query) || [];
        if (opt.parent) {
            q.push(esb.termQuery(opt.parentKey, opt.parent));
        }
        return ApiUtils.getByQuery("" + opt.apiEntry, (/** @type {?} */ ({
            query: q,
            sort: (_a = {}, _a[opt.seqKey] = Order.DESC, _a),
            size: 1
        }))).pipe(map(function (data) {
            /** @type {?} */
            var prefix = '0'.repeat(opt.seqLen);
            /** @type {?} */
            var next = 1;
            if (data.total !== 0) {
                /** @type {?} */
                var last = data.items[0];
                if (last[opt.seqKey]) {
                    next = parseInt(last[opt.seqKey].replace(/^0+/, '')) + 1;
                }
                else {
                    DialogUtils.error('错误', '无法生成新的序列号');
                    throwError('无法生成新的序列号');
                }
            }
            /** @type {?} */
            var seq = (prefix + next).slice(-prefix.length);
            if (opt.withParent && opt.parent) {
                return opt.parent + seq;
            }
            else {
                return seq;
            }
        }));
    };
    /**
     * @param {?} props
     * @return {?}
     */
    DataUtils.checkDistinct = /**
     * @param {?} props
     * @return {?}
     */
    function (props) {
        /** @type {?} */
        var result$ = ApiUtils.fetch(tslib_1.__assign({}, props.apiProps, { size: 2 })).pipe(map(function (data) { return !data.items || data.items.length === 0 ||
            (data.items.length === 1 && data.items[0]['id'] === props.id); }), tap(function (distinct) {
            if (!distinct) {
                DialogUtils.error('验证失败', "\u6570\u503C\u3010" + props.apiProps.queryValue + "\u3011\u5DF2\u7ECF\u5B58\u5728\uFF0C\u8BF7\u4FEE\u6539\u540E\u518D\u6267\u884C\u672C\u64CD\u4F5C\uFF01");
            }
        }));
        return result$;
    };
    /**
     * @param {?} event
     * @param {?} keyOrQuery
     * @return {?}
     */
    DataUtils.onNodeSelect = /**
     * @param {?} event
     * @param {?} keyOrQuery
     * @return {?}
     */
    function (event, keyOrQuery) {
        /** @type {?} */
        var treeProps = event['$from'].$props;
        /** @type {?} */
        var tableId = CommonsUtils.get(treeProps, '$ext.$container.table.$id');
        if (tableId) {
            /** @type {?} */
            var q = keyOrQuery;
            /** @type {?} */
            var nodeCode = event.node.data && event.node.data.code;
            if (nodeCode && CommonsUtils.isString(keyOrQuery)) {
                q = esb.prefixQuery(keyOrQuery, nodeCode);
            }
            StatesUtils.update(tableId, (/** @type {?} */ ({
                query: nodeCode ? q : esb.matchAllQuery()
            })));
        }
    };
    DataUtils.DEFAULT_ROOT_SEQ = '001';
    DataUtils.DEFAULT_PROPS = {
        parentKey: 'parent.code',
        seqKey: 'code',
        seqLen: 3
    };
    return DataUtils;
}());
export { DataUtils };
if (false) {
    /** @type {?} */
    DataUtils.DEFAULT_ROOT_SEQ;
    /** @type {?} */
    DataUtils.DEFAULT_PROPS;
}
//# sourceMappingURL=data:application/json;base64,