/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { StateNames } from '@er/types';
import { CommonsUtils, ConfigUtils, JwtUtils, StatesUtils } from '@er/utils';
import { filter, tap } from 'rxjs/operators';
import { ApiUtils } from '../api';
import { RouteUtils } from '../nav';
import { PermissionUtils } from '../permission';
/**
 * @param {?} route
 * @param {?} state
 * @return {?}
 */
export function anyRoleUser(route, state) {
    if (AuthUtils.getCurrentUser().roles) {
        return AuthUtils.getCurrentUser().roles;
    }
    else {
        return 'NO_ROLE_USER';
    }
}
var AuthUtils = /** @class */ (function () {
    function AuthUtils() {
    }
    /**
     * @param {?} payLoad
     * @param {?=} isRememberMe
     * @return {?}
     */
    AuthUtils.login = /**
     * @param {?} payLoad
     * @param {?=} isRememberMe
     * @return {?}
     */
    function (payLoad, isRememberMe) {
        /** @type {?} */
        var login$ = ApiUtils.login(tslib_1.__assign({}, payLoad, { rememberMe: isRememberMe }), tslib_1.__assign({}, ConfigUtils.getConfig().auth.loginApiOptions || {}, { tag: StateNames.auth }))
            .pipe(filter(function (loginUser) { return !!loginUser; }), tap(function (loginUser) {
            if (loginUser.jwtToken) {
                if (ConfigUtils.getConfig().auth.getUserInfo) {
                    ConfigUtils.getConfig().auth.getUserInfo(loginUser)
                        .subscribe(function (userInfo) {
                        /** @type {?} */
                        var user = tslib_1.__assign({}, loginUser, userInfo);
                        AuthUtils.onLoginSuccess(user, isRememberMe);
                    });
                }
                else {
                    AuthUtils.onLoginSuccess(loginUser, isRememberMe);
                }
            }
        }));
        return login$;
    };
    /**
     * @param {?} payLoad
     * @return {?}
     */
    AuthUtils.register = /**
     * @param {?} payLoad
     * @return {?}
     */
    function (payLoad) {
        /** @type {?} */
        var reg$ = ApiUtils.register(payLoad, tslib_1.__assign({}, ConfigUtils.getConfig().auth.registerApiOptions || ConfigUtils.getConfig().auth.loginApiOptions, { tag: StateNames.auth }));
        return reg$;
    };
    /**
     * @return {?}
     */
    AuthUtils.logout = /**
     * @return {?}
     */
    function () {
        ApiUtils.logout(tslib_1.__assign({}, ConfigUtils.getConfig().auth.logoutApiOptions || ConfigUtils.getConfig().auth.loginApiOptions, { tag: StateNames.auth }))
            .subscribe(function (success) {
            if (success) {
                AuthUtils.updateUser({});
                PermissionUtils.clearRoles();
                PermissionUtils.clearPermission();
                /** @type {?} */
                var url = ConfigUtils.getConfig().auth.logoutSuccessRouter;
                RouteUtils.nav(url);
            }
        });
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    AuthUtils.changePwd = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        /** @type {?} */
        var pwd$ = ApiUtils.changePwd(payload, tslib_1.__assign({}, ConfigUtils.getConfig().auth.changePwdApiOptions || ConfigUtils.getConfig().auth.loginApiOptions, { tag: StateNames.auth }));
        return pwd$;
    };
    /**
     * @return {?}
     */
    AuthUtils.getCurrentUser = /**
     * @return {?}
     */
    function () {
        if (AuthUtils.CURRENT_USER) {
            return AuthUtils.CURRENT_USER || {};
        }
        /** @type {?} */
        var storageKey = ConfigUtils.getConfig().auth.storageKey;
        /** @type {?} */
        var user = (/** @type {?} */ ((JSON.parse(sessionStorage.getItem(storageKey)))));
        if (!user) {
            user = (/** @type {?} */ ((JSON.parse(localStorage.getItem(storageKey)))));
        }
        if (user && user.isSu) {
            user.isAdmin = true;
        }
        AuthUtils.CURRENT_USER = user;
        return AuthUtils.CURRENT_USER || {};
    };
    /**
     * @param {?} patch
     * @param {?=} remeber
     * @return {?}
     */
    AuthUtils.updateUser = /**
     * @param {?} patch
     * @param {?=} remeber
     * @return {?}
     */
    function (patch, remeber) {
        if (!CommonsUtils.isEmpty(patch)) {
            AuthUtils.CURRENT_USER = tslib_1.__assign({}, AuthUtils.CURRENT_USER, patch);
        }
        else {
            AuthUtils.CURRENT_USER = {};
        }
        StatesUtils.update(StateNames.user, AuthUtils.CURRENT_USER);
        /** @type {?} */
        var storageKey = ConfigUtils.getConfig().auth.storageKey;
        sessionStorage.setItem(storageKey, JSON.stringify(AuthUtils.CURRENT_USER));
        if (remeber) {
            if (!CommonsUtils.isEmpty(AuthUtils.CURRENT_USER)) {
                localStorage.setItem(storageKey, JSON.stringify(AuthUtils.CURRENT_USER));
            }
            else {
                localStorage.removeItem(storageKey);
            }
        }
    };
    /**
     * @param {?} returnUrl
     * @return {?}
     */
    AuthUtils.checkLogin = /**
     * @param {?} returnUrl
     * @return {?}
     */
    function (returnUrl) {
        /** @type {?} */
        var currentUser = AuthUtils.getCurrentUser();
        if (currentUser.jwtToken && JwtUtils.isValid(currentUser.jwtToken)) {
            return true;
        }
        else {
            if (true === StatesUtils.getValue(StateNames.auth, 'dialog')) {
                StatesUtils.update(StateNames.popup, {
                    content: ConfigUtils.getConfig().auth.component,
                    header: ConfigUtils.getConfig().auth.title,
                    visible: true,
                    minWidth: 500,
                    minHeight: 300,
                    contentMaxWidth: 500,
                    contentMaxHeight: 300
                });
            }
            else {
                /** @type {?} */
                var loginRouter = ConfigUtils.getConfig().auth.loginRouter;
                StatesUtils.update(StateNames.auth, { successUrl: returnUrl });
                RouteUtils.nav(loginRouter);
            }
            return false;
        }
    };
    /**
     * @private
     * @param {?} user
     * @param {?} isRememberMe
     * @return {?}
     */
    AuthUtils.onLoginSuccess = /**
     * @private
     * @param {?} user
     * @param {?} isRememberMe
     * @return {?}
     */
    function (user, isRememberMe) {
        if (ConfigUtils.getConfig().auth.onLoginSuccess) {
            ConfigUtils.getConfig().auth.onLoginSuccess(user);
        }
        user.enabled = true;
        AuthUtils.updateUser(user, isRememberMe);
        PermissionUtils.addRoles(user.roles);
        if (ConfigUtils.getConfig().auth.defaultRules) {
            PermissionUtils.addRoles(ConfigUtils.getConfig().auth.defaultRules);
        }
        PermissionUtils.addPermissions(user.permissions || []);
        /** @type {?} */
        var key = ConfigUtils.getConfig().auth.requiredUserProps;
        if (key) {
            if (!CommonsUtils.get(user, key)) {
                RouteUtils.nav(ConfigUtils.getConfig().auth.failedPropsRouter);
            }
            else {
                /** @type {?} */
                var successUrl = ConfigUtils.getConfig().auth.loginSuccessRouter;
                RouteUtils.nav(successUrl);
            }
        }
        else {
            /** @type {?} */
            var successUrl = ConfigUtils.getConfig().auth.loginSuccessRouter;
            RouteUtils.nav(successUrl);
        }
    };
    AuthUtils.CURRENT_USER = null;
    return AuthUtils;
}());
export { AuthUtils };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthUtils.CURRENT_USER;
}
//# sourceMappingURL=data:application/json;base64,