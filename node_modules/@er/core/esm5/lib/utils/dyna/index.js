/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Compiler, Component, ComponentFactoryResolver, NgModule } from '@angular/core';
import { CacheUtils } from '@er/utils';
import { DiUtils } from '../di';
/** @type {?} */
var cacheKey = '$component-factory';
var DynaComponentUtils = /** @class */ (function () {
    function DynaComponentUtils() {
    }
    /**
     * @param {?} hostViewContainerRef
     * @param {?} componentType
     * @return {?}
     */
    DynaComponentUtils.createComponentByType = /**
     * @param {?} hostViewContainerRef
     * @param {?} componentType
     * @return {?}
     */
    function (hostViewContainerRef, componentType) {
        if (!componentType) {
            return;
        }
        /** @type {?} */
        var componentFactory = CacheUtils.get(cacheKey, componentType);
        if (!componentFactory) {
            componentFactory = DynaComponentUtils.getComponentFactoryResolver().resolveComponentFactory(componentType);
            CacheUtils.put(cacheKey, componentType, componentFactory);
        }
        return DynaComponentUtils.createComponent(hostViewContainerRef, componentFactory);
    };
    /**
     * @param {?} hostViewContainerRef
     * @param {?} template
     * @return {?}
     */
    DynaComponentUtils.createComponentByTemplate = /**
     * @param {?} hostViewContainerRef
     * @param {?} template
     * @return {?}
     */
    function (hostViewContainerRef, template) {
        if (!template) {
            return;
        }
        /** @type {?} */
        var componentFactory = CacheUtils.get(cacheKey, template);
        if (!componentFactory) {
            /** @type {?} */
            var component_1 = DynaComponentUtils.createDecoratedComponent(null, template);
            /** @type {?} */
            var module = DynaComponentUtils.createNgModule(component_1);
            componentFactory = module.componentFactories.find(function (factory) { return factory.componentType === component_1; });
            CacheUtils.put(cacheKey, template, componentFactory);
        }
        return DynaComponentUtils.createComponent(hostViewContainerRef, componentFactory);
    };
    /**
     * @private
     * @return {?}
     */
    DynaComponentUtils.getComponentFactoryResolver = /**
     * @private
     * @return {?}
     */
    function () {
        if (!DynaComponentUtils._componentFactoryResolver) {
            DynaComponentUtils._componentFactoryResolver = DiUtils.get(ComponentFactoryResolver);
        }
        return DynaComponentUtils._componentFactoryResolver;
    };
    /**
     * @private
     * @param {?} useClass
     * @param {?} template
     * @return {?}
     */
    DynaComponentUtils.createDecoratedComponent = /**
     * @private
     * @param {?} useClass
     * @param {?} template
     * @return {?}
     */
    function (useClass, template) {
        /** @type {?} */
        var componentClass = useClass || /** @class */ (function () {
            function useClass() {
            }
            return useClass;
        }());
        return Component({
            template: template
        })(componentClass);
    };
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    DynaComponentUtils.createNgModule = /**
     * @private
     * @param {?} component
     * @return {?}
     */
    function (component) {
        /** @type {?} */
        var ngModule = NgModule({ declarations: [component] })(/** @class */ (function () {
            function class_1() {
            }
            return class_1;
        }()));
        return DiUtils.get(Compiler).compileModuleAndAllComponentsSync(ngModule);
    };
    /**
     * @private
     * @param {?} hostViewContainerRef
     * @param {?} componentFactory
     * @return {?}
     */
    DynaComponentUtils.createComponent = /**
     * @private
     * @param {?} hostViewContainerRef
     * @param {?} componentFactory
     * @return {?}
     */
    function (hostViewContainerRef, componentFactory) {
        hostViewContainerRef.clear();
        /** @type {?} */
        var componentRef = hostViewContainerRef.createComponent(componentFactory);
        return componentRef;
    };
    DynaComponentUtils._componentFactoryResolver = null;
    return DynaComponentUtils;
}());
export { DynaComponentUtils };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DynaComponentUtils._componentFactoryResolver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9keW5hL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsUUFBUSxFQUNSLFNBQVMsRUFFVCx3QkFBd0IsRUFFeEIsUUFBUSxFQUdULE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDckMsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE9BQU8sQ0FBQzs7SUFFeEIsUUFBUSxHQUFHLG9CQUFvQjtBQUVyQztJQUFBO0lBNkRBLENBQUM7Ozs7OztJQXpEUSx3Q0FBcUI7Ozs7O0lBQTVCLFVBQTZCLG9CQUFzQyxFQUN0QyxhQUF3QjtRQUNuRCxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLE9BQU87U0FDUjs7WUFDRyxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUM7UUFDOUQsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3JCLGdCQUFnQixHQUFHLGtCQUFrQixDQUFDLDJCQUEyQixFQUFFLENBQUMsdUJBQXVCLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDM0csVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixDQUFDLENBQUM7U0FDM0Q7UUFDRCxPQUFPLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxvQkFBb0IsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7Ozs7OztJQUVNLDRDQUF5Qjs7Ozs7SUFBaEMsVUFBaUMsb0JBQXNDLEVBQ3RDLFFBQWdCO1FBRS9DLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixPQUFPO1NBQ1I7O1lBQ0csZ0JBQWdCLEdBQTBCLFVBQVUsQ0FBQyxHQUFHLENBQXdCLFFBQVEsRUFBRSxRQUFRLENBQUM7UUFDdkcsSUFBSSxDQUFDLGdCQUFnQixFQUFFOztnQkFDZixXQUFTLEdBQUcsa0JBQWtCLENBQUMsd0JBQXdCLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQzs7Z0JBQ3ZFLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsV0FBUyxDQUFDO1lBQzNELGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsVUFBQSxPQUFPLElBQUksT0FBQSxPQUFPLENBQUMsYUFBYSxLQUFLLFdBQVMsRUFBbkMsQ0FBbUMsQ0FBQyxDQUFDO1lBQ2xHLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ3REO1FBQ0QsT0FBTyxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsb0JBQW9CLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUNwRixDQUFDOzs7OztJQUVjLDhDQUEyQjs7OztJQUExQztRQUNFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyx5QkFBeUIsRUFBRTtZQUNqRCxrQkFBa0IsQ0FBQyx5QkFBeUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUEyQix3QkFBd0IsQ0FBQyxDQUFDO1NBQ2hIO1FBQ0QsT0FBTyxrQkFBa0IsQ0FBQyx5QkFBeUIsQ0FBQztJQUN0RCxDQUFDOzs7Ozs7O0lBRWMsMkNBQXdCOzs7Ozs7SUFBdkMsVUFBd0MsUUFBYSxFQUFFLFFBQWdCOztZQUMvRCxjQUFjLEdBQUcsUUFBUTtZQUFJO1lBQ25DLENBQUM7WUFBRCxlQUFDO1FBQUQsQ0FBQyxBQURrQyxHQUNsQztRQUNELE9BQU8sU0FBUyxDQUFDO1lBQ2YsUUFBUSxFQUFFLFFBQVE7U0FDbkIsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7Ozs7OztJQUVjLGlDQUFjOzs7OztJQUE3QixVQUE4QixTQUFvQjs7WUFDMUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxFQUFDLFlBQVksRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUM7WUFBQztZQUN2RCxDQUFDO1lBQUQsY0FBQztRQUFELENBQUMsQUFEc0QsSUFDckQ7UUFDRixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQVcsUUFBUSxDQUFDLENBQUMsaUNBQWlDLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckYsQ0FBQzs7Ozs7OztJQUVjLGtDQUFlOzs7Ozs7SUFBOUIsVUFBK0Isb0JBQXNDLEVBQ3RDLGdCQUF1QztRQUNwRSxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7WUFDdkIsWUFBWSxHQUFHLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQztRQUMzRSxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBekRjLDRDQUF5QixHQUE2QixJQUFJLENBQUM7SUEyRDVFLHlCQUFDO0NBQUEsQUE3REQsSUE2REM7U0E3RFksa0JBQWtCOzs7Ozs7SUFFN0IsNkNBQTBFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcGlsZXIsXG4gIENvbXBvbmVudCxcbiAgQ29tcG9uZW50RmFjdG9yeSxcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICBNb2R1bGVXaXRoQ29tcG9uZW50RmFjdG9yaWVzLFxuICBOZ01vZHVsZSxcbiAgVHlwZSxcbiAgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29tcG9uZW50UmVmfSBmcm9tICdAYW5ndWxhci9jb3JlL3NyYy9saW5rZXIvY29tcG9uZW50X2ZhY3RvcnknO1xuaW1wb3J0IHtDYWNoZVV0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtEaVV0aWxzfSBmcm9tICcuLi9kaSc7XG5cbmNvbnN0IGNhY2hlS2V5ID0gJyRjb21wb25lbnQtZmFjdG9yeSc7XG5cbmV4cG9ydCBjbGFzcyBEeW5hQ29tcG9uZW50VXRpbHMge1xuXG4gIHByaXZhdGUgc3RhdGljIF9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciA9IG51bGw7XG5cbiAgc3RhdGljIGNyZWF0ZUNvbXBvbmVudEJ5VHlwZShob3N0Vmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRUeXBlOiBUeXBlPGFueT4pOiBDb21wb25lbnRSZWY8YW55PiB7XG4gICAgaWYgKCFjb21wb25lbnRUeXBlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBjb21wb25lbnRGYWN0b3J5ID0gQ2FjaGVVdGlscy5nZXQoY2FjaGVLZXksIGNvbXBvbmVudFR5cGUpO1xuICAgIGlmICghY29tcG9uZW50RmFjdG9yeSkge1xuICAgICAgY29tcG9uZW50RmFjdG9yeSA9IER5bmFDb21wb25lbnRVdGlscy5nZXRDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIoKS5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShjb21wb25lbnRUeXBlKTtcbiAgICAgIENhY2hlVXRpbHMucHV0KGNhY2hlS2V5LCBjb21wb25lbnRUeXBlLCBjb21wb25lbnRGYWN0b3J5KTtcbiAgICB9XG4gICAgcmV0dXJuIER5bmFDb21wb25lbnRVdGlscy5jcmVhdGVDb21wb25lbnQoaG9zdFZpZXdDb250YWluZXJSZWYsIGNvbXBvbmVudEZhY3RvcnkpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUNvbXBvbmVudEJ5VGVtcGxhdGUoaG9zdFZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBzdHJpbmcpIHtcblxuICAgIGlmICghdGVtcGxhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGNvbXBvbmVudEZhY3Rvcnk6IENvbXBvbmVudEZhY3Rvcnk8YW55PiA9IENhY2hlVXRpbHMuZ2V0PENvbXBvbmVudEZhY3Rvcnk8YW55Pj4oY2FjaGVLZXksIHRlbXBsYXRlKTtcbiAgICBpZiAoIWNvbXBvbmVudEZhY3RvcnkpIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IER5bmFDb21wb25lbnRVdGlscy5jcmVhdGVEZWNvcmF0ZWRDb21wb25lbnQobnVsbCwgdGVtcGxhdGUpO1xuICAgICAgY29uc3QgbW9kdWxlID0gRHluYUNvbXBvbmVudFV0aWxzLmNyZWF0ZU5nTW9kdWxlKGNvbXBvbmVudCk7XG4gICAgICBjb21wb25lbnRGYWN0b3J5ID0gbW9kdWxlLmNvbXBvbmVudEZhY3Rvcmllcy5maW5kKGZhY3RvcnkgPT4gZmFjdG9yeS5jb21wb25lbnRUeXBlID09PSBjb21wb25lbnQpO1xuICAgICAgQ2FjaGVVdGlscy5wdXQoY2FjaGVLZXksIHRlbXBsYXRlLCBjb21wb25lbnRGYWN0b3J5KTtcbiAgICB9XG4gICAgcmV0dXJuIER5bmFDb21wb25lbnRVdGlscy5jcmVhdGVDb21wb25lbnQoaG9zdFZpZXdDb250YWluZXJSZWYsIGNvbXBvbmVudEZhY3RvcnkpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgZ2V0Q29tcG9uZW50RmFjdG9yeVJlc29sdmVyKCk6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciB7XG4gICAgaWYgKCFEeW5hQ29tcG9uZW50VXRpbHMuX2NvbXBvbmVudEZhY3RvcnlSZXNvbHZlcikge1xuICAgICAgRHluYUNvbXBvbmVudFV0aWxzLl9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgPSBEaVV0aWxzLmdldDxDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI+KENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcik7XG4gICAgfVxuICAgIHJldHVybiBEeW5hQ29tcG9uZW50VXRpbHMuX2NvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGNyZWF0ZURlY29yYXRlZENvbXBvbmVudCh1c2VDbGFzczogYW55LCB0ZW1wbGF0ZTogc3RyaW5nKSB7XG4gICAgY29uc3QgY29tcG9uZW50Q2xhc3MgPSB1c2VDbGFzcyB8fCBjbGFzcyB7XG4gICAgfTtcbiAgICByZXR1cm4gQ29tcG9uZW50KHtcbiAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZVxuICAgIH0pKGNvbXBvbmVudENsYXNzKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGNyZWF0ZU5nTW9kdWxlKGNvbXBvbmVudDogVHlwZTxhbnk+KTogTW9kdWxlV2l0aENvbXBvbmVudEZhY3Rvcmllczxhbnk+IHtcbiAgICBjb25zdCBuZ01vZHVsZSA9IE5nTW9kdWxlKHtkZWNsYXJhdGlvbnM6IFtjb21wb25lbnRdfSkoY2xhc3Mge1xuICAgIH0pO1xuICAgIHJldHVybiBEaVV0aWxzLmdldDxDb21waWxlcj4oQ29tcGlsZXIpLmNvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzU3luYyhuZ01vZHVsZSk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBjcmVhdGVDb21wb25lbnQoaG9zdFZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRGYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5PGFueT4pOiBDb21wb25lbnRSZWY8YW55PiB7XG4gICAgaG9zdFZpZXdDb250YWluZXJSZWYuY2xlYXIoKTtcbiAgICBjb25zdCBjb21wb25lbnRSZWYgPSBob3N0Vmlld0NvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnQoY29tcG9uZW50RmFjdG9yeSk7XG4gICAgcmV0dXJuIGNvbXBvbmVudFJlZjtcbiAgfVxuXG59XG4iXX0=