/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StateNames } from '@er/types';
import { StatesUtils } from '@er/utils';
import { distinctUntilChanged, filter, map } from 'rxjs/operators';
/** @type {?} */
export var HTTP_STATE$ = StatesUtils.observe(StateNames.rootHttp)
    .pipe(distinctUntilChanged(), map(function (state) { return state && state.inProcess && state.inProcess > 0; }));
/** @type {?} */
export var HTTP_TAG_STATE$ = function (httpTag) {
    return StatesUtils.observe(StateNames.http, httpTag)
        .pipe(distinctUntilChanged(), filter(function (state) { return !!state; }), map(function (state) { return state && state.start; }));
};
/** @type {?} */
export var ROUTE_STATE$ = StatesUtils.observe(StateNames.nav)
    .pipe(distinctUntilChanged(), filter(function (state) { return !!state; }), map(function (state) { return state && state.start && state.outlet === 'primary'; }));
/** @type {?} */
export var ROUTE_OUTLET_STATE$ = function (outlet) {
    return StatesUtils.observe(StateNames.nav)
        .pipe(distinctUntilChanged(), filter(function (state) { return !!state; }), map(function (state) { return state && state.start && state.outlet === outlet; }));
};
/** @type {?} */
export var WEB_SOCKET_STATES = StatesUtils.observe(StateNames.socket)
    .pipe(distinctUntilChanged(), filter(function (state) { return !!state; }), map(function (state) { return state.state; }));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvc3RhdGVzL2FsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNyQyxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRXRDLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7O0FBR2pFLE1BQU0sS0FBTyxXQUFXLEdBQXdCLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztLQUNyRixJQUFJLENBQ0gsb0JBQW9CLEVBQUUsRUFDdEIsR0FBRyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxJQUFJLEtBQUssQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLEVBQS9DLENBQStDLENBQUMsQ0FDOUQ7O0FBRUgsTUFBTSxLQUFPLGVBQWUsR0FBRyxVQUFDLE9BQU87SUFDckMsT0FBTyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1NBQ2pELElBQUksQ0FDSCxvQkFBb0IsRUFBRSxFQUN0QixNQUFNLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxDQUFDLENBQUMsS0FBSyxFQUFQLENBQU8sQ0FBQyxFQUN4QixHQUFHLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssRUFBcEIsQ0FBb0IsQ0FBQyxDQUNuQyxDQUFDO0FBQ04sQ0FBQzs7QUFFRCxNQUFNLEtBQU8sWUFBWSxHQUF3QixXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7S0FDakYsSUFBSSxDQUNILG9CQUFvQixFQUFFLEVBQ3RCLE1BQU0sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLENBQUMsQ0FBQyxLQUFLLEVBQVAsQ0FBTyxDQUFDLEVBQ3hCLEdBQUcsQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFsRCxDQUFrRCxDQUFDLENBQ2pFOztBQUVILE1BQU0sS0FBTyxtQkFBbUIsR0FBRyxVQUFDLE1BQU07SUFDeEMsT0FBTyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7U0FDdkMsSUFBSSxDQUNILG9CQUFvQixFQUFFLEVBQ3RCLE1BQU0sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLENBQUMsQ0FBQyxLQUFLLEVBQVAsQ0FBTyxDQUFDLEVBQ3hCLEdBQUcsQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssTUFBTSxFQUEvQyxDQUErQyxDQUFDLENBQzlELENBQUM7QUFDTixDQUFDOztBQUVELE1BQU0sS0FBTyxpQkFBaUIsR0FBdUIsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO0tBQ3hGLElBQUksQ0FDSCxvQkFBb0IsRUFBRSxFQUN0QixNQUFNLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxDQUFDLENBQUMsS0FBSyxFQUFQLENBQU8sQ0FBQyxFQUN4QixHQUFHLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLENBQUMsS0FBSyxFQUFYLENBQVcsQ0FBQyxDQUMxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3RhdGVOYW1lc30gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7U3RhdGVzVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgZmlsdGVyLCBtYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuXG5leHBvcnQgY29uc3QgSFRUUF9TVEFURSQ6IE9ic2VydmFibGU8Ym9vbGVhbj4gPSBTdGF0ZXNVdGlscy5vYnNlcnZlKFN0YXRlTmFtZXMucm9vdEh0dHApXG4gIC5waXBlKFxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgbWFwKHN0YXRlID0+IHN0YXRlICYmIHN0YXRlLmluUHJvY2VzcyAmJiBzdGF0ZS5pblByb2Nlc3MgPiAwKVxuICApO1xuXG5leHBvcnQgY29uc3QgSFRUUF9UQUdfU1RBVEUkID0gKGh0dHBUYWcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0+IHtcbiAgcmV0dXJuIFN0YXRlc1V0aWxzLm9ic2VydmUoU3RhdGVOYW1lcy5odHRwLCBodHRwVGFnKVxuICAgIC5waXBlKFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgIGZpbHRlcihzdGF0ZSA9PiAhIXN0YXRlKSxcbiAgICAgIG1hcChzdGF0ZSA9PiBzdGF0ZSAmJiBzdGF0ZS5zdGFydClcbiAgICApO1xufTtcblxuZXhwb3J0IGNvbnN0IFJPVVRFX1NUQVRFJDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IFN0YXRlc1V0aWxzLm9ic2VydmUoU3RhdGVOYW1lcy5uYXYpXG4gIC5waXBlKFxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgZmlsdGVyKHN0YXRlID0+ICEhc3RhdGUpLFxuICAgIG1hcChzdGF0ZSA9PiBzdGF0ZSAmJiBzdGF0ZS5zdGFydCAmJiBzdGF0ZS5vdXRsZXQgPT09ICdwcmltYXJ5JylcbiAgKTtcblxuZXhwb3J0IGNvbnN0IFJPVVRFX09VVExFVF9TVEFURSQgPSAob3V0bGV0KTogT2JzZXJ2YWJsZTxib29sZWFuPiA9PiB7XG4gIHJldHVybiBTdGF0ZXNVdGlscy5vYnNlcnZlKFN0YXRlTmFtZXMubmF2KVxuICAgIC5waXBlKFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgIGZpbHRlcihzdGF0ZSA9PiAhIXN0YXRlKSxcbiAgICAgIG1hcChzdGF0ZSA9PiBzdGF0ZSAmJiBzdGF0ZS5zdGFydCAmJiBzdGF0ZS5vdXRsZXQgPT09IG91dGxldClcbiAgICApO1xufTtcblxuZXhwb3J0IGNvbnN0IFdFQl9TT0NLRVRfU1RBVEVTOiBPYnNlcnZhYmxlPHN0cmluZz4gPSBTdGF0ZXNVdGlscy5vYnNlcnZlKFN0YXRlTmFtZXMuc29ja2V0KVxuICAucGlwZShcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgIGZpbHRlcihzdGF0ZSA9PiAhIXN0YXRlKSxcbiAgICBtYXAoc3RhdGUgPT4gc3RhdGUuc3RhdGUpXG4gICk7XG4iXX0=