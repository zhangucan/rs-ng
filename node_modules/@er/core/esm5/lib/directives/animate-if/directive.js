/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NgIf } from '@angular/common';
import { Directive, EventEmitter, Input, Output, TemplateRef, ViewContainerRef } from '@angular/core';
import { Subject } from 'rxjs/index';
import { Observable } from 'rxjs/internal/Observable';
import { takeUntil } from 'rxjs/operators';
/**
 * @param {?} el
 * @param {?} maxWait
 * @return {?}
 */
function animationEndSafe(el, maxWait) {
    return Observable.create(function (observer) {
        el.addEventListener('animationend', observer);
        setTimeout(observer, maxWait);
    });
    // return new Promise((resolve, reject) => {
    //   el.addEventListener('animationend', resolve);
    //   setTimeout(resolve, maxWait);
    // });
}
var AnimatedIfDirective = /** @class */ (function (_super) {
    tslib_1.__extends(AnimatedIfDirective, _super);
    function AnimatedIfDirective(viewContainer, _templateRef) {
        var _this = _super.call(this, viewContainer, _templateRef) || this;
        _this.viewContainer = viewContainer;
        _this.animatedIfOnShow = new EventEmitter(false);
        _this.animatedIfOnHide = new EventEmitter(false);
        _this.visible = false;
        _this.destroyed$ = new Subject();
        return _this;
    }
    Object.defineProperty(AnimatedIfDirective.prototype, "erAnimatedIf", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (this.visible && !val) {
                this.hide();
            }
            else if (!this.visible && val) {
                this.show();
            }
            this.visible = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    AnimatedIfDirective.prototype.getContainer = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.viewContainer.length > 0) {
            return ((/** @type {?} */ (this.viewContainer.get(0)))).rootNodes[0];
        }
        else {
            return null;
        }
    };
    /**
     * Hides the element. Animation is performed through css on the container.
     * This method will set the class to hiding and preserve the element for the animation duration.
     */
    /**
     * Hides the element. Animation is performed through css on the container.
     * This method will set the class to hiding and preserve the element for the animation duration.
     * @private
     * @return {?}
     */
    AnimatedIfDirective.prototype.hide = /**
     * Hides the element. Animation is performed through css on the container.
     * This method will set the class to hiding and preserve the element for the animation duration.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var container = this.getContainer();
        if (!!container) {
            container.classList.remove('showing');
            container.classList.add('hiding');
            animationEndSafe(container, 1000)
                .pipe(takeUntil(this.destroyed$))
                .subscribe(function () {
                _this.ngIf = _this.visible;
                container.classList.remove('hiding');
            });
            this.animatedIfOnHide.emit();
        }
    };
    /**
     * Shows the element. Animation is performed through css on the container
     */
    /**
     * Shows the element. Animation is performed through css on the container
     * @private
     * @return {?}
     */
    AnimatedIfDirective.prototype.show = /**
     * Shows the element. Animation is performed through css on the container
     * @private
     * @return {?}
     */
    function () {
        this.ngIf = true;
        /** @type {?} */
        var container = this.getContainer();
        if (!!container) {
            container.classList.remove('hiding');
            container.classList.add('showing');
            animationEndSafe(container, 1000)
                .pipe(takeUntil(this.destroyed$))
                .subscribe(function () {
                container.classList.remove('showing');
            });
            this.animatedIfOnShow.emit();
        }
    };
    /**
     * @return {?}
     */
    AnimatedIfDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyed$.next();
        this.destroyed$.complete();
    };
    AnimatedIfDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erAnimatedIf]'
                },] }
    ];
    /** @nocollapse */
    AnimatedIfDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: TemplateRef }
    ]; };
    AnimatedIfDirective.propDecorators = {
        animatedIfOnShow: [{ type: Output }],
        animatedIfOnHide: [{ type: Output }],
        erAnimatedIf: [{ type: Input }]
    };
    return AnimatedIfDirective;
}(NgIf));
export { AnimatedIfDirective };
if (false) {
    /** @type {?} */
    AnimatedIfDirective.prototype.animatedIfOnShow;
    /** @type {?} */
    AnimatedIfDirective.prototype.animatedIfOnHide;
    /**
     * @type {?}
     * @private
     */
    AnimatedIfDirective.prototype.visible;
    /**
     * @type {?}
     * @protected
     */
    AnimatedIfDirective.prototype.destroyed$;
    /**
     * @type {?}
     * @private
     */
    AnimatedIfDirective.prototype.viewContainer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9hbmltYXRlLWlmL2RpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNyQyxPQUFPLEVBQUMsU0FBUyxFQUFtQixZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDaEksT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFlBQVksQ0FBQztBQUNuQyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDcEQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7QUFFekMsU0FBUyxnQkFBZ0IsQ0FBQyxFQUFXLEVBQUUsT0FBZTtJQUNwRCxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBQyxRQUFRO1FBQ2hDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNILDRDQUE0QztJQUM1QyxrREFBa0Q7SUFDbEQsa0NBQWtDO0lBQ2xDLE1BQU07QUFDUixDQUFDO0FBRUQ7SUFHeUMsK0NBQUk7SUFRM0MsNkJBQW9CLGFBQStCLEVBQUUsWUFBOEI7UUFBbkYsWUFDRSxrQkFBTSxhQUFhLEVBQUUsWUFBWSxDQUFDLFNBQ25DO1FBRm1CLG1CQUFhLEdBQWIsYUFBYSxDQUFrQjtRQU56QyxzQkFBZ0IsR0FBRyxJQUFJLFlBQVksQ0FBTSxLQUFLLENBQUMsQ0FBQztRQUNoRCxzQkFBZ0IsR0FBRyxJQUFJLFlBQVksQ0FBTSxLQUFLLENBQUMsQ0FBQztRQUVsRCxhQUFPLEdBQUcsS0FB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QUU5QiwrQ0FBMEQ7O0lBQzFELCtDQUEwRDs7Ozs7SUFFMUQsc0NBQXdCOzs7OztJQUN4Qix5Q0FBMEQ7Ozs7O0lBRTlDLDRDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TmdJZn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7RGlyZWN0aXZlLCBFbWJlZGRlZFZpZXdSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uRGVzdHJveSwgT3V0cHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMvaW5kZXgnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzL2ludGVybmFsL09ic2VydmFibGUnO1xuaW1wb3J0IHt0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZnVuY3Rpb24gYW5pbWF0aW9uRW5kU2FmZShlbDogRWxlbWVudCwgbWF4V2FpdDogbnVtYmVyKTogT2JzZXJ2YWJsZTx7fT4ge1xuICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUoKG9ic2VydmVyKSA9PiB7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgb2JzZXJ2ZXIpO1xuICAgIHNldFRpbWVvdXQob2JzZXJ2ZXIsIG1heFdhaXQpO1xuICB9KTtcbiAgLy8gcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgLy8gICBlbC5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCByZXNvbHZlKTtcbiAgLy8gICBzZXRUaW1lb3V0KHJlc29sdmUsIG1heFdhaXQpO1xuICAvLyB9KTtcbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2VyQW5pbWF0ZWRJZl0nXG59KVxuZXhwb3J0IGNsYXNzIEFuaW1hdGVkSWZEaXJlY3RpdmUgZXh0ZW5kcyBOZ0lmIGltcGxlbWVudHMgT25EZXN0cm95IHtcblxuICBAT3V0cHV0KCkgYW5pbWF0ZWRJZk9uU2hvdyA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PihmYWxzZSk7XG4gIEBPdXRwdXQoKSBhbmltYXRlZElmT25IaWRlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KGZhbHNlKTtcblxuICBwcml2YXRlIHZpc2libGUgPSBmYWxzZTtcbiAgcHJvdGVjdGVkIGRlc3Ryb3llZCQ6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZiwgX3RlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7XG4gICAgc3VwZXIodmlld0NvbnRhaW5lciwgX3RlbXBsYXRlUmVmKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBlckFuaW1hdGVkSWYodmFsOiBib29sZWFuKSB7XG4gICAgaWYgKHRoaXMudmlzaWJsZSAmJiAhdmFsKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnZpc2libGUgJiYgdmFsKSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9XG4gICAgdGhpcy52aXNpYmxlID0gdmFsO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb250YWluZXIoKTogSFRNTEVsZW1lbnQgfCBudWxsIHtcbiAgICBpZiAodGhpcy52aWV3Q29udGFpbmVyLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiAodGhpcy52aWV3Q29udGFpbmVyLmdldCgwKSBhcyBFbWJlZGRlZFZpZXdSZWY8YW55Pikucm9vdE5vZGVzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGlkZXMgdGhlIGVsZW1lbnQuIEFuaW1hdGlvbiBpcyBwZXJmb3JtZWQgdGhyb3VnaCBjc3Mgb24gdGhlIGNvbnRhaW5lci5cbiAgICogVGhpcyBtZXRob2Qgd2lsbCBzZXQgdGhlIGNsYXNzIHRvIGhpZGluZyBhbmQgcHJlc2VydmUgdGhlIGVsZW1lbnQgZm9yIHRoZSBhbmltYXRpb24gZHVyYXRpb24uXG4gICAqL1xuICBwcml2YXRlIGhpZGUoKSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5nZXRDb250YWluZXIoKTtcbiAgICBpZiAoISFjb250YWluZXIpIHtcbiAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdzaG93aW5nJyk7XG4gICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnaGlkaW5nJyk7XG4gICAgICBhbmltYXRpb25FbmRTYWZlKGNvbnRhaW5lciwgMTAwMClcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveWVkJClcbiAgICAgICAgKVxuICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5uZ0lmID0gdGhpcy52aXNpYmxlO1xuICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnaGlkaW5nJyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuYW5pbWF0ZWRJZk9uSGlkZS5lbWl0KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNob3dzIHRoZSBlbGVtZW50LiBBbmltYXRpb24gaXMgcGVyZm9ybWVkIHRocm91Z2ggY3NzIG9uIHRoZSBjb250YWluZXJcbiAgICovXG4gIHByaXZhdGUgc2hvdygpIHtcbiAgICB0aGlzLm5nSWYgPSB0cnVlO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuZ2V0Q29udGFpbmVyKCk7XG4gICAgaWYgKCEhY29udGFpbmVyKSB7XG4gICAgICBjb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnaGlkaW5nJyk7XG4gICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnc2hvd2luZycpO1xuICAgICAgYW5pbWF0aW9uRW5kU2FmZShjb250YWluZXIsIDEwMDApXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3llZCQpXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdzaG93aW5nJyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuYW5pbWF0ZWRJZk9uU2hvdy5lbWl0KCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kZXN0cm95ZWQkLm5leHQoKTtcbiAgICB0aGlzLmRlc3Ryb3llZCQuY29tcGxldGUoKTtcbiAgfVxufVxuXG4vKipcbiAqICA8cD5Ub2dnbGUgZWxlbWVudCB3aXRoIGFuaW1hdGlvbiA8aW5wdXQgdHlwZT1jaGVja2JveCBbKG5nTW9kZWwpXT1cImlzVmlzaWJsZVwiPjxwPlxuIDxwPlxuIDxzcGFuIGNsYXNzPVwiZmFuY3lCb3hcIiAqYXBwQW5pbWF0ZWRJZj1cImlzVmlzaWJsZVwiPkNsaWNrIHRoZSBjaGVja2JveCBhYm92ZSB0byB0b2dnbGUgbWUhPC9zcGFuPlxuIDwvcD5cbiAqKi9cbiJdfQ==