/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, Input } from '@angular/core';
import JSONFormatter from 'json-formatter-js';
import { BehaviorSubject, Observable } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { BaseDirective } from '../../bases/directive';
import { ObjectDiff } from './diff';
export { ObjectDiff } from './diff';
var JsonViewerDirective = /** @class */ (function (_super) {
    tslib_1.__extends(JsonViewerDirective, _super);
    function JsonViewerDirective(el, cd) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.cd = cd;
        _this.showCurrent = true;
        _this.openLevel = 2;
        _this.showDiff = false;
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    JsonViewerDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.model) {
            this.model = changes.model.currentValue;
            if (this.model) {
                Object.keys(this.model).forEach(function (key) {
                    if (_this.model[key] instanceof BehaviorSubject) {
                        _this.model[key] = _this.model[key].value;
                    }
                    else if (_this.model[key] instanceof Observable) {
                        ((/** @type {?} */ (_this.model[key])))
                            .pipe(takeUntil(_this.destroyed$))
                            .subscribe(function (v) { return _this.model[key] = v; });
                    }
                    else if (_this.showDiff) {
                        try {
                            _this.diff = ObjectDiff.diff(changes.model.previousValue, changes.model.currentValue);
                        }
                        catch (e) {
                        }
                    }
                });
            }
            this.showJson();
        }
    };
    /**
     * @return {?}
     */
    JsonViewerDirective.prototype.showJson = /**
     * @return {?}
     */
    function () {
        this.el.nativeElement.innerHTML = '';
        if (this.showCurrent) {
            /** @type {?} */
            var formatter = new JSONFormatter(this.model || {}, this.openLevel, {
                hoverPreviewEnabled: true
            });
            try {
                /** @type {?} */
                var divEle = formatter.render();
                divEle.classList.add('json-viewer');
                this.el.nativeElement.appendChild(divEle);
            }
            catch (e) {
            }
        }
        if (this.showDiff) {
            /** @type {?} */
            var divEle = document.createElement('div');
            divEle.classList.add('diff-viewer');
            divEle.innerHTML = this.diff;
            this.el.nativeElement.appendChild(divEle);
        }
    };
    JsonViewerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erJsonViewer]'
                },] }
    ];
    /** @nocollapse */
    JsonViewerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    JsonViewerDirective.propDecorators = {
        model: [{ type: Input, args: ['erJsonViewer',] }],
        showCurrent: [{ type: Input, args: ['current',] }],
        openLevel: [{ type: Input }],
        showDiff: [{ type: Input, args: ['diff',] }]
    };
    return JsonViewerDirective;
}(BaseDirective));
export { JsonViewerDirective };
if (false) {
    /** @type {?} */
    JsonViewerDirective.prototype.model;
    /** @type {?} */
    JsonViewerDirective.prototype.showCurrent;
    /** @type {?} */
    JsonViewerDirective.prototype.openLevel;
    /** @type {?} */
    JsonViewerDirective.prototype.showDiff;
    /**
     * @type {?}
     * @private
     */
    JsonViewerDirective.prototype.diff;
    /**
     * @type {?}
     * @private
     */
    JsonViewerDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    JsonViewerDirective.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9qc29uLXZpZXdlci9kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQTJCLE1BQU0sZUFBZSxDQUFDO0FBQ3hHLE9BQU8sYUFBYSxNQUFNLG1CQUFtQixDQUFDO0FBQzlDLE9BQU8sRUFBQyxlQUFlLEVBQUUsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ2pELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDcEQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUVsQyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBRWxDO0lBR3lDLCtDQUFhO0lBWXBELDZCQUFvQixFQUFjLEVBQVUsRUFBcUI7UUFBakUsWUFDRSxpQkFBTyxTQUNSO1FBRm1CLFFBQUUsR0FBRixFQUFFLENBQVk7UUFBVSxRQUFFLEdBQUYsRUFBRSxDQUFtQjtRQVIvQyxpQkFBVyxHQUFHLElBQUksQ0FBQztRQUU1QixlQUFTLEdBQUcsQ0FBQyxDQUFDO1FBRVIsY0FBUSxHQUFHLEtBQUssQ0FBQzs7SUFNaEMsQ0FBQzs7Ozs7SUFFRCx5Q0FBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFBbEMsaUJBdUJDO1FBdEJDLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtZQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDO1lBQ3hDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHO29CQUNqQyxJQUFJLEtBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksZUFBZSxFQUFFO3dCQUM5QyxLQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO3FCQUN6Qzt5QkFBTSxJQUFJLEtBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksVUFBVSxFQUFFO3dCQUNoRCxDQUFDLG1CQUFBLEtBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQW1CLENBQUM7NkJBQ2pDLElBQUksQ0FDSCxTQUFTLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxDQUMzQjs2QkFDQSxTQUFTLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxLQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBbkIsQ0FBbUIsQ0FBQyxDQUFDO3FCQUN4Qzt5QkFBTSxJQUFJLEtBQUksQ0FBQyxRQUFRLEVBQUU7d0JBQ3hCLElBQUk7NEJBQ0YsS0FBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7eUJBQ3RGO3dCQUFDLE9BQU8sQ0FBQyxFQUFFO3lCQUNYO3FCQUNGO2dCQUNILENBQUMsQ0FBQyxDQUFDO2FBQ0o7WUFDRCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDakI7SUFDSCxDQUFDOzs7O0lBRUQsc0NBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNyQyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7O2dCQUNkLFNBQVMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNwRSxtQkFBbUIsRUFBRSxJQUFJO2FBQzFCLENBQUM7WUFDRixJQUFJOztvQkFDSSxNQUFNLEdBQW1CLFNBQVMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ2pELE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUNwQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDM0M7WUFBQyxPQUFPLENBQUMsRUFBRTthQUNYO1NBQ0Y7UUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7O2dCQUNYLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztZQUM1QyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNwQyxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDN0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzNDO0lBQ0gsQ0FBQzs7Z0JBL0RGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2lCQUMzQjs7OztnQkFYcUMsVUFBVTtnQkFBeEMsaUJBQWlCOzs7d0JBY3RCLEtBQUssU0FBQyxjQUFjOzhCQUVwQixLQUFLLFNBQUMsU0FBUzs0QkFFZixLQUFLOzJCQUVMLEtBQUssU0FBQyxNQUFNOztJQXFEZiwwQkFBQztDQUFBLEFBaEVELENBR3lDLGFBQWEsR0E2RHJEO1NBN0RZLG1CQUFtQjs7O0lBRTlCLG9DQUFpQzs7SUFFakMsMENBQXFDOztJQUVyQyx3Q0FBdUI7O0lBRXZCLHVDQUFnQzs7Ozs7SUFFaEMsbUNBQXFCOzs7OztJQUVULGlDQUFzQjs7Ozs7SUFBRSxpQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IEpTT05Gb3JtYXR0ZXIgZnJvbSAnanNvbi1mb3JtYXR0ZXItanMnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHt0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7QmFzZURpcmVjdGl2ZX0gZnJvbSAnLi4vLi4vYmFzZXMvZGlyZWN0aXZlJztcbmltcG9ydCB7T2JqZWN0RGlmZn0gZnJvbSAnLi9kaWZmJztcblxuZXhwb3J0IHtPYmplY3REaWZmfSBmcm9tICcuL2RpZmYnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZXJKc29uVmlld2VyXSdcbn0pXG5leHBvcnQgY2xhc3MgSnNvblZpZXdlckRpcmVjdGl2ZSBleHRlbmRzIEJhc2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gIEBJbnB1dCgnZXJKc29uVmlld2VyJykgbW9kZWw6IHt9O1xuXG4gIEBJbnB1dCgnY3VycmVudCcpIHNob3dDdXJyZW50ID0gdHJ1ZTtcblxuICBASW5wdXQoKSBvcGVuTGV2ZWwgPSAyO1xuXG4gIEBJbnB1dCgnZGlmZicpIHNob3dEaWZmID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBkaWZmOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLm1vZGVsKSB7XG4gICAgICB0aGlzLm1vZGVsID0gY2hhbmdlcy5tb2RlbC5jdXJyZW50VmFsdWU7XG4gICAgICBpZiAodGhpcy5tb2RlbCkge1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLm1vZGVsKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMubW9kZWxba2V5XSBpbnN0YW5jZW9mIEJlaGF2aW9yU3ViamVjdCkge1xuICAgICAgICAgICAgdGhpcy5tb2RlbFtrZXldID0gdGhpcy5tb2RlbFtrZXldLnZhbHVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tb2RlbFtrZXldIGluc3RhbmNlb2YgT2JzZXJ2YWJsZSkge1xuICAgICAgICAgICAgKHRoaXMubW9kZWxba2V5XSBhcyBPYnNlcnZhYmxlPGFueT4pXG4gICAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3llZCQpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgLnN1YnNjcmliZSh2ID0+IHRoaXMubW9kZWxba2V5XSA9IHYpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5zaG93RGlmZikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdGhpcy5kaWZmID0gT2JqZWN0RGlmZi5kaWZmKGNoYW5nZXMubW9kZWwucHJldmlvdXNWYWx1ZSwgY2hhbmdlcy5tb2RlbC5jdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLnNob3dKc29uKCk7XG4gICAgfVxuICB9XG5cbiAgc2hvd0pzb24oKSB7XG4gICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgIGlmICh0aGlzLnNob3dDdXJyZW50KSB7XG4gICAgICBjb25zdCBmb3JtYXR0ZXIgPSBuZXcgSlNPTkZvcm1hdHRlcih0aGlzLm1vZGVsIHx8IHt9LCB0aGlzLm9wZW5MZXZlbCwge1xuICAgICAgICBob3ZlclByZXZpZXdFbmFibGVkOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRpdkVsZTogSFRNTERpdkVsZW1lbnQgPSBmb3JtYXR0ZXIucmVuZGVyKCk7XG4gICAgICAgIGRpdkVsZS5jbGFzc0xpc3QuYWRkKCdqc29uLXZpZXdlcicpO1xuICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZGl2RWxlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuc2hvd0RpZmYpIHtcbiAgICAgIGNvbnN0IGRpdkVsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZGl2RWxlLmNsYXNzTGlzdC5hZGQoJ2RpZmYtdmlld2VyJyk7XG4gICAgICBkaXZFbGUuaW5uZXJIVE1MID0gdGhpcy5kaWZmO1xuICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmFwcGVuZENoaWxkKGRpdkVsZSk7XG4gICAgfVxuICB9XG59XG4iXX0=