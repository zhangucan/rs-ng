/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ObjectDiff = /** @class */ (function () {
    function ObjectDiff() {
        this.openChar = '{';
        this.closeChar = '}';
    }
    /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    ObjectDiff.diff = /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    function (obj1, obj2) {
        if (!ObjectDiff.instance) {
            ObjectDiff.instance = new ObjectDiff();
        }
        /** @type {?} */
        var diff = ObjectDiff.instance.diffOwnProperties(obj1, obj2);
        return '<pre>' + ObjectDiff.instance.formatChangesToHtml(diff) + '</pre>';
    };
    /**
     * @param {?} a
     * @param {?} b
     * @param {?} shallow
     * @param {?} isOwn
     * @return {?}
     */
    ObjectDiff.prototype.diff = /**
     * @param {?} a
     * @param {?} b
     * @param {?} shallow
     * @param {?} isOwn
     * @return {?}
     */
    function (a, b, shallow, isOwn) {
        if (a === b) {
            return this.equalObj(a);
        }
        /** @type {?} */
        var diffValue = {};
        /** @type {?} */
        var equal = true;
        if (!a) {
            a = {};
        }
        for (var key in a) {
            if ((!isOwn && key in b) || (isOwn && b && b.hasOwnProperty(key))) {
                if (a[key] === b[key]) {
                    diffValue[key] = this.equalObj(a[key]);
                }
                else {
                    if (!shallow && this.isValidAttr(a[key], b[key])) {
                        /** @type {?} */
                        var valueDiff = this.diff(a[key], b[key], shallow, isOwn);
                        if (valueDiff.changed === 'equal') {
                            diffValue[key] = this.equalObj(a[key]);
                        }
                        else {
                            equal = false;
                            diffValue[key] = valueDiff;
                        }
                    }
                    else {
                        equal = false;
                        diffValue[key] = {
                            changed: 'primitive change',
                            removed: a[key],
                            added: b[key]
                        };
                    }
                }
            }
            else {
                equal = false;
                diffValue[key] = {
                    changed: 'removed',
                    value: a[key]
                };
            }
        }
        for (var key in b) {
            if ((!isOwn && !(key in a)) || (isOwn && typeof a !== 'undefined' && !a.hasOwnProperty(key))) {
                equal = false;
                diffValue[key] = {
                    changed: 'added',
                    value: b[key]
                };
            }
        }
        if (equal) {
            return this.equalObj(a);
        }
        else {
            return {
                changed: 'object change',
                value: diffValue
            };
        }
    };
    /**
     * @param {?} a
     * @param {?} b
     * @param {?=} shallow
     * @return {?}
     */
    ObjectDiff.prototype.diffOwnProperties = /**
     * @param {?} a
     * @param {?} b
     * @param {?=} shallow
     * @return {?}
     */
    function (a, b, shallow) {
        return this.diff(a, b, shallow, true);
    };
    /**
     * @param {?} changes
     * @param {?=} shallow
     * @return {?}
     */
    ObjectDiff.prototype.formatToJsonXMLString = /**
     * @param {?} changes
     * @param {?=} shallow
     * @return {?}
     */
    function (changes, shallow) {
        /** @type {?} */
        var properties = [];
        /** @type {?} */
        var diff = changes.value;
        if (changes.changed === 'equal') {
            return this.inspect(diff, shallow);
        }
        for (var key in diff) {
            properties.push(this.formatChange(key, diff[key], shallow));
        }
        return '<span>' + this.openChar + '</span>\n<div class="diff-level">' + properties.join('<span>,</span>\n') + '\n</div><span>' + this.closeChar + '</span>';
    };
    /**
     * @param {?} obj
     * @param {?} shallow
     * @return {?}
     */
    ObjectDiff.prototype.formatToJson = /**
     * @param {?} obj
     * @param {?} shallow
     * @return {?}
     */
    function (obj, shallow) {
        return this.inspect(obj, shallow);
    };
    /**
     * @param {?} changes
     * @param {?=} shallow
     * @return {?}
     */
    ObjectDiff.prototype.formatChangesToHtml = /**
     * @param {?} changes
     * @param {?=} shallow
     * @return {?}
     */
    function (changes, shallow) {
        /** @type {?} */
        var properties = [];
        if (changes.changed === 'equal') {
            return '';
        }
        /** @type {?} */
        var diff = changes.value;
        for (var key in diff) {
            /** @type {?} */
            var changed = diff[key].changed;
            if (changed !== 'equal')
                properties.push(this.formatChange(key, diff[key], shallow, true));
        }
        return '<span>' + this.openChar + '</span>\n<div class="diff-level">' + properties.join('<span>,</span>\n') + '\n</div><span>' + this.closeChar + '</span>';
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ObjectDiff.prototype.equalObj = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return {
            changed: 'equal',
            value: obj
        };
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    ObjectDiff.prototype.isValidAttr = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        /** @type {?} */
        var typeA = typeof a;
        /** @type {?} */
        var typeB = typeof b;
        return (a && b && (typeA === 'object' || typeA === 'function') && (typeB === 'object' || typeB === 'function'));
    };
    /**
     * @param {?} key
     * @param {?} diffItem
     * @param {?} shallow
     * @param {?=} diffOnly
     * @return {?}
     */
    ObjectDiff.prototype.formatChange = /**
     * @param {?} key
     * @param {?} diffItem
     * @param {?} shallow
     * @param {?=} diffOnly
     * @return {?}
     */
    function (key, diffItem, shallow, diffOnly) {
        /** @type {?} */
        var changed = diffItem.changed;
        /** @type {?} */
        var property;
        switch (changed) {
            case 'equal':
                property = (this.stringifyObjectKey(this.escapeHTML(key)) + '<span>: </span>' + this.inspect(diffItem.value));
                break;
            case 'removed':
                property = ('<del class="diff">' + this.stringifyObjectKey(this.escapeHTML(key)) + '<span>: </span>' + this.inspect(diffItem.value) + '</del>');
                break;
            case 'added':
                property = ('<ins class="diff">' + this.stringifyObjectKey(this.escapeHTML(key)) + '<span>: </span>' + this.inspect(diffItem.value) + '</ins>');
                break;
            case 'primitive change':
                /** @type {?} */
                var prefix = this.stringifyObjectKey(this.escapeHTML(key)) + '<span>: </span>';
                property = ('<del class="diff diff-key">' + prefix + this.inspect(diffItem.removed) + '</del><span>,</span>\n' +
                    '<ins class="diff diff-key">' + prefix + this.inspect(diffItem.added) + '</ins>');
                break;
            case 'object change':
                property = shallow ? '' : (this.stringifyObjectKey(key) + '<span>: </span>' + (diffOnly ? this.formatChangesToHtml(diffItem) : this.formatToJsonXMLString(diffItem)));
                break;
        }
        return property;
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ObjectDiff.prototype.stringifyObjectKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return /^[a-z0-9_$]*$/i.test(key) ?
            key :
            JSON.stringify(key);
    };
    /**
     * @param {?} string
     * @return {?}
     */
    ObjectDiff.prototype.escapeHTML = /**
     * @param {?} string
     * @return {?}
     */
    function (string) {
        return string.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    };
    /**
     * @param {?} obj
     * @param {?=} shallow
     * @return {?}
     */
    ObjectDiff.prototype.inspect = /**
     * @param {?} obj
     * @param {?=} shallow
     * @return {?}
     */
    function (obj, shallow) {
        /** @type {?} */
        var that = this;
        return _inspect('', obj, shallow);
        /**
         * @param {?} accumulator
         * @param {?} obj
         * @param {?=} shallow
         * @return {?}
         */
        function _inspect(accumulator, obj, shallow) {
            switch (typeof obj) {
                case 'object':
                    if (!obj) {
                        accumulator += 'null';
                        break;
                    }
                    if (shallow) {
                        accumulator += '[object]';
                        break;
                    }
                    /** @type {?} */
                    var keys = Object.keys(obj);
                    /** @type {?} */
                    var length_1 = keys.length;
                    if (length_1 === 0) {
                        accumulator += '<span>' + that.openChar + that.closeChar + '</span>';
                    }
                    else {
                        accumulator += '<span>' + that.openChar + '</span>\n<div class="diff-level">';
                        for (var i = 0; i < length_1; i++) {
                            /** @type {?} */
                            var key = keys[i];
                            accumulator = _inspect(accumulator + that.stringifyObjectKey(that.escapeHTML(key)) + '<span>: </span>', obj[key]);
                            if (i < length_1 - 1) {
                                accumulator += '<span>,</span>\n';
                            }
                        }
                        accumulator += '\n</div><span>' + that.closeChar + '</span>';
                    }
                    break;
                case 'string':
                    accumulator += JSON.stringify(that.escapeHTML(obj));
                    break;
                case 'undefined':
                    accumulator += 'undefined';
                    break;
                default:
                    accumulator += that.escapeHTML(String(obj));
                    break;
            }
            return accumulator;
        }
    };
    ObjectDiff.instance = undefined;
    return ObjectDiff;
}());
export { ObjectDiff };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ObjectDiff.instance;
    /**
     * @type {?}
     * @private
     */
    ObjectDiff.prototype.openChar;
    /**
     * @type {?}
     * @private
     */
    ObjectDiff.prototype.closeChar;
}
//# sourceMappingURL=data:application/json;base64,