/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, ContentChildren, Directive, ElementRef, HostBinding, HostListener, Input, QueryList } from '@angular/core';
import { MovableHandleDirective } from './movable-handle.directive';
/**
 * @record
 */
export function Coordinates() { }
if (false) {
    /** @type {?} */
    Coordinates.prototype.top;
    /** @type {?} */
    Coordinates.prototype.left;
}
/**
 * @record
 */
export function Rects() { }
if (false) {
    /** @type {?} */
    Rects.prototype.top;
    /** @type {?} */
    Rects.prototype.left;
    /** @type {?} */
    Rects.prototype.height;
    /** @type {?} */
    Rects.prototype.width;
}
/**
 * @record
 */
export function ITouchEvent() { }
if (false) {
    /** @type {?} */
    ITouchEvent.prototype.changedTouches;
}
var Position = /** @class */ (function () {
    function Position(pos) {
        this.height = null;
        this.width = null;
        if (this.containsNumberProp(pos, ['top', 'left'])) {
            this.top = ((/** @type {?} */ (pos))).top;
            this.left = ((/** @type {?} */ (pos))).left;
            if (this.containsNumberProp(pos, ['height', 'width'])) {
                this.height = ((/** @type {?} */ (pos))).height;
                this.width = ((/** @type {?} */ (pos))).width;
            }
        }
        else if (this.containsNumberProp(pos, ['clientY', 'clientX'])) {
            this.top = ((/** @type {?} */ (pos))).clientY;
            this.left = ((/** @type {?} */ (pos))).clientX;
        }
        else if (((/** @type {?} */ (pos))).changedTouches
            && ((/** @type {?} */ (pos))).changedTouches.length > 0
            && ((/** @type {?} */ (pos))).changedTouches[0]
            && this.containsNumberProp(((/** @type {?} */ (pos))).changedTouches[0], ['clientY', 'clientX'])) {
            this.top = ((/** @type {?} */ (pos))).changedTouches[0].clientY;
            this.left = ((/** @type {?} */ (pos))).changedTouches[0].clientX;
        }
    }
    Object.defineProperty(Position.prototype, "bottom", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.height === null) ? null : this.top + this.height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Position.prototype, "right", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.width === null) ? null : this.left + this.width;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} position
     * @return {?}
     */
    Position.prototype.minus = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        return new Position({
            top: (this.top - position.top),
            left: (this.left - position.left),
            height: this.height,
            width: this.width
        });
    };
    /**
     * @param {?} position
     * @return {?}
     */
    Position.prototype.plus = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        return new Position({
            top: (this.top + position.top),
            left: (this.left + position.left),
            height: this.height,
            width: this.width
        });
    };
    /**
     * @protected
     * @param {?} object
     * @param {?} props
     * @return {?}
     */
    Position.prototype.containsNumberProp = /**
     * @protected
     * @param {?} object
     * @param {?} props
     * @return {?}
     */
    function (object, props) {
        return props.every(function (prop) { return prop in object && typeof object[prop] === 'number'; });
    };
    return Position;
}());
export { Position };
if (false) {
    /** @type {?} */
    Position.prototype.top;
    /** @type {?} */
    Position.prototype.left;
    /** @type {?} */
    Position.prototype.height;
    /** @type {?} */
    Position.prototype.width;
}
var MovableDirective = /** @class */ (function () {
    function MovableDirective(element, cd) {
        this.element = element;
        this.cd = cd;
        this.movableConstrained = true;
        /**
         * true if moving is in progress.
         */
        this.isMoving = false;
        this.isHandle = false;
        /**
         * set class on host to indicate movable support.
         */
        this.isMovable = true;
        this.handles = [];
        /**
         * set class depending on the status.
         */
        this._movableEnabled = true;
    }
    Object.defineProperty(MovableDirective.prototype, "movableEnabled", {
        get: /**
         * @protected
         * @return {?}
         */
        function () {
            return this._movableEnabled;
        },
        /** optional input to toggle movable status. */
        set: /**
         * optional input to toggle movable status.
         * @protected
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._movableEnabled = value;
            // propagate enabled status to handles
            if (this.handles.length > 0) {
                this.handles.forEach(function (handle) { return handle.movableEnabled = value; });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MovableDirective.prototype, "movable", {
        set: /**
         * @protected
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.movableName = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MovableDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var position = this.getStyle(this.element.nativeElement, 'position');
        if (position === 'static') {
            this.positionStyle = 'relative';
            this.cd.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    MovableDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.allHandles.changes.subscribe(function (handles) { return _this.updateQuery(handles); });
        // TODO: workaround for https://github.com/angular/angular/issues/12818 and https://github.com/angular/angular/issues/9689
        // manually trigger first update.
        this.updateQuery(this.allHandles);
    };
    /**
     * @protected
     * @param {?} handles
     * @return {?}
     */
    MovableDirective.prototype.updateQuery = /**
     * @protected
     * @param {?} handles
     * @return {?}
     */
    function (handles) {
        var _this = this;
        this.handles = handles.filter(function (handle) { return handle.movableHandle === _this.movableName; });
        // fallback to this as handle if not specified
        if (this.handles.length === 0) {
            this.isHandle = true;
        }
        // propagate enabled status to handles
        if (this.handles.length > 0) {
            this.handles.forEach(function (handle) { return handle.movableEnabled = _this.movableEnabled; });
        }
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.onMouseDown = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.startMoving(event);
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.onMouseUp = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.stopMoving();
    };
    // using document to move even pointer leaves the host (fast moving)
    // using document to move even pointer leaves the host (fast moving)
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.onMouseMove = 
    // using document to move even pointer leaves the host (fast moving)
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.moveElement(event);
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.onTouchStart = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.startMoving(event);
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.onTouchEnd = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.stopMoving();
    };
    // using document to move even pointer leaves the host (fast moving)
    // using document to move even pointer leaves the host (fast moving)
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.onTouchMove = 
    // using document to move even pointer leaves the host (fast moving)
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.moveElement(event);
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.startMoving = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isEventInHandle(event) && this.movableEnabled) {
            this.startPosition = new Position(event).minus(this.getRelativeRect(this.element.nativeElement));
            this.isMoving = true;
            if (this.handles.length > 0) {
                this.handles.forEach(function (handle) { return handle.isMoving = true; });
            }
            this.cd.detectChanges();
        }
    };
    /**
     * @protected
     * @return {?}
     */
    MovableDirective.prototype.stopMoving = /**
     * @protected
     * @return {?}
     */
    function () {
        this.isMoving = false;
        if (this.handles.length > 0) {
            this.handles.forEach(function (handle) { return handle.isMoving = false; });
        }
        this.cd.detectChanges();
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.moveElement = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isMoving) {
            /** @type {?} */
            var moved = false;
            /** @type {?} */
            var newPosition = new Position(event).minus(this.startPosition);
            if (!this.movableConstrained) {
                this.positionTop = newPosition.top;
                this.positionLeft = newPosition.left;
                moved = true;
            }
            else {
                /** @type {?} */
                var constainedByElement = this.element.nativeElement.ownerDocument.getElementById(this.movableConstraint);
                /** @type {?} */
                var constainedByAbsPos = void 0;
                if (constainedByElement) {
                    constainedByAbsPos = new Position(constainedByElement.getBoundingClientRect());
                }
                else {
                    constainedByAbsPos = this.getViewPos(this.element.nativeElement);
                }
                /** @type {?} */
                var elementAbsPos = new Position(this.element.nativeElement.getBoundingClientRect());
                /** @type {?} */
                var diffAbsToRel = elementAbsPos.minus(this.getRelativeRect(this.element.nativeElement));
                /** @type {?} */
                var newAbsPos = diffAbsToRel.plus(newPosition);
                if (newAbsPos.top >= constainedByAbsPos.top && newAbsPos.bottom <= constainedByAbsPos.bottom) {
                    this.positionTop = newPosition.top;
                    moved = true;
                }
                else {
                    if (newAbsPos.top < constainedByAbsPos.top) {
                        // max to top limit, to prevent sticking of the movable on fast move
                        this.positionTop = constainedByAbsPos.minus(diffAbsToRel).top;
                        moved = true;
                    }
                    if (newAbsPos.bottom > constainedByAbsPos.bottom) {
                        // max to bottom limit, to prevent sticking of the movable on fast move
                        this.positionTop = constainedByAbsPos.minus(diffAbsToRel).bottom - elementAbsPos.height;
                        moved = true;
                    }
                }
                if (newAbsPos.left >= constainedByAbsPos.left && newAbsPos.right <= constainedByAbsPos.right) {
                    this.positionLeft = newPosition.left;
                    moved = true;
                }
                else {
                    if (newAbsPos.left < constainedByAbsPos.left) {
                        // max to left limit, to prevent sticking of the movable on fast move
                        this.positionLeft = constainedByAbsPos.minus(diffAbsToRel).left;
                        moved = true;
                    }
                    if (newAbsPos.right > constainedByAbsPos.right) {
                        // max to right limit, to prevent sticking of the movable on fast move
                        this.positionLeft = constainedByAbsPos.minus(diffAbsToRel).right - elementAbsPos.width;
                        moved = true;
                    }
                }
            }
            if (moved) {
                // prevent selection and other side effects during moving, only when position moved, i.e. to allow buttons to be clicked
                event.preventDefault();
                event.stopPropagation();
                this.cd.detectChanges();
            }
        }
    };
    /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    MovableDirective.prototype.isEventInHandle = /**
     * @protected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var srcElement = event.target || event.srcElement;
        if (this.isHandle) {
            // check parent elements too.
            while (srcElement instanceof HTMLElement && srcElement !== this.element.nativeElement && srcElement.parentElement) {
                srcElement = srcElement.parentElement;
            }
            return this.element.nativeElement === srcElement;
        }
        else {
            return this.handles.some(function (handle) {
                // check parent elements too.
                while (srcElement instanceof HTMLElement && srcElement !== handle.element.nativeElement && srcElement.parentElement) {
                    srcElement = srcElement.parentElement;
                }
                return handle.element.nativeElement === srcElement;
            });
        }
    };
    /**
     * @protected
     * @param {?} element
     * @return {?}
     */
    MovableDirective.prototype.getRelativeRect = /**
     * @protected
     * @param {?} element
     * @return {?}
     */
    function (element) {
        return new Position({
            top: this.parseStyleInt(this.getStyle(element, 'top')) || 0,
            left: this.parseStyleInt(this.getStyle(element, 'left')) || 0,
            height: this.parseStyleInt(this.getStyle(element, 'height')) || 0,
            width: this.parseStyleInt(this.getStyle(element, 'width')) || 0
        });
    };
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    MovableDirective.prototype.parseStyleInt = /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return parseInt(value, 10);
    };
    /**
     * @protected
     * @param {?} element
     * @param {?} property
     * @return {?}
     */
    MovableDirective.prototype.getStyle = /**
     * @protected
     * @param {?} element
     * @param {?} property
     * @return {?}
     */
    function (element, property) {
        /** @type {?} */
        var view = this.getView(element);
        return view.getComputedStyle(element, null).getPropertyValue(property);
    };
    /**
     * @protected
     * @param {?} element
     * @return {?}
     */
    MovableDirective.prototype.getView = /**
     * @protected
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var view = element.ownerDocument.defaultView;
        if (!view || view.opener) {
            view = window;
        }
        return view;
    };
    /**
     * @protected
     * @param {?} element
     * @return {?}
     */
    MovableDirective.prototype.getViewPos = /**
     * @protected
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var view = this.getView(element);
        return new Position({
            top: 0,
            left: 0,
            height: view.innerHeight || element.ownerDocument.documentElement.clientHeight,
            width: view.innerWidth || element.ownerDocument.documentElement.clientWidth
        });
    };
    MovableDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[movable]'
                },] }
    ];
    /** @nocollapse */
    MovableDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    MovableDirective.propDecorators = {
        movableConstrained: [{ type: Input }],
        movableConstraint: [{ type: Input }],
        isMoving: [{ type: HostBinding, args: ['class.movable-moving',] }],
        isHandle: [{ type: HostBinding, args: ['class.movable-handle',] }],
        positionStyle: [{ type: HostBinding, args: ['style.position',] }],
        positionTop: [{ type: HostBinding, args: ['style.top.px',] }],
        positionLeft: [{ type: HostBinding, args: ['style.left.px',] }],
        isMovable: [{ type: HostBinding, args: ['class.movable',] }],
        allHandles: [{ type: ContentChildren, args: [MovableHandleDirective, { descendants: true },] }],
        _movableEnabled: [{ type: HostBinding, args: ['class.movable-enabled',] }],
        movableEnabled: [{ type: Input }],
        movable: [{ type: Input }],
        onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
        onMouseUp: [{ type: HostListener, args: ['document:mouseup', ['$event'],] }],
        onMouseMove: [{ type: HostListener, args: ['document:mousemove', ['$event'],] }],
        onTouchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
        onTouchEnd: [{ type: HostListener, args: ['document:touchend', ['$event'],] }],
        onTouchMove: [{ type: HostListener, args: ['document:touchmove', ['$event'],] }]
    };
    return MovableDirective;
}());
export { MovableDirective };
if (false) {
    /** @type {?} */
    MovableDirective.prototype.movableConstrained;
    /** @type {?} */
    MovableDirective.prototype.movableConstraint;
    /**
     * saved start position when moving starts.
     * @type {?}
     * @protected
     */
    MovableDirective.prototype.startPosition;
    /**
     * true if moving is in progress.
     * @type {?}
     * @protected
     */
    MovableDirective.prototype.isMoving;
    /**
     * @type {?}
     * @protected
     */
    MovableDirective.prototype.isHandle;
    /**
     * set position style on host to relative.
     * @type {?}
     * @protected
     */
    MovableDirective.prototype.positionStyle;
    /**
     * current Y position of the native element.
     * @type {?}
     * @protected
     */
    MovableDirective.prototype.positionTop;
    /**
     * current X position of the native element.
     * @type {?}
     * @protected
     */
    MovableDirective.prototype.positionLeft;
    /**
     * set class on host to indicate movable support.
     * @type {?}
     * @protected
     */
    MovableDirective.prototype.isMovable;
    /**
     * @type {?}
     * @protected
     */
    MovableDirective.prototype.movableName;
    /**
     * @type {?}
     * @protected
     */
    MovableDirective.prototype.allHandles;
    /**
     * @type {?}
     * @protected
     */
    MovableDirective.prototype.handles;
    /**
     * set class depending on the status.
     * @type {?}
     * @protected
     */
    MovableDirective.prototype._movableEnabled;
    /** @type {?} */
    MovableDirective.prototype.element;
    /**
     * @type {?}
     * @protected
     */
    MovableDirective.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,