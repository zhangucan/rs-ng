/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Renderer2, ViewContainerRef } from '@angular/core';
import { CommonsUtils } from '@er/utils';
import { BaseDirective } from '../../bases/directive';
import { DynaComponentUtils } from '../../utils/dyna';
var DynaTemplateDirective = /** @class */ (function (_super) {
    tslib_1.__extends(DynaTemplateDirective, _super);
    function DynaTemplateDirective(viewContainerRef, el, renderer) {
        var _this = _super.call(this) || this;
        _this.viewContainerRef = viewContainerRef;
        _this.el = el;
        _this.renderer = renderer;
        return _this;
    }
    /**
     * @return {?}
     */
    DynaTemplateDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (CommonsUtils.isEmptyString(this.template)) {
            this.template = this.el.nativeElement.innerHTML;
        }
        if (CommonsUtils.isEmptyString(this.template)) {
            return;
        }
        this.template = this.template.replace(/\[\[/g, '{{');
        this.template = this.template.replace(/]]/g, '}}');
        this.componentRef = DynaComponentUtils.createComponentByTemplate(this.viewContainerRef, this.template);
        /** @type {?} */
        var parent = this.el.nativeElement.parentNode;
        this.renderer.removeChild(parent, this.el.nativeElement);
    };
    /**
     * @return {?}
     */
    DynaTemplateDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnDestroy.call(this);
        if (this.componentRef) {
            this.componentRef.destroy();
            this.componentRef = null;
        }
    };
    DynaTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erDynaTemplate]',
                },] }
    ];
    /** @nocollapse */
    DynaTemplateDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    DynaTemplateDirective.propDecorators = {
        template: [{ type: Input, args: ['erDynaTemplate',] }],
        context: [{ type: Input }]
    };
    return DynaTemplateDirective;
}(BaseDirective));
export { DynaTemplateDirective };
if (false) {
    /** @type {?} */
    DynaTemplateDirective.prototype.template;
    /** @type {?} */
    DynaTemplateDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    DynaTemplateDirective.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    DynaTemplateDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    DynaTemplateDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DynaTemplateDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9keW5hLXRlbXBsYXRlL2RpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBZSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBVSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFOUcsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUN2QyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDcEQsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFFcEQ7SUFHMkMsaURBQWE7SUFPdEQsK0JBQW9CLGdCQUFrQyxFQUNsQyxFQUFjLEVBQ2QsUUFBbUI7UUFGdkMsWUFHRSxpQkFBTyxTQUNSO1FBSm1CLHNCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsUUFBRSxHQUFGLEVBQUUsQ0FBWTtRQUNkLGNBQVEsR0FBUixRQUFRLENBQVc7O0lBRXZDLENBQUM7Ozs7SUFFRCx3Q0FBUTs7O0lBQVI7UUFDRSxJQUFJLFlBQVksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7U0FBRTtRQUNuRyxJQUFJLFlBQVksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQzFELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxZQUFZLEdBQUcsa0JBQWtCLENBQUMseUJBQXlCLENBQzlELElBQUksQ0FBQyxnQkFBZ0IsRUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FDZCxDQUFDOztZQUNJLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVO1FBQy9DLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzNELENBQUM7Ozs7SUFFRCwyQ0FBVzs7O0lBQVg7UUFDRSxpQkFBTSxXQUFXLFdBQUUsQ0FBQztRQUNwQixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM1QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztTQUMxQjtJQUNILENBQUM7O2dCQW5DRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtpQkFDN0I7Ozs7Z0JBUnNFLGdCQUFnQjtnQkFBdEQsVUFBVTtnQkFBaUIsU0FBUzs7OzJCQVdsRSxLQUFLLFNBQUMsZ0JBQWdCOzBCQUN0QixLQUFLOztJQThCUiw0QkFBQztDQUFBLEFBcENELENBRzJDLGFBQWEsR0FpQ3ZEO1NBakNZLHFCQUFxQjs7O0lBRWhDLHlDQUEwQzs7SUFDMUMsd0NBQTBCOzs7OztJQUUxQiw2Q0FBdUM7Ozs7O0lBRTNCLGlEQUEwQzs7Ozs7SUFDMUMsbUNBQXNCOzs7OztJQUN0Qix5Q0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudFJlZiwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT25Jbml0LCBSZW5kZXJlcjIsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDb250ZXh0fSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb21tb25zVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge0Jhc2VEaXJlY3RpdmV9IGZyb20gJy4uLy4uL2Jhc2VzL2RpcmVjdGl2ZSc7XG5pbXBvcnQge0R5bmFDb21wb25lbnRVdGlsc30gZnJvbSAnLi4vLi4vdXRpbHMvZHluYSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tlckR5bmFUZW1wbGF0ZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hVGVtcGxhdGVEaXJlY3RpdmUgZXh0ZW5kcyBCYXNlRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoJ2VyRHluYVRlbXBsYXRlJykgdGVtcGxhdGU6IHN0cmluZztcbiAgQElucHV0KCkgY29udGV4dDogQ29udGV4dDtcblxuICBwcml2YXRlIGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPHt9PjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoQ29tbW9uc1V0aWxzLmlzRW1wdHlTdHJpbmcodGhpcy50ZW1wbGF0ZSkpIHsgdGhpcy50ZW1wbGF0ZSA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5pbm5lckhUTUw7IH1cbiAgICBpZiAoQ29tbW9uc1V0aWxzLmlzRW1wdHlTdHJpbmcodGhpcy50ZW1wbGF0ZSkpIHsgcmV0dXJuOyB9XG4gICAgdGhpcy50ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGUucmVwbGFjZSgvXFxbXFxbL2csICd7eycpO1xuICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlLnJlcGxhY2UoL11dL2csICd9fScpO1xuICAgIHRoaXMuY29tcG9uZW50UmVmID0gRHluYUNvbXBvbmVudFV0aWxzLmNyZWF0ZUNvbXBvbmVudEJ5VGVtcGxhdGUoXG4gICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYsXG4gICAgICB0aGlzLnRlbXBsYXRlLFxuICAgICk7XG4gICAgY29uc3QgcGFyZW50ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudE5vZGU7XG4gICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDaGlsZChwYXJlbnQsIHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBzdXBlci5uZ09uRGVzdHJveSgpO1xuICAgIGlmICh0aGlzLmNvbXBvbmVudFJlZikge1xuICAgICAgdGhpcy5jb21wb25lbnRSZWYuZGVzdHJveSgpO1xuICAgICAgdGhpcy5jb21wb25lbnRSZWYgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuIl19