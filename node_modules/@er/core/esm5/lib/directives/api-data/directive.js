/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { CommonsUtils } from '@er/utils';
import { BaseDirective } from '../../bases/directive';
import { ApiUtils } from '../../utils/api';
import { LogUtils } from '../../utils/log';
var ApiDataDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ApiDataDirective, _super);
    function ApiDataDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onDataReady = new EventEmitter();
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ApiDataDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.apiDataProps
            && changes.apiDataProps.currentValue
            && (this.apiDataProps.autoFetch !== false || !changes.apiDataProps.isFirstChange())) {
            this.fetchData();
        }
    };
    /**
     * @return {?}
     */
    ApiDataDirective.prototype.fetchData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (CommonsUtils.isEmpty(this.apiDataProps)) {
            LogUtils.debug('apiDataDirective', '没有定义apiDataProps');
            return;
        }
        ApiUtils.fetch(this.apiDataProps)
            .subscribe(function (data) {
            LogUtils.debug(_this, 'apiData待订阅数据', data);
            if (_this.apiDataProps.data$) {
                _this.apiDataProps.data$.next(data);
            }
            _this.onDataReady.emit(data);
        });
    };
    ApiDataDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erApiData]'
                },] }
    ];
    ApiDataDirective.propDecorators = {
        apiDataProps: [{ type: Input, args: ['erApiData',] }],
        onRequestData: [{ type: Output }],
        onDataReady: [{ type: Output }]
    };
    return ApiDataDirective;
}(BaseDirective));
export { ApiDataDirective };
if (false) {
    /** @type {?} */
    ApiDataDirective.prototype.apiDataProps;
    /** @type {?} */
    ApiDataDirective.prototype.onRequestData;
    /** @type {?} */
    ApiDataDirective.prototype.onDataReady;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9hcGktZGF0YS9kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUUvRixPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRXpDO0lBR3NDLDRDQUFhO0lBSG5EO1FBQUEscUVBaUNDO1FBeEJXLGlCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7SUF3QjdDLENBQUM7Ozs7O0lBdEJDLHNDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxZQUFZO2VBQ25CLE9BQU8sQ0FBQyxZQUFZLENBQUMsWUFBWTtlQUNqQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxLQUFLLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRTtZQUNyRixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDbEI7SUFDSCxDQUFDOzs7O0lBRUQsb0NBQVM7OztJQUFUO1FBQUEsaUJBYUM7UUFaQyxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQzNDLFFBQVEsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztZQUN2RCxPQUFPO1NBQ1I7UUFDRCxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7YUFDOUIsU0FBUyxDQUFDLFVBQUEsSUFBSTtZQUNiLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMzQyxJQUFJLEtBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFO2dCQUMzQixLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDcEM7WUFDRCxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O2dCQWhDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGFBQWE7aUJBQ3hCOzs7K0JBR0UsS0FBSyxTQUFDLFdBQVc7Z0NBRWpCLE1BQU07OEJBRU4sTUFBTTs7SUF3QlQsdUJBQUM7Q0FBQSxBQWpDRCxDQUdzQyxhQUFhLEdBOEJsRDtTQTlCWSxnQkFBZ0I7OztJQUUzQix3Q0FBK0M7O0lBRS9DLHlDQUFrQzs7SUFFbEMsdUNBQTJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QXBpRGF0YVByb3BzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb21tb25zVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge0Jhc2VEaXJlY3RpdmV9IGZyb20gJy4uLy4uL2Jhc2VzL2RpcmVjdGl2ZSc7XG5pbXBvcnQge0FwaVV0aWxzfSBmcm9tICcuLi8uLi91dGlscy9hcGknO1xuaW1wb3J0IHtMb2dVdGlsc30gZnJvbSAnLi4vLi4vdXRpbHMvbG9nJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2VyQXBpRGF0YV0nXG59KVxuZXhwb3J0IGNsYXNzIEFwaURhdGFEaXJlY3RpdmUgZXh0ZW5kcyBCYXNlRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICBASW5wdXQoJ2VyQXBpRGF0YScpIGFwaURhdGFQcm9wczogQXBpRGF0YVByb3BzO1xuXG4gIEBPdXRwdXQoKSBvblJlcXVlc3REYXRhOiBGdW5jdGlvbjtcblxuICBAT3V0cHV0KCkgb25EYXRhUmVhZHkgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmFwaURhdGFQcm9wc1xuICAgICAgJiYgY2hhbmdlcy5hcGlEYXRhUHJvcHMuY3VycmVudFZhbHVlXG4gICAgICAmJiAodGhpcy5hcGlEYXRhUHJvcHMuYXV0b0ZldGNoICE9PSBmYWxzZSB8fCAhY2hhbmdlcy5hcGlEYXRhUHJvcHMuaXNGaXJzdENoYW5nZSgpKSkge1xuICAgICAgdGhpcy5mZXRjaERhdGEoKTtcbiAgICB9XG4gIH1cblxuICBmZXRjaERhdGEoKSB7XG4gICAgaWYgKENvbW1vbnNVdGlscy5pc0VtcHR5KHRoaXMuYXBpRGF0YVByb3BzKSkge1xuICAgICAgTG9nVXRpbHMuZGVidWcoJ2FwaURhdGFEaXJlY3RpdmUnLCAn5rKh5pyJ5a6a5LmJYXBpRGF0YVByb3BzJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIEFwaVV0aWxzLmZldGNoKHRoaXMuYXBpRGF0YVByb3BzKVxuICAgICAgLnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgICAgTG9nVXRpbHMuZGVidWcodGhpcywgJ2FwaURhdGHlvoXorqLpmIXmlbDmja4nLCBkYXRhKTtcbiAgICAgICAgaWYgKHRoaXMuYXBpRGF0YVByb3BzLmRhdGEkKSB7XG4gICAgICAgICAgdGhpcy5hcGlEYXRhUHJvcHMuZGF0YSQubmV4dChkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uRGF0YVJlYWR5LmVtaXQoZGF0YSk7XG4gICAgICB9KTtcbiAgfVxufVxuIl19