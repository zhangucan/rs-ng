/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input } from '@angular/core';
import { BaseDirective } from '../../bases/directive';
var HighlightDirective = /** @class */ (function (_super) {
    tslib_1.__extends(HighlightDirective, _super);
    function HighlightDirective(el) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.searchTerm = undefined;
        _this.caseSensitive = true;
        _this.viewRendered = false;
        _this.WRAPPER_TOKEN = '==--==##';
        return _this;
    }
    Object.defineProperty(HighlightDirective.prototype, "caseSensitivity", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.caseSensitive ? '' : 'i';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    HighlightDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.highlightSearchTerm();
    };
    /**
     * @return {?}
     */
    HighlightDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.highlightSearchTerm();
    };
    /**
     * @return {?}
     */
    HighlightDirective.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.viewRendered = true;
    };
    /**
     * @return {?}
     */
    HighlightDirective.prototype.highlightSearchTerm = /**
     * @return {?}
     */
    function () {
        if (!this.searchTerm) {
            if (this.viewRendered) {
                this.removePreviouslyMarkedTextInNode();
            }
            return;
        }
        if (this.el.nativeElement) {
            this.removePreviouslyMarkedTextInNode();
            this.markMatchedTextTokens(this.el.nativeElement);
        }
    };
    /**
     * @private
     * @param {?} htmlNode
     * @return {?}
     */
    HighlightDirective.prototype.markMatchedTextTokens = /**
     * @private
     * @param {?} htmlNode
     * @return {?}
     */
    function (htmlNode) {
        var _this = this;
        /** @type {?} */
        var _searchTerm = this.getSearchTerm();
        /** @type {?} */
        var searchRegex = new RegExp(_searchTerm, 'gmi');
        /** @type {?} */
        var _searchTermUniqueTokens = this.getUniqueTokenWrappedSearchTerm();
        /** @type {?} */
        var searchRegexUniqueTokens = new RegExp(_searchTermUniqueTokens, 'gmi');
        this.traverseHtmlElementsTree(htmlNode, function (e) {
            _this.traverseNodesInElement(htmlNode.childNodes, function (node) { return _this.wrapUniqueTokensAroundMatchedText(node, searchRegex); });
        });
        this.markMatchedTextAndRemoveUniqueTokens(htmlNode, searchRegexUniqueTokens);
    };
    /**
     * @private
     * @param {?} htmlNode
     * @param {?} searchRegex
     * @return {?}
     */
    HighlightDirective.prototype.markMatchedTextAndRemoveUniqueTokens = /**
     * @private
     * @param {?} htmlNode
     * @param {?} searchRegex
     * @return {?}
     */
    function (htmlNode, searchRegex) {
        var _this = this;
        if (htmlNode.innerHTML) {
            /** @type {?} */
            var innerHtml = htmlNode.innerHTML;
            /** @type {?} */
            var newHtml = innerHtml.replace(searchRegex, function (match) {
                /** @type {?} */
                var wrapperLength = _this.WRAPPER_TOKEN.length;
                /** @type {?} */
                var markedStr = match.substr(wrapperLength, match.length - (wrapperLength * 2));
                return "<mark>" + markedStr + "</mark>";
            });
            htmlNode.innerHTML = newHtml;
        }
    };
    /**
     * @private
     * @param {?} nodes
     * @param {?} visitCallback
     * @return {?}
     */
    HighlightDirective.prototype.traverseNodesInElement = /**
     * @private
     * @param {?} nodes
     * @param {?} visitCallback
     * @return {?}
     */
    function (nodes, visitCallback) {
        for (var i = 0; i < nodes.length; i++) {
            /** @type {?} */
            var node = nodes[i];
            if (node.nodeType === 3) {
                visitCallback(node);
            }
        }
    };
    /**
     * @private
     * @param {?} htmlNode
     * @param {?} searchRegex
     * @return {?}
     */
    HighlightDirective.prototype.wrapUniqueTokensAroundMatchedText = /**
     * @private
     * @param {?} htmlNode
     * @param {?} searchRegex
     * @return {?}
     */
    function (htmlNode, searchRegex) {
        /** @type {?} */
        var innerText = htmlNode.nodeValue;
        /** @type {?} */
        var newText = innerText.replace(searchRegex, this.WRAPPER_TOKEN + "$&" + this.WRAPPER_TOKEN);
        htmlNode.nodeValue = newText;
    };
    /**
     * @private
     * @param {?} currentNode
     * @param {?} visitCallback
     * @return {?}
     */
    HighlightDirective.prototype.traverseHtmlElementsTree = /**
     * @private
     * @param {?} currentNode
     * @param {?} visitCallback
     * @return {?}
     */
    function (currentNode, visitCallback) {
        if (currentNode) {
            visitCallback(currentNode);
        }
        for (var i = 0; i < currentNode.children.length; i++) {
            /** @type {?} */
            var childNode = currentNode.children[i];
            this.markMatchedTextTokens((/** @type {?} */ (childNode)));
        }
    };
    /**
     * @private
     * @return {?}
     */
    HighlightDirective.prototype.removePreviouslyMarkedTextInNode = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var node = this.el.nativeElement;
        /** @type {?} */
        var markingPattern = new RegExp('<mark>|<\/mark>', 'g');
        /** @type {?} */
        var cleanText = node.innerHTML.replace(markingPattern, '');
        node.innerHTML = cleanText;
    };
    // private highlightedNewTextInNode() {
    //   const node = this.el.nativeElement;
    //   const htmlNegativeLookaheadPattern = '(?![^<>]*>)';
    //   const searchTermPattern = this.getSearchTerm();
    //   const searchRegex = new RegExp(searchTermPattern + htmlNegativeLookaheadPattern, 'gmi');
    //   const markedText = node.innerHTML.replace(searchRegex, '<mark>$&</mark>');
    //   node.innerHTML = markedText;
    // }
    // private highlightedNewTextInNode() {
    //   const node = this.el.nativeElement;
    //   const htmlNegativeLookaheadPattern = '(?![^<>]*>)';
    //   const searchTermPattern = this.getSearchTerm();
    //   const searchRegex = new RegExp(searchTermPattern + htmlNegativeLookaheadPattern, 'gmi');
    //   const markedText = node.innerHTML.replace(searchRegex, '<mark>$&</mark>');
    //   node.innerHTML = markedText;
    // }
    /**
     * @private
     * @return {?}
     */
    HighlightDirective.prototype.getSearchTerm = 
    // private highlightedNewTextInNode() {
    //   const node = this.el.nativeElement;
    //   const htmlNegativeLookaheadPattern = '(?![^<>]*>)';
    //   const searchTermPattern = this.getSearchTerm();
    //   const searchRegex = new RegExp(searchTermPattern + htmlNegativeLookaheadPattern, 'gmi');
    //   const markedText = node.innerHTML.replace(searchRegex, '<mark>$&</mark>');
    //   node.innerHTML = markedText;
    // }
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var escapedSearchTerm = "" + this.escapeRegExp(this.searchTerm);
        /** @type {?} */
        var spaceToMultiMatchRegex = new RegExp(' ', 'gm');
        escapedSearchTerm = escapedSearchTerm.replace(spaceToMultiMatchRegex, '|');
        return escapedSearchTerm;
    };
    /**
     * @private
     * @return {?}
     */
    HighlightDirective.prototype.getUniqueTokenWrappedSearchTerm = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var escapedSearchTerm = this.escapeRegExp(this.searchTerm);
        /** @type {?} */
        var spaceToMultiMatchRegex = new RegExp(' ', 'gm');
        escapedSearchTerm = escapedSearchTerm.replace(spaceToMultiMatchRegex, this.WRAPPER_TOKEN + "|" + this.WRAPPER_TOKEN);
        escapedSearchTerm = "" + this.WRAPPER_TOKEN + escapedSearchTerm + this.WRAPPER_TOKEN;
        return escapedSearchTerm;
    };
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    HighlightDirective.prototype.escapeRegExp = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str.replace('/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g', '\\$&');
    };
    HighlightDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erHighlight]'
                },] }
    ];
    /** @nocollapse */
    HighlightDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    HighlightDirective.propDecorators = {
        searchTerm: [{ type: Input, args: ['erHighlight',] }],
        caseSensitive: [{ type: Input }]
    };
    return HighlightDirective;
}(BaseDirective));
export { HighlightDirective };
if (false) {
    /** @type {?} */
    HighlightDirective.prototype.searchTerm;
    /** @type {?} */
    HighlightDirective.prototype.caseSensitive;
    /**
     * @type {?}
     * @private
     */
    HighlightDirective.prototype.viewRendered;
    /**
     * @type {?}
     * @private
     */
    HighlightDirective.prototype.WRAPPER_TOKEN;
    /**
     * @type {?}
     * @private
     */
    HighlightDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9oaWdoLWxpZ2h0L2RpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBa0MsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQTJCLE1BQU0sZUFBZSxDQUFDO0FBQ3RILE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUVwRDtJQUd3Qyw4Q0FBYTtJQVFuRCw0QkFBb0IsRUFBYztRQUFsQyxZQUNFLGlCQUFPLFNBQ1I7UUFGbUIsUUFBRSxHQUFGLEVBQUUsQ0FBWTtRQU5aLGdCQUFVLEdBQUcsU0FBUyxDQUFDO1FBQ3BDLG1CQUFhLEdBQUcsSUFBSSxDQUFDO1FBRXRCLGtCQUFZLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLG1CQUFhLEdBQUcsVUFBVSxDQUFDOztJQUluQyxDQUFDO0lBRUQsc0JBQVksK0NBQWU7Ozs7O1FBQTNCO1lBQ0UsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUN2QyxDQUFDOzs7T0FBQTs7Ozs7SUFFRCx3Q0FBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFDaEMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELDRDQUFlOzs7SUFBZjtRQUNFLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCwrQ0FBa0I7OztJQUFsQjtRQUNFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7Ozs7SUFFRCxnREFBbUI7OztJQUFuQjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3BCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFDckIsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLENB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QUFJLElBQUksQ0FBQyxhQUFlLENBQUMsQ0FBQztRQUNySCxpQkFBaUIsR0FBRyxLQUFHLElBQUksQ0FBQyxhQUFhLEdBQUcsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGFBQWUsQ0FBQztRQUNyRixPQUFPLGlCQUFpQixDQUFDO0lBQzNCLENBQUM7Ozs7OztJQUVPLHlDQUFZOzs7OztJQUFwQixVQUFxQixHQUFHO1FBQ3RCLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyx1Q0FBdUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN0RSxDQUFDOztnQkFqSUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO2lCQUMxQjs7OztnQkFMbUQsVUFBVTs7OzZCQVEzRCxLQUFLLFNBQUMsYUFBYTtnQ0FDbkIsS0FBSzs7SUE0SFIseUJBQUM7Q0FBQSxBQWxJRCxDQUd3QyxhQUFhLEdBK0hwRDtTQS9IWSxrQkFBa0I7OztJQUU3Qix3Q0FBNkM7O0lBQzdDLDJDQUE4Qjs7Ozs7SUFFOUIsMENBQTZCOzs7OztJQUM3QiwyQ0FBbUM7Ozs7O0lBRXZCLGdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWZ0ZXJWaWV3Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmFzZURpcmVjdGl2ZX0gZnJvbSAnLi4vLi4vYmFzZXMvZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2VySGlnaGxpZ2h0XSdcbn0pXG5leHBvcnQgY2xhc3MgSGlnaGxpZ2h0RGlyZWN0aXZlIGV4dGVuZHMgQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZCB7XG5cbiAgQElucHV0KCdlckhpZ2hsaWdodCcpIHNlYXJjaFRlcm0gPSB1bmRlZmluZWQ7XG4gIEBJbnB1dCgpIGNhc2VTZW5zaXRpdmUgPSB0cnVlO1xuXG4gIHByaXZhdGUgdmlld1JlbmRlcmVkID0gZmFsc2U7XG4gIHByaXZhdGUgV1JBUFBFUl9UT0tFTiA9ICc9PS0tPT0jIyc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwcml2YXRlIGdldCBjYXNlU2Vuc2l0aXZpdHkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jYXNlU2Vuc2l0aXZlID8gJycgOiAnaSc7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgdGhpcy5oaWdobGlnaHRTZWFyY2hUZXJtKCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5oaWdobGlnaHRTZWFyY2hUZXJtKCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZCB7XG4gICAgdGhpcy52aWV3UmVuZGVyZWQgPSB0cnVlO1xuICB9XG5cbiAgaGlnaGxpZ2h0U2VhcmNoVGVybSgpIHtcbiAgICBpZiAoIXRoaXMuc2VhcmNoVGVybSkge1xuICAgICAgaWYgKHRoaXMudmlld1JlbmRlcmVkKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlUHJldmlvdXNseU1hcmtlZFRleHRJbk5vZGUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lbC5uYXRpdmVFbGVtZW50KSB7XG4gICAgICB0aGlzLnJlbW92ZVByZXZpb3VzbHlNYXJrZWRUZXh0SW5Ob2RlKCk7XG4gICAgICB0aGlzLm1hcmtNYXRjaGVkVGV4dFRva2Vucyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgbWFya01hdGNoZWRUZXh0VG9rZW5zKGh0bWxOb2RlOiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IF9zZWFyY2hUZXJtID0gdGhpcy5nZXRTZWFyY2hUZXJtKCk7XG4gICAgY29uc3Qgc2VhcmNoUmVnZXggPSBuZXcgUmVnRXhwKF9zZWFyY2hUZXJtLCAnZ21pJyk7XG5cbiAgICBjb25zdCBfc2VhcmNoVGVybVVuaXF1ZVRva2VucyA9IHRoaXMuZ2V0VW5pcXVlVG9rZW5XcmFwcGVkU2VhcmNoVGVybSgpO1xuICAgIGNvbnN0IHNlYXJjaFJlZ2V4VW5pcXVlVG9rZW5zID0gbmV3IFJlZ0V4cChfc2VhcmNoVGVybVVuaXF1ZVRva2VucywgJ2dtaScpO1xuICAgIHRoaXMudHJhdmVyc2VIdG1sRWxlbWVudHNUcmVlKGh0bWxOb2RlLCBlID0+IHtcbiAgICAgIHRoaXMudHJhdmVyc2VOb2Rlc0luRWxlbWVudChodG1sTm9kZS5jaGlsZE5vZGVzLCBub2RlID0+IHRoaXMud3JhcFVuaXF1ZVRva2Vuc0Fyb3VuZE1hdGNoZWRUZXh0KG5vZGUsIHNlYXJjaFJlZ2V4KSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm1hcmtNYXRjaGVkVGV4dEFuZFJlbW92ZVVuaXF1ZVRva2VucyhodG1sTm9kZSwgc2VhcmNoUmVnZXhVbmlxdWVUb2tlbnMpO1xuICB9XG5cbiAgcHJpdmF0ZSBtYXJrTWF0Y2hlZFRleHRBbmRSZW1vdmVVbmlxdWVUb2tlbnMoaHRtbE5vZGU6IEhUTUxFbGVtZW50LCBzZWFyY2hSZWdleDogUmVnRXhwKSB7XG4gICAgaWYgKGh0bWxOb2RlLmlubmVySFRNTCkge1xuICAgICAgY29uc3QgaW5uZXJIdG1sID0gaHRtbE5vZGUuaW5uZXJIVE1MO1xuICAgICAgY29uc3QgbmV3SHRtbCA9IGlubmVySHRtbC5yZXBsYWNlKHNlYXJjaFJlZ2V4LCBtYXRjaCA9PiB7XG4gICAgICAgIGNvbnN0IHdyYXBwZXJMZW5ndGggPSB0aGlzLldSQVBQRVJfVE9LRU4ubGVuZ3RoO1xuICAgICAgICBjb25zdCBtYXJrZWRTdHIgPSBtYXRjaC5zdWJzdHIod3JhcHBlckxlbmd0aCwgbWF0Y2gubGVuZ3RoIC0gKHdyYXBwZXJMZW5ndGggKiAyKSk7XG4gICAgICAgIHJldHVybiBgPG1hcms+JHttYXJrZWRTdHJ9PC9tYXJrPmA7XG4gICAgICB9KTtcblxuICAgICAgaHRtbE5vZGUuaW5uZXJIVE1MID0gbmV3SHRtbDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHRyYXZlcnNlTm9kZXNJbkVsZW1lbnQobm9kZXM6IE5vZGVMaXN0LCB2aXNpdENhbGxiYWNrOiAobm9kZTogTm9kZSkgPT4gYW55KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgICAgdmlzaXRDYWxsYmFjayhub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHdyYXBVbmlxdWVUb2tlbnNBcm91bmRNYXRjaGVkVGV4dChodG1sTm9kZTogTm9kZSwgc2VhcmNoUmVnZXg6IFJlZ0V4cCkge1xuICAgIGNvbnN0IGlubmVyVGV4dCA9IGh0bWxOb2RlLm5vZGVWYWx1ZTtcbiAgICBjb25zdCBuZXdUZXh0ID0gaW5uZXJUZXh0LnJlcGxhY2Uoc2VhcmNoUmVnZXgsIGAke3RoaXMuV1JBUFBFUl9UT0tFTn0kJiR7dGhpcy5XUkFQUEVSX1RPS0VOfWApO1xuICAgIGh0bWxOb2RlLm5vZGVWYWx1ZSA9IG5ld1RleHQ7XG4gIH1cblxuICBwcml2YXRlIHRyYXZlcnNlSHRtbEVsZW1lbnRzVHJlZShjdXJyZW50Tm9kZTogSFRNTEVsZW1lbnQsIHZpc2l0Q2FsbGJhY2s6IChub2RlOiBIVE1MRWxlbWVudCkgPT4gYW55KSB7XG4gICAgaWYgKGN1cnJlbnROb2RlKSB7XG4gICAgICB2aXNpdENhbGxiYWNrKGN1cnJlbnROb2RlKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnROb2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjaGlsZE5vZGUgPSBjdXJyZW50Tm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIHRoaXMubWFya01hdGNoZWRUZXh0VG9rZW5zKDxIVE1MRWxlbWVudD5jaGlsZE5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlUHJldmlvdXNseU1hcmtlZFRleHRJbk5vZGUoKSB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgICBjb25zdCBtYXJraW5nUGF0dGVybiA9IG5ldyBSZWdFeHAoJzxtYXJrPnw8XFwvbWFyaz4nLCAnZycpO1xuICAgIGNvbnN0IGNsZWFuVGV4dCA9IG5vZGUuaW5uZXJIVE1MLnJlcGxhY2UobWFya2luZ1BhdHRlcm4sICcnKTtcbiAgICBub2RlLmlubmVySFRNTCA9IGNsZWFuVGV4dDtcbiAgfVxuXG4gIC8vIHByaXZhdGUgaGlnaGxpZ2h0ZWROZXdUZXh0SW5Ob2RlKCkge1xuICAvLyAgIGNvbnN0IG5vZGUgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gIC8vICAgY29uc3QgaHRtbE5lZ2F0aXZlTG9va2FoZWFkUGF0dGVybiA9ICcoPyFbXjw+XSo+KSc7XG4gIC8vICAgY29uc3Qgc2VhcmNoVGVybVBhdHRlcm4gPSB0aGlzLmdldFNlYXJjaFRlcm0oKTtcbiAgLy8gICBjb25zdCBzZWFyY2hSZWdleCA9IG5ldyBSZWdFeHAoc2VhcmNoVGVybVBhdHRlcm4gKyBodG1sTmVnYXRpdmVMb29rYWhlYWRQYXR0ZXJuLCAnZ21pJyk7XG4gIC8vICAgY29uc3QgbWFya2VkVGV4dCA9IG5vZGUuaW5uZXJIVE1MLnJlcGxhY2Uoc2VhcmNoUmVnZXgsICc8bWFyaz4kJjwvbWFyaz4nKTtcbiAgLy8gICBub2RlLmlubmVySFRNTCA9IG1hcmtlZFRleHQ7XG4gIC8vIH1cbiAgcHJpdmF0ZSBnZXRTZWFyY2hUZXJtKCkge1xuICAgIGxldCBlc2NhcGVkU2VhcmNoVGVybSA9IGAke3RoaXMuZXNjYXBlUmVnRXhwKHRoaXMuc2VhcmNoVGVybSl9YDtcbiAgICBjb25zdCBzcGFjZVRvTXVsdGlNYXRjaFJlZ2V4ID0gbmV3IFJlZ0V4cCgnICcsICdnbScpO1xuICAgIGVzY2FwZWRTZWFyY2hUZXJtID0gZXNjYXBlZFNlYXJjaFRlcm0ucmVwbGFjZShzcGFjZVRvTXVsdGlNYXRjaFJlZ2V4LCAnfCcpO1xuICAgIHJldHVybiBlc2NhcGVkU2VhcmNoVGVybTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VW5pcXVlVG9rZW5XcmFwcGVkU2VhcmNoVGVybSgpIHtcbiAgICBsZXQgZXNjYXBlZFNlYXJjaFRlcm0gPSB0aGlzLmVzY2FwZVJlZ0V4cCh0aGlzLnNlYXJjaFRlcm0pO1xuICAgIGNvbnN0IHNwYWNlVG9NdWx0aU1hdGNoUmVnZXggPSBuZXcgUmVnRXhwKCcgJywgJ2dtJyk7XG4gICAgZXNjYXBlZFNlYXJjaFRlcm0gPSBlc2NhcGVkU2VhcmNoVGVybS5yZXBsYWNlKHNwYWNlVG9NdWx0aU1hdGNoUmVnZXgsIGAke3RoaXMuV1JBUFBFUl9UT0tFTn18JHt0aGlzLldSQVBQRVJfVE9LRU59YCk7XG4gICAgZXNjYXBlZFNlYXJjaFRlcm0gPSBgJHt0aGlzLldSQVBQRVJfVE9LRU59JHtlc2NhcGVkU2VhcmNoVGVybX0ke3RoaXMuV1JBUFBFUl9UT0tFTn1gO1xuICAgIHJldHVybiBlc2NhcGVkU2VhcmNoVGVybTtcbiAgfVxuXG4gIHByaXZhdGUgZXNjYXBlUmVnRXhwKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgnL1tcXC1cXFtcXF1cXC9cXHtcXH1cXChcXClcXCpcXCtcXD9cXC5cXFxcXFxeXFwkXFx8XS9nJywgJ1xcXFwkJicpO1xuICB9XG59XG4iXX0=