/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { ColorUtils, CommonsUtils } from '@er/utils';
import { BaseDirective } from '../../bases/directive';
var TagDirective = /** @class */ (function (_super) {
    tslib_1.__extends(TagDirective, _super);
    function TagDirective(el, render) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.render = render;
        return _this;
    }
    /**
     * @return {?}
     */
    TagDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!CommonsUtils.isEmpty(this.color)) {
            this.render.setStyle(this.el.nativeElement, 'color', this.color);
        }
        if (!CommonsUtils.isEmpty(this.bg)) {
            this.render.setStyle(this.el.nativeElement, 'background-color', this.bg);
        }
        if (CommonsUtils.isEmpty(this.color) && CommonsUtils.isEmpty(this.bg)) {
            if (!this.text) {
                this.text = this.el.nativeElement.innerHTML;
            }
            this.render.setStyle(this.el.nativeElement, 'background', ColorUtils.getColor(this.text));
            this.render.setStyle(this.el.nativeElement, 'color', 'white');
        }
        this.render.addClass(this.el.nativeElement, 'badge-pill');
        this.render.addClass(this.el.nativeElement, 'badge');
    };
    TagDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erTag]'
                },] }
    ];
    /** @nocollapse */
    TagDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    TagDirective.propDecorators = {
        text: [{ type: Input }],
        bg: [{ type: Input }],
        color: [{ type: Input }]
    };
    return TagDirective;
}(BaseDirective));
export { TagDirective };
if (false) {
    /** @type {?} */
    TagDirective.prototype.text;
    /** @type {?} */
    TagDirective.prototype.bg;
    /** @type {?} */
    TagDirective.prototype.color;
    /**
     * @type {?}
     * @private
     */
    TagDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TagDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy90ZXh0LXRhZy9kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxVQUFVLEVBQUUsWUFBWSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ25ELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUdwRDtJQUdrQyx3Q0FBYTtJQVE3QyxzQkFBb0IsRUFBYyxFQUFVLE1BQWlCO1FBQTdELFlBQ0UsaUJBQU8sU0FDUjtRQUZtQixRQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsWUFBTSxHQUFOLE1BQU0sQ0FBVzs7SUFFN0QsQ0FBQzs7OztJQUVELHNDQUFlOzs7SUFBZjtRQUNFLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2xFO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUMxRTtRQUNELElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDckUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7YUFDN0M7WUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMxRixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDL0Q7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDOztnQkEvQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxTQUFTO2lCQUNwQjs7OztnQkFQa0IsVUFBVTtnQkFBUyxTQUFTOzs7dUJBVTVDLEtBQUs7cUJBRUwsS0FBSzt3QkFFTCxLQUFLOztJQXVCUixtQkFBQztDQUFBLEFBaENELENBR2tDLGFBQWEsR0E2QjlDO1NBN0JZLFlBQVk7OztJQUV2Qiw0QkFBc0I7O0lBRXRCLDBCQUFvQjs7SUFFcEIsNkJBQXVCOzs7OztJQUVYLDBCQUFzQjs7Ozs7SUFBRSw4QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIFJlbmRlcmVyMn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0NvbG9yVXRpbHMsIENvbW1vbnNVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7QmFzZURpcmVjdGl2ZX0gZnJvbSAnLi4vLi4vYmFzZXMvZGlyZWN0aXZlJztcblxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZXJUYWddJ1xufSlcbmV4cG9ydCBjbGFzcyBUYWdEaXJlY3RpdmUgZXh0ZW5kcyBCYXNlRGlyZWN0aXZlIHtcblxuICBASW5wdXQoKSB0ZXh0OiBzdHJpbmc7XG5cbiAgQElucHV0KCkgYmc6IHN0cmluZztcblxuICBASW5wdXQoKSBjb2xvcjogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICghQ29tbW9uc1V0aWxzLmlzRW1wdHkodGhpcy5jb2xvcikpIHtcbiAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2NvbG9yJywgdGhpcy5jb2xvcik7XG4gICAgfVxuICAgIGlmICghQ29tbW9uc1V0aWxzLmlzRW1wdHkodGhpcy5iZykpIHtcbiAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2JhY2tncm91bmQtY29sb3InLCB0aGlzLmJnKTtcbiAgICB9XG4gICAgaWYgKENvbW1vbnNVdGlscy5pc0VtcHR5KHRoaXMuY29sb3IpICYmIENvbW1vbnNVdGlscy5pc0VtcHR5KHRoaXMuYmcpKSB7XG4gICAgICBpZiAoIXRoaXMudGV4dCkge1xuICAgICAgICB0aGlzLnRleHQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MO1xuICAgICAgfVxuICAgICAgdGhpcy5yZW5kZXIuc2V0U3R5bGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnYmFja2dyb3VuZCcsIENvbG9yVXRpbHMuZ2V0Q29sb3IodGhpcy50ZXh0KSk7XG4gICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdjb2xvcicsICd3aGl0ZScpO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdiYWRnZS1waWxsJyk7XG4gICAgdGhpcy5yZW5kZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnYmFkZ2UnKTtcbiAgfVxufVxuIl19