/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { SimpleChange } from '@angular/core';
/**
 * @param {?} val
 * @return {?}
 */
export function createNewChange(val) {
    return new SimpleChange(undefined, val, true);
}
/**
 * @param {?} record
 * @param {?=} isFirstChange
 * @return {?}
 */
export function recordToChange(record, isFirstChange) {
    if (isFirstChange === void 0) { isFirstChange = false; }
    return isFirstChange
        ? createNewChange(record.currentValue)
        : new SimpleChange(record.previousValue, record.currentValue, false);
}
/**
 * @param {?} isFirstChanges
 * @param {?} setter
 * @return {?}
 */
export function setChangeFromRecord(isFirstChanges, setter) {
    return function (record) {
        return setter(record, recordToChange(record, isFirstChanges));
    };
}
/**
 * @param {?} isFirstChanges
 * @return {?}
 */
function getChangesRecords(isFirstChanges) {
    return function (changes) { return setChangeFromRecord(isFirstChanges, function (record, change) { return changes[record.key] = change; }); };
}
/**
 * @param {?} isFirstChanges
 * @return {?}
 */
function getNewChangesRecords(isFirstChanges) {
    return function (changes) { return setChangeFromRecord(isFirstChanges, function (record, change) {
        if (!changes[record.key]) {
            changes[record.key] = change;
        }
    }); };
}
/** @type {?} */
export var defaultOpts = {
    isFirstChanges: false,
    onlyNewChanges: false,
};
/**
 * @param {?=} opts
 * @return {?}
 */
export function changesFromRecord(opts) {
    if (opts === void 0) { opts = defaultOpts; }
    return opts.onlyNewChanges
        ? getNewChangesRecords(opts.isFirstChanges)
        : getChangesRecords(opts.isFirstChanges);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvcHJvcHMtYmluZC91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQXVCLFlBQVksRUFBZ0IsTUFBTSxlQUFlLENBQUM7Ozs7O0FBSWhGLE1BQU0sVUFBVSxlQUFlLENBQUMsR0FBUTtJQUN0QyxPQUFPLElBQUksWUFBWSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDaEQsQ0FBQzs7Ozs7O0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FDNUIsTUFBK0IsRUFDL0IsYUFBcUI7SUFBckIsOEJBQUEsRUFBQSxxQkFBcUI7SUFFckIsT0FBTyxhQUFhO1FBQ2xCLENBQUMsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztRQUN0QyxDQUFDLENBQUMsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3pFLENBQUM7Ozs7OztBQUVELE1BQU0sVUFBVSxtQkFBbUIsQ0FDakMsY0FBdUIsRUFDdkIsTUFBdUU7SUFFdkUsT0FBTyxVQUFDLE1BQStCO1FBQ3JDLE9BQUEsTUFBTSxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQXRELENBQXNELENBQUM7QUFDM0QsQ0FBQzs7Ozs7QUFFRCxTQUFTLGlCQUFpQixDQUFDLGNBQXVCO0lBQ2hELE9BQU8sVUFBQyxPQUFzQixJQUFLLE9BQUEsbUJBQW1CLENBQUMsY0FBYyxFQUNuRSxVQUFDLE1BQU0sRUFBRSxNQUFNLElBQUssT0FBQSxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sRUFBNUIsQ0FBNEIsQ0FBQyxFQURoQixDQUNnQixDQUFDO0FBQ3RELENBQUM7Ozs7O0FBRUQsU0FBUyxvQkFBb0IsQ0FBQyxjQUF1QjtJQUNuRCxPQUFPLFVBQUMsT0FBc0IsSUFBSyxPQUFBLG1CQUFtQixDQUFDLGNBQWMsRUFDbkUsVUFBQyxNQUFNLEVBQUUsTUFBTTtRQUNiLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3hCLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO1NBQzlCO0lBQ0gsQ0FBQyxDQUFDLEVBTCtCLENBSy9CLENBQUM7QUFDUCxDQUFDOztBQUVELE1BQU0sS0FBTyxXQUFXLEdBQUc7SUFDekIsY0FBYyxFQUFFLEtBQUs7SUFDckIsY0FBYyxFQUFFLEtBQUs7Q0FDdEI7Ozs7O0FBSUQsTUFBTSxVQUFVLGlCQUFpQixDQUMvQixJQUErQjtJQUEvQixxQkFBQSxFQUFBLGtCQUErQjtJQUUvQixPQUFPLElBQUksQ0FBQyxjQUFjO1FBQ3hCLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDN0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7S2V5VmFsdWVDaGFuZ2VSZWNvcmQsIFNpbXBsZUNoYW5nZSwgU2ltcGxlQ2hhbmdlc30gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCB0eXBlIEtleVZhbHVlQ2hhbmdlUmVjb3JkQW55ID0gS2V5VmFsdWVDaGFuZ2VSZWNvcmQ8YW55LCBhbnk+O1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTmV3Q2hhbmdlKHZhbDogYW55KTogU2ltcGxlQ2hhbmdlIHtcbiAgcmV0dXJuIG5ldyBTaW1wbGVDaGFuZ2UodW5kZWZpbmVkLCB2YWwsIHRydWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVjb3JkVG9DaGFuZ2UoXG4gIHJlY29yZDogS2V5VmFsdWVDaGFuZ2VSZWNvcmRBbnksXG4gIGlzRmlyc3RDaGFuZ2UgPSBmYWxzZSxcbik6IFNpbXBsZUNoYW5nZSB7XG4gIHJldHVybiBpc0ZpcnN0Q2hhbmdlXG4gICAgPyBjcmVhdGVOZXdDaGFuZ2UocmVjb3JkLmN1cnJlbnRWYWx1ZSlcbiAgICA6IG5ldyBTaW1wbGVDaGFuZ2UocmVjb3JkLnByZXZpb3VzVmFsdWUsIHJlY29yZC5jdXJyZW50VmFsdWUsIGZhbHNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldENoYW5nZUZyb21SZWNvcmQoXG4gIGlzRmlyc3RDaGFuZ2VzOiBib29sZWFuLFxuICBzZXR0ZXI6IChyZWNvcmQ6IEtleVZhbHVlQ2hhbmdlUmVjb3JkQW55LCBjaGFuZ2U6IFNpbXBsZUNoYW5nZSkgPT4gdm9pZCxcbikge1xuICByZXR1cm4gKHJlY29yZDogS2V5VmFsdWVDaGFuZ2VSZWNvcmRBbnkpID0+XG4gICAgc2V0dGVyKHJlY29yZCwgcmVjb3JkVG9DaGFuZ2UocmVjb3JkLCBpc0ZpcnN0Q2hhbmdlcykpO1xufVxuXG5mdW5jdGlvbiBnZXRDaGFuZ2VzUmVjb3Jkcyhpc0ZpcnN0Q2hhbmdlczogYm9vbGVhbikge1xuICByZXR1cm4gKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpID0+IHNldENoYW5nZUZyb21SZWNvcmQoaXNGaXJzdENoYW5nZXMsXG4gICAgKHJlY29yZCwgY2hhbmdlKSA9PiBjaGFuZ2VzW3JlY29yZC5rZXldID0gY2hhbmdlKTtcbn1cblxuZnVuY3Rpb24gZ2V0TmV3Q2hhbmdlc1JlY29yZHMoaXNGaXJzdENoYW5nZXM6IGJvb2xlYW4pIHtcbiAgcmV0dXJuIChjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSA9PiBzZXRDaGFuZ2VGcm9tUmVjb3JkKGlzRmlyc3RDaGFuZ2VzLFxuICAgIChyZWNvcmQsIGNoYW5nZSkgPT4ge1xuICAgICAgaWYgKCFjaGFuZ2VzW3JlY29yZC5rZXldKSB7XG4gICAgICAgIGNoYW5nZXNbcmVjb3JkLmtleV0gPSBjaGFuZ2U7XG4gICAgICB9XG4gICAgfSk7XG59XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0T3B0cyA9IHtcbiAgaXNGaXJzdENoYW5nZXM6IGZhbHNlLFxuICBvbmx5TmV3Q2hhbmdlczogZmFsc2UsXG59O1xuXG5leHBvcnQgdHlwZSBEZWZhdWx0T3B0cyA9IFBhcnRpYWw8dHlwZW9mIGRlZmF1bHRPcHRzPjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZXNGcm9tUmVjb3JkKFxuICBvcHRzOiBEZWZhdWx0T3B0cyA9IGRlZmF1bHRPcHRzLFxuKSB7XG4gIHJldHVybiBvcHRzLm9ubHlOZXdDaGFuZ2VzXG4gICAgPyBnZXROZXdDaGFuZ2VzUmVjb3JkcyhvcHRzLmlzRmlyc3RDaGFuZ2VzKVxuICAgIDogZ2V0Q2hhbmdlc1JlY29yZHMob3B0cy5pc0ZpcnN0Q2hhbmdlcyk7XG59XG4iXX0=