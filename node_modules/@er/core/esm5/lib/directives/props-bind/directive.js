/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Input, KeyValueDiffers, Renderer2, SimpleChange, ViewContainerRef } from '@angular/core';
import { CommonsUtils, IdUtils } from '@er/utils';
import { Observable } from 'rxjs';
import { BaseDirective } from '../../bases/directive';
import { WrapperComponent } from '../../bases/wrappe';
import { ComponentUtils } from '../../utils/component';
import { LogUtils } from '../../utils/log';
import { changesFromRecord } from './util';
/** @type {?} */
var recordToChanges = changesFromRecord({ isFirstChanges: true });
/** @type {?} */
var recordToNewChanges = changesFromRecord({ onlyNewChanges: true });
var PropsBindDirective = /** @class */ (function (_super) {
    tslib_1.__extends(PropsBindDirective, _super);
    function PropsBindDirective(differs, elementRef, renderer, viewContainerRef) {
        var _this = _super.call(this) || this;
        _this.differs = differs;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.viewContainerRef = viewContainerRef;
        _this.autoBind = true;
        _this.differ = _this.differs.find({}).create();
        _this._hostComponentInst = undefined;
        _this._viewComponentRef = undefined;
        return _this;
    }
    Object.defineProperty(PropsBindDirective.prototype, "hostComponentInst", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._hostComponentInst === undefined) {
                this._hostComponentInst = ComponentUtils.getHostComponentInst(this.viewContainerRef);
            }
            return this._hostComponentInst;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PropsBindDirective.prototype, "viewComponentRef", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._viewComponentRef === undefined) {
                this._viewComponentRef = ComponentUtils.getViewComponentRef(this.viewContainerRef);
            }
            return this._viewComponentRef;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    PropsBindDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.autoBind) {
            if (changes.props && !CommonsUtils.isEmpty(this.props)) {
                this.resolveProps();
                this.differs.find({}).create();
                LogUtils.debug(this, '属性绑定', this.props, this.inputs, this.outputs, this.hooks);
                if (this.methods) {
                    this.bindMethods();
                }
                if (this.inputs) {
                    /** @type {?} */
                    var inputsChanges = this.differ.diff(this.inputs);
                    this.expInputs = this.getExpressionInputs(this.inputs);
                    if (inputsChanges) {
                        this.updateInputsChanges(inputsChanges);
                        this.updateInputs(!this.lastInputChanges);
                    }
                }
                if (this.outputs) {
                    /** @type {?} */
                    var outputsChanges = this.differ.diff(this.outputs);
                    if (outputsChanges) {
                        this.bindOutputs();
                    }
                }
                if (this.hooks) {
                    this.bindLifeCycles();
                }
                if (changes.props.isFirstChange()) {
                    if (this.hostComponentInst._propsBind) {
                        this.hostComponentInst._propsBind();
                    }
                }
            }
            if (changes.attrs && this.attrs) {
                this.resolveAttrs();
                /** @type {?} */
                var attrChanges = this.differ.diff(this.attrs);
                if (attrChanges) {
                    this.lastAttrChanges = this.changesToAttrChanges(attrChanges);
                    this.updateAttributes(this.lastAttrChanges);
                }
                // this.expAttrs = this.getExpressionInputs(this.attrs);
            }
        }
    };
    /**
     * @return {?}
     */
    PropsBindDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.attrs && this.autoBind) {
            if (this.expAttrs && Object.keys(this.expAttrs).length > 0) {
                Object.keys(this.expAttrs).forEach(function (key) {
                    _this.attrs[key] = _this.expAttrs[key].call(_this, _this.getEventContext());
                });
            }
            /** @type {?} */
            var attrChanges = this.differ.diff(this.attrs);
            if (attrChanges) {
                this.lastAttrChanges = this.changesToAttrChanges(attrChanges);
                this.updateAttributes(this.lastAttrChanges);
            }
        }
        if (this.inputs && this.autoBind) {
            if (this.expInputs && Object.keys(this.expInputs).length > 0) {
                Object.keys(this.expInputs).forEach(function (key) {
                    /** @type {?} */
                    var result = _this.expInputs[key](_this.getEventContext());
                    if (result instanceof Observable) {
                        _this.$subscriptions = ((/** @type {?} */ (result))).subscribe(function (data) {
                            _this.inputs[key] = data;
                        });
                    }
                    else {
                        _this.inputs[key] = result;
                    }
                });
            }
            /** @type {?} */
            var inputsChanges = this.differ.diff(this.inputs);
            if (inputsChanges) {
                /** @type {?} */
                var isNotFirstChange = !!this.lastInputChanges;
                this.updateInputsChanges(inputsChanges);
                if (isNotFirstChange) {
                    this.updateInputs();
                }
            }
        }
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    PropsBindDirective.prototype.getEventContext = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        return tslib_1.__assign({}, event, { $from: this.hostComponentInst }, this.context || {});
    };
    /**
     * @private
     * @param {?=} isFirstChange
     * @return {?}
     */
    PropsBindDirective.prototype.updateInputs = /**
     * @private
     * @param {?=} isFirstChange
     * @return {?}
     */
    function (isFirstChange) {
        var _this = this;
        if (isFirstChange === void 0) { isFirstChange = false; }
        if (!this.hostComponentInst || !this.inputs) {
            return;
        }
        Object.keys(this.inputs)
            .forEach(function (p) { return (_this.hostComponentInst[p] = _this.inputs[p]); });
        this.notifyOnInputChanges(this.lastInputChanges, isFirstChange);
    };
    /**
     * @private
     * @return {?}
     */
    PropsBindDirective.prototype.bindOutputs = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.stopSubscribe();
        if (!this.outputs) {
            return;
        }
        Object.keys(this.outputs)
            .filter(function (p) { return _this.hostComponentInst[p]; })
            .forEach(function (p) {
            return _this.$subscriptions = ((/** @type {?} */ (_this.hostComponentInst[p])))
                .subscribe(function (event) {
                try {
                    _this.outputs[p](_this.getEventContext(event));
                }
                catch (e) {
                    LogUtils.error(_this.hostComponentInst, '操作失败', e);
                }
            });
        });
    };
    /**
     * @private
     * @return {?}
     */
    PropsBindDirective.prototype.bindLifeCycles = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var constructor = ComponentUtils.getConstructor(this.hostComponentInst);
        /** @type {?} */
        var destructor = constructor.prototype['ngOnDestroy'];
        ComponentUtils.bindLifeCycles(this.hostComponentInst, this.hooks, constructor, destructor);
    };
    /**
     * @private
     * @return {?}
     */
    PropsBindDirective.prototype.bindMethods = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.methods) {
            Object.keys(this.methods).forEach(function (method) {
                _this.hostComponentInst[method] = _this.methods[method].bind(_this.hostComponentInst);
            });
        }
    };
    /**
     * @private
     * @param {?=} changes
     * @param {?=} forceFirstChanges
     * @return {?}
     */
    PropsBindDirective.prototype.notifyOnInputChanges = /**
     * @private
     * @param {?=} changes
     * @param {?=} forceFirstChanges
     * @return {?}
     */
    function (changes, forceFirstChanges) {
        if (changes === void 0) { changes = {}; }
        if (!this.hostComponentInst.ngOnChanges) {
            return;
        }
        if (forceFirstChanges) {
            changes = this.collectFirstChanges();
        }
        this.hostComponentInst.ngOnChanges(changes);
        if (this.hostComponentInst.cd && this.hostComponentInst.cd.detectChanges) {
            this.hostComponentInst.cd.detectChanges();
        }
    };
    /**
     * @private
     * @param {?} props
     * @return {?}
     */
    PropsBindDirective.prototype.getExpressionInputs = /**
     * @private
     * @param {?} props
     * @return {?}
     */
    function (props) {
        if (props) {
            /** @type {?} */
            var expProps_1 = {};
            Object.keys(props).forEach(function (key) {
                if (props[key] instanceof Function) {
                    expProps_1[key] = props[key];
                }
            });
            return expProps_1;
        }
        return undefined;
    };
    /**
     * @private
     * @param {?} differ
     * @return {?}
     */
    PropsBindDirective.prototype.updateInputsChanges = /**
     * @private
     * @param {?} differ
     * @return {?}
     */
    function (differ) {
        this.lastInputChanges = this.collectChangesFromDiffer(differ);
    };
    /**
     * @private
     * @return {?}
     */
    PropsBindDirective.prototype.collectFirstChanges = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var changes = (/** @type {?} */ ({}));
        /** @type {?} */
        var inputs = this.inputs;
        Object.keys(inputs)
            .forEach(function (prop) { return (changes[prop] = new SimpleChange(undefined, inputs[prop], true)); });
        return changes;
    };
    /**
     * @private
     * @param {?} differ
     * @return {?}
     */
    PropsBindDirective.prototype.collectChangesFromDiffer = /**
     * @private
     * @param {?} differ
     * @return {?}
     */
    function (differ) {
        /** @type {?} */
        var changes = (/** @type {?} */ ({}));
        differ.forEachAddedItem(recordToChanges(changes));
        differ.forEachItem(recordToNewChanges(changes));
        return changes;
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    PropsBindDirective.prototype.changesToAttrChanges = /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var attrChanges = {
            set: {},
            remove: []
        };
        changes.forEachAddedItem(function (r) { return (attrChanges.set[r.key] = r.currentValue); });
        changes.forEachChangedItem(function (r) { return (attrChanges.set[r.key] = r.currentValue); });
        changes.forEachRemovedItem(function (r) { return attrChanges.remove.push(r.key); });
        return attrChanges;
    };
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    PropsBindDirective.prototype.updateAttributes = /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    function (actions) {
        var _this = this;
        Object.keys(actions.set).forEach(function (key) {
            return _this.setAttribute(key, actions.set[key]);
        });
        actions.remove.forEach(function (key) { return _this.removeAttribute(key); });
    };
    /**
     * @private
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    PropsBindDirective.prototype.setAttribute = /**
     * @private
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    function (name, value, namespace) {
        this.renderer.setAttribute(this.elementRef.nativeElement, name, value, namespace);
    };
    /**
     * @private
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    PropsBindDirective.prototype.removeAttribute = /**
     * @private
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    function (name, namespace) {
        this.renderer.removeAttribute(this.elementRef.nativeElement, name, namespace);
    };
    /**
     * @private
     * @return {?}
     */
    PropsBindDirective.prototype.resolveProps = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.hostComponentInst && CommonsUtils.isJson(this.props)) {
            this.inputs = {};
            this.outputs = {};
            if (this.hostComponentInst._initProps) {
                this.hostComponentInst.$props = CommonsUtils.merge({}, this.props);
                this.hostComponentInst._initProps();
                this.props = CommonsUtils.merge({}, this.hostComponentInst.$props);
            }
            if (!this.props['$id']) {
                this.props['$id'] = IdUtils.getRandom();
            }
            if (this.props['methods']) {
                this.methods = this.props['methods'];
                delete this.props['methods'];
            }
            if (this.props['hooks']) {
                this.hooks = this.props['hooks'];
                delete this.props['hooks'];
            }
            // else if (this.props['$ext'] && this.props['$ext'].hooks) {
            //   this.hooks = this.props['$ext'].hooks;
            //   delete this.props['$ext'].hooks;
            // }
            if (this.hostComponentInst instanceof WrapperComponent) {
                this.props = CommonsUtils.get(this.props, '$ext', {});
                if (this.props['hooks']) {
                    this.hooks = this.props['hooks'];
                    delete this.props['hooks'];
                }
            }
            else {
                this.props = CommonsUtils.omit(this.props, '$ext');
            }
            Object.keys(this.props).forEach(function (key) {
                if (_this.hostComponentInst[key] instanceof EventEmitter) {
                    _this.outputs[key] = _this.props[key];
                }
                else {
                    _this.inputs[key] = _this.props[key];
                }
            });
            if (Object.keys(this.inputs).length === 0) {
                this.inputs = undefined;
            }
            if (Object.keys(this.outputs).length === 0) {
                this.outputs = undefined;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    PropsBindDirective.prototype.resolveAttrs = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.hostComponentInst instanceof WrapperComponent) {
            this.attrs = CommonsUtils.get(this.attrs, '$ext', {});
        }
        else {
            this.attrs = CommonsUtils.omit(this.attrs, '$ext');
        }
    };
    PropsBindDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erPropsBind]'
                },] }
    ];
    /** @nocollapse */
    PropsBindDirective.ctorParameters = function () { return [
        { type: KeyValueDiffers },
        { type: ElementRef },
        { type: Renderer2 },
        { type: ViewContainerRef }
    ]; };
    PropsBindDirective.propDecorators = {
        props: [{ type: Input }],
        context: [{ type: Input }],
        attrs: [{ type: Input }],
        autoBind: [{ type: Input }]
    };
    return PropsBindDirective;
}(BaseDirective));
export { PropsBindDirective };
if (false) {
    /** @type {?} */
    PropsBindDirective.prototype.props;
    /** @type {?} */
    PropsBindDirective.prototype.context;
    /** @type {?} */
    PropsBindDirective.prototype.attrs;
    /** @type {?} */
    PropsBindDirective.prototype.autoBind;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.methods;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.inputs;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.outputs;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.expInputs;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.expAttrs;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.hooks;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.lastInputChanges;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.lastAttrChanges;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype._hostComponentInst;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype._viewComponentRef;
    /**
     * @type {?}
     * @private
     */
    PropsBindDirective.prototype.differs;
    /**
     * @type {?}
     * @protected
     */
    PropsBindDirective.prototype.elementRef;
    /**
     * @type {?}
     * @protected
     */
    PropsBindDirective.prototype.renderer;
    /**
     * @type {?}
     * @protected
     */
    PropsBindDirective.prototype.viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,