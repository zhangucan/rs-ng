/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { ConfigUtils } from '@er/utils';
import { BaseDirective } from '../../bases/directive';
/**
 * @abstract
 */
var SpinnerBaseDirective = /** @class */ (function (_super) {
    tslib_1.__extends(SpinnerBaseDirective, _super);
    function SpinnerBaseDirective(el, renderer) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.renderer = renderer;
        _this.position = 'right';
        return _this;
    }
    /**
     * @return {?}
     */
    SpinnerBaseDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.onInit();
    };
    /**
     * @return {?}
     */
    SpinnerBaseDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.spinElement = this.createElement('span', ['spinner', this.position, 'd-none']);
        if (!this.spinnerClass) {
            this.spinnerClass = ConfigUtils.getConfig().onLoading || 'fa fa-cog fa-spin fa-spin-2x';
        }
        /** @type {?} */
        var spinnerEle = this.createElement('i', this.spinnerClass.split(' '));
        this.renderer.appendChild(this.spinElement, spinnerEle);
        this.placeSpin();
    };
    /**
     * @protected
     * @return {?}
     */
    SpinnerBaseDirective.prototype.placeSpin = /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var element = this.el.nativeElement;
        if (element instanceof HTMLDivElement) {
            this.addSpin(element);
        }
        else if (element instanceof HTMLButtonElement) {
            this.appendChildSpin(element);
        }
        else if (element instanceof HTMLImageElement) {
            this.replaceWithWrapper();
        }
        else if (element instanceof HTMLUListElement) {
            this.replaceWithWrapper();
        }
        else if (element instanceof HTMLInputElement) {
            switch (element.type) {
                case 'text':
                case 'file': {
                    this.replaceWithWrapper();
                    break;
                }
                case 'checkbox':
                case 'radio':
                case 'button': {
                    this.replaceWithWrapper('span');
                    break;
                }
                default:
                    this.replaceWithWrapper();
            }
        }
        else {
            this.replaceWithWrapper();
        }
    };
    /**
     * @protected
     * @param {?} parent
     * @return {?}
     */
    SpinnerBaseDirective.prototype.appendChildSpin = /**
     * @protected
     * @param {?} parent
     * @return {?}
     */
    function (parent) {
        this.renderer.appendChild(parent, this.spinElement);
    };
    /**
     * @protected
     * @param {?} parent
     * @return {?}
     */
    SpinnerBaseDirective.prototype.addSpin = /**
     * @protected
     * @param {?} parent
     * @return {?}
     */
    function (parent) {
        this.renderer.addClass(parent, 'spin-container');
        this.renderer.removeClass(this.spinElement, this.position);
        this.renderer.addClass(this.spinElement, 'fa-2x');
        this.renderer.addClass(this.spinElement, 'center');
        this.appendChildSpin(parent);
    };
    /**
     * @protected
     * @param {?=} tag
     * @return {?}
     */
    SpinnerBaseDirective.prototype.replaceWithWrapper = /**
     * @protected
     * @param {?=} tag
     * @return {?}
     */
    function (tag) {
        if (tag === void 0) { tag = 'div'; }
        this.containerElement = this.createElement(tag, ['spin-container']);
        /** @type {?} */
        var parent = this.el.nativeElement.parentNode;
        this.renderer.insertBefore(parent, this.containerElement, this.el.nativeElement);
        this.renderer.removeChild(parent, this.el.nativeElement);
        if (tag !== 'div') {
            this.renderer.addClass(this.spinElement, 'spin-inline');
            if (this.position === 'left') {
                this.renderer.appendChild(this.containerElement, this.spinElement);
                this.renderer.appendChild(this.containerElement, this.el.nativeElement);
            }
        }
        else {
            this.renderer.appendChild(this.containerElement, this.el.nativeElement);
            this.renderer.appendChild(this.containerElement, this.spinElement);
        }
    };
    /**
     * @protected
     * @param {?} tag
     * @param {?} classNames
     * @return {?}
     */
    SpinnerBaseDirective.prototype.createElement = /**
     * @protected
     * @param {?} tag
     * @param {?} classNames
     * @return {?}
     */
    function (tag, classNames) {
        var _this = this;
        /** @type {?} */
        var element = this.renderer.createElement(tag);
        if (classNames) {
            classNames.forEach(function (className) {
                return _this.renderer.addClass(element, className);
            });
        }
        return element;
    };
    SpinnerBaseDirective.propDecorators = {
        spinnerClass: [{ type: Input }],
        position: [{ type: Input }]
    };
    return SpinnerBaseDirective;
}(BaseDirective));
export { SpinnerBaseDirective };
if (false) {
    /** @type {?} */
    SpinnerBaseDirective.prototype.spinnerClass;
    /** @type {?} */
    SpinnerBaseDirective.prototype.position;
    /** @type {?} */
    SpinnerBaseDirective.prototype.spinElement;
    /** @type {?} */
    SpinnerBaseDirective.prototype.containerElement;
    /**
     * @type {?}
     * @protected
     */
    SpinnerBaseDirective.prototype.el;
    /**
     * @type {?}
     * @protected
     */
    SpinnerBaseDirective.prototype.renderer;
    /**
     * @abstract
     * @return {?}
     */
    SpinnerBaseDirective.prototype.onInit = function () { };
}
//# sourceMappingURL=data:application/json;base64,