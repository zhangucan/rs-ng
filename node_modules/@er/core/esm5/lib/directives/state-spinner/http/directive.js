/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { StateNames } from '@er/types';
import { StatesUtils } from '@er/utils';
import { SpinnerBaseDirective } from '../base';
var HttpSpinnerDirective = /** @class */ (function (_super) {
    tslib_1.__extends(HttpSpinnerDirective, _super);
    function HttpSpinnerDirective(el, renderer) {
        return _super.call(this, el, renderer) || this;
    }
    /**
     * @return {?}
     */
    HttpSpinnerDirective.prototype.onInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.$subscriptions = StatesUtils.observe(StateNames.http, this.spinnerTag)
            .subscribe(function (state) {
            if (state && state.start) {
                _this.renderer.removeClass(_this.spinElement, 'd-none');
                _this.renderer.setAttribute(_this.el.nativeElement, 'disabled', 'true');
                if (_this.containerElement) {
                    _this.renderer.setStyle(_this.el.nativeElement, 'opacity', 0.5);
                }
            }
            else {
                if (_this.spinElement) {
                    _this.renderer.addClass(_this.spinElement, 'd-none');
                    _this.renderer.removeAttribute(_this.el.nativeElement, 'disabled');
                    if (_this.containerElement) {
                        _this.renderer.setStyle(_this.el.nativeElement, 'opacity', 1);
                    }
                }
            }
        });
    };
    HttpSpinnerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erHttpState]'
                },] }
    ];
    /** @nocollapse */
    HttpSpinnerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    HttpSpinnerDirective.propDecorators = {
        spinnerTag: [{ type: Input, args: ['erHttpState',] }]
    };
    return HttpSpinnerDirective;
}(SpinnerBaseDirective));
export { HttpSpinnerDirective };
if (false) {
    /** @type {?} */
    HttpSpinnerDirective.prototype.spinnerTag;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9zdGF0ZS1zcGlubmVyL2h0dHAvZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN0RSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRzdDO0lBRzBDLGdEQUFvQjtJQUk1RCw4QkFBWSxFQUFjLEVBQUUsUUFBbUI7ZUFDN0Msa0JBQU0sRUFBRSxFQUFFLFFBQVEsQ0FBQztJQUNyQixDQUFDOzs7O0lBRUQscUNBQU07OztJQUFOO1FBQUEsaUJBbUJDO1FBbEJDLElBQUksQ0FBQyxjQUFjLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUM7YUFDeEUsU0FBUyxDQUFDLFVBQUEsS0FBSztZQUNkLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7Z0JBQ3hCLEtBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQ3RELEtBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDdEUsSUFBSSxLQUFJLENBQUMsZ0JBQWdCLEVBQUU7b0JBQ3pCLEtBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztpQkFDL0Q7YUFDRjtpQkFBTTtnQkFDTCxJQUFJLEtBQUksQ0FBQyxXQUFXLEVBQUU7b0JBQ3BCLEtBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7b0JBQ25ELEtBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO29CQUNqRSxJQUFJLEtBQUksQ0FBQyxnQkFBZ0IsRUFBRTt3QkFDekIsS0FBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO3FCQUM3RDtpQkFDRjthQUNGO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOztnQkE5QkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO2lCQUMxQjs7OztnQkFSa0IsVUFBVTtnQkFBUyxTQUFTOzs7NkJBVzVDLEtBQUssU0FBQyxhQUFhOztJQTBCdEIsMkJBQUM7Q0FBQSxBQS9CRCxDQUcwQyxvQkFBb0IsR0E0QjdEO1NBNUJZLG9CQUFvQjs7O0lBRS9CLDBDQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgUmVuZGVyZXIyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7U3RhdGVOYW1lc30gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7U3RhdGVzVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge1NwaW5uZXJCYXNlRGlyZWN0aXZlfSBmcm9tICcuLi9iYXNlJztcblxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZXJIdHRwU3RhdGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBIdHRwU3Bpbm5lckRpcmVjdGl2ZSBleHRlbmRzIFNwaW5uZXJCYXNlRGlyZWN0aXZlIHtcblxuICBASW5wdXQoJ2VySHR0cFN0YXRlJykgc3Bpbm5lclRhZzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgc3VwZXIoZWwsIHJlbmRlcmVyKTtcbiAgfVxuXG4gIG9uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLiRzdWJzY3JpcHRpb25zID0gU3RhdGVzVXRpbHMub2JzZXJ2ZShTdGF0ZU5hbWVzLmh0dHAsIHRoaXMuc3Bpbm5lclRhZylcbiAgICAgIC5zdWJzY3JpYmUoc3RhdGUgPT4ge1xuICAgICAgICBpZiAoc3RhdGUgJiYgc3RhdGUuc3RhcnQpIHtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuc3BpbkVsZW1lbnQsICdkLW5vbmUnKTtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdkaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdvcGFjaXR5JywgMC41KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMuc3BpbkVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5zcGluRWxlbWVudCwgJ2Qtbm9uZScpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdvcGFjaXR5JywgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxufVxuIl19