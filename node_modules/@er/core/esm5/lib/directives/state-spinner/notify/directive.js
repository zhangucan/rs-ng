/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { Observable } from 'rxjs';
import { SpinnerBaseDirective } from '../base';
var NotifySpinnerDirective = /** @class */ (function (_super) {
    tslib_1.__extends(NotifySpinnerDirective, _super);
    function NotifySpinnerDirective(el, renderer) {
        return _super.call(this, el, renderer) || this;
    }
    /**
     * @return {?}
     */
    NotifySpinnerDirective.prototype.onInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.$subscriptions =
            this.notifier
                .subscribe(function (state) {
                !!state
                    ? _this.renderer.removeClass(_this.spinElement, 'd-none')
                    : _this.renderer.addClass(_this.spinElement, 'd-none');
            });
    };
    NotifySpinnerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erNotifySpinner]'
                },] }
    ];
    /** @nocollapse */
    NotifySpinnerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    NotifySpinnerDirective.propDecorators = {
        notifier: [{ type: Input, args: ['notifySpinner',] }]
    };
    return NotifySpinnerDirective;
}(SpinnerBaseDirective));
export { NotifySpinnerDirective };
if (false) {
    /** @type {?} */
    NotifySpinnerDirective.prototype.notifier;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9zdGF0ZS1zcGlubmVyL25vdGlmeS9kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRzdDO0lBRzRDLGtEQUFvQjtJQUk5RCxnQ0FBWSxFQUFjLEVBQUUsUUFBbUI7ZUFDN0Msa0JBQU0sRUFBRSxFQUFFLFFBQVEsQ0FBQztJQUNyQixDQUFDOzs7O0lBRUQsdUNBQU07OztJQUFOO1FBQUEsaUJBUUM7UUFQQyxJQUFJLENBQUMsY0FBYztZQUNqQixJQUFJLENBQUMsUUFBUTtpQkFDVixTQUFTLENBQUMsVUFBQSxLQUFLO2dCQUNkLENBQUMsQ0FBQyxLQUFLO29CQUNMLENBQUMsQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxLQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQztvQkFDdkQsQ0FBQyxDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDekQsQ0FBQyxDQUFDLENBQUM7SUFDVCxDQUFDOztnQkFuQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7aUJBQzlCOzs7O2dCQVBrQixVQUFVO2dCQUFTLFNBQVM7OzsyQkFVNUMsS0FBSyxTQUFDLGVBQWU7O0lBZXhCLDZCQUFDO0NBQUEsQUFwQkQsQ0FHNEMsb0JBQW9CLEdBaUIvRDtTQWpCWSxzQkFBc0I7OztJQUVqQywwQ0FBc0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIFJlbmRlcmVyMn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtTcGlubmVyQmFzZURpcmVjdGl2ZX0gZnJvbSAnLi4vYmFzZSc7XG5cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2VyTm90aWZ5U3Bpbm5lcl0nXG59KVxuZXhwb3J0IGNsYXNzIE5vdGlmeVNwaW5uZXJEaXJlY3RpdmUgZXh0ZW5kcyBTcGlubmVyQmFzZURpcmVjdGl2ZSB7XG5cbiAgQElucHV0KCdub3RpZnlTcGlubmVyJykgbm90aWZpZXI6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICBzdXBlcihlbCwgcmVuZGVyZXIpO1xuICB9XG5cbiAgb25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuJHN1YnNjcmlwdGlvbnMgPVxuICAgICAgdGhpcy5ub3RpZmllclxuICAgICAgICAuc3Vic2NyaWJlKHN0YXRlID0+IHtcbiAgICAgICAgICAhIXN0YXRlXG4gICAgICAgICAgICA/IHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5zcGluRWxlbWVudCwgJ2Qtbm9uZScpXG4gICAgICAgICAgICA6IHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5zcGluRWxlbWVudCwgJ2Qtbm9uZScpO1xuICAgICAgICB9KTtcbiAgfVxufVxuIl19