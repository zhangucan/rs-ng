/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input, ViewChild } from '@angular/core';
import { CommonsUtils, DataItemUtils } from '@er/utils';
import { BehaviorSubject } from 'rxjs';
import { ApiDataDirective } from '../directives/api-data/directive';
import { LogUtils } from '../utils/log';
import { ControlWrapperComponent } from './control-wrapper';
/**
 * @template T
 */
var DataAwareControlWrapperComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DataAwareControlWrapperComponent, _super);
    function DataAwareControlWrapperComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.data$ = new BehaviorSubject(undefined);
        return _this;
    }
    Object.defineProperty(DataAwareControlWrapperComponent.prototype, "apiDataProps", {
        get: /**
         * @return {?}
         */
        function () {
            return this._apiDataProps || {};
        },
        set: /**
         * @param {?} props
         * @return {?}
         */
        function (props) {
            this._apiDataProps = props;
            if (this._apiDataProps && !this._apiDataProps.data$) {
                this._apiDataProps.data$ = this.data$;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DataAwareControlWrapperComponent.prototype.onPropsInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.onPropsInit.call(this);
        this.initLocalDataItem();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DataAwareControlWrapperComponent.prototype.parseValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        try {
            if (value && this.$props.$ext.dataItemProps && !CommonsUtils.isString(value)) {
                return DataItemUtils.getItemValue(value, this.$props.$ext.dataItemProps.valueKey);
            }
            return value;
        }
        catch (e) {
            LogUtils.error(this, '数据解析错误', e);
            return undefined;
        }
    };
    /**
     * @param {?} model
     * @return {?}
     */
    DataAwareControlWrapperComponent.prototype.formatModel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        try {
            if (CommonsUtils.isJson(model) && this.$props.$ext.dataItemProps) {
                return DataItemUtils.getItemLabel(model, this.$props.$ext.dataItemProps.labelKey);
            }
            return model;
        }
        catch (e) {
            LogUtils.error(this, '数据解析错误', e);
            return undefined;
        }
    };
    /**
     * @return {?}
     */
    DataAwareControlWrapperComponent.prototype.initLocalDataItem = /**
     * @return {?}
     */
    function () {
        if (this.$props.$ext && this.$props.$ext.dataItems) {
            /** @type {?} */
            var data = this.$props.$ext.dataItems;
            data = data.map(function (d) { return d['data'] = d; });
            this.data$.next(data);
        }
    };
    DataAwareControlWrapperComponent.propDecorators = {
        apiData: [{ type: ViewChild, args: [ApiDataDirective,] }],
        apiDataProps: [{ type: Input }]
    };
    return DataAwareControlWrapperComponent;
}(ControlWrapperComponent));
export { DataAwareControlWrapperComponent };
if (false) {
    /** @type {?} */
    DataAwareControlWrapperComponent.prototype.data$;
    /** @type {?} */
    DataAwareControlWrapperComponent.prototype.apiData;
    /**
     * @type {?}
     * @private
     */
    DataAwareControlWrapperComponent.prototype._apiDataProps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1hd2FyZS1jb250cm9sLXdyYXBwZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9iYXNlcy9kYXRhLWF3YXJlLWNvbnRyb2wtd3JhcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxLQUFLLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRS9DLE9BQU8sRUFBQyxZQUFZLEVBQUUsYUFBYSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3RELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDckMsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sa0NBQWtDLENBQUM7QUFDbEUsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN0QyxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7OztBQUUxRDtJQUFpRyw0REFBMEI7SUFBM0g7UUFBQSxxRUF1REM7UUFyRFEsV0FBSyxHQUF5QixJQUFJLGVBQWUsQ0FBTSxTQUFTLENBQUMsQ0FBQzs7SUFxRDNFLENBQUM7SUEvQ0Msc0JBQWEsMERBQVk7Ozs7UUFBekI7WUFDRSxPQUFPLElBQUksQ0FBQyxhQUFhLElBQUksRUFBRSxDQUFDO1FBQ2xDLENBQUM7Ozs7O1FBRUQsVUFBaUIsS0FBbUI7WUFDbEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7WUFDM0IsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUU7Z0JBQ25ELElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDdkM7UUFDSCxDQUFDOzs7T0FQQTs7OztJQVNELHNEQUFXOzs7SUFBWDtRQUNFLGlCQUFNLFdBQVcsV0FBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBRUQscURBQVU7Ozs7SUFBVixVQUFXLEtBQUs7UUFDZCxJQUFJO1lBQ0YsSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDNUUsT0FBTyxhQUFhLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDbkY7WUFDRCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDbEMsT0FBTyxTQUFTLENBQUM7U0FDbEI7SUFDSCxDQUFDOzs7OztJQUVELHNEQUFXOzs7O0lBQVgsVUFBWSxLQUFLO1FBQ2YsSUFBSTtZQUNGLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUU7Z0JBQ2hFLE9BQU8sYUFBYSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ25GO1lBQ0QsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQzs7OztJQUVELDREQUFpQjs7O0lBQWpCO1FBQ0UsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7O2dCQUM5QyxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUztZQUMzQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQWIsQ0FBYSxDQUFDLENBQUM7WUFDcEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdkI7SUFDSCxDQUFDOzswQkFsREEsU0FBUyxTQUFDLGdCQUFnQjsrQkFJMUIsS0FBSzs7SUErQ1IsdUNBQUM7Q0FBQSxBQXZERCxDQUFpRyx1QkFBdUIsR0F1RHZIO1NBdkRZLGdDQUFnQzs7O0lBRTNDLGlEQUF5RTs7SUFFekUsbURBQXVEOzs7OztJQUV2RCx5REFBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lucHV0LCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBcGlEYXRhUHJvcHMsIERhdGFBd2FyZVByb3BzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb21tb25zVXRpbHMsIERhdGFJdGVtVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0FwaURhdGFEaXJlY3RpdmV9IGZyb20gJy4uL2RpcmVjdGl2ZXMvYXBpLWRhdGEvZGlyZWN0aXZlJztcbmltcG9ydCB7TG9nVXRpbHN9IGZyb20gJy4uL3V0aWxzL2xvZyc7XG5pbXBvcnQge0NvbnRyb2xXcmFwcGVyQ29tcG9uZW50fSBmcm9tICcuL2NvbnRyb2wtd3JhcHBlcic7XG5cbmV4cG9ydCBjbGFzcyBEYXRhQXdhcmVDb250cm9sV3JhcHBlckNvbXBvbmVudDxUIGV4dGVuZHMgRGF0YUF3YXJlUHJvcHMgPSBEYXRhQXdhcmVQcm9wcz4gZXh0ZW5kcyBDb250cm9sV3JhcHBlckNvbXBvbmVudDxUPiB7XG5cbiAgcHVibGljIGRhdGEkOiBCZWhhdmlvclN1YmplY3Q8YW55PiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8YW55Pih1bmRlZmluZWQpO1xuXG4gIEBWaWV3Q2hpbGQoQXBpRGF0YURpcmVjdGl2ZSkgYXBpRGF0YTogQXBpRGF0YURpcmVjdGl2ZTtcblxuICBwcml2YXRlIF9hcGlEYXRhUHJvcHM6IEFwaURhdGFQcm9wcztcblxuICBASW5wdXQoKSBnZXQgYXBpRGF0YVByb3BzKCkge1xuICAgIHJldHVybiB0aGlzLl9hcGlEYXRhUHJvcHMgfHwge307XG4gIH1cblxuICBzZXQgYXBpRGF0YVByb3BzKHByb3BzOiBBcGlEYXRhUHJvcHMpIHtcbiAgICB0aGlzLl9hcGlEYXRhUHJvcHMgPSBwcm9wcztcbiAgICBpZiAodGhpcy5fYXBpRGF0YVByb3BzICYmICF0aGlzLl9hcGlEYXRhUHJvcHMuZGF0YSQpIHtcbiAgICAgIHRoaXMuX2FwaURhdGFQcm9wcy5kYXRhJCA9IHRoaXMuZGF0YSQ7XG4gICAgfVxuICB9XG5cbiAgb25Qcm9wc0luaXQoKSB7XG4gICAgc3VwZXIub25Qcm9wc0luaXQoKTtcbiAgICB0aGlzLmluaXRMb2NhbERhdGFJdGVtKCk7XG4gIH1cblxuICBwYXJzZVZhbHVlKHZhbHVlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh2YWx1ZSAmJiB0aGlzLiRwcm9wcy4kZXh0LmRhdGFJdGVtUHJvcHMgJiYgIUNvbW1vbnNVdGlscy5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIERhdGFJdGVtVXRpbHMuZ2V0SXRlbVZhbHVlKHZhbHVlLCB0aGlzLiRwcm9wcy4kZXh0LmRhdGFJdGVtUHJvcHMudmFsdWVLZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIExvZ1V0aWxzLmVycm9yKHRoaXMsICfmlbDmja7op6PmnpDplJnor68nLCBlKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgZm9ybWF0TW9kZWwobW9kZWwpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKENvbW1vbnNVdGlscy5pc0pzb24obW9kZWwpICYmIHRoaXMuJHByb3BzLiRleHQuZGF0YUl0ZW1Qcm9wcykge1xuICAgICAgICByZXR1cm4gRGF0YUl0ZW1VdGlscy5nZXRJdGVtTGFiZWwobW9kZWwsIHRoaXMuJHByb3BzLiRleHQuZGF0YUl0ZW1Qcm9wcy5sYWJlbEtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbW9kZWw7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgTG9nVXRpbHMuZXJyb3IodGhpcywgJ+aVsOaNruino+aekOmUmeivrycsIGUpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBpbml0TG9jYWxEYXRhSXRlbSgpIHtcbiAgICBpZiAodGhpcy4kcHJvcHMuJGV4dCAmJiB0aGlzLiRwcm9wcy4kZXh0LmRhdGFJdGVtcykge1xuICAgICAgbGV0IGRhdGE6IHt9W10gPSB0aGlzLiRwcm9wcy4kZXh0LmRhdGFJdGVtcztcbiAgICAgIGRhdGEgPSBkYXRhLm1hcChkID0+IGRbJ2RhdGEnXSA9IGQpO1xuICAgICAgdGhpcy5kYXRhJC5uZXh0KGRhdGEpO1xuICAgIH1cbiAgfVxufVxuIl19