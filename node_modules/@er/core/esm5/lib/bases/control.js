/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HostBinding, Input } from '@angular/core';
import { NO_OP } from '@er/types';
import { BehaviorSubject } from 'rxjs';
import { BaseComponent } from './component';
var ControlComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ControlComponent, _super);
    function ControlComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.disabled = false;
        _this.disabled$ = new BehaviorSubject(false);
        _this.onTouched = NO_OP;
        _this.onChange = NO_OP;
        return _this;
    }
    Object.defineProperty(ControlComponent.prototype, "opacity", {
        get: /**
         * @return {?}
         */
        function () {
            return this.disabled ? 0.25 : 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlComponent.prototype, "cursor", {
        get: /**
         * @return {?}
         */
        function () {
            return this.disabled ? 'not-allowed' : 'default';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.innerValue;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!value || value !== this.innerValue) {
                /** @type {?} */
                var v = this.parser ? this.parser(value) : value;
                this.innerValue = v;
                this.onChange(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.defaultValue) {
            this.innerValue = this.defaultValue;
        }
    };
    /**
     * @return {?}
     */
    ControlComponent.prototype.updateTouch = /**
     * @return {?}
     */
    function () {
        this.onTouched();
    };
    /**
     * @param {?} model
     * @return {?}
     */
    ControlComponent.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        /** @type {?} */
        var v = this.formatter ? this.formatter(model) : model;
        if (v !== this.innerValue) {
            this.innerValue = v;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ControlComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ControlComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    ControlComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
        this.disabled$.next(isDisabled);
    };
    ControlComponent.propDecorators = {
        parser: [{ type: Input }],
        formatter: [{ type: Input }],
        disabled: [{ type: Input }],
        opacity: [{ type: HostBinding, args: ['style.opacity',] }],
        cursor: [{ type: HostBinding, args: ['style.cursor',] }]
    };
    return ControlComponent;
}(BaseComponent));
export { ControlComponent };
if (false) {
    /** @type {?} */
    ControlComponent.prototype.parser;
    /** @type {?} */
    ControlComponent.prototype.formatter;
    /** @type {?} */
    ControlComponent.prototype.disabled;
    /** @type {?} */
    ControlComponent.prototype.defaultValue;
    /** @type {?} */
    ControlComponent.prototype.disabled$;
    /** @type {?} */
    ControlComponent.prototype.onTouched;
    /** @type {?} */
    ControlComponent.prototype.onChange;
    /**
     * @type {?}
     * @protected
     */
    ControlComponent.prototype.innerValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL2Jhc2VzL2NvbnRyb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsV0FBVyxFQUFFLEtBQUssRUFBUyxNQUFNLGVBQWUsQ0FBQztBQUV6RCxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDckMsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUcxQztJQUFzQyw0Q0FBYTtJQUFuRDtRQUFBLHFFQW9FQztRQTlEVSxjQUFRLEdBQUcsS0FBSyxDQUFDO1FBSTFCLGVBQVMsR0FBNkIsSUFBSSxlQUFlLENBQVUsS0FBSyxDQUFDLENBQUM7UUFFMUUsZUFBUyxHQUFlLEtBQUssQ0FBQztRQUM5QixjQUFRLEdBQXFCLEtBQUssQ0FBQzs7SUF1RHJDLENBQUM7SUFuREMsc0JBQ0kscUNBQU87Ozs7UUFEWDtZQUVFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsQ0FBQzs7O09BQUE7SUFFRCxzQkFDSSxvQ0FBTTs7OztRQURWO1lBRUUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNuRCxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLG1DQUFLOzs7O1FBQVQ7WUFDRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDekIsQ0FBQzs7Ozs7UUFFRCxVQUFVLEtBQVU7WUFDbEIsSUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLFVBQVUsRUFBRTs7b0JBQ2pDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLO2dCQUNsRCxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNsQjtRQUNILENBQUM7OztPQVJBOzs7O0lBVUQsbUNBQVE7OztJQUFSO1FBQ0UsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztTQUNyQztJQUNILENBQUM7Ozs7SUFFRCxzQ0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDbkIsQ0FBQzs7Ozs7SUFFRCxxQ0FBVTs7OztJQUFWLFVBQVcsS0FBVTs7WUFDYixDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSztRQUN4RCxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQzs7Ozs7SUFFRCwyQ0FBZ0I7Ozs7SUFBaEIsVUFBaUIsRUFBTztRQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7OztJQUVELDRDQUFpQjs7OztJQUFqQixVQUFrQixFQUFPO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBRUQsMkNBQWdCOzs7O0lBQWhCLFVBQWlCLFVBQW1CO1FBQ2xDLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7O3lCQWpFQSxLQUFLOzRCQUVMLEtBQUs7MkJBRUwsS0FBSzswQkFXTCxXQUFXLFNBQUMsZUFBZTt5QkFLM0IsV0FBVyxTQUFDLGNBQWM7O0lBOEM3Qix1QkFBQztDQUFBLEFBcEVELENBQXNDLGFBQWEsR0FvRWxEO1NBcEVZLGdCQUFnQjs7O0lBRTNCLGtDQUFnQzs7SUFFaEMscUNBQW1DOztJQUVuQyxvQ0FBMEI7O0lBRTFCLHdDQUFrQjs7SUFFbEIscUNBQTBFOztJQUUxRSxxQ0FBOEI7O0lBQzlCLG9DQUFtQzs7Ozs7SUFFbkMsc0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtIb3N0QmluZGluZywgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0NvbnRyb2xWYWx1ZUFjY2Vzc29yfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge05PX09QfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtCYXNlQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudCc7XG5cblxuZXhwb3J0IGNsYXNzIENvbnRyb2xDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG5cbiAgQElucHV0KCkgcGFyc2VyOiAodmFsdWUpID0+IGFueTtcblxuICBASW5wdXQoKSBmb3JtYXR0ZXI6IChtb2RlbCkgPT4gYW55O1xuXG4gIEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgZGVmYXVsdFZhbHVlOiBhbnk7XG5cbiAgZGlzYWJsZWQkOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KGZhbHNlKTtcblxuICBvblRvdWNoZWQ6ICgpID0+IHZvaWQgPSBOT19PUDtcbiAgb25DaGFuZ2U6IChfOiBhbnkpID0+IHZvaWQgPSBOT19PUDtcblxuICBwcm90ZWN0ZWQgaW5uZXJWYWx1ZTogYW55O1xuXG4gIEBIb3N0QmluZGluZygnc3R5bGUub3BhY2l0eScpXG4gIGdldCBvcGFjaXR5KCkge1xuICAgIHJldHVybiB0aGlzLmRpc2FibGVkID8gMC4yNSA6IDE7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLmN1cnNvcicpXG4gIGdldCBjdXJzb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzYWJsZWQgPyAnbm90LWFsbG93ZWQnIDogJ2RlZmF1bHQnO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuaW5uZXJWYWx1ZTtcbiAgfVxuXG4gIHNldCB2YWx1ZSh2YWx1ZTogYW55KSB7XG4gICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZSAhPT0gdGhpcy5pbm5lclZhbHVlKSB7XG4gICAgICBjb25zdCB2ID0gdGhpcy5wYXJzZXIgPyB0aGlzLnBhcnNlcih2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgIHRoaXMuaW5uZXJWYWx1ZSA9IHY7XG4gICAgICB0aGlzLm9uQ2hhbmdlKHYpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLmRlZmF1bHRWYWx1ZSkge1xuICAgICAgdGhpcy5pbm5lclZhbHVlID0gdGhpcy5kZWZhdWx0VmFsdWU7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlVG91Y2goKSB7XG4gICAgdGhpcy5vblRvdWNoZWQoKTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUobW9kZWw6IGFueSkge1xuICAgIGNvbnN0IHYgPSB0aGlzLmZvcm1hdHRlciA/IHRoaXMuZm9ybWF0dGVyKG1vZGVsKSA6IG1vZGVsO1xuICAgIGlmICh2ICE9PSB0aGlzLmlubmVyVmFsdWUpIHtcbiAgICAgIHRoaXMuaW5uZXJWYWx1ZSA9IHY7XG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KSB7XG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSkge1xuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XG4gIH1cblxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcbiAgICB0aGlzLmRpc2FibGVkJC5uZXh0KGlzRGlzYWJsZWQpO1xuICB9XG59XG4iXX0=