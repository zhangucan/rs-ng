/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter } from '@angular/core';
import { Unsubscribe } from './unsubscribe';
/**
 * provide event emit support
 * @abstract
 */
var /**
 * provide event emit support
 * @abstract
 */
BaseDirective = /** @class */ (function (_super) {
    tslib_1.__extends(BaseDirective, _super);
    function BaseDirective() {
        var _this = _super.call(this) || this;
        _this.animations = {};
        _this.ctx = {
            $from: (/** @type {?} */ (_this))
        };
        return _this;
    }
    /**
     * @return {?}
     */
    BaseDirective.prototype.getContext = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var id;
        if (!this['$id'] && this['$props'] && this['$props'].$id) {
            id = this['$props'].$id;
            this['$id'] = id;
        }
        /** @type {?} */
        var context = {
            $from: (/** @type {?} */ (this))
        };
        return id ? tslib_1.__assign({ $id: id }, context) : context;
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    BaseDirective.prototype.getEventContext = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        return tslib_1.__assign({}, this.getContext(), event || {});
    };
    /**
     * @param {?} eventName
     * @param {?} event
     * @return {?}
     */
    BaseDirective.prototype.emitEvent = /**
     * @param {?} eventName
     * @param {?} event
     * @return {?}
     */
    function (eventName, event) {
        /** @type {?} */
        var eventEmitter = this[eventName];
        if (!eventEmitter) {
            eventEmitter = new EventEmitter();
            this[eventName] = eventEmitter;
        }
        if (eventEmitter instanceof EventEmitter) {
            return eventEmitter.emit(this.getEventContext(event));
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    BaseDirective.prototype.isFirstChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        return Object.keys(changes).every(function (prop) { return changes[prop].isFirstChange(); });
    };
    /**
     * @param {?=} name
     * @return {?}
     */
    BaseDirective.prototype.animate = /**
     * @param {?=} name
     * @return {?}
     */
    function (name) {
        return !(this.animations[name] || false);
    };
    return BaseDirective;
}(Unsubscribe));
/**
 * provide event emit support
 * @abstract
 */
export { BaseDirective };
if (false) {
    /** @type {?} */
    BaseDirective.prototype.ctx;
    /** @type {?} */
    BaseDirective.prototype.animations;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvYmFzZXMvZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDOzs7OztBQUsxQzs7Ozs7SUFBNEMseUNBQVc7SUFNckQ7UUFBQSxZQUNFLGlCQUFPLFNBSVI7UUFQTSxnQkFBVSxHQUFHLEVBQUUsQ0FBQztRQUlyQixLQUFJLENBQUMsR0FBRyxHQUFHO1lBQ1QsS0FBSyxFQUFFLG1CQUFLLEtBQUksRUFBQTtTQUNqQixDQUFDOztJQUNKLENBQUM7Ozs7SUFFRCxrQ0FBVTs7O0lBQVY7O1lBQ00sRUFBRTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEVBQUU7WUFDeEQsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUNsQjs7WUFDSyxPQUFPLEdBQUc7WUFDZCxLQUFLLEVBQUUsbUJBQUssSUFBSSxFQUFBO1NBQ2pCO1FBQ0QsT0FBTyxFQUFFLENBQUMsQ0FBQyxvQkFBRSxHQUFHLEVBQUUsRUFBRSxJQUFLLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQzlDLENBQUM7Ozs7O0lBRUQsdUNBQWU7Ozs7SUFBZixVQUFnQixLQUFNO1FBQ3BCLDRCQUNLLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFDakIsS0FBSyxJQUFJLEVBQUUsRUFDZDtJQUNKLENBQUM7Ozs7OztJQUVELGlDQUFTOzs7OztJQUFULFVBQVUsU0FBUyxFQUFFLEtBQUs7O1lBQ3BCLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDakIsWUFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7WUFDbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLFlBQVksQ0FBQztTQUNoQztRQUNELElBQUksWUFBWSxZQUFZLFlBQVksRUFBRTtZQUN4QyxPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ3ZEO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxzQ0FBYzs7OztJQUFkLFVBQWUsT0FBTztRQUNwQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsRUFBRSxFQUE3QixDQUE2QixDQUFDLENBQUM7SUFDM0UsQ0FBQzs7Ozs7SUFFRCwrQkFBTzs7OztJQUFQLFVBQVEsSUFBYTtRQUNuQixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFDSCxvQkFBQztBQUFELENBQUMsQUFsREQsQ0FBNEMsV0FBVyxHQWtEdEQ7Ozs7Ozs7O0lBaERDLDRCQUFlOztJQUVmLG1DQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RXZlbnRFbWl0dGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VW5zdWJzY3JpYmV9IGZyb20gJy4vdW5zdWJzY3JpYmUnO1xuXG4vKipcbiAqIHByb3ZpZGUgZXZlbnQgZW1pdCBzdXBwb3J0XG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlRGlyZWN0aXZlIGV4dGVuZHMgVW5zdWJzY3JpYmUge1xuXG4gIHB1YmxpYyBjdHg6IHt9O1xuXG4gIHB1YmxpYyBhbmltYXRpb25zID0ge307XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmN0eCA9IHtcbiAgICAgICRmcm9tOiA8YW55PnRoaXNcbiAgICB9O1xuICB9XG5cbiAgZ2V0Q29udGV4dCgpIHtcbiAgICBsZXQgaWQ7XG4gICAgaWYgKCF0aGlzWyckaWQnXSAmJiB0aGlzWyckcHJvcHMnXSAmJiB0aGlzWyckcHJvcHMnXS4kaWQpIHtcbiAgICAgIGlkID0gdGhpc1snJHByb3BzJ10uJGlkO1xuICAgICAgdGhpc1snJGlkJ10gPSBpZDtcbiAgICB9XG4gICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgICRmcm9tOiA8YW55PnRoaXNcbiAgICB9O1xuICAgIHJldHVybiBpZCA/IHskaWQ6IGlkLCAuLi5jb250ZXh0fSA6IGNvbnRleHQ7XG4gIH1cblxuICBnZXRFdmVudENvbnRleHQoZXZlbnQ/KToge30ge1xuICAgIHJldHVybiB7XG4gICAgICAuLi50aGlzLmdldENvbnRleHQoKSxcbiAgICAgIC4uLmV2ZW50IHx8IHt9XG4gICAgfTtcbiAgfVxuXG4gIGVtaXRFdmVudChldmVudE5hbWUsIGV2ZW50KSB7XG4gICAgbGV0IGV2ZW50RW1pdHRlciA9IHRoaXNbZXZlbnROYW1lXTtcbiAgICBpZiAoIWV2ZW50RW1pdHRlcikge1xuICAgICAgZXZlbnRFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgdGhpc1tldmVudE5hbWVdID0gZXZlbnRFbWl0dGVyO1xuICAgIH1cbiAgICBpZiAoZXZlbnRFbWl0dGVyIGluc3RhbmNlb2YgRXZlbnRFbWl0dGVyKSB7XG4gICAgICByZXR1cm4gZXZlbnRFbWl0dGVyLmVtaXQodGhpcy5nZXRFdmVudENvbnRleHQoZXZlbnQpKTtcbiAgICB9XG4gIH1cblxuICBpc0ZpcnN0Q2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGNoYW5nZXMpLmV2ZXJ5KHByb3AgPT4gY2hhbmdlc1twcm9wXS5pc0ZpcnN0Q2hhbmdlKCkpO1xuICB9XG5cbiAgYW5pbWF0ZShuYW1lPzogc3RyaW5nKSB7XG4gICAgcmV0dXJuICEodGhpcy5hbmltYXRpb25zW25hbWVdIHx8IGZhbHNlKTtcbiAgfVxufVxuIl19