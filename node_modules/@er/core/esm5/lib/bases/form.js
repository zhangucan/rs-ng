/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { CommonsUtils, DialogUtils } from '@er/utils';
import { Observable } from 'rxjs';
import { first } from 'rxjs/operators';
import { ApiUtils } from '../utils/api';
import { BaseComponent } from './component';
/**
 * @abstract
 */
var BaseFormComponent = /** @class */ (function (_super) {
    tslib_1.__extends(BaseFormComponent, _super);
    function BaseFormComponent(cd) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.options = {};
        _this.buttonsStyleClass = 'text-center my-5';
        _this.submitBtnStyleClass = 'btn btn-success';
        _this.resetBtnStyleClass = 'btn btn-danger';
        _this.initBtnStyleClass = 'btn btn-alert';
        _this.onSubmit = new EventEmitter();
        _this.onSubmitted = new EventEmitter();
        _this.onModel = new EventEmitter();
        _this.onFormValueChanges = new EventEmitter();
        _this.form = new FormGroup({});
        _this.templateNames = {
            header: 'header',
            buttons: 'buttons',
            footer: 'footer'
        };
        _this.runtimeData = {};
        _this.hasUpdated = false;
        return _this;
    }
    Object.defineProperty(BaseFormComponent.prototype, "model", {
        get: /**
         * @return {?}
         */
        function () {
            return this._model;
        },
        set: /**
         * @param {?} model
         * @return {?}
         */
        function (model) {
            this._model = CommonsUtils.omitBy(model, CommonsUtils.lodash().isUndefined);
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        this.$subscriptions = this.form.valueChanges.subscribe(function (event) { return _this.onFormValueChanges.emit(event); });
    };
    Object.defineProperty(BaseFormComponent.prototype, "modelId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._modelId;
        },
        set: /**
         * @param {?} modelId
         * @return {?}
         */
        function (modelId) {
            var _this = this;
            if (modelId !== this.modelId) {
                this._modelId = modelId;
                if (!modelId || modelId === '') {
                    this.resetModel();
                }
                else if (this.apiEntry) {
                    ApiUtils.getById(this.apiEntry, modelId, this.getModelOptions)
                        .subscribe(function (result) {
                        _this.model = result;
                        _this.form.updateValueAndValidity({ onlySelf: false, emitEvent: true });
                    });
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFormComponent.prototype, "isFormValid", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.hasUpdated) {
                this.updateControls();
            }
            return this.form.valid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFormComponent.prototype, "httpTag", {
        get: /**
         * @return {?}
         */
        function () {
            return "http" + ('-' + this.formId || '');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFormComponent.prototype, "formId", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFormComponent.prototype, "submitModel", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var model = tslib_1.__assign({}, this.model);
            if (this.submitRootKey) {
                model = this.model[this.submitRootKey];
            }
            if (this.submitExcludeKeys) {
                model = CommonsUtils.removeKeys.apply(CommonsUtils, tslib_1.__spread([model], CommonsUtils.getArrayValue(this.submitExcludeKeys)));
            }
            Object.keys(model).forEach(function (key) {
                if (key.startsWith('$_')) {
                    delete model[key];
                }
            });
            return model;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fieldName
     * @return {?}
     */
    BaseFormComponent.prototype.formControl = /**
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        return this.form.controls[fieldName];
    };
    /**
     * @param {?} fieldName
     * @return {?}
     */
    BaseFormComponent.prototype.fieldComponent = /**
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        return this.form['components'][fieldName];
    };
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.getFormErrorFields = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var errors = [];
        Object.keys(this.form.controls).forEach(function (key) {
            /** @type {?} */
            var controlErrors = _this.form.get(key).errors;
            if (controlErrors != null) {
                Object.keys(controlErrors).forEach(function (keyError) {
                    errors.push(key); // + ', err value: ', controlErrors[keyError]);
                });
            }
        });
        return errors;
    };
    /**
     * @param {?} model
     * @return {?}
     */
    BaseFormComponent.prototype.patchModel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        this.model = Object.assign({}, this.model || {}, model);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BaseFormComponent.prototype.patchRuntimeData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        Object.assign(this.runtimeData, data);
    };
    /**
     * @param {?} path
     * @return {?}
     */
    BaseFormComponent.prototype.isFieldValid = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var field = this.field(path);
        if (field) {
            return field.valid;
        }
        else {
            return undefined;
        }
    };
    /**
     * @param {?} fieldNamePath
     * @return {?}
     */
    BaseFormComponent.prototype.isFieldTouched = /**
     * @param {?} fieldNamePath
     * @return {?}
     */
    function (fieldNamePath) {
        /** @type {?} */
        var field = this.field(fieldNamePath);
        if (field) {
            return field.touched;
        }
        else {
            return undefined;
        }
    };
    /**
     * @param {?=} form
     * @return {?}
     */
    BaseFormComponent.prototype.updateControls = /**
     * @param {?=} form
     * @return {?}
     */
    function (form) {
        var _this = this;
        if (!form) {
            form = this.form;
        }
        Object.keys(form.controls).forEach(function (field) {
            /** @type {?} */
            var control = form.get(field);
            if (control instanceof FormControl) {
                control.markAsTouched({ onlySelf: true });
                // control.updateValueAndValidity({onlySelf: true});
            }
            else if (control instanceof FormGroup) {
                _this.updateControls(control);
            }
        });
        this.hasUpdated = true;
    };
    /**
     * @param {?} path
     * @return {?}
     */
    BaseFormComponent.prototype.field = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        return this.form.get(path);
    };
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.resetForm = /**
     * @return {?}
     */
    function () {
        this.form.reset({});
    };
    /**
     * @param {?=} reset
     * @return {?}
     */
    BaseFormComponent.prototype.resetModel = /**
     * @param {?=} reset
     * @return {?}
     */
    function (reset) {
        if (this.initModel) {
            this.model = CommonsUtils.copy(this.initModel);
        }
        else if (CommonsUtils.isJson(reset)) {
            this.model = tslib_1.__assign({}, reset);
        }
        else if (this.options['resetModel']) {
            this.options['resetModel']();
        }
        else {
            this.model = {};
        }
        this.form.reset(this.model, { emitEvent: true });
    };
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.setInitModel = /**
     * @return {?}
     */
    function () {
        this.initModel = CommonsUtils.copy(this.model);
        if (this.options['updateInitialValue']) {
            this.options['updateInitialValue']();
        }
    };
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.refresh = /**
     * @return {?}
     */
    function () {
        this.cd.detectChanges();
    };
    /**
     * @return {?}
     */
    BaseFormComponent.prototype.submit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.isFormValid) {
            DialogUtils.error('操作失败', '请填写完整信息后，再执行本操作！');
            return;
        }
        /** @type {?} */
        var result;
        if (this.beforeSubmit) {
            result = this.beforeSubmit(this.getEventContext());
            if (result instanceof Observable) {
                ((/** @type {?} */ (result)))
                    .pipe(first())
                    .subscribe(function (data) {
                    _this.submitAfterBefore(data);
                });
            }
            else {
                this.submitAfterBefore(result);
            }
        }
        else {
            this.doSubmit();
        }
    };
    /**
     * @param {?=} submitModel
     * @return {?}
     */
    BaseFormComponent.prototype.defaultSubmit = /**
     * @param {?=} submitModel
     * @return {?}
     */
    function (submitModel) {
        var _this = this;
        this.$subscriptions = ApiUtils.save.call(this, this.apiEntry, submitModel || this.submitModel, tslib_1.__assign({ tag: this.formId }, this.submitOptions || {}))
            .subscribe(function (data) {
            if (data.id && data.id !== _this.model['id']) {
                _this.model['id'] = data.id;
            }
            _this.onSubmitted.emit(_this.getEventContext({ response: data, model: _this.model, submitted: submitModel || _this.submitModel }));
            if (_this.afterSubmit) {
                /** @type {?} */
                var result = _this.afterSubmit(_this.getEventContext({ submitModel: submitModel || _this.submitModel, id: data.id }));
                if (result instanceof Observable) {
                    ((/** @type {?} */ (result)))
                        .pipe(first())
                        .subscribe(function (dat) {
                        _this.doPostSubmit(dat);
                    });
                }
                else {
                    _this.doPostSubmit(result);
                }
            }
            else {
                _this.doPostSubmit();
            }
        });
    };
    /**
     * @param {?=} other
     * @return {?}
     */
    BaseFormComponent.prototype.getEventContext = /**
     * @param {?=} other
     * @return {?}
     */
    function (other) {
        return (tslib_1.__assign({ formlyForm: this, form: (/** @type {?} */ (this.form)), model: this.model, modelId: this.modelId, entry: this.apiEntry, entity: (/** @type {?} */ (this.entity)) }, other || {}));
    };
    /**
     * @private
     * @param {?} result
     * @return {?}
     */
    BaseFormComponent.prototype.submitAfterBefore = /**
     * @private
     * @param {?} result
     * @return {?}
     */
    function (result) {
        if (result !== false) {
            if (CommonsUtils.isJson(result) && !CommonsUtils.isEmpty(result)) {
                this.doSubmit(result);
            }
            else {
                this.doSubmit();
            }
        }
    };
    /**
     * @private
     * @param {?=} submitModel
     * @return {?}
     */
    BaseFormComponent.prototype.doSubmit = /**
     * @private
     * @param {?=} submitModel
     * @return {?}
     */
    function (submitModel) {
        if (this.onSubmit.observers.length > 0) {
            this.onSubmit.emit(this.getEventContext({ submitModel: submitModel }));
        }
        else {
            this.defaultSubmit(submitModel);
        }
    };
    /**
     * @private
     * @param {?=} model
     * @return {?}
     */
    BaseFormComponent.prototype.doPostSubmit = /**
     * @private
     * @param {?=} model
     * @return {?}
     */
    function (model) {
        var _this = this;
        if (model) {
            this.resetModel(model);
        }
        else if (this.resetKeys) {
            /** @type {?} */
            var keys = CommonsUtils.getArrayValue(this.resetKeys);
            keys.forEach(function (key) { return delete _this.model[key]; });
            delete this.model['id'];
            this.form.reset(this.model, { emitEvent: true });
        }
        else if (this.resetAfterSubmit !== false) {
            this.resetModel(this.entity && this.entity.initValue || {});
        }
    };
    BaseFormComponent.propDecorators = {
        $id: [{ type: Input }],
        entity: [{ type: Input }],
        apiEntry: [{ type: Input }],
        options: [{ type: Input }],
        submitRootKey: [{ type: Input }],
        submitExcludeKeys: [{ type: Input }],
        resetKeys: [{ type: Input }],
        styleClass: [{ type: Input }],
        style: [{ type: Input }],
        formStyleClass: [{ type: Input }],
        formStyle: [{ type: Input }],
        buttonsStyleClass: [{ type: Input }],
        submitBtnStyleClass: [{ type: Input }],
        resetBtnStyleClass: [{ type: Input }],
        initBtnStyleClass: [{ type: Input }],
        header: [{ type: Input }],
        footer: [{ type: Input }],
        buttons: [{ type: Input }],
        getModelOptions: [{ type: Input }],
        submitOptions: [{ type: Input }],
        beforeSubmit: [{ type: Input }],
        afterSubmit: [{ type: Input }],
        valueChanges: [{ type: Input }],
        resetAfterSubmit: [{ type: Input }],
        onSubmit: [{ type: Output }],
        onSubmitted: [{ type: Output }],
        onModel: [{ type: Output }],
        onFormValueChanges: [{ type: Output }],
        model: [{ type: Input }],
        modelId: [{ type: Input }]
    };
    return BaseFormComponent;
}(BaseComponent));
export { BaseFormComponent };
if (false) {
    /** @type {?} */
    BaseFormComponent.prototype.$id;
    /** @type {?} */
    BaseFormComponent.prototype.entity;
    /** @type {?} */
    BaseFormComponent.prototype.apiEntry;
    /** @type {?} */
    BaseFormComponent.prototype.options;
    /** @type {?} */
    BaseFormComponent.prototype.submitRootKey;
    /** @type {?} */
    BaseFormComponent.prototype.submitExcludeKeys;
    /** @type {?} */
    BaseFormComponent.prototype.resetKeys;
    /** @type {?} */
    BaseFormComponent.prototype.styleClass;
    /** @type {?} */
    BaseFormComponent.prototype.style;
    /** @type {?} */
    BaseFormComponent.prototype.formStyleClass;
    /** @type {?} */
    BaseFormComponent.prototype.formStyle;
    /** @type {?} */
    BaseFormComponent.prototype.buttonsStyleClass;
    /** @type {?} */
    BaseFormComponent.prototype.submitBtnStyleClass;
    /** @type {?} */
    BaseFormComponent.prototype.resetBtnStyleClass;
    /** @type {?} */
    BaseFormComponent.prototype.initBtnStyleClass;
    /** @type {?} */
    BaseFormComponent.prototype.header;
    /** @type {?} */
    BaseFormComponent.prototype.footer;
    /** @type {?} */
    BaseFormComponent.prototype.buttons;
    /** @type {?} */
    BaseFormComponent.prototype.getModelOptions;
    /** @type {?} */
    BaseFormComponent.prototype.submitOptions;
    /** @type {?} */
    BaseFormComponent.prototype.beforeSubmit;
    /** @type {?} */
    BaseFormComponent.prototype.afterSubmit;
    /** @type {?} */
    BaseFormComponent.prototype.valueChanges;
    /** @type {?} */
    BaseFormComponent.prototype.resetAfterSubmit;
    /** @type {?} */
    BaseFormComponent.prototype.onSubmit;
    /** @type {?} */
    BaseFormComponent.prototype.onSubmitted;
    /** @type {?} */
    BaseFormComponent.prototype.onModel;
    /** @type {?} */
    BaseFormComponent.prototype.onFormValueChanges;
    /** @type {?} */
    BaseFormComponent.prototype.form;
    /** @type {?} */
    BaseFormComponent.prototype.templateNames;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.initModel;
    /** @type {?} */
    BaseFormComponent.prototype.runtimeData;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype.hasUpdated;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype._model;
    /**
     * @type {?}
     * @private
     */
    BaseFormComponent.prototype._modelId;
    /**
     * @type {?}
     * @protected
     */
    BaseFormComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,