/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Subject, Subscription } from 'rxjs';
import { BaseClass } from './class';
/**
 * provide auto unsubscribe support
 */
var /**
 * provide auto unsubscribe support
 */
Unsubscribe = /** @class */ (function (_super) {
    tslib_1.__extends(Unsubscribe, _super);
    function Unsubscribe() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.destroyed$ = new Subject();
        _this._$subscriptions = [];
        return _this;
    }
    Object.defineProperty(Unsubscribe.prototype, "$subscriptions", {
        set: /**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) {
            this._$subscriptions.push(subscription);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Unsubscribe.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.stopSubscribe();
        this._$subscriptions
            .filter(function (sub) { return sub; })
            .map(function (sub) { return sub.unsubscribe(); });
        for (var prop in this) {
            if (this[prop]) {
                /** @type {?} */
                var m = this[prop];
                if (m && m instanceof Subscription) {
                    m.unsubscribe();
                }
            }
        }
    };
    /**
     * @return {?}
     */
    Unsubscribe.prototype.stopSubscribe = /**
     * @return {?}
     */
    function () {
        this.destroyed$.next();
        this.destroyed$.complete();
    };
    return Unsubscribe;
}(BaseClass));
/**
 * provide auto unsubscribe support
 */
export { Unsubscribe };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    Unsubscribe.prototype.destroyed$;
    /**
     * @type {?}
     * @protected
     */
    Unsubscribe.prototype._$subscriptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5zdWJzY3JpYmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9iYXNlcy91bnN1YnNjcmliZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBQyxPQUFPLEVBQUUsWUFBWSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxTQUFTLENBQUM7Ozs7QUFLbEM7Ozs7SUFBaUMsdUNBQVM7SUFBMUM7UUFBQSxxRUFnQ0M7UUE5QlcsZ0JBQVUsR0FBa0IsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUVoRCxxQkFBZSxHQUFtQixFQUFFLENBQUM7O0lBNEJqRCxDQUFDO0lBMUJDLHNCQUFJLHVDQUFjOzs7OztRQUFsQixVQUFtQixZQUFZO1lBQzdCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFDLENBQUM7OztPQUFBOzs7O0lBRUQsaUNBQVc7OztJQUFYO1FBRUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRXJCLElBQUksQ0FBQyxlQUFlO2FBQ2pCLE1BQU0sQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsRUFBSCxDQUFHLENBQUM7YUFDbEIsR0FBRyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFqQixDQUFpQixDQUFDLENBQUM7UUFFakMsS0FBSyxJQUFNLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDdkIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7O29CQUNSLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksWUFBWSxFQUFFO29CQUNsQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7aUJBQ2pCO2FBQ0Y7U0FDRjtJQUNILENBQUM7Ozs7SUFFRCxtQ0FBYTs7O0lBQWI7UUFDRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FBQyxBQWhDRCxDQUFpQyxTQUFTLEdBZ0N6Qzs7Ozs7Ozs7OztJQTlCQyxpQ0FBMEQ7Ozs7O0lBRTFELHNDQUErQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T25EZXN0cm95fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7U3ViamVjdCwgU3Vic2NyaXB0aW9ufSBmcm9tICdyeGpzJztcbmltcG9ydCB7QmFzZUNsYXNzfSBmcm9tICcuL2NsYXNzJztcblxuLyoqXG4gKiBwcm92aWRlIGF1dG8gdW5zdWJzY3JpYmUgc3VwcG9ydFxuICovXG5leHBvcnQgY2xhc3MgVW5zdWJzY3JpYmUgZXh0ZW5kcyBCYXNlQ2xhc3MgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gIHByb3RlY3RlZCBkZXN0cm95ZWQkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBwcm90ZWN0ZWQgXyRzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gIHNldCAkc3Vic2NyaXB0aW9ucyhzdWJzY3JpcHRpb24pIHtcbiAgICB0aGlzLl8kc3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbik7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcblxuICAgIHRoaXMuc3RvcFN1YnNjcmliZSgpO1xuXG4gICAgdGhpcy5fJHN1YnNjcmlwdGlvbnNcbiAgICAgIC5maWx0ZXIoc3ViID0+IHN1YilcbiAgICAgIC5tYXAoc3ViID0+IHN1Yi51bnN1YnNjcmliZSgpKTtcblxuICAgIGZvciAoY29uc3QgcHJvcCBpbiB0aGlzKSB7XG4gICAgICBpZiAodGhpc1twcm9wXSkge1xuICAgICAgICBjb25zdCBtID0gdGhpc1twcm9wXTtcbiAgICAgICAgaWYgKG0gJiYgbSBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgIG0udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0b3BTdWJzY3JpYmUoKSB7XG4gICAgdGhpcy5kZXN0cm95ZWQkLm5leHQoKTtcbiAgICB0aGlzLmRlc3Ryb3llZCQuY29tcGxldGUoKTtcbiAgfVxufVxuIl19