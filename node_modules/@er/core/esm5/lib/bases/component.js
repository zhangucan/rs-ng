/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ContentChildren, Input, QueryList, TemplateRef } from '@angular/core';
import { CommonsUtils } from '@er/utils';
import { TypedTemplateDirective } from '../directives/typed-template/directive';
import { BaseDirective } from './directive';
/**
 * provide template & dynamic query support
 * @abstract
 */
var BaseComponent = /** @class */ (function (_super) {
    tslib_1.__extends(BaseComponent, _super);
    function BaseComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.templates = {};
        return _this;
    }
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.typedTemplates && this.typedTemplates.length > 0) {
            this.typedTemplates.forEach(function (item) {
                if (item.type) {
                    CommonsUtils.set(_this.templates, item.type, item.template);
                }
                else {
                    _this.templates['_'] = item.template;
                }
            });
        }
    };
    /**
     * @param {?} outputs
     * @param {?} eventName
     * @param {?} defaultHandler
     * @param {?} event
     * @return {?}
     */
    BaseComponent.prototype.eventHandler = /**
     * @param {?} outputs
     * @param {?} eventName
     * @param {?} defaultHandler
     * @param {?} event
     * @return {?}
     */
    function (outputs, eventName, defaultHandler, event) {
        if (outputs && outputs[eventName]) {
            return outputs[eventName].call(this, event);
        }
        else {
            return defaultHandler(event);
        }
    };
    /**
     * @param {?=} name
     * @param {...?} defaultTpls
     * @return {?}
     */
    BaseComponent.prototype.template = /**
     * @param {?=} name
     * @param {...?} defaultTpls
     * @return {?}
     */
    function (name) {
        var defaultTpls = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            defaultTpls[_i - 1] = arguments[_i];
        }
        if (!name) {
            name = '_';
        }
        if (this.templates[name]) {
            return this.templates[name];
        }
        else if (defaultTpls.length > 0) {
            /** @type {?} */
            var tpls = CommonsUtils.filter(defaultTpls, function (defaultTpl) { return !!defaultTpl; });
            if (tpls.length > 0) {
                return tpls[0];
            }
        }
        return undefined;
    };
    /**
     * @template C
     * @param {?} id
     * @return {?}
     */
    BaseComponent.prototype.getComponentBySelectorId = /**
     * @template C
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (this.selectors) {
            /** @type {?} */
            var matched = this.selectors.toArray().filter(function (comp) { return comp.id === id; });
            if (matched.length === 1) {
                return matched[0].hostComponent;
            }
        }
        return undefined;
    };
    /**
     * @param {?} name
     * @param {...?} defaultTpls
     * @return {?}
     */
    BaseComponent.prototype.hasTemplate = /**
     * @param {?} name
     * @param {...?} defaultTpls
     * @return {?}
     */
    function (name) {
        var defaultTpls = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            defaultTpls[_i - 1] = arguments[_i];
        }
        return this.template.apply(this, tslib_1.__spread([name], defaultTpls)) !== undefined;
    };
    /**
     * @param {?} templates
     * @return {?}
     */
    BaseComponent.prototype.hasChildren = /**
     * @param {?} templates
     * @return {?}
     */
    function (templates) {
        return CommonsUtils.isJson(templates);
    };
    // empty hooks for dyna bind
    // empty hooks for dyna bind
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngAfterContentChecked = 
    // empty hooks for dyna bind
    /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this['__ngAfterViewInit'] = true;
    };
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this['__ngOnInit'] = true;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    BaseComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @return {?}
     */
    BaseComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    BaseComponent.propDecorators = {
        customerTpl: [{ type: Input }],
        typedTemplates: [{ type: ContentChildren, args: [TypedTemplateDirective,] }]
    };
    return BaseComponent;
}(BaseDirective));
export { BaseComponent };
if (false) {
    /** @type {?} */
    BaseComponent.prototype.customerTpl;
    /** @type {?} */
    BaseComponent.prototype.typedTemplates;
    /** @type {?} */
    BaseComponent.prototype.selectors;
    /** @type {?} */
    BaseComponent.prototype.templateNames;
    /** @type {?} */
    BaseComponent.prototype.templates;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvYmFzZXMvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLGVBQWUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFpQixXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUV2QyxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSx3Q0FBd0MsQ0FBQztBQUM5RSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sYUFBYSxDQUFDOzs7OztBQUsxQztJQUE0Qyx5Q0FBYTtJQUF6RDtRQUFBLHFFQTJGQztRQWpGQyxlQUFTLEdBQThDLEVBQUUsQ0FBQzs7SUFpRjVELENBQUM7Ozs7SUEvRUMsMENBQWtCOzs7SUFBbEI7UUFBQSxpQkFVQztRQVRDLElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFJO2dCQUMvQixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7b0JBQ2IsWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUM1RDtxQkFBTTtvQkFDTCxLQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7aUJBQ3JDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7Ozs7Ozs7O0lBRUQsb0NBQVk7Ozs7Ozs7SUFBWixVQUFhLE9BQU8sRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLEtBQUs7UUFDcEQsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLFNB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cnlMaXN0LCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0NvbW1vbnNVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7U2VsZWN0b3JEaXJlY3RpdmV9IGZyb20gJy4uL2RpcmVjdGl2ZXMvc2VsZWN0b3IvZGlyZWN0aXZlJztcbmltcG9ydCB7VHlwZWRUZW1wbGF0ZURpcmVjdGl2ZX0gZnJvbSAnLi4vZGlyZWN0aXZlcy90eXBlZC10ZW1wbGF0ZS9kaXJlY3RpdmUnO1xuaW1wb3J0IHtCYXNlRGlyZWN0aXZlfSBmcm9tICcuL2RpcmVjdGl2ZSc7XG5cbi8qKlxuICogcHJvdmlkZSB0ZW1wbGF0ZSAmIGR5bmFtaWMgcXVlcnkgc3VwcG9ydFxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUNvbXBvbmVudCBleHRlbmRzIEJhc2VEaXJlY3RpdmUge1xuXG4gIEBJbnB1dCgpIGN1c3RvbWVyVHBsOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oVHlwZWRUZW1wbGF0ZURpcmVjdGl2ZSkgdHlwZWRUZW1wbGF0ZXM6IFF1ZXJ5TGlzdDxUeXBlZFRlbXBsYXRlRGlyZWN0aXZlPjtcblxuICBzZWxlY3RvcnM6IFF1ZXJ5TGlzdDxTZWxlY3RvckRpcmVjdGl2ZT47XG5cbiAgdGVtcGxhdGVOYW1lczoge307XG5cbiAgdGVtcGxhdGVzOiB7IFt0eXBlOiBzdHJpbmddOiBUZW1wbGF0ZVJlZjxhbnk+IHwge30gfSA9IHt9O1xuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy50eXBlZFRlbXBsYXRlcyAmJiB0aGlzLnR5cGVkVGVtcGxhdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMudHlwZWRUZW1wbGF0ZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS50eXBlKSB7XG4gICAgICAgICAgQ29tbW9uc1V0aWxzLnNldCh0aGlzLnRlbXBsYXRlcywgaXRlbS50eXBlLCBpdGVtLnRlbXBsYXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnRlbXBsYXRlc1snXyddID0gaXRlbS50ZW1wbGF0ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZXZlbnRIYW5kbGVyKG91dHB1dHMsIGV2ZW50TmFtZSwgZGVmYXVsdEhhbmRsZXIsIGV2ZW50KSB7XG4gICAgaWYgKG91dHB1dHMgJiYgb3V0cHV0c1tldmVudE5hbWVdKSB7XG4gICAgICByZXR1cm4gb3V0cHV0c1tldmVudE5hbWVdLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGVmYXVsdEhhbmRsZXIoZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHRlbXBsYXRlKG5hbWU/OiBzdHJpbmcsIC4uLmRlZmF1bHRUcGxzOiBUZW1wbGF0ZVJlZjxhbnk+W10pOiBUZW1wbGF0ZVJlZjxhbnk+IHwge30ge1xuICAgIGlmICghbmFtZSkge1xuICAgICAgbmFtZSA9ICdfJztcbiAgICB9XG4gICAgaWYgKHRoaXMudGVtcGxhdGVzW25hbWVdKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZW1wbGF0ZXNbbmFtZV07XG4gICAgfSBlbHNlIGlmIChkZWZhdWx0VHBscy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCB0cGxzID0gQ29tbW9uc1V0aWxzLmZpbHRlcihkZWZhdWx0VHBscywgZGVmYXVsdFRwbCA9PiAhIWRlZmF1bHRUcGwpO1xuICAgICAgaWYgKHRwbHMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdHBsc1swXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGdldENvbXBvbmVudEJ5U2VsZWN0b3JJZDxDPihpZDogYW55KTogQyB7XG4gICAgaWYgKHRoaXMuc2VsZWN0b3JzKSB7XG4gICAgICBjb25zdCBtYXRjaGVkOiBTZWxlY3RvckRpcmVjdGl2ZVtdID0gdGhpcy5zZWxlY3RvcnMudG9BcnJheSgpLmZpbHRlcihjb21wID0+IGNvbXAuaWQgPT09IGlkKTtcbiAgICAgIGlmIChtYXRjaGVkLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlZFswXS5ob3N0Q29tcG9uZW50O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgaGFzVGVtcGxhdGUobmFtZTogc3RyaW5nLCAuLi5kZWZhdWx0VHBsczogVGVtcGxhdGVSZWY8YW55PltdKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudGVtcGxhdGUobmFtZSwgLi4uZGVmYXVsdFRwbHMpICE9PSB1bmRlZmluZWQ7XG4gIH1cblxuICBoYXNDaGlsZHJlbih0ZW1wbGF0ZXMpIHtcbiAgICByZXR1cm4gQ29tbW9uc1V0aWxzLmlzSnNvbih0ZW1wbGF0ZXMpO1xuICB9XG5cblxuICAvLyBlbXB0eSBob29rcyBmb3IgZHluYSBiaW5kXG5cbiAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCkge1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXNbJ19fbmdBZnRlclZpZXdJbml0J10gPSB0cnVlO1xuICB9XG5cbiAgbmdBZnRlclZpZXdDaGVja2VkKCkge1xuICB9XG5cbiAgbmdEb0NoZWNrKCkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpc1snX19uZ09uSW5pdCddID0gdHJ1ZTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICB9XG5cbn1cbiJdfQ==