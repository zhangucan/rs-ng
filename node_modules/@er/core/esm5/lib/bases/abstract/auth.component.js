/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { StateNames } from '@er/types';
import { ConfigUtils } from '@er/utils';
import { AuthUtils } from '../../utils/auth';
import { RouteUtils } from '../../utils/nav';
import { BaseComponent } from '../component';
var AuthBaseComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AuthBaseComponent, _super);
    function AuthBaseComponent() {
        var _this = _super.call(this) || this;
        _this.userToken = ConfigUtils.getConfig().auth.userTokenKey;
        _this.password = ConfigUtils.getConfig().auth.passwordKey;
        _this.rememberMe = ConfigUtils.getConfig().auth.rememberMeKey;
        _this.appName = ConfigUtils.getConfig().appName;
        _this.stateKey = StateNames.auth;
        return _this;
    }
    /**
     * @return {?}
     */
    AuthBaseComponent.prototype.login = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.error = undefined;
        AuthUtils.login(this.getSubmitData(this.form.value))
            .subscribe(function (response) {
            if (response.success === false) {
                _this.error = response.message;
            }
        });
    };
    /**
     * @return {?}
     */
    AuthBaseComponent.prototype.register = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.error = undefined;
        /** @type {?} */
        var data = this.form.value;
        delete data['rePassword'];
        AuthUtils.register(this.getSubmitData(this.form.value))
            .subscribe(function (response) {
            if (response.success === false) {
                _this.error = response.message;
            }
            else {
                RouteUtils.nav(ConfigUtils.getConfig().auth.loginSuccessRouter);
            }
        });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    AuthBaseComponent.prototype.getSubmitData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return data;
    };
    return AuthBaseComponent;
}(BaseComponent));
export { AuthBaseComponent };
if (false) {
    /** @type {?} */
    AuthBaseComponent.prototype.form;
    /** @type {?} */
    AuthBaseComponent.prototype.error;
    /** @type {?} */
    AuthBaseComponent.prototype.appName;
    /** @type {?} */
    AuthBaseComponent.prototype.stateKey;
    /** @type {?} */
    AuthBaseComponent.prototype.userToken;
    /** @type {?} */
    AuthBaseComponent.prototype.password;
    /** @type {?} */
    AuthBaseComponent.prototype.rememberMe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9iYXNlcy9hYnN0cmFjdC9hdXRoLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDckMsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUN0QyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDM0MsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFHM0M7SUFBdUMsNkNBQWE7SUFnQmxEO1FBQUEsWUFDRSxpQkFBTyxTQU1SO1FBTEMsS0FBSSxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUMzRCxLQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3pELEtBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDN0QsS0FBSSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDO1FBQy9DLEtBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQzs7SUFDbEMsQ0FBQzs7OztJQUVELGlDQUFLOzs7SUFBTDtRQUFBLGlCQVFDO1FBUEMsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7UUFDdkIsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDakQsU0FBUyxDQUFDLFVBQUEsUUFBUTtZQUNqQixJQUFJLFFBQVEsQ0FBQyxPQUFPLEtBQUssS0FBSyxFQUFFO2dCQUM5QixLQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUM7YUFDL0I7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Ozs7SUFFRCxvQ0FBUTs7O0lBQVI7UUFBQSxpQkFZQztRQVhDLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDOztZQUNqQixJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFCLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3BELFNBQVMsQ0FBQyxVQUFBLFFBQVE7WUFDakIsSUFBSSxRQUFRLENBQUMsT0FBTyxLQUFLLEtBQUssRUFBRTtnQkFDOUIsS0FBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDO2FBQy9CO2lCQUFNO2dCQUNMLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2FBQ2pFO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzs7OztJQUdELHlDQUFhOzs7O0lBQWIsVUFBYyxJQUFJO1FBQ2hCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNILHdCQUFDO0FBQUQsQ0FBQyxBQXJERCxDQUF1QyxhQUFhLEdBcURuRDs7OztJQW5EQyxpQ0FBdUI7O0lBRXZCLGtDQUFxQjs7SUFFckIsb0NBQXVCOztJQUV2QixxQ0FBd0I7O0lBRXhCLHNDQUFpQjs7SUFFakIscUNBQWdCOztJQUVoQix1Q0FBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Zvcm1Hcm91cH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtTdGF0ZU5hbWVzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb25maWdVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7QXV0aFV0aWxzfSBmcm9tICcuLi8uLi91dGlscy9hdXRoJztcbmltcG9ydCB7Um91dGVVdGlsc30gZnJvbSAnLi4vLi4vdXRpbHMvbmF2JztcbmltcG9ydCB7QmFzZUNvbXBvbmVudH0gZnJvbSAnLi4vY29tcG9uZW50JztcblxuXG5leHBvcnQgY2xhc3MgQXV0aEJhc2VDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcblxuICBwdWJsaWMgZm9ybTogRm9ybUdyb3VwO1xuXG4gIHB1YmxpYyBlcnJvcjogc3RyaW5nO1xuXG4gIHB1YmxpYyBhcHBOYW1lOiBzdHJpbmc7XG5cbiAgcHVibGljIHN0YXRlS2V5OiBzdHJpbmc7XG5cbiAgcHVibGljIHVzZXJUb2tlbjtcblxuICBwdWJsaWMgcGFzc3dvcmQ7XG5cbiAgcHVibGljIHJlbWVtYmVyTWU7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnVzZXJUb2tlbiA9IENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmF1dGgudXNlclRva2VuS2V5O1xuICAgIHRoaXMucGFzc3dvcmQgPSBDb25maWdVdGlscy5nZXRDb25maWcoKS5hdXRoLnBhc3N3b3JkS2V5O1xuICAgIHRoaXMucmVtZW1iZXJNZSA9IENvbmZpZ1V0aWxzLmdldENvbmZpZygpLmF1dGgucmVtZW1iZXJNZUtleTtcbiAgICB0aGlzLmFwcE5hbWUgPSBDb25maWdVdGlscy5nZXRDb25maWcoKS5hcHBOYW1lO1xuICAgIHRoaXMuc3RhdGVLZXkgPSBTdGF0ZU5hbWVzLmF1dGg7XG4gIH1cblxuICBsb2dpbigpIHtcbiAgICB0aGlzLmVycm9yID0gdW5kZWZpbmVkO1xuICAgIEF1dGhVdGlscy5sb2dpbih0aGlzLmdldFN1Ym1pdERhdGEodGhpcy5mb3JtLnZhbHVlKSlcbiAgICAgIC5zdWJzY3JpYmUocmVzcG9uc2UgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2VzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICB0aGlzLmVycm9yID0gcmVzcG9uc2UubWVzc2FnZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICByZWdpc3RlcigpIHtcbiAgICB0aGlzLmVycm9yID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmZvcm0udmFsdWU7XG4gICAgZGVsZXRlIGRhdGFbJ3JlUGFzc3dvcmQnXTtcbiAgICBBdXRoVXRpbHMucmVnaXN0ZXIodGhpcy5nZXRTdWJtaXREYXRhKHRoaXMuZm9ybS52YWx1ZSkpXG4gICAgICAuc3Vic2NyaWJlKHJlc3BvbnNlID0+IHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgICAgdGhpcy5lcnJvciA9IHJlc3BvbnNlLm1lc3NhZ2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgUm91dGVVdGlscy5uYXYoQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkuYXV0aC5sb2dpblN1Y2Nlc3NSb3V0ZXIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG5cbiAgZ2V0U3VibWl0RGF0YShkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbn1cblxuIl19