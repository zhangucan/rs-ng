/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { FormBuilder, FormControl } from '@angular/forms';
import { ApiServerType } from '@er/types';
import { NgValidators } from '@er/validate';
import { DiUtils } from '../../utils/di/index';
import { NgAsyncValidator } from '../../validators/async';
import { AuthBaseComponent } from './auth.component';
var AbstractRegisterComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AbstractRegisterComponent, _super);
    function AbstractRegisterComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.checkExists = false;
        _this.inFocus = false;
        _this.errorMessage = {
            duplicated: '该用户名已经被注册'
        };
        return _this;
    }
    Object.defineProperty(AbstractRegisterComponent.prototype, "isUserNameValidate", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.inFocus && this.form.get(this.userToken).valid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AbstractRegisterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _a;
        this.form = DiUtils.get(FormBuilder).group((_a = {},
            _a[this.userToken] = new FormControl('', {
                validators: NgValidators.required,
                asyncValidators: NgAsyncValidator(this.userExistsApiOptions(), 'duplicated'),
                updateOn: 'blur'
            }),
            _a[this.password] = ['', [NgValidators.required, NgValidators.minLength(6)]],
            _a.rePassword = ['', [NgValidators.required, NgValidators.minLength(6), NgValidators.equalTo(this.password)]],
            _a));
    };
    /**
     * @return {?}
     */
    AbstractRegisterComponent.prototype.userExistsApiOptions = /**
     * @return {?}
     */
    function () {
        return {
            requestOptions: {
                serverType: ApiServerType.ER
            },
            apiEntry: 'user/exists',
            payload: function (val) {
                return { userName: val };
            }
        };
    };
    return AbstractRegisterComponent;
}(AuthBaseComponent));
export { AbstractRegisterComponent };
if (false) {
    /** @type {?} */
    AbstractRegisterComponent.prototype.checkExists;
    /** @type {?} */
    AbstractRegisterComponent.prototype.inFocus;
    /** @type {?} */
    AbstractRegisterComponent.prototype.errorMessage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2NvcmUvIiwic291cmNlcyI6WyJsaWIvYmFzZXMvYWJzdHJhY3QvcmVnaXN0ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RCxPQUFPLEVBQWUsYUFBYSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3RELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQ3hELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRW5EO0lBQStDLHFEQUFpQjtJQUFoRTtRQUFBLHFFQXFDQztRQW5DQyxpQkFBVyxHQUFHLEtBQUssQ0FBQztRQUVwQixhQUFPLEdBQUcsS0FBSyxDQUFDO1FBRWhCLGtCQUFZLEdBQUc7WUFDYixVQUFVLEVBQUUsV0FBVztTQUN4QixDQUFDOztJQTZCSixDQUFDO0lBM0JDLHNCQUFJLHlEQUFrQjs7OztRQUF0QjtZQUNFLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDOUQsQ0FBQzs7O09BQUE7Ozs7SUFFRCw0Q0FBUTs7O0lBQVI7O1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFjLFdBQVcsQ0FBQyxDQUFDLEtBQUs7WUFDckQsR0FBQyxJQUFJLENBQUMsU0FBUyxJQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRTtnQkFDcEMsVUFBVSxFQUFFLFlBQVksQ0FBQyxRQUFRO2dCQUNqQyxlQUFlLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsWUFBWSxDQUFDO2dCQUM1RSxRQUFRLEVBQUUsTUFBTTthQUNqQixDQUFDO1lBQ0YsR0FBQyxJQUFJLENBQUMsUUFBUSxJQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekUsYUFBVSxHQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pHLENBQUM7SUFDTCxDQUFDOzs7O0lBRUQsd0RBQW9COzs7SUFBcEI7UUFDRSxPQUFPO1lBQ0wsY0FBYyxFQUFFO2dCQUNkLFVBQVUsRUFBRSxhQUFhLENBQUMsRUFBRTthQUM3QjtZQUNELFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLE9BQU8sRUFBRSxVQUFDLEdBQUc7Z0JBQ1gsT0FBTyxFQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUMsQ0FBQztZQUN6QixDQUFDO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFDSCxnQ0FBQztBQUFELENBQUMsQUFyQ0QsQ0FBK0MsaUJBQWlCLEdBcUMvRDs7OztJQW5DQyxnREFBb0I7O0lBRXBCLDRDQUFnQjs7SUFFaEIsaURBRUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge09uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Zvcm1CdWlsZGVyLCBGb3JtQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtBcGlEYXRhUHJvcHMsIEFwaVNlcnZlclR5cGV9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge05nVmFsaWRhdG9yc30gZnJvbSAnQGVyL3ZhbGlkYXRlJztcbmltcG9ydCB7RGlVdGlsc30gZnJvbSAnLi4vLi4vdXRpbHMvZGkvaW5kZXgnO1xuaW1wb3J0IHtOZ0FzeW5jVmFsaWRhdG9yfSBmcm9tICcuLi8uLi92YWxpZGF0b3JzL2FzeW5jJztcbmltcG9ydCB7QXV0aEJhc2VDb21wb25lbnR9IGZyb20gJy4vYXV0aC5jb21wb25lbnQnO1xuXG5leHBvcnQgY2xhc3MgQWJzdHJhY3RSZWdpc3RlckNvbXBvbmVudCBleHRlbmRzIEF1dGhCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBjaGVja0V4aXN0cyA9IGZhbHNlO1xuXG4gIGluRm9jdXMgPSBmYWxzZTtcblxuICBlcnJvck1lc3NhZ2UgPSB7XG4gICAgZHVwbGljYXRlZDogJ+ivpeeUqOaIt+WQjeW3sue7j+iiq+azqOWGjCdcbiAgfTtcblxuICBnZXQgaXNVc2VyTmFtZVZhbGlkYXRlKCkge1xuICAgIHJldHVybiAhdGhpcy5pbkZvY3VzICYmIHRoaXMuZm9ybS5nZXQodGhpcy51c2VyVG9rZW4pLnZhbGlkO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5mb3JtID0gRGlVdGlscy5nZXQ8Rm9ybUJ1aWxkZXI+KEZvcm1CdWlsZGVyKS5ncm91cCh7XG4gICAgICBbdGhpcy51c2VyVG9rZW5dOiBuZXcgRm9ybUNvbnRyb2woJycsIHtcbiAgICAgICAgdmFsaWRhdG9yczogTmdWYWxpZGF0b3JzLnJlcXVpcmVkLFxuICAgICAgICBhc3luY1ZhbGlkYXRvcnM6IE5nQXN5bmNWYWxpZGF0b3IodGhpcy51c2VyRXhpc3RzQXBpT3B0aW9ucygpLCAnZHVwbGljYXRlZCcpLFxuICAgICAgICB1cGRhdGVPbjogJ2JsdXInXG4gICAgICB9KSxcbiAgICAgIFt0aGlzLnBhc3N3b3JkXTogWycnLCBbTmdWYWxpZGF0b3JzLnJlcXVpcmVkLCBOZ1ZhbGlkYXRvcnMubWluTGVuZ3RoKDYpXV0sXG4gICAgICByZVBhc3N3b3JkOiBbJycsIFtOZ1ZhbGlkYXRvcnMucmVxdWlyZWQsIE5nVmFsaWRhdG9ycy5taW5MZW5ndGgoNiksIE5nVmFsaWRhdG9ycy5lcXVhbFRvKHRoaXMucGFzc3dvcmQpXV1cbiAgICB9KTtcbiAgfVxuXG4gIHVzZXJFeGlzdHNBcGlPcHRpb25zKCk6IEFwaURhdGFQcm9wcyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlcXVlc3RPcHRpb25zOiB7XG4gICAgICAgIHNlcnZlclR5cGU6IEFwaVNlcnZlclR5cGUuRVJcbiAgICAgIH0sXG4gICAgICBhcGlFbnRyeTogJ3VzZXIvZXhpc3RzJyxcbiAgICAgIHBheWxvYWQ6ICh2YWwpID0+IHtcbiAgICAgICAgcmV0dXJuIHt1c2VyTmFtZTogdmFsfTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG4iXX0=