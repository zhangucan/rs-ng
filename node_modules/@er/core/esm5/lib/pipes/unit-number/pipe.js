/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Pipe } from '@angular/core';
var UnitNumberPipe = /** @class */ (function () {
    function UnitNumberPipe(ele) {
        this.ele = ele;
    }
    /**
     * @param {?} value
     * @param {?=} decimal
     * @return {?}
     */
    UnitNumberPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} decimal
     * @return {?}
     */
    function (value, decimal) {
        if (!value) {
            return null;
        }
        if (typeof value === 'string') {
            value = parseFloat(value);
        }
        /** @type {?} */
        var number;
        /** @type {?} */
        var suffix;
        /** @type {?} */
        var numeral = [
            { thresholds: 1, suffix: '' },
            { thresholds: 1e3, suffix: 'K' },
            { thresholds: 1e6, suffix: 'M' },
            { thresholds: 1e9, suffix: 'B' },
            { thresholds: 1e12, suffix: 'T' },
            { thresholds: 1e15, suffix: 'Q' }
        ];
        for (var i = numeral.length - 1; i >= 0; i--) {
            if (value >= numeral[i].thresholds) {
                number = value / numeral[i].thresholds;
                suffix = numeral[i].suffix;
                break;
            }
        }
        if (value > 1e3) {
            if (!decimal) {
                if (number < 10) {
                    number = number.toFixed(1);
                }
                else {
                    number = number.toFixed(0);
                }
            }
            else {
                if (decimal === 0 || decimal === 1 || decimal === 2) {
                    number = number.toFixed(decimal);
                }
                else {
                    throw new Error('must be integer 0, 1 or 2');
                }
            }
        }
        else {
            if (decimal === 0 || decimal === 1 || decimal === 2) {
                number = number.toFixed(decimal);
            }
            else {
                number = Math.round(number);
            }
        }
        // add hint of original value
        // this.ele.nativeElement;
        return number + suffix;
    };
    UnitNumberPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'erUnitNumber'
                },] }
    ];
    /** @nocollapse */
    UnitNumberPipe.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return UnitNumberPipe;
}());
export { UnitNumberPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    UnitNumberPipe.prototype.ele;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3BpcGVzL3VuaXQtbnVtYmVyL3BpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUc5RDtJQU1FLHdCQUFvQixHQUFlO1FBQWYsUUFBRyxHQUFILEdBQUcsQ0FBWTtJQUNuQyxDQUFDOzs7Ozs7SUFFRCxrQ0FBUzs7Ozs7SUFBVCxVQUFVLEtBQWEsRUFBRSxPQUFnQjtRQUV2QyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7O1lBRUcsTUFBTTs7WUFBRSxNQUFNOztZQUNaLE9BQU8sR0FBRztZQUNkLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFDO1lBQzNCLEVBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFDO1lBQzlCLEVBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFDO1lBQzlCLEVBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFDO1lBQzlCLEVBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFDO1lBQy9CLEVBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFDO1NBQ2hDO1FBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzVDLElBQUksS0FBSyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUU7Z0JBQ2xDLE1BQU0sR0FBRyxLQUFLLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztnQkFDdkMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7Z0JBQzNCLE1BQU07YUFDUDtTQUNGO1FBQ0QsSUFBSSxLQUFLLEdBQUcsR0FBRyxFQUFFO1lBQ2YsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDWixJQUFJLE1BQU0sR0FBRyxFQUFFLEVBQUU7b0JBQ2YsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzVCO3FCQUFNO29CQUNMLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUM1QjthQUNGO2lCQUFNO2dCQUNMLElBQUksT0FBTyxLQUFLLENBQUMsSUFBSSxPQUFPLEtBQUssQ0FBQyxJQUFJLE9BQU8sS0FBSyxDQUFDLEVBQUU7b0JBQ25ELE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUNsQztxQkFBTTtvQkFDTCxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7aUJBQzlDO2FBQ0Y7U0FDRjthQUFNO1lBQ0wsSUFBSSxPQUFPLEtBQUssQ0FBQyxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksT0FBTyxLQUFLLENBQUMsRUFBRTtnQkFDbkQsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDbEM7aUJBQU07Z0JBQ0wsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDN0I7U0FDRjtRQUNELDZCQUE2QjtRQUM3QiwwQkFBMEI7UUFFMUIsT0FBTyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7O2dCQTVERixJQUFJLFNBQUM7b0JBQ0osSUFBSSxFQUFFLGNBQWM7aUJBQ3JCOzs7O2dCQUxPLFVBQVU7O0lBZ0VsQixxQkFBQztDQUFBLEFBN0RELElBNkRDO1NBekRZLGNBQWM7Ozs7OztJQUViLDZCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RWxlbWVudFJlZiwgUGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cblxuQFBpcGUoe1xuICBuYW1lOiAnZXJVbml0TnVtYmVyJ1xufSlcblxuZXhwb3J0IGNsYXNzIFVuaXROdW1iZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGU6IEVsZW1lbnRSZWYpIHtcbiAgfVxuXG4gIHRyYW5zZm9ybSh2YWx1ZTogbnVtYmVyLCBkZWNpbWFsPzogbnVtYmVyKTogc3RyaW5nIHtcblxuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgIH1cblxuICAgIGxldCBudW1iZXIsIHN1ZmZpeDtcbiAgICBjb25zdCBudW1lcmFsID0gW1xuICAgICAge3RocmVzaG9sZHM6IDEsIHN1ZmZpeDogJyd9LFxuICAgICAge3RocmVzaG9sZHM6IDFlMywgc3VmZml4OiAnSyd9LFxuICAgICAge3RocmVzaG9sZHM6IDFlNiwgc3VmZml4OiAnTSd9LFxuICAgICAge3RocmVzaG9sZHM6IDFlOSwgc3VmZml4OiAnQid9LFxuICAgICAge3RocmVzaG9sZHM6IDFlMTIsIHN1ZmZpeDogJ1QnfSxcbiAgICAgIHt0aHJlc2hvbGRzOiAxZTE1LCBzdWZmaXg6ICdRJ31cbiAgICBdO1xuICAgIGZvciAobGV0IGkgPSBudW1lcmFsLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBpZiAodmFsdWUgPj0gbnVtZXJhbFtpXS50aHJlc2hvbGRzKSB7XG4gICAgICAgIG51bWJlciA9IHZhbHVlIC8gbnVtZXJhbFtpXS50aHJlc2hvbGRzO1xuICAgICAgICBzdWZmaXggPSBudW1lcmFsW2ldLnN1ZmZpeDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh2YWx1ZSA+IDFlMykge1xuICAgICAgaWYgKCFkZWNpbWFsKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAxMCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlci50b0ZpeGVkKDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlci50b0ZpeGVkKDApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZGVjaW1hbCA9PT0gMCB8fCBkZWNpbWFsID09PSAxIHx8IGRlY2ltYWwgPT09IDIpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIudG9GaXhlZChkZWNpbWFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ211c3QgYmUgaW50ZWdlciAwLCAxIG9yIDInKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZGVjaW1hbCA9PT0gMCB8fCBkZWNpbWFsID09PSAxIHx8IGRlY2ltYWwgPT09IDIpIHtcbiAgICAgICAgbnVtYmVyID0gbnVtYmVyLnRvRml4ZWQoZGVjaW1hbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBudW1iZXIgPSBNYXRoLnJvdW5kKG51bWJlcik7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGFkZCBoaW50IG9mIG9yaWdpbmFsIHZhbHVlXG4gICAgLy8gdGhpcy5lbGUubmF0aXZlRWxlbWVudDtcblxuICAgIHJldHVybiBudW1iZXIgKyBzdWZmaXg7XG4gIH1cbn1cblxuXG4iXX0=