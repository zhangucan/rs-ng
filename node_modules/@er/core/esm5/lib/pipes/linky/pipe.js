/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { CommonsUtils } from '@er/utils';
var LinkifyPipe = /** @class */ (function () {
    function LinkifyPipe() {
    }
    /**
     * @param {?} text
     * @param {?=} pipeEnabled
     * @return {?}
     */
    LinkifyPipe.prototype.transform = /**
     * @param {?} text
     * @param {?=} pipeEnabled
     * @return {?}
     */
    function (text, pipeEnabled) {
        if (pipeEnabled === void 0) { pipeEnabled = true; }
        if (pipeEnabled && !CommonsUtils.isEmpty(text)) {
            return this.linkify(text);
        }
        return text;
    };
    /**
     * @private
     * @param {?} plainText
     * @param {?=} pipeEnabled
     * @return {?}
     */
    LinkifyPipe.prototype.linkify = /**
     * @private
     * @param {?} plainText
     * @param {?=} pipeEnabled
     * @return {?}
     */
    function (plainText, pipeEnabled) {
        if (pipeEnabled === void 0) { pipeEnabled = true; }
        if (pipeEnabled) {
            /** @type {?} */
            var replacedText = void 0;
            /** @type {?} */
            var replacePattern1 = void 0;
            /** @type {?} */
            var replacePattern2 = void 0;
            /** @type {?} */
            var replacePattern3 = void 0;
            // URLs starting with http://, https://, or ftp://
            replacePattern1 = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
            replacedText = plainText.replace(replacePattern1, '<a href="$1" target=`${options.target|"_blank"}`>$1</a>');
            // URLs starting with "www." (without // before it, or it'd re-link the ones done above).
            replacePattern2 = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
            replacedText = replacedText.replace(replacePattern2, '$1<a href="http://$2" target=`${options.target|"_blank"}`>$2</a>');
            // Change email addresses to mailto:: links.
            replacePattern3 = /(([a-zA-Z0-9\-\_\.])+@[a-zA-Z\_]+?(\.[a-zA-Z]{2,6})+)/gim;
            replacedText = replacedText.replace(replacePattern3, '<a href="mailto:$1">$1</a>');
            return replacedText;
        }
        return plainText;
    };
    LinkifyPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'erLinkify',
                    pure: false
                },] }
    ];
    return LinkifyPipe;
}());
export { LinkifyPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3BpcGVzL2xpbmt5L3BpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxJQUFJLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFHdkM7SUFBQTtJQW9DQSxDQUFDOzs7Ozs7SUE5QkMsK0JBQVM7Ozs7O0lBQVQsVUFBVSxJQUFZLEVBQUUsV0FBa0I7UUFBbEIsNEJBQUEsRUFBQSxrQkFBa0I7UUFDeEMsSUFBSSxXQUFXLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzlDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzQjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7OztJQUVPLDZCQUFPOzs7Ozs7SUFBZixVQUFnQixTQUFTLEVBQUUsV0FBa0I7UUFBbEIsNEJBQUEsRUFBQSxrQkFBa0I7UUFDM0MsSUFBSSxXQUFXLEVBQUU7O2dCQUNYLFlBQVksU0FBQTs7Z0JBQ1osZUFBZSxTQUFBOztnQkFDZixlQUFlLFNBQUE7O2dCQUNmLGVBQWUsU0FBQTtZQUVuQixrREFBa0Q7WUFDbEQsZUFBZSxHQUFHLHlFQUF5RSxDQUFDO1lBQzVGLFlBQVksR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSx5REFBeUQsQ0FBQyxDQUFDO1lBRTdHLHlGQUF5RjtZQUN6RixlQUFlLEdBQUcsZ0NBQWdDLENBQUM7WUFDbkQsWUFBWSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLGtFQUFrRSxDQUFDLENBQUM7WUFFekgsNENBQTRDO1lBQzVDLGVBQWUsR0FBRywwREFBMEQsQ0FBQztZQUM3RSxZQUFZLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztZQUVuRixPQUFPLFlBQVksQ0FBQztTQUNyQjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7O2dCQW5DRixJQUFJLFNBQUM7b0JBQ0osSUFBSSxFQUFFLFdBQVc7b0JBQ2pCLElBQUksRUFBRSxLQUFLO2lCQUNaOztJQWlDRCxrQkFBQztDQUFBLEFBcENELElBb0NDO1NBaENZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDb21tb25zVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5cblxuQFBpcGUoe1xuICBuYW1lOiAnZXJMaW5raWZ5JyxcbiAgcHVyZTogZmFsc2Vcbn0pXG5leHBvcnQgY2xhc3MgTGlua2lmeVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICB0cmFuc2Zvcm0odGV4dDogc3RyaW5nLCBwaXBlRW5hYmxlZCA9IHRydWUpOiBzdHJpbmcge1xuICAgIGlmIChwaXBlRW5hYmxlZCAmJiAhQ29tbW9uc1V0aWxzLmlzRW1wdHkodGV4dCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmxpbmtpZnkodGV4dCk7XG4gICAgfVxuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgcHJpdmF0ZSBsaW5raWZ5KHBsYWluVGV4dCwgcGlwZUVuYWJsZWQgPSB0cnVlKTogc3RyaW5nIHtcbiAgICBpZiAocGlwZUVuYWJsZWQpIHtcbiAgICAgIGxldCByZXBsYWNlZFRleHQ7XG4gICAgICBsZXQgcmVwbGFjZVBhdHRlcm4xO1xuICAgICAgbGV0IHJlcGxhY2VQYXR0ZXJuMjtcbiAgICAgIGxldCByZXBsYWNlUGF0dGVybjM7XG5cbiAgICAgIC8vIFVSTHMgc3RhcnRpbmcgd2l0aCBodHRwOi8vLCBodHRwczovLywgb3IgZnRwOi8vXG4gICAgICByZXBsYWNlUGF0dGVybjEgPSAvKFxcYihodHRwcz98ZnRwKTpcXC9cXC9bLUEtWjAtOSsmQCNcXC8lPz1+X3whOiwuO10qWy1BLVowLTkrJkAjXFwvJT1+X3xdKS9naW07XG4gICAgICByZXBsYWNlZFRleHQgPSBwbGFpblRleHQucmVwbGFjZShyZXBsYWNlUGF0dGVybjEsICc8YSBocmVmPVwiJDFcIiB0YXJnZXQ9YCR7b3B0aW9ucy50YXJnZXR8XCJfYmxhbmtcIn1gPiQxPC9hPicpO1xuXG4gICAgICAvLyBVUkxzIHN0YXJ0aW5nIHdpdGggXCJ3d3cuXCIgKHdpdGhvdXQgLy8gYmVmb3JlIGl0LCBvciBpdCdkIHJlLWxpbmsgdGhlIG9uZXMgZG9uZSBhYm92ZSkuXG4gICAgICByZXBsYWNlUGF0dGVybjIgPSAvKF58W15cXC9dKSh3d3dcXC5bXFxTXSsoXFxifCQpKS9naW07XG4gICAgICByZXBsYWNlZFRleHQgPSByZXBsYWNlZFRleHQucmVwbGFjZShyZXBsYWNlUGF0dGVybjIsICckMTxhIGhyZWY9XCJodHRwOi8vJDJcIiB0YXJnZXQ9YCR7b3B0aW9ucy50YXJnZXR8XCJfYmxhbmtcIn1gPiQyPC9hPicpO1xuXG4gICAgICAvLyBDaGFuZ2UgZW1haWwgYWRkcmVzc2VzIHRvIG1haWx0bzo6IGxpbmtzLlxuICAgICAgcmVwbGFjZVBhdHRlcm4zID0gLygoW2EtekEtWjAtOVxcLVxcX1xcLl0pK0BbYS16QS1aXFxfXSs/KFxcLlthLXpBLVpdezIsNn0pKykvZ2ltO1xuICAgICAgcmVwbGFjZWRUZXh0ID0gcmVwbGFjZWRUZXh0LnJlcGxhY2UocmVwbGFjZVBhdHRlcm4zLCAnPGEgaHJlZj1cIm1haWx0bzokMVwiPiQxPC9hPicpO1xuXG4gICAgICByZXR1cm4gcmVwbGFjZWRUZXh0O1xuICAgIH1cbiAgICByZXR1cm4gcGxhaW5UZXh0O1xuICB9XG59XG4iXX0=