/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
/** @type {?} */
var emojiDictionary = [
    { patterns: [':)', ':-)', '=)'], unicode: '😃' },
    { patterns: [':D', ':-D', '=D'], unicode: '😀' },
    { patterns: [':(', ':-(', '=('], unicode: '🙁' },
    { patterns: [':|', ':-|', '=|'], unicode: '😐' },
    { patterns: [':*', ':-*', '=*'], unicode: '😙' },
    { patterns: ['T_T', 'T.T'], unicode: '😭' },
    { patterns: [':O', ':-O', '=O', ':o', ':-o', '=o'], unicode: '😮' },
    { patterns: [':P', ':-P', '=P', ':p', ':-p', '=p'], unicode: '😋' },
    { patterns: ['>.<'], unicode: '😣' },
    { patterns: ['@.@'], unicode: '😵' },
    { patterns: ['*.*'], unicode: '😍' },
    { patterns: ['<3'], unicode: '❤️' },
    { patterns: ['^.^'], unicode: '😊' },
    { patterns: [':+1'], unicode: '👍' },
    { patterns: [':-1'], unicode: '👎' }
];
var EmojifyPipe = /** @class */ (function () {
    function EmojifyPipe() {
    }
    /**
     * @param {?} message
     * @param {?=} pipeEnabled
     * @return {?}
     */
    EmojifyPipe.prototype.transform = /**
     * @param {?} message
     * @param {?=} pipeEnabled
     * @return {?}
     */
    function (message, pipeEnabled) {
        if (pipeEnabled === void 0) { pipeEnabled = true; }
        if (pipeEnabled && message && message.length > 1) {
            emojiDictionary.forEach(function (emoji) {
                emoji.patterns.forEach(function (pattern) {
                    message = message.replace(pattern, emoji.unicode);
                });
            });
        }
        return message;
    };
    EmojifyPipe.decorators = [
        { type: Pipe, args: [{ name: 'erEmojify' },] }
    ];
    return EmojifyPipe;
}());
export { EmojifyPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3BpcGVzL2Vtb2ppZnkvcGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7O0lBRTVDLGVBQWUsR0FBRztJQUN0QixFQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQztJQUM5QyxFQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQztJQUM5QyxFQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQztJQUM5QyxFQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQztJQUM5QyxFQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQztJQUM5QyxFQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFDO0lBQ3pDLEVBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFDO0lBQ2pFLEVBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFDO0lBQ2pFLEVBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQztJQUNsQyxFQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUM7SUFDbEMsRUFBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFDO0lBQ2xDLEVBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQztJQUNqQyxFQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUM7SUFDbEMsRUFBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFDO0lBQ2xDLEVBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQztDQUNuQztBQUdEO0lBQUE7SUFhQSxDQUFDOzs7Ozs7SUFYQywrQkFBUzs7Ozs7SUFBVCxVQUFVLE9BQWUsRUFBRSxXQUFrQjtRQUFsQiw0QkFBQSxFQUFBLGtCQUFrQjtRQUMzQyxJQUFJLFdBQVcsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDaEQsZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7Z0JBQzNCLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQUEsT0FBTztvQkFDNUIsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDcEQsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7Z0JBWkYsSUFBSSxTQUFDLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBQzs7SUFhekIsa0JBQUM7Q0FBQSxBQWJELElBYUM7U0FaWSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY29uc3QgZW1vamlEaWN0aW9uYXJ5ID0gW1xuICB7cGF0dGVybnM6IFsnOiknLCAnOi0pJywgJz0pJ10sIHVuaWNvZGU6ICfwn5iDJ30sXG4gIHtwYXR0ZXJuczogWyc6RCcsICc6LUQnLCAnPUQnXSwgdW5pY29kZTogJ/CfmIAnfSxcbiAge3BhdHRlcm5zOiBbJzooJywgJzotKCcsICc9KCddLCB1bmljb2RlOiAn8J+ZgSd9LFxuICB7cGF0dGVybnM6IFsnOnwnLCAnOi18JywgJz18J10sIHVuaWNvZGU6ICfwn5iQJ30sXG4gIHtwYXR0ZXJuczogWyc6KicsICc6LSonLCAnPSonXSwgdW5pY29kZTogJ/CfmJknfSxcbiAge3BhdHRlcm5zOiBbJ1RfVCcsICdULlQnXSwgdW5pY29kZTogJ/CfmK0nfSxcbiAge3BhdHRlcm5zOiBbJzpPJywgJzotTycsICc9TycsICc6bycsICc6LW8nLCAnPW8nXSwgdW5pY29kZTogJ/CfmK4nfSxcbiAge3BhdHRlcm5zOiBbJzpQJywgJzotUCcsICc9UCcsICc6cCcsICc6LXAnLCAnPXAnXSwgdW5pY29kZTogJ/CfmIsnfSxcbiAge3BhdHRlcm5zOiBbJz4uPCddLCB1bmljb2RlOiAn8J+Yoyd9LFxuICB7cGF0dGVybnM6IFsnQC5AJ10sIHVuaWNvZGU6ICfwn5i1J30sXG4gIHtwYXR0ZXJuczogWycqLionXSwgdW5pY29kZTogJ/CfmI0nfSxcbiAge3BhdHRlcm5zOiBbJzwzJ10sIHVuaWNvZGU6ICfinaTvuI8nfSxcbiAge3BhdHRlcm5zOiBbJ14uXiddLCB1bmljb2RlOiAn8J+Yiid9LFxuICB7cGF0dGVybnM6IFsnOisxJ10sIHVuaWNvZGU6ICfwn5GNJ30sXG4gIHtwYXR0ZXJuczogWyc6LTEnXSwgdW5pY29kZTogJ/CfkY4nfVxuXTtcblxuXG5AUGlwZSh7bmFtZTogJ2VyRW1vamlmeSd9KVxuZXhwb3J0IGNsYXNzIEVtb2ppZnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShtZXNzYWdlOiBzdHJpbmcsIHBpcGVFbmFibGVkID0gdHJ1ZSk6IHN0cmluZyB7XG4gICAgaWYgKHBpcGVFbmFibGVkICYmIG1lc3NhZ2UgJiYgbWVzc2FnZS5sZW5ndGggPiAxKSB7XG4gICAgICBlbW9qaURpY3Rpb25hcnkuZm9yRWFjaChlbW9qaSA9PiB7XG4gICAgICAgIGVtb2ppLnBhdHRlcm5zLmZvckVhY2gocGF0dGVybiA9PiB7XG4gICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UucmVwbGFjZShwYXR0ZXJuLCBlbW9qaS51bmljb2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfVxufVxuIl19