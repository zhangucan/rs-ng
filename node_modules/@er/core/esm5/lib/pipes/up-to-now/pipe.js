/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, NgZone, Pipe } from '@angular/core';
import { DateUtils } from '@er/utils';
var UpToNowPipe = /** @class */ (function () {
    function UpToNowPipe(cd, ngZone) {
        this.cd = cd;
        this.ngZone = ngZone;
    }
    /**
     * @param {?} value
     * @param {?=} due
     * @return {?}
     */
    UpToNowPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} due
     * @return {?}
     */
    function (value, due) {
        var _this = this;
        /** @type {?} */
        var d = DateUtils.toDate(value);
        if (!d) {
            return '';
        }
        /** @type {?} */
        var span = DateUtils.getDateByNow(d, due);
        this.removeTimer();
        /** @type {?} */
        var timeToUpdate = (Number.isNaN(span.seconds)) ? 1000 : DateUtils.getUpdateSeconds(span.seconds) * 1000;
        this.timer = this.ngZone.runOutsideAngular(function () {
            if (typeof window !== 'undefined') {
                return window.setTimeout(function () {
                    _this.ngZone.run(function () { return _this.cd.detectChanges(); });
                }, timeToUpdate);
            }
            return null;
        });
        return span.message;
    };
    /**
     * @return {?}
     */
    UpToNowPipe.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeTimer();
    };
    /**
     * @private
     * @return {?}
     */
    UpToNowPipe.prototype.removeTimer = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.timer) {
            window.clearTimeout(this.timer);
            this.timer = null;
        }
    };
    UpToNowPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'erUpToNow',
                    pure: false
                },] }
    ];
    /** @nocollapse */
    UpToNowPipe.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: NgZone }
    ]; };
    return UpToNowPipe;
}());
export { UpToNowPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    UpToNowPipe.prototype.timer;
    /**
     * @type {?}
     * @private
     */
    UpToNowPipe.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    UpToNowPipe.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3BpcGVzL3VwLXRvLW5vdy9waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsTUFBTSxFQUFhLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUVwQztJQVFFLHFCQUFvQixFQUFxQixFQUFVLE1BQWM7UUFBN0MsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQ2pFLENBQUM7Ozs7OztJQUVELCtCQUFTOzs7OztJQUFULFVBQVUsS0FBVSxFQUFFLEdBQVU7UUFBaEMsaUJBaUJDOztZQWhCTyxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakMsSUFBSSxDQUFDLENBQUMsRUFBRTtZQUNOLE9BQU8sRUFBRSxDQUFDO1NBQ1g7O1lBQ0ssSUFBSSxHQUFHLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztRQUMzQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7O1lBQ2IsWUFBWSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUk7UUFDMUcsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDO1lBQ3pDLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxFQUFFO2dCQUNqQyxPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQUM7b0JBQ3ZCLEtBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxFQUF2QixDQUF1QixDQUFDLENBQUM7Z0JBQ2pELENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQzthQUNsQjtZQUNELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQzs7OztJQUVELGlDQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7OztJQUVPLGlDQUFXOzs7O0lBQW5CO1FBQ0UsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDbkI7SUFDSCxDQUFDOztnQkF2Q0YsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSxXQUFXO29CQUNqQixJQUFJLEVBQUUsS0FBSztpQkFDWjs7OztnQkFOTyxpQkFBaUI7Z0JBQUUsTUFBTTs7SUE2Q2pDLGtCQUFDO0NBQUEsQUExQ0QsSUEwQ0M7U0F0Q1ksV0FBVzs7Ozs7O0lBRXRCLDRCQUFzQjs7Ozs7SUFFVix5QkFBNkI7Ozs7O0lBQUUsNkJBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3RvclJlZiwgTmdab25lLCBPbkRlc3Ryb3ksIFBpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtEYXRlVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5cbkBQaXBlKHtcbiAgbmFtZTogJ2VyVXBUb05vdycsXG4gIHB1cmU6IGZhbHNlXG59KVxuZXhwb3J0IGNsYXNzIFVwVG9Ob3dQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSwgT25EZXN0cm95IHtcblxuICBwcml2YXRlIHRpbWVyOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgbmdab25lOiBOZ1pvbmUpIHtcbiAgfVxuXG4gIHRyYW5zZm9ybSh2YWx1ZTogYW55LCBkdWU/OiBEYXRlKSB7XG4gICAgY29uc3QgZCA9IERhdGVVdGlscy50b0RhdGUodmFsdWUpO1xuICAgIGlmICghZCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBjb25zdCBzcGFuID0gRGF0ZVV0aWxzLmdldERhdGVCeU5vdyhkLCBkdWUpO1xuICAgIHRoaXMucmVtb3ZlVGltZXIoKTtcbiAgICBjb25zdCB0aW1lVG9VcGRhdGUgPSAoTnVtYmVyLmlzTmFOKHNwYW4uc2Vjb25kcykpID8gMTAwMCA6IERhdGVVdGlscy5nZXRVcGRhdGVTZWNvbmRzKHNwYW4uc2Vjb25kcykgKiAxMDAwO1xuICAgIHRoaXMudGltZXIgPSB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCkpO1xuICAgICAgICB9LCB0aW1lVG9VcGRhdGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNwYW4ubWVzc2FnZTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMucmVtb3ZlVGltZXIoKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlVGltZXIoKSB7XG4gICAgaWYgKHRoaXMudGltZXIpIHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy50aW1lcik7XG4gICAgICB0aGlzLnRpbWVyID0gbnVsbDtcbiAgICB9XG4gIH1cblxuXG59XG5cbiJdfQ==