/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Pipe } from '@angular/core';
import { CommonsUtils } from '@er/utils';
import { BehaviorSubject, timer } from 'rxjs';
import { mapTo, scan, startWith, switchMap, tap } from 'rxjs/operators';
var TrackerPipe = /** @class */ (function () {
    function TrackerPipe(cd) {
        this.cd = cd;
        this.currentNumber = 0;
        this.counter$ = new BehaviorSubject(0);
        //   .subscribe();
    }
    /**
     * @param {?} number
     * @param {?=} offset
     * @return {?}
     */
    TrackerPipe.prototype.transform = /**
     * @param {?} number
     * @param {?=} offset
     * @return {?}
     */
    function (number, offset) {
        var _this = this;
        if (offset === void 0) { offset = 20; }
        this.currentNumber = number - CommonsUtils.getRandomNumber(offset);
        this.counter$.next(this.currentNumber);
        this.counter$
            .pipe(switchMap(function (endRange) {
            return timer(1000, 200)
                .pipe(mapTo(_this.positiveOrNegative(endRange, _this.currentNumber)), startWith(_this.currentNumber), scan(function (acc, curr) { return acc + curr; }), tap(function (n) { return console.log(n); })
            //  takeWhile(this.takeUntil(endRange, this.currentNumber))
            );
        })).subscribe(function () { return _this.cd.detectChanges(); });
        return this.counter$;
    };
    /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    TrackerPipe.prototype.positiveOrNegative = /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    function (endRange, currentNumber) {
        return endRange > currentNumber ? 1 : -1;
    };
    /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    TrackerPipe.prototype.takeUntil = /**
     * @private
     * @param {?} endRange
     * @param {?} currentNumber
     * @return {?}
     */
    function (endRange, currentNumber) {
        return endRange > currentNumber
            ? function (val) { return val <= endRange; }
            : function (val) { return val >= endRange; };
    };
    TrackerPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'erTracker'
                },] }
    ];
    /** @nocollapse */
    TrackerPipe.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    return TrackerPipe;
}());
export { TrackerPipe };
if (false) {
    /** @type {?} */
    TrackerPipe.prototype.currentNumber;
    /** @type {?} */
    TrackerPipe.prototype.counter$;
    /**
     * @type {?}
     * @private
     */
    TrackerPipe.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9jb3JlLyIsInNvdXJjZXMiOlsibGliL3BpcGVzL3RyYWNrZXIvcGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLGlCQUFpQixFQUFFLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUN2QyxPQUFPLEVBQUMsZUFBZSxFQUFjLEtBQUssRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUN4RCxPQUFPLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXRFO0lBU0UscUJBQW9CLEVBQXFCO1FBQXJCLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBSnpDLGtCQUFhLEdBQUcsQ0FBQyxDQUFDO1FBRWxCLGFBQVEsR0FBRyxJQUFJLGVBQWUsQ0FBUyxDQUFDLENBQUMsQ0FBQztRQUd4QyxrQkFBa0I7SUFDcEIsQ0FBQzs7Ozs7O0lBRUQsK0JBQVM7Ozs7O0lBQVQsVUFBVSxNQUFjLEVBQUUsTUFBbUI7UUFBN0MsaUJBaUJDO1FBakJ5Qix1QkFBQSxFQUFBLFdBQW1CO1FBQzNDLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxHQUFHLFlBQVksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxRQUFRO2FBQ1YsSUFBSSxDQUNILFNBQVMsQ0FBQyxVQUFBLFFBQVE7WUFDaEIsT0FBTyxLQUFLLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQztpQkFDcEIsSUFBSSxDQUNILEtBQUssQ0FBQyxLQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxFQUFFLEtBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUM1RCxTQUFTLENBQUMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxFQUM3QixJQUFJLENBQUMsVUFBQyxHQUFHLEVBQUUsSUFBSSxJQUFLLE9BQUEsR0FBRyxHQUFHLElBQUksRUFBVixDQUFVLENBQUMsRUFDL0IsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBZCxDQUFjLENBQUM7WUFDeEIsMkRBQTJEO2FBQzVELENBQUM7UUFDTixDQUFDLENBQUMsQ0FDSCxDQUFDLFNBQVMsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDOzs7Ozs7O0lBRU8sd0NBQWtCOzs7Ozs7SUFBMUIsVUFBMkIsUUFBUSxFQUFFLGFBQWE7UUFDaEQsT0FBTyxRQUFRLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7Ozs7Ozs7SUFFTywrQkFBUzs7Ozs7O0lBQWpCLFVBQWtCLFFBQVEsRUFBRSxhQUFhO1FBQ3ZDLE9BQU8sUUFBUSxHQUFHLGFBQWE7WUFDN0IsQ0FBQyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxJQUFJLFFBQVEsRUFBZixDQUFlO1lBQ3hCLENBQUMsQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsSUFBSSxRQUFRLEVBQWYsQ0FBZSxDQUFDO0lBQzdCLENBQUM7O2dCQXhDRixJQUFJLFNBQUM7b0JBQ0osSUFBSSxFQUFFLFdBQVc7aUJBQ2xCOzs7O2dCQVBPLGlCQUFpQjs7SUErQ3pCLGtCQUFDO0NBQUEsQUExQ0QsSUEwQ0M7U0F2Q1ksV0FBVzs7O0lBRXRCLG9DQUFrQjs7SUFFbEIsK0JBQTBDOzs7OztJQUU5Qix5QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdG9yUmVmLCBQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwVG8sIHNjYW4sIHN0YXJ0V2l0aCwgc3dpdGNoTWFwLCB0YXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQFBpcGUoe1xuICBuYW1lOiAnZXJUcmFja2VyJ1xufSlcbmV4cG9ydCBjbGFzcyBUcmFja2VyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gIGN1cnJlbnROdW1iZXIgPSAwO1xuXG4gIGNvdW50ZXIkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxudW1iZXI+KDApO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgLy8gICAuc3Vic2NyaWJlKCk7XG4gIH1cblxuICB0cmFuc2Zvcm0obnVtYmVyOiBudW1iZXIsIG9mZnNldDogbnVtYmVyID0gMjApOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xuICAgIHRoaXMuY3VycmVudE51bWJlciA9IG51bWJlciAtIENvbW1vbnNVdGlscy5nZXRSYW5kb21OdW1iZXIob2Zmc2V0KTtcbiAgICB0aGlzLmNvdW50ZXIkLm5leHQodGhpcy5jdXJyZW50TnVtYmVyKTtcbiAgICB0aGlzLmNvdW50ZXIkXG4gICAgICAucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKGVuZFJhbmdlID0+IHtcbiAgICAgICAgICByZXR1cm4gdGltZXIoMTAwMCwgMjAwKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgIG1hcFRvKHRoaXMucG9zaXRpdmVPck5lZ2F0aXZlKGVuZFJhbmdlLCB0aGlzLmN1cnJlbnROdW1iZXIpKSxcbiAgICAgICAgICAgICAgc3RhcnRXaXRoKHRoaXMuY3VycmVudE51bWJlciksXG4gICAgICAgICAgICAgIHNjYW4oKGFjYywgY3VycikgPT4gYWNjICsgY3VyciksXG4gICAgICAgICAgICAgIHRhcChuID0+IGNvbnNvbGUubG9nKG4pKVxuICAgICAgICAgICAgICAvLyAgdGFrZVdoaWxlKHRoaXMudGFrZVVudGlsKGVuZFJhbmdlLCB0aGlzLmN1cnJlbnROdW1iZXIpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICkuc3Vic2NyaWJlKCgpID0+IHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpKTtcbiAgICByZXR1cm4gdGhpcy5jb3VudGVyJDtcbiAgfVxuXG4gIHByaXZhdGUgcG9zaXRpdmVPck5lZ2F0aXZlKGVuZFJhbmdlLCBjdXJyZW50TnVtYmVyKSB7XG4gICAgcmV0dXJuIGVuZFJhbmdlID4gY3VycmVudE51bWJlciA/IDEgOiAtMTtcbiAgfVxuXG4gIHByaXZhdGUgdGFrZVVudGlsKGVuZFJhbmdlLCBjdXJyZW50TnVtYmVyKSB7XG4gICAgcmV0dXJuIGVuZFJhbmdlID4gY3VycmVudE51bWJlclxuICAgICAgPyB2YWwgPT4gdmFsIDw9IGVuZFJhbmdlXG4gICAgICA6IHZhbCA9PiB2YWwgPj0gZW5kUmFuZ2U7XG4gIH1cblxufVxuIl19