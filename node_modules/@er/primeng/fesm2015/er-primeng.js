import { ImageToolsService } from '@er/image-editor';
import { DomSanitizer } from '@angular/platform-browser';
import { ConfirmationService, MessageService } from 'primeng/api';
import { simpleQueryStringQuery, rangeQuery, matchQuery } from 'elastic-builder';
import { ValidateUtils } from '@er/validate';
import { ActivatedRoute, Router, NavigationEnd } from '@angular/router';
import { DEFAULT_BUTTON_PROPS, ANIMATIONS } from '@er/presets';
import 'primeng/tree';
import { ToastModule } from 'primeng/toast';
import { TableModule } from 'primeng/table';
import { OverlayPanel, Dropdown, Menu, DomHandler, AccordionModule, AutoCompleteModule, BreadcrumbModule, ButtonModule, CalendarModule, CardModule, ChartModule, CheckboxModule, ChipsModule, ConfirmDialogModule, DialogModule, DropdownModule, EditorModule, FieldsetModule, FileUploadModule, InputMaskModule, InputSwitchModule, InputTextareaModule, InputTextModule, KeyFilterModule, LightboxModule, ListboxModule, MenuModule, MessagesModule, MultiSelectModule, OrganizationChartModule, OverlayPanelModule, PaginatorModule, PanelModule, RadioButtonModule, RatingModule, ScrollPanelModule, SelectButtonModule, SliderModule, SpinnerModule, SplitButtonModule, StepsModule, TabViewModule, ToggleButtonModule, TooltipModule, TreeModule } from 'primeng/primeng';
import { BehaviorSubject, Subject, of } from 'rxjs';
import { NG_VALUE_ACCESSOR, ControlContainer, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { ChartType, StateNames, HttpMethod, NotifyLevel, HttpResponseType, NotifyType, UiPosition, DataAttr, DataType, AggMethodsProps, Order, OverlayType, EsQueryMethods, AggMethods } from '@er/types';
import { filter, map, takeUntil, skip, distinctUntilChanged } from 'rxjs/operators';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { Component, forwardRef, Input, ChangeDetectionStrategy, EventEmitter, Output, ChangeDetectorRef, ViewChild, ElementRef, Renderer2, HostListener, Optional, ContentChildren, NgModule, HostBinding, ViewChildren } from '@angular/core';
import { DataAwareControlWrapperComponent, WrapperComponent, BaseComponent, ControlWrapperComponent, ApiUtils, HttpUtils, LogUtils, DiUtils, DataFieldUtils, HTTP_TAG_STATE$, RouteBindComponent, SelectorDirective, ErCoreModule, AuthUtils, RouteUtils } from '@er/core';
import { CommonsUtils, DateUtils, ChartUtils, IdUtils, DataItemUtils, StatesUtils, ConfigUtils, DialogUtils, DomUtils, FormUtils, PinyinUtil, RegUtils, TreeUtils } from '@er/utils';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_PNG_AUTO_COMPLETE_PROPS = {
    minLength: 0,
    size: 10,
    dropdown: true,
    forceSelection: true,
    $ext: {
        apiDataProps: {
            dataPath: 'items',
            autoFetch: false
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngAutoCompleteComponent extends DataAwareControlWrapperComponent {
    constructor() {
        super(...arguments);
        this.valueParser = this.parseValue;
        this.$defaultProps = DEFAULT_PNG_AUTO_COMPLETE_PROPS;
    }
    /**
     * @return {?}
     */
    onPropsInit() {
        super.onPropsInit();
        /** @type {?} */
        let placeholder = '请输入';
        if (this.$props.$ext.apiDataProps) {
            if (!this.$props.$ext.apiDataProps.withPrefix &&
                !this.$props.$ext.apiDataProps.withTerm &&
                !this.$props.$ext.apiDataProps.withWildcard) {
                this.$props.$ext.apiDataProps.withPy = this.$props.$ext.apiDataProps.withPy || true;
                this.$props.$ext.apiDataProps.withZh = this.$props.$ext.apiDataProps.withZh || true;
            }
            if (!this.$props.placeholder) {
                if (this.$props.$ext.apiDataProps.withPy) {
                    placeholder += '拼音首字母，';
                }
                if (this.$props.$ext.apiDataProps.withZh) {
                    placeholder += '汉字关键字';
                }
                placeholder += '筛选';
                this.$props.placeholder = placeholder;
            }
        }
        if (this.$props.$ext.dataItemProps) {
            if (!this.$props.field && CommonsUtils.isString(this.$props.$ext.dataItemProps.labelKey)) {
                this.$props.field = (/** @type {?} */ (this.$props.$ext.dataItemProps.labelKey));
            }
            if (this.$props.$ext.dataItemProps.showCounter) {
                if (!this.$props.$ext.apiDataProps.aggProps) {
                    /** @type {?} */
                    const fields = this.$props.$ext.apiDataProps.returnFields;
                    this.$props.$ext.apiDataProps.aggProps = fields;
                }
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    complete(event) {
        this.apiDataProps = Object.assign({}, this.apiDataProps, { queryValue: event.query });
    }
}
PngAutoCompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-auto-complete',
                template: `
    <div class="inner-addon">
      <p-autoComplete
        [(ngModel)]="value"
        erPropsBind
        [props]="$props"
        [context]="ctx"
        [erApiData]="apiDataProps"
        (completeMethod)="complete($event)"
        [suggestions]="data$|async"
        (onBlur)="updateTouch()"
      >
        <ng-template let-item pTemplate="item">
          <er-data-item [customerTpl]="template('_')"
                        [item]="item"
                        [props]="$props.$ext.dataItemProps"
          >
          </er-data-item>
        </ng-template>
      </p-autoComplete>
      <i *ngIf="value && resettable && !disabled" title="清除输入内容" class="fa fa-trash text-muted right" [ngClass]="$props.dropdown? 'clear1': 'clear2'" (click)="reset()"></i>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngAutoCompleteComponent),
                        multi: true
                    }],
                styles: [".clear1{right:22px!important}.clear2{right:2px!important}"]
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngButtonComponent extends WrapperComponent {
    /**
     * @return {?}
     */
    get isHidden() {
        if (this.$props && this.$props.hidden) {
            return CommonsUtils.getValue(this.$props.hidden, this.outputContext) || false;
        }
        return false;
    }
    /**
     * @return {?}
     */
    onPropsInit() {
        /** @type {?} */
        const btnProps = CommonsUtils.copy(this.$props || {});
        if (btnProps.menu) {
            btnProps.menu.forEach(item => {
                if (item.command) {
                    /** @type {?} */
                    const command = item.command;
                    item.command = (event) => this.onMenuCommand(command, event);
                }
            });
        }
        this.$props = Object.assign({}, DEFAULT_BUTTON_PROPS, btnProps);
    }
    /**
     * @param {?} command
     * @param {?} event
     * @return {?}
     */
    onMenuCommand(command, event) {
        command.call(this, Object.assign({}, event || {}, this.outputContext || {}));
    }
    /**
     * @param {?} state
     * @return {?}
     */
    setState(state$$1) {
        this.icon = state$$1 ? 'fa fa-cog fa-spin' : this.$props['icon'];
    }
}
PngButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-button',
                template: "<ng-container *ngIf=\"!isHidden\">\n  <p-splitButton *ngIf=\"$props?.menu\"\n                 erPropsBind\n                 [props]=\"$props\"\n                 [context]=\"outputContext\"\n  >\n  </p-splitButton>\n  <p-button *ngIf=\"!$props?.menu\" [title]=\"$props?.title || ''\"\n            erPropsBind\n            [props]=\"$props\"\n            [context]=\"outputContext\"\n  >\n  </p-button>\n</ng-container>\n"
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngButtonsComponent extends BaseComponent {
    /**
     * @return {?}
     */
    get hasOverlay() {
        return this.btns && this.btns.some(btn => !!btn.overlay);
    }
    /**
     * @param {?} event
     * @param {?} panel
     * @return {?}
     */
    toggle(event, panel) {
        panel.toggle(event);
    }
}
PngButtonsComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-buttons',
                template: "<div [ngClass]=\"styleClass\" [ngStyle]=\"style\">\n  <ng-container *ngIf=\"btns\">\n    <div class=\"d-flex\">\n      <ng-container *ngFor=\"let btn of btns\">\n        <ng-container *ngIf=\"!btn.overlay\">\n          <png-button [outputContext]=\"context || btn.context\" [props]=\"btn\" class=\"mr-2 w-100\"\n                      erPropsBind></png-button>\n        </ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"hasOverlay\">\n        <button pButton title=\"\u66F4\u591A\u64CD\u4F5C...\" icon=\"fa fa-caret-down\"\n                (click)=\"toggle($event, buttonsOverlayPanel)\"></button>\n        <p-overlayPanel #buttonsOverlayPanel [dismissable]=\"true\" appendTo=\"body\">\n        <span *ngFor=\"let btn of btns\">\n          <ng-container *ngIf=\"btn.overlay\">\n           <png-button class=\"ml-2\" erPropsBind [props]=\"btn\" [outputContext]=\"context || btn.context\"></png-button>\n          </ng-container>\n        </span>\n        </p-overlayPanel>\n      </ng-container>\n    </div>\n  </ng-container>\n</div>\n"
            }] }
];
PngButtonsComponent.propDecorators = {
    context: [{ type: Input }],
    btns: [{ type: Input }],
    style: [{ type: Input }],
    styleClass: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const CALENDAR_LOCAL_CN = {
    firstDayOfWeek: 0,
    dayNames: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
    dayNamesShort: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
    dayNamesMin: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
    monthNames: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
    monthNamesShort: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
    today: '今天',
    clear: '清除'
};
/** @type {?} */
const DEFAULT_CALENDAR_PROPS = {
    dateFormat: 'yy-mm-dd',
    hourFormat: '24',
    locale: CALENDAR_LOCAL_CN,
    monthNavigator: true,
    yearNavigator: true,
    showIcon: true,
    readonlyInput: false,
    yearRange: '2000:2030',
    showButtonBar: true
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngCalendarComponent extends ControlWrapperComponent {
    constructor() {
        super(...arguments);
        this.modelFormatter = this.formatter;
        this.today = DateUtils.getDay();
        this.templateNames = {
            header: 'header',
            footer: 'footer',
            date: 'date'
        };
        this.$defaultProps = DEFAULT_CALENDAR_PROPS;
    }
    /**
     * @param {?} model
     * @return {?}
     */
    formatter(model) {
        if (model) {
            return DateUtils.toDate(model);
        }
    }
}
PngCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-calendar',
                template: `
    <p-calendar
      [(ngModel)]="value"
      erPropsBind
      [props]="$props"
      [context]="ctx"
      [monthNavigator]="$props.monthNavigator"
      [yearNavigator]="$props.yearNavigator"
      [yearRange]="$props.yearRange"
      (onBlur)="updateTouch()"
    >
      <p-header *ngIf="template(templateNames.header)">
        <ng-container *ngTemplateOutlet="template(templateNames.header)"></ng-container>
      </p-header>

      <p-footer *ngIf="template(templateNames.footer)">
        <ng-container *ngTemplateOutlet="template(templateNames.footer)"></ng-container>
      </p-footer>
      
      <ng-template pTemplate="date" let-date>
        <ng-container *ngTemplateOutlet="template(templateNames.date, dateTpl);context:{$implicit: date}"></ng-container>
      </ng-template>
    </p-calendar>

    <ng-template #dateTpl let-date>
      <span [ngClass]="{'bg-red white': (date.day === today)}"
            style="border-radius:50%;">{{date.day}}</span>
    </ng-template>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngCalendarComponent),
                        multi: true
                    }]
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngChartComponent extends BaseComponent {
    constructor() {
        super(...arguments);
        this.type = ChartType.BAR;
        this.plugins = [];
        this.responsive = true;
        this.switchable = true;
        this.templateNames = {
            header: 'header'
        };
        this.onDataSelect = new EventEmitter();
        this.data$ = new BehaviorSubject(undefined);
        this.chartTypes = [
            { label: '柱状图', value: ChartType.BAR, icon: 'fa fa-bar-chart' },
            { label: '圆饼图', value: ChartType.PIE, icon: 'fa fa-pie-chart' },
            { label: '曲线图', value: ChartType.LINE, icon: 'fa fa-line-chart' },
            { label: '雷达图', value: ChartType.RADAR, icon: 'fa fa-bar' },
            { label: '区域图', value: ChartType.AREA, icon: 'fa fa-area-chart' },
            { label: '环形图', value: ChartType.DOUGHNUT, icon: 'fa fa-circle' }
        ];
    }
    /**
     * @return {?}
     */
    get data() {
        return this.data$.value;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this.data$.next(data || {});
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.rawData = undefined;
        this.buildChart();
    }
    /**
     * @return {?}
     */
    changeType() {
        this.buildChart();
    }
    /**
     * @return {?}
     */
    reBuildChart() {
        this.rawData = undefined;
        this.buildChart();
    }
    /**
     * @return {?}
     */
    buildChart() {
        if (!this.$id) {
            this.$id = IdUtils.getRandom();
        }
        if (this.rawData) {
            this.resolvedRawData(this.rawData);
        }
        else if (this.dataSource) {
            /** @type {?} */
            let ds = this.dataSource;
            if (!ds.hasOwnProperty('apiDataProps')) {
                /** @type {?} */
                const apiDataProps = ds;
                ds = {};
                ds['apiDataProps'] = apiDataProps;
            }
            if (this.resolveDataSource) {
                ds = this.resolveDataSource.method((/** @type {?} */ (ds)));
            }
            ApiUtils.batchFetch(ds, this.$id)
                .subscribe(data => {
                this.rawData = data;
                this.resolvedRawData(this.rawData);
            });
        }
    }
    /**
     * @param {?} rawData
     * @return {?}
     */
    resolvedRawData(rawData) {
        if (!CommonsUtils.isEmpty(rawData)) {
            /** @type {?} */
            let data;
            /** @type {?} */
            const datasets = [];
            /** @type {?} */
            let labels = [];
            if (CommonsUtils.isFunction(this.dimensions)) {
                data = ((/** @type {?} */ (this.dimensions)))(rawData);
            }
            else {
                if (this.dimensions) {
                    /** @type {?} */
                    const dimensions = CommonsUtils.getArrayValue(this.dimensions);
                    dimensions.forEach((dimension, index) => {
                        if (this.resolveDimension) {
                            dimension = this.resolveDimension.method(dimension);
                        }
                        /** @type {?} */
                        const chartData = ChartUtils.buildChartData(rawData, {
                            type: this.type,
                            dimension: dimension,
                            dataItemProps: this.dataItemProps
                        }, index);
                        datasets.push(...chartData.datasets);
                        if (labels.length === 0) {
                            labels = chartData.labels;
                        }
                    });
                    data = { labels, datasets };
                }
                else {
                    data = ChartUtils.buildChartData(rawData, {
                        type: this.type,
                        dataItemProps: this.dataItemProps
                    });
                }
            }
            this.data = data;
        }
        else {
            this.data = {};
        }
    }
}
PngChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-chart',
                template: `
    <p-panel [toggleable]="true" [showHeader]="!!caption">
      <p-header>
        <i [ngClass]="captionIcon || 'fa fa-bar-chart'"></i>
        <span [innerHTML]="caption|erSafeHtml"></span>
        <ng-container *ngTemplateOutlet="templates[templateNames.header]"></ng-container>
      </p-header>
      <er-http-status class="mr-2" [tag]="$id"></er-http-status>
      <div class="p-3" *ngIf="switchable">
        <p-selectButton erPosition="center" [options]="chartTypes" [(ngModel)]="type" (onChange)="changeType()"></p-selectButton>
      </div>
      <p-chart
        [type]="type"
        [options]="options"
        [data]="data$|async"
        [plugins]="plugins"
        [width]="width "
        [height]="height"
        [responsive]="responsive"
        (onDataSelect)="onDataSelect.emit($event)"
      >
      </p-chart>
    </p-panel>

  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
PngChartComponent.propDecorators = {
    $id: [{ type: Input }],
    type: [{ type: Input }],
    rawData: [{ type: Input }],
    options: [{ type: Input }],
    caption: [{ type: Input }],
    captionIcon: [{ type: Input }],
    query: [{ type: Input }],
    plugins: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    responsive: [{ type: Input }],
    switchable: [{ type: Input }],
    dataSource: [{ type: Input }],
    dataItemProps: [{ type: Input }],
    dimensions: [{ type: Input }],
    resolveDataSource: [{ type: Input }],
    resolveDimension: [{ type: Input }],
    onDataSelect: [{ type: Output }],
    data: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_CHECK_BOX_PROPS = {
    $ext: {
        inline: true
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngCheckBoxComponent extends DataAwareControlWrapperComponent {
    constructor() {
        super(...arguments);
        this.valueParser = this.parseValue;
        this.modelFormatter = this.formatModel;
        this.$defaultProps = DEFAULT_CHECK_BOX_PROPS;
    }
    /**
     * @return {?}
     */
    get chkValue() {
        return this._chkValue;
    }
    /**
     * @param {?} values
     * @return {?}
     */
    set chkValue(values) {
        this._chkValue = values;
        /** @type {?} */
        const data = this.data$.value;
        if (CommonsUtils.isArray(data)) {
            /** @type {?} */
            const objectValues = [];
            values.forEach(value => {
                /** @type {?} */
                const matched = ((/** @type {?} */ (data))).filter(v => v[this.dataKey] === value);
                if (matched.length === 1) {
                    objectValues.push(DataItemUtils.getItemValue(matched[0], this.valueKey));
                }
            });
            this.value = objectValues.length > 0 ? objectValues : null;
        }
        else {
            this.value = values;
        }
    }
    /**
     * @return {?}
     */
    get dataKey() {
        return CommonsUtils.get(this.$props, '$ext.dataItemProps.idKey', 'value');
    }
    /**
     * @return {?}
     */
    get valueKey() {
        return CommonsUtils.get(this.$props, '$ext.dataItemProps.valueKey', 'value');
    }
    /**
     * @param {?} model
     * @return {?}
     */
    formatModel(model) {
        if (this.$props && !this.$props.label && model) {
            /** @type {?} */
            const models = CommonsUtils.getArrayValue(model);
            this._chkValue = [];
            models.forEach(m => {
                if (CommonsUtils.isJson(m)) {
                    this._chkValue.push(DataItemUtils.getItemValue(m, this.dataKey));
                }
                else {
                    this._chkValue.push(m);
                }
            });
            return models;
        }
        else {
            return model;
        }
    }
}
PngCheckBoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-check-box',
                template: `
    <ng-container *ngIf="$props.label;else multiTpl">
      <p-checkbox
        class="m-2"
        [(ngModel)]="value"
        erPropsBind
        [props]="$props"
        [context]="ctx"
        binary="true"
        (onChange)="updateTouch()"
      >
      </p-checkbox>
    </ng-container>
    <ng-template #multiTpl>
      <div class="d-flex pb-2"
           [ngClass]="$props.$ext['inline']===false?'flex-column':'flex-wrap'"
           [erApiData]="apiDataProps"
      >
        <ng-container *ngFor="let option of data$|async|erDataItems:$props.$ext.dataItemProps;let i=index">
          <span class="d-flex align-items-center">
             <p-checkbox
               class="m-2"
               [(ngModel)]="chkValue"
               [attr.index]="i"
               erPropsBind
               [props]="$props"
               [context]="ctx"
               [value]="option.data|erValue:dataKey"
               (onChange)="updateTouch()"
             >
             </p-checkbox>
             <span class="mr-4" [innerHTML]="option.label|erSafeHtml"></span>
          </span>
        </ng-container>
      </div>
    </ng-template>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngCheckBoxComponent),
                        multi: true
                    }]
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_CONFIRM_DIALOG_PROPS = {
    width: 300,
    closeOnEscape: true,
    rtl: false,
    closable: true,
    responsive: true,
    header: '操作确认',
    icon: 'fa fa-question-circle-o text-danger',
    acceptLabel: '确定',
    acceptIcon: 'fa-check text-success',
    acceptVisible: true,
    rejectLabel: '取消',
    rejectIcon: 'fa-close text-danger',
    rejectVisible: true
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngConfirmDialogComponent extends BaseComponent {
    /**
     * @param {?} confirmationService
     * @param {?} cd
     */
    constructor(confirmationService, cd) {
        super();
        this.confirmationService = confirmationService;
        this.cd = cd;
        this.options = {};
        this.onAccept = new EventEmitter();
        this.onReject = new EventEmitter();
        this.dlgOptions = {};
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dlgOptions = Object.assign({}, DEFAULT_CONFIRM_DIALOG_PROPS, { header: this.header, content: this.content, acceptEvent: this.onAccept, rejectEvent: this.onReject }, this.options);
        this.$subscriptions = StatesUtils.observe(StateNames.confirm)
            .pipe(filter(state$$1 => state$$1 && state$$1.open))
            .subscribe(state$$1 => {
            this.open(state$$1);
        });
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    open(options) {
        if (options) {
            this.dlgOptions = Object.assign({}, DEFAULT_CONFIRM_DIALOG_PROPS, options);
        }
        this.confirmationService.confirm(this.getConfirmation(this.dlgOptions));
        this.cd.detectChanges();
    }
    /**
     * @param {?} modal
     * @return {?}
     */
    getConfirmation(modal) {
        return {
            message: modal.content,
            icon: modal.icon,
            header: modal.header,
            acceptVisible: modal.acceptVisible,
            rejectVisible: modal.rejectVisible,
            acceptLabel: modal.acceptLabel,
            rejectLabel: modal.rejectLabel,
            accept: this.accept.bind(this),
            reject: this.reject.bind(this)
        };
    }
    /**
     * @return {?}
     */
    accept() {
        this.onAccept.emit();
        if (this.dlgOptions.onAccept) {
            this.dlgOptions.onAccept.call(this.dlgOptions.context, true);
        }
        StatesUtils.create(StateNames.confirm, {
            open: false,
            accept: true,
            reject: false
        });
    }
    /**
     * @return {?}
     */
    reject() {
        this.onReject.emit();
        if (this.options.onReject) {
            this.options.onReject.call(this.options.context, false);
        }
        StatesUtils.create(StateNames.confirm, {
            open: false,
            accept: false,
            reject: true
        });
    }
}
PngConfirmDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-confirm-dialog',
                template: `
    <p-confirmDialog #dlg>
      <p-footer>
        <button type="button" class="ui-button-rounded ui-button-success" *ngIf="dlgOptions.acceptVisible" pButton icon="pi pi-check"
                [label]="dlgOptions.acceptLabel"
                (click)="dlg.accept()"></button>
        <button type="button" class="ui-button-rounded ui-button-danger" *ngIf="dlgOptions.rejectVisible" pButton icon="pi pi-times"
                [label]="dlgOptions.rejectLabel"
                (click)="dlg.reject()"></button>
      </p-footer>
    </p-confirmDialog>`,
                providers: [ConfirmationService],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }] }
];
/** @nocollapse */
PngConfirmDialogComponent.ctorParameters = () => [
    { type: ConfirmationService },
    { type: ChangeDetectorRef }
];
PngConfirmDialogComponent.propDecorators = {
    header: [{ type: Input }],
    content: [{ type: Input }],
    options: [{ type: Input }],
    onAccept: [{ type: Output }],
    onReject: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_PNG_FILE_UPLOAD_PROPS = (/** @type {?} */ ({
    accept: 'image/*',
    name: 'files',
    files: [],
    multiple: false,
    previewWidth: 50,
    invalidFileSizeMessageSummary: '"{0}: 文件大小无效, "',
    invalidFileSizeMessageDetail: '"最大上传文件大小 {0}."',
    invalidFileTypeMessageSummary: '"{0}: 无效的文件类型, "',
    invalidFileTypeMessageDetail: '"可上传的文件类型: {0}."',
    chooseLabel: '选择',
    uploadLabel: '上传',
    cancelLabel: '取消',
    $ext: {
        attrsName: 'attrs',
        waterMark: '公司名称',
        maxSize: 0.5,
        maxHeight: 200,
        maxWidth: 300,
        smallSize: 50,
        storeTo: 'db'
    }
}));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFileUploadComponent extends ControlWrapperComponent {
    /**
     * @param {?} imageToolsService
     * @param {?} sanitizer
     * @param {?} cd
     */
    constructor(imageToolsService, sanitizer, cd) {
        super();
        this.imageToolsService = imageToolsService;
        this.sanitizer = sanitizer;
        this.cd = cd;
        this.selectedFiles$ = new BehaviorSubject([]);
        this.uploadedFiles = [];
        this.$defaultProps = DEFAULT_PNG_FILE_UPLOAD_PROPS;
        this.showUpload = true;
        this.uploadProgress$ = new Subject();
        this.processing$ = new Subject();
        this.fileAttrs = {};
    }
    /**
     * @return {?}
     */
    get uploadValue() {
        if (!this.value) {
            return this.value;
        }
        return CommonsUtils.getArrayValue(this.value);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    fileIcon(file) {
        /** @type {?} */
        let ext = (this.fileUpload.getFileExtension(file) || '').toLowerCase();
        ext = ext.substring(1, 4);
        /** @type {?} */
        const exts = ['txt', 'doc', 'xls', '.pdf', '.zip'];
        /** @type {?} */
        let icon;
        switch (ext) {
            case 'txt':
                icon = 'text';
                break;
            case 'xls':
                icon = 'excel';
                break;
            case 'doc':
                icon = 'word';
                break;
            case 'zip':
                icon = 'zip';
                break;
            case 'pdf':
                icon = 'pdf';
                break;
            case 'mp3':
                icon = 'audio';
                break;
            case 'mp4':
                icon = 'video';
                break;
            default:
                icon = exts.indexOf(ext) >= 0 ? ext : undefined;
        }
        return icon ? `file-${icon}-o` : 'file-o';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        super.writeValue(model);
        this.showUpload = !((model && this.$props && !this.$props.multiple));
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    onPropsInit() {
        super.onPropsInit();
        if (!this.$props.url) {
            this.$props.url = `${ConfigUtils.getConfig().api.servers.image.uri}`;
            LogUtils.debug(this, '文件上传路径', this.$props.url);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSelect(event) {
        /** @type {?} */
        const files = event.files;
        for (let i = 0; i < files.length; i++) {
            /** @type {?} */
            const file = files[i];
            this.processing$.next(true);
            this.imageToolsService.resizeImage(file, this.$props.$ext.maxWidth, this.$props.$ext.maxHeight).subscribe(result => {
                this.imageToolsService.compressImage(result, this.$props.$ext.maxSize).subscribe(final => {
                    final['objectURL'] = this.sanitizer.bypassSecurityTrustUrl((URL.createObjectURL(final)));
                    this.selectedFiles$.next(this.selectedFiles$.value.concat(final));
                    this.processing$.next(false);
                    this.fileUpload.files = this.fileUpload.files.map(f => f.name === file.name ? final : f);
                });
            });
        }
    }
    /**
     * @param {?} event
     * @param {?} i
     * @return {?}
     */
    delete(event, i) {
        /** @type {?} */
        const files = this.selectedFiles$.value;
        files.splice(i, 1);
        this.selectedFiles$.next(files);
        this.fileUpload.remove(event, i);
    }
    /**
     * @param {?} fileId
     * @return {?}
     */
    remove(fileId) {
        this.$subscriptions = HttpUtils.request({
            uri: `${ConfigUtils.getConfig().api.servers.image.uri}/${fileId}`,
            method: HttpMethod.DELETE
        }).subscribe(resp => {
            if (resp && resp.success) {
                if (this.$props.multiple) {
                    this.value = this.value.filter(v => v !== fileId);
                }
                else {
                    this.value = undefined;
                }
                this.showUpload = true;
                this.cd.detectChanges();
            }
        });
    }
    /**
     * @param {?} event
     * @param {?} file
     * @return {?}
     */
    setFileAttr(event, file) {
        this.fileAttrs[file.name] = event.target.value;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBeforeSend(event) {
        /** @type {?} */
        const formData = event.formData;
        formData.append(this.$props.$ext.attrsName, `waterMark=${this.$props.$ext.waterMark}`);
        formData.append(this.$props.$ext.attrsName, `smallSize=${this.$props.$ext.smallSize}`);
        formData.append(this.$props.$ext.attrsName, `storeTo=${this.$props.$ext.storeTo}`);
        if (!CommonsUtils.isEmpty(this.fileAttrs)) {
            Object.keys(this.fileAttrs).forEach(key => {
                formData.append(this.$props.$ext.attrsName, `${key}=${this.fileAttrs[key]}`);
            });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onProgress(event) {
        this.uploadProgress$.next(event.progress);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onUploadSuccess(event) {
        for (const file of event.files) {
            this.uploadedFiles.push(file);
        }
        /** @type {?} */
        const response = JSON.parse(event.xhr.responseText);
        if (response.success) {
            StatesUtils.create(StateNames.notify, {
                message: '文件上传成功',
                title: '提示'
            });
            if (this.$props.multiple) {
                this.value = [
                    ...this.value || [],
                    ...Object.keys(response.content).map(k => response.content[k])
                ];
            }
            else {
                this.value = Object.keys(response.content).map(k => response.content[k])[0];
                this.showUpload = false;
            }
            this.fileAttrs = {};
            this.selectedFiles$.next([]);
            this.uploadProgress$.next(undefined);
            this.cd.detectChanges();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onUploadFailed(event) {
        /** @type {?} */
        const response = JSON.parse(event.xhr.responseText);
        StatesUtils.create(StateNames.notify, {
            level: NotifyLevel.ERROR,
            message: response.message,
            title: '文件上传失败'
        });
        this.uploadProgress$.next(undefined);
    }
}
PngFileUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-file-upload',
                template: `
    <ng-container *ngIf="showUpload">
      <p-fileUpload
        #fileUpload
        erPropsBind
        [props]="$props || {}"
        [context]="ctx"
        (onSelect)="onSelect($event)"
        (onUpload)="onUploadSuccess($event)"
        (onError)="onUploadFailed($event)"
        (onProgress)="onProgress($event)"
        (onBeforeSend)="onBeforeSend($event)"
      >
        <ng-template pTemplate="toolbar">
          <div *ngIf="uploadProgress$|async as uploadProgress">
            <p-progressBar [value]="uploadProgress"></p-progressBar>
          </div>
        </ng-template>
        <ng-template pTemplate="file"></ng-template>
        <ng-template pTemplate="content">
          <span class="text-muted small" *ngIf="!fileUpload.hasFiles()">您也可以拖动文件到这里</span>
        </ng-template>
      </p-fileUpload>
      <div *ngIf="processing$|async"><i class="fa fa-spin fa-gears"></i>正在处理图片</div>
      <div class="ui-fileupload-row" *ngFor="let file of selectedFiles$|async; let i = index">
      <div>
        <span class="badge badge-info">{{i + 1}}</span>
      </div>
      <div>
        <png-image *ngIf="fileUpload.isImage(file)"
                   [src]="file['objectURL']" [imageStyle]="{width: $props.previewWidth + 'px'}">
        </png-image>
        <span *ngIf="!fileUpload.isImage(file)" class="fa fa-2x text-primary fa-{{fileIcon(file)}}"></span>
      </div>
      <div>{{file.name}}</div>
      <div>{{fileUpload.formatSize(file.size)}}<span class="text-danger">(压缩后)</span></div>
      <div>
        <input pInputText placeholder="图片描述信息" size="50" (change)="setFileAttr($event,file)"/>
      </div>
      <div>
        <button type="button" icon="pi pi-times white" pButton (click)="delete($event,i)"></button>
      </div>
    </div>
    </ng-container>

    <div *ngIf="uploadValue && uploadValue.length>0">
      <div style="text-decoration: underline;font-weight: bold">已上传文件：</div>
      <div class="ui-fileupload-row" *ngFor="let fileId of uploadValue">
        <div>
          <png-image [fileId]="fileId" size="small"
                     styleClass="d-flex align-items-center"
                     imageStyleClass="mr-3"
                     [imageStyle]="{width:$props.previewWidth}">
          </png-image>
        </div>
        <div>
          <button type="button" icon="pi pi-times white" pButton (click)="remove(fileId)"></button>
        </div>
      </div>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngFileUploadComponent),
                        multi: true
                    }]
            }] }
];
/** @nocollapse */
PngFileUploadComponent.ctorParameters = () => [
    { type: ImageToolsService },
    { type: DomSanitizer },
    { type: ChangeDetectorRef }
];
PngFileUploadComponent.propDecorators = {
    maxSize: [{ type: Input }],
    fileUpload: [{ type: ViewChild, args: ['fileUpload',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngImageComponent extends BaseComponent {
    /**
     * @param {?} cd
     * @param {?} sanitizer
     */
    constructor(cd, sanitizer) {
        super();
        this.cd = cd;
        this.sanitizer = sanitizer;
        this.imageViewStyle = { 'max-height': '300px', 'max-width': '500px', 'overflow': 'auto' };
        this.showDescription = true;
        this.descriptionChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get description() {
        return this._description;
    }
    /**
     * @param {?} description
     * @return {?}
     */
    set description(description) {
        this._description = description;
        this.descriptionChange.emit(description);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.src) {
            if (CommonsUtils.isArray(this.src)) {
                if (this.src.length === 1) {
                    this.images = undefined;
                    this.image = this.src[0];
                    this.fullImage = this.src[0];
                }
                else {
                    this.images = [];
                    this.image = this.src[0];
                    this.fullImage = this.src[0];
                    ((/** @type {?} */ (this.src))).forEach(image => {
                        if (CommonsUtils.isString(image)) {
                            this.images.push({ source: image });
                        }
                        else {
                            this.images.push(image);
                        }
                    });
                }
            }
            else {
                this.images = undefined;
                this.image = this.src;
                this.fullImage = this.src;
            }
        }
        if (changes.fileId) {
            /** @type {?} */
            let fileId;
            if (!this.fileId) {
                this.images = undefined;
                this.image = null;
            }
            else {
                if (CommonsUtils.isArray(this.fileId)) {
                    if (this.fileId.length === 0) {
                        this.images = undefined;
                        this.image = null;
                        return;
                    }
                    else {
                        fileId = this.fileId[0];
                    }
                }
                else {
                    fileId = this.fileId;
                }
                HttpUtils.request({
                    uri: `${ConfigUtils.getConfig().api.servers['image'].uri}/${fileId}${this.size ? '?' + this.size : ''}`,
                    observe: 'events',
                    responseType: HttpResponseType.BLOB
                }).subscribe(response => {
                    /** @type {?} */
                    const objectURL = this.sanitizer.bypassSecurityTrustUrl((window.URL.createObjectURL(response.body)));
                    this.images = undefined;
                    this.image = objectURL;
                    this.fullImage = `${ConfigUtils.getConfig().api.servers['image'].uri}/${fileId}`;
                    /** @type {?} */
                    const descriptions = response.headers.getAll('description');
                    if (descriptions && descriptions.length > 0) {
                        this.description = descriptions[0];
                    }
                    this.cd.detectChanges();
                });
            }
        }
    }
    /**
     * @return {?}
     */
    viewImage() {
        if (this.images) {
            this.imageViewer.show();
            this.imageViewer.center();
        }
        else if (this.image) {
            DialogUtils.info('图片预览', this.imageViewTpl, (/** @type {?} */ ({})));
        }
    }
}
PngImageComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-image',
                template: `
    <div [ngClass]="styleClass" [ngStyle]="style">
      <img *ngIf="image"
           style="margin: 5px"
           [src]="image"
           [ngClass]="imageStyleClass"
           [ngStyle]="imageStyle"
           [title]="description || ''"
           (click)="viewImage()"/>
      <div *ngIf="showDescription" [ngClass]="descriptionStyleClass" [ngStyle]="descriptionStyle">
        {{description}}
      </div>
    </div>
    <ng-template #imageView>
      <img [src]="fullImage" [ngStyle]="imageViewStyle" [ngClass]="imageViewStyleClass"/>
    </ng-template>
    <ng-template #imagesView>
      <p-lightbox [images]="images" [styleClass]="boxStyleClass" [style]="boxStyle"></p-lightbox>
    </ng-template>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngImageComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: DomSanitizer }
];
PngImageComponent.propDecorators = {
    src: [{ type: Input }],
    styleClass: [{ type: Input }],
    style: [{ type: Input }],
    imageStyleClass: [{ type: Input }],
    imageStyle: [{ type: Input }],
    descriptionStyleClass: [{ type: Input }],
    descriptionStyle: [{ type: Input }],
    boxStyleClass: [{ type: Input }],
    boxStyle: [{ type: Input }],
    imageViewStyleClass: [{ type: Input }],
    imageViewStyle: [{ type: Input }],
    showDescription: [{ type: Input }],
    size: [{ type: Input }],
    fileId: [{ type: Input }],
    imageViewTpl: [{ type: ViewChild, args: ['imageView',] }],
    imageViewer: [{ type: ViewChild, args: ['imagesView',] }],
    descriptionChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngInputComponent extends ControlWrapperComponent {
}
PngInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-input',
                template: `
    <div class="ui-inputgroup">
      <ng-container *ngIf="attrs?.$ext?.preIcon || attrs?.$ext?.preText">
        <span class="ui-inputgroup-addon"><i [ngClass]="attrs?.$ext?.preIcon"></i>{{attrs?.$ext?.preText}}</span>
      </ng-container>
      <png-buttons *ngIf="attrs?.$ext?.preButtons" [btns]="attrs.$ext.preButtons" [context]="ctx"></png-buttons>
      <ng-container *ngIf="attrs?.$ext?.floatLabel;else inputTpl">
       <span class="ui-float-label">
         <ng-container *ngTemplateOutlet="inputTpl"></ng-container>
         <label style="font-weight: bold;">{{attrs?.$ext.label}}</label>
       </span>
      </ng-container>
      <ng-template #inputTpl>
        <span class="w-100 inner-addon">
          <input pInputText
                 [(ngModel)]="value"
                 type="{{attrs?.type || 'text'}}"
                 erPropsBind
                 [attrs]="attrs"
                 [context]="ctx"
                 [pKeyFilter]="attrs?.$ext?.inputRule || 'alphanum'"
                 (blur)="updateTouch()"/>
          <i *ngIf="value && !disabled && resettable" title="清除输入内容" class="fa fa-trash gray right" (click)="reset()"></i>
       </span>
      </ng-template>
      <ng-container *ngIf="attrs?.$ext?.postIcon || attrs?.$ext?.postText">
        <span class="ui-inputgroup-addon"><i [ngClass]="attrs?.$ext?.postIcon"></i>{{attrs?.$ext?.postText}}</span>
      </ng-container>
      <png-buttons *ngIf="attrs?.$ext?.postButtons" [btns]="attrs.$ext.postButtons" [context]="ctx"></png-buttons>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngInputComponent),
                        multi: true
                    }],
                styles: [`
    .ui-float-label {
      width: 100%
    }

    .ui-float-label > label {
      font-size: 1em;
      color: inherit
    }
  `]
            }] }
];
PngInputComponent.propDecorators = {
    attrs: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_PNG_LIST_BOX_PROPS = {
    optionLabel: 'label',
    checkbox: true,
    multiple: true,
    showToggleAll: true,
    $ext: {
        dataItemProps: {
            itemStyleClass: 'd-inline-flex ml-2'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngListBoxComponent extends DataAwareControlWrapperComponent {
    constructor() {
        super(...arguments);
        this.templateNames = {
            header: 'header',
            footer: 'footer',
            item: 'item'
        };
        this.$defaultProps = DEFAULT_PNG_LIST_BOX_PROPS;
    }
}
PngListBoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-list-box',
                template: `
    <p-listbox
      [(ngModel)]="value"
      erPropsBind
      [props]="$props"
      [context]="ctx"
      [erApiData]="apiDataProps"
      [options]="data$|async"
      (onChange)="updateTouch()"
    >
      <p-header *ngIf="template(templateNames.header)">
        <ng-container *ngTemplateOutlet="template(templateNames.header)"></ng-container>
      </p-header>

      <p-header *ngIf="header">
        <div [innerHTML]="header"></div>
      </p-header>

      <p-footer *ngIf="template(templateNames.footer)">
        <ng-container *ngTemplateOutlet="template(templateNames.footer)"></ng-container>
      </p-footer>

      <p-footer *ngIf="$props.$ext['showValue'] || footer">
        <ng-container *ngIf="$props.$ext['showValue']">
          选中值：{{value | erValue: $props.$ext['field']}}
        </ng-container>
        <ng-container *ngIf="footer">
          <div [innerHTML]="footer"></div>
        </ng-container>
      </p-footer>

      <ng-template let-item let-i="index" pTemplate="item">
        <er-data-item [customerTpl]="template(templateNames.item)"
                      [item]="item.value"
                      [props]="$props.$ext.dataItemProps">
        </er-data-item>
      </ng-template>
    </p-listbox>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngListBoxComponent),
                        multi: true
                    }]
            }] }
];
PngListBoxComponent.propDecorators = {
    header: [{ type: Input }],
    footer: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_PNG_MULTI_SELECT_PROPS = {
    defaultLabel: '请选择',
    selectedItemsLabel: '选中{0} 项',
    filter: false,
    showToggleAll: true,
    $ext: {
        dataItemProps: {
            itemStyleClass: 'd-inline-flex ml-2'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngMultiSelectComponent extends DataAwareControlWrapperComponent {
    constructor() {
        super(...arguments);
        this.$defaultProps = DEFAULT_PNG_MULTI_SELECT_PROPS;
    }
}
PngMultiSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-multi-select',
                template: `
    <p-multiSelect
      [(ngModel)]="value"
      erPropsBind
      [props]="$props"
      [context]="ctx"
      [erApiData]="apiDataProps"
      [options]="data$|async|erDataItems:$props.$ext.dataItemProps"
      (onBlur)="updateTouch()"
    >
      <ng-template let-item pTemplate="item">
        <er-data-item [customerTpl]="template('_')"
                         [item]="item.data"
                         [props]="$props.$ext.dataItemProps">
        </er-data-item>
      </ng-template>
    </p-multiSelect>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngMultiSelectComponent),
                        multi: true
                    }]
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_ALERT_PROPS = {
    animation: true,
    duration: 3000,
    immutable: true,
    closable: true,
    autoZIndex: true,
    position: UiPosition.rightTop
};
class PngAlertComponent extends BaseComponent {
    /**
     * @param {?} messageService
     * @param {?} cd
     */
    constructor(messageService, cd) {
        super();
        this.messageService = messageService;
        this.cd = cd;
        this.alert = Object.assign({}, DEFAULT_ALERT_PROPS, ConfigUtils.getConfig().alert || {});
        this.defaultNotifyType = ConfigUtils.getConfig().notify || NotifyType.ALERT;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.$subscriptions = StatesUtils.observe(StateNames.notify)
            .pipe(filter(notify => notify && notify.message), filter(notify => notify.type === NotifyType.ALERT || (!notify.type && this.defaultNotifyType === NotifyType.ALERT))).subscribe(notify => {
            /** @type {?} */
            const model = this.getNotifyModel(notify);
            this.messageService.add(model);
            this.cd.detectChanges();
        });
    }
    /**
     * @param {?} notify
     * @return {?}
     */
    getNotifyModel(notify) {
        return {
            key: notify.key,
            severity: notify.level || NotifyLevel.INFO,
            summary: notify.title,
            detail: notify.message,
            sticky: notify.sticky || false,
            life: notify.duration || notify.level === NotifyLevel.ERROR ? DEFAULT_ALERT_PROPS.duration * 2 : DEFAULT_ALERT_PROPS.duration,
            closable: notify.closable || true,
            data: notify.data
        };
    }
}
PngAlertComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-alert',
                template: `
    <p-toast [styleClass]="alert.styleClass"
             [style]="alert.style"
             [position]="alert.position"
             [autoZIndex]="alert.autoZIndex"
    ></p-toast>
  `,
                providers: [MessageService],
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngAlertComponent.ctorParameters = () => [
    { type: MessageService },
    { type: ChangeDetectorRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_ANNOUNCE_PROPS = {
    level: NotifyLevel.INFO,
    animation: true,
    closable: true,
    baseZIndex: 2000
};
class PngAnnounceComponent extends BaseComponent {
    /**
     * @param {?} messageService
     * @param {?} cd
     */
    constructor(messageService, cd) {
        super();
        this.messageService = messageService;
        this.cd = cd;
        this.announce = Object.assign({}, DEFAULT_ANNOUNCE_PROPS, ConfigUtils.getConfig().announce || {});
        this.defaultNotifyType = ConfigUtils.getConfig().notify;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.$subscriptions = StatesUtils.observe(StateNames.notify)
            .pipe(filter(notify => notify && notify.message), filter(notify => notify.type === NotifyType.ANNOUNCE || (!notify.type && this.defaultNotifyType === NotifyType.ANNOUNCE))).subscribe(notify => {
            /** @type {?} */
            const model = this.getNotifyModel(notify);
            this.messageService.add(model);
            this.cd.detectChanges();
        });
    }
    /**
     * @param {?} notify
     * @return {?}
     */
    getNotifyModel(notify) {
        return {
            key: notify.key,
            severity: notify.level || NotifyLevel.INFO,
            summary: notify.title,
            detail: notify.message,
            closable: notify.closable,
            data: notify.data
        };
    }
}
PngAnnounceComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-announce',
                template: `
    <p-messages [styleClass]="announce.styleClass"
                [style]="announce.style"
                [closable]="announce.closable"
    ></p-messages>
  `,
                providers: [MessageService],
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngAnnounceComponent.ctorParameters = () => [
    { type: MessageService },
    { type: ChangeDetectorRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngOptionItemComponent extends BaseComponent {
    /**
     * @return {?}
     */
    get labels() {
        /** @type {?} */
        const _label = DataItemUtils.getItemLabel(this.item, this.props.dropDownOptionKey || this.props.labelKey || 'label');
        if (CommonsUtils.isArray(_label)) {
            return _label;
        }
        else {
            return [_label];
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.props) {
            this.props = {};
        }
    }
}
PngOptionItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-option-item',
                template: `
    <ng-container *ngIf="customerTpl;else default">
      <ng-container *ngTemplateOutlet="customerTpl;context:{$implicit:item}"></ng-container>
    </ng-container>
    <ng-template #default>
      <div class="d-flex option-item" [ngClass]="props.itemStyleClass || 'ui-helper-clearfix'">
          <span class="label mr-3" *ngFor="let label of labels" [ngClass]="props.labelStyleClass" [innerHTML]="label"></span>
          <span class="pull-right count" *ngIf="props.showCounter && item['count']">
          <span [ngClass]="props.counterStyleClass || 'badge badge-pill badge-info'">{{item['count']}}</span>
        </span>
      </div>
    </ng-template>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".option-item{border-bottom:1px solid #d5d5d5;font-size:.8em}.option-item:hover{font-weight:700;font-size:1em}"]
            }] }
];
PngOptionItemComponent.propDecorators = {
    item: [{ type: Input }],
    props: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngOverlayPanelComponent extends BaseComponent {
    /**
     * @param {?} event
     * @return {?}
     */
    show(event) {
        this.panel.show(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    toggle(event) {
        this.panel.toggle(event);
    }
    /**
     * @return {?}
     */
    hide() {
        this.panel.hide();
    }
}
PngOverlayPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-overlay-panel',
                template: "<p-overlayPanel #overlayPanel [showCloseIcon]=\"true\" [dismissable]=\"false\">\n   <er-dyna-content [content]=\"content\" [context]=\"context\"></er-dyna-content>\n</p-overlayPanel>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
PngOverlayPanelComponent.propDecorators = {
    content: [{ type: Input }],
    context: [{ type: Input }],
    panel: [{ type: ViewChild, args: [OverlayPanel,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngPanelComponent extends BaseComponent {
    constructor() {
        super(...arguments);
        this.collapsed = false;
        this.toggleable = false;
        this.showHeader = true;
        this.templateNames = {
            header: 'header',
            footer: 'footer'
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
        /** @type {?} */
        const titleBar = this.panelEle.nativeElement.querySelector('.ui-panel-titlebar');
        if (titleBar) {
            if (this.barStyleClass) {
                DomUtils.addClasses(titleBar, this.barStyleClass);
            }
            if (this.barStyle) {
                Object.keys(this.barStyle).forEach(name => {
                    DiUtils.get(Renderer2).setStyle(titleBar, name, this.barStyle[name]);
                });
            }
        }
    }
}
PngPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-panel',
                template: "<div class=\"ui-g\">\n  <div class=\"ui-g-12\">\n    <p-panel #pngPanel [styleClass]=\"styleClass\" [style]=\"style\" [toggleable]=\"toggleable\" [showHeader]=\"showHeader\"\n             [collapsed]=\"collapsed\">\n      <p-header>\n        <ng-container *ngIf=\"header\">\n          <i *ngIf=\"icon\" [class]=\"icon\"></i>\n          <er-dyna-content [content]=\"header\" class=\"d-inline-block\"></er-dyna-content>\n        </ng-container>\n        <ng-container *ngIf=\"template(templateNames.header)\">\n          <ng-container *ngTemplateOutlet=\"template(templateNames.header)\"></ng-container>\n        </ng-container>\n      </p-header>\n      <ng-content></ng-content>\n      <ng-container *ngIf=\"footer || template(templateNames.footer)\">\n        <p-footer>\n          <ng-container *ngIf=\"footer\">\n            <er-dyna-content [content]=\"footer\"></er-dyna-content>\n          </ng-container>\n          <ng-container *ngIf=\"template(templateNames.footer)\">\n            <ng-container *ngTemplateOutlet=\"template(templateNames.footer)\"></ng-container>\n          </ng-container>\n        </p-footer>\n      </ng-container>\n    </p-panel>\n  </div>\n</div>\n\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
PngPanelComponent.propDecorators = {
    barStyle: [{ type: Input }],
    barStyleClass: [{ type: Input }],
    style: [{ type: Input }],
    styleClass: [{ type: Input }],
    header: [{ type: Input }],
    footer: [{ type: Input }],
    icon: [{ type: Input }],
    collapsed: [{ type: Input }],
    toggleable: [{ type: Input }],
    showHeader: [{ type: Input }],
    panelEle: [{ type: ViewChild, args: ['pngPanel', { read: ElementRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_POPUP_DIALOG_PROPS = {
    draggable: true,
    minHeight: 100,
    minWidth: 140,
    resizable: true,
    modal: true,
    closeOnEscape: true,
    dismissableMask: false,
    rtl: false,
    closable: true,
    responsive: true,
    maximizable: true,
    blockScroll: true,
    breakpoint: 640,
    showHeader: true,
    showFooter: true,
    baseZIndex: 2000,
    autoZIndex: true,
    closeLabel: '关闭',
    closeIcon: 'fa fa-close'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngPopupDialogComponent extends BaseComponent {
    constructor() {
        super(...arguments);
        this.onClose = new EventEmitter();
        this.onAction = new EventEmitter();
        this.templateNames = {
            header: 'header',
            content: 'content',
            footer: 'footer'
        };
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this.dlgOptions$ = of(this.resolveDlgOptions(options));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dlgOptions$ = StatesUtils.observe(StateNames.popup)
            .pipe(filter(state$$1 => !!state$$1), map(options => this.resolveDlgOptions(options)), takeUntil(this.destroyed$));
    }
    /**
     * @param {?} options
     * @return {?}
     */
    resolveDlgOptions(options) {
        /** @type {?} */
        const opt = Object.assign({}, DEFAULT_POPUP_DIALOG_PROPS, { header: this.header, content: this.content }, options);
        if (options.contentMaxHeight || options.contentMaxWidth) {
            opt.contentStyle = Object.assign({}, opt.contentStyle || {}, { 'max-height': `${options.contentMaxHeight || 3000}px`, 'max-width': `${options.contentMaxWidth || 3000}px` });
        }
        return opt;
    }
    /**
     * @param {?} dlg
     * @param {?} options
     * @return {?}
     */
    showEvent(dlg, options) {
        super.emitEvent('onShow', {
            scope: options,
            event: dlg,
            context: options.context
        });
    }
    /**
     * @param {?} dlg
     * @param {?} options
     * @return {?}
     */
    closeDlg(dlg, options) {
        if (this.canClose && !this.canClose({
            scope: options,
            event: dlg,
            context: options.context
        })) {
            return;
        }
        StatesUtils.create(StateNames.popup, { visible: false });
    }
}
PngPopupDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-popup-dialog',
                template: "<ng-container *ngIf=\"dlgOptions$|async as dlgOptions\">\n  <p-dialog #pngDialog\n            [(visible)]=\"dlgOptions.visible\"\n            [minWidth]=\"dlgOptions.minWidth\"\n            [minHeight]=\"dlgOptions.minHeight\"\n            [width]=\"dlgOptions.width\"\n            [height]=\"dlgOptions.height\"\n            [modal]=\"dlgOptions.modal\"\n            [draggable]=\"dlgOptions.draggable\"\n            [resizable]=\"dlgOptions.resizable\"\n            [closeOnEscape]=\"dlgOptions.closeOnEscape\"\n            [contentStyle]=\"dlgOptions.contentStyle\"\n            [dismissableMask]=\"dlgOptions.dismissableMask\"\n            [rtl]=\"dlgOptions.rtl\"\n            [closable]=\"dlgOptions.closable\"\n            [responsive]=\"dlgOptions.responsive\"\n            [breakpoint]=\"dlgOptions.breakpoint\"\n            [appendTo]=\"dlgOptions.appendTo\"\n            [maximizable]=\"dlgOptions.maximizable\"\n            [blockScroll]=\"dlgOptions.blockScroll\"\n            [style]=\"dlgOptions.style\"\n            [styleClass]=\"dlgOptions.styleClass\"\n            [showHeader]=\"dlgOptions.showHeader\"\n            [positionLeft]=\"dlgOptions.positionLeft\"\n            [positionTop]=\"dlgOptions.positionTop\"\n            (onShow)=\"showEvent(pngDialog,dlgOptions)\"\n  >\n    <p-header>\n      <ng-container *ngIf=\"templates[templateNames.header]\">\n        <ng-container *ngTemplateOutlet=\"templates[templateNames.header]\"></ng-container>\n      </ng-container>\n      <span [innerHTML]=\"dlgOptions.header\"></span>\n    </p-header>\n\n    <ng-container *ngTemplateOutlet=\"templates[templateNames.content]\"></ng-container>\n\n    <ng-container *ngIf=\"dlgOptions.content\">\n      <er-dyna-content [content]=\"dlgOptions.content\"></er-dyna-content>\n    </ng-container>\n\n    <ng-content></ng-content>\n\n    <p-footer *ngIf=\"dlgOptions.showFooter\">\n      <ng-container *ngIf=\"templates[templateNames.footer]\">\n        <ng-container *ngTemplateOutlet=\"templates[templateNames.footer]\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!templates[templateNames.footer]\">\n        <png-buttons [btns]=\"dlgOptions.buttons\" [context]=\"dlgOptions.context\"></png-buttons>\n        <button pButton type=\"button\" class=\"ui-button-rounded ui-button-danger\" iconPos=\"left\"\n                (click)=\"closeDlg(pngDialog,dlgOptions)\"\n                [icon]=\"dlgOptions.closeIcon\" [label]=\"dlgOptions.closeLabel\"></button>\n      </ng-container>\n    </p-footer>\n  </p-dialog>\n</ng-container>\n\n\n\n\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host::ng-deep .ui-dialog-titlebar{background-color:#0d7a8b!important;color:#fff!important}"]
            }] }
];
PngPopupDialogComponent.propDecorators = {
    header: [{ type: Input }],
    content: [{ type: Input }],
    canClose: [{ type: Input }],
    onClose: [{ type: Output }],
    onAction: [{ type: Output }],
    options: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_RADIO_PROPS = {
    $ext: {
        inline: false
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngRadioComponent extends DataAwareControlWrapperComponent {
    constructor() {
        super(...arguments);
        this.valueParser = this.parseValue;
        this.modelFormatter = this.formatModel;
        this.$defaultProps = DEFAULT_RADIO_PROPS;
    }
    /**
     * @return {?}
     */
    get rbValue() {
        return this._rbValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set rbValue(value) {
        this._rbValue = value;
        /** @type {?} */
        const values = this.data$.value;
        if (CommonsUtils.isArray(values)) {
            /** @type {?} */
            const matched = ((/** @type {?} */ (values))).filter(v => v[this.dataKey] === value);
            if (matched.length === 1) {
                this.value = DataItemUtils.getItemValue(matched[0], this.valueKey);
            }
            else {
                this.value = null;
            }
        }
        else {
            this.value = value;
        }
    }
    /**
     * @return {?}
     */
    get dataKey() {
        return CommonsUtils.get(this.$props, '$ext.dataItemProps.idKey', 'value');
    }
    /**
     * @return {?}
     */
    get valueKey() {
        return CommonsUtils.get(this.$props, '$ext.dataItemProps.valueKey', 'value');
    }
    /**
     * @param {?} model
     * @return {?}
     */
    formatModel(model) {
        if (CommonsUtils.isJson(model)) {
            this._rbValue = DataItemUtils.getItemValue(model, this.dataKey);
        }
        return model;
    }
}
PngRadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-radio',
                template: `
    <div class="d-flex pb-2" [erApiData]="apiDataProps" [ngClass]="$props.$ext['inline']===false?'flex-column':'flex-wrap'">
      <ng-container *ngFor="let option of data$|async|erDataItems:$props.$ext.dataItemProps;let i=index">
       <span class="d-flex align-items-center">
        <p-radioButton
          class="m-2"
          [(ngModel)]="rbValue"
          erPropsBind
          [props]="$props"
          [context]="ctx"
          [inputId]="i"
          [value]="option.data|erValue:dataKey"
          (onClick)="updateTouch()"
        >
        </p-radioButton>
        <span class="mr-4" [innerHTML]="option.label|erSafeHtml"></span>
       </span>
      </ng-container>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngRadioComponent),
                        multi: true
                    }]
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_PNG_RATING_PROPS = {
    stars: 5,
    iconOnClass: 'fa fa-star fa-2x',
    iconOffClass: 'fa fa-star-o fa-2x',
    iconCancelClass: 'fa fa-ban fa-2x red'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngRatingComponent extends DataAwareControlWrapperComponent {
    constructor() {
        super(...arguments);
        this.$defaultProps = DEFAULT_PNG_RATING_PROPS;
    }
}
PngRatingComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-rating',
                template: `
    <p-rating
      [(ngModel)]="value"
      erPropsBind
      [props]="$props"
      [context]="ctx"
      (onRate)="updateTouch()"
    >
    </p-rating>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngRatingComponent),
                        multi: true
                    }]
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngSearchBoxComponent extends BaseComponent {
    constructor() {
        super(...arguments);
        this.searched = false;
        this.title = '按关键字搜索,输入回车键执行';
        this.onSearch = new EventEmitter();
        this.onSearchChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    search() {
        this.searched = true;
        this.onSearch.emit(this.searchKey);
    }
    /**
     * @return {?}
     */
    keyChange() {
        if (!this.searchKey || this.searchKey.length === 0) {
            this.clearSearch();
        }
        this.onSearchChange.emit(this.searchKey);
    }
    /**
     * @return {?}
     */
    clearSearch() {
        this.searchKey = undefined;
        if (this.searched) {
            this.onSearch.emit(undefined);
        }
        this.searched = false;
    }
    /**
     * @return {?}
     */
    showHelp() {
        DialogUtils.info('查询操作符', `
    <div class="ml-3">
       <div><b class="font-weight-bold">+</b> 并且</div>
       <div><b class="font-weight-bold">|</b> 或者</div>
       <div><b class="font-weight-bold">-</b> 排除</div>
       <div><b class="font-weight-bold">*</b> 开头</div>
       <div><b class="font-weight-bold">( )</b> 优先</div>
    </div>
    `);
    }
}
PngSearchBoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-search-box',
                template: `
    <span class="inner-addon" [ngClass]="styleClass" [ngStyle]="style">
      <i class="fa fa-search text-primary left"></i>
      <input [title]="title" pInputText placeholder="输入搜索关键字或拼音" [(ngModel)]="searchKey" (keydown.enter)="search()" (keyup)="keyChange()"/>
      <i *ngIf="searchKey" class="fa fa-trash gray right" [title]="title" (click)="clearSearch()"></i>
   </span>
    <span class="position-container"><i title="多值查询帮助" class="fa fa-question-circle green position-absolute" style="right:2px"
                                        (click)="showHelp()"></i></span>

  `
            }] }
];
PngSearchBoxComponent.propDecorators = {
    styleClass: [{ type: Input }],
    style: [{ type: Input }],
    title: [{ type: Input }],
    onSearch: [{ type: Output }],
    onSearchChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_SELECT_BUTTON_PROPS = {
    multiple: false
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngSelectButtonComponent extends DataAwareControlWrapperComponent {
    constructor() {
        super(...arguments);
        this.$defaultProps = DEFAULT_SELECT_BUTTON_PROPS;
        this.templateNames = {
            item: 'item'
        };
    }
}
PngSelectButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-select-button',
                template: `
    <p-selectButton
      [(ngModel)]="value"
      erPropsBind
      [props]="$props"
      [context]="ctx"
      [erApiData]="apiDataProps"
      [options]="data$|async|erDataItems:$props.$ext.dataItemProps"
      (onOptionClick)="updateTouch()"
    >
      <ng-template let-item>
        <er-data-item [customerTpl]="template(templateNames.item)"
                      [item]="item.data"
                      [props]="$props.$ext.dataItemProps">
        </er-data-item>
      </ng-template>  
    </p-selectButton>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngSelectButtonComponent),
                        multi: true
                    }]
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_PNG_SELECT_PROPS = {
    autoWidth: false,
    placeholder: '请选择',
    showClear: true,
    editable: false,
    $ext: {}
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngSelectComponent extends DataAwareControlWrapperComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        super();
        this.cd = cd;
        this.$defaultProps = DEFAULT_PNG_SELECT_PROPS;
        this.templateNames = {
            group: 'group',
            item: 'item'
        };
    }
    /**
     * @return {?}
     */
    onPropsInit() {
        super.onPropsInit();
        if (!this.$props.group && this.$props.$ext && this.$props.$ext.dataItemProps && this.$props.$ext.dataItemProps.groupKey) {
            this.$props.group = true;
        }
    }
}
PngSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-select',
                template: `
    <p-dropdown
      [(ngModel)]="value"
      erPropsBind
      [props]="$props"
      [context]="ctx"
      [erApiData]="apiDataProps"
      [options]="data$|async|erDataItems:$props?.$ext?.dataItemProps"
      (onBlur)="updateTouch()"
    >
      <ng-template let-group pTemplate="group">
        <ng-container *ngTemplateOutlet="template(templateNames.group,groupTpl);context:{$implicit:group}"></ng-container>
      </ng-template>
      <ng-template let-group #groupTpl>
        <span *ngIf="group" style="font-size: 1em"><i class="fa fa-group text-primary"></i> {{group.label}}</span>
      </ng-template>
      <ng-template let-item pTemplate="item">
        <er-data-item [customerTpl]="template(templateNames.item)"
                      [item]="item.data"
                      [props]="$props.$ext.dataItemProps">
        </er-data-item>
      </ng-template>
    </p-dropdown>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngSelectComponent),
                        multi: true
                    }],
                styles: ["/deep/ .ui-dropdown-item{border-bottom:1px solid #a8a8a8!important;font-size:.8em;color:#000!important}/deep/ .ui-dropdown-item:hover{background-color:transparent!important;font-weight:700;color:red!important;font-size:1em}"]
            }] }
];
/** @nocollapse */
PngSelectComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PngSelectComponent.propDecorators = {
    dropDown: [{ type: ViewChild, args: [Dropdown,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_PNG_SLIDER_PROPS = {
    min: 0,
    max: 100,
    range: false,
    orientation: 'horizontal'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngSliderComponent extends DataAwareControlWrapperComponent {
    constructor() {
        super(...arguments);
        this.$defaultProps = DEFAULT_PNG_SLIDER_PROPS;
    }
    /**
     * @return {?}
     */
    get current() {
        return CommonsUtils.join(this.value, '——');
    }
    /**
     * @param {?} event
     * @return {?}
     */
    initValue(event) {
        if (event.hasOwnProperty('min') && event.hasOwnProperty('max')) {
            this.min = event.min;
            this.max = event.max;
            this.value = [event.min, event.max];
        }
        else {
            this.value = event;
        }
    }
}
PngSliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-slider',
                template: `
    <small class="d-inline w-25">值：{{current}}</small>
    <p-slider class="d-inline"
              [erApiData]="apiDataProps"
              [(ngModel)]="value"
              erPropsBind
              [props]="$props"
              [min]="min"
              [max]="max"
              (onChange)="updateTouch()"
              (onDataReady)="initValue($event)"
    >
    </p-slider>

  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngSliderComponent),
                        multi: true
                    }]
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const defaultPngColumnProps = {
    cellStyleClass: 'text-right',
    sortable: true,
    filterable: true,
    aggable: true,
    width: '150px'
};
/** @type {?} */
const defaultPngTableProps = {
    value: [],
    tableStyleClass: 'rounded shadow',
    dataKey: 'id',
    alwaysShowPaginator: true,
    autoLayout: true,
    columnResizeMode: 'expand',
    compareSelectionBy: 'equals',
    defaultSortOrder: 1,
    resizableColumns: true,
    reorderableColumns: true,
    responsive: true,
    filterDelay: 300,
    filters: {},
    rowHover: true,
    loadingIcon: 'fa fa-spin fa-2x fa-circle-o-notch',
    lazy: true,
    lazyLoadOnInit: false,
    rows: 10,
    pageLinks: 5,
    rowsPerPageOptions: [10, 30, 50],
    paginator: true,
    paginatorPosition: 'both',
    rowExpandMode: 'multiple',
    sortMode: 'single',
    sortOrder: 1,
    $ext: {
        emptyMessage: '没有显示内容',
        hasColumnSelector: true,
        columnSelectorStyleClass: 'd-inline-block align-middle pull-right',
        rowHeight: '30px',
        rowActionsPlaceAhead: false,
        frozenActionColumn: false,
        hasSearchInput: true,
        hasSearchBox: false,
        hasRowIndex: false,
        hasRowCheckbox: false,
        hasHeaderSummary: false,
        hasPaginatorLeft: true,
        hasPaginatorRight: false,
        rowExpandable: false,
        hasAddAction: false,
        hasDeleteAction: false,
        hasAuditAction: false,
        hasDownloadAction: false,
        routerOutlet: 'aux',
        addRouter: 'add',
        viewRouter: 'view',
        editRouter: 'edit',
        auditRouter: 'audit',
        downloadRouter: 'download'
    }
};
/** @type {?} */
const defaultRowIndexColumn = (/** @type {?} */ ({
    label: '行号',
    width: '50px',
    cellClass: 'text-right',
    sortable: false,
    filterable: false,
    aggable: false,
    order: -100,
    isDataColumn: false,
    cellContent: (data) => data.rowIndex + 1
}));
/** @type {?} */
const defaultOrderedRowIndexColumn = {
    label: '行号',
    width: '50px',
    cellClass: 'text-right',
    sortable: false,
    filterable: false,
    aggable: false,
    order: -100,
    isDataColumn: false,
    cellContent: (data) => data.rowIndex + 1,
    cellStyleClass: (ctx) => {
        if (ctx.rowIndex === 0) {
            return 'badge badge-pill white bg-red No-1';
        }
        else if (ctx.rowIndex === 1) {
            return 'badge badge-pill black bg-yellow No-2';
        }
        else if (ctx.rowIndex === 2) {
            return 'badge badge-pill white bg-blue No-3';
        }
        else {
            return 'badge badge-pill badge-dark';
        }
    }
};
/** @type {?} */
const defaultActionColumn = (/** @type {?} */ ({
    label: '操作',
    width: '150px',
    cellStyleClass: 'text-left',
    sortable: false,
    filterable: false,
    aggable: false,
    dataAttr: DataAttr.BUTTONS,
    isActionColumn: true,
    cellContent: (/** @type {?} */ ([]))
}));
/** @type {?} */
const defaultAddButton = (/** @type {?} */ ({
    $id: 'add',
    title: '新建一条信息',
    label: '新建',
    icon: 'fa fa-plus',
    styleClass: 'ui-button-rounded ui-button-success',
    onClick: (event) => {
        event.pngTable.navigate(event.pngTable.$props.$ext.addRouter, [], { tableId: event.pngTable.$id });
    }
}));
/** @type {?} */
const defaultViewButton = (/** @type {?} */ ({
    $id: 'view',
    title: '查看',
    icon: 'fa fa-edit',
    styleClass: 'ui-button-rounded ui-button-info',
    onClick: (event) => {
        event.pngTable.navigate(event.pngTable.$props.$ext.viewRouter, [event.row['id']]);
    }
}));
/** @type {?} */
const defaultEditButton = (/** @type {?} */ ({
    $id: 'edit',
    title: '修改',
    icon: 'fa fa-edit',
    styleClass: 'ui-button-rounded ui-button-warning',
    onClick: (event) => {
        event.pngTable.navigate(event.pngTable.$props.$ext.editRouter, [event.row['id']], { tableId: event.pngTable.$id });
    }
}));
/** @type {?} */
const defaultDeleteButton = (/** @type {?} */ ({
    $id: 'delete',
    title: '删除',
    icon: 'fa fa-trash',
    styleClass: 'ui-button-rounded ui-button-danger',
    onClick: (event) => {
        ApiUtils.deleteById(event.pngTable.$props.$ext.apiDataProps.apiEntry, event.row['id'])
            .subscribe(() => {
            event.pngTable.load();
            StatesUtils.update(event.pngTable.$props.$id, { deleted: event.row['id'] });
        });
    }
}));
/** @type {?} */
const defaultAuditButton = (/** @type {?} */ ({
    $id: 'audit',
    title: '审核',
    icon: 'fa fa-check',
    styleClass: 'ui-button-rounded ui-button-success',
    onClick: (event) => {
        event.pngTable.navigate(event.pngTable.$props.$ext.auditRouter, [event.row['id']], { action: 'audit', tableId: event.pngTable.$id });
    }
}));
/** @type {?} */
const defaultDownloadButton = (/** @type {?} */ ({
    $id: 'download',
    title: '下载',
    icon: 'fa fa-download',
    overlay: true,
    styleClass: 'ui-button-rounded ui-button-success',
    onClick: (event) => {
        event.pngTable.navigate(event.pngTable.$props.$ext.downloadRouter, [event.row['id']]);
    }
}));
/** @type {?} */
const defaultOverlayColumnProps = {
    sortable: false,
    filterable: false,
    aggable: false
};
/** @type {?} */
const defaultOverlayTableProps = {
    alwaysShowPaginator: false,
    scrollable: true,
    scrollWidth: '800px',
    paginatorPosition: 'bottom'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngTableUtils {
    /**
     * @param {?} column
     * @return {?}
     */
    static resolveColumnByDataField(column) {
        if (!column.dataField) {
            return;
        }
        column.dataField = CommonsUtils.merge(DataFieldUtils.getFieldDefaultProps(column.dataField), column.dataField);
        const { key, label, dataType, dataAttr, order, hidden } = column.dataField;
        /** @type {?} */
        let sortKey = column.dataField.key;
        if (!column.sortKey && column.dataField.dataType === DataType.JSON) {
            sortKey = column.dataField.sortKey || `${column.dataField.key}.${DataFieldUtils.getDefaultFieldName(column.dataField)}`;
        }
        /** @type {?} */
        const id = column.id || column.key || column.dataField.key;
        CommonsUtils.defaults(column, CommonsUtils.pickBy({
            id,
            key,
            label,
            dataType,
            dataAttr,
            order,
            hidden,
            sortKey
        }, CommonsUtils.lodash().identity));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngTableComponent extends DataAwareControlWrapperComponent {
    /**
     * @param {?} cd
     * @param {?} router
     * @param {?} activatedRoute
     */
    constructor(cd, router, activatedRoute) {
        super();
        this.cd = cd;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.OVERLAY_TYPE = OverlayType;
        this.bodyData$ = new BehaviorSubject([]);
        this.columns$ = new BehaviorSubject(undefined);
        this.templateNames = {
            caption: 'caption',
            spanHeader: 'spanHeader',
            header: 'header',
            headerSummary: 'headerSummary',
            body: 'body',
            frozenRows: 'frozenRows',
            cell: 'cell',
            dataCell: 'dataCell',
            footer: 'footer',
            footerSummary: 'summary',
            colGroup: 'colgroup',
            rowExpansion: 'rowexpansion',
            paginatorLeft: 'paginatorLeft',
            paginatorRight: 'paginatorRight'
        };
        this.$defaultProps = defaultPngTableProps;
        this.eventQuery = [];
        this.selectedRows = [];
        this.switch = true;
    }
    /**
     * @return {?}
     */
    get apiEntry() {
        return this.$props.$ext.apiDataProps && this.$props.$ext.apiDataProps.apiEntry;
    }
    /**
     * @return {?}
     */
    get $id() {
        return this.$props.$id;
    }
    /**
     * @return {?}
     */
    onPropsInit() {
        if (this.$props.entity) {
            if (!this.$props.caption || this.$props.caption['method']) {
                /** @type {?} */
                const caption = CommonsUtils.getValue(this.$props.caption, this.$props.entity.label);
                this.$props.caption = caption || `浏览${this.$props.entity.label || ''}`;
            }
            if (!this.$props.$ext.apiDataProps) {
                this.$props.$ext.apiDataProps = {};
            }
            if (!this.$props.$ext.apiDataProps.apiEntry) {
                this.$props.$ext.apiDataProps.apiEntry = this.$props.entity.apiEntry || '';
            }
        }
        if (this.$props.columns) {
            this.resoleActionsColumn(this.$props);
            /** @type {?} */
            let order = 0;
            this.$props.columns.forEach(column => {
                PngTableUtils.resolveColumnByDataField(column);
                CommonsUtils.defaults(column, defaultPngColumnProps);
                if (!column.order) {
                    column.order = ++order;
                }
                if (this.$props.scrollable && this.$props.scrollWidth && column.width && column.width.endsWith('%')) {
                    column.width = defaultPngColumnProps.width;
                }
                if (column.overlays) {
                    column.overlays = CommonsUtils.getArrayValue(column.overlays);
                }
                if (column.headerOverlays) {
                    column.headerOverlays = CommonsUtils.getArrayValue(column.headerOverlays);
                }
            });
        }
        if (this.$props.virtualScroll) {
            this.$props.alwaysShowPaginator = false;
            this.$props.paginator = false;
        }
        if (this.$props.scrollable) {
            CommonsUtils.set(this.$props, 'style.width', this.$props.scrollWidth);
        }
        /** @type {?} */
        const frozenColumns = this.$props.columns.filter(column => column.frozen);
        if (frozenColumns.length > 0) {
            this.$props.frozenColumns = frozenColumns;
            if (!this.$props.$ext.rowHeight) {
                this.$props.$ext.rowHeight = '30px';
            }
            /** @type {?} */
            let frozenWidth = 0;
            frozenColumns.forEach(column => {
                /** @type {?} */
                let width = 150;
                if (column.width) {
                    width = Number(column.width.substr(0, column.width.length - 2));
                }
                frozenWidth += width || 150;
                column.styleClass = column.styleClass || '' + ' table-frozen-column';
            });
            this.$props.frozenWidth = `${frozenWidth}px`;
        }
        this.updateColumns();
        this.apiDataProps = this.getApiDataProps();
        this.$subscriptions = StatesUtils.observe(this.$id)
            .pipe(filter(state$$1 => !!state$$1), skip(1))
            .subscribe(state$$1 => {
            this.table.first = 0;
            this.load(state$$1);
        });
        if (this.$props.$ext.dataItems) {
            this.data$.next({
                items: this.$props.$ext.dataItems,
                total: this.$props.$ext.dataItems.length
            });
        }
        StatesUtils.create(this.$id, {
            component: this
        }, true);
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    updateColumns(event) {
        /** @type {?} */
        let columns;
        if (!event) {
            columns = this.$props.columns.filter(column => !column.frozen) || [];
        }
        else {
            columns = event.value;
        }
        columns.sort((a, b) => a.order - b.order);
        this.dataColumns = columns.filter(column => !column.isActionColumn || !(column.hidden && !column.fetch));
        if (!event) {
            columns = columns.filter(column => !column.hidden);
        }
        this.dataColumnNames = CommonsUtils.compact(this.dataColumns.map(column => column.key));
        if (this.$props.frozenColumns) {
            this.$props.frozenColumns.forEach(column => {
                if (column.key) {
                    this.dataColumnNames.push(column.key);
                }
            });
        }
        this.columns$.next(columns);
        if (event) {
            this.load();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    updateColAggKeys(event) {
        if (event.column) {
            /** @type {?} */
            const column = event.column;
            /** @type {?} */
            const aggProps = [];
            if (event.methods && event.methods.length > 0) {
                event.methods.forEach(method => {
                    aggProps.push((/** @type {?} */ ({
                        name: `${column.key}-${method}`,
                        field: column.aggKey || column.key,
                        method: AggMethodsProps[method]['key']
                    })));
                });
            }
            column.aggProps = aggProps;
            StatesUtils.update(this.$id, {});
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    updateColFilters(event) {
        if (event.column) {
            /** @type {?} */
            const column = event.column;
            column.filters = [];
            if (event.value) {
                column.filters.push(event.value);
            }
            StatesUtils.update(this.$id, {});
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    updateSimpleSearch(event) {
        if (CommonsUtils.isEmpty(event)) {
            this.simpleQuery = undefined;
        }
        else {
            if (event.indexOf('"') === -1) {
                event = `"${event}"`;
            }
            this.simpleQuery = [simpleQueryStringQuery(event)];
        }
        this.load();
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getColumnByKey(key) {
        /** @type {?} */
        const columns = this.$props.columns.filter(column => column.key === key);
        if (columns.length >= 1) {
            return columns[0];
        }
        else {
            return undefined;
        }
    }
    /**
     * @param {?} row
     * @return {?}
     */
    getRowStyleClass(row) {
        return CommonsUtils.getValue(this.$props.$ext.rowStyleClass, row);
    }
    /**
     * @param {?} row
     * @return {?}
     */
    getRowStyle(row) {
        /** @type {?} */
        const style$$1 = CommonsUtils.getValue(this.$props.$ext.rowStyle, row) || {};
        if (this.$props.$ext.rowHeight) {
            style$$1['height'] = this.$props.$ext.rowHeight;
        }
        return style$$1;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    getHeaderStyleClass(column) {
        return CommonsUtils.getValue(column.headerStyleClass, column);
    }
    /**
     * @param {?} column
     * @return {?}
     */
    getHeaderStyle(column) {
        return CommonsUtils.getValue(column.headerStyle, column);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    rowSelect(event) {
        this.updateTouch();
        this.value = DataItemUtils.getItemValue(event, this.$props.$ext.dataItemProps && this.$props.$ext.dataItemProps.valueKey);
    }
    /**
     * @param {?=} state
     * @return {?}
     */
    load(state$$1) {
        this.apiDataProps = this.getApiDataProps(state$$1);
        this.cd.markForCheck();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onDataReady(data) {
        /** @type {?} */
        const dataPath = CommonsUtils.get(this.$props, '$ext.apiDataProps.dataPath');
        if (dataPath && dataPath !== '/') {
            this.bodyData$.next(data);
        }
        else {
            this.bodyData$.next(data.items || []);
        }
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    showOverlay(ctx) {
        if (ctx && ctx.content) {
            this.overlayContext = Object.assign({ dismissable: true, showCloseIcon: true }, ctx);
            this.overlayPanel.hide();
            this.overlayPanel.toggle(ctx.$event);
            this.cd.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    hidePanel() {
        this.overlayPanel.hide();
    }
    /**
     * @return {?}
     */
    resetQuery() {
        this.simpleQuery = undefined;
        this.complexQuery = undefined;
    }
    /**
     * @return {?}
     */
    resetForeignQuery() {
        this.eventQuery = [];
    }
    /**
     * @param {?} url
     * @param {?=} commands
     * @param {?=} params
     * @return {?}
     */
    navigate(url, commands, params) {
        this.router.navigate([{ outlets: { [this.$props.$ext.routerOutlet]: [url, ...commands] } }], {
            relativeTo: this.activatedRoute,
            skipLocationChange: false,
            queryParams: params
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.$props && this.$props.$id) {
            StatesUtils.deleteState(this.$props.$id);
        }
        super.ngOnDestroy();
    }
    /**
     * @param {?=} state
     * @return {?}
     */
    getTableQuery(state$$1) {
        if (state$$1 && (state$$1.query || state$$1.filter)) {
            this.eventQuery = [
                ...CommonsUtils.getArrayValue(state$$1['query'] || {}),
                ...CommonsUtils.getArrayValue(state$$1['filter'] || {})
            ];
        }
        /** @type {?} */
        const filters = [
            ...this.getColumnsFilters(),
            ...this.eventQuery,
            ...this.simpleQuery || [],
            ...CommonsUtils.getArrayValue(this.complexQuery) || []
        ];
        /** @type {?} */
        const gApiDataProps = CommonsUtils.copy(CommonsUtils.get(this.$props, '$ext.apiDataProps'));
        /** @type {?} */
        let apiFilter = gApiDataProps.filter || {};
        if (apiFilter['$and']) {
            apiFilter['$and'] = [
                ...apiFilter['$and'],
                ...filters
            ];
        }
        else if (apiFilter['$or']) {
            apiFilter['$and'] = filters;
        }
        else {
            apiFilter = CommonsUtils.getArrayValue(apiFilter)
                .concat(filters);
        }
        apiFilter = apiFilter.filter(f => !CommonsUtils.isEmpty(f));
        /** @type {?} */
        let aggProps = gApiDataProps.aggProps || {};
        aggProps = CommonsUtils.getArrayValue(aggProps).concat(this.getColumnsAggs());
        aggProps = aggProps.filter(a => Object.keys(a).length > 0);
        /** @type {?} */
        let sort = gApiDataProps.sort || [];
        /** @type {?} */
        const tableMetaData = this.table.createLazyLoadMetadata();
        sort = CommonsUtils.getArrayValue(sort);
        /** @type {?} */
        const tableSort = tableMetaData.sortField;
        if (tableSort) {
            /** @type {?} */
            const column = this.getColumnByKey(tableSort);
            /** @type {?} */
            const sortKey = (column && column.sortKey) || tableSort;
            sort.push({ [sortKey]: tableMetaData.sortOrder === 1 ? Order.ASC : Order.DESC });
        }
        delete gApiDataProps.filter;
        delete gApiDataProps.aggProps;
        return Object.assign({}, gApiDataProps, { filter: apiFilter, aggProps,
            sort });
    }
    /**
     * @private
     * @return {?}
     */
    getColumnsFilters() {
        /** @type {?} */
        const filters = [];
        /** @type {?} */
        const columns = (this.columns$.value || []).concat(this.$props.frozenColumns || []);
        columns
            .filter(column => column.filters)
            .forEach(column => column.filters.filter(f => f)
            .forEach(f => {
            /** @type {?} */
            let query;
            switch (column.filterDataType || column.dataType || (column.dataField && column.dataField.dataType) || DataType.STRING) {
                case DataType.NUMBER:
                case DataType.DATE:
                    if (CommonsUtils.isArray(f)) {
                        query = rangeQuery(column.filterKey || column.key).gte(f[0]).lte(f[1]);
                    }
                    else {
                        query = rangeQuery(column.filterKey || column.key).gte(f).lte(f);
                    }
                    break;
                default:
                    query = matchQuery(column.filterKey || column.key, f);
            }
            filters.push(query);
        }));
        return filters;
    }
    /**
     * @private
     * @return {?}
     */
    getColumnsAggs() {
        /** @type {?} */
        let aggs = [];
        /** @type {?} */
        const columns = (this.columns$.value || []).concat(this.$props.frozenColumns || []);
        columns
            .filter(column => column.aggProps)
            .forEach(column => {
            aggs = aggs.concat(column.aggProps);
        });
        return aggs;
    }
    /**
     * @private
     * @param {?} props
     * @return {?}
     */
    resoleActionsColumn(props) {
        /** @type {?} */
        let actionColumn;
        /** @type {?} */
        let actionColumnIndex = -1;
        props.columns.some((column, i) => {
            if (column.isActionColumn) {
                actionColumn = column;
                actionColumnIndex = i;
                return true;
            }
            return false;
        });
        if (actionColumnIndex >= 0) {
            props.columns = CommonsUtils.removeByIndex(props.columns, actionColumnIndex);
        }
        if (props.$ext.hasAddAction) {
            this.addBtn = Object.assign({}, defaultAddButton, { context: this });
        }
        /** @type {?} */
        const buttons = [];
        if (props.$ext.hasViewAction) {
            buttons.push(Object.assign({}, defaultViewButton, { show: props.$ext.hasViewAction }));
        }
        if (props.$ext.hasDeleteAction) {
            buttons.push(Object.assign({}, defaultDeleteButton, { show: props.$ext.hasDeleteAction }));
        }
        if (props.$ext.hasAuditAction) {
            buttons.push(Object.assign({}, defaultAuditButton, { show: props.$ext.hasAuditAction }));
        }
        if (props.$ext.hasDownloadAction) {
            buttons.push(Object.assign({}, defaultDownloadButton, { show: props.$ext.hasDownloadAction }));
        }
        if (props.$ext.hasEditAction) {
            buttons.push(Object.assign({}, defaultEditButton, { show: props.$ext.hasEditAction }));
        }
        if (buttons.length > 0 && !actionColumn) {
            actionColumn = Object.assign({}, defaultActionColumn, actionColumn || {});
        }
        if (buttons.length > 0) {
            actionColumn.cellContent = [
                ...CommonsUtils.getArrayValue(actionColumn.cellContent) || [],
                ...buttons
            ];
        }
        if (actionColumn) {
            if (this.$props.$ext.frozenActionColumn) {
                actionColumn.frozen = true;
            }
            if (this.$props.$ext.rowActionsPlaceAhead) {
                ((/** @type {?} */ (this.$props.columns))).splice(0, 0, actionColumn);
            }
            else {
                this.$props.columns.push(actionColumn);
            }
        }
        if (this.$props.$ext.hasRowIndex) {
            this.$props.columns.splice(0, 0, defaultRowIndexColumn);
        }
    }
    /**
     * @private
     * @param {?=} state
     * @return {?}
     */
    getApiDataProps(state$$1) {
        /** @type {?} */
        const tableMetaData = this.table.createLazyLoadMetadata();
        /** @type {?} */
        const tableQuery = this.getTableQuery(state$$1);
        /** @type {?} */
        const apiDataProps = (/** @type {?} */ (Object.assign({}, tableQuery, { dataPath: '/', returnFields: this.dataColumnNames, from: tableMetaData.first, size: tableMetaData.rows })));
        apiDataProps.requestOptions = apiDataProps.requestOptions || {};
        if (!apiDataProps.requestOptions.tag) {
            apiDataProps.requestOptions.tag = this.$id;
        }
        return apiDataProps;
    }
}
PngTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-table',
                template: "<p-table #pngTable\n         (onDataReady)=\"onDataReady($event)\"\n         (onLazyLoad)=\"load($event)\"\n         (selectionChange)=\"rowSelect($event)\"\n         [(selection)]=\"selectedRows\"\n         [columns]=\"columns$|async\"\n         [context]=\"ctx\"\n         [erApiData]=\"apiDataProps\"\n         [props]=\"$props\"\n         [totalRecords]=\"(data$|async)?.total\"\n         [value]=\"bodyData$|async\"\n         erPropsBind\n>\n  <ng-template pTemplate=\"caption\">\n    <png-table-caption\n      (onSimpleSearch)=\"updateSimpleSearch($event)\"\n      [addButton]=\"addBtn\"\n      [caption]=\"$props.caption\"\n      [customerTpl]=\"template(templateNames.caption)\"\n      [hasAddAction]=\"$props.$ext.hasAddAction\"\n      [hasSearchBox]=\"$props.$ext.hasSearchBox\"\n      [hasSearchInput]=\"$props.$ext.hasSearchInput\"\n    >\n    </png-table-caption>\n    <ng-container *ngIf=\"$props.$ext.caption\">\n      <er-dyna-content [content]=\"$props.$ext.caption\" [context]=\"getEventContext()\"></er-dyna-content>\n    </ng-container>\n  </ng-template>\n\n  <ng-template let-columns pTemplate=\"colgroup\">\n    <ng-container *ngTemplateOutlet=\"colGroupTpl;\n                     context:{$implicit:$props,context:getEventContext(),columns:columns}\">\n    </ng-container>\n  </ng-template>\n\n\n  <ng-template let-columns pTemplate=\"header\">\n    <ng-container\n      *ngTemplateOutlet=\"template(templateNames.spanHeader); context:{$implicit:columns}\"></ng-container>\n    <ng-container *ngIf=\"$props.$ext.spanHeader\">\n      <span [outerHTML]=\"$props.$ext.spanHeader\"></span>\n    </ng-container>\n    <tr (onAggKeysSet)=\"updateColAggKeys($event)\"\n        (onFiltersSet)=\"updateColFilters($event)\"\n        [columns]=\"columns\"\n        [customerTpl]=\"template(templateNames.header)\"\n        png-table-header\n    >\n    </tr>\n\n    <ng-container *ngIf=\"(data$|async)?.aggs as aggValues\">\n      <tr [aggValues]=\"aggValues\"\n          [columns]=\"columns\"\n          [customerTpl]=\"template(templateNames.headerSummary)\"\n          png-table-summary\n      >\n      </tr>\n    </ng-container>\n  </ng-template>\n\n  <!--<ng-container *ngIf=\"$$props.frozenValue\">-->\n  <!--<ng-template pTemplate=\"frozenrows\" let-row let-columns=\"columns\">-->\n  <!--<ng-container *ngTemplateOutlet=\"template(templateNames.frozenRows,defaultBodyTpl);-->\n  <!--context:{$implicit:row,columns:columns,$props:$$props,table:pngTable}\">-->\n  <!--</ng-container>-->\n  <!--</ng-template>-->\n  <!--</ng-container>-->\n\n  <ng-template let-columns=\"columns\" let-expanded=\"expanded\" let-row let-rowIndex=\"rowIndex\" pTemplate=\"body\">\n    <tr [cellTpl]=\"template(templateNames.cell)\"\n        [columns]=\"columns\"\n        [customerTpl]=\"template(templateNames.body)\"\n        [dataCellTpl]=\"template(templateNames.dataCell)\"\n        [expanded]=\"expanded\"\n        [ngClass]=\"getRowStyleClass({row: row, rowIndex: rowIndex})\"\n        [ngStyle]=\"getRowStyle({row: row, rowIndex: rowIndex})\"\n        [pSelectableRowIndex]=\"rowIndex\"\n        [pSelectableRow]=\"row\"\n        [rowIndex]=\"rowIndex\"\n        [row]=\"row\"\n        png-table-body-row\n    >\n    </tr>\n  </ng-template>\n\n  <ng-template let-columns=\"columns\" let-row pTemplate=\"rowexpansion\">\n    <tr [columns]=\"dataColumns\"\n        [customerTpl]=\"template(templateNames.rowExpansion)\"\n        [rowId]=\"row[$props.dataKey || 'id']\"\n        png-table-expanded-row\n    >\n    </tr>\n  </ng-template>\n\n  <ng-template let-columns pTemplate=\"footer\">\n    <tr [columns]=\"columns\"\n        [customerTpl]=\"template(templateNames.footer)\"\n        png-table-footer\n    >\n    </tr>\n  </ng-template>\n\n  <ng-container *ngIf=\"(data$|async)?.aggs as aggValues\">\n    <ng-template pTemplate=\"summary\">\n      <tr [aggValues]=\"aggValues\"\n          [columns]=\"dataColumns\"\n          [customerTpl]=\"template(templateNames.footerSummary)\"\n          png-table-summary\n      >\n      </tr>\n    </ng-template>\n  </ng-container>\n\n  <ng-template let-state pTemplate=\"paginatorleft\">\n    <ng-container *ngIf=\"(data$|async)?.total as totalRecords\">\n      <ng-container\n        *ngTemplateOutlet=\"template(templateNames.paginatorLeft,paginationLeftTpl);context:{$implicit:state,totalRecords:totalRecords}\">\n      </ng-container>\n    </ng-container>\n  </ng-template>\n\n  <ng-template let-state pTemplate=\"paginatorright\">\n    <div class=\"d-flex align-content-center\">\n      <er-http-status [tag]=\"$id\" class=\"mr-2\"></er-http-status>\n      <ng-container *ngIf=\"$props.$ext.hasColumnSelector\">\n        <png-table-column-selector\n          (onColumnsChange)=\"updateColumns($event)\"\n          [columns]=\"columns$|async\"\n          [optionColumns]=\"$props.columns\"\n        >\n        </png-table-column-selector>\n      </ng-container>\n      <ng-container *ngIf=\"$props.$ext.hasPaginatorRight\">\n        <ng-container\n          *ngTemplateOutlet=\"template(templateNames.paginatorRight);context:{$implicit:state}\"></ng-container>\n      </ng-container>\n    </div>\n  </ng-template>\n\n\n  <ng-template #colGroupTpl let-columns=\"columns\" let-props>\n    <colgroup>\n      <col *ngIf=\"props.$ext.rowExpandable\" style=\"width: 3em\">\n      <col *ngIf=\"props.$ext.hasRowCheckbox\" style=\"width: 3em\">\n      <col *ngFor=\"let col of columns\" [ngClass]=\"getHeaderStyleClass(col)\"\n           [ngStyle]=\"getHeaderStyle(col)\"\n           [width]=\"col.width\"\n      >\n    </colgroup>\n  </ng-template>\n\n  <ng-template #defaultFrozonRowsTpl let-columns=\"columns\" let-row>\n  </ng-template>\n\n  <ng-template let-columns pTemplate=\"emptymessage\">\n    <tr>\n      <td [attr.colspan]=\"columns?.length\">\n        <strong>{{$props.$ext.emptyMessage}}</strong>\n      </td>\n    </tr>\n  </ng-template>\n</p-table>\n\n<ng-template #paginationLeftTpl let-state let-totalRecords=\"totalRecords\">\n  <span class=\"paginationLeft\"><span *ngIf=\"simpleQuery || complexQuery\"\n                                     class=\"font-weight-bold text-danger \"><u>\u641C\u7D22\u7ED3\u679C</u></span>\u663E\u793A {{totalRecords < 1 ? 0 : state.first + 1}}\n    -\n  {{totalRecords > 0 ? ((state.rows+ state.first) <= totalRecords ? (state.rows + state.first) :\n  totalRecords) : 0}}\uFF0C\u5171 {{totalRecords ? totalRecords : 0}} \u6761</span>\n</ng-template>\n\n\n<p-overlayPanel #overlayPanel [dismissable]=\"overlayContext?.dismissable\"\n                [showCloseIcon]=\"overlayContext?.showCloseIcon\"\n                [id]=\"overlayContext?.id\"\n                [ngStyle]=\"overlayContext?.overlayStyle\"\n                [styleClass]=\"overlayContext?.overlayStyleClass\">\n  <ng-container *ngIf=\"overlayContext\">\n    <ng-container [ngSwitch]=\"overlayContext.type\">\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.PANEL\">\n        <er-dyna-content [content]=\"overlayContext.content\"\n                         [context]=\"overlayContext.context\"\n                         [styleClass]=\"overlayContext.styleClass\"\n                         [style]=\"overlayContext.style\"\n        ></er-dyna-content>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.TABLE\">\n        <png-table erPropsBind [props]=\"overlayContext.content\"></png-table>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.CHART\">\n        <png-chart erPropsBind [props]=\"overlayContext.content\"></png-chart>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.MENU\">\n        <p-menu appendTo=\"body\" [popup]=\"true\" [model]=\"overlayContext.content\"></p-menu>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.TREE\">\n        <pre [erJsonViewer]=\"overlayContext.content\" openLevel=\"1\"></pre>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.FRAME\">\n        <iframe [ngClass]=\"overlayContext.styleClass\" [ngStyle]=\"overlayContext.style\"\n                [src]=\"overlayContext.content|erSafeHtml:'resource'\" frameborder=\"0\"\n                allowfullscreen></iframe>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.COMPONENT\">\n        <er-dyna-content [content]=\"overlayContext.content\"\n                         [context]=\"overlayContext.context\"\n                         [styleClass]=\"overlayContext.styleClass\"\n                         [style]=\"overlayContext.style\"\n        ></er-dyna-content>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</p-overlayPanel>\n\n<!--<div style=\"position: relative;\">-->\n<!--<p-paginator rows=\"10\"-->\n<!--(onLazyLoad)=\"load($event)\"-->\n<!--(onPageChange)=\"load($event)\"-->\n<!--[totalRecords]=\"totalRecords\"-->\n<!--[rowsPerPageOptions]=\"[10, 25]\">-->\n<!--</p-paginator>-->\n<!--<span style=\"position: absolute; top:3px; right:5px; margin: 5px;\">Total records: {{totalRecords}} </span>-->\n<!--</div>-->\n",
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngTableComponent),
                        multi: true
                    }],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["/deep/ .ui-paginator{font-size:.8rem!important}/deep/ td.col-expandable,/deep/ th.col-expandable{width:1em}/deep/ td.col-checkbox,/deep/ th.col-checkbox{width:1em}/deep/ td.col-radio,/deep/ th.col-radio{width:5px}/deep/ td.row-index,/deep/ th.row-index{width:100px}/deep/ td.circle,/deep/ th.circle{border-radius:50%!important}/deep/ td.col-summary,/deep/ th.col-summary{background-color:#068020;color:#fff!important}"]
            }] }
];
/** @nocollapse */
PngTableComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Router },
    { type: ActivatedRoute }
];
PngTableComponent.propDecorators = {
    table: [{ type: ViewChild, args: ['pngTable',] }],
    overlayPanel: [{ type: ViewChild, args: ['overlayPanel',] }],
    popupMenu: [{ type: ViewChild, args: [Menu,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * <png-tooltip [control]="ngForm.get('start')">
 * <input pInputText formControlName="start">
 * </png-tooltip>
 */
class ValidateMessageTooltipComponent {
    /**
     * @param {?} domHandler
     * @param {?} controlContainer
     */
    constructor(domHandler, controlContainer) {
        this.domHandler = domHandler;
        this.controlContainer = controlContainer;
        this.tooltipPosition = 'right';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.control && this.controlContainer) {
            /** @type {?} */
            const form = this.controlContainer.formDirective ? ((/** @type {?} */ (this.controlContainer.formDirective))).form : null;
            if (form) {
                this.control = FormUtils.getFormControl(form, ...this.controlContainer.path, this.controlName);
            }
        }
    }
    /**
     * @return {?}
     */
    onMouseEnter() {
        if (this.control.invalid) {
            this.showErrMsg();
        }
    }
    /**
     * @return {?}
     */
    onMouseLeave() {
        this.hide();
    }
    /**
     * @return {?}
     */
    onFocusIn() {
        if (this.control.invalid) {
            this.showErrMsg();
        }
    }
    /**
     * @return {?}
     */
    onFocusOut() {
        this.hide();
    }
    /**
     * @return {?}
     */
    onKeyup() {
        if (this.control.invalid) {
            this.showErrMsg();
        }
        else {
            this.hide();
        }
    }
    /**
     * @return {?}
     */
    showErrMsg() {
        this.errorMessage = this.getErrorMsg();
        if (this.errorMessage !== null && this.errorMessage !== undefined) {
            this.show();
        }
    }
    /**
     * @return {?}
     */
    getErrorMsg() {
        /** @type {?} */
        const errMsgs = ValidateUtils.getErrorMessage(this.control.errors, this.messages);
        if (Object.keys(errMsgs).length > 0) {
            return errMsgs[Object.keys(errMsgs)[0]];
        }
        return undefined;
    }
    /**
     * @return {?}
     */
    hide() {
        this.ngOnDestroy();
    }
    /**
     * @return {?}
     */
    show() {
        /** 如果存在则不新建，只需要修改里面的内容 **/
        if (!this.container) {
            this.create();
        }
        else {
            this.domHandler.findSingle(this.container, '.ui-tooltip-text').innerText = this.errorMessage;
        }
        /** @type {?} */
        const offset = this.domHandler.getOffset(this.in.nativeElement);
        /** @type {?} */
        const targetTop = offset.top;
        /** @type {?} */
        const targetLeft = offset.left;
        /** @type {?} */
        let left;
        /** @type {?} */
        let top;
        this.container.style.display = 'block';
        switch (this.tooltipPosition) {
            case 'right':
                left = targetLeft + this.domHandler.getOuterWidth(this.in.nativeElement);
                top = targetTop + (this.domHandler.getOuterHeight(this.in.nativeElement) - this.domHandler.getOuterHeight(this.container)) / 2;
                break;
            case 'left':
                left = targetLeft - this.domHandler.getOuterWidth(this.container);
                top = targetTop + (this.domHandler.getOuterHeight(this.in.nativeElement) - this.domHandler.getOuterHeight(this.container)) / 2;
                break;
            case 'top':
                left = targetLeft + (this.domHandler.getOuterWidth(this.in.nativeElement) - this.domHandler.getOuterWidth(this.container)) / 2;
                top = targetTop - this.domHandler.getOuterHeight(this.container);
                break;
            case 'bottom':
                left = targetLeft + (this.domHandler.getOuterWidth(this.in.nativeElement) - this.domHandler.getOuterWidth(this.container)) / 2;
                top = targetTop + this.domHandler.getOuterHeight(this.in.nativeElement);
                break;
        }
        this.container.style.left = left + 'px';
        this.container.style.top = top + 'px';
        this.container.style.zIndex = 999999; // different from PrimeNg
    }
    /**
     * @return {?}
     */
    create() {
        /** @type {?} */
        let styleClass = 'ui-widget ui-tooltip ui-tooltip-' + this.tooltipPosition;
        this.container = document.createElement('div');
        if (this.tooltipStyleClass) {
            styleClass += ' ' + this.tooltipStyleClass;
        }
        this.container.className = styleClass;
        /** @type {?} */
        const tooltipArrow = document.createElement('div');
        tooltipArrow.className = 'ui-tooltip-arrow';
        this.container.appendChild(tooltipArrow);
        /** @type {?} */
        const tooltipText = document.createElement('div');
        tooltipText.className = 'ui-tooltip-text ui-shadow ui-corner-all';
        tooltipText.innerHTML = this.errorMessage;
        if (this.positionStyle) {
            this.container.style.position = this.positionStyle;
        }
        this.container.appendChild(tooltipText);
        document.body.appendChild(this.container);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.container && this.container.parentElement) {
            document.body.removeChild(this.container);
        }
        this.container = null;
    }
}
ValidateMessageTooltipComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-tooltip',
                template: `
    <div #in style="display:inline-block;position:relative">
      <ng-content></ng-content>
    </div>
  `,
                providers: [DomHandler]
            }] }
];
/** @nocollapse */
ValidateMessageTooltipComponent.ctorParameters = () => [
    { type: DomHandler },
    { type: ControlContainer, decorators: [{ type: Optional }] }
];
ValidateMessageTooltipComponent.propDecorators = {
    tooltipPosition: [{ type: Input }],
    control: [{ type: Input }],
    controlName: [{ type: Input }],
    positionStyle: [{ type: Input }],
    tooltipStyleClass: [{ type: Input }],
    messages: [{ type: Input }],
    in: [{ type: ViewChild, args: ['in',] }],
    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }],
    onFocusIn: [{ type: HostListener, args: ['focusin',] }],
    onFocusOut: [{ type: HostListener, args: ['focusout',] }],
    onKeyup: [{ type: HostListener, args: ['keyup',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const PNG_TREE_NODE_KEYS = {
    idKey: 'id',
    labelKey: 'label',
    parentKey: 'parent',
    childrenKey: 'children',
    leafKey: 'leaf',
    dataKey: 'data',
    expandedKey: 'expanded'
};
/** @type {?} */
const DEFAULT_PNG_TREE_PROPS = {
    style: { 'max-height.px': 500, 'max-width.px': 350, 'overflow': 'auto' },
    emptyMessage: '没有节点信息',
    $ext: {
        apiDataProps: {
            dataPath: 'items',
            size: 9999
        },
        dataItemProps: {
            idKey: 'id',
            parentKey: 'parent',
            labelKey: 'name',
            leafKey: 'leaf'
        },
        nodesFormat: 'plainArray',
        lazy: false,
        hasSearchBox: true,
        autoExpandLevel: 1,
        expandedIcon: 'fa fa-folder-open',
        collapsedIcon: 'fa fa-folder',
        icon: 'fa fa-leaf'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngTreeComponent extends DataAwareControlWrapperComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        super();
        this.cd = cd;
        this.templateNames = {
            icon: 'icon',
            node: 'node'
        };
        this.onEmptyNode = new EventEmitter();
        this.onLazyLoad = new EventEmitter();
        this.$defaultProps = DEFAULT_PNG_TREE_PROPS;
        this.modelFormatter = this.formatModel;
        this.valueParser = this.parseValue;
    }
    /**
     * @return {?}
     */
    get selection() {
        return this._selection;
    }
    /**
     * @param {?} selection
     * @return {?}
     */
    set selection(selection) {
        this._selection = selection;
        this.value = selection;
    }
    /**
     * @return {?}
     */
    onPropsInit() {
        this.filtered = false;
        this.loading$ = HTTP_TAG_STATE$(this.$props.$id);
        if (this.$props.$ext.dataItems) {
            this.data$.next(this.$props.$ext.dataItems);
        }
        StatesUtils.create(this.$props.$id, {
            component: this
        }, true);
    }
    /**
     * @return {?}
     */
    load() {
        this.apiDataProps = Object.assign({}, this.apiDataProps);
        this.cd.markForCheck();
    }
    /**
     * @param {?} model
     * @return {?}
     */
    formatModel(model) {
        if (model) {
            this.selectedNodeValues = model;
        }
        return model;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    parseValue(value) {
        /** @type {?} */
        let selectedNodeValues;
        if (CommonsUtils.isArray(value)) {
            selectedNodeValues = CommonsUtils.flattenDeep(value).map(node => this.getSelectedNodeValues(node));
        }
        else if (CommonsUtils.isJson(value)) {
            selectedNodeValues = this.getSelectedNodeValues(value);
        }
        selectedNodeValues = CommonsUtils.flatten(selectedNodeValues);
        selectedNodeValues = CommonsUtils.unique(selectedNodeValues, this.$props.$ext.dataItemProps.idKey);
        selectedNodeValues = CommonsUtils.orderBy(selectedNodeValues, this.$props.$ext.dataItemProps.idKey, 'asc');
        if (this.$props && this.$props.$id) {
            StatesUtils.update(this.$props.$id, {
                selectedNodeValues: selectedNodeValues
            });
        }
        this.selectedNodeValues = selectedNodeValues;
        return selectedNodeValues;
    }
    /**
     * @return {?}
     */
    expandAll() {
        this.data$.value.forEach(node => {
            TreeUtils.expandNode(node, true, this.$props.$ext);
        });
    }
    /**
     * @return {?}
     */
    collapseAll() {
        this.data$.value.forEach(node => {
            TreeUtils.expandNode(node, false, this.$props.$ext);
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    filter(event) {
        /** @type {?} */
        const data = this.applyFilter(event.target.value);
        this.data$.next(data);
        this.filtered = true;
        this.expandAll();
        //  this.cd.detectChanges();
    }
    /**
     * @param {?} filterValue
     * @return {?}
     */
    applyFilter(filterValue) {
        if (!filterValue) {
            this.clearFilter();
            return this.unFilteredValue;
        }
        else {
            filterValue = filterValue.toLowerCase();
            return TreeUtils.filter(this.unFilteredValue, (node) => {
                /** @type {?} */
                let py = node['$py'];
                if (!py) {
                    py = PinyinUtil.getFirstLetter(node.label);
                    node['$py'] = py;
                }
                /** @type {?} */
                const idKey = this.$props.$ext.dataItemProps && this.$props.$ext.dataItemProps.idKey;
                /** @type {?} */
                const sVal = ((node.data && node.data[idKey]) || '') + '';
                /** @type {?} */
                const sLab = node.label || '';
                if (/^\w+$/.test(filterValue)) {
                    return sLab.startsWith(filterValue) || sVal.startsWith(filterValue) || py.startsWith(filterValue);
                }
                else {
                    return RegUtils.test(sVal, filterValue) || RegUtils.test(py, filterValue);
                }
            });
        }
    }
    /**
     * @return {?}
     */
    clearFilter() {
        this.filterValue = '';
        this.data$.next([...this.unFilteredValue]);
        this.filtered = false;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getSelectedNodeValues(node) {
        /** @type {?} */
        const value = this.getSelectedNodeValue(node);
        return CommonsUtils.flattenDeep(value);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onNodeExpand(event) {
        this.expandedNode = event.node;
        if (!event.node.children && this.$props.$ext.lazy) {
            this.onLazyLoad.emit(this.getEventContext(event));
        }
        else {
            this.resolveNode(event.node);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onNodeSelect(event) {
        this.selectedNode = event.node && event.node[PNG_TREE_NODE_KEYS.dataKey] || event.node;
        if (this.$props && this.$props.$id) {
            StatesUtils.update(this.$props.$id, {
                selectedNode: this.selectedNode
            });
        }
        this.updateTouch();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onNodeUnSelect(event) {
        this.updateTouch();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTreeDataReady(event) {
        /** @type {?} */
        let treeNodes = this.createTreeNodes(event);
        this.initSelection(treeNodes);
        this.unFilteredValue = treeNodes;
        if (treeNodes.length > 0) {
            /** @type {?} */
            let level = this.$props.$ext.autoExpandLevel;
            /** @type {?} */
            let nodeId;
            if (this.expandedNode) {
                /** @type {?} */
                let node = this.expandedNode;
                nodeId = node['id'];
                while (node.parent) {
                    level++;
                    node = node.parent;
                }
            }
            TreeUtils.expandNode(treeNodes[0], true, this.$props.$ext, level, 1, nodeId);
        }
        else if (treeNodes.length === 0 || (treeNodes.length === 1 && !treeNodes['children'])) {
            this.onEmptyNode.emit();
        }
        if (this.$props.$ext.filter) {
            /** @type {?} */
            const filter$$1 = this.$props.$ext.filter;
            if (CommonsUtils.isString(filter$$1)) {
                treeNodes = this.applyFilter((/** @type {?} */ (filter$$1)));
            }
            else {
                treeNodes = filter$$1['method'](treeNodes);
            }
        }
        this.data$.next(treeNodes);
    }
    /**
     * @param {?} treeNodes
     * @return {?}
     */
    initSelection(treeNodes) {
        if (this._selection) {
            this.tree.selection = this._selection;
            this.tree.propagateUp((/** @type {?} */ (this._selection)), true);
            return;
        }
        if (this.selectedNodeValues && treeNodes) {
            this._selection = [];
            /** @type {?} */
            const values = CommonsUtils.getArrayValue(this.selectedNodeValues);
            for (let i = 0; i < values.length; i++) {
                /** @type {?} */
                const found = TreeUtils.findNode(treeNodes, values[i], this.$props.$ext);
                if (found) {
                    ((/** @type {?} */ (this._selection))).push(found);
                }
            }
            this.tree.selection = this._selection;
            ((/** @type {?} */ (this._selection))).forEach(node => {
                this.tree.propagateUp(node, true);
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.$props && this.$props.$id) {
            StatesUtils.deleteState(this.$props.$id);
        }
        super.ngOnDestroy();
    }
    /**
     * @private
     * @param {?} node
     * @param {?=} nodes
     * @return {?}
     */
    getSelectedNodeValue(node, nodes) {
        if (CommonsUtils.isEmpty(node)) {
            return undefined;
        }
        if (node['isVirtual']) {
            return undefined;
        }
        nodes = nodes || [];
        /** @type {?} */
        const data = node[PNG_TREE_NODE_KEYS.dataKey];
        if (CommonsUtils.isEmpty(data)) {
            return undefined;
        }
        /** @type {?} */
        let val;
        if (this.$props.$ext.dataItemProps && this.$props.$ext.dataItemProps.valueKey) {
            val = DataItemUtils.getItemValue(data, this.$props.$ext.dataItemProps.valueKey);
        }
        else {
            val = {};
            val[this.$props.$ext.dataItemProps.idKey] = data[this.$props.$ext.dataItemProps.idKey];
            val[(/** @type {?} */ (this.$props.$ext.dataItemProps.labelKey))] = data[(/** @type {?} */ (this.$props.$ext.dataItemProps.labelKey))];
            if (this.$props.$ext.dataItemProps.typeKey) {
                val[this.$props.$ext.dataItemProps.typeKey] = data[this.$props.$ext.dataItemProps.typeKey];
            }
        }
        nodes.push(val);
        if (node[PNG_TREE_NODE_KEYS.parentKey]) {
            this.getSelectedNodeValue(node[PNG_TREE_NODE_KEYS.parentKey], nodes);
        }
        return nodes;
    }
    /**
     * @private
     * @param {?} nodes
     * @return {?}
     */
    createTreeNodes(nodes) {
        if (!nodes) {
            return [];
        }
        /** @type {?} */
        let treeNodes = [...nodes];
        if (this.$props.$ext.nodesFormat === 'plainArray') {
            treeNodes = TreeUtils.transNodes(treeNodes, {
                src: this.$props.$ext.dataItemProps,
                node: PNG_TREE_NODE_KEYS
            }, this.$props.$ext.root, this.$props.$ext.lazy);
        }
        if (treeNodes[0]) {
            TreeUtils.initNode(treeNodes[0], this.$props.$ext);
        }
        /** @type {?} */
        let rootNode = {};
        if (this.$props.$ext.virtualRoot) {
            if (CommonsUtils.isString(this.$props.$ext.virtualRoot)) {
                rootNode.label = (/** @type {?} */ (this.$props.$ext.virtualRoot));
            }
            else {
                rootNode = (/** @type {?} */ (this.$props.$ext.virtualRoot));
            }
            rootNode.children = treeNodes;
            rootNode['isVirtual'] = true;
            return [rootNode];
        }
        else {
            return treeNodes;
        }
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    resolveNode(node) {
        if (node) {
            TreeUtils.initNode(node, this.$props.$ext);
            if (node.children) {
                node.children.forEach(child => TreeUtils.initNode(child, this.$props.$ext));
            }
        }
    }
}
PngTreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-tree',
                template: "<div class=\"ui-g ui-fluid\">\n\n  <div *ngIf=\"$props.$ext.hasSearchBox\" class=\"ui-g-12\">\n     <span class=\"inner-addon\">\n       <i class=\"fa fa-search text-primary left\"></i>\n       <input (keyup)=\"filter($event)\" [(ngModel)]=\"filterValue\" pInputText placeholder=\"\u8F93\u5165\u4EE3\u7801\u6216\u540D\u79F0\u9996\u5B57\u6BCD\" title=\"\u641C\u7D22\u8282\u70B9\"/>\n       <i (click)=\"clearFilter()\" *ngIf=\"filtered\" class=\"fa fa-trash text-muted right\" title=\"\u6E05\u9664\u641C\u7D22\u5185\u5BB9\"></i>\n     </span>\n  </div>\n\n  <p-card class=\"w-100\" erAnimate=\"slideInLeft\">\n    <span class=\"pull-right\">\n          <i class=\"fa fa-arrow-circle-up mr-1\" (click)=\"collapseAll()\" title=\"\u6536\u8D77\u5168\u90E8\"></i>\n          <i (click)=\"expandAll()\" class=\"fa fa-arrow-circle-down mr-1\" title=\"\u5C55\u5F00\u5168\u90E8\"></i>\n          <i (click)=\"load()\" class=\"fa fa-refresh\" title=\"\u5237\u65B0\u6811\"></i>\n      </span>\n    <p-tree #pngTree\n            erPropsBind\n            [props]=\"$props\"\n            [context]=\"ctx\"\n            [erApiData]=\"apiDataProps\"\n            [value]=\"data$|async\"\n            [(selection)]=\"selection\"\n            [loading]=\"loading$ | async\"\n            (onDataReady)=\"onTreeDataReady($event)\"\n            (onNodeExpand)=\"onNodeExpand($event)\"\n            (onNodeSelect)=\"onNodeSelect($event)\"\n            (onNodeUnselect)=\"onNodeUnSelect($event)\"\n    >\n      <ng-template pTemplate=\"default\" let-node>\n        <ng-container *ngTemplateOutlet=\"template(templateNames.node,defaultNodeTpl);\n                                  context:{$implicit: node,props:$props}\"></ng-container>\n      </ng-template>\n\n      <ng-container *ngIf=\"template(templateNames.icon)\">\n        <ng-template let-node pTemplate=\"picture\">\n          <ng-container *ngTemplateOutlet=\"template(templateNames.icon);\n                                  context:{$implicit: node,props:$props}\"></ng-container>\n        </ng-template>\n      </ng-container>\n\n      <ng-template #defaultNodeTpl let-node let-props=\"props\">\n        <!--<input type=\"radio\" name=\"tree_radio\" *ngIf=\"props.selectionMode === 'radio' && !node['children']\"/>-->\n        <span [innerHTML]=\"node['label']\" [ngClass]=\"{'ui-state-highlight':node.matched}\"></span>\n      </ng-template>\n\n    </p-tree>\n  </p-card>\n\n</div>\n",
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngTreeComponent),
                        multi: true
                    }],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["/deep/ li:focus{outline:green solid 1px!important}/deep/ .ui-state-highlight{background-color:#9acd32!important;color:inherit!important;font-weight:700}/deep/ .ui-treenode-content-selected .ui-state-highlight{background-color:transparent!important;font-size:1.1em!important;font-weight:700;color:red!important}"]
            }] }
];
/** @nocollapse */
PngTreeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PngTreeComponent.propDecorators = {
    tree: [{ type: ViewChild, args: ['pngTree',] }],
    onEmptyNode: [{ type: Output }],
    onLazyLoad: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngTreeNavTableComponent extends RouteBindComponent {
    /**
     * @param {?} cd
     * @param {?} router
     * @param {?} activatedRoute
     */
    constructor(cd, router, activatedRoute) {
        super();
        this.cd = cd;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.switchable = true;
        this.hideTree = false;
        this.$subscriptions = this.router.events.subscribe(event => {
            if (event instanceof NavigationEnd) {
                this.isFormOutlet = event.url.indexOf('(aux:') > 0;
                if (this.isRestore) {
                    this.isRestore = false;
                    this.refresh();
                }
                this.cd.markForCheck();
            }
        });
    }
    /**
     * @return {?}
     */
    get isFormOutlet() {
        return this._isFormOutlet;
    }
    /**
     * @param {?} formOutlet
     * @return {?}
     */
    set isFormOutlet(formOutlet) {
        if (this.isFormOutlet !== formOutlet) {
            this._isFormOutlet = formOutlet;
        }
    }
    /**
     * @return {?}
     */
    refresh() {
        this.pngTable.load();
        if (this.pngTree && this.refreshTree) {
            this.refreshTree = false;
            this.pngTree.load();
        }
    }
    /**
     * @param {?} props
     * @return {?}
     */
    beforeRoutePropsBind(props) {
        this.tree = undefined;
        this.table = undefined;
        this.switchable = true;
        this.hideTree = false;
        if (props.caption) {
            CommonsUtils.set(props, 'table.caption', props.caption);
        }
        return props;
    }
    /**
     * @return {?}
     */
    afterRoutePropsBind() {
        if (!this.tree) {
            this.switchable = false;
        }
        else {
            this.hideTree = false;
            this.switchable = true;
            this.tree.$id = IdUtils.getRandom();
            this.tree.$container = this;
            CommonsUtils.set(this.tree, '$ext.$container', this);
        }
        if (this.table) {
            this.table.$id = IdUtils.getRandom();
            this.table.$container = this;
            CommonsUtils.set(this.table, '$ext.$container', this);
        }
    }
    /**
     * @return {?}
     */
    closeTree() {
        this.hideTree = true;
    }
    /**
     * @return {?}
     */
    back() {
        this.isRestore = true;
        this.router.navigate(['./', { outlets: { aux: null } }], {
            relativeTo: this.activatedRoute
        });
    }
}
PngTreeNavTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-tree-nav-table',
                template: `
    <div [hidden]="isFormOutlet">
      <er-fluid-container>
        <er-left-right [hideLeft]="!tree || hideTree" [switchable]="!!tree && switchable">
          <ng-template erTypedTemplate="left">
            <png-panel *ngIf="tree" [icon]="tree.$ext?.captionIcon || 'fa fa-tree'" [header]="tree.$ext?.caption || '管理树'">
              <png-tree erPropsBind [props]="tree" (onEmptyNode)="closeTree()"></png-tree>
            </png-panel>
          </ng-template>
          <ng-template erTypedTemplate="right">
            <div *ngIf="table">
              <div [@fadeIn]="true">
                <png-table erPropsBind [props]="table"></png-table>
              </div>
            </div>
          </ng-template>
        </er-left-right>
      </er-fluid-container>
    </div>
    <router-outlet name="aux">
      <ng-container *ngTemplateOutlet="goBack"></ng-container>
    </router-outlet>
    <ng-container *ngTemplateOutlet="goBack"></ng-container>
    <ng-template #goBack>
      <div *ngIf="isFormOutlet">
        <a (click)="back()" class="btn btn-outline-primary"
           title="返回到数据浏览"> <i class="fa fa-2x text-danger fa-sign-out fa-rotate-180"></i> 返回</a>

      </div>
    </ng-template>
  `,
                animations: [
                    ANIMATIONS.zoomIn,
                    ANIMATIONS.fadeIn
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngTreeNavTableComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Router },
    { type: ActivatedRoute }
];
PngTreeNavTableComponent.propDecorators = {
    tree: [{ type: Input }],
    table: [{ type: Input }],
    switchable: [{ type: Input }],
    hideTree: [{ type: Input }],
    pngTable: [{ type: ViewChild, args: [PngTableComponent,] }],
    pngTree: [{ type: ViewChild, args: [PngTreeComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngStepComponent {
    constructor() {
        this.active = false;
    }
}
PngStepComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-step',
                template: `
    <div *ngIf="active" [ngClass]="styleClass" [ngStyle]="style" class="ui-widget-content ui-corner-all step-container">
      <ng-content></ng-content>
    </div>
  `,
                styles: ['.step-container {padding: 45px 25px 45px 25px; margin-bottom: 20px;}']
            }] }
];
PngStepComponent.propDecorators = {
    styleClass: [{ type: Input }],
    style: [{ type: Input }],
    label: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngWizardComponent extends BaseComponent {
    constructor() {
        super(...arguments);
        this.activeIndex = 0;
        this.stepChange = new EventEmitter();
        this.items = [];
        this.templateNames = {
            header: 'header',
            footer: 'footer'
        };
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        super.ngAfterContentInit();
        this.steps.toArray().forEach((step, index) => {
            if (!step.styleClass) {
                step.styleClass = this.stepStyleClass;
            }
            if (!step.style) {
                step.style = this.style;
            }
            if (index === this.activeIndex) {
                step.active = true;
            }
            this.items[index] = {
                label: step.label,
                command: (event) => {
                    this.steps.toArray().forEach((s) => s.active = false);
                    step.active = true;
                    this.activeIndex = index;
                    this.stepChange.emit(index);
                }
            };
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.steps) {
            return;
        }
        for (const prop in changes) {
            if (prop === 'activeIndex') {
                /** @type {?} */
                const curIndex = changes[prop].currentValue;
                this.steps.toArray().forEach((step, index) => {
                    /** @type {?} */
                    const selected = index === curIndex;
                    step.active = selected;
                });
                this.stepChange.emit(curIndex);
            }
        }
    }
    /**
     * @return {?}
     */
    previous() {
        this.activeIndex--;
        this.stepChange.emit(this.activeIndex);
        this.ngOnChanges({
            activeIndex: {
                currentValue: this.activeIndex,
                previousValue: this.activeIndex + 1,
                firstChange: false,
                isFirstChange: () => false
            }
        });
    }
    /**
     * @return {?}
     */
    next() {
        this.activeIndex++;
        this.stepChange.emit(this.activeIndex);
        this.ngOnChanges({
            activeIndex: {
                currentValue: this.activeIndex,
                previousValue: this.activeIndex - 1,
                firstChange: false,
                isFirstChange: () => false
            }
        });
    }
}
PngWizardComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-wizard',
                template: `
    <ng-container *ngIf="template(templateNames.header)">
      <ng-container *ngTemplateOutlet="template(templateNames.header)"></ng-container>
    </ng-container>
    <p-steps [model]="items" [(activeIndex)]="activeIndex"
             [ngClass]="styleClass" [ngStyle]="style" [readonly]="false"></p-steps>
    <ng-content></ng-content>
    <button pButton type="button" *ngIf="activeIndex > 0" class="mr-2"
            (click)="previous()" icon="fa fa-hand-o-left" label="Previous"></button>
    <button pButton type="button" *ngIf="activeIndex < items.length - 1"
            (click)="next()" icon="fa fa-hand-o-right" iconPos="right" label="Next"></button>
    <ng-container *ngIf="template(templateNames.footer)">
      <ng-container *ngTemplateOutlet="template(templateNames.footer)"></ng-container>
    </ng-container>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host::ng-deep .ui-steps ul[role=tablist]{display:flex!important;justify-content:space-around!important}"]
            }] }
];
PngWizardComponent.propDecorators = {
    activeIndex: [{ type: Input }],
    styleClass: [{ type: Input }],
    style: [{ type: Input }],
    stepStyleClass: [{ type: Input }],
    stepStyle: [{ type: Input }],
    stepChange: [{ type: Output }],
    steps: [{ type: ContentChildren, args: [PngStepComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const PngComponents = [
    PngAutoCompleteComponent,
    PngButtonComponent,
    PngButtonsComponent,
    PngSearchBoxComponent,
    PngAlertComponent,
    PngAnnounceComponent,
    PngPopupDialogComponent,
    PngCheckBoxComponent,
    PngConfirmDialogComponent,
    PngOverlayPanelComponent,
    PngInputComponent,
    PngCalendarComponent,
    PngChartComponent,
    PngStepComponent,
    PngTreeComponent,
    PngTreeNavTableComponent,
    PngPanelComponent,
    PngSliderComponent,
    PngSelectComponent,
    PngRadioComponent,
    PngMultiSelectComponent,
    PngListBoxComponent,
    PngOptionItemComponent,
    PngRatingComponent,
    ValidateMessageTooltipComponent,
    PngTableComponent,
    PngWizardComponent,
    PngFileUploadComponent,
    PngImageComponent,
    PngSelectButtonComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const MenuOrientation = {
    STATIC: 0,
    OVERLAY: 1,
    SLIM: 2,
    HORIZONTAL: 3,
};
MenuOrientation[MenuOrientation.STATIC] = 'STATIC';
MenuOrientation[MenuOrientation.OVERLAY] = 'OVERLAY';
MenuOrientation[MenuOrientation.SLIM] = 'SLIM';
MenuOrientation[MenuOrientation.HORIZONTAL] = 'HORIZONTAL';
class PngAdminWorkSpaceComponent extends BaseComponent {
    /**
     * @param {?} renderer
     * @param {?} cd
     */
    constructor(renderer, cd) {
        super();
        this.renderer = renderer;
        this.cd = cd;
        this.menuOrientation = MenuOrientation.STATIC;
        this.darkMenu = true;
        this.onInitMenu = new EventEmitter();
        this.profileMode = 'inline';
        this.rootMenuToggleStateName = '$rootMenuToggler';
        this.templateNames = {
            topbar: 'topbar',
            header: 'header',
            main: 'main',
            footer: 'footer',
            profile: 'profile',
            settings: 'settings',
            messages: 'messages',
            notifications: 'notifications',
            search: 'search'
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInitMenu.emit();
        this.$subscriptions = StatesUtils.observe(StateNames.menu, this.rootMenuToggleStateName)
            .pipe(filter(state$$1 => state$$1 !== undefined))
            .subscribe(() => this._toggleMainMenu());
        this.appTitle = this.appTitle || ConfigUtils.getConfig().appTitle;
        this.appName = this.appName || ConfigUtils.getConfig().appName;
        this.appLogo = this.appLogo || ConfigUtils.getConfig().appLogo;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout(() => {
            this.layoutMenuScrollerViewChild.moveBar();
        }, 100);
    }
    /**
     * @return {?}
     */
    onLayoutClick() {
        if (!this.topbarItemClick) {
            this.activeTopbarItem = null;
            this.topbarMenuActive = false;
        }
        if (!this.menuClick) {
            if (this.isHorizontal() || this.isSlim()) {
                this.resetMenu = true;
            }
            if (this.overlayMenuActive || this.staticMenuMobileActive) {
                this.hideOverlayMenu();
            }
            this.menuHoverActive = false;
        }
        this.topbarItemClick = false;
        this.menuClick = false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMenuClick($event) {
        this.menuClick = true;
        this.resetMenu = false;
        if (!this.isHorizontal()) {
            setTimeout(() => {
                this.layoutMenuScrollerViewChild.moveBar();
            }, 450);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTopbarMenuButtonClick(event) {
        this.topbarItemClick = true;
        this.topbarMenuActive = !this.topbarMenuActive;
        this.hideOverlayMenu();
        event.preventDefault();
    }
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    onTopbarItemClick(event, item) {
        this.topbarItemClick = true;
        if (this.activeTopbarItem === item) {
            this.activeTopbarItem = null;
        }
        else {
            this.activeTopbarItem = item;
        }
        event.preventDefault();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTopbarSubItemClick(event) {
        event.preventDefault();
    }
    /**
     * @return {?}
     */
    hideOverlayMenu() {
        this.rotateMenuButton = false;
        this.overlayMenuActive = false;
        this.staticMenuMobileActive = false;
    }
    /**
     * @return {?}
     */
    isTablet() {
        /** @type {?} */
        const width = window.innerWidth;
        return width <= 1024 && width > 640;
    }
    /**
     * @return {?}
     */
    isDesktop() {
        return window.innerWidth > 1024;
    }
    /**
     * @return {?}
     */
    isMobile() {
        return window.innerWidth <= 640;
    }
    /**
     * @return {?}
     */
    isOverlay() {
        return this.menuOrientation === MenuOrientation.OVERLAY;
    }
    /**
     * @return {?}
     */
    isHorizontal() {
        return this.menuOrientation === MenuOrientation.HORIZONTAL;
    }
    /**
     * @return {?}
     */
    isSlim() {
        return this.menuOrientation === MenuOrientation.SLIM;
    }
    /**
     * @return {?}
     */
    changeToStaticMenu() {
        this.menuOrientation = MenuOrientation.STATIC;
    }
    /**
     * @return {?}
     */
    changeToOverlayMenu() {
        this.menuOrientation = MenuOrientation.OVERLAY;
    }
    /**
     * @return {?}
     */
    changeToHorizontalMenu() {
        this.menuOrientation = MenuOrientation.HORIZONTAL;
    }
    /**
     * @return {?}
     */
    changeToSlimMenu() {
        this.menuOrientation = MenuOrientation.SLIM;
    }
    /**
     * @private
     * @return {?}
     */
    _toggleMainMenu() {
        /** @type {?} */
        const menu = StatesUtils.getValue(StateNames.rootMenu);
        this.menuOrientation = menu && menu.orientation;
        this.darkMenu = menu && menu.dark;
        this.menuClick = true;
        this.rotateMenuButton = !this.rotateMenuButton;
        this.topbarMenuActive = false;
        if (this.menuOrientation === MenuOrientation.OVERLAY) {
            this.overlayMenuActive = !this.overlayMenuActive;
        }
        else {
            if (this.isDesktop()) {
                this.staticMenuDesktopInactive = !this.staticMenuDesktopInactive;
            }
            else {
                this.staticMenuMobileActive = !this.staticMenuMobileActive;
            }
        }
        this.cd.detectChanges();
    }
}
PngAdminWorkSpaceComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-admin-work-space',
                template: "<div class=\"layout-wrapper\" (click)=\"onLayoutClick()\"\n     [ngClass]=\"{'menu-layout-static': !isOverlay(),\n                'menu-layout-overlay': isOverlay(),\n                'layout-menu-overlay-active': overlayMenuActive,\n                'menu-layout-horizontal': isHorizontal(),\n                'menu-layout-slim': isSlim(),\n                'layout-menu-static-inactive': staticMenuDesktopInactive,\n                'layout-menu-static-active': staticMenuMobileActive}\">\n\n  <png-ws-topbar></png-ws-topbar>\n\n  <div class=\"layout-menu-container\" [ngClass]=\"{'layout-menu-dark':darkMenu}\" (click)=\"onMenuClick($event)\">\n    <p-scrollPanel #layoutMenuScroller [style]=\"{height: '100%' }\">\n      <div class=\"menu-scroll-content\">\n        <png-ws-profile *ngIf=\"profileMode=='inline'&&!isHorizontal()\"></png-ws-profile>\n        <png-ws-main-menu [reset]=\"resetMenu\" [httpMenuTag]=\"httpMenuTag\"></png-ws-main-menu>\n      </div>\n    </p-scrollPanel>\n  </div>\n\n  <div class=\"layout-main\">\n    <ng-container *ngTemplateOutlet=\"template(templateNames.main)\"></ng-container>\n    <router-outlet></router-outlet>\n  </div>\n\n  <div class=\"layout-mask\"></div>\n\n  <png-ws-footer></png-ws-footer>\n\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngAdminWorkSpaceComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ChangeDetectorRef }
];
PngAdminWorkSpaceComponent.propDecorators = {
    menuOrientation: [{ type: Input }],
    darkMenu: [{ type: Input }],
    appName: [{ type: Input }],
    appTitle: [{ type: Input }],
    appLogo: [{ type: Input }],
    httpMenuTag: [{ type: Input }],
    onInitMenu: [{ type: Output }],
    layoutMenuScrollerViewChild: [{ type: ViewChild, args: ['layoutMenuScroller',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PrimeNgComponentsModule {
}
PrimeNgComponentsModule.decorators = [
    { type: NgModule, args: [{
                exports: [
                    AutoCompleteModule,
                    AccordionModule,
                    BreadcrumbModule,
                    ConfirmDialogModule,
                    CardModule,
                    CalendarModule,
                    ChipsModule,
                    CheckboxModule,
                    ChartModule,
                    EditorModule,
                    InputTextModule,
                    InputTextareaModule,
                    FieldsetModule,
                    DialogModule,
                    ButtonModule,
                    FileUploadModule,
                    MessagesModule,
                    KeyFilterModule,
                    TableModule,
                    TabViewModule,
                    MultiSelectModule,
                    SliderModule,
                    DropdownModule,
                    RadioButtonModule,
                    PaginatorModule,
                    TooltipModule,
                    LightboxModule,
                    ListboxModule,
                    InputMaskModule,
                    InputSwitchModule,
                    CheckboxModule,
                    RadioButtonModule,
                    OverlayPanelModule,
                    OrganizationChartModule,
                    PanelModule,
                    RatingModule,
                    TreeModule,
                    SelectButtonModule,
                    SplitButtonModule,
                    SpinnerModule,
                    MenuModule,
                    ScrollPanelModule,
                    StepsModule,
                    ToastModule,
                    ToggleButtonModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngTableBodyCellComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     */
    constructor(pngTable) {
        super();
        this.pngTable = pngTable;
    }
    /**
     * @return {?}
     */
    get width() {
        return this.column.width;
    }
    /**
     * @return {?}
     */
    get height() {
        return this.column.height;
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    cellContext(event) {
        return {
            $event: event,
            $id: this.pngTable.$props.$id,
            column: this.column,
            row: this.row,
            rowIndex: this.rowIndex,
            pngTable: this.pngTable
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        if (this.column.onMouseEnter) {
            this.column.onMouseEnter.call(this.pngTable, this.cellContext(event));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseOver(event) {
        if (this.column.onMouseOver) {
            this.column.onMouseOver.call(this.pngTable, this.cellContext(event));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseOut(event) {
        if (this.column.onMouseOut) {
            this.column.onMouseOut.call(this.pngTable, this.cellContext(event));
        }
    }
}
PngTableBodyCellComponent.decorators = [
    { type: Component, args: [{
                selector: '[png-table-body-cell]',
                template: `
    <ng-container *ngIf="customerTpl;else default">
      <ng-container *ngTemplateOutlet="customerTpl;context:cellContext"></ng-container>
    </ng-container>
    <ng-template #default>
      <png-table-body-cell-content
        [customerTpl]="dataCellTpl"
        [column]="column"
        [row]="row"
        [rowIndex]="rowIndex"
      ></png-table-body-cell-content>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngTableBodyCellComponent.ctorParameters = () => [
    { type: PngTableComponent }
];
PngTableBodyCellComponent.propDecorators = {
    column: [{ type: Input }],
    row: [{ type: Input }],
    rowIndex: [{ type: Input }],
    dataCellTpl: [{ type: Input }],
    width: [{ type: HostBinding, args: ['style.width',] }],
    height: [{ type: HostBinding, args: ['style.height',] }],
    onMouseEnter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
    onMouseOver: [{ type: HostListener, args: ['mouseover', ['$event'],] }],
    onMouseOut: [{ type: HostListener, args: ['mouseout', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngTableBodyCellContentComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     * @param {?} cell
     */
    constructor(pngTable, cell) {
        super();
        this.pngTable = pngTable;
        this.cell = cell;
        this.DATA_ATTR = DataAttr;
        this.DATA_TYPE = DataType;
        this.OVERLAY_TYPE = OverlayType;
    }
    /**
     * @return {?}
     */
    get cellContent() {
        if (this.column.dataAttr === DataAttr.BUTTONS) {
            /** @type {?} */
            let btns = this.column.cellContent;
            btns = CommonsUtils.getArrayValue(btns);
            btns = btns.filter(btn => !btn.show || btn.show === true || btn.show.method === true || (CommonsUtils.isFunction(btn.show.method) && (/** @type {?} */ ((btn.show.method).call(this, this.cellContext())))));
            return btns;
        }
        /** @type {?} */
        let content = this.getValue(this.column.cellContent || this.row[this.column.key]);
        if (CommonsUtils.isEmpty(content) && this.column.defaultCellContent !== undefined) {
            content = this.column.defaultCellContent;
        }
        if (this.column.contentKey) {
            content = CommonsUtils.get(content, this.column.contentKey);
            if (CommonsUtils.isArray(content)) {
                content = (/** @type {?} */ (content.join(',')));
            }
        }
        else if (this.column.format) {
            CommonsUtils.format(content, this.column.format);
        }
        else if (CommonsUtils.isFunction(this.column.formatter)) {
            content = ((/** @type {?} */ (this.column.formatter)))(content);
        }
        else if (this.column.formatter || CommonsUtils.isTemplateStr(content)) {
            content = CommonsUtils.templateStr(((/** @type {?} */ (this.column.formatter))) || content, this.row);
        }
        else if (CommonsUtils.isJson(content)) {
            content = DataFieldUtils.getFieldDisplayContent(content, this.column.dataField);
        }
        if (CommonsUtils.isString(content) && this.column.maxLength && content.length > this.column.maxLength) {
            content = content.substr(0, this.column.maxLength) + '...';
        }
        if (content === true) {
            return '是';
        }
        else if (content === false) {
            return '否';
        }
        return content;
    }
    /**
     * @return {?}
     */
    get cellIcon() {
        return this.getValue(this.column.cellIcon);
    }
    /**
     * @return {?}
     */
    get toolTip() {
        /** @type {?} */
        const toolTip = this.getValue(this.column.toolTip);
        if (!toolTip && this.column.maxLength && this.row[this.column.key] && this.row[this.column.key].length > this.column.maxLength) {
            return this.row[this.column.key];
        }
        return toolTip;
    }
    /**
     * @return {?}
     */
    get cellClass() {
        return CommonsUtils.getValue(this.column.cellStyleClass, this.cellContext());
    }
    /**
     * @return {?}
     */
    get cellStyle() {
        return CommonsUtils.getValue(this.column.cellStyle, this.cellContext());
    }
    /**
     * @return {?}
     */
    get routLink() {
        if (!this.column.routLink) {
            return;
        }
        /** @type {?} */
        let routerLink = this.column.routLink;
        if (CommonsUtils.isString(routerLink)) {
            routerLink = [routerLink];
        }
        /** @type {?} */
        let routeParams;
        if (this.column.routParam) {
            if (CommonsUtils.isFunction(this.column.routParam)) {
                routeParams = ((/** @type {?} */ (this.column.routParam))).call(this.pngTable, this.column, this.row) || [];
            }
            else if (CommonsUtils.isArray(this.column.routParam)) {
                routeParams = ((/** @type {?} */ (this.column.routParam))).map(param => this.row[param]) || [];
            }
            else if (CommonsUtils.isString(this.column.routParam)) {
                routeParams = [this.row[(/** @type {?} */ (this.column.routParam))]] || [];
            }
            else if (this.pngTable.$props.dataKey) {
                routeParams = [this.row[this.pngTable.$props.dataKey]] || [];
            }
        }
        if (routeParams) {
            routerLink = [...(/** @type {?} */ (routerLink)), ...routeParams];
        }
        return routerLink;
    }
    /**
     * @return {?}
     */
    get queryParam() {
        if (!this.column.routQueryParams) {
            return;
        }
        if (CommonsUtils.isFunction(this.column.routQueryParams)) {
            return ((/** @type {?} */ (this.column.routQueryParams))).call(this.pngTable, this.column, this.row);
        }
        else if (CommonsUtils.isArray(this.column.routQueryParams)) {
            /** @type {?} */
            const params = {};
            ((/** @type {?} */ (this.column.routQueryParams))).map(param => params[param] = this.row[param]);
            return params;
        }
        else if (CommonsUtils.isString(this.column.routQueryParams)) {
            return { [(/** @type {?} */ (this.column.routQueryParams))]: this.row[(/** @type {?} */ (this.column.routQueryParams))] };
        }
        return undefined;
    }
    /**
     * @param {?} icon
     * @return {?}
     */
    iconClass(icon) {
        if (icon && icon.trim().startsWith('fa-')) {
            return `fa ${icon}`;
        }
        return icon;
    }
    /**
     * @param {?} attr
     * @return {?}
     */
    hasAttr(attr) {
        return this.column.dataAttr === attr ||
            (CommonsUtils.isArray(this.column.dataAttr) && ((/** @type {?} */ (this.column.dataAttr))).indexOf(attr) >= 0);
    }
    /**
     * @param {?} overlay
     * @param {?} index
     * @param {?=} event
     * @return {?}
     */
    overlayContext(overlay, index, event) {
        return Object.assign({}, this.cellContext(event), { type: overlay.type, content: this.getValue(overlay.content), context: overlay.context, styleClass: this.getValue(overlay.styleClass), style: this.getValue(overlay.style), overlayStyleClass: this.getValue(overlay.overlayStyleClass), overlayStyle: this.getValue(overlay.overlayStyle), id: `overlay-cell-${this.column.key}-${index}` });
    }
    /**
     * @param {?} content
     * @return {?}
     */
    treeContent(content) {
        if (CommonsUtils.isArray(content)) {
            return '共' + ((/** @type {?} */ (content))).length + '项';
        }
        else if (CommonsUtils.isJson(content)) {
            return '共' + Object.keys(content).length + '项';
        }
        else {
            return content;
        }
    }
    /**
     * @param {?} content
     * @param {?=} event
     * @return {?}
     */
    overlayTreeContext(content, event) {
        return Object.assign({}, this.cellContext(event), { type: OverlayType.TREE, content: content });
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    cellContext(event) {
        return this.cell.cellContext(event);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.column.overlays) {
            ((/** @type {?} */ (this.column.overlays))).filter(overlay => overlay.type === OverlayType.MENU)
                .forEach(overlay => {
                if (overlay.content['menuItem'].command) {
                    /** @type {?} */
                    const command = overlay.content['menuItem'].command;
                    overlay.content['menuItem'].command = (event) => command.call(this, this.cellContext(event));
                }
            });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    cellClick(event) {
        event.preventDefault();
        if (this.column.onClick) {
            this.column.onClick.call(this.pngTable, this.cellContext(event));
        }
    }
    /**
     * @param {?} event
     * @param {?} tipText
     * @return {?}
     */
    toggleTip(event, tipText) {
        if (tipText) {
            this.pngTable.showOverlay((/** @type {?} */ ({
                $event: event,
                content: tipText,
                styleClass: 'alert alert-info',
                style: {
                    overflow: 'auto',
                    width: '300px',
                    height: '300px'
                }
            })));
        }
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    getValue(target) {
        return CommonsUtils.getValue(target, this.cellContext()) || '';
    }
}
PngTableBodyCellContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-table-body-cell-content',
                template: "<ng-container *ngIf=\"customerTpl;else default\">\n  <ng-container *ngTemplateOutlet=\"customerTpl;context:cellContext()\"></ng-container>\n</ng-container>\n<ng-template #default>\n  <ng-container *ngIf=\"column.overlays\">\n    <ng-container *ngFor=\"let overlay of column.overlays; index as i\">\n      <ng-container [ngSwitch]=\"overlay.type\">\n        <ng-container *ngSwitchCase=\"OVERLAY_TYPE.CHART\">\n          <i [ngClass]=\"overlay.icon || 'fa fa-bar-chart text-primary'\" class=\"pull-right\"\n             title=\"\u663E\u793A\u56FE\u5F62\" (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"OVERLAY_TYPE.TABLE\">\n          <i [ngClass]=\"overlay.icon || 'fa fa-eye text-primary'\" class=\"pull-right\"\n             title=\"\u663E\u793A\u8868\u683C\" (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"OVERLAY_TYPE.PANEL\">\n          <i [ngClass]=\"overlay.icon || 'fa fa-eye text-primary'\" class=\"pull-right\"\n             title=\"\u663E\u793A\u66F4\u591A\u4FE1\u606F\" (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"OVERLAY_TYPE.MENU\">\n          <i [ngClass]=\"overlay.icon || 'fa fa-arrow-circle-down text-primary'\" class=\"pull-right\"\n             title=\"\u663E\u793A\u83DC\u5355\" (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"OVERLAY_TYPE.FRAME\">\n          <i [ngClass]=\"overlay.icon || 'fa fa-play text-primary'\"\n             title=\"\u663E\u793A\u66F4\u591A\u5185\u5BB9\" (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"OVERLAY_TYPE.COMPONENT\">\n          <i [ngClass]=\"overlay.icon || 'fa fa-eye text-primary'\"\n             title=\"\u663E\u793A\u66F4\u591A\u5185\u5BB9\" (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n  <ng-container [ngSwitch]=\"column.dataAttr\">\n    <ng-container *ngSwitchCase=\"DATA_ATTR.IMAGE\">\n      <png-image [imageStyleClass]=\"cellClass\"\n                 [imageStyle]=\"cellStyle\"\n                 size=\"small\"\n                 [fileId]=\"cellContent\"\n                 [showDescription]=\"false\"\n      >\n      </png-image>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.TAG\">\n        <span erTag [pTooltip]=\"toolTip\"\n              tooltipPosition=\"top\"\n              class=\"pull-right\"\n              [ngClass]=\"cellClass\"\n              [ngStyle]=\"cellStyle\">{{cellContent}}</span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.URL\">\n      <a [pTooltip]=\"toolTip\"\n         tooltipPosition=\"top\"\n         [href]=\"routLink\"\n         [ngClass]=\"cellClass\"\n         [ngStyle]=\"cellStyle\"\n         target=\"_blank\">{{cellContent}}</a>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.COLOR\">\n      <span [ngClass]=\"cellContent | lowercase\"></span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.TREE\">\n      <span class=\"pull-right\">\n        {{treeContent(cellContent)}} <i class=\"fa fa-tree blue\" title=\"\u67E5\u770B\u5185\u5BB9\"\n                                        (click)=\"pngTable.showOverlay(overlayTreeContext(cellContent,$event))\"></i>\n      </span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.ICON\">\n      <span class=\"pull-right\"><i [ngClass]=\"iconClass(cellContent)\"></i></span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.DATE\">\n      <span>{{cellContent | date: 'yyyy-MM-dd'}}</span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.TIME\">\n      <span>{{cellContent | date: 'HH:mm:ss'}}</span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.DATE_TIME\">\n      <span>{{cellContent | date: 'yyyy-MM-dd HH:mm:ss'}}</span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.UP_TO_NOW\">\n      <ng-container *ngIf=\"cellContent\">\n       <span erTag class=\"pull-right date-to-now\" [pTooltip]=\"cellContent\" tooltipPosition=\"top\">\n        {{cellContent | erUpToNow}}\n      </span>\n        <i class=\"fa fa-clock-o pull-right\"></i>\n      </ng-container>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.BADGE\">\n      <span [pTooltip]=\"toolTip\"\n            tooltipPosition=\"top\"\n            class='pull-right badge'\n            [ngClass]=\"cellClass\"\n            [ngStyle]=\"cellStyle\"\n            [innerHTML]=\"cellContent\"></span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.CODE\">\n      <span [pTooltip]=\"toolTip\"\n            tooltipPosition=\"top\"\n            class=\"pull-right data-code\"\n            [ngClass]=\"cellClass\"\n            [ngStyle]=\"cellStyle\"\n            [innerHTML]=\"cellContent\"></span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.PERCENT\">\n      <span [innerHTML]=\"cellContent|erPercent\"></span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.BUTTONS\">\n      <png-buttons [btns]=\"cellContent\" [context]=\"cellContext()\" [styleClass]=\"cellClass\"\n                   [style]=\"cellStyle\"></png-buttons>\n    </ng-container>\n    <ng-container *ngSwitchDefault>\n      <ng-container *ngIf=\"column.routLink || column.routParam\">\n        <a [pTooltip]=\"toolTip\" tooltipPosition=\"top\"\n           [ngClass]=\"cellClass\"\n           [ngStyle]=\"cellStyle\"\n           [routerLink]=\"routLink\" [queryParams]=\"queryParam\"\n           [innerHTML]=\"cellContent\"></a>\n      </ng-container>\n      <ng-container *ngIf=\"column.onClick\">\n        <a href=\"#\" [pTooltip]=\"toolTip\" tooltipPosition=\"top\"\n           [ngClass]=\"cellClass\"\n           [ngStyle]=\"cellStyle\"\n           (click)=\"cellClick($event)\"\n           [innerHTML]=\"cellContent\"></a>\n      </ng-container>\n      <ng-container *ngIf=\"!(column.routLink || column.routParam) && !column.onClick\">\n              <span [innerHTML]=\"cellContent\"\n                    [pTooltip]=\"toolTip\"\n                    tooltipPosition=\"top\"\n                    [ngClass]=\"cellClass\"\n                    [ngStyle]=\"cellStyle\"\n                    class=\"pull-right\"\n                    (click)=\"toggleTip($event, toolTip)\"\n              ></span>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngTableBodyCellContentComponent.ctorParameters = () => [
    { type: PngTableComponent },
    { type: PngTableBodyCellComponent }
];
PngTableBodyCellContentComponent.propDecorators = {
    column: [{ type: Input }],
    row: [{ type: Input }],
    rowIndex: [{ type: Input }],
    selectors: [{ type: ViewChildren, args: [SelectorDirective,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngTableBodyRowComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     * @param {?} cd
     */
    constructor(pngTable, cd) {
        super();
        this.pngTable = pngTable;
        this.cd = cd;
    }
    /**
     * @return {?}
     */
    get rowContext() {
        return {
            columns: this.columns,
            row: this.row,
            rowIndex: this.rowIndex,
            expanded: this.expanded,
            context: this.pngTable
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.chk) {
            this.$subscriptions = this.chk.tableService.selectionSource$.subscribe(() => {
                this.cd.detectChanges();
            });
        }
    }
    /**
     * @param {?} col
     * @return {?}
     */
    colContext(col) {
        return Object.assign({}, this.rowContext, col);
    }
    /**
     * @param {?} col
     * @return {?}
     */
    getColStyleClass(col) {
        return CommonsUtils.getValue(col.styleClass, this.colContext(col));
    }
    /**
     * @param {?} col
     * @return {?}
     */
    getColStyle(col) {
        return CommonsUtils.getValue(col.style, this.colContext(col));
    }
}
PngTableBodyRowComponent.decorators = [
    { type: Component, args: [{
                selector: '[png-table-body-row]',
                template: `
    <ng-container *ngIf="customerTpl;else default">
      <ng-container *ngTemplateOutlet="customerTpl;context:rowContext"></ng-container>
    </ng-container>
    <ng-template #default>
      <tr *ngIf="rowHeaderTpl">
        <ng-container *ngTemplateOutlet="rowHeaderTpl;context:rowContext"></ng-container>
      </tr>
      <td *ngIf="pngTable.$props.$ext.rowExpandable" class="col-expandable">
        <a href="#" [pRowToggler]="row">
          <i [ngClass]="expanded ? 'pi pi-chevron-down' : 'pi pi-chevron-right'"></i>
        </a>
      </td>
      <td *ngIf="pngTable.$props.$ext.hasRowCheckbox" class="col-checkbox">
        <p-tableCheckbox #chk [value]="row"></p-tableCheckbox>
      </td>
      <td *ngIf="pngTable.$props.$ext.hasRowRadioButton" class="col-radio">
        <p-tableRadioButton [value]="row"></p-tableRadioButton>
      </td>
      <ng-container *ngFor="let col of columns">
        <td png-table-body-cell class="col-data col-data-{{col.key}}"
            [ngClass]="getColStyleClass(col)"
            [ngStyle]="getColStyle(col)"
            [customerTpl]="cellTpl"
            [column]="col"
            [row]="row"
            [rowIndex]="rowIndex"
            [dataCellTpl]="dataCellTpl"
        >
        </td>
      </ng-container>
      <tr *ngIf="rowFooterTpl">
        <ng-container *ngTemplateOutlet="rowFooterTpl;context:rowContext"></ng-container>
      </tr>
    </ng-template>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngTableBodyRowComponent.ctorParameters = () => [
    { type: PngTableComponent },
    { type: ChangeDetectorRef }
];
PngTableBodyRowComponent.propDecorators = {
    columns: [{ type: Input }],
    row: [{ type: Input }],
    rowIndex: [{ type: Input }],
    expanded: [{ type: Input }],
    rowHeaderTpl: [{ type: Input }],
    rowFooterTpl: [{ type: Input }],
    cellTpl: [{ type: Input }],
    dataCellTpl: [{ type: Input }],
    chk: [{ type: ViewChild, args: ['chk',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngTableCaptionComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     */
    constructor(pngTable) {
        super();
        this.pngTable = pngTable;
        this.onSimpleSearch = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    search(event) {
        this.onSimpleSearch.emit(event);
    }
    /**
     * @return {?}
     */
    openPanel() {
        StatesUtils.update(StateNames.popup, (/** @type {?} */ ((/** @type {?} */ ({
            header: '查询条件定义',
            content: this.searchBuilderPanel,
            visible: true,
            minWidth: 700,
            contentMaxHeight: 400
        })))));
    }
    /**
     * @return {?}
     */
    refresh() {
        this.pngTable.load();
    }
}
PngTableCaptionComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-table-caption',
                template: `
    <ng-container *ngIf="customerTpl;else default">
      <ng-container *ngTemplateOutlet="customerTpl;context:{$implicit:pngTable}"></ng-container>
    </ng-container>
    <ng-template #default>
      <div>
        <span class="pull-left table-caption" [innerHTML]="caption|erSafeHtml"></span>
        <span class="pull-right d-inline"><i class="fa fa-refresh text-primary" title="刷新表格" (click)="refresh()"></i></span>
      </div>
      <div class="clearfix"></div>
      <div *ngIf="hasSearchBox || hasAddAction || hasSearchInput">
        <div class="d-flex align-items-start">
          <div class="pl-3 py-3" *ngIf="hasAddAction">
            <png-button erPropsBind [props]="addButton" [outputContext]="{pngTable: pngTable}"></png-button>
          </div>
          <div class="ml-auto py-3" *ngIf="hasSearchInput && !hasSearchBox">
            <png-search-box title="综合搜索，输入回车键执行" (onSearch)="search($event)"></png-search-box>
          </div>
          <div class="ml-auto" *ngIf="hasSearchBox">
            <button pButton icon="fa fa-search" label="高级查询" (click)="openPanel()"></button>
            <ng-template #searchBuilderPanel>
              <png-table-query-builder></png-table-query-builder>
            </ng-template>
          </div>
        </div>
      </div>
    </ng-template>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngTableCaptionComponent.ctorParameters = () => [
    { type: PngTableComponent }
];
PngTableCaptionComponent.propDecorators = {
    caption: [{ type: Input }],
    hasAddAction: [{ type: Input }],
    hasSearchInput: [{ type: Input }],
    hasSearchBox: [{ type: Input }],
    addButton: [{ type: Input }],
    onSimpleSearch: [{ type: Output }],
    searchBuilderPanel: [{ type: ViewChild, args: ['searchBuilderPanel',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngTableColumnSelectorComponent extends BaseComponent {
    constructor() {
        super(...arguments);
        this.onColumnsChange = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    changeColumns(event) {
        event.value.forEach(column => column.hidden = false);
        this.onColumnsChange.emit(event);
    }
}
PngTableColumnSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-table-column-selector',
                template: `

    <p-multiSelect [style]="{height: '30px', minWidth: '150px'}"
                   [ngClass]="styleClass"
                   [ngStyle]="style"
                   [options]="optionColumns"
                   [(ngModel)]="columns"
                   optionLabel="label"
                   [selectedItemsLabel]="'当前显示{0}('+optionColumns?.length+')个列'"
                   defaultLabel="选择显示字段"
                   (onChange)="changeColumns($event)"
    >
    </p-multiSelect>

  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
PngTableColumnSelectorComponent.propDecorators = {
    columns: [{ type: Input }],
    optionColumns: [{ type: Input }],
    styleClass: [{ type: Input }],
    style: [{ type: Input }],
    onColumnsChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngTableExpandedRowComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     */
    constructor(pngTable) {
        super();
        this.pngTable = pngTable;
        this.customerContent = false;
    }
    /**
     * @return {?}
     */
    get dataColumns() {
        return this.columns.filter(column => column.isDataColumn !== false && !column.isActionColumn);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.rowId) {
            if (this.pngTable.$props.$ext.onExpandRowContent) {
                this.customerContent = true;
                this.expandContent$ = this.pngTable.$props.$ext.onExpandRowContent.method(this.rowId);
            }
            else {
                this.expandContent$ = ApiUtils.getById(this.pngTable.$props.$ext.apiDataProps.apiEntry, this.rowId, {
                    tag: this.rowId,
                    payload: { 'fields': this.pngTable.$props.$ext.expandRowFields || this.pngTable.dataColumnNames }
                });
            }
        }
    }
    /**
     * @param {?} col
     * @param {?} rowData
     * @return {?}
     */
    content(col, rowData) {
        if (!col.key) {
            return;
        }
        if (col.cellContent) {
            console.log('cellcontent');
            return col.cellContent({ row: rowData });
        }
        /** @type {?} */
        let c = rowData[col.key];
        if (CommonsUtils.isJson(c)) {
            /** @type {?} */
            let key;
            if (col.dataField) {
                key = DataFieldUtils.getDefaultFieldName(col.dataField);
            }
            if (key) {
                return CommonsUtils.get(c, key);
            }
            else {
                /** @type {?} */
                const trans = {};
                Object.keys(c).forEach(sub => {
                    /** @type {?} */
                    const label = CommonsUtils.get(col, `dataField.fields.${sub}.label`);
                    if (label) {
                        trans[label] = c[sub];
                    }
                    else {
                        trans[sub] = c[sub];
                    }
                });
                c = trans;
            }
        }
        return CommonsUtils.getText(c);
    }
}
PngTableExpandedRowComponent.decorators = [
    { type: Component, args: [{
                selector: '[png-table-expanded-row]',
                template: `
    <ng-container *ngIf="customerTpl;else default">
      <ng-container *ngTemplateOutlet="customerTpl;context:{$implicit:rowId,context:pngTable}"></ng-container>
    </ng-container>
    <ng-template #default>
      <td colspan="100%">
        <p-card styleClass="ui-card-shadow w-100 ui-table-expanded-content" >
          <er-http-status [tag]="rowId" erPosition></er-http-status>
          <ng-container *ngIf="expandContent$|async as expandContent">
            <div class="row w-100 m-3" style="font-size: 16px">
              <ng-container *ngIf="!customerContent">
                <ng-container *ngFor="let col of dataColumns">
                  <span class="col-2 my-3"><b class="pull-right" [innerHTML]="col.label"></b></span>
                  <ng-container *ngIf="col.expandViewContent;else defaultView">
                    <er-dyna-content [content]="col.expandViewContent" [context]="{data: expandContent, col: col}"></er-dyna-content>
                  </ng-container>
                  <ng-template #defaultView>
                    <span class="col-4 my-3">{{content(col, expandContent)}}</span>
                  </ng-template>
                </ng-container>
              </ng-container>
              <ng-container *ngIf="customerContent">
                <er-dyna-content [content]="expandContent"></er-dyna-content>
              </ng-container>
            </div>
          </ng-container>
        </p-card>
      </td>
    </ng-template>

  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngTableExpandedRowComponent.ctorParameters = () => [
    { type: PngTableComponent }
];
PngTableExpandedRowComponent.propDecorators = {
    rowId: [{ type: Input }],
    columns: [{ type: Input }],
    styleClass: [{ type: Input }],
    style: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngTableFooterComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     */
    constructor(pngTable) {
        super();
        this.pngTable = pngTable;
    }
}
PngTableFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'tr[png-table-footer]',
                template: `
    <ng-container *ngIf="customerTpl;else default">
      <ng-container *ngTemplateOutlet="customerTpl; context:{columns:columns,context:pngTable}"></ng-container>
    </ng-container>
    <ng-template #default></ng-template>
  `
            }] }
];
/** @nocollapse */
PngTableFooterComponent.ctorParameters = () => [
    { type: PngTableComponent }
];
PngTableFooterComponent.propDecorators = {
    columns: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngTableHeaderColComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     * @param {?} cd
     */
    constructor(pngTable, cd) {
        super();
        this.pngTable = pngTable;
        this.cd = cd;
        this.OVERLAY_TYPE = OverlayType;
        this.onFilterBtnClick = new EventEmitter();
        this.onAggsBtnClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get colClass() {
        if (CommonsUtils.isFunction(this.column.colClass)) {
            return ((/** @type {?} */ (this.column.colClass))).call(this.pngTable, this.column);
        }
        else {
            return (/** @type {?} */ (this.column.colClass)) || '';
        }
    }
    /**
     * @return {?}
     */
    get width() {
        return this.column.width;
    }
    /**
     * @return {?}
     */
    get colStyle() {
        if (CommonsUtils.isFunction(this.column.colStyle)) {
            return ((/** @type {?} */ (this.column.colStyle))).call(this.pngTable, this.column);
        }
        else {
            return (/** @type {?} */ (this.column.colStyle)) || '';
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.column.headerOverlays) {
            ((/** @type {?} */ (this.column.headerOverlays))).filter(overlay => overlay.type === OverlayType.MENU)
                .forEach(overlay => {
                if (overlay.content['menuItem'].command) {
                    /** @type {?} */
                    const command = overlay.content['menuItem'].command;
                    overlay.content['menuItem'].command = (event) => command.call(this, this.headerContext(event));
                }
            });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    filterClick(event) {
        this.onFilterBtnClick.emit({
            event,
            column: this.column
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    aggsClick(event) {
        this.onAggsBtnClick.emit({
            $event: event,
            column: this.column
        });
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    headerContext(event) {
        return {
            $event: event,
            $id: this.pngTable.$props.$id,
            column: this.column,
            pngTable: this.pngTable
        };
    }
    /**
     * @param {?} overlay
     * @param {?} index
     * @param {?=} event
     * @return {?}
     */
    overlayContext(overlay, index, event) {
        return {
            $event: event,
            type: overlay.type,
            content: CommonsUtils.getValue(overlay.content, this.headerContext(event)),
            context: overlay.context,
            styleClass: CommonsUtils.getValue(overlay.styleClass, this.headerContext(event)),
            style: CommonsUtils.getValue(overlay.style, this.headerContext(event)),
            overlayStyleClass: CommonsUtils.getValue(overlay.overlayStyleClass, this.headerContext(event)),
            overlayStyle: CommonsUtils.getValue(overlay.overlayStyle, this.headerContext(event)),
            id: `overlay-header-${this.column.key}-${index}`
        };
    }
}
PngTableHeaderColComponent.decorators = [
    { type: Component, args: [{
                selector: '[png-table-header-col]',
                template: `
    <span *ngIf="!column.sortable" [innerHTML]="column.label|erSafeHtml"></span>
    <span *ngIf="column.sortable" title="排序" [pSortableColumn]="column.key" [innerHTML]="column.label|erSafeHtml"></span>
    <p-sortIcon *ngIf="column.sortable" [field]="column.key"></p-sortIcon>
    <span *ngIf="column.filterable" class="pull-right">
              <i class="fa fa-filter" title="输入查询内容" [ngClass]="{'ui-state-highlight': column.filters && column.filters.length>0}"
                 (click)="filterClick($event)"></i>
            </span>
    <span *ngIf="column.aggable" class="pull-right">
              <i class="fa fa-sum" title="选择统计方法" [ngClass]="{'ui-state-highlight': column.aggProps && column.aggProps.length>0}"
                 (click)="aggsClick($event)"></i>
            </span>
    <ng-container *ngIf="column.headerOverlays">
      <ng-container *ngFor="let overlay of column.headerOverlays; index as i">
        <ng-container [ngSwitch]="overlay.type">
          <ng-container *ngSwitchCase="OVERLAY_TYPE.CHART">
            <i [ngClass]="overlay.icon || 'fa fa-bar-chart text-primary'" class="pull-right"
               (click)="pngTable.showOverlay(overlayContext(overlay,i,$event))"></i>
          </ng-container>
          <ng-container *ngSwitchCase="OVERLAY_TYPE.TABLE">
            <i [ngClass]="overlay.icon || 'fa fa-eye text-primary'" class="pull-right"
               (click)="pngTable.showOverlay(overlayContext(overlay,i,$event))"></i>
          </ng-container>
          <ng-container *ngSwitchCase="OVERLAY_TYPE.PANEL">
            <i [ngClass]="overlay.icon || 'fa fa-eye text-primary'" class="pull-right"
               (click)="pngTable.showOverlay(overlayContext(overlay,i,$event))"></i>
          </ng-container>
          <ng-container *ngSwitchCase="OVERLAY_TYPE.MENU">
            <i [ngClass]="overlay.icon || 'fa fa-arrow-circle-down text-primary'" class="pull-right"
               (click)="pngTable.showOverlay(overlayContext(overlay,i,$event))"></i>
          </ng-container>
          <ng-container *ngSwitchCase="OVERLAY_TYPE.FRAME">
            <i [ngClass]="overlay.icon || 'fa fa-play text-primary'"
               (click)="pngTable.showOverlay(overlayContext(overlay,i,$event))"></i>
          </ng-container>
          <ng-container *ngSwitchCase="OVERLAY_TYPE.COMPONENT">
            <i [ngClass]="overlay.icon || 'fa fa-eye text-primary'"
               (click)="pngTable.showOverlay(overlayContext(overlay,i,$event))"></i>
          </ng-container>
        </ng-container>
      </ng-container>
    </ng-container>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngTableHeaderColComponent.ctorParameters = () => [
    { type: PngTableComponent },
    { type: ChangeDetectorRef }
];
PngTableHeaderColComponent.propDecorators = {
    column: [{ type: Input }],
    onFilterBtnClick: [{ type: Output }],
    onAggsBtnClick: [{ type: Output }],
    colClass: [{ type: HostBinding, args: ['class',] }],
    width: [{ type: HostBinding, args: ['style.width',] }],
    colStyle: [{ type: HostBinding, args: ['style',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngTableHeaderComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     */
    constructor(pngTable) {
        super();
        this.pngTable = pngTable;
        this.onFiltersSet = new EventEmitter();
        this.onAggKeysSet = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    showFilterPanel(event) {
        this.filterColumn = event.column;
        /** @type {?} */
        const filters = this.filterColumn.filters;
        if (filters && filters.length > 0) {
            this.queryValue = filters[0];
        }
        else {
            this.queryValue = undefined;
        }
        this.filterPanel.toggle(event.event);
    }
    /**
     * @return {?}
     */
    clearFilterColumn() {
        this.filterColumn = undefined;
    }
    /**
     * @return {?}
     */
    clearAggColumn() {
        this.aggColumn = undefined;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    showAggsPanel(event) {
        this.availableAggs = [];
        this.aggColumn = event.column;
        /** @type {?} */
        const type = this.aggColumn.dataType || DataType.STRING;
        this.aggMethods = (this.aggColumn.aggProps || []).map(aggProp => aggProp.method);
        Object.keys(AggMethodsProps).forEach(method => {
            if (!AggMethodsProps[method].dataTypes || (AggMethodsProps[method].dataTypes && AggMethodsProps[method].dataTypes.indexOf(type) >= 0)) {
                this.availableAggs.push({
                    label: AggMethodsProps[method].label,
                    key: AggMethodsProps[method].key
                });
            }
        });
        this.aggPanel.toggle(event.$event);
    }
    /**
     * @return {?}
     */
    setAggs() {
        this.onAggKeysSet.emit({ column: this.aggColumn, methods: this.aggMethods });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    updateFilters(event) {
        this.filterPanel.hide();
        this.onFiltersSet.emit(event);
    }
}
PngTableHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: '[png-table-header]',
                template: `
    <ng-container *ngIf="customerTpl;else default">
      <ng-container *ngTemplateOutlet="customerTpl;context:{$implicit:columns,context:pngTable}"></ng-container>
    </ng-container>
    <ng-template #default>
      <th *ngIf="pngTable.$props.$ext.rowExpandable" class="col-expandable"></th>
      <th *ngIf="pngTable.$props.$ext.hasRowCheckbox" class="col-checkbox" title="全选">
        <p-tableHeaderCheckbox></p-tableHeaderCheckbox>
      </th>
      <th *ngIf="pngTable.$props.$ext.hasRowRadioButton" class="col-radio"></th>
      <th *ngFor="let column of columns" pReorderableColumn pResizableColumn
          png-table-header-col
          [column]="column"
          (onFilterBtnClick)="showFilterPanel($event)"
          (onAggsBtnClick)="showAggsPanel($event)"
      >
      </th>
    </ng-template>
    <div class="d-none">
      <p-overlayPanel #filterPanel appendTo="body"
                      [dismissable]="false" (onHide)="clearFilterColumn()"
                      [showCloseIcon]="true">
        <ng-container *ngIf="filterColumn">
          <png-field-data-filter [column]="filterColumn" [queryValue]="queryValue"
                                 (onFilterChange)="updateFilters($event)"></png-field-data-filter>
        </ng-container>
      </p-overlayPanel>
      <p-overlayPanel #aggPanel appendTo="body"
                      [dismissable]="true" (onHide)="clearAggColumn()"
                      [showCloseIcon]="true">
        <div class="shadow" style="width:150px;margin-bottom:10px">
          <h6>可选统计方式</h6>
          <ng-container *ngFor="let agg of availableAggs">
            <div style="font-size: .8em">
              <p-checkbox name="aggs" [value]="agg['key']" [label]="agg['label']"
                          [(ngModel)]="aggMethods" (onChange)="setAggs()"></p-checkbox>
            </div>
          </ng-container>
        </div>
      </p-overlayPanel>
    </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngTableHeaderComponent.ctorParameters = () => [
    { type: PngTableComponent }
];
PngTableHeaderComponent.propDecorators = {
    columns: [{ type: Input }],
    onFiltersSet: [{ type: Output }],
    onAggKeysSet: [{ type: Output }],
    filterPanel: [{ type: ViewChild, args: ['filterPanel',] }],
    aggPanel: [{ type: ViewChild, args: ['aggPanel',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngTableFieldDataFilterComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     */
    constructor(pngTable) {
        super();
        this.pngTable = pngTable;
        this.onFilterChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get column() {
        return this._column;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    set column(column) {
        if (!this.queryKey && column) {
            this.queryKey = DataFieldUtils.getDefaultFieldName(column.dataField) || column.key;
        }
        if (!this.queryDataType && column) {
            this.queryDataType = column.filterDataType || column.dataType;
        }
        if (!this.queryDataAttr && column && column.dataAttr) {
            this.queryDataAttr = CommonsUtils.getArrayValue(column.dataAttr)[0];
        }
        this._column = column;
    }
    /**
     * @return {?}
     */
    get dataField() {
        return this._dataField;
    }
    /**
     * @param {?} dataField
     * @return {?}
     */
    set dataField(dataField) {
        if (!this.queryKey && dataField) {
            this.queryKey = DataFieldUtils.getDefaultFieldName(dataField);
        }
        if (!this.queryDataType && dataField) {
            this.queryDataType = dataField.dataType;
        }
        this._dataField = dataField;
    }
    /**
     * @return {?}
     */
    onFilter() {
        this.onFilterChange.emit({
            key: this.queryKey,
            column: this.column,
            value: this.queryValue
        });
    }
    /**
     * @return {?}
     */
    clearFilter() {
        this.queryValue = undefined;
        this.onFilter();
    }
}
PngTableFieldDataFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-field-data-filter',
                template: `
    <div class="d-flex justify-content-end align-items-end">
      <png-query-input [queryKey]="queryKey" [queryDataType]="queryDataType" [queryDataAttr]="queryDataAttr"
                       [(queryValue)]="queryValue"></png-query-input>
      <ng-container *ngIf="queryValue">
      <span class="ml-2">
       <p-button
         type="button"
         icon="fa fa-search"
         label="查询"
         (click)="onFilter()"
       ></p-button>
    </span>
        <span class="ml-2">
    <p-button
      type="button"
      icon="fa fa-trash"
      label="清除"
      (click)="clearFilter()"
    ></p-button>
    </span>
      </ng-container>
    </div>
  `
            }] }
];
/** @nocollapse */
PngTableFieldDataFilterComponent.ctorParameters = () => [
    { type: PngTableComponent }
];
PngTableFieldDataFilterComponent.propDecorators = {
    queryKey: [{ type: Input }],
    queryDataType: [{ type: Input }],
    queryDataAttr: [{ type: Input }],
    queryValue: [{ type: Input }],
    onFilterChange: [{ type: Output }],
    column: [{ type: Input }],
    dataField: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngTableQueryBuilderComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     */
    constructor(pngTable) {
        super();
        this.pngTable = pngTable;
        this.qbConfig = {};
        this.switches = [
            { label: '并且', value: 'and', icon: 'fa fa-fw fa-cc-paypal' },
            { label: '或者', value: 'or', icon: 'fa fa-fw fa-cc-visa' },
            { label: '非', value: 'not', icon: 'fa fa-fw fa-cc-mastercard' }
        ];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.qbConfig.fields = this.pngTable.$props.columns
            .filter(column => column.dataField)
            .map(column => column.dataField);
        this.qbConfig.operators = (field) => Object.keys(EsQueryMethods).map(key => {
            return {
                label: EsQueryMethods[key].label,
                value: EsQueryMethods[key].key
            };
        });
    }
}
PngTableQueryBuilderComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-table-query-builder',
                template: `
    <er-query-builder [config]="qbConfig">
      <!--<ng-template erTypedTemplate="switchGroup" let-qb="qb">-->
      <!--<p-selectButton [options]="switches" [ngModel]="qb.value.condition"></p-selectButton>-->
      <!--</ng-template>-->
      <!--<ng-template erTypedTemplate="buttonGroup" let-qb="qb">-->
      <!--<p-button label="条件" icon="fa fa-plus" (onClick)="qb.addRule()"></p-button>-->
      <!--<p-button label="组" icon="fa fa-group" (onClick)="qb.addRuleSet()"></p-button>-->
      <!--<ng-container *ngIf="!!parentRuleSet && qb.config.allowRuleSet">-->
      <!--<p-button icon="fa fa-minus" (onClick)="qb.removeRuleSet()"></p-button>-->
      <!--</ng-container>-->
      <!--</ng-template>-->
      <ng-template erTypedTemplate="input" let-rule let-qb="qb">
        <png-query-input [options]="pngTable.$props.$ext"></png-query-input>
      </ng-template>
    </er-query-builder>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngTableQueryBuilderComponent),
                        multi: true
                    }],
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngTableQueryBuilderComponent.ctorParameters = () => [
    { type: PngTableComponent }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngQueryInputComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     */
    constructor(pngTable) {
        super();
        this.pngTable = pngTable;
        this.DATA_TYPE = DataType;
        this.DATA_ATTR = DataAttr;
        this.options = {};
        this.queryValueChange = new EventEmitter();
        this.isTime = false;
        this.autoCompleteProps$ = new BehaviorSubject(undefined);
    }
    /**
     * @return {?}
     */
    get queryValue() {
        return this._queryValue;
    }
    /**
     * @param {?} queryValue
     * @return {?}
     */
    set queryValue(queryValue) {
        this._queryValue = queryValue;
        this.queryValueChange.emit(queryValue);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.autoProps = (/** @type {?} */ ({
            inputStyle: { 'min-width': '200px' },
            appendTo: 'body',
            forceSelection: false,
            $ext: {
                apiDataProps: Object.assign({}, this.pngTable.getTableQuery(), { searchFields: this.queryKey, returnFields: this.queryKey, aggProps: { name: this.queryKey, field: this.queryKey }, dataPath: `aggs.${this.queryKey}` }),
                dataItemProps: {
                    showCounter: true,
                    dropDownOptionKey: DataItemUtils.ITEM_LABEL_KEY,
                    valueKey: DataItemUtils.ITEM_LABEL_KEY
                }
            }
        }));
        this.sliderProps = (/** @type {?} */ ({
            range: true,
            $ext: {
                apiDataProps: Object.assign({}, this.pngTable.getTableQuery(), { aggProps: [
                        { name: 'max', field: this.queryKey, method: AggMethods.MAX },
                        { name: 'min', field: this.queryKey, method: AggMethods.MIN }
                    ] })
            }
        }));
        if (this.queryDataType === DataType.DATE && this.queryDataAttr) {
            /** @type {?} */
            const attrs = CommonsUtils.getArrayValue(this.queryDataAttr);
            if (attrs.indexOf(DataAttr.DATE) >= 0) {
                this.isTime = false;
            }
            if (attrs.indexOf(DataAttr.TIME) >= 0) {
                this.isTime = true;
            }
        }
    }
}
PngQueryInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-query-input',
                template: `
    <ng-container [ngSwitch]="queryDataType">
      <ng-container *ngSwitchCase="DATA_TYPE.NUMBER">
        <png-slider [(ngModel)]="queryValue"
                    erPropsBind
                    [props]="sliderProps"
        >
        </png-slider>
      </ng-container>
      <ng-container *ngSwitchCase="DATA_TYPE.BOOLEAN">
        <p-inputSwitch [(ngModel)]="queryValue">
        </p-inputSwitch>
      </ng-container>
      <ng-container *ngSwitchCase="DATA_TYPE.DATE">
        <ng-container *ngIf="!isTime">
          <png-calendar erPropsBind [(ngModel)]="queryValue"
                        [props]="{ selectionMode: 'range',placeholder:'请选择日期'}">
          </png-calendar>
        </ng-container>
        <ng-container *ngIf="isTime">
          <png-calendar erPropsBind [(ngModel)]="queryValue"
                        [props]="{ timeOnly: true, selectionMode: 'range',placeholder:'请选择时间'}"
          >
          </png-calendar>
        </ng-container>
      </ng-container>
      <ng-container *ngSwitchDefault>
        <png-auto-complete
          [(ngModel)]="queryValue"
          erPropsBind
          [props]="autoProps"
        >
        </png-auto-complete>
        <!--<input type="text" pInputText [(ngModel)]="queryValue" placeholder="输入查询标准">-->
      </ng-container>
    </ng-container>
  `,
                styles: ["/deep/ .ui-multiselect{min-width:150px}/deep/ .ui-multiselect-label-container label{margin:0!important}/deep/ .ui-slider{width:100px;margin:5px}"]
            }] }
];
/** @nocollapse */
PngQueryInputComponent.ctorParameters = () => [
    { type: PngTableComponent }
];
PngQueryInputComponent.propDecorators = {
    queryKey: [{ type: Input }],
    queryDataType: [{ type: Input }],
    queryDataAttr: [{ type: Input }],
    options: [{ type: Input }],
    autoProps: [{ type: Input }],
    sliderProps: [{ type: Input }],
    queryValueChange: [{ type: Output }],
    queryValue: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngTableSummaryComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     * @param {?} cd
     */
    constructor(pngTable, cd) {
        super();
        this.pngTable = pngTable;
        this.cd = cd;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.aggValues) {
            if (changes.aggValues.currentValue) {
                this.colAggValues = {};
                Object.keys(changes.aggValues.currentValue)
                    .forEach(key => {
                    /** @type {?} */
                    let name = key;
                    if (key.indexOf('-') > 0) {
                        name = key.substr(0, key.indexOf('-'));
                    }
                    /** @type {?} */
                    const type = key.substr(key.indexOf('-') + 1);
                    /** @type {?} */
                    let values = this.colAggValues[name];
                    if (!values) {
                        values = [];
                        this.colAggValues[name] = values;
                    }
                    /** @type {?} */
                    const agg = {};
                    agg['type'] = AggMethodsProps[type] && AggMethodsProps[type].label;
                    if (CommonsUtils.isArray(this.aggValues[key])) {
                        agg['values'] = this.aggValues[key];
                    }
                    else {
                        agg['value'] = this.aggValues[key];
                    }
                    values.push(agg);
                });
            }
            else {
                this.colAggValues = undefined;
            }
            this.cd.detectChanges();
        }
    }
    /**
     * @param {?} column
     * @return {?}
     */
    cellClass(column) {
        return CommonsUtils.getValue(column.aggCellClass, column);
    }
    /**
     * @param {?} column
     * @return {?}
     */
    cellStyle(column) {
        return CommonsUtils.getValue(column.aggCellStyle, column);
    }
}
PngTableSummaryComponent.decorators = [
    { type: Component, args: [{
                selector: '[png-table-summary]',
                template: `
    <ng-container *ngIf="customerTpl;else default">
      <ng-container *ngTemplateOutlet="customerTpl;context:{$implicit:aggValues,columns:columns,context:pngTable}"></ng-container>
    </ng-container>
    <ng-template #default>
      <th *ngIf="pngTable.$props.$ext.rowExpandable" class="col-expandable col-summary"></th>
      <th *ngIf="pngTable.$props.$ext.hasRowCheckbox" class="col-checkbox col-summary"></th>
      <th *ngIf="pngTable.$props.$ext.hasRowRadioButton" class="col-radio col-summary"></th>
      <ng-container *ngIf="colAggValues">
        <th *ngFor="let col of columns" [width]="col.width" class="text-right col-summary col-summary-{{col.key}}">
          <ng-container *ngFor="let agg of colAggValues[col.key]">
            <ng-container *ngIf="agg.value">
              <div [ngClass]="cellClass(col)" style="font-size: 0.8em"
                   [ngStyle]="cellStyle(col)">{{agg.type}}: {{agg.value | floor: 2}}
              </div>
            </ng-container>
            <ng-container *ngIf="agg.values">
              <div [ngClass]="cellClass(col)" style="font-size: 0.8em"
                   [ngStyle]="cellStyle(col)"> {{agg.type}}:
              </div>
              <ul>
                <ng-container *ngFor="let data of agg.values">
                  <li class="border-bottom"><span class="">{{data.label}}:</span><span class="badge badge-pill btn-info">{{data.value}}</span></li>
                </ng-container>
              </ul>
            </ng-container>
          </ng-container>
        </th>
      </ng-container>
    </ng-template>

  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngTableSummaryComponent.ctorParameters = () => [
    { type: PngTableComponent },
    { type: ChangeDetectorRef }
];
PngTableSummaryComponent.propDecorators = {
    columns: [{ type: Input }],
    aggValues: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const PngTableSubComponents = [
    PngTableCaptionComponent,
    PngTableHeaderComponent,
    PngTableHeaderColComponent,
    PngTableFieldDataFilterComponent,
    PngTableBodyRowComponent,
    PngTableBodyCellContentComponent,
    PngTableBodyCellComponent,
    PngTableExpandedRowComponent,
    PngTableFooterComponent,
    PngTableSummaryComponent,
    PngTableColumnSelectorComponent,
    PngTableQueryBuilderComponent,
    PngQueryInputComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ErPrimeNgModule {
}
ErPrimeNgModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    FormsModule,
                    ReactiveFormsModule,
                    ErCoreModule,
                    PrimeNgComponentsModule
                ],
                declarations: [
                    ...PngComponents,
                    ...PngTableSubComponents
                ],
                exports: [
                    PrimeNgComponentsModule,
                    ...PngComponents
                ],
                entryComponents: PngComponents
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WorkSpaceFooterComponent {
    /**
     * @param {?} ws
     */
    constructor(ws) {
        this.ws = ws;
    }
    /**
     * @return {?}
     */
    get elapseTime$() {
        return StatesUtils.observe(StateNames.httpTimer)
            .pipe(distinctUntilChanged(), map(v => v && v['elapsed']));
    }
}
WorkSpaceFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-ws-footer',
                template: "<div class=\"layout-footer\">\n  <span class=\"footer-text-left\">\n     <img [src]=\"ws.appLogo\"/>\n  </span>\n  <span class=\"footer-text-right\">\n    <span class=\"text-muted small\" *ngIf=\"elapseTime$|async as elapseTime\">\u7F51\u7EDC\u8BBF\u95EE\u8017\u65F6\uFF1A{{elapseTime}}\u6BEB\u79D2</span>\n  </span>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
WorkSpaceFooterComponent.ctorParameters = () => [
    { type: PngAdminWorkSpaceComponent }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WorkSpaceTopBarComponent {
    /**
     * @param {?} ws
     */
    constructor(ws) {
        this.ws = ws;
    }
    /**
     * @return {?}
     */
    toggleMainMenu() {
        StatesUtils.toggle(StateNames.menu, this.ws.rootMenuToggleStateName);
        event.preventDefault();
    }
}
WorkSpaceTopBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-ws-topbar',
                template: "<div class=\"topbar clearfix\">\n  <div class=\"topbar-left\">\n    <img [src]=\"ws.appLogo\" class=\"topbar-logo\"/>\n    <span class=\"topbar-title\">{{ws.appTitle}}</span>\n  </div>\n\n  <div class=\"topbar-right\">\n    <a id=\"menu-button\" href=\"#\" (click)=\"toggleMainMenu()\"\n       [ngClass]=\"{'menu-button-rotate': ws.rotateMenuButton}\">\n      <i class=\"fa fa-angle-left\"></i>\n    </a>\n\n    <a id=\"topbar-menu-button\" href=\"#\" (click)=\"ws.onTopbarMenuButtonClick($event)\">\n      <i class=\"fa fa-bars\"></i>\n    </a>\n\n    <span [innerHTML]=\"ws.appName|erSafeHtml\"></span>\n\n    <ul class=\"topbar-items fadeInDown\" [ngClass]=\"{'topbar-items-visible': ws.topbarMenuActive}\">\n      <!--<li #profile class=\"profile-item\" *ngIf=\"ws.profileMode==='top'||ws.isHorizontal()\"-->\n      <!--[ngClass]=\"{'active-top-menu':ws.activeTopbarItem === profile}\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarItemClick($event,profile)\">-->\n      <!--<img class=\"profile-image\" src=\"assets/layout/images/avatar.png\" />-->\n      <!--<span class=\"topbar-item-name\">Isabel Lopez</span>-->\n      <!--<span class=\"topbar-item-role\">Marketing</span>-->\n      <!--</a>-->\n      <!--<ul class=\"layout-menu fadeInDown\">-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-user\"></i>-->\n      <!--<span>Profile</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-user-secret\"></i>-->\n      <!--<span>Privacy</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-cog\"></i>-->\n      <!--<span>Settings</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-sign-out\"></i>-->\n      <!--<span>Logout</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--</ul>-->\n      <!--</li>-->\n      <!--<li #settings [ngClass]=\"{'active-top-menu':ws.activeTopbarItem === settings}\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarItemClick($event,settings)\">-->\n      <!--<i class=\"topbar-icon fa fa-fw fa-cog\"></i>-->\n      <!--<span class=\"topbar-item-name\">Settings</span>-->\n      <!--</a>-->\n      <!--<ul class=\"layout-menu fadeInDown\">-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-paint-brush\"></i>-->\n      <!--<span>Change Theme</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-star-o\"></i>-->\n      <!--<span>Favorites</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-lock\"></i>-->\n      <!--<span>Lock Screen</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-picture-o\"></i>-->\n      <!--<span>Wallpaper</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--</ul>-->\n      <!--</li>-->\n      <!--<li #messages [ngClass]=\"{'active-top-menu':ws.activeTopbarItem === messages}\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarItemClick($event,messages)\">-->\n      <!--<i class=\"topbar-icon animated swing fa fa-fw fa-envelope-o\"></i>-->\n      <!--<span class=\"topbar-badge animated rubberBand\">5</span>-->\n      <!--<span class=\"topbar-item-name\">Messages</span>-->\n      <!--</a>-->\n      <!--<ul class=\"layout-menu fadeInDown\">-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" class=\"topbar-message\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<img src=\"assets/layout/images/avatar1.png\" width=\"35\"/>-->\n      <!--<span>Give me a call</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" class=\"topbar-message\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<img src=\"assets/layout/images/avatar2.png\" width=\"35\"/>-->\n      <!--<span>Sales reports attached</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" class=\"topbar-message\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<img src=\"assets/layout/images/avatar3.png\" width=\"35\"/>-->\n      <!--<span>About your invoice</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" class=\"topbar-message\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<img src=\"assets/layout/images/avatar2.png\" width=\"35\"/>-->\n      <!--<span>Meeting today at 10pm</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" class=\"topbar-message\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<img src=\"assets/layout/images/avatar4.png\" width=\"35\"/>-->\n      <!--<span>Out of office</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--</ul>-->\n      <!--</li>-->\n      <!--<li #notifications [ngClass]=\"{'active-top-menu':ws.activeTopbarItem === notifications}\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarItemClick($event,notifications)\">-->\n      <!--<i class=\"topbar-icon fa fa-fw fa-bell-o\"></i>-->\n      <!--<span class=\"topbar-badge animated rubberBand\">4</span>-->\n      <!--<span class=\"topbar-item-name\">Notifications</span>-->\n      <!--</a>-->\n      <!--<ul class=\"layout-menu fadeInDown\">-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-tasks\"></i>-->\n      <!--<span>Pending tasks</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-calendar-check-o\"></i>-->\n      <!--<span>Meeting today at 3pm</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-download\"></i>-->\n      <!--<span>Download documents</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-plane\"></i>-->\n      <!--<span>Book flight</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--</ul>-->\n      <!--</li>-->\n      <li #search class=\"search-item\" [ngClass]=\"{'active-top-menu':ws.activeTopbarItem === search}\"\n          (click)=\"ws.onTopbarItemClick($event,search)\">\n        <div class=\"topbar-search\">\n          <input type=\"text\" style=\"border-radius: 15px\" placeholder=\"\u8BF7\u8F93\u5165\u641C\u7D22\u5173\u952E\u5B57\" />\n          <i class=\"fa fa-search\"></i>\n        </div>\n      </li>\n    </ul>\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
WorkSpaceTopBarComponent.ctorParameters = () => [
    { type: PngAdminWorkSpaceComponent }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WorkSpaceMainMenuComponent {
    /**
     * @param {?} ws
     */
    constructor(ws) {
        this.ws = ws;
        this.theme = 'blue';
        this.layout = 'blue';
        this.version = 'v4';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.menus$ = StatesUtils.observe(StateNames.rootMenu)
            .pipe(map(menu => (menu && menu.menuItems) || []), distinctUntilChanged());
    }
    /**
     * @param {?} theme
     * @return {?}
     */
    changeTheme(theme) {
        /** @type {?} */
        const themeLink = (/** @type {?} */ (document.getElementById('theme-css')));
        if (this.version === 'v3') {
            themeLink.href = 'assets/theme/theme-' + theme + '.css';
        }
        else {
            themeLink.href = 'assets/theme/theme-' + theme + '-v4' + '.css';
        }
        this.theme = theme;
    }
    /**
     * @param {?} layout
     * @param {?=} special
     * @return {?}
     */
    changeLayout(layout, special) {
        /** @type {?} */
        const layoutLink = (/** @type {?} */ (document.getElementById('layout-css')));
        if (this.version === 'v3') {
            layoutLink.href = 'assets/layout/css/layout-' + layout + '.css';
        }
        else {
            layoutLink.href = 'assets/layout/css/layout-' + layout + '-v4' + '.css';
        }
        this.layout = layout;
        if (special) {
            this.ws.darkMenu = true;
        }
    }
    /**
     * @param {?} version
     * @return {?}
     */
    changeVersion(version) {
        /** @type {?} */
        const themeLink = (/** @type {?} */ (document.getElementById('theme-css')));
        /** @type {?} */
        const layoutLink = (/** @type {?} */ (document.getElementById('layout-css')));
        if (version === 'v3') {
            this.version = 'v3';
            themeLink.href = 'assets/theme/theme-' + this.theme + '.css';
            layoutLink.href = 'assets/layout/css/layout-' + this.layout + '.css';
        }
        else {
            themeLink.href = 'assets/theme/theme-' + this.theme + '-v4' + '.css';
            layoutLink.href = 'assets/layout/css/layout-' + this.layout + '-v4' + '.css';
            this.version = '-v4';
        }
    }
}
WorkSpaceMainMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-ws-main-menu',
                template: `
    <ul png-ws-sub-menu
        erAnimate="fadeInDown"
        class="layout-menu layout-main-menu clearfix"
        [erHttpState]="httpMenuTag"
        [item]="menus$|async" [root]="true"
        [reset]="reset"
        [visible]="true"
        [parentActive]="true"></ul>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
WorkSpaceMainMenuComponent.ctorParameters = () => [
    { type: PngAdminWorkSpaceComponent }
];
WorkSpaceMainMenuComponent.propDecorators = {
    reset: [{ type: Input }],
    httpMenuTag: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WorkSpaceSubMenuComponent {
    /**
     * @param {?} ws
     * @param {?} wsMenu
     */
    constructor(ws, wsMenu) {
        this.ws = ws;
        this.wsMenu = wsMenu;
    }
    /**
     * @return {?}
     */
    get reset() {
        return this._reset;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set reset(val) {
        this._reset = val;
        if (this._reset && (this.ws.isHorizontal() || this.ws.isSlim())) {
            this.activeIndex = null;
        }
    }
    /**
     * @return {?}
     */
    get parentActive() {
        return this._parentActive;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set parentActive(val) {
        this._parentActive = val;
        if (!this._parentActive) {
            this.activeIndex = null;
        }
    }
    /**
     * @param {?} event
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    itemClick(event, item, index) {
        if (this.root) {
            this.ws.menuHoverActive = !this.ws.menuHoverActive;
        }
        // avoid processing disabled items
        if (item.disabled) {
            event.preventDefault();
            return true;
        }
        // activate current item and deactivate active sibling if any
        this.activeIndex = (this.activeIndex === index) ? null : index;
        // execute command
        if (item.command) {
            item.command({ originalEvent: event, item: item, menu: this.wsMenu, ws: this.ws });
        }
        // prevent hash change
        if (item.items || (!item.url && !item.routerLink)) {
            setTimeout(() => {
                this.ws.layoutMenuScrollerViewChild.moveBar();
            }, 450);
            event.preventDefault();
        }
        // hide menu
        if (!item.items) {
            if (this.ws.isHorizontal() || this.ws.isSlim()) {
                this.ws.resetMenu = true;
            }
            else {
                this.ws.resetMenu = false;
            }
            this.ws.overlayMenuActive = false;
            this.ws.staticMenuMobileActive = false;
            this.ws.menuHoverActive = !this.ws.menuHoverActive;
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    onMouseEnter(index) {
        if (this.root && this.ws.menuHoverActive && (this.ws.isHorizontal() || this.ws.isSlim())
            && !this.ws.isMobile() && !this.ws.isTablet()) {
            this.activeIndex = index;
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    isActive(index) {
        return this.activeIndex === index;
    }
}
WorkSpaceSubMenuComponent.decorators = [
    { type: Component, args: [{
                selector: '[png-ws-sub-menu]',
                template: "<ng-template ngFor let-child let-i=\"index\" [ngForOf]=\"(root ? item : item.items)\">\n  <li [ngClass]=\"{'active-menuitem': isActive(i)}\" [class]=\"child.badgeStyleClass\"\n      *ngIf=\"child.visible === false ? false : true\">\n    <a [href]=\"child.url||'#'\" (click)=\"itemClick($event,child,i)\" (mouseenter)=\"onMouseEnter(i)\"\n       class=\"ripplelink\" *ngIf=\"!child.routerLink\"\n       [attr.tabindex]=\"!visible ? '-1' : null\" [attr.target]=\"child.target\">\n      <i [ngClass]=\"child.icon\"></i><span>{{child.label}}</span>\n      <i class=\"fa fa-fw fa-angle-down menuitem-toggle-icon\" *ngIf=\"child.items\"></i>\n      <span class=\"menuitem-badge\" *ngIf=\"child.badge\">{{child.badge}}</span>\n    </a>\n\n    <a (click)=\"itemClick($event,child,i)\" (mouseenter)=\"onMouseEnter(i)\" class=\"ripplelink\" *ngIf=\"child.routerLink\"\n       [routerLink]=\"child.routerLink\" routerLinkActive=\"active-menuitem-routerlink\"\n       [routerLinkActiveOptions]=\"{exact: true}\" [attr.tabindex]=\"!visible ? '-1' : null\" [attr.target]=\"child.target\">\n      <i [ngClass]=\"child.icon\"></i><span>{{child.label}}</span>\n      <i class=\"fa fa-fw fa-angle-down menuitem-toggle-icon\" *ngIf=\"child.items\"></i>\n      <span class=\"menuitem-badge\" *ngIf=\"child.badge\">{{child.badge}}</span>\n    </a>\n    <div class=\"layout-menu-tooltip\">\n      <div class=\"layout-menu-tooltip-arrow\"></div>\n      <div class=\"layout-menu-tooltip-text\">{{child.label}}</div>\n    </div>\n    <div class=\"submenu-arrow\" *ngIf=\"child.items\"></div>\n    <ul png-ws-sub-menu [item]=\"child\" *ngIf=\"child.items\" [visible]=\"isActive(i)\" [reset]=\"reset\"\n        [parentActive]=\"isActive(i)\"\n        [@children]=\"(ws.isSlim()||ws.isHorizontal())&&root ? isActive(i) ?\n                     'visible' : 'hidden' : isActive(i) ? 'visibleAnimated' : 'hiddenAnimated'\"></ul>\n  </li>\n</ng-template>",
                animations: [
                    trigger('children', [
                        state('hiddenAnimated', style({
                            height: '0px'
                        })),
                        state('visibleAnimated', style({
                            height: '*'
                        })),
                        state('visible', style({
                            display: 'block'
                        })),
                        state('hidden', style({
                            display: 'none'
                        })),
                        transition('visibleAnimated => hiddenAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        transition('hiddenAnimated => visibleAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
                    ])
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
WorkSpaceSubMenuComponent.ctorParameters = () => [
    { type: PngAdminWorkSpaceComponent },
    { type: WorkSpaceMainMenuComponent }
];
WorkSpaceSubMenuComponent.propDecorators = {
    item: [{ type: Input }],
    root: [{ type: Input }],
    visible: [{ type: Input }],
    reset: [{ type: Input }],
    parentActive: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WorkSpaceProfileComponent {
    /**
     * @param {?} ws
     */
    constructor(ws) {
        this.ws = ws;
        this.profileRouter = ConfigUtils.getConfig().auth.profileRouter;
        this.changePwdRouter = ConfigUtils.getConfig().auth.changePwdRouter;
        this.avatar = 'assets/layout/images/avatar.png';
    }
    /**
     * @return {?}
     */
    get user() {
        return AuthUtils.getCurrentUser();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        this.active = !this.active;
        event.preventDefault();
    }
    /**
     * @return {?}
     */
    logout() {
        AuthUtils.logout();
    }
    /**
     * @return {?}
     */
    change() {
        RouteUtils.nav(this.changePwdRouter);
    }
}
WorkSpaceProfileComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-ws-profile',
                template: "<div class=\"profile\" [ngClass]=\"{'profile-expanded':active}\">\n  <a href=\"#\" (click)=\"onClick($event)\">\n    <img class=\"profile-image\" [src]=\"user?.avatar || avatar\"/>\n    <span class=\"profile-name\">{{user?.fullName}}</span>\n    <i class=\"fa fa-fw fa-caret-down\"></i>\n    <span class=\"profile-role\">{{user?.mainRole}}</span>\n  </a>\n</div>\n\n<ul id=\"profile-menu\" class=\"layout-menu\" [@menu]=\"active ? 'visible' : 'hidden'\">\n  <li role=\"menuitem\">\n    <a href=\"#\" [routerLink]=\"profileRouter\" [attr.tabindex]=\"!active ? '-1' : null\">\n      <i class=\"fa fa-fw fa-user\"></i>\n      <span>\u4E2A\u4EBA\u4FE1\u606F</span>\n    </a>\n    <div class=\"layout-menu-tooltip\">\n      <div class=\"layout-menu-tooltip-arrow\"></div>\n      <div class=\"layout-menu-tooltip-text\"><a [routerLink]=\"profileRouter\">\u4E2A\u4EBA\u4FE1\u606F</a></div>\n    </div>\n  </li>\n  <li role=\"menuitem\">\n    <a href=\"#\" [routerLink]=\"changePwdRouter\" [attr.tabindex]=\"!active ? '-1' : null\">\n      <i class=\"fa fa-fw fa-user-secret\"></i>\n      <span>\u4FEE\u6539\u5BC6\u7801</span>\n    </a>\n    <div class=\"layout-menu-tooltip\">\n      <div class=\"layout-menu-tooltip-arrow\"></div>\n      <div class=\"layout-menu-tooltip-text\"><a [routerLink]=\"changePwdRouter\">\u4FEE\u6539\u5BC6\u7801</a></div>\n    </div>\n  </li>\n  <!--<li role=\"menuitem\">-->\n  <!--<a href=\"#\" [attr.tabindex]=\"!active ? '-1' : null\">-->\n  <!--<i class=\"fa fa-fw fa-cog\"></i>-->\n  <!--<span>\u4E2A\u6027\u8BBE\u7F6E</span>-->\n  <!--</a>-->\n  <!--<div class=\"layout-menu-tooltip\">-->\n  <!--<div class=\"layout-menu-tooltip-arrow\"></div>-->\n  <!--<div class=\"layout-menu-tooltip-text\">\u4E2A\u6027\u8BBE\u7F6E</div>-->\n  <!--</div>-->\n  <!--</li>-->\n  <li role=\"menuitem\">\n    <a href=\"#\" [attr.tabindex]=\"!active ? '-1' : null\">\n      <i class=\"fa fa-fw fa-sign-out\"></i>\n      <span (click)=\"logout()\">\u9000\u51FA\u767B\u5F55</span>\n    </a>\n    <div class=\"layout-menu-tooltip\">\n      <div class=\"layout-menu-tooltip-arrow\"></div>\n      <div class=\"layout-menu-tooltip-text\" (click)=\"logout()\">\u9000\u51FA\u767B\u5F55</div>\n    </div>\n  </li>\n</ul>\n",
                animations: [
                    trigger('menu', [
                        state('hidden', style({
                            height: '0px'
                        })),
                        state('visible', style({
                            height: '*'
                        })),
                        transition('visible => hidden', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                        transition('hidden => visible', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
                    ])
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
WorkSpaceProfileComponent.ctorParameters = () => [
    { type: PngAdminWorkSpaceComponent }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngAdminWorkSpaceModule {
}
PngAdminWorkSpaceModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    FormsModule,
                    ErCoreModule,
                    PrimeNgComponentsModule
                ],
                declarations: [
                    WorkSpaceFooterComponent,
                    WorkSpaceMainMenuComponent,
                    WorkSpaceSubMenuComponent,
                    WorkSpaceProfileComponent,
                    WorkSpaceTopBarComponent,
                    PngAdminWorkSpaceComponent
                ],
                exports: [
                    PngAdminWorkSpaceComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { PngAdminWorkSpaceComponent, PrimeNgComponentsModule, ErPrimeNgModule, PngAdminWorkSpaceModule, PngTableComponent, PngAutoCompleteComponent, PngConfirmDialogComponent, PngCalendarComponent, PngOverlayPanelComponent, PngPanelComponent, PngPopupDialogComponent, PngAlertComponent, PngAnnounceComponent, PngInputComponent, PngOptionItemComponent, PngSearchBoxComponent, ValidateMessageTooltipComponent, PngSliderComponent, PngTreeNavTableComponent, PngButtonComponent, PngButtonsComponent, PngCheckBoxComponent, PngImageComponent, PngSelectComponent, PngMultiSelectComponent, PngListBoxComponent, PngRadioComponent, PngRatingComponent, PngTreeComponent, PNG_TREE_NODE_KEYS, PngWizardComponent, PngStepComponent, PngChartComponent, PngFileUploadComponent, PngSelectButtonComponent, PngComponents, defaultPngColumnProps, defaultPngTableProps, defaultRowIndexColumn, defaultOrderedRowIndexColumn, defaultActionColumn, defaultAddButton, defaultViewButton, defaultEditButton, defaultDeleteButton, defaultAuditButton, defaultDownloadButton, defaultOverlayColumnProps, defaultOverlayTableProps, PngTableSubComponents as ɵa, PngTableBodyCellContentComponent as ɵg, PngTableBodyCellComponent as ɵh, PngTableBodyRowComponent as ɵf, PngTableCaptionComponent as ɵb, PngTableColumnSelectorComponent as ɵl, PngTableExpandedRowComponent as ɵi, PngTableFooterComponent as ɵj, PngTableHeaderColComponent as ɵd, PngTableHeaderComponent as ɵc, PngTableFieldDataFilterComponent as ɵe, PngTableQueryBuilderComponent as ɵm, PngQueryInputComponent as ɵn, PngTableSummaryComponent as ɵk, WorkSpaceFooterComponent as ɵo, WorkSpaceTopBarComponent as ɵs, WorkSpaceMainMenuComponent as ɵp, WorkSpaceSubMenuComponent as ɵq, WorkSpaceProfileComponent as ɵr };

//# sourceMappingURL=er-primeng.js.map