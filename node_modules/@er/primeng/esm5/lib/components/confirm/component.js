/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';
import { BaseComponent } from '@er/core';
import { StateNames } from '@er/types';
import { StatesUtils } from '@er/utils';
import { ConfirmationService } from 'primeng/api';
import { filter } from 'rxjs/operators';
import { DEFAULT_CONFIRM_DIALOG_PROPS } from './defaults';
var PngConfirmDialogComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngConfirmDialogComponent, _super);
    function PngConfirmDialogComponent(confirmationService, cd) {
        var _this = _super.call(this) || this;
        _this.confirmationService = confirmationService;
        _this.cd = cd;
        _this.options = {};
        _this.onAccept = new EventEmitter();
        _this.onReject = new EventEmitter();
        _this.dlgOptions = {};
        return _this;
    }
    /**
     * @return {?}
     */
    PngConfirmDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dlgOptions = tslib_1.__assign({}, DEFAULT_CONFIRM_DIALOG_PROPS, { header: this.header, content: this.content, acceptEvent: this.onAccept, rejectEvent: this.onReject }, this.options);
        this.$subscriptions = StatesUtils.observe(StateNames.confirm)
            .pipe(filter(function (state) { return state && state.open; }))
            .subscribe(function (state) {
            _this.open(state);
        });
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    PngConfirmDialogComponent.prototype.open = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options) {
            this.dlgOptions = tslib_1.__assign({}, DEFAULT_CONFIRM_DIALOG_PROPS, options);
        }
        this.confirmationService.confirm(this.getConfirmation(this.dlgOptions));
        this.cd.detectChanges();
    };
    /**
     * @param {?} modal
     * @return {?}
     */
    PngConfirmDialogComponent.prototype.getConfirmation = /**
     * @param {?} modal
     * @return {?}
     */
    function (modal) {
        return {
            message: modal.content,
            icon: modal.icon,
            header: modal.header,
            acceptVisible: modal.acceptVisible,
            rejectVisible: modal.rejectVisible,
            acceptLabel: modal.acceptLabel,
            rejectLabel: modal.rejectLabel,
            accept: this.accept.bind(this),
            reject: this.reject.bind(this)
        };
    };
    /**
     * @return {?}
     */
    PngConfirmDialogComponent.prototype.accept = /**
     * @return {?}
     */
    function () {
        this.onAccept.emit();
        if (this.dlgOptions.onAccept) {
            this.dlgOptions.onAccept.call(this.dlgOptions.context, true);
        }
        StatesUtils.create(StateNames.confirm, {
            open: false,
            accept: true,
            reject: false
        });
    };
    /**
     * @return {?}
     */
    PngConfirmDialogComponent.prototype.reject = /**
     * @return {?}
     */
    function () {
        this.onReject.emit();
        if (this.options.onReject) {
            this.options.onReject.call(this.options.context, false);
        }
        StatesUtils.create(StateNames.confirm, {
            open: false,
            accept: false,
            reject: true
        });
    };
    PngConfirmDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-confirm-dialog',
                    template: "\n    <p-confirmDialog #dlg>\n      <p-footer>\n        <button type=\"button\" class=\"ui-button-rounded ui-button-success\" *ngIf=\"dlgOptions.acceptVisible\" pButton icon=\"pi pi-check\"\n                [label]=\"dlgOptions.acceptLabel\"\n                (click)=\"dlg.accept()\"></button>\n        <button type=\"button\" class=\"ui-button-rounded ui-button-danger\" *ngIf=\"dlgOptions.rejectVisible\" pButton icon=\"pi pi-times\"\n                [label]=\"dlgOptions.rejectLabel\"\n                (click)=\"dlg.reject()\"></button>\n      </p-footer>\n    </p-confirmDialog>",
                    providers: [ConfirmationService],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PngConfirmDialogComponent.ctorParameters = function () { return [
        { type: ConfirmationService },
        { type: ChangeDetectorRef }
    ]; };
    PngConfirmDialogComponent.propDecorators = {
        header: [{ type: Input }],
        content: [{ type: Input }],
        options: [{ type: Input }],
        onAccept: [{ type: Output }],
        onReject: [{ type: Output }]
    };
    return PngConfirmDialogComponent;
}(BaseComponent));
export { PngConfirmDialogComponent };
if (false) {
    /** @type {?} */
    PngConfirmDialogComponent.prototype.header;
    /** @type {?} */
    PngConfirmDialogComponent.prototype.content;
    /** @type {?} */
    PngConfirmDialogComponent.prototype.options;
    /** @type {?} */
    PngConfirmDialogComponent.prototype.onAccept;
    /** @type {?} */
    PngConfirmDialogComponent.prototype.onReject;
    /** @type {?} */
    PngConfirmDialogComponent.prototype.dlgOptions;
    /**
     * @type {?}
     * @private
     */
    PngConfirmDialogComponent.prototype.confirmationService;
    /**
     * @type {?}
     * @private
     */
    PngConfirmDialogComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,