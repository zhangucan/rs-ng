/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { BaseComponent, HttpUtils } from '@er/core';
import { HttpResponseType } from '@er/types';
import { CommonsUtils, ConfigUtils, DialogUtils } from '@er/utils';
import { Lightbox } from 'primeng/primeng';
var PngImageComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngImageComponent, _super);
    function PngImageComponent(cd, sanitizer) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.sanitizer = sanitizer;
        _this.imageViewStyle = { 'max-height': '300px', 'max-width': '500px', 'overflow': 'auto' };
        _this.showDescription = true;
        _this.descriptionChange = new EventEmitter();
        return _this;
    }
    Object.defineProperty(PngImageComponent.prototype, "description", {
        get: /**
         * @return {?}
         */
        function () {
            return this._description;
        },
        set: /**
         * @param {?} description
         * @return {?}
         */
        function (description) {
            this._description = description;
            this.descriptionChange.emit(description);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    PngImageComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.src) {
            if (CommonsUtils.isArray(this.src)) {
                if (this.src.length === 1) {
                    this.images = undefined;
                    this.image = this.src[0];
                    this.fullImage = this.src[0];
                }
                else {
                    this.images = [];
                    this.image = this.src[0];
                    this.fullImage = this.src[0];
                    ((/** @type {?} */ (this.src))).forEach(function (image) {
                        if (CommonsUtils.isString(image)) {
                            _this.images.push({ source: image });
                        }
                        else {
                            _this.images.push(image);
                        }
                    });
                }
            }
            else {
                this.images = undefined;
                this.image = this.src;
                this.fullImage = this.src;
            }
        }
        if (changes.fileId) {
            /** @type {?} */
            var fileId_1;
            if (!this.fileId) {
                this.images = undefined;
                this.image = null;
            }
            else {
                if (CommonsUtils.isArray(this.fileId)) {
                    if (this.fileId.length === 0) {
                        this.images = undefined;
                        this.image = null;
                        return;
                    }
                    else {
                        fileId_1 = this.fileId[0];
                    }
                }
                else {
                    fileId_1 = this.fileId;
                }
                HttpUtils.request({
                    uri: ConfigUtils.getConfig().api.servers['image'].uri + "/" + fileId_1 + (this.size ? '?' + this.size : ''),
                    observe: 'events',
                    responseType: HttpResponseType.BLOB
                }).subscribe(function (response) {
                    /** @type {?} */
                    var objectURL = _this.sanitizer.bypassSecurityTrustUrl((window.URL.createObjectURL(response.body)));
                    _this.images = undefined;
                    _this.image = objectURL;
                    _this.fullImage = ConfigUtils.getConfig().api.servers['image'].uri + "/" + fileId_1;
                    /** @type {?} */
                    var descriptions = response.headers.getAll('description');
                    if (descriptions && descriptions.length > 0) {
                        _this.description = descriptions[0];
                    }
                    _this.cd.detectChanges();
                });
            }
        }
    };
    /**
     * @return {?}
     */
    PngImageComponent.prototype.viewImage = /**
     * @return {?}
     */
    function () {
        if (this.images) {
            this.imageViewer.show();
            this.imageViewer.center();
        }
        else if (this.image) {
            DialogUtils.info('图片预览', this.imageViewTpl, (/** @type {?} */ ({})));
        }
    };
    PngImageComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-image',
                    template: "\n    <div [ngClass]=\"styleClass\" [ngStyle]=\"style\">\n      <img *ngIf=\"image\"\n           style=\"margin: 5px\"\n           [src]=\"image\"\n           [ngClass]=\"imageStyleClass\"\n           [ngStyle]=\"imageStyle\"\n           [title]=\"description || ''\"\n           (click)=\"viewImage()\"/>\n      <div *ngIf=\"showDescription\" [ngClass]=\"descriptionStyleClass\" [ngStyle]=\"descriptionStyle\">\n        {{description}}\n      </div>\n    </div>\n    <ng-template #imageView>\n      <img [src]=\"fullImage\" [ngStyle]=\"imageViewStyle\" [ngClass]=\"imageViewStyleClass\"/>\n    </ng-template>\n    <ng-template #imagesView>\n      <p-lightbox [images]=\"images\" [styleClass]=\"boxStyleClass\" [style]=\"boxStyle\"></p-lightbox>\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngImageComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: DomSanitizer }
    ]; };
    PngImageComponent.propDecorators = {
        src: [{ type: Input }],
        styleClass: [{ type: Input }],
        style: [{ type: Input }],
        imageStyleClass: [{ type: Input }],
        imageStyle: [{ type: Input }],
        descriptionStyleClass: [{ type: Input }],
        descriptionStyle: [{ type: Input }],
        boxStyleClass: [{ type: Input }],
        boxStyle: [{ type: Input }],
        imageViewStyleClass: [{ type: Input }],
        imageViewStyle: [{ type: Input }],
        showDescription: [{ type: Input }],
        size: [{ type: Input }],
        fileId: [{ type: Input }],
        imageViewTpl: [{ type: ViewChild, args: ['imageView',] }],
        imageViewer: [{ type: ViewChild, args: ['imagesView',] }],
        descriptionChange: [{ type: Output }]
    };
    return PngImageComponent;
}(BaseComponent));
export { PngImageComponent };
if (false) {
    /** @type {?} */
    PngImageComponent.prototype.src;
    /** @type {?} */
    PngImageComponent.prototype.styleClass;
    /** @type {?} */
    PngImageComponent.prototype.style;
    /** @type {?} */
    PngImageComponent.prototype.imageStyleClass;
    /** @type {?} */
    PngImageComponent.prototype.imageStyle;
    /** @type {?} */
    PngImageComponent.prototype.descriptionStyleClass;
    /** @type {?} */
    PngImageComponent.prototype.descriptionStyle;
    /** @type {?} */
    PngImageComponent.prototype.boxStyleClass;
    /** @type {?} */
    PngImageComponent.prototype.boxStyle;
    /** @type {?} */
    PngImageComponent.prototype.imageViewStyleClass;
    /** @type {?} */
    PngImageComponent.prototype.imageViewStyle;
    /** @type {?} */
    PngImageComponent.prototype.showDescription;
    /** @type {?} */
    PngImageComponent.prototype.size;
    /** @type {?} */
    PngImageComponent.prototype.fileId;
    /** @type {?} */
    PngImageComponent.prototype.imageViewTpl;
    /** @type {?} */
    PngImageComponent.prototype.imageViewer;
    /** @type {?} */
    PngImageComponent.prototype.image;
    /** @type {?} */
    PngImageComponent.prototype.fullImage;
    /** @type {?} */
    PngImageComponent.prototype.images;
    /** @type {?} */
    PngImageComponent.prototype.descriptionChange;
    /** @type {?} */
    PngImageComponent.prototype._description;
    /**
     * @type {?}
     * @private
     */
    PngImageComponent.prototype.cd;
    /** @type {?} */
    PngImageComponent.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,