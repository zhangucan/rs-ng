/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';
import { BaseComponent } from '@er/core';
import { NotifyLevel, NotifyType, StateNames } from '@er/types';
import { ConfigUtils, StatesUtils } from '@er/utils';
import { MessageService } from 'primeng/api';
import { filter } from 'rxjs/operators';
/** @type {?} */
export var DEFAULT_ANNOUNCE_PROPS = {
    level: NotifyLevel.INFO,
    animation: true,
    closable: true,
    baseZIndex: 2000
};
var PngAnnounceComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngAnnounceComponent, _super);
    function PngAnnounceComponent(messageService, cd) {
        var _this = _super.call(this) || this;
        _this.messageService = messageService;
        _this.cd = cd;
        _this.announce = tslib_1.__assign({}, DEFAULT_ANNOUNCE_PROPS, ConfigUtils.getConfig().announce || {});
        _this.defaultNotifyType = ConfigUtils.getConfig().notify;
        return _this;
    }
    /**
     * @return {?}
     */
    PngAnnounceComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.$subscriptions = StatesUtils.observe(StateNames.notify)
            .pipe(filter(function (notify) { return notify && notify.message; }), filter(function (notify) { return notify.type === NotifyType.ANNOUNCE || (!notify.type && _this.defaultNotifyType === NotifyType.ANNOUNCE); })).subscribe(function (notify) {
            /** @type {?} */
            var model = _this.getNotifyModel(notify);
            _this.messageService.add(model);
            _this.cd.detectChanges();
        });
    };
    /**
     * @param {?} notify
     * @return {?}
     */
    PngAnnounceComponent.prototype.getNotifyModel = /**
     * @param {?} notify
     * @return {?}
     */
    function (notify) {
        return {
            key: notify.key,
            severity: notify.level || NotifyLevel.INFO,
            summary: notify.title,
            detail: notify.message,
            closable: notify.closable,
            data: notify.data
        };
    };
    PngAnnounceComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-announce',
                    template: "\n    <p-messages [styleClass]=\"announce.styleClass\"\n                [style]=\"announce.style\"\n                [closable]=\"announce.closable\"\n    ></p-messages>\n  ",
                    providers: [MessageService],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngAnnounceComponent.ctorParameters = function () { return [
        { type: MessageService },
        { type: ChangeDetectorRef }
    ]; };
    return PngAnnounceComponent;
}(BaseComponent));
export { PngAnnounceComponent };
if (false) {
    /** @type {?} */
    PngAnnounceComponent.prototype.announce;
    /**
     * @type {?}
     * @private
     */
    PngAnnounceComponent.prototype.defaultNotifyType;
    /**
     * @type {?}
     * @private
     */
    PngAnnounceComponent.prototype.messageService;
    /**
     * @type {?}
     * @private
     */
    PngAnnounceComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9ub3RpZnkuYW5ub3VuY2UvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBUyxNQUFNLGVBQWUsQ0FBQztBQUM1RixPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxXQUFXLEVBQWMsVUFBVSxFQUFFLFVBQVUsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUMxRSxPQUFPLEVBQUMsV0FBVyxFQUFFLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNuRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBRTNDLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFHdEMsTUFBTSxLQUFPLHNCQUFzQixHQUFlO0lBQ2hELEtBQUssRUFBRSxXQUFXLENBQUMsSUFBSTtJQUN2QixTQUFTLEVBQUUsSUFBSTtJQUNmLFFBQVEsRUFBRSxJQUFJO0lBQ2QsVUFBVSxFQUFFLElBQUk7Q0FDakI7QUFFRDtJQVcwQyxnREFBYTtJQU1yRCw4QkFBb0IsY0FBOEIsRUFBVSxFQUFxQjtRQUFqRixZQUNFLGlCQUFPLFNBTVI7UUFQbUIsb0JBQWMsR0FBZCxjQUFjLENBQWdCO1FBQVUsUUFBRSxHQUFGLEVBQUUsQ0FBbUI7UUFFL0UsS0FBSSxDQUFDLFFBQVEsd0JBQ1Isc0JBQXNCLEVBQ3RCLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUMxQyxDQUFDO1FBQ0YsS0FBSSxDQUFDLGlCQUFpQixHQUFHLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLENBQUM7O0lBQzFELENBQUM7Ozs7SUFFRCx1Q0FBUTs7O0lBQVI7UUFBQSxpQkFVQztRQVRDLElBQUksQ0FBQyxjQUFjLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO2FBQ3pELElBQUksQ0FDSCxNQUFNLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBeEIsQ0FBd0IsQ0FBQyxFQUMxQyxNQUFNLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksS0FBSSxDQUFDLGlCQUFpQixLQUFLLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBdkcsQ0FBdUcsQ0FBQyxDQUMxSCxDQUFDLFNBQVMsQ0FBQyxVQUFBLE1BQU07O2dCQUNWLEtBQUssR0FBRyxLQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQztZQUN6QyxLQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQixLQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7SUFFRCw2Q0FBYzs7OztJQUFkLFVBQWUsTUFBa0I7UUFDL0IsT0FBTztZQUNMLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRztZQUNmLFFBQVEsRUFBRSxNQUFNLENBQUMsS0FBSyxJQUFJLFdBQVcsQ0FBQyxJQUFJO1lBQzFDLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FBSztZQUNyQixNQUFNLEVBQUUsTUFBTSxDQUFDLE9BQU87WUFDdEIsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRO1lBQ3pCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtTQUNsQixDQUFDO0lBQ0osQ0FBQzs7Z0JBL0NGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztvQkFDeEIsUUFBUSxFQUFFLDhLQUtUO29CQUNELFNBQVMsRUFBRSxDQUFDLGNBQWMsQ0FBQztvQkFDM0IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzs7O2dCQXRCTyxjQUFjO2dCQUpXLGlCQUFpQjs7SUFpRWxELDJCQUFDO0NBQUEsQUFqREQsQ0FXMEMsYUFBYSxHQXNDdEQ7U0F0Q1ksb0JBQW9COzs7SUFFL0Isd0NBQXFCOzs7OztJQUVyQixpREFBc0M7Ozs7O0lBRTFCLDhDQUFzQzs7Ozs7SUFBRSxrQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCYXNlQ29tcG9uZW50fSBmcm9tICdAZXIvY29yZSc7XG5pbXBvcnQge05vdGlmeUxldmVsLCBOb3RpZnlQcm9wLCBOb3RpZnlUeXBlLCBTdGF0ZU5hbWVzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb25maWdVdGlscywgU3RhdGVzVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge01lc3NhZ2VTZXJ2aWNlfSBmcm9tICdwcmltZW5nL2FwaSc7XG5pbXBvcnQge01lc3NhZ2V9IGZyb20gJ3ByaW1lbmcvY29tcG9uZW50cy9jb21tb24vbWVzc2FnZSc7XG5pbXBvcnQge2ZpbHRlcn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0FOTk9VTkNFX1BST1BTOiBOb3RpZnlQcm9wID0ge1xuICBsZXZlbDogTm90aWZ5TGV2ZWwuSU5GTyxcbiAgYW5pbWF0aW9uOiB0cnVlLFxuICBjbG9zYWJsZTogdHJ1ZSxcbiAgYmFzZVpJbmRleDogMjAwMFxufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG5nLWFubm91bmNlJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8cC1tZXNzYWdlcyBbc3R5bGVDbGFzc109XCJhbm5vdW5jZS5zdHlsZUNsYXNzXCJcbiAgICAgICAgICAgICAgICBbc3R5bGVdPVwiYW5ub3VuY2Uuc3R5bGVcIlxuICAgICAgICAgICAgICAgIFtjbG9zYWJsZV09XCJhbm5vdW5jZS5jbG9zYWJsZVwiXG4gICAgPjwvcC1tZXNzYWdlcz5cbiAgYCxcbiAgcHJvdmlkZXJzOiBbTWVzc2FnZVNlcnZpY2VdLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBQbmdBbm5vdW5jZUNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIGFubm91bmNlOiBOb3RpZnlQcm9wO1xuXG4gIHByaXZhdGUgZGVmYXVsdE5vdGlmeVR5cGU6IE5vdGlmeVR5cGU7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtZXNzYWdlU2VydmljZTogTWVzc2FnZVNlcnZpY2UsIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmFubm91bmNlID0ge1xuICAgICAgLi4uREVGQVVMVF9BTk5PVU5DRV9QUk9QUyxcbiAgICAgIC4uLkNvbmZpZ1V0aWxzLmdldENvbmZpZygpLmFubm91bmNlIHx8IHt9XG4gICAgfTtcbiAgICB0aGlzLmRlZmF1bHROb3RpZnlUeXBlID0gQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkubm90aWZ5O1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy4kc3Vic2NyaXB0aW9ucyA9IFN0YXRlc1V0aWxzLm9ic2VydmUoU3RhdGVOYW1lcy5ub3RpZnkpXG4gICAgICAucGlwZShcbiAgICAgICAgZmlsdGVyKG5vdGlmeSA9PiBub3RpZnkgJiYgbm90aWZ5Lm1lc3NhZ2UpLFxuICAgICAgICBmaWx0ZXIobm90aWZ5ID0+IG5vdGlmeS50eXBlID09PSBOb3RpZnlUeXBlLkFOTk9VTkNFIHx8ICghbm90aWZ5LnR5cGUgJiYgdGhpcy5kZWZhdWx0Tm90aWZ5VHlwZSA9PT0gTm90aWZ5VHlwZS5BTk5PVU5DRSkpXG4gICAgICApLnN1YnNjcmliZShub3RpZnkgPT4ge1xuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMuZ2V0Tm90aWZ5TW9kZWwobm90aWZ5KTtcbiAgICAgICAgdGhpcy5tZXNzYWdlU2VydmljZS5hZGQobW9kZWwpO1xuICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZ2V0Tm90aWZ5TW9kZWwobm90aWZ5OiBOb3RpZnlQcm9wKTogTWVzc2FnZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleTogbm90aWZ5LmtleSxcbiAgICAgIHNldmVyaXR5OiBub3RpZnkubGV2ZWwgfHwgTm90aWZ5TGV2ZWwuSU5GTyxcbiAgICAgIHN1bW1hcnk6IG5vdGlmeS50aXRsZSxcbiAgICAgIGRldGFpbDogbm90aWZ5Lm1lc3NhZ2UsXG4gICAgICBjbG9zYWJsZTogbm90aWZ5LmNsb3NhYmxlLFxuICAgICAgZGF0YTogbm90aWZ5LmRhdGFcbiAgICB9O1xuICB9XG5cbn1cblxuXG4iXX0=