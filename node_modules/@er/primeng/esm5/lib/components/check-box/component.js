/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DataAwareControlWrapperComponent } from '@er/core';
import { CommonsUtils, DataItemUtils } from '@er/utils';
import { DEFAULT_CHECK_BOX_PROPS } from './type';
var PngCheckBoxComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngCheckBoxComponent, _super);
    function PngCheckBoxComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.valueParser = _this.parseValue;
        _this.modelFormatter = _this.formatModel;
        _this.$defaultProps = DEFAULT_CHECK_BOX_PROPS;
        return _this;
    }
    Object.defineProperty(PngCheckBoxComponent.prototype, "chkValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._chkValue;
        },
        set: /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            var _this = this;
            this._chkValue = values;
            /** @type {?} */
            var data = this.data$.value;
            if (CommonsUtils.isArray(data)) {
                /** @type {?} */
                var objectValues_1 = [];
                values.forEach(function (value) {
                    /** @type {?} */
                    var matched = ((/** @type {?} */ (data))).filter(function (v) { return v[_this.dataKey] === value; });
                    if (matched.length === 1) {
                        objectValues_1.push(DataItemUtils.getItemValue(matched[0], _this.valueKey));
                    }
                });
                this.value = objectValues_1.length > 0 ? objectValues_1 : null;
            }
            else {
                this.value = values;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngCheckBoxComponent.prototype, "dataKey", {
        get: /**
         * @return {?}
         */
        function () {
            return CommonsUtils.get(this.$props, '$ext.dataItemProps.idKey', 'value');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngCheckBoxComponent.prototype, "valueKey", {
        get: /**
         * @return {?}
         */
        function () {
            return CommonsUtils.get(this.$props, '$ext.dataItemProps.valueKey', 'value');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} model
     * @return {?}
     */
    PngCheckBoxComponent.prototype.formatModel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        var _this = this;
        if (this.$props && !this.$props.label && model) {
            /** @type {?} */
            var models = CommonsUtils.getArrayValue(model);
            this._chkValue = [];
            models.forEach(function (m) {
                if (CommonsUtils.isJson(m)) {
                    _this._chkValue.push(DataItemUtils.getItemValue(m, _this.dataKey));
                }
                else {
                    _this._chkValue.push(m);
                }
            });
            return models;
        }
        else {
            return model;
        }
    };
    PngCheckBoxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-check-box',
                    template: "\n    <ng-container *ngIf=\"$props.label;else multiTpl\">\n      <p-checkbox\n        class=\"m-2\"\n        [(ngModel)]=\"value\"\n        erPropsBind\n        [props]=\"$props\"\n        [context]=\"ctx\"\n        binary=\"true\"\n        (onChange)=\"updateTouch()\"\n      >\n      </p-checkbox>\n    </ng-container>\n    <ng-template #multiTpl>\n      <div class=\"d-flex pb-2\"\n           [ngClass]=\"$props.$ext['inline']===false?'flex-column':'flex-wrap'\"\n           [erApiData]=\"apiDataProps\"\n      >\n        <ng-container *ngFor=\"let option of data$|async|erDataItems:$props.$ext.dataItemProps;let i=index\">\n          <span class=\"d-flex align-items-center\">\n             <p-checkbox\n               class=\"m-2\"\n               [(ngModel)]=\"chkValue\"\n               [attr.index]=\"i\"\n               erPropsBind\n               [props]=\"$props\"\n               [context]=\"ctx\"\n               [value]=\"option.data|erValue:dataKey\"\n               (onChange)=\"updateTouch()\"\n             >\n             </p-checkbox>\n             <span class=\"mr-4\" [innerHTML]=\"option.label|erSafeHtml\"></span>\n          </span>\n        </ng-container>\n      </div>\n    </ng-template>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngCheckBoxComponent; }),
                            multi: true
                        }]
                }] }
    ];
    return PngCheckBoxComponent;
}(DataAwareControlWrapperComponent));
export { PngCheckBoxComponent };
if (false) {
    /** @type {?} */
    PngCheckBoxComponent.prototype.valueParser;
    /** @type {?} */
    PngCheckBoxComponent.prototype.modelFormatter;
    /** @type {?} */
    PngCheckBoxComponent.prototype.$defaultProps;
    /**
     * @type {?}
     * @private
     */
    PngCheckBoxComponent.prototype._chkValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9jaGVjay1ib3gvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFDLGdDQUFnQyxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQzFELE9BQU8sRUFBQyxZQUFZLEVBQUUsYUFBYSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3RELE9BQU8sRUFBQyx1QkFBdUIsRUFBbUIsTUFBTSxRQUFRLENBQUM7QUFJakU7SUE4QzBDLGdEQUFrRDtJQTlDNUY7UUFBQSxxRUFzR0M7UUF0REMsaUJBQVcsR0FBRyxLQUFJLENBQUMsVUFBVSxDQUFDO1FBRTlCLG9CQUFjLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQztRQUVsQyxtQkFBYSxHQUFHLHVCQUF1QixDQUFDOztJQWtEMUMsQ0FBQztJQTdDQyxzQkFBSSwwQ0FBUTs7OztRQUFaO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7Ozs7O1FBRUQsVUFBYSxNQUFhO1lBQTFCLGlCQWVDO1lBZEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7O2dCQUNsQixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLO1lBQzdCLElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTs7b0JBQ3hCLGNBQVksR0FBRyxFQUFFO2dCQUN2QixNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSzs7d0JBQ1osT0FBTyxHQUFHLENBQUMsbUJBQU0sSUFBSSxFQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEtBQUssRUFBekIsQ0FBeUIsQ0FBQztvQkFDbkUsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTt3QkFDeEIsY0FBWSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztxQkFDMUU7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxDQUFDLEtBQUssR0FBRyxjQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7YUFDNUQ7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7YUFDckI7UUFDSCxDQUFDOzs7T0FqQkE7SUFtQkQsc0JBQUkseUNBQU87Ozs7UUFBWDtZQUNFLE9BQU8sWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLDBCQUEwQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzVFLENBQUM7OztPQUFBO0lBRUQsc0JBQUksMENBQVE7Ozs7UUFBWjtZQUNFLE9BQU8sWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLDZCQUE2QixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9FLENBQUM7OztPQUFBOzs7OztJQUVELDBDQUFXOzs7O0lBQVgsVUFBWSxLQUFLO1FBQWpCLGlCQWVDO1FBZEMsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksS0FBSyxFQUFFOztnQkFDeEMsTUFBTSxHQUFHLFlBQVksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO1lBQ2hELElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1lBQ3BCLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO2dCQUNkLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDMUIsS0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsS0FBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7aUJBQ2xFO3FCQUFNO29CQUNMLEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUN4QjtZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxNQUFNLENBQUM7U0FDZjthQUFNO1lBQ0wsT0FBTyxLQUFLLENBQUM7U0FDZDtJQUNILENBQUM7O2dCQXJHRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFFBQVEsRUFBRSxxc0NBb0NUO29CQUNELFNBQVMsRUFBRSxDQUFDOzRCQUNWLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLG9CQUFvQixFQUFwQixDQUFvQixDQUFDOzRCQUNuRCxLQUFLLEVBQUUsSUFBSTt5QkFDWixDQUFDO2lCQUNIOztJQTBERCwyQkFBQztDQUFBLEFBdEdELENBOEMwQyxnQ0FBZ0MsR0F3RHpFO1NBeERZLG9CQUFvQjs7O0lBRS9CLDJDQUE4Qjs7SUFFOUIsOENBQWtDOztJQUVsQyw2Q0FBd0M7Ozs7O0lBRXhDLHlDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBmb3J3YXJkUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TkdfVkFMVUVfQUNDRVNTT1J9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7RGF0YUF3YXJlQ29udHJvbFdyYXBwZXJDb21wb25lbnR9IGZyb20gJ0Blci9jb3JlJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzLCBEYXRhSXRlbVV0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtERUZBVUxUX0NIRUNLX0JPWF9QUk9QUywgUG5nQ2hlY2tib3hQcm9wc30gZnJvbSAnLi90eXBlJztcblxuZXhwb3J0IHtQbmdDaGVja2JveFByb3BzfSBmcm9tICcuL3R5cGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwbmctY2hlY2stYm94JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiJHByb3BzLmxhYmVsO2Vsc2UgbXVsdGlUcGxcIj5cbiAgICAgIDxwLWNoZWNrYm94XG4gICAgICAgIGNsYXNzPVwibS0yXCJcbiAgICAgICAgWyhuZ01vZGVsKV09XCJ2YWx1ZVwiXG4gICAgICAgIGVyUHJvcHNCaW5kXG4gICAgICAgIFtwcm9wc109XCIkcHJvcHNcIlxuICAgICAgICBbY29udGV4dF09XCJjdHhcIlxuICAgICAgICBiaW5hcnk9XCJ0cnVlXCJcbiAgICAgICAgKG9uQ2hhbmdlKT1cInVwZGF0ZVRvdWNoKClcIlxuICAgICAgPlxuICAgICAgPC9wLWNoZWNrYm94PlxuICAgIDwvbmctY29udGFpbmVyPlxuICAgIDxuZy10ZW1wbGF0ZSAjbXVsdGlUcGw+XG4gICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IHBiLTJcIlxuICAgICAgICAgICBbbmdDbGFzc109XCIkcHJvcHMuJGV4dFsnaW5saW5lJ109PT1mYWxzZT8nZmxleC1jb2x1bW4nOidmbGV4LXdyYXAnXCJcbiAgICAgICAgICAgW2VyQXBpRGF0YV09XCJhcGlEYXRhUHJvcHNcIlxuICAgICAgPlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBvcHRpb24gb2YgZGF0YSR8YXN5bmN8ZXJEYXRhSXRlbXM6JHByb3BzLiRleHQuZGF0YUl0ZW1Qcm9wcztsZXQgaT1pbmRleFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgIDxwLWNoZWNrYm94XG4gICAgICAgICAgICAgICBjbGFzcz1cIm0tMlwiXG4gICAgICAgICAgICAgICBbKG5nTW9kZWwpXT1cImNoa1ZhbHVlXCJcbiAgICAgICAgICAgICAgIFthdHRyLmluZGV4XT1cImlcIlxuICAgICAgICAgICAgICAgZXJQcm9wc0JpbmRcbiAgICAgICAgICAgICAgIFtwcm9wc109XCIkcHJvcHNcIlxuICAgICAgICAgICAgICAgW2NvbnRleHRdPVwiY3R4XCJcbiAgICAgICAgICAgICAgIFt2YWx1ZV09XCJvcHRpb24uZGF0YXxlclZhbHVlOmRhdGFLZXlcIlxuICAgICAgICAgICAgICAgKG9uQ2hhbmdlKT1cInVwZGF0ZVRvdWNoKClcIlxuICAgICAgICAgICAgID5cbiAgICAgICAgICAgICA8L3AtY2hlY2tib3g+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtci00XCIgW2lubmVySFRNTF09XCJvcHRpb24ubGFiZWx8ZXJTYWZlSHRtbFwiPjwvc3Bhbj5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgPC9kaXY+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgYCxcbiAgcHJvdmlkZXJzOiBbe1xuICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFBuZ0NoZWNrQm94Q29tcG9uZW50KSxcbiAgICBtdWx0aTogdHJ1ZVxuICB9XVxufSlcblxuZXhwb3J0IGNsYXNzIFBuZ0NoZWNrQm94Q29tcG9uZW50IGV4dGVuZHMgRGF0YUF3YXJlQ29udHJvbFdyYXBwZXJDb21wb25lbnQ8UG5nQ2hlY2tib3hQcm9wcz4ge1xuXG4gIHZhbHVlUGFyc2VyID0gdGhpcy5wYXJzZVZhbHVlO1xuXG4gIG1vZGVsRm9ybWF0dGVyID0gdGhpcy5mb3JtYXRNb2RlbDtcblxuICAkZGVmYXVsdFByb3BzID0gREVGQVVMVF9DSEVDS19CT1hfUFJPUFM7XG5cbiAgcHJpdmF0ZSBfY2hrVmFsdWU6IGFueVtdO1xuXG5cbiAgZ2V0IGNoa1ZhbHVlKCk6IGFueVtdIHtcbiAgICByZXR1cm4gdGhpcy5fY2hrVmFsdWU7XG4gIH1cblxuICBzZXQgY2hrVmFsdWUodmFsdWVzOiBhbnlbXSkge1xuICAgIHRoaXMuX2Noa1ZhbHVlID0gdmFsdWVzO1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGEkLnZhbHVlO1xuICAgIGlmIChDb21tb25zVXRpbHMuaXNBcnJheShkYXRhKSkge1xuICAgICAgY29uc3Qgb2JqZWN0VmFsdWVzID0gW107XG4gICAgICB2YWx1ZXMuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgIGNvbnN0IG1hdGNoZWQgPSAoPHt9W10+ZGF0YSkuZmlsdGVyKHYgPT4gdlt0aGlzLmRhdGFLZXldID09PSB2YWx1ZSk7XG4gICAgICAgIGlmIChtYXRjaGVkLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIG9iamVjdFZhbHVlcy5wdXNoKERhdGFJdGVtVXRpbHMuZ2V0SXRlbVZhbHVlKG1hdGNoZWRbMF0sIHRoaXMudmFsdWVLZXkpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLnZhbHVlID0gb2JqZWN0VmFsdWVzLmxlbmd0aCA+IDAgPyBvYmplY3RWYWx1ZXMgOiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWVzO1xuICAgIH1cbiAgfVxuXG4gIGdldCBkYXRhS2V5KCkge1xuICAgIHJldHVybiBDb21tb25zVXRpbHMuZ2V0KHRoaXMuJHByb3BzLCAnJGV4dC5kYXRhSXRlbVByb3BzLmlkS2V5JywgJ3ZhbHVlJyk7XG4gIH1cblxuICBnZXQgdmFsdWVLZXkoKSB7XG4gICAgcmV0dXJuIENvbW1vbnNVdGlscy5nZXQodGhpcy4kcHJvcHMsICckZXh0LmRhdGFJdGVtUHJvcHMudmFsdWVLZXknLCAndmFsdWUnKTtcbiAgfVxuXG4gIGZvcm1hdE1vZGVsKG1vZGVsKSB7XG4gICAgaWYgKHRoaXMuJHByb3BzICYmICF0aGlzLiRwcm9wcy5sYWJlbCAmJiBtb2RlbCkge1xuICAgICAgY29uc3QgbW9kZWxzID0gQ29tbW9uc1V0aWxzLmdldEFycmF5VmFsdWUobW9kZWwpO1xuICAgICAgdGhpcy5fY2hrVmFsdWUgPSBbXTtcbiAgICAgIG1vZGVscy5mb3JFYWNoKG0gPT4ge1xuICAgICAgICBpZiAoQ29tbW9uc1V0aWxzLmlzSnNvbihtKSkge1xuICAgICAgICAgIHRoaXMuX2Noa1ZhbHVlLnB1c2goRGF0YUl0ZW1VdGlscy5nZXRJdGVtVmFsdWUobSwgdGhpcy5kYXRhS2V5KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fY2hrVmFsdWUucHVzaChtKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbW9kZWxzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbW9kZWw7XG4gICAgfVxuICB9XG59XG4iXX0=