/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DataAwareControlWrapperComponent } from '@er/core';
import { CommonsUtils } from '@er/utils';
import { DEFAULT_PNG_AUTO_COMPLETE_PROPS } from './type';
var PngAutoCompleteComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngAutoCompleteComponent, _super);
    function PngAutoCompleteComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.valueParser = _this.parseValue;
        _this.$defaultProps = DEFAULT_PNG_AUTO_COMPLETE_PROPS;
        return _this;
    }
    /**
     * @return {?}
     */
    PngAutoCompleteComponent.prototype.onPropsInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.onPropsInit.call(this);
        /** @type {?} */
        var placeholder = '请输入';
        if (this.$props.$ext.apiDataProps) {
            if (!this.$props.$ext.apiDataProps.withPrefix &&
                !this.$props.$ext.apiDataProps.withTerm &&
                !this.$props.$ext.apiDataProps.withWildcard) {
                this.$props.$ext.apiDataProps.withPy = this.$props.$ext.apiDataProps.withPy || true;
                this.$props.$ext.apiDataProps.withZh = this.$props.$ext.apiDataProps.withZh || true;
            }
            if (!this.$props.placeholder) {
                if (this.$props.$ext.apiDataProps.withPy) {
                    placeholder += '拼音首字母，';
                }
                if (this.$props.$ext.apiDataProps.withZh) {
                    placeholder += '汉字关键字';
                }
                placeholder += '筛选';
                this.$props.placeholder = placeholder;
            }
        }
        if (this.$props.$ext.dataItemProps) {
            if (!this.$props.field && CommonsUtils.isString(this.$props.$ext.dataItemProps.labelKey)) {
                this.$props.field = (/** @type {?} */ (this.$props.$ext.dataItemProps.labelKey));
            }
            if (this.$props.$ext.dataItemProps.showCounter) {
                if (!this.$props.$ext.apiDataProps.aggProps) {
                    /** @type {?} */
                    var fields = this.$props.$ext.apiDataProps.returnFields;
                    this.$props.$ext.apiDataProps.aggProps = fields;
                }
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngAutoCompleteComponent.prototype.complete = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.apiDataProps = tslib_1.__assign({}, this.apiDataProps, { queryValue: event.query });
    };
    PngAutoCompleteComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-auto-complete',
                    template: "\n    <div class=\"inner-addon\">\n      <p-autoComplete\n        [(ngModel)]=\"value\"\n        erPropsBind\n        [props]=\"$props\"\n        [context]=\"ctx\"\n        [erApiData]=\"apiDataProps\"\n        (completeMethod)=\"complete($event)\"\n        [suggestions]=\"data$|async\"\n        (onBlur)=\"updateTouch()\"\n      >\n        <ng-template let-item pTemplate=\"item\">\n          <er-data-item [customerTpl]=\"template('_')\"\n                        [item]=\"item\"\n                        [props]=\"$props.$ext.dataItemProps\"\n          >\n          </er-data-item>\n        </ng-template>\n      </p-autoComplete>\n      <i *ngIf=\"value && resettable && !disabled\" title=\"\u6E05\u9664\u8F93\u5165\u5185\u5BB9\" class=\"fa fa-trash text-muted right\" [ngClass]=\"$props.dropdown? 'clear1': 'clear2'\" (click)=\"reset()\"></i>\n    </div>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngAutoCompleteComponent; }),
                            multi: true
                        }],
                    styles: [".clear1{right:22px!important}.clear2{right:2px!important}"]
                }] }
    ];
    return PngAutoCompleteComponent;
}(DataAwareControlWrapperComponent));
export { PngAutoCompleteComponent };
if (false) {
    /** @type {?} */
    PngAutoCompleteComponent.prototype.valueParser;
    /** @type {?} */
    PngAutoCompleteComponent.prototype.$defaultProps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9hdXRvLWNvbXBsZXRlL2NvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxnQ0FBZ0MsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUMxRCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3ZDLE9BQU8sRUFBQywrQkFBK0IsRUFBdUIsTUFBTSxRQUFRLENBQUM7QUFJN0U7SUFpQzhDLG9EQUFzRDtJQWpDcEc7UUFBQSxxRUFrRkM7UUEvQ0MsaUJBQVcsR0FBRyxLQUFJLENBQUMsVUFBVSxDQUFDO1FBRTlCLG1CQUFhLEdBQUcsK0JBQStCLENBQUM7O0lBNkNsRCxDQUFDOzs7O0lBM0NDLDhDQUFXOzs7SUFBWDtRQUNFLGlCQUFNLFdBQVcsV0FBRSxDQUFDOztZQUNoQixXQUFXLEdBQUcsS0FBSztRQUN2QixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUVqQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVU7Z0JBQzNDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVE7Z0JBQ3ZDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRTtnQkFDN0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztnQkFDcEYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQzthQUNyRjtZQUVELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRTtnQkFDNUIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFO29CQUN4QyxXQUFXLElBQUksUUFBUSxDQUFDO2lCQUN6QjtnQkFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUU7b0JBQ3hDLFdBQVcsSUFBSSxPQUFPLENBQUM7aUJBQ3hCO2dCQUNELFdBQVcsSUFBSSxJQUFJLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQzthQUN2QztTQUNGO1FBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUN4RixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxtQkFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFBLENBQUM7YUFDckU7WUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUU7Z0JBQzlDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFOzt3QkFDckMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZO29CQUN6RCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztpQkFDakQ7YUFDRjtTQUNGO0lBQ0gsQ0FBQzs7Ozs7SUFFRCwyQ0FBUTs7OztJQUFSLFVBQVMsS0FBSztRQUNaLElBQUksQ0FBQyxZQUFZLHdCQUNaLElBQUksQ0FBQyxZQUFZLElBQ3BCLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSyxHQUN4QixDQUFDO0lBQ0osQ0FBQzs7Z0JBakZGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixRQUFRLEVBQUUsaTJCQXNCVDtvQkFFRCxTQUFTLEVBQUUsQ0FBQzs0QkFDVixPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSx3QkFBd0IsRUFBeEIsQ0FBd0IsQ0FBQzs0QkFDdkQsS0FBSyxFQUFFLElBQUk7eUJBQ1osQ0FBQzs7aUJBQ0g7O0lBbURELCtCQUFDO0NBQUEsQUFsRkQsQ0FpQzhDLGdDQUFnQyxHQWlEN0U7U0FqRFksd0JBQXdCOzs7SUFFbkMsK0NBQThCOztJQUU5QixpREFBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgZm9yd2FyZFJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05HX1ZBTFVFX0FDQ0VTU09SfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0RhdGFBd2FyZUNvbnRyb2xXcmFwcGVyQ29tcG9uZW50fSBmcm9tICdAZXIvY29yZSc7XG5pbXBvcnQge0NvbW1vbnNVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7REVGQVVMVF9QTkdfQVVUT19DT01QTEVURV9QUk9QUywgUG5nQXV0b0NvbXBsZXRlUHJvcHN9IGZyb20gJy4vdHlwZSc7XG5cbmV4cG9ydCB7UG5nQXV0b0NvbXBsZXRlUHJvcHN9IGZyb20gJy4vdHlwZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BuZy1hdXRvLWNvbXBsZXRlJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwiaW5uZXItYWRkb25cIj5cbiAgICAgIDxwLWF1dG9Db21wbGV0ZVxuICAgICAgICBbKG5nTW9kZWwpXT1cInZhbHVlXCJcbiAgICAgICAgZXJQcm9wc0JpbmRcbiAgICAgICAgW3Byb3BzXT1cIiRwcm9wc1wiXG4gICAgICAgIFtjb250ZXh0XT1cImN0eFwiXG4gICAgICAgIFtlckFwaURhdGFdPVwiYXBpRGF0YVByb3BzXCJcbiAgICAgICAgKGNvbXBsZXRlTWV0aG9kKT1cImNvbXBsZXRlKCRldmVudClcIlxuICAgICAgICBbc3VnZ2VzdGlvbnNdPVwiZGF0YSR8YXN5bmNcIlxuICAgICAgICAob25CbHVyKT1cInVwZGF0ZVRvdWNoKClcIlxuICAgICAgPlxuICAgICAgICA8bmctdGVtcGxhdGUgbGV0LWl0ZW0gcFRlbXBsYXRlPVwiaXRlbVwiPlxuICAgICAgICAgIDxlci1kYXRhLWl0ZW0gW2N1c3RvbWVyVHBsXT1cInRlbXBsYXRlKCdfJylcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2l0ZW1dPVwiaXRlbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbcHJvcHNdPVwiJHByb3BzLiRleHQuZGF0YUl0ZW1Qcm9wc1wiXG4gICAgICAgICAgPlxuICAgICAgICAgIDwvZXItZGF0YS1pdGVtPlxuICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgPC9wLWF1dG9Db21wbGV0ZT5cbiAgICAgIDxpICpuZ0lmPVwidmFsdWUgJiYgcmVzZXR0YWJsZSAmJiAhZGlzYWJsZWRcIiB0aXRsZT1cIua4hemZpOi+k+WFpeWGheWuuVwiIGNsYXNzPVwiZmEgZmEtdHJhc2ggdGV4dC1tdXRlZCByaWdodFwiIFtuZ0NsYXNzXT1cIiRwcm9wcy5kcm9wZG93bj8gJ2NsZWFyMSc6ICdjbGVhcjInXCIgKGNsaWNrKT1cInJlc2V0KClcIj48L2k+XG4gICAgPC9kaXY+XG4gIGAsXG4gIHN0eWxlVXJsczogWydzdHlsZXMuc2NzcyddLFxuICBwcm92aWRlcnM6IFt7XG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gUG5nQXV0b0NvbXBsZXRlQ29tcG9uZW50KSxcbiAgICBtdWx0aTogdHJ1ZVxuICB9XVxufSlcblxuZXhwb3J0IGNsYXNzIFBuZ0F1dG9Db21wbGV0ZUNvbXBvbmVudCBleHRlbmRzIERhdGFBd2FyZUNvbnRyb2xXcmFwcGVyQ29tcG9uZW50PFBuZ0F1dG9Db21wbGV0ZVByb3BzPiB7XG5cbiAgdmFsdWVQYXJzZXIgPSB0aGlzLnBhcnNlVmFsdWU7XG5cbiAgJGRlZmF1bHRQcm9wcyA9IERFRkFVTFRfUE5HX0FVVE9fQ09NUExFVEVfUFJPUFM7XG5cbiAgb25Qcm9wc0luaXQoKSB7XG4gICAgc3VwZXIub25Qcm9wc0luaXQoKTtcbiAgICBsZXQgcGxhY2Vob2xkZXIgPSAn6K+36L6T5YWlJztcbiAgICBpZiAodGhpcy4kcHJvcHMuJGV4dC5hcGlEYXRhUHJvcHMpIHtcblxuICAgICAgaWYgKCF0aGlzLiRwcm9wcy4kZXh0LmFwaURhdGFQcm9wcy53aXRoUHJlZml4ICYmXG4gICAgICAgICF0aGlzLiRwcm9wcy4kZXh0LmFwaURhdGFQcm9wcy53aXRoVGVybSAmJlxuICAgICAgICAhdGhpcy4kcHJvcHMuJGV4dC5hcGlEYXRhUHJvcHMud2l0aFdpbGRjYXJkKSB7XG4gICAgICAgIHRoaXMuJHByb3BzLiRleHQuYXBpRGF0YVByb3BzLndpdGhQeSA9IHRoaXMuJHByb3BzLiRleHQuYXBpRGF0YVByb3BzLndpdGhQeSB8fCB0cnVlO1xuICAgICAgICB0aGlzLiRwcm9wcy4kZXh0LmFwaURhdGFQcm9wcy53aXRoWmggPSB0aGlzLiRwcm9wcy4kZXh0LmFwaURhdGFQcm9wcy53aXRoWmggfHwgdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLiRwcm9wcy5wbGFjZWhvbGRlcikge1xuICAgICAgICBpZiAodGhpcy4kcHJvcHMuJGV4dC5hcGlEYXRhUHJvcHMud2l0aFB5KSB7XG4gICAgICAgICAgcGxhY2Vob2xkZXIgKz0gJ+aLvOmfs+mmluWtl+avje+8jCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuJHByb3BzLiRleHQuYXBpRGF0YVByb3BzLndpdGhaaCkge1xuICAgICAgICAgIHBsYWNlaG9sZGVyICs9ICfmsYnlrZflhbPplK7lrZcnO1xuICAgICAgICB9XG4gICAgICAgIHBsYWNlaG9sZGVyICs9ICfnrZvpgIknO1xuICAgICAgICB0aGlzLiRwcm9wcy5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLiRwcm9wcy4kZXh0LmRhdGFJdGVtUHJvcHMpIHtcbiAgICAgIGlmICghdGhpcy4kcHJvcHMuZmllbGQgJiYgQ29tbW9uc1V0aWxzLmlzU3RyaW5nKHRoaXMuJHByb3BzLiRleHQuZGF0YUl0ZW1Qcm9wcy5sYWJlbEtleSkpIHtcbiAgICAgICAgdGhpcy4kcHJvcHMuZmllbGQgPSA8c3RyaW5nPnRoaXMuJHByb3BzLiRleHQuZGF0YUl0ZW1Qcm9wcy5sYWJlbEtleTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLiRwcm9wcy4kZXh0LmRhdGFJdGVtUHJvcHMuc2hvd0NvdW50ZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLiRwcm9wcy4kZXh0LmFwaURhdGFQcm9wcy5hZ2dQcm9wcykge1xuICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMuJHByb3BzLiRleHQuYXBpRGF0YVByb3BzLnJldHVybkZpZWxkcztcbiAgICAgICAgICB0aGlzLiRwcm9wcy4kZXh0LmFwaURhdGFQcm9wcy5hZ2dQcm9wcyA9IGZpZWxkcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbXBsZXRlKGV2ZW50KSB7XG4gICAgdGhpcy5hcGlEYXRhUHJvcHMgPSB7XG4gICAgICAuLi50aGlzLmFwaURhdGFQcm9wcyxcbiAgICAgIHF1ZXJ5VmFsdWU6IGV2ZW50LnF1ZXJ5XG4gICAgfTtcbiAgfVxufVxuIl19