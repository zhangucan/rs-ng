/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';
import { BaseComponent } from '@er/core';
import { NotifyLevel, NotifyType, StateNames, UiPosition } from '@er/types';
import { ConfigUtils, StatesUtils } from '@er/utils';
import { MessageService } from 'primeng/api';
import { filter } from 'rxjs/operators';
/** @type {?} */
export var DEFAULT_ALERT_PROPS = {
    animation: true,
    duration: 3000,
    immutable: true,
    closable: true,
    autoZIndex: true,
    position: UiPosition.rightTop
};
var PngAlertComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngAlertComponent, _super);
    function PngAlertComponent(messageService, cd) {
        var _this = _super.call(this) || this;
        _this.messageService = messageService;
        _this.cd = cd;
        _this.alert = tslib_1.__assign({}, DEFAULT_ALERT_PROPS, ConfigUtils.getConfig().alert || {});
        _this.defaultNotifyType = ConfigUtils.getConfig().notify || NotifyType.ALERT;
        return _this;
    }
    /**
     * @return {?}
     */
    PngAlertComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.$subscriptions = StatesUtils.observe(StateNames.notify)
            .pipe(filter(function (notify) { return notify && notify.message; }), filter(function (notify) { return notify.type === NotifyType.ALERT || (!notify.type && _this.defaultNotifyType === NotifyType.ALERT); })).subscribe(function (notify) {
            /** @type {?} */
            var model = _this.getNotifyModel(notify);
            _this.messageService.add(model);
            _this.cd.detectChanges();
        });
    };
    /**
     * @param {?} notify
     * @return {?}
     */
    PngAlertComponent.prototype.getNotifyModel = /**
     * @param {?} notify
     * @return {?}
     */
    function (notify) {
        return {
            key: notify.key,
            severity: notify.level || NotifyLevel.INFO,
            summary: notify.title,
            detail: notify.message,
            sticky: notify.sticky || false,
            life: notify.duration || notify.level === NotifyLevel.ERROR ? DEFAULT_ALERT_PROPS.duration * 2 : DEFAULT_ALERT_PROPS.duration,
            closable: notify.closable || true,
            data: notify.data
        };
    };
    PngAlertComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-alert',
                    template: "\n    <p-toast [styleClass]=\"alert.styleClass\"\n             [style]=\"alert.style\"\n             [position]=\"alert.position\"\n             [autoZIndex]=\"alert.autoZIndex\"\n    ></p-toast>\n  ",
                    providers: [MessageService],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngAlertComponent.ctorParameters = function () { return [
        { type: MessageService },
        { type: ChangeDetectorRef }
    ]; };
    return PngAlertComponent;
}(BaseComponent));
export { PngAlertComponent };
if (false) {
    /** @type {?} */
    PngAlertComponent.prototype.alert;
    /**
     * @type {?}
     * @private
     */
    PngAlertComponent.prototype.defaultNotifyType;
    /**
     * @type {?}
     * @private
     */
    PngAlertComponent.prototype.messageService;
    /**
     * @type {?}
     * @private
     */
    PngAlertComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9ub3RpZnkuYWxlcnQvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBUyxNQUFNLGVBQWUsQ0FBQztBQUM1RixPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxXQUFXLEVBQWMsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdEYsT0FBTyxFQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDbkQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUUzQyxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7O0FBR3RDLE1BQU0sS0FBTyxtQkFBbUIsR0FBZTtJQUM3QyxTQUFTLEVBQUUsSUFBSTtJQUNmLFFBQVEsRUFBRSxJQUFJO0lBQ2QsU0FBUyxFQUFFLElBQUk7SUFDZixRQUFRLEVBQUUsSUFBSTtJQUNkLFVBQVUsRUFBRSxJQUFJO0lBQ2hCLFFBQVEsRUFBRSxVQUFVLENBQUMsUUFBUTtDQUM5QjtBQUVEO0lBWXVDLDZDQUFhO0lBTWxELDJCQUFvQixjQUE4QixFQUFVLEVBQXFCO1FBQWpGLFlBQ0UsaUJBQU8sU0FNUjtRQVBtQixvQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFBVSxRQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUUvRSxLQUFJLENBQUMsS0FBSyx3QkFDTCxtQkFBbUIsRUFDbkIsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQ3ZDLENBQUM7UUFDRixLQUFJLENBQUMsaUJBQWlCLEdBQUcsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDOztJQUM5RSxDQUFDOzs7O0lBRUQsb0NBQVE7OztJQUFSO1FBQUEsaUJBVUM7UUFUQyxJQUFJLENBQUMsY0FBYyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQzthQUN6RCxJQUFJLENBQ0gsTUFBTSxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQXhCLENBQXdCLENBQUMsRUFDMUMsTUFBTSxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLEtBQUksQ0FBQyxpQkFBaUIsS0FBSyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQWpHLENBQWlHLENBQUMsQ0FDcEgsQ0FBQyxTQUFTLENBQUMsVUFBQSxNQUFNOztnQkFDVixLQUFLLEdBQUcsS0FBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUM7WUFDekMsS0FBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0IsS0FBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Ozs7O0lBRUQsMENBQWM7Ozs7SUFBZCxVQUFlLE1BQWtCO1FBQy9CLE9BQU87WUFDTCxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUc7WUFDZixRQUFRLEVBQUUsTUFBTSxDQUFDLEtBQUssSUFBSSxXQUFXLENBQUMsSUFBSTtZQUMxQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEtBQUs7WUFDckIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPO1lBQ3RCLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxJQUFJLEtBQUs7WUFDOUIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDLEtBQUssS0FBSyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRO1lBQzdILFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxJQUFJLElBQUk7WUFDakMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1NBQ2xCLENBQUM7SUFDSixDQUFDOztnQkFsREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxXQUFXO29CQUNyQixRQUFRLEVBQUUseU1BTVQ7b0JBQ0QsU0FBUyxFQUFFLENBQUMsY0FBYyxDQUFDO29CQUMzQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7Ozs7Z0JBekJPLGNBQWM7Z0JBSlcsaUJBQWlCOztJQXNFbEQsd0JBQUM7Q0FBQSxBQXBERCxDQVl1QyxhQUFhLEdBd0NuRDtTQXhDWSxpQkFBaUI7OztJQUU1QixrQ0FBa0I7Ozs7O0lBRWxCLDhDQUFzQzs7Ozs7SUFFMUIsMkNBQXNDOzs7OztJQUFFLCtCQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Jhc2VDb21wb25lbnR9IGZyb20gJ0Blci9jb3JlJztcbmltcG9ydCB7Tm90aWZ5TGV2ZWwsIE5vdGlmeVByb3AsIE5vdGlmeVR5cGUsIFN0YXRlTmFtZXMsIFVpUG9zaXRpb259IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge0NvbmZpZ1V0aWxzLCBTdGF0ZXNVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7TWVzc2FnZVNlcnZpY2V9IGZyb20gJ3ByaW1lbmcvYXBpJztcbmltcG9ydCB7TWVzc2FnZX0gZnJvbSAncHJpbWVuZy9jb21wb25lbnRzL2NvbW1vbi9tZXNzYWdlJztcbmltcG9ydCB7ZmlsdGVyfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQUxFUlRfUFJPUFM6IE5vdGlmeVByb3AgPSB7XG4gIGFuaW1hdGlvbjogdHJ1ZSxcbiAgZHVyYXRpb246IDMwMDAsXG4gIGltbXV0YWJsZTogdHJ1ZSxcbiAgY2xvc2FibGU6IHRydWUsXG4gIGF1dG9aSW5kZXg6IHRydWUsXG4gIHBvc2l0aW9uOiBVaVBvc2l0aW9uLnJpZ2h0VG9wXG59O1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwbmctYWxlcnQnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxwLXRvYXN0IFtzdHlsZUNsYXNzXT1cImFsZXJ0LnN0eWxlQ2xhc3NcIlxuICAgICAgICAgICAgIFtzdHlsZV09XCJhbGVydC5zdHlsZVwiXG4gICAgICAgICAgICAgW3Bvc2l0aW9uXT1cImFsZXJ0LnBvc2l0aW9uXCJcbiAgICAgICAgICAgICBbYXV0b1pJbmRleF09XCJhbGVydC5hdXRvWkluZGV4XCJcbiAgICA+PC9wLXRvYXN0PlxuICBgLFxuICBwcm92aWRlcnM6IFtNZXNzYWdlU2VydmljZV0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFBuZ0FsZXJ0Q29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgYWxlcnQ6IE5vdGlmeVByb3A7XG5cbiAgcHJpdmF0ZSBkZWZhdWx0Tm90aWZ5VHlwZTogTm90aWZ5VHlwZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1lc3NhZ2VTZXJ2aWNlOiBNZXNzYWdlU2VydmljZSwgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuYWxlcnQgPSB7XG4gICAgICAuLi5ERUZBVUxUX0FMRVJUX1BST1BTLFxuICAgICAgLi4uQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkuYWxlcnQgfHwge31cbiAgICB9O1xuICAgIHRoaXMuZGVmYXVsdE5vdGlmeVR5cGUgPSBDb25maWdVdGlscy5nZXRDb25maWcoKS5ub3RpZnkgfHwgTm90aWZ5VHlwZS5BTEVSVDtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuJHN1YnNjcmlwdGlvbnMgPSBTdGF0ZXNVdGlscy5vYnNlcnZlKFN0YXRlTmFtZXMubm90aWZ5KVxuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbHRlcihub3RpZnkgPT4gbm90aWZ5ICYmIG5vdGlmeS5tZXNzYWdlKSxcbiAgICAgICAgZmlsdGVyKG5vdGlmeSA9PiBub3RpZnkudHlwZSA9PT0gTm90aWZ5VHlwZS5BTEVSVCB8fCAoIW5vdGlmeS50eXBlICYmIHRoaXMuZGVmYXVsdE5vdGlmeVR5cGUgPT09IE5vdGlmeVR5cGUuQUxFUlQpKVxuICAgICAgKS5zdWJzY3JpYmUobm90aWZ5ID0+IHtcbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLmdldE5vdGlmeU1vZGVsKG5vdGlmeSk7XG4gICAgICAgIHRoaXMubWVzc2FnZVNlcnZpY2UuYWRkKG1vZGVsKTtcbiAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGdldE5vdGlmeU1vZGVsKG5vdGlmeTogTm90aWZ5UHJvcCk6IE1lc3NhZ2Uge1xuICAgIHJldHVybiB7XG4gICAgICBrZXk6IG5vdGlmeS5rZXksXG4gICAgICBzZXZlcml0eTogbm90aWZ5LmxldmVsIHx8IE5vdGlmeUxldmVsLklORk8sXG4gICAgICBzdW1tYXJ5OiBub3RpZnkudGl0bGUsXG4gICAgICBkZXRhaWw6IG5vdGlmeS5tZXNzYWdlLFxuICAgICAgc3RpY2t5OiBub3RpZnkuc3RpY2t5IHx8IGZhbHNlLFxuICAgICAgbGlmZTogbm90aWZ5LmR1cmF0aW9uIHx8IG5vdGlmeS5sZXZlbCA9PT0gTm90aWZ5TGV2ZWwuRVJST1IgPyBERUZBVUxUX0FMRVJUX1BST1BTLmR1cmF0aW9uICogMiA6IERFRkFVTFRfQUxFUlRfUFJPUFMuZHVyYXRpb24sXG4gICAgICBjbG9zYWJsZTogbm90aWZ5LmNsb3NhYmxlIHx8IHRydWUsXG4gICAgICBkYXRhOiBub3RpZnkuZGF0YVxuICAgIH07XG4gIH1cblxufVxuXG5cbiJdfQ==