/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DataAwareControlWrapperComponent } from '@er/core';
import { DEFAULT_PNG_MULTI_SELECT_PROPS } from './type';
var PngMultiSelectComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngMultiSelectComponent, _super);
    function PngMultiSelectComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.$defaultProps = DEFAULT_PNG_MULTI_SELECT_PROPS;
        return _this;
    }
    PngMultiSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-multi-select',
                    template: "\n    <p-multiSelect\n      [(ngModel)]=\"value\"\n      erPropsBind\n      [props]=\"$props\"\n      [context]=\"ctx\"\n      [erApiData]=\"apiDataProps\"\n      [options]=\"data$|async|erDataItems:$props.$ext.dataItemProps\"\n      (onBlur)=\"updateTouch()\"\n    >\n      <ng-template let-item pTemplate=\"item\">\n        <er-data-item [customerTpl]=\"template('_')\"\n                         [item]=\"item.data\"\n                         [props]=\"$props.$ext.dataItemProps\">\n        </er-data-item>\n      </ng-template>\n    </p-multiSelect>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngMultiSelectComponent; }),
                            multi: true
                        }]
                }] }
    ];
    return PngMultiSelectComponent;
}(DataAwareControlWrapperComponent));
export { PngMultiSelectComponent };
if (false) {
    /** @type {?} */
    PngMultiSelectComponent.prototype.$defaultProps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9tdWx0aS1zZWxlY3QvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFDLGdDQUFnQyxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQzFELE9BQU8sRUFBQyw4QkFBOEIsRUFBc0IsTUFBTSxRQUFRLENBQUM7QUFJM0U7SUEyQjZDLG1EQUFxRDtJQTNCbEc7UUFBQSxxRUErQkM7UUFGQyxtQkFBYSxHQUFHLDhCQUE4QixDQUFDOztJQUVqRCxDQUFDOztnQkEvQkEsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRSw4aUJBaUJUO29CQUNELFNBQVMsRUFBRSxDQUFDOzRCQUNWLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLHVCQUF1QixFQUF2QixDQUF1QixDQUFDOzRCQUN0RCxLQUFLLEVBQUUsSUFBSTt5QkFDWixDQUFDO2lCQUNIOztJQU1ELDhCQUFDO0NBQUEsQUEvQkQsQ0EyQjZDLGdDQUFnQyxHQUk1RTtTQUpZLHVCQUF1Qjs7O0lBRWxDLGdEQUErQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBmb3J3YXJkUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TkdfVkFMVUVfQUNDRVNTT1J9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7RGF0YUF3YXJlQ29udHJvbFdyYXBwZXJDb21wb25lbnR9IGZyb20gJ0Blci9jb3JlJztcbmltcG9ydCB7REVGQVVMVF9QTkdfTVVMVElfU0VMRUNUX1BST1BTLCBQbmdNdWx0aVNlbGVjdFByb3BzfSBmcm9tICcuL3R5cGUnO1xuXG5leHBvcnQge1BuZ011bHRpU2VsZWN0UHJvcHN9IGZyb20gJy4vdHlwZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BuZy1tdWx0aS1zZWxlY3QnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxwLW11bHRpU2VsZWN0XG4gICAgICBbKG5nTW9kZWwpXT1cInZhbHVlXCJcbiAgICAgIGVyUHJvcHNCaW5kXG4gICAgICBbcHJvcHNdPVwiJHByb3BzXCJcbiAgICAgIFtjb250ZXh0XT1cImN0eFwiXG4gICAgICBbZXJBcGlEYXRhXT1cImFwaURhdGFQcm9wc1wiXG4gICAgICBbb3B0aW9uc109XCJkYXRhJHxhc3luY3xlckRhdGFJdGVtczokcHJvcHMuJGV4dC5kYXRhSXRlbVByb3BzXCJcbiAgICAgIChvbkJsdXIpPVwidXBkYXRlVG91Y2goKVwiXG4gICAgPlxuICAgICAgPG5nLXRlbXBsYXRlIGxldC1pdGVtIHBUZW1wbGF0ZT1cIml0ZW1cIj5cbiAgICAgICAgPGVyLWRhdGEtaXRlbSBbY3VzdG9tZXJUcGxdPVwidGVtcGxhdGUoJ18nKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgW2l0ZW1dPVwiaXRlbS5kYXRhXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICBbcHJvcHNdPVwiJHByb3BzLiRleHQuZGF0YUl0ZW1Qcm9wc1wiPlxuICAgICAgICA8L2VyLWRhdGEtaXRlbT5cbiAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgPC9wLW11bHRpU2VsZWN0PlxuICBgLFxuICBwcm92aWRlcnM6IFt7XG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gUG5nTXVsdGlTZWxlY3RDb21wb25lbnQpLFxuICAgIG11bHRpOiB0cnVlXG4gIH1dXG59KVxuXG5leHBvcnQgY2xhc3MgUG5nTXVsdGlTZWxlY3RDb21wb25lbnQgZXh0ZW5kcyBEYXRhQXdhcmVDb250cm9sV3JhcHBlckNvbXBvbmVudDxQbmdNdWx0aVNlbGVjdFByb3BzPiB7XG5cbiAgJGRlZmF1bHRQcm9wcyA9IERFRkFVTFRfUE5HX01VTFRJX1NFTEVDVF9QUk9QUztcblxufVxuIl19