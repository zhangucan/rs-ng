/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, forwardRef, Input, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DomSanitizer } from '@angular/platform-browser';
import { ControlWrapperComponent, HttpUtils, LogUtils } from '@er/core';
import { ImageToolsService } from '@er/image-editor';
import { HttpMethod, NotifyLevel, StateNames } from '@er/types';
import { CommonsUtils, ConfigUtils, StatesUtils } from '@er/utils';
import { FileUpload } from 'primeng/primeng';
import { BehaviorSubject, Subject } from 'rxjs';
import { DEFAULT_PNG_FILE_UPLOAD_PROPS } from './type';
var PngFileUploadComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngFileUploadComponent, _super);
    function PngFileUploadComponent(imageToolsService, sanitizer, cd) {
        var _this = _super.call(this) || this;
        _this.imageToolsService = imageToolsService;
        _this.sanitizer = sanitizer;
        _this.cd = cd;
        _this.selectedFiles$ = new BehaviorSubject([]);
        _this.uploadedFiles = [];
        _this.$defaultProps = DEFAULT_PNG_FILE_UPLOAD_PROPS;
        _this.showUpload = true;
        _this.uploadProgress$ = new Subject();
        _this.processing$ = new Subject();
        _this.fileAttrs = {};
        return _this;
    }
    Object.defineProperty(PngFileUploadComponent.prototype, "uploadValue", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.value) {
                return this.value;
            }
            return CommonsUtils.getArrayValue(this.value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} file
     * @return {?}
     */
    PngFileUploadComponent.prototype.fileIcon = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var ext = (this.fileUpload.getFileExtension(file) || '').toLowerCase();
        ext = ext.substring(1, 4);
        /** @type {?} */
        var exts = ['txt', 'doc', 'xls', '.pdf', '.zip'];
        /** @type {?} */
        var icon;
        switch (ext) {
            case 'txt':
                icon = 'text';
                break;
            case 'xls':
                icon = 'excel';
                break;
            case 'doc':
                icon = 'word';
                break;
            case 'zip':
                icon = 'zip';
                break;
            case 'pdf':
                icon = 'pdf';
                break;
            case 'mp3':
                icon = 'audio';
                break;
            case 'mp4':
                icon = 'video';
                break;
            default:
                icon = exts.indexOf(ext) >= 0 ? ext : undefined;
        }
        return icon ? "file-" + icon + "-o" : 'file-o';
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PngFileUploadComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @param {?} model
     * @return {?}
     */
    PngFileUploadComponent.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        _super.prototype.writeValue.call(this, model);
        this.showUpload = !((model && this.$props && !this.$props.multiple));
        this.cd.detectChanges();
    };
    /**
     * @return {?}
     */
    PngFileUploadComponent.prototype.onPropsInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.onPropsInit.call(this);
        if (!this.$props.url) {
            this.$props.url = "" + ConfigUtils.getConfig().api.servers.image.uri;
            LogUtils.debug(this, '文件上传路径', this.$props.url);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngFileUploadComponent.prototype.onSelect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var files = event.files;
        var _loop_1 = function (i) {
            /** @type {?} */
            var file = files[i];
            this_1.processing$.next(true);
            this_1.imageToolsService.resizeImage(file, this_1.$props.$ext.maxWidth, this_1.$props.$ext.maxHeight).subscribe(function (result) {
                _this.imageToolsService.compressImage(result, _this.$props.$ext.maxSize).subscribe(function (final) {
                    final['objectURL'] = _this.sanitizer.bypassSecurityTrustUrl((URL.createObjectURL(final)));
                    _this.selectedFiles$.next(_this.selectedFiles$.value.concat(final));
                    _this.processing$.next(false);
                    _this.fileUpload.files = _this.fileUpload.files.map(function (f) { return f.name === file.name ? final : f; });
                });
            });
        };
        var this_1 = this;
        for (var i = 0; i < files.length; i++) {
            _loop_1(i);
        }
    };
    /**
     * @param {?} event
     * @param {?} i
     * @return {?}
     */
    PngFileUploadComponent.prototype.delete = /**
     * @param {?} event
     * @param {?} i
     * @return {?}
     */
    function (event, i) {
        /** @type {?} */
        var files = this.selectedFiles$.value;
        files.splice(i, 1);
        this.selectedFiles$.next(files);
        this.fileUpload.remove(event, i);
    };
    /**
     * @param {?} fileId
     * @return {?}
     */
    PngFileUploadComponent.prototype.remove = /**
     * @param {?} fileId
     * @return {?}
     */
    function (fileId) {
        var _this = this;
        this.$subscriptions = HttpUtils.request({
            uri: ConfigUtils.getConfig().api.servers.image.uri + "/" + fileId,
            method: HttpMethod.DELETE
        }).subscribe(function (resp) {
            if (resp && resp.success) {
                if (_this.$props.multiple) {
                    _this.value = _this.value.filter(function (v) { return v !== fileId; });
                }
                else {
                    _this.value = undefined;
                }
                _this.showUpload = true;
                _this.cd.detectChanges();
            }
        });
    };
    /**
     * @param {?} event
     * @param {?} file
     * @return {?}
     */
    PngFileUploadComponent.prototype.setFileAttr = /**
     * @param {?} event
     * @param {?} file
     * @return {?}
     */
    function (event, file) {
        this.fileAttrs[file.name] = event.target.value;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngFileUploadComponent.prototype.onBeforeSend = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var formData = event.formData;
        formData.append(this.$props.$ext.attrsName, "waterMark=" + this.$props.$ext.waterMark);
        formData.append(this.$props.$ext.attrsName, "smallSize=" + this.$props.$ext.smallSize);
        formData.append(this.$props.$ext.attrsName, "storeTo=" + this.$props.$ext.storeTo);
        if (!CommonsUtils.isEmpty(this.fileAttrs)) {
            Object.keys(this.fileAttrs).forEach(function (key) {
                formData.append(_this.$props.$ext.attrsName, key + "=" + _this.fileAttrs[key]);
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngFileUploadComponent.prototype.onProgress = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.uploadProgress$.next(event.progress);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngFileUploadComponent.prototype.onUploadSuccess = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(event.files), _c = _b.next(); !_c.done; _c = _b.next()) {
                var file = _c.value;
                this.uploadedFiles.push(file);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        /** @type {?} */
        var response = JSON.parse(event.xhr.responseText);
        if (response.success) {
            StatesUtils.create(StateNames.notify, {
                message: '文件上传成功',
                title: '提示'
            });
            if (this.$props.multiple) {
                this.value = tslib_1.__spread(this.value || [], Object.keys(response.content).map(function (k) { return response.content[k]; }));
            }
            else {
                this.value = Object.keys(response.content).map(function (k) { return response.content[k]; })[0];
                this.showUpload = false;
            }
            this.fileAttrs = {};
            this.selectedFiles$.next([]);
            this.uploadProgress$.next(undefined);
            this.cd.detectChanges();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngFileUploadComponent.prototype.onUploadFailed = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var response = JSON.parse(event.xhr.responseText);
        StatesUtils.create(StateNames.notify, {
            level: NotifyLevel.ERROR,
            message: response.message,
            title: '文件上传失败'
        });
        this.uploadProgress$.next(undefined);
    };
    PngFileUploadComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-file-upload',
                    template: "\n    <ng-container *ngIf=\"showUpload\">\n      <p-fileUpload\n        #fileUpload\n        erPropsBind\n        [props]=\"$props || {}\"\n        [context]=\"ctx\"\n        (onSelect)=\"onSelect($event)\"\n        (onUpload)=\"onUploadSuccess($event)\"\n        (onError)=\"onUploadFailed($event)\"\n        (onProgress)=\"onProgress($event)\"\n        (onBeforeSend)=\"onBeforeSend($event)\"\n      >\n        <ng-template pTemplate=\"toolbar\">\n          <div *ngIf=\"uploadProgress$|async as uploadProgress\">\n            <p-progressBar [value]=\"uploadProgress\"></p-progressBar>\n          </div>\n        </ng-template>\n        <ng-template pTemplate=\"file\"></ng-template>\n        <ng-template pTemplate=\"content\">\n          <span class=\"text-muted small\" *ngIf=\"!fileUpload.hasFiles()\">\u60A8\u4E5F\u53EF\u4EE5\u62D6\u52A8\u6587\u4EF6\u5230\u8FD9\u91CC</span>\n        </ng-template>\n      </p-fileUpload>\n      <div *ngIf=\"processing$|async\"><i class=\"fa fa-spin fa-gears\"></i>\u6B63\u5728\u5904\u7406\u56FE\u7247</div>\n      <div class=\"ui-fileupload-row\" *ngFor=\"let file of selectedFiles$|async; let i = index\">\n      <div>\n        <span class=\"badge badge-info\">{{i + 1}}</span>\n      </div>\n      <div>\n        <png-image *ngIf=\"fileUpload.isImage(file)\"\n                   [src]=\"file['objectURL']\" [imageStyle]=\"{width: $props.previewWidth + 'px'}\">\n        </png-image>\n        <span *ngIf=\"!fileUpload.isImage(file)\" class=\"fa fa-2x text-primary fa-{{fileIcon(file)}}\"></span>\n      </div>\n      <div>{{file.name}}</div>\n      <div>{{fileUpload.formatSize(file.size)}}<span class=\"text-danger\">(\u538B\u7F29\u540E)</span></div>\n      <div>\n        <input pInputText placeholder=\"\u56FE\u7247\u63CF\u8FF0\u4FE1\u606F\" size=\"50\" (change)=\"setFileAttr($event,file)\"/>\n      </div>\n      <div>\n        <button type=\"button\" icon=\"pi pi-times white\" pButton (click)=\"delete($event,i)\"></button>\n      </div>\n    </div>\n    </ng-container>\n\n    <div *ngIf=\"uploadValue && uploadValue.length>0\">\n      <div style=\"text-decoration: underline;font-weight: bold\">\u5DF2\u4E0A\u4F20\u6587\u4EF6\uFF1A</div>\n      <div class=\"ui-fileupload-row\" *ngFor=\"let fileId of uploadValue\">\n        <div>\n          <png-image [fileId]=\"fileId\" size=\"small\"\n                     styleClass=\"d-flex align-items-center\"\n                     imageStyleClass=\"mr-3\"\n                     [imageStyle]=\"{width:$props.previewWidth}\">\n          </png-image>\n        </div>\n        <div>\n          <button type=\"button\" icon=\"pi pi-times white\" pButton (click)=\"remove(fileId)\"></button>\n        </div>\n      </div>\n    </div>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngFileUploadComponent; }),
                            multi: true
                        }]
                }] }
    ];
    /** @nocollapse */
    PngFileUploadComponent.ctorParameters = function () { return [
        { type: ImageToolsService },
        { type: DomSanitizer },
        { type: ChangeDetectorRef }
    ]; };
    PngFileUploadComponent.propDecorators = {
        maxSize: [{ type: Input }],
        fileUpload: [{ type: ViewChild, args: ['fileUpload',] }]
    };
    return PngFileUploadComponent;
}(ControlWrapperComponent));
export { PngFileUploadComponent };
if (false) {
    /** @type {?} */
    PngFileUploadComponent.prototype.maxSize;
    /** @type {?} */
    PngFileUploadComponent.prototype.selectedFiles$;
    /** @type {?} */
    PngFileUploadComponent.prototype.uploadedFiles;
    /** @type {?} */
    PngFileUploadComponent.prototype.$defaultProps;
    /** @type {?} */
    PngFileUploadComponent.prototype.currentFile;
    /** @type {?} */
    PngFileUploadComponent.prototype.showUpload;
    /** @type {?} */
    PngFileUploadComponent.prototype.uploadProgress$;
    /** @type {?} */
    PngFileUploadComponent.prototype.processing$;
    /** @type {?} */
    PngFileUploadComponent.prototype.fileUpload;
    /** @type {?} */
    PngFileUploadComponent.prototype.fileAttrs;
    /**
     * @type {?}
     * @private
     */
    PngFileUploadComponent.prototype.imageToolsService;
    /** @type {?} */
    PngFileUploadComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    PngFileUploadComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,