/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';
import { BaseComponent } from '@er/core';
import { AggMethodsProps } from '@er/types';
import { CommonsUtils } from '@er/utils';
import { PngTableComponent } from '../table/component';
var PngTableSummaryComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngTableSummaryComponent, _super);
    function PngTableSummaryComponent(pngTable, cd) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.cd = cd;
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    PngTableSummaryComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.aggValues) {
            if (changes.aggValues.currentValue) {
                this.colAggValues = {};
                Object.keys(changes.aggValues.currentValue)
                    .forEach(function (key) {
                    /** @type {?} */
                    var name = key;
                    if (key.indexOf('-') > 0) {
                        name = key.substr(0, key.indexOf('-'));
                    }
                    /** @type {?} */
                    var type = key.substr(key.indexOf('-') + 1);
                    /** @type {?} */
                    var values = _this.colAggValues[name];
                    if (!values) {
                        values = [];
                        _this.colAggValues[name] = values;
                    }
                    /** @type {?} */
                    var agg = {};
                    agg['type'] = AggMethodsProps[type] && AggMethodsProps[type].label;
                    if (CommonsUtils.isArray(_this.aggValues[key])) {
                        agg['values'] = _this.aggValues[key];
                    }
                    else {
                        agg['value'] = _this.aggValues[key];
                    }
                    values.push(agg);
                });
            }
            else {
                this.colAggValues = undefined;
            }
            this.cd.detectChanges();
        }
    };
    /**
     * @param {?} column
     * @return {?}
     */
    PngTableSummaryComponent.prototype.cellClass = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return CommonsUtils.getValue(column.aggCellClass, column);
    };
    /**
     * @param {?} column
     * @return {?}
     */
    PngTableSummaryComponent.prototype.cellStyle = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return CommonsUtils.getValue(column.aggCellStyle, column);
    };
    PngTableSummaryComponent.decorators = [
        { type: Component, args: [{
                    selector: '[png-table-summary]',
                    template: "\n    <ng-container *ngIf=\"customerTpl;else default\">\n      <ng-container *ngTemplateOutlet=\"customerTpl;context:{$implicit:aggValues,columns:columns,context:pngTable}\"></ng-container>\n    </ng-container>\n    <ng-template #default>\n      <th *ngIf=\"pngTable.$props.$ext.rowExpandable\" class=\"col-expandable col-summary\"></th>\n      <th *ngIf=\"pngTable.$props.$ext.hasRowCheckbox\" class=\"col-checkbox col-summary\"></th>\n      <th *ngIf=\"pngTable.$props.$ext.hasRowRadioButton\" class=\"col-radio col-summary\"></th>\n      <ng-container *ngIf=\"colAggValues\">\n        <th *ngFor=\"let col of columns\" [width]=\"col.width\" class=\"text-right col-summary col-summary-{{col.key}}\">\n          <ng-container *ngFor=\"let agg of colAggValues[col.key]\">\n            <ng-container *ngIf=\"agg.value\">\n              <div [ngClass]=\"cellClass(col)\" style=\"font-size: 0.8em\"\n                   [ngStyle]=\"cellStyle(col)\">{{agg.type}}: {{agg.value | floor: 2}}\n              </div>\n            </ng-container>\n            <ng-container *ngIf=\"agg.values\">\n              <div [ngClass]=\"cellClass(col)\" style=\"font-size: 0.8em\"\n                   [ngStyle]=\"cellStyle(col)\"> {{agg.type}}:\n              </div>\n              <ul>\n                <ng-container *ngFor=\"let data of agg.values\">\n                  <li class=\"border-bottom\"><span class=\"\">{{data.label}}:</span><span class=\"badge badge-pill btn-info\">{{data.value}}</span></li>\n                </ng-container>\n              </ul>\n            </ng-container>\n          </ng-container>\n        </th>\n      </ng-container>\n    </ng-template>\n\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngTableSummaryComponent.ctorParameters = function () { return [
        { type: PngTableComponent },
        { type: ChangeDetectorRef }
    ]; };
    PngTableSummaryComponent.propDecorators = {
        columns: [{ type: Input }],
        aggValues: [{ type: Input }]
    };
    return PngTableSummaryComponent;
}(BaseComponent));
export { PngTableSummaryComponent };
if (false) {
    /** @type {?} */
    PngTableSummaryComponent.prototype.columns;
    /** @type {?} */
    PngTableSummaryComponent.prototype.aggValues;
    /** @type {?} */
    PngTableSummaryComponent.prototype.colAggValues;
    /** @type {?} */
    PngTableSummaryComponent.prototype.pngTable;
    /**
     * @type {?}
     * @protected
     */
    PngTableSummaryComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YWJsZS9jb21wb25lbnQvc3VtbWFyeS9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBMkIsTUFBTSxlQUFlLENBQUM7QUFDckgsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUN2QyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQzFDLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFdkMsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFckQ7SUFvQzhDLG9EQUFhO0lBUXpELGtDQUFtQixRQUEyQixFQUFZLEVBQXFCO1FBQS9FLFlBQ0UsaUJBQU8sU0FDUjtRQUZrQixjQUFRLEdBQVIsUUFBUSxDQUFtQjtRQUFZLFFBQUUsR0FBRixFQUFFLENBQW1COztJQUUvRSxDQUFDOzs7OztJQUVELDhDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUFsQyxpQkE4QkM7UUE3QkMsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO1lBQ3JCLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO2dCQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO3FCQUN4QyxPQUFPLENBQUMsVUFBQSxHQUFHOzt3QkFDTixJQUFJLEdBQUcsR0FBRztvQkFDZCxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO3dCQUN4QixJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3FCQUN4Qzs7d0JBQ0ssSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7O3dCQUN6QyxNQUFNLEdBQUcsS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7b0JBQ3BDLElBQUksQ0FBQyxNQUFNLEVBQUU7d0JBQ1gsTUFBTSxHQUFHLEVBQUUsQ0FBQzt3QkFDWixLQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQztxQkFDbEM7O3dCQUNLLEdBQUcsR0FBRyxFQUFFO29CQUNkLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztvQkFDbkUsSUFBSSxZQUFZLENBQUMsT0FBTyxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTt3QkFDN0MsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7cUJBQ3JDO3lCQUFNO3dCQUNMLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxLQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUNwQztvQkFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQixDQUFDLENBQUMsQ0FBQzthQUNOO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO2FBQy9CO1lBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN6QjtJQUNILENBQUM7Ozs7O0lBRUQsNENBQVM7Ozs7SUFBVCxVQUFVLE1BQU07UUFDZCxPQUFPLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM1RCxDQUFDOzs7OztJQUVELDRDQUFTOzs7O0lBQVQsVUFBVSxNQUFNO1FBQ2QsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDNUQsQ0FBQzs7Z0JBdEZGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUscUJBQXFCO29CQUMvQixRQUFRLEVBQUUsOG5EQStCVDtvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7Ozs7Z0JBckNPLGlCQUFpQjtnQkFMUSxpQkFBaUI7OzswQkE2Qy9DLEtBQUs7NEJBRUwsS0FBSzs7SUErQ1IsK0JBQUM7Q0FBQSxBQXZGRCxDQW9DOEMsYUFBYSxHQW1EMUQ7U0FuRFksd0JBQXdCOzs7SUFFbkMsMkNBQXNDOztJQUV0Qyw2Q0FBeUI7O0lBRXpCLGdEQUFpQjs7SUFFTCw0Q0FBa0M7Ozs7O0lBQUUsc0NBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlc30gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Jhc2VDb21wb25lbnR9IGZyb20gJ0Blci9jb3JlJztcbmltcG9ydCB7QWdnTWV0aG9kc1Byb3BzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb21tb25zVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge1BuZ1RhYmxlQ29sdW1uUHJvcHN9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7UG5nVGFibGVDb21wb25lbnR9IGZyb20gJy4uL3RhYmxlL2NvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1twbmctdGFibGUtc3VtbWFyeV0nLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJjdXN0b21lclRwbDtlbHNlIGRlZmF1bHRcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJjdXN0b21lclRwbDtjb250ZXh0OnskaW1wbGljaXQ6YWdnVmFsdWVzLGNvbHVtbnM6Y29sdW1ucyxjb250ZXh0OnBuZ1RhYmxlfVwiPjwvbmctY29udGFpbmVyPlxuICAgIDwvbmctY29udGFpbmVyPlxuICAgIDxuZy10ZW1wbGF0ZSAjZGVmYXVsdD5cbiAgICAgIDx0aCAqbmdJZj1cInBuZ1RhYmxlLiRwcm9wcy4kZXh0LnJvd0V4cGFuZGFibGVcIiBjbGFzcz1cImNvbC1leHBhbmRhYmxlIGNvbC1zdW1tYXJ5XCI+PC90aD5cbiAgICAgIDx0aCAqbmdJZj1cInBuZ1RhYmxlLiRwcm9wcy4kZXh0Lmhhc1Jvd0NoZWNrYm94XCIgY2xhc3M9XCJjb2wtY2hlY2tib3ggY29sLXN1bW1hcnlcIj48L3RoPlxuICAgICAgPHRoICpuZ0lmPVwicG5nVGFibGUuJHByb3BzLiRleHQuaGFzUm93UmFkaW9CdXR0b25cIiBjbGFzcz1cImNvbC1yYWRpbyBjb2wtc3VtbWFyeVwiPjwvdGg+XG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiY29sQWdnVmFsdWVzXCI+XG4gICAgICAgIDx0aCAqbmdGb3I9XCJsZXQgY29sIG9mIGNvbHVtbnNcIiBbd2lkdGhdPVwiY29sLndpZHRoXCIgY2xhc3M9XCJ0ZXh0LXJpZ2h0IGNvbC1zdW1tYXJ5IGNvbC1zdW1tYXJ5LXt7Y29sLmtleX19XCI+XG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgYWdnIG9mIGNvbEFnZ1ZhbHVlc1tjb2wua2V5XVwiPlxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImFnZy52YWx1ZVwiPlxuICAgICAgICAgICAgICA8ZGl2IFtuZ0NsYXNzXT1cImNlbGxDbGFzcyhjb2wpXCIgc3R5bGU9XCJmb250LXNpemU6IDAuOGVtXCJcbiAgICAgICAgICAgICAgICAgICBbbmdTdHlsZV09XCJjZWxsU3R5bGUoY29sKVwiPnt7YWdnLnR5cGV9fToge3thZ2cudmFsdWUgfCBmbG9vcjogMn19XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiYWdnLnZhbHVlc1wiPlxuICAgICAgICAgICAgICA8ZGl2IFtuZ0NsYXNzXT1cImNlbGxDbGFzcyhjb2wpXCIgc3R5bGU9XCJmb250LXNpemU6IDAuOGVtXCJcbiAgICAgICAgICAgICAgICAgICBbbmdTdHlsZV09XCJjZWxsU3R5bGUoY29sKVwiPiB7e2FnZy50eXBlfX06XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgZGF0YSBvZiBhZ2cudmFsdWVzXCI+XG4gICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJib3JkZXItYm90dG9tXCI+PHNwYW4gY2xhc3M9XCJcIj57e2RhdGEubGFiZWx9fTo8L3NwYW4+PHNwYW4gY2xhc3M9XCJiYWRnZSBiYWRnZS1waWxsIGJ0bi1pbmZvXCI+e3tkYXRhLnZhbHVlfX08L3NwYW4+PC9saT5cbiAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8L3RoPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC9uZy10ZW1wbGF0ZT5cblxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBQbmdUYWJsZVN1bW1hcnlDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICBASW5wdXQoKSBjb2x1bW5zOiBQbmdUYWJsZUNvbHVtblByb3BzO1xuXG4gIEBJbnB1dCgpIGFnZ1ZhbHVlczoge31bXTtcblxuICBjb2xBZ2dWYWx1ZXM6IHt9O1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwbmdUYWJsZTogUG5nVGFibGVDb21wb25lbnQsIHByb3RlY3RlZCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmFnZ1ZhbHVlcykge1xuICAgICAgaWYgKGNoYW5nZXMuYWdnVmFsdWVzLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICB0aGlzLmNvbEFnZ1ZhbHVlcyA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhjaGFuZ2VzLmFnZ1ZhbHVlcy5jdXJyZW50VmFsdWUpXG4gICAgICAgICAgLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIGxldCBuYW1lID0ga2V5O1xuICAgICAgICAgICAgaWYgKGtleS5pbmRleE9mKCctJykgPiAwKSB7XG4gICAgICAgICAgICAgIG5hbWUgPSBrZXkuc3Vic3RyKDAsIGtleS5pbmRleE9mKCctJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IGtleS5zdWJzdHIoa2V5LmluZGV4T2YoJy0nKSArIDEpO1xuICAgICAgICAgICAgbGV0IHZhbHVlcyA9IHRoaXMuY29sQWdnVmFsdWVzW25hbWVdO1xuICAgICAgICAgICAgaWYgKCF2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgdmFsdWVzID0gW107XG4gICAgICAgICAgICAgIHRoaXMuY29sQWdnVmFsdWVzW25hbWVdID0gdmFsdWVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYWdnID0ge307XG4gICAgICAgICAgICBhZ2dbJ3R5cGUnXSA9IEFnZ01ldGhvZHNQcm9wc1t0eXBlXSAmJiBBZ2dNZXRob2RzUHJvcHNbdHlwZV0ubGFiZWw7XG4gICAgICAgICAgICBpZiAoQ29tbW9uc1V0aWxzLmlzQXJyYXkodGhpcy5hZ2dWYWx1ZXNba2V5XSkpIHtcbiAgICAgICAgICAgICAgYWdnWyd2YWx1ZXMnXSA9IHRoaXMuYWdnVmFsdWVzW2tleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhZ2dbJ3ZhbHVlJ10gPSB0aGlzLmFnZ1ZhbHVlc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWVzLnB1c2goYWdnKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29sQWdnVmFsdWVzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuICB9XG5cbiAgY2VsbENsYXNzKGNvbHVtbikge1xuICAgIHJldHVybiBDb21tb25zVXRpbHMuZ2V0VmFsdWUoY29sdW1uLmFnZ0NlbGxDbGFzcywgY29sdW1uKTtcbiAgfVxuXG4gIGNlbGxTdHlsZShjb2x1bW4pIHtcbiAgICByZXR1cm4gQ29tbW9uc1V0aWxzLmdldFZhbHVlKGNvbHVtbi5hZ2dDZWxsU3R5bGUsIGNvbHVtbik7XG4gIH1cbn1cbiJdfQ==