/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, TemplateRef, ViewChild } from '@angular/core';
import { BaseComponent } from '@er/core';
import { CommonsUtils } from '@er/utils';
import { TableCheckbox } from 'primeng/table';
import { PngTableComponent } from '../table/component';
var PngTableBodyRowComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngTableBodyRowComponent, _super);
    function PngTableBodyRowComponent(pngTable, cd) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.cd = cd;
        return _this;
    }
    Object.defineProperty(PngTableBodyRowComponent.prototype, "rowContext", {
        get: /**
         * @return {?}
         */
        function () {
            return {
                columns: this.columns,
                row: this.row,
                rowIndex: this.rowIndex,
                expanded: this.expanded,
                context: this.pngTable
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PngTableBodyRowComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.chk) {
            this.$subscriptions = this.chk.tableService.selectionSource$.subscribe(function () {
                _this.cd.detectChanges();
            });
        }
    };
    /**
     * @param {?} col
     * @return {?}
     */
    PngTableBodyRowComponent.prototype.colContext = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        return tslib_1.__assign({}, this.rowContext, col);
    };
    /**
     * @param {?} col
     * @return {?}
     */
    PngTableBodyRowComponent.prototype.getColStyleClass = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        return CommonsUtils.getValue(col.styleClass, this.colContext(col));
    };
    /**
     * @param {?} col
     * @return {?}
     */
    PngTableBodyRowComponent.prototype.getColStyle = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        return CommonsUtils.getValue(col.style, this.colContext(col));
    };
    PngTableBodyRowComponent.decorators = [
        { type: Component, args: [{
                    selector: '[png-table-body-row]',
                    template: "\n    <ng-container *ngIf=\"customerTpl;else default\">\n      <ng-container *ngTemplateOutlet=\"customerTpl;context:rowContext\"></ng-container>\n    </ng-container>\n    <ng-template #default>\n      <tr *ngIf=\"rowHeaderTpl\">\n        <ng-container *ngTemplateOutlet=\"rowHeaderTpl;context:rowContext\"></ng-container>\n      </tr>\n      <td *ngIf=\"pngTable.$props.$ext.rowExpandable\" class=\"col-expandable\">\n        <a href=\"#\" [pRowToggler]=\"row\">\n          <i [ngClass]=\"expanded ? 'pi pi-chevron-down' : 'pi pi-chevron-right'\"></i>\n        </a>\n      </td>\n      <td *ngIf=\"pngTable.$props.$ext.hasRowCheckbox\" class=\"col-checkbox\">\n        <p-tableCheckbox #chk [value]=\"row\"></p-tableCheckbox>\n      </td>\n      <td *ngIf=\"pngTable.$props.$ext.hasRowRadioButton\" class=\"col-radio\">\n        <p-tableRadioButton [value]=\"row\"></p-tableRadioButton>\n      </td>\n      <ng-container *ngFor=\"let col of columns\">\n        <td png-table-body-cell class=\"col-data col-data-{{col.key}}\"\n            [ngClass]=\"getColStyleClass(col)\"\n            [ngStyle]=\"getColStyle(col)\"\n            [customerTpl]=\"cellTpl\"\n            [column]=\"col\"\n            [row]=\"row\"\n            [rowIndex]=\"rowIndex\"\n            [dataCellTpl]=\"dataCellTpl\"\n        >\n        </td>\n      </ng-container>\n      <tr *ngIf=\"rowFooterTpl\">\n        <ng-container *ngTemplateOutlet=\"rowFooterTpl;context:rowContext\"></ng-container>\n      </tr>\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngTableBodyRowComponent.ctorParameters = function () { return [
        { type: PngTableComponent },
        { type: ChangeDetectorRef }
    ]; };
    PngTableBodyRowComponent.propDecorators = {
        columns: [{ type: Input }],
        row: [{ type: Input }],
        rowIndex: [{ type: Input }],
        expanded: [{ type: Input }],
        rowHeaderTpl: [{ type: Input }],
        rowFooterTpl: [{ type: Input }],
        cellTpl: [{ type: Input }],
        dataCellTpl: [{ type: Input }],
        chk: [{ type: ViewChild, args: ['chk',] }]
    };
    return PngTableBodyRowComponent;
}(BaseComponent));
export { PngTableBodyRowComponent };
if (false) {
    /** @type {?} */
    PngTableBodyRowComponent.prototype.columns;
    /** @type {?} */
    PngTableBodyRowComponent.prototype.row;
    /** @type {?} */
    PngTableBodyRowComponent.prototype.rowIndex;
    /** @type {?} */
    PngTableBodyRowComponent.prototype.expanded;
    /** @type {?} */
    PngTableBodyRowComponent.prototype.rowHeaderTpl;
    /** @type {?} */
    PngTableBodyRowComponent.prototype.rowFooterTpl;
    /** @type {?} */
    PngTableBodyRowComponent.prototype.cellTpl;
    /** @type {?} */
    PngTableBodyRowComponent.prototype.dataCellTpl;
    /** @type {?} */
    PngTableBodyRowComponent.prototype.chk;
    /** @type {?} */
    PngTableBodyRowComponent.prototype.pngTable;
    /**
     * @type {?}
     * @private
     */
    PngTableBodyRowComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YWJsZS9jb21wb25lbnQvYm9keS1yb3cvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFnQix1QkFBdUIsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbEksT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUN2QyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFNUMsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFckQ7SUF5QzhDLG9EQUFhO0lBb0J6RCxrQ0FBbUIsUUFBMkIsRUFBVSxFQUFxQjtRQUE3RSxZQUNFLGlCQUFPLFNBQ1I7UUFGa0IsY0FBUSxHQUFSLFFBQVEsQ0FBbUI7UUFBVSxRQUFFLEdBQUYsRUFBRSxDQUFtQjs7SUFFN0UsQ0FBQztJQUVELHNCQUFJLGdEQUFVOzs7O1FBQWQ7WUFDRSxPQUFPO2dCQUNMLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztnQkFDckIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO2dCQUNiLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtnQkFDdkIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO2dCQUN2QixPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVE7YUFDdkIsQ0FBQztRQUNKLENBQUM7OztPQUFBOzs7O0lBRUQsa0RBQWU7OztJQUFmO1FBQUEsaUJBTUM7UUFMQyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQztnQkFDckUsS0FBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUMxQixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7Ozs7SUFFRCw2Q0FBVTs7OztJQUFWLFVBQVcsR0FBRztRQUNaLDRCQUNLLElBQUksQ0FBQyxVQUFVLEVBQ2YsR0FBRyxFQUNOO0lBQ0osQ0FBQzs7Ozs7SUFFRCxtREFBZ0I7Ozs7SUFBaEIsVUFBaUIsR0FBRztRQUNsQixPQUFPLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckUsQ0FBQzs7Ozs7SUFFRCw4Q0FBVzs7OztJQUFYLFVBQVksR0FBRztRQUNiLE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDOztnQkFoR0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxzQkFBc0I7b0JBQ2hDLFFBQVEsRUFBRSxzK0NBbUNUO29CQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRDs7OztnQkF6Q08saUJBQWlCO2dCQUx1QixpQkFBaUI7OzswQkFrRDlELEtBQUs7c0JBRUwsS0FBSzsyQkFFTCxLQUFLOzJCQUVMLEtBQUs7K0JBRUwsS0FBSzsrQkFFTCxLQUFLOzBCQUVMLEtBQUs7OEJBRUwsS0FBSztzQkFFTCxTQUFTLFNBQUMsS0FBSzs7SUFzQ2xCLCtCQUFDO0NBQUEsQUFqR0QsQ0F5QzhDLGFBQWEsR0F3RDFEO1NBeERZLHdCQUF3Qjs7O0lBRW5DLDJDQUF3Qzs7SUFFeEMsdUNBQW1COztJQUVuQiw0Q0FBMEI7O0lBRTFCLDRDQUEyQjs7SUFFM0IsZ0RBQXdDOztJQUV4QyxnREFBd0M7O0lBRXhDLDJDQUFtQzs7SUFFbkMsK0NBQXVDOztJQUV2Qyx1Q0FBcUM7O0lBRXpCLDRDQUFrQzs7Ozs7SUFBRSxzQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyVmlld0luaXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Jhc2VDb21wb25lbnR9IGZyb20gJ0Blci9jb3JlJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtUYWJsZUNoZWNrYm94fSBmcm9tICdwcmltZW5nL3RhYmxlJztcbmltcG9ydCB7UG5nVGFibGVDb2x1bW5Qcm9wc30gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHtQbmdUYWJsZUNvbXBvbmVudH0gZnJvbSAnLi4vdGFibGUvY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnW3BuZy10YWJsZS1ib2R5LXJvd10nLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJjdXN0b21lclRwbDtlbHNlIGRlZmF1bHRcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJjdXN0b21lclRwbDtjb250ZXh0OnJvd0NvbnRleHRcIj48L25nLWNvbnRhaW5lcj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8bmctdGVtcGxhdGUgI2RlZmF1bHQ+XG4gICAgICA8dHIgKm5nSWY9XCJyb3dIZWFkZXJUcGxcIj5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cInJvd0hlYWRlclRwbDtjb250ZXh0OnJvd0NvbnRleHRcIj48L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvdHI+XG4gICAgICA8dGQgKm5nSWY9XCJwbmdUYWJsZS4kcHJvcHMuJGV4dC5yb3dFeHBhbmRhYmxlXCIgY2xhc3M9XCJjb2wtZXhwYW5kYWJsZVwiPlxuICAgICAgICA8YSBocmVmPVwiI1wiIFtwUm93VG9nZ2xlcl09XCJyb3dcIj5cbiAgICAgICAgICA8aSBbbmdDbGFzc109XCJleHBhbmRlZCA/ICdwaSBwaS1jaGV2cm9uLWRvd24nIDogJ3BpIHBpLWNoZXZyb24tcmlnaHQnXCI+PC9pPlxuICAgICAgICA8L2E+XG4gICAgICA8L3RkPlxuICAgICAgPHRkICpuZ0lmPVwicG5nVGFibGUuJHByb3BzLiRleHQuaGFzUm93Q2hlY2tib3hcIiBjbGFzcz1cImNvbC1jaGVja2JveFwiPlxuICAgICAgICA8cC10YWJsZUNoZWNrYm94ICNjaGsgW3ZhbHVlXT1cInJvd1wiPjwvcC10YWJsZUNoZWNrYm94PlxuICAgICAgPC90ZD5cbiAgICAgIDx0ZCAqbmdJZj1cInBuZ1RhYmxlLiRwcm9wcy4kZXh0Lmhhc1Jvd1JhZGlvQnV0dG9uXCIgY2xhc3M9XCJjb2wtcmFkaW9cIj5cbiAgICAgICAgPHAtdGFibGVSYWRpb0J1dHRvbiBbdmFsdWVdPVwicm93XCI+PC9wLXRhYmxlUmFkaW9CdXR0b24+XG4gICAgICA8L3RkPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgY29sIG9mIGNvbHVtbnNcIj5cbiAgICAgICAgPHRkIHBuZy10YWJsZS1ib2R5LWNlbGwgY2xhc3M9XCJjb2wtZGF0YSBjb2wtZGF0YS17e2NvbC5rZXl9fVwiXG4gICAgICAgICAgICBbbmdDbGFzc109XCJnZXRDb2xTdHlsZUNsYXNzKGNvbClcIlxuICAgICAgICAgICAgW25nU3R5bGVdPVwiZ2V0Q29sU3R5bGUoY29sKVwiXG4gICAgICAgICAgICBbY3VzdG9tZXJUcGxdPVwiY2VsbFRwbFwiXG4gICAgICAgICAgICBbY29sdW1uXT1cImNvbFwiXG4gICAgICAgICAgICBbcm93XT1cInJvd1wiXG4gICAgICAgICAgICBbcm93SW5kZXhdPVwicm93SW5kZXhcIlxuICAgICAgICAgICAgW2RhdGFDZWxsVHBsXT1cImRhdGFDZWxsVHBsXCJcbiAgICAgICAgPlxuICAgICAgICA8L3RkPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8dHIgKm5nSWY9XCJyb3dGb290ZXJUcGxcIj5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cInJvd0Zvb3RlclRwbDtjb250ZXh0OnJvd0NvbnRleHRcIj48L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvdHI+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgYCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5cbmV4cG9ydCBjbGFzcyBQbmdUYWJsZUJvZHlSb3dDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgQElucHV0KCkgY29sdW1uczogUG5nVGFibGVDb2x1bW5Qcm9wc1tdO1xuXG4gIEBJbnB1dCgpIHJvdzoge31bXTtcblxuICBASW5wdXQoKSByb3dJbmRleDogbnVtYmVyO1xuXG4gIEBJbnB1dCgpIGV4cGFuZGVkOiBib29sZWFuO1xuXG4gIEBJbnB1dCgpIHJvd0hlYWRlclRwbDogVGVtcGxhdGVSZWY8YW55PjtcblxuICBASW5wdXQoKSByb3dGb290ZXJUcGw6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgQElucHV0KCkgY2VsbFRwbDogVGVtcGxhdGVSZWY8YW55PjtcblxuICBASW5wdXQoKSBkYXRhQ2VsbFRwbDogVGVtcGxhdGVSZWY8YW55PjtcblxuICBAVmlld0NoaWxkKCdjaGsnKSBjaGs6IFRhYmxlQ2hlY2tib3g7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHBuZ1RhYmxlOiBQbmdUYWJsZUNvbXBvbmVudCwgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgZ2V0IHJvd0NvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbHVtbnM6IHRoaXMuY29sdW1ucyxcbiAgICAgIHJvdzogdGhpcy5yb3csXG4gICAgICByb3dJbmRleDogdGhpcy5yb3dJbmRleCxcbiAgICAgIGV4cGFuZGVkOiB0aGlzLmV4cGFuZGVkLFxuICAgICAgY29udGV4dDogdGhpcy5wbmdUYWJsZVxuICAgIH07XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY2hrKSB7XG4gICAgICB0aGlzLiRzdWJzY3JpcHRpb25zID0gdGhpcy5jaGsudGFibGVTZXJ2aWNlLnNlbGVjdGlvblNvdXJjZSQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjb2xDb250ZXh0KGNvbCkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi50aGlzLnJvd0NvbnRleHQsXG4gICAgICAuLi5jb2xcbiAgICB9O1xuICB9XG5cbiAgZ2V0Q29sU3R5bGVDbGFzcyhjb2wpIHtcbiAgICByZXR1cm4gQ29tbW9uc1V0aWxzLmdldFZhbHVlKGNvbC5zdHlsZUNsYXNzLCB0aGlzLmNvbENvbnRleHQoY29sKSk7XG4gIH1cblxuICBnZXRDb2xTdHlsZShjb2wpIHtcbiAgICByZXR1cm4gQ29tbW9uc1V0aWxzLmdldFZhbHVlKGNvbC5zdHlsZSwgdGhpcy5jb2xDb250ZXh0KGNvbCkpO1xuICB9XG59XG4iXX0=