/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { BaseComponent } from '@er/core';
import { AggMethods, DataAttr, DataType } from '@er/types';
import { CommonsUtils, DataItemUtils } from '@er/utils';
import { BehaviorSubject } from 'rxjs';
import { PngTableComponent } from '../../table/component';
var PngQueryInputComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngQueryInputComponent, _super);
    function PngQueryInputComponent(pngTable) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.DATA_TYPE = DataType;
        _this.DATA_ATTR = DataAttr;
        _this.options = {};
        _this.queryValueChange = new EventEmitter();
        _this.isTime = false;
        _this.autoCompleteProps$ = new BehaviorSubject(undefined);
        return _this;
    }
    Object.defineProperty(PngQueryInputComponent.prototype, "queryValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._queryValue;
        },
        set: /**
         * @param {?} queryValue
         * @return {?}
         */
        function (queryValue) {
            this._queryValue = queryValue;
            this.queryValueChange.emit(queryValue);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PngQueryInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.autoProps = (/** @type {?} */ ({
            inputStyle: { 'min-width': '200px' },
            appendTo: 'body',
            forceSelection: false,
            $ext: {
                apiDataProps: tslib_1.__assign({}, this.pngTable.getTableQuery(), { searchFields: this.queryKey, returnFields: this.queryKey, aggProps: { name: this.queryKey, field: this.queryKey }, dataPath: "aggs." + this.queryKey }),
                dataItemProps: {
                    showCounter: true,
                    dropDownOptionKey: DataItemUtils.ITEM_LABEL_KEY,
                    valueKey: DataItemUtils.ITEM_LABEL_KEY
                }
            }
        }));
        this.sliderProps = (/** @type {?} */ ({
            range: true,
            $ext: {
                apiDataProps: tslib_1.__assign({}, this.pngTable.getTableQuery(), { aggProps: [
                        { name: 'max', field: this.queryKey, method: AggMethods.MAX },
                        { name: 'min', field: this.queryKey, method: AggMethods.MIN }
                    ] })
            }
        }));
        if (this.queryDataType === DataType.DATE && this.queryDataAttr) {
            /** @type {?} */
            var attrs = CommonsUtils.getArrayValue(this.queryDataAttr);
            if (attrs.indexOf(DataAttr.DATE) >= 0) {
                this.isTime = false;
            }
            if (attrs.indexOf(DataAttr.TIME) >= 0) {
                this.isTime = true;
            }
        }
    };
    PngQueryInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-query-input',
                    template: "\n    <ng-container [ngSwitch]=\"queryDataType\">\n      <ng-container *ngSwitchCase=\"DATA_TYPE.NUMBER\">\n        <png-slider [(ngModel)]=\"queryValue\"\n                    erPropsBind\n                    [props]=\"sliderProps\"\n        >\n        </png-slider>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"DATA_TYPE.BOOLEAN\">\n        <p-inputSwitch [(ngModel)]=\"queryValue\">\n        </p-inputSwitch>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"DATA_TYPE.DATE\">\n        <ng-container *ngIf=\"!isTime\">\n          <png-calendar erPropsBind [(ngModel)]=\"queryValue\"\n                        [props]=\"{ selectionMode: 'range',placeholder:'\u8BF7\u9009\u62E9\u65E5\u671F'}\">\n          </png-calendar>\n        </ng-container>\n        <ng-container *ngIf=\"isTime\">\n          <png-calendar erPropsBind [(ngModel)]=\"queryValue\"\n                        [props]=\"{ timeOnly: true, selectionMode: 'range',placeholder:'\u8BF7\u9009\u62E9\u65F6\u95F4'}\"\n          >\n          </png-calendar>\n        </ng-container>\n      </ng-container>\n      <ng-container *ngSwitchDefault>\n        <png-auto-complete\n          [(ngModel)]=\"queryValue\"\n          erPropsBind\n          [props]=\"autoProps\"\n        >\n        </png-auto-complete>\n        <!--<input type=\"text\" pInputText [(ngModel)]=\"queryValue\" placeholder=\"\u8F93\u5165\u67E5\u8BE2\u6807\u51C6\">-->\n      </ng-container>\n    </ng-container>\n  ",
                    styles: ["/deep/ .ui-multiselect{min-width:150px}/deep/ .ui-multiselect-label-container label{margin:0!important}/deep/ .ui-slider{width:100px;margin:5px}"]
                }] }
    ];
    /** @nocollapse */
    PngQueryInputComponent.ctorParameters = function () { return [
        { type: PngTableComponent }
    ]; };
    PngQueryInputComponent.propDecorators = {
        queryKey: [{ type: Input }],
        queryDataType: [{ type: Input }],
        queryDataAttr: [{ type: Input }],
        options: [{ type: Input }],
        autoProps: [{ type: Input }],
        sliderProps: [{ type: Input }],
        queryValueChange: [{ type: Output }],
        queryValue: [{ type: Input }]
    };
    return PngQueryInputComponent;
}(BaseComponent));
export { PngQueryInputComponent };
if (false) {
    /** @type {?} */
    PngQueryInputComponent.prototype.DATA_TYPE;
    /** @type {?} */
    PngQueryInputComponent.prototype.DATA_ATTR;
    /** @type {?} */
    PngQueryInputComponent.prototype.queryKey;
    /** @type {?} */
    PngQueryInputComponent.prototype.queryDataType;
    /** @type {?} */
    PngQueryInputComponent.prototype.queryDataAttr;
    /** @type {?} */
    PngQueryInputComponent.prototype.options;
    /** @type {?} */
    PngQueryInputComponent.prototype.autoProps;
    /** @type {?} */
    PngQueryInputComponent.prototype.sliderProps;
    /** @type {?} */
    PngQueryInputComponent.prototype.queryValueChange;
    /** @type {?} */
    PngQueryInputComponent.prototype.isTime;
    /** @type {?} */
    PngQueryInputComponent.prototype.autoCompleteProps$;
    /**
     * @type {?}
     * @private
     */
    PngQueryInputComponent.prototype._queryValue;
    /**
     * @type {?}
     * @private
     */
    PngQueryInputComponent.prototype.pngTable;
}
//# sourceMappingURL=data:application/json;base64,