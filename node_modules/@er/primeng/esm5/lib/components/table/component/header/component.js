/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BaseComponent } from '@er/core';
import { AggMethodsProps, DataType } from '@er/types';
import { OverlayPanel } from 'primeng/primeng';
import { PngTableComponent } from '../table/component';
var PngTableHeaderComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngTableHeaderComponent, _super);
    function PngTableHeaderComponent(pngTable) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.onFiltersSet = new EventEmitter();
        _this.onAggKeysSet = new EventEmitter();
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableHeaderComponent.prototype.showFilterPanel = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.filterColumn = event.column;
        /** @type {?} */
        var filters = this.filterColumn.filters;
        if (filters && filters.length > 0) {
            this.queryValue = filters[0];
        }
        else {
            this.queryValue = undefined;
        }
        this.filterPanel.toggle(event.event);
    };
    /**
     * @return {?}
     */
    PngTableHeaderComponent.prototype.clearFilterColumn = /**
     * @return {?}
     */
    function () {
        this.filterColumn = undefined;
    };
    /**
     * @return {?}
     */
    PngTableHeaderComponent.prototype.clearAggColumn = /**
     * @return {?}
     */
    function () {
        this.aggColumn = undefined;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableHeaderComponent.prototype.showAggsPanel = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.availableAggs = [];
        this.aggColumn = event.column;
        /** @type {?} */
        var type = this.aggColumn.dataType || DataType.STRING;
        this.aggMethods = (this.aggColumn.aggProps || []).map(function (aggProp) { return aggProp.method; });
        Object.keys(AggMethodsProps).forEach(function (method) {
            if (!AggMethodsProps[method].dataTypes || (AggMethodsProps[method].dataTypes && AggMethodsProps[method].dataTypes.indexOf(type) >= 0)) {
                _this.availableAggs.push({
                    label: AggMethodsProps[method].label,
                    key: AggMethodsProps[method].key
                });
            }
        });
        this.aggPanel.toggle(event.$event);
    };
    /**
     * @return {?}
     */
    PngTableHeaderComponent.prototype.setAggs = /**
     * @return {?}
     */
    function () {
        this.onAggKeysSet.emit({ column: this.aggColumn, methods: this.aggMethods });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableHeaderComponent.prototype.updateFilters = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.filterPanel.hide();
        this.onFiltersSet.emit(event);
    };
    PngTableHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: '[png-table-header]',
                    template: "\n    <ng-container *ngIf=\"customerTpl;else default\">\n      <ng-container *ngTemplateOutlet=\"customerTpl;context:{$implicit:columns,context:pngTable}\"></ng-container>\n    </ng-container>\n    <ng-template #default>\n      <th *ngIf=\"pngTable.$props.$ext.rowExpandable\" class=\"col-expandable\"></th>\n      <th *ngIf=\"pngTable.$props.$ext.hasRowCheckbox\" class=\"col-checkbox\" title=\"\u5168\u9009\">\n        <p-tableHeaderCheckbox></p-tableHeaderCheckbox>\n      </th>\n      <th *ngIf=\"pngTable.$props.$ext.hasRowRadioButton\" class=\"col-radio\"></th>\n      <th *ngFor=\"let column of columns\" pReorderableColumn pResizableColumn\n          png-table-header-col\n          [column]=\"column\"\n          (onFilterBtnClick)=\"showFilterPanel($event)\"\n          (onAggsBtnClick)=\"showAggsPanel($event)\"\n      >\n      </th>\n    </ng-template>\n    <div class=\"d-none\">\n      <p-overlayPanel #filterPanel appendTo=\"body\"\n                      [dismissable]=\"false\" (onHide)=\"clearFilterColumn()\"\n                      [showCloseIcon]=\"true\">\n        <ng-container *ngIf=\"filterColumn\">\n          <png-field-data-filter [column]=\"filterColumn\" [queryValue]=\"queryValue\"\n                                 (onFilterChange)=\"updateFilters($event)\"></png-field-data-filter>\n        </ng-container>\n      </p-overlayPanel>\n      <p-overlayPanel #aggPanel appendTo=\"body\"\n                      [dismissable]=\"true\" (onHide)=\"clearAggColumn()\"\n                      [showCloseIcon]=\"true\">\n        <div class=\"shadow\" style=\"width:150px;margin-bottom:10px\">\n          <h6>\u53EF\u9009\u7EDF\u8BA1\u65B9\u5F0F</h6>\n          <ng-container *ngFor=\"let agg of availableAggs\">\n            <div style=\"font-size: .8em\">\n              <p-checkbox name=\"aggs\" [value]=\"agg['key']\" [label]=\"agg['label']\"\n                          [(ngModel)]=\"aggMethods\" (onChange)=\"setAggs()\"></p-checkbox>\n            </div>\n          </ng-container>\n        </div>\n      </p-overlayPanel>\n    </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngTableHeaderComponent.ctorParameters = function () { return [
        { type: PngTableComponent }
    ]; };
    PngTableHeaderComponent.propDecorators = {
        columns: [{ type: Input }],
        onFiltersSet: [{ type: Output }],
        onAggKeysSet: [{ type: Output }],
        filterPanel: [{ type: ViewChild, args: ['filterPanel',] }],
        aggPanel: [{ type: ViewChild, args: ['aggPanel',] }]
    };
    return PngTableHeaderComponent;
}(BaseComponent));
export { PngTableHeaderComponent };
if (false) {
    /** @type {?} */
    PngTableHeaderComponent.prototype.columns;
    /** @type {?} */
    PngTableHeaderComponent.prototype.onFiltersSet;
    /** @type {?} */
    PngTableHeaderComponent.prototype.onAggKeysSet;
    /** @type {?} */
    PngTableHeaderComponent.prototype.filterPanel;
    /** @type {?} */
    PngTableHeaderComponent.prototype.aggPanel;
    /** @type {?} */
    PngTableHeaderComponent.prototype.availableAggs;
    /** @type {?} */
    PngTableHeaderComponent.prototype.filterColumn;
    /** @type {?} */
    PngTableHeaderComponent.prototype.queryValue;
    /** @type {?} */
    PngTableHeaderComponent.prototype.aggColumn;
    /** @type {?} */
    PngTableHeaderComponent.prototype.aggMethods;
    /** @type {?} */
    PngTableHeaderComponent.prototype.pngTable;
}
//# sourceMappingURL=data:application/json;base64,