/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { ApiUtils, BaseComponent, DataFieldUtils } from '@er/core';
import { CommonsUtils } from '@er/utils';
import { PngTableComponent } from '../table/component';
var PngTableExpandedRowComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngTableExpandedRowComponent, _super);
    function PngTableExpandedRowComponent(pngTable) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.customerContent = false;
        return _this;
    }
    Object.defineProperty(PngTableExpandedRowComponent.prototype, "dataColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this.columns.filter(function (column) { return column.isDataColumn !== false && !column.isActionColumn; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    PngTableExpandedRowComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.rowId) {
            if (this.pngTable.$props.$ext.onExpandRowContent) {
                this.customerContent = true;
                this.expandContent$ = this.pngTable.$props.$ext.onExpandRowContent.method(this.rowId);
            }
            else {
                this.expandContent$ = ApiUtils.getById(this.pngTable.$props.$ext.apiDataProps.apiEntry, this.rowId, {
                    tag: this.rowId,
                    payload: { 'fields': this.pngTable.$props.$ext.expandRowFields || this.pngTable.dataColumnNames }
                });
            }
        }
    };
    /**
     * @param {?} col
     * @param {?} rowData
     * @return {?}
     */
    PngTableExpandedRowComponent.prototype.content = /**
     * @param {?} col
     * @param {?} rowData
     * @return {?}
     */
    function (col, rowData) {
        if (!col.key) {
            return;
        }
        if (col.cellContent) {
            console.log('cellcontent');
            return col.cellContent({ row: rowData });
        }
        /** @type {?} */
        var c = rowData[col.key];
        if (CommonsUtils.isJson(c)) {
            /** @type {?} */
            var key = void 0;
            if (col.dataField) {
                key = DataFieldUtils.getDefaultFieldName(col.dataField);
            }
            if (key) {
                return CommonsUtils.get(c, key);
            }
            else {
                /** @type {?} */
                var trans_1 = {};
                Object.keys(c).forEach(function (sub) {
                    /** @type {?} */
                    var label = CommonsUtils.get(col, "dataField.fields." + sub + ".label");
                    if (label) {
                        trans_1[label] = c[sub];
                    }
                    else {
                        trans_1[sub] = c[sub];
                    }
                });
                c = trans_1;
            }
        }
        return CommonsUtils.getText(c);
    };
    PngTableExpandedRowComponent.decorators = [
        { type: Component, args: [{
                    selector: '[png-table-expanded-row]',
                    template: "\n    <ng-container *ngIf=\"customerTpl;else default\">\n      <ng-container *ngTemplateOutlet=\"customerTpl;context:{$implicit:rowId,context:pngTable}\"></ng-container>\n    </ng-container>\n    <ng-template #default>\n      <td colspan=\"100%\">\n        <p-card styleClass=\"ui-card-shadow w-100 ui-table-expanded-content\" >\n          <er-http-status [tag]=\"rowId\" erPosition></er-http-status>\n          <ng-container *ngIf=\"expandContent$|async as expandContent\">\n            <div class=\"row w-100 m-3\" style=\"font-size: 16px\">\n              <ng-container *ngIf=\"!customerContent\">\n                <ng-container *ngFor=\"let col of dataColumns\">\n                  <span class=\"col-2 my-3\"><b class=\"pull-right\" [innerHTML]=\"col.label\"></b></span>\n                  <ng-container *ngIf=\"col.expandViewContent;else defaultView\">\n                    <er-dyna-content [content]=\"col.expandViewContent\" [context]=\"{data: expandContent, col: col}\"></er-dyna-content>\n                  </ng-container>\n                  <ng-template #defaultView>\n                    <span class=\"col-4 my-3\">{{content(col, expandContent)}}</span>\n                  </ng-template>\n                </ng-container>\n              </ng-container>\n              <ng-container *ngIf=\"customerContent\">\n                <er-dyna-content [content]=\"expandContent\"></er-dyna-content>\n              </ng-container>\n            </div>\n          </ng-container>\n        </p-card>\n      </td>\n    </ng-template>\n\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngTableExpandedRowComponent.ctorParameters = function () { return [
        { type: PngTableComponent }
    ]; };
    PngTableExpandedRowComponent.propDecorators = {
        rowId: [{ type: Input }],
        columns: [{ type: Input }],
        styleClass: [{ type: Input }],
        style: [{ type: Input }]
    };
    return PngTableExpandedRowComponent;
}(BaseComponent));
export { PngTableExpandedRowComponent };
if (false) {
    /** @type {?} */
    PngTableExpandedRowComponent.prototype.rowId;
    /** @type {?} */
    PngTableExpandedRowComponent.prototype.columns;
    /** @type {?} */
    PngTableExpandedRowComponent.prototype.styleClass;
    /** @type {?} */
    PngTableExpandedRowComponent.prototype.style;
    /** @type {?} */
    PngTableExpandedRowComponent.prototype.expandContent$;
    /** @type {?} */
    PngTableExpandedRowComponent.prototype.customerContent;
    /** @type {?} */
    PngTableExpandedRowComponent.prototype.pngTable;
}
//# sourceMappingURL=data:application/json;base64,