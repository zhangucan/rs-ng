/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseComponent } from '@er/core';
import { EsQueryMethods } from '@er/types';
import { PngTableComponent } from '../../table/component';
var PngTableQueryBuilderComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngTableQueryBuilderComponent, _super);
    function PngTableQueryBuilderComponent(pngTable) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.qbConfig = {};
        _this.switches = [
            { label: '并且', value: 'and', icon: 'fa fa-fw fa-cc-paypal' },
            { label: '或者', value: 'or', icon: 'fa fa-fw fa-cc-visa' },
            { label: '非', value: 'not', icon: 'fa fa-fw fa-cc-mastercard' }
        ];
        return _this;
    }
    /**
     * @return {?}
     */
    PngTableQueryBuilderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.qbConfig.fields = this.pngTable.$props.columns
            .filter(function (column) { return column.dataField; })
            .map(function (column) { return column.dataField; });
        this.qbConfig.operators = function (field) { return Object.keys(EsQueryMethods).map(function (key) {
            return {
                label: EsQueryMethods[key].label,
                value: EsQueryMethods[key].key
            };
        }); };
    };
    PngTableQueryBuilderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-table-query-builder',
                    template: "\n    <er-query-builder [config]=\"qbConfig\">\n      <!--<ng-template erTypedTemplate=\"switchGroup\" let-qb=\"qb\">-->\n      <!--<p-selectButton [options]=\"switches\" [ngModel]=\"qb.value.condition\"></p-selectButton>-->\n      <!--</ng-template>-->\n      <!--<ng-template erTypedTemplate=\"buttonGroup\" let-qb=\"qb\">-->\n      <!--<p-button label=\"\u6761\u4EF6\" icon=\"fa fa-plus\" (onClick)=\"qb.addRule()\"></p-button>-->\n      <!--<p-button label=\"\u7EC4\" icon=\"fa fa-group\" (onClick)=\"qb.addRuleSet()\"></p-button>-->\n      <!--<ng-container *ngIf=\"!!parentRuleSet && qb.config.allowRuleSet\">-->\n      <!--<p-button icon=\"fa fa-minus\" (onClick)=\"qb.removeRuleSet()\"></p-button>-->\n      <!--</ng-container>-->\n      <!--</ng-template>-->\n      <ng-template erTypedTemplate=\"input\" let-rule let-qb=\"qb\">\n        <png-query-input [options]=\"pngTable.$props.$ext\"></png-query-input>\n      </ng-template>\n    </er-query-builder>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngTableQueryBuilderComponent; }),
                            multi: true
                        }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngTableQueryBuilderComponent.ctorParameters = function () { return [
        { type: PngTableComponent }
    ]; };
    return PngTableQueryBuilderComponent;
}(BaseComponent));
export { PngTableQueryBuilderComponent };
if (false) {
    /** @type {?} */
    PngTableQueryBuilderComponent.prototype.qbConfig;
    /** @type {?} */
    PngTableQueryBuilderComponent.prototype.switches;
    /** @type {?} */
    PngTableQueryBuilderComponent.prototype.pngTable;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YWJsZS9jb21wb25lbnQvcXVlcnkvZmllbGRzLWJ1aWxkZXIvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQVMsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUN2QyxPQUFPLEVBQUMsY0FBYyxFQUFvQixNQUFNLFdBQVcsQ0FBQztBQUM1RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUV4RDtJQTBCbUQseURBQWE7SUFXOUQsdUNBQW1CLFFBQTJCO1FBQTlDLFlBQ0UsaUJBQU8sU0FDUjtRQUZrQixjQUFRLEdBQVIsUUFBUSxDQUFtQjtRQVI5QyxjQUFRLEdBQXNCLEVBQUUsQ0FBQztRQUVqQyxjQUFRLEdBQUc7WUFDVCxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsdUJBQXVCLEVBQUM7WUFDMUQsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLHFCQUFxQixFQUFDO1lBQ3ZELEVBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSwyQkFBMkIsRUFBQztTQUM5RCxDQUFDOztJQUlGLENBQUM7Ozs7SUFFRCxnREFBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPO2FBQ2hELE1BQU0sQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxTQUFTLEVBQWhCLENBQWdCLENBQUM7YUFDbEMsR0FBRyxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLFNBQVMsRUFBaEIsQ0FBZ0IsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxHQUFHLFVBQUMsS0FBSyxJQUFLLE9BQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxHQUFHO1lBQ3RFLE9BQU87Z0JBQ0wsS0FBSyxFQUFFLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLO2dCQUNoQyxLQUFLLEVBQUUsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUc7YUFDL0IsQ0FBQztRQUNKLENBQUMsQ0FBQyxFQUxtQyxDQUtuQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBbkRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUseUJBQXlCO29CQUNuQyxRQUFRLEVBQUUsMDhCQWdCVDtvQkFDRCxTQUFTLEVBQUUsQ0FBQzs0QkFDVixPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSw2QkFBNkIsRUFBN0IsQ0FBNkIsQ0FBQzs0QkFDNUQsS0FBSyxFQUFFLElBQUk7eUJBQ1osQ0FBQztvQkFDRixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7Ozs7Z0JBM0JPLGlCQUFpQjs7SUFzRHpCLG9DQUFDO0NBQUEsQUFwREQsQ0EwQm1ELGFBQWEsR0EwQi9EO1NBMUJZLDZCQUE2Qjs7O0lBR3hDLGlEQUFpQzs7SUFFakMsaURBSUU7O0lBRVUsaURBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOR19WQUxVRV9BQ0NFU1NPUn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtCYXNlQ29tcG9uZW50fSBmcm9tICdAZXIvY29yZSc7XG5pbXBvcnQge0VzUXVlcnlNZXRob2RzLCBRdWVyeUJ1aWxkZXJQcm9wc30gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7UG5nVGFibGVDb21wb25lbnR9IGZyb20gJy4uLy4uL3RhYmxlL2NvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BuZy10YWJsZS1xdWVyeS1idWlsZGVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZXItcXVlcnktYnVpbGRlciBbY29uZmlnXT1cInFiQ29uZmlnXCI+XG4gICAgICA8IS0tPG5nLXRlbXBsYXRlIGVyVHlwZWRUZW1wbGF0ZT1cInN3aXRjaEdyb3VwXCIgbGV0LXFiPVwicWJcIj4tLT5cbiAgICAgIDwhLS08cC1zZWxlY3RCdXR0b24gW29wdGlvbnNdPVwic3dpdGNoZXNcIiBbbmdNb2RlbF09XCJxYi52YWx1ZS5jb25kaXRpb25cIj48L3Atc2VsZWN0QnV0dG9uPi0tPlxuICAgICAgPCEtLTwvbmctdGVtcGxhdGU+LS0+XG4gICAgICA8IS0tPG5nLXRlbXBsYXRlIGVyVHlwZWRUZW1wbGF0ZT1cImJ1dHRvbkdyb3VwXCIgbGV0LXFiPVwicWJcIj4tLT5cbiAgICAgIDwhLS08cC1idXR0b24gbGFiZWw9XCLmnaHku7ZcIiBpY29uPVwiZmEgZmEtcGx1c1wiIChvbkNsaWNrKT1cInFiLmFkZFJ1bGUoKVwiPjwvcC1idXR0b24+LS0+XG4gICAgICA8IS0tPHAtYnV0dG9uIGxhYmVsPVwi57uEXCIgaWNvbj1cImZhIGZhLWdyb3VwXCIgKG9uQ2xpY2spPVwicWIuYWRkUnVsZVNldCgpXCI+PC9wLWJ1dHRvbj4tLT5cbiAgICAgIDwhLS08bmctY29udGFpbmVyICpuZ0lmPVwiISFwYXJlbnRSdWxlU2V0ICYmIHFiLmNvbmZpZy5hbGxvd1J1bGVTZXRcIj4tLT5cbiAgICAgIDwhLS08cC1idXR0b24gaWNvbj1cImZhIGZhLW1pbnVzXCIgKG9uQ2xpY2spPVwicWIucmVtb3ZlUnVsZVNldCgpXCI+PC9wLWJ1dHRvbj4tLT5cbiAgICAgIDwhLS08L25nLWNvbnRhaW5lcj4tLT5cbiAgICAgIDwhLS08L25nLXRlbXBsYXRlPi0tPlxuICAgICAgPG5nLXRlbXBsYXRlIGVyVHlwZWRUZW1wbGF0ZT1cImlucHV0XCIgbGV0LXJ1bGUgbGV0LXFiPVwicWJcIj5cbiAgICAgICAgPHBuZy1xdWVyeS1pbnB1dCBbb3B0aW9uc109XCJwbmdUYWJsZS4kcHJvcHMuJGV4dFwiPjwvcG5nLXF1ZXJ5LWlucHV0PlxuICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICA8L2VyLXF1ZXJ5LWJ1aWxkZXI+XG4gIGAsXG4gIHByb3ZpZGVyczogW3tcbiAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBQbmdUYWJsZVF1ZXJ5QnVpbGRlckNvbXBvbmVudCksXG4gICAgbXVsdGk6IHRydWVcbiAgfV0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFBuZ1RhYmxlUXVlcnlCdWlsZGVyQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cblxuICBxYkNvbmZpZzogUXVlcnlCdWlsZGVyUHJvcHMgPSB7fTtcblxuICBzd2l0Y2hlcyA9IFtcbiAgICB7bGFiZWw6ICflubbkuJQnLCB2YWx1ZTogJ2FuZCcsIGljb246ICdmYSBmYS1mdyBmYS1jYy1wYXlwYWwnfSxcbiAgICB7bGFiZWw6ICfmiJbogIUnLCB2YWx1ZTogJ29yJywgaWNvbjogJ2ZhIGZhLWZ3IGZhLWNjLXZpc2EnfSxcbiAgICB7bGFiZWw6ICfpnZ4nLCB2YWx1ZTogJ25vdCcsIGljb246ICdmYSBmYS1mdyBmYS1jYy1tYXN0ZXJjYXJkJ31cbiAgXTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcG5nVGFibGU6IFBuZ1RhYmxlQ29tcG9uZW50KSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucWJDb25maWcuZmllbGRzID0gdGhpcy5wbmdUYWJsZS4kcHJvcHMuY29sdW1uc1xuICAgICAgLmZpbHRlcihjb2x1bW4gPT4gY29sdW1uLmRhdGFGaWVsZClcbiAgICAgIC5tYXAoY29sdW1uID0+IGNvbHVtbi5kYXRhRmllbGQpO1xuICAgIHRoaXMucWJDb25maWcub3BlcmF0b3JzID0gKGZpZWxkKSA9PiBPYmplY3Qua2V5cyhFc1F1ZXJ5TWV0aG9kcykubWFwKGtleSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsYWJlbDogRXNRdWVyeU1ldGhvZHNba2V5XS5sYWJlbCxcbiAgICAgICAgdmFsdWU6IEVzUXVlcnlNZXRob2RzW2tleV0ua2V5XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG4iXX0=