/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { BaseComponent, DataFieldUtils } from '@er/core';
import { DataAttr, DataType } from '@er/types';
import { CommonsUtils } from '@er/utils';
import { PngTableComponent } from '../../table/component';
var PngTableFieldDataFilterComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngTableFieldDataFilterComponent, _super);
    function PngTableFieldDataFilterComponent(pngTable) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.onFilterChange = new EventEmitter();
        return _this;
    }
    Object.defineProperty(PngTableFieldDataFilterComponent.prototype, "column", {
        get: /**
         * @return {?}
         */
        function () {
            return this._column;
        },
        set: /**
         * @param {?} column
         * @return {?}
         */
        function (column) {
            if (!this.queryKey && column) {
                this.queryKey = DataFieldUtils.getDefaultFieldName(column.dataField) || column.key;
            }
            if (!this.queryDataType && column) {
                this.queryDataType = column.filterDataType || column.dataType;
            }
            if (!this.queryDataAttr && column && column.dataAttr) {
                this.queryDataAttr = CommonsUtils.getArrayValue(column.dataAttr)[0];
            }
            this._column = column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngTableFieldDataFilterComponent.prototype, "dataField", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dataField;
        },
        set: /**
         * @param {?} dataField
         * @return {?}
         */
        function (dataField) {
            if (!this.queryKey && dataField) {
                this.queryKey = DataFieldUtils.getDefaultFieldName(dataField);
            }
            if (!this.queryDataType && dataField) {
                this.queryDataType = dataField.dataType;
            }
            this._dataField = dataField;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PngTableFieldDataFilterComponent.prototype.onFilter = /**
     * @return {?}
     */
    function () {
        this.onFilterChange.emit({
            key: this.queryKey,
            column: this.column,
            value: this.queryValue
        });
    };
    /**
     * @return {?}
     */
    PngTableFieldDataFilterComponent.prototype.clearFilter = /**
     * @return {?}
     */
    function () {
        this.queryValue = undefined;
        this.onFilter();
    };
    PngTableFieldDataFilterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-field-data-filter',
                    template: "\n    <div class=\"d-flex justify-content-end align-items-end\">\n      <png-query-input [queryKey]=\"queryKey\" [queryDataType]=\"queryDataType\" [queryDataAttr]=\"queryDataAttr\"\n                       [(queryValue)]=\"queryValue\"></png-query-input>\n      <ng-container *ngIf=\"queryValue\">\n      <span class=\"ml-2\">\n       <p-button\n         type=\"button\"\n         icon=\"fa fa-search\"\n         label=\"\u67E5\u8BE2\"\n         (click)=\"onFilter()\"\n       ></p-button>\n    </span>\n        <span class=\"ml-2\">\n    <p-button\n      type=\"button\"\n      icon=\"fa fa-trash\"\n      label=\"\u6E05\u9664\"\n      (click)=\"clearFilter()\"\n    ></p-button>\n    </span>\n      </ng-container>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    PngTableFieldDataFilterComponent.ctorParameters = function () { return [
        { type: PngTableComponent }
    ]; };
    PngTableFieldDataFilterComponent.propDecorators = {
        queryKey: [{ type: Input }],
        queryDataType: [{ type: Input }],
        queryDataAttr: [{ type: Input }],
        queryValue: [{ type: Input }],
        onFilterChange: [{ type: Output }],
        column: [{ type: Input }],
        dataField: [{ type: Input }]
    };
    return PngTableFieldDataFilterComponent;
}(BaseComponent));
export { PngTableFieldDataFilterComponent };
if (false) {
    /** @type {?} */
    PngTableFieldDataFilterComponent.prototype.queryKey;
    /** @type {?} */
    PngTableFieldDataFilterComponent.prototype.queryDataType;
    /** @type {?} */
    PngTableFieldDataFilterComponent.prototype.queryDataAttr;
    /** @type {?} */
    PngTableFieldDataFilterComponent.prototype.queryValue;
    /** @type {?} */
    PngTableFieldDataFilterComponent.prototype.onFilterChange;
    /**
     * @type {?}
     * @private
     */
    PngTableFieldDataFilterComponent.prototype._column;
    /** @type {?} */
    PngTableFieldDataFilterComponent.prototype._dataField;
    /** @type {?} */
    PngTableFieldDataFilterComponent.prototype.pngTable;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YWJsZS9jb21wb25lbnQvcXVlcnkvZmllbGQtZmlsdGVyL2NvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFDLGFBQWEsRUFBRSxjQUFjLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDdkQsT0FBTyxFQUFDLFFBQVEsRUFBYSxRQUFRLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDeEQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUV2QyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUV4RDtJQTRCc0QsNERBQWE7SUFZakUsMENBQW1CLFFBQTJCO1FBQTlDLFlBQ0UsaUJBQU8sU0FDUjtRQUZrQixjQUFRLEdBQVIsUUFBUSxDQUFtQjtRQUZwQyxvQkFBYyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7O0lBSTlDLENBQUM7SUFJRCxzQkFBSSxvREFBTTs7OztRQUFWO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUM7Ozs7O1FBRUQsVUFBb0IsTUFBMkI7WUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksTUFBTSxFQUFFO2dCQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQzthQUNwRjtZQUNELElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLE1BQU0sRUFBRTtnQkFDakMsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsY0FBYyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUM7YUFDL0Q7WUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRTtnQkFDcEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNyRTtZQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3hCLENBQUM7OztPQWJBO0lBaUJELHNCQUFJLHVEQUFTOzs7O1FBQWI7WUFDRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDekIsQ0FBQzs7Ozs7UUFFRCxVQUF1QixTQUFTO1lBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLFNBQVMsRUFBRTtnQkFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxjQUFjLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDL0Q7WUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxTQUFTLEVBQUU7Z0JBQ3BDLElBQUksQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQzthQUN6QztZQUNELElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBQzlCLENBQUM7OztPQVZBOzs7O0lBWUQsbURBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUM7WUFDdkIsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ2xCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVU7U0FDdkIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELHNEQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBQzVCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQixDQUFDOztnQkExRkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFFBQVEsRUFBRSw2dEJBdUJUO2lCQUNGOzs7O2dCQTVCTyxpQkFBaUI7OzsyQkFnQ3RCLEtBQUs7Z0NBRUwsS0FBSztnQ0FFTCxLQUFLOzZCQUVMLEtBQUs7aUNBRUwsTUFBTTt5QkFZTixLQUFLOzRCQW1CTCxLQUFLOztJQXdCUix1Q0FBQztDQUFBLEFBN0ZELENBNEJzRCxhQUFhLEdBaUVsRTtTQWpFWSxnQ0FBZ0M7OztJQUUzQyxvREFBMEI7O0lBRTFCLHlEQUFpQzs7SUFFakMseURBQWlDOztJQUVqQyxzREFBeUI7O0lBRXpCLDBEQUE4Qzs7Ozs7SUFNOUMsbURBQXFDOztJQW1CckMsc0RBQXNCOztJQXZCVixvREFBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmFzZUNvbXBvbmVudCwgRGF0YUZpZWxkVXRpbHN9IGZyb20gJ0Blci9jb3JlJztcbmltcG9ydCB7RGF0YUF0dHIsIERhdGFGaWVsZCwgRGF0YVR5cGV9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge0NvbW1vbnNVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7UG5nVGFibGVDb2x1bW5Qcm9wc30gZnJvbSAnLi4vLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHtQbmdUYWJsZUNvbXBvbmVudH0gZnJvbSAnLi4vLi4vdGFibGUvY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG5nLWZpZWxkLWRhdGEtZmlsdGVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGp1c3RpZnktY29udGVudC1lbmQgYWxpZ24taXRlbXMtZW5kXCI+XG4gICAgICA8cG5nLXF1ZXJ5LWlucHV0IFtxdWVyeUtleV09XCJxdWVyeUtleVwiIFtxdWVyeURhdGFUeXBlXT1cInF1ZXJ5RGF0YVR5cGVcIiBbcXVlcnlEYXRhQXR0cl09XCJxdWVyeURhdGFBdHRyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgWyhxdWVyeVZhbHVlKV09XCJxdWVyeVZhbHVlXCI+PC9wbmctcXVlcnktaW5wdXQ+XG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwicXVlcnlWYWx1ZVwiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJtbC0yXCI+XG4gICAgICAgPHAtYnV0dG9uXG4gICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgIGljb249XCJmYSBmYS1zZWFyY2hcIlxuICAgICAgICAgbGFiZWw9XCLmn6Xor6JcIlxuICAgICAgICAgKGNsaWNrKT1cIm9uRmlsdGVyKClcIlxuICAgICAgID48L3AtYnV0dG9uPlxuICAgIDwvc3Bhbj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJtbC0yXCI+XG4gICAgPHAtYnV0dG9uXG4gICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgIGljb249XCJmYSBmYS10cmFzaFwiXG4gICAgICBsYWJlbD1cIua4hemZpFwiXG4gICAgICAoY2xpY2spPVwiY2xlYXJGaWx0ZXIoKVwiXG4gICAgPjwvcC1idXR0b24+XG4gICAgPC9zcGFuPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5cbmV4cG9ydCBjbGFzcyBQbmdUYWJsZUZpZWxkRGF0YUZpbHRlckNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuXG4gIEBJbnB1dCgpIHF1ZXJ5S2V5OiBzdHJpbmc7XG5cbiAgQElucHV0KCkgcXVlcnlEYXRhVHlwZTogRGF0YVR5cGU7XG5cbiAgQElucHV0KCkgcXVlcnlEYXRhQXR0cjogRGF0YUF0dHI7XG5cbiAgQElucHV0KCkgcXVlcnlWYWx1ZTogYW55O1xuXG4gIEBPdXRwdXQoKSBvbkZpbHRlckNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcG5nVGFibGU6IFBuZ1RhYmxlQ29tcG9uZW50KSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHByaXZhdGUgX2NvbHVtbjogUG5nVGFibGVDb2x1bW5Qcm9wcztcblxuICBnZXQgY29sdW1uKCkge1xuICAgIHJldHVybiB0aGlzLl9jb2x1bW47XG4gIH1cblxuICBASW5wdXQoKSBzZXQgY29sdW1uKGNvbHVtbjogUG5nVGFibGVDb2x1bW5Qcm9wcykge1xuICAgIGlmICghdGhpcy5xdWVyeUtleSAmJiBjb2x1bW4pIHtcbiAgICAgIHRoaXMucXVlcnlLZXkgPSBEYXRhRmllbGRVdGlscy5nZXREZWZhdWx0RmllbGROYW1lKGNvbHVtbi5kYXRhRmllbGQpIHx8IGNvbHVtbi5rZXk7XG4gICAgfVxuICAgIGlmICghdGhpcy5xdWVyeURhdGFUeXBlICYmIGNvbHVtbikge1xuICAgICAgdGhpcy5xdWVyeURhdGFUeXBlID0gY29sdW1uLmZpbHRlckRhdGFUeXBlIHx8IGNvbHVtbi5kYXRhVHlwZTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnF1ZXJ5RGF0YUF0dHIgJiYgY29sdW1uICYmIGNvbHVtbi5kYXRhQXR0cikge1xuICAgICAgdGhpcy5xdWVyeURhdGFBdHRyID0gQ29tbW9uc1V0aWxzLmdldEFycmF5VmFsdWUoY29sdW1uLmRhdGFBdHRyKVswXTtcbiAgICB9XG4gICAgdGhpcy5fY29sdW1uID0gY29sdW1uO1xuICB9XG5cbiAgX2RhdGFGaWVsZDogRGF0YUZpZWxkO1xuXG4gIGdldCBkYXRhRmllbGQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGFGaWVsZDtcbiAgfVxuXG4gIEBJbnB1dCgpIHNldCBkYXRhRmllbGQoZGF0YUZpZWxkKSB7XG4gICAgaWYgKCF0aGlzLnF1ZXJ5S2V5ICYmIGRhdGFGaWVsZCkge1xuICAgICAgdGhpcy5xdWVyeUtleSA9IERhdGFGaWVsZFV0aWxzLmdldERlZmF1bHRGaWVsZE5hbWUoZGF0YUZpZWxkKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnF1ZXJ5RGF0YVR5cGUgJiYgZGF0YUZpZWxkKSB7XG4gICAgICB0aGlzLnF1ZXJ5RGF0YVR5cGUgPSBkYXRhRmllbGQuZGF0YVR5cGU7XG4gICAgfVxuICAgIHRoaXMuX2RhdGFGaWVsZCA9IGRhdGFGaWVsZDtcbiAgfVxuXG4gIG9uRmlsdGVyKCkge1xuICAgIHRoaXMub25GaWx0ZXJDaGFuZ2UuZW1pdCh7XG4gICAgICBrZXk6IHRoaXMucXVlcnlLZXksXG4gICAgICBjb2x1bW46IHRoaXMuY29sdW1uLFxuICAgICAgdmFsdWU6IHRoaXMucXVlcnlWYWx1ZVxuICAgIH0pO1xuICB9XG5cbiAgY2xlYXJGaWx0ZXIoKSB7XG4gICAgdGhpcy5xdWVyeVZhbHVlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub25GaWx0ZXIoKTtcbiAgfVxuXG5cbn1cbiJdfQ==