/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, forwardRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { DataAwareControlWrapperComponent } from '@er/core';
import { AggMethodsProps, DataType, Order, OverlayType } from '@er/types';
import { CommonsUtils, DataItemUtils, StatesUtils } from '@er/utils';
import * as esb from 'elastic-builder';
import { Menu, OverlayPanel } from 'primeng/primeng';
import { Table } from 'primeng/table';
import { BehaviorSubject } from 'rxjs';
import { filter, skip } from 'rxjs/operators';
import { defaultActionColumn, defaultAddButton, defaultAuditButton, defaultDeleteButton, defaultDownloadButton, defaultEditButton, defaultPngColumnProps, defaultPngTableProps, defaultRowIndexColumn, defaultViewButton } from '../../default';
import { PngTableUtils } from '../../util';
var PngTableComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngTableComponent, _super);
    function PngTableComponent(cd, router, activatedRoute) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.router = router;
        _this.activatedRoute = activatedRoute;
        _this.OVERLAY_TYPE = OverlayType;
        _this.bodyData$ = new BehaviorSubject([]);
        _this.columns$ = new BehaviorSubject(undefined);
        _this.templateNames = {
            caption: 'caption',
            spanHeader: 'spanHeader',
            header: 'header',
            headerSummary: 'headerSummary',
            body: 'body',
            frozenRows: 'frozenRows',
            cell: 'cell',
            dataCell: 'dataCell',
            footer: 'footer',
            footerSummary: 'summary',
            colGroup: 'colgroup',
            rowExpansion: 'rowexpansion',
            paginatorLeft: 'paginatorLeft',
            paginatorRight: 'paginatorRight'
        };
        _this.$defaultProps = defaultPngTableProps;
        _this.eventQuery = [];
        _this.selectedRows = [];
        _this.switch = true;
        return _this;
    }
    Object.defineProperty(PngTableComponent.prototype, "apiEntry", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$props.$ext.apiDataProps && this.$props.$ext.apiDataProps.apiEntry;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngTableComponent.prototype, "$id", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$props.$id;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PngTableComponent.prototype.onPropsInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.$props.entity) {
            if (!this.$props.caption || this.$props.caption['method']) {
                /** @type {?} */
                var caption = CommonsUtils.getValue(this.$props.caption, this.$props.entity.label);
                this.$props.caption = caption || "\u6D4F\u89C8" + (this.$props.entity.label || '');
            }
            if (!this.$props.$ext.apiDataProps) {
                this.$props.$ext.apiDataProps = {};
            }
            if (!this.$props.$ext.apiDataProps.apiEntry) {
                this.$props.$ext.apiDataProps.apiEntry = this.$props.entity.apiEntry || '';
            }
        }
        if (this.$props.columns) {
            this.resoleActionsColumn(this.$props);
            /** @type {?} */
            var order_1 = 0;
            this.$props.columns.forEach(function (column) {
                PngTableUtils.resolveColumnByDataField(column);
                CommonsUtils.defaults(column, defaultPngColumnProps);
                if (!column.order) {
                    column.order = ++order_1;
                }
                if (_this.$props.scrollable && _this.$props.scrollWidth && column.width && column.width.endsWith('%')) {
                    column.width = defaultPngColumnProps.width;
                }
                if (column.overlays) {
                    column.overlays = CommonsUtils.getArrayValue(column.overlays);
                }
                if (column.headerOverlays) {
                    column.headerOverlays = CommonsUtils.getArrayValue(column.headerOverlays);
                }
            });
        }
        if (this.$props.virtualScroll) {
            this.$props.alwaysShowPaginator = false;
            this.$props.paginator = false;
        }
        if (this.$props.scrollable) {
            CommonsUtils.set(this.$props, 'style.width', this.$props.scrollWidth);
        }
        /** @type {?} */
        var frozenColumns = this.$props.columns.filter(function (column) { return column.frozen; });
        if (frozenColumns.length > 0) {
            this.$props.frozenColumns = frozenColumns;
            if (!this.$props.$ext.rowHeight) {
                this.$props.$ext.rowHeight = '30px';
            }
            /** @type {?} */
            var frozenWidth_1 = 0;
            frozenColumns.forEach(function (column) {
                /** @type {?} */
                var width = 150;
                if (column.width) {
                    width = Number(column.width.substr(0, column.width.length - 2));
                }
                frozenWidth_1 += width || 150;
                column.styleClass = column.styleClass || '' + ' table-frozen-column';
            });
            this.$props.frozenWidth = frozenWidth_1 + "px";
        }
        this.updateColumns();
        this.apiDataProps = this.getApiDataProps();
        this.$subscriptions = StatesUtils.observe(this.$id)
            .pipe(filter(function (state) { return !!state; }), skip(1))
            .subscribe(function (state) {
            _this.table.first = 0;
            _this.load(state);
        });
        if (this.$props.$ext.dataItems) {
            this.data$.next({
                items: this.$props.$ext.dataItems,
                total: this.$props.$ext.dataItems.length
            });
        }
        StatesUtils.create(this.$id, {
            component: this
        }, true);
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    PngTableComponent.prototype.updateColumns = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var columns;
        if (!event) {
            columns = this.$props.columns.filter(function (column) { return !column.frozen; }) || [];
        }
        else {
            columns = event.value;
        }
        columns.sort(function (a, b) { return a.order - b.order; });
        this.dataColumns = columns.filter(function (column) { return !column.isActionColumn || !(column.hidden && !column.fetch); });
        if (!event) {
            columns = columns.filter(function (column) { return !column.hidden; });
        }
        this.dataColumnNames = CommonsUtils.compact(this.dataColumns.map(function (column) { return column.key; }));
        if (this.$props.frozenColumns) {
            this.$props.frozenColumns.forEach(function (column) {
                if (column.key) {
                    _this.dataColumnNames.push(column.key);
                }
            });
        }
        this.columns$.next(columns);
        if (event) {
            this.load();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableComponent.prototype.updateColAggKeys = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.column) {
            /** @type {?} */
            var column_1 = event.column;
            /** @type {?} */
            var aggProps_1 = [];
            if (event.methods && event.methods.length > 0) {
                event.methods.forEach(function (method) {
                    aggProps_1.push((/** @type {?} */ ({
                        name: column_1.key + "-" + method,
                        field: column_1.aggKey || column_1.key,
                        method: AggMethodsProps[method]['key']
                    })));
                });
            }
            column_1.aggProps = aggProps_1;
            StatesUtils.update(this.$id, {});
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableComponent.prototype.updateColFilters = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.column) {
            /** @type {?} */
            var column = event.column;
            column.filters = [];
            if (event.value) {
                column.filters.push(event.value);
            }
            StatesUtils.update(this.$id, {});
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableComponent.prototype.updateSimpleSearch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (CommonsUtils.isEmpty(event)) {
            this.simpleQuery = undefined;
        }
        else {
            if (event.indexOf('"') === -1) {
                event = "\"" + event + "\"";
            }
            this.simpleQuery = [esb.simpleQueryStringQuery(event)];
        }
        this.load();
    };
    /**
     * @param {?} key
     * @return {?}
     */
    PngTableComponent.prototype.getColumnByKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var columns = this.$props.columns.filter(function (column) { return column.key === key; });
        if (columns.length >= 1) {
            return columns[0];
        }
        else {
            return undefined;
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    PngTableComponent.prototype.getRowStyleClass = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        return CommonsUtils.getValue(this.$props.$ext.rowStyleClass, row);
    };
    /**
     * @param {?} row
     * @return {?}
     */
    PngTableComponent.prototype.getRowStyle = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        /** @type {?} */
        var style = CommonsUtils.getValue(this.$props.$ext.rowStyle, row) || {};
        if (this.$props.$ext.rowHeight) {
            style['height'] = this.$props.$ext.rowHeight;
        }
        return style;
    };
    /**
     * @param {?} column
     * @return {?}
     */
    PngTableComponent.prototype.getHeaderStyleClass = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return CommonsUtils.getValue(column.headerStyleClass, column);
    };
    /**
     * @param {?} column
     * @return {?}
     */
    PngTableComponent.prototype.getHeaderStyle = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return CommonsUtils.getValue(column.headerStyle, column);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableComponent.prototype.rowSelect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.updateTouch();
        this.value = DataItemUtils.getItemValue(event, this.$props.$ext.dataItemProps && this.$props.$ext.dataItemProps.valueKey);
    };
    /**
     * @param {?=} state
     * @return {?}
     */
    PngTableComponent.prototype.load = /**
     * @param {?=} state
     * @return {?}
     */
    function (state) {
        this.apiDataProps = this.getApiDataProps(state);
        this.cd.markForCheck();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PngTableComponent.prototype.onDataReady = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var dataPath = CommonsUtils.get(this.$props, '$ext.apiDataProps.dataPath');
        if (dataPath && dataPath !== '/') {
            this.bodyData$.next(data);
        }
        else {
            this.bodyData$.next(data.items || []);
        }
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    PngTableComponent.prototype.showOverlay = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        if (ctx && ctx.content) {
            this.overlayContext = tslib_1.__assign({ dismissable: true, showCloseIcon: true }, ctx);
            this.overlayPanel.hide();
            this.overlayPanel.toggle(ctx.$event);
            this.cd.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    PngTableComponent.prototype.hidePanel = /**
     * @return {?}
     */
    function () {
        this.overlayPanel.hide();
    };
    /**
     * @return {?}
     */
    PngTableComponent.prototype.resetQuery = /**
     * @return {?}
     */
    function () {
        this.simpleQuery = undefined;
        this.complexQuery = undefined;
    };
    /**
     * @return {?}
     */
    PngTableComponent.prototype.resetForeignQuery = /**
     * @return {?}
     */
    function () {
        this.eventQuery = [];
    };
    /**
     * @param {?} url
     * @param {?=} commands
     * @param {?=} params
     * @return {?}
     */
    PngTableComponent.prototype.navigate = /**
     * @param {?} url
     * @param {?=} commands
     * @param {?=} params
     * @return {?}
     */
    function (url, commands, params) {
        var _a;
        this.router.navigate([{ outlets: (_a = {}, _a[this.$props.$ext.routerOutlet] = tslib_1.__spread([url], commands), _a) }], {
            relativeTo: this.activatedRoute,
            skipLocationChange: false,
            queryParams: params
        });
    };
    /**
     * @return {?}
     */
    PngTableComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.$props && this.$props.$id) {
            StatesUtils.deleteState(this.$props.$id);
        }
        _super.prototype.ngOnDestroy.call(this);
    };
    /**
     * @param {?=} state
     * @return {?}
     */
    PngTableComponent.prototype.getTableQuery = /**
     * @param {?=} state
     * @return {?}
     */
    function (state) {
        var _a;
        if (state && (state.query || state.filter)) {
            this.eventQuery = tslib_1.__spread(CommonsUtils.getArrayValue(state['query'] || {}), CommonsUtils.getArrayValue(state['filter'] || {}));
        }
        /** @type {?} */
        var filters = tslib_1.__spread(this.getColumnsFilters(), this.eventQuery, this.simpleQuery || [], CommonsUtils.getArrayValue(this.complexQuery) || []);
        /** @type {?} */
        var gApiDataProps = CommonsUtils.copy(CommonsUtils.get(this.$props, '$ext.apiDataProps'));
        /** @type {?} */
        var apiFilter = gApiDataProps.filter || {};
        if (apiFilter['$and']) {
            apiFilter['$and'] = tslib_1.__spread(apiFilter['$and'], filters);
        }
        else if (apiFilter['$or']) {
            apiFilter['$and'] = filters;
        }
        else {
            apiFilter = CommonsUtils.getArrayValue(apiFilter)
                .concat(filters);
        }
        apiFilter = apiFilter.filter(function (f) { return !CommonsUtils.isEmpty(f); });
        /** @type {?} */
        var aggProps = gApiDataProps.aggProps || {};
        aggProps = CommonsUtils.getArrayValue(aggProps).concat(this.getColumnsAggs());
        aggProps = aggProps.filter(function (a) { return Object.keys(a).length > 0; });
        /** @type {?} */
        var sort = gApiDataProps.sort || [];
        /** @type {?} */
        var tableMetaData = this.table.createLazyLoadMetadata();
        sort = CommonsUtils.getArrayValue(sort);
        /** @type {?} */
        var tableSort = tableMetaData.sortField;
        if (tableSort) {
            /** @type {?} */
            var column = this.getColumnByKey(tableSort);
            /** @type {?} */
            var sortKey = (column && column.sortKey) || tableSort;
            sort.push((_a = {}, _a[sortKey] = tableMetaData.sortOrder === 1 ? Order.ASC : Order.DESC, _a));
        }
        delete gApiDataProps.filter;
        delete gApiDataProps.aggProps;
        return tslib_1.__assign({}, gApiDataProps, { filter: apiFilter, aggProps: aggProps,
            sort: sort });
    };
    /**
     * @private
     * @return {?}
     */
    PngTableComponent.prototype.getColumnsFilters = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var filters = [];
        /** @type {?} */
        var columns = (this.columns$.value || []).concat(this.$props.frozenColumns || []);
        columns
            .filter(function (column) { return column.filters; })
            .forEach(function (column) {
            return column.filters.filter(function (f) { return f; })
                .forEach(function (f) {
                /** @type {?} */
                var query;
                switch (column.filterDataType || column.dataType || (column.dataField && column.dataField.dataType) || DataType.STRING) {
                    case DataType.NUMBER:
                    case DataType.DATE:
                        if (CommonsUtils.isArray(f)) {
                            query = esb.rangeQuery(column.filterKey || column.key).gte(f[0]).lte(f[1]);
                        }
                        else {
                            query = esb.rangeQuery(column.filterKey || column.key).gte(f).lte(f);
                        }
                        break;
                    default:
                        query = esb.matchQuery(column.filterKey || column.key, f);
                }
                filters.push(query);
            });
        });
        return filters;
    };
    /**
     * @private
     * @return {?}
     */
    PngTableComponent.prototype.getColumnsAggs = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var aggs = [];
        /** @type {?} */
        var columns = (this.columns$.value || []).concat(this.$props.frozenColumns || []);
        columns
            .filter(function (column) { return column.aggProps; })
            .forEach(function (column) {
            aggs = aggs.concat(column.aggProps);
        });
        return aggs;
    };
    /**
     * @private
     * @param {?} props
     * @return {?}
     */
    PngTableComponent.prototype.resoleActionsColumn = /**
     * @private
     * @param {?} props
     * @return {?}
     */
    function (props) {
        /** @type {?} */
        var actionColumn;
        /** @type {?} */
        var actionColumnIndex = -1;
        props.columns.some(function (column, i) {
            if (column.isActionColumn) {
                actionColumn = column;
                actionColumnIndex = i;
                return true;
            }
            return false;
        });
        if (actionColumnIndex >= 0) {
            props.columns = CommonsUtils.removeByIndex(props.columns, actionColumnIndex);
        }
        if (props.$ext.hasAddAction) {
            this.addBtn = tslib_1.__assign({}, defaultAddButton, { context: this });
        }
        /** @type {?} */
        var buttons = [];
        if (props.$ext.hasViewAction) {
            buttons.push(tslib_1.__assign({}, defaultViewButton, { show: props.$ext.hasViewAction }));
        }
        if (props.$ext.hasDeleteAction) {
            buttons.push(tslib_1.__assign({}, defaultDeleteButton, { show: props.$ext.hasDeleteAction }));
        }
        if (props.$ext.hasAuditAction) {
            buttons.push(tslib_1.__assign({}, defaultAuditButton, { show: props.$ext.hasAuditAction }));
        }
        if (props.$ext.hasDownloadAction) {
            buttons.push(tslib_1.__assign({}, defaultDownloadButton, { show: props.$ext.hasDownloadAction }));
        }
        if (props.$ext.hasEditAction) {
            buttons.push(tslib_1.__assign({}, defaultEditButton, { show: props.$ext.hasEditAction }));
        }
        if (buttons.length > 0 && !actionColumn) {
            actionColumn = tslib_1.__assign({}, defaultActionColumn, actionColumn || {});
        }
        if (buttons.length > 0) {
            actionColumn.cellContent = tslib_1.__spread(CommonsUtils.getArrayValue(actionColumn.cellContent) || [], buttons);
        }
        if (actionColumn) {
            if (this.$props.$ext.frozenActionColumn) {
                actionColumn.frozen = true;
            }
            if (this.$props.$ext.rowActionsPlaceAhead) {
                ((/** @type {?} */ (this.$props.columns))).splice(0, 0, actionColumn);
            }
            else {
                this.$props.columns.push(actionColumn);
            }
        }
        if (this.$props.$ext.hasRowIndex) {
            this.$props.columns.splice(0, 0, defaultRowIndexColumn);
        }
    };
    /**
     * @private
     * @param {?=} state
     * @return {?}
     */
    PngTableComponent.prototype.getApiDataProps = /**
     * @private
     * @param {?=} state
     * @return {?}
     */
    function (state) {
        /** @type {?} */
        var tableMetaData = this.table.createLazyLoadMetadata();
        /** @type {?} */
        var tableQuery = this.getTableQuery(state);
        /** @type {?} */
        var apiDataProps = (/** @type {?} */ (tslib_1.__assign({}, tableQuery, { dataPath: '/', returnFields: this.dataColumnNames, from: tableMetaData.first, size: tableMetaData.rows })));
        apiDataProps.requestOptions = apiDataProps.requestOptions || {};
        if (!apiDataProps.requestOptions.tag) {
            apiDataProps.requestOptions.tag = this.$id;
        }
        return apiDataProps;
    };
    PngTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-table',
                    template: "<p-table #pngTable\n         (onDataReady)=\"onDataReady($event)\"\n         (onLazyLoad)=\"load($event)\"\n         (selectionChange)=\"rowSelect($event)\"\n         [(selection)]=\"selectedRows\"\n         [columns]=\"columns$|async\"\n         [context]=\"ctx\"\n         [erApiData]=\"apiDataProps\"\n         [props]=\"$props\"\n         [totalRecords]=\"(data$|async)?.total\"\n         [value]=\"bodyData$|async\"\n         erPropsBind\n>\n  <ng-template pTemplate=\"caption\">\n    <png-table-caption\n      (onSimpleSearch)=\"updateSimpleSearch($event)\"\n      [addButton]=\"addBtn\"\n      [caption]=\"$props.caption\"\n      [customerTpl]=\"template(templateNames.caption)\"\n      [hasAddAction]=\"$props.$ext.hasAddAction\"\n      [hasSearchBox]=\"$props.$ext.hasSearchBox\"\n      [hasSearchInput]=\"$props.$ext.hasSearchInput\"\n    >\n    </png-table-caption>\n    <ng-container *ngIf=\"$props.$ext.caption\">\n      <er-dyna-content [content]=\"$props.$ext.caption\" [context]=\"getEventContext()\"></er-dyna-content>\n    </ng-container>\n  </ng-template>\n\n  <ng-template let-columns pTemplate=\"colgroup\">\n    <ng-container *ngTemplateOutlet=\"colGroupTpl;\n                     context:{$implicit:$props,context:getEventContext(),columns:columns}\">\n    </ng-container>\n  </ng-template>\n\n\n  <ng-template let-columns pTemplate=\"header\">\n    <ng-container\n      *ngTemplateOutlet=\"template(templateNames.spanHeader); context:{$implicit:columns}\"></ng-container>\n    <ng-container *ngIf=\"$props.$ext.spanHeader\">\n      <span [outerHTML]=\"$props.$ext.spanHeader\"></span>\n    </ng-container>\n    <tr (onAggKeysSet)=\"updateColAggKeys($event)\"\n        (onFiltersSet)=\"updateColFilters($event)\"\n        [columns]=\"columns\"\n        [customerTpl]=\"template(templateNames.header)\"\n        png-table-header\n    >\n    </tr>\n\n    <ng-container *ngIf=\"(data$|async)?.aggs as aggValues\">\n      <tr [aggValues]=\"aggValues\"\n          [columns]=\"columns\"\n          [customerTpl]=\"template(templateNames.headerSummary)\"\n          png-table-summary\n      >\n      </tr>\n    </ng-container>\n  </ng-template>\n\n  <!--<ng-container *ngIf=\"$$props.frozenValue\">-->\n  <!--<ng-template pTemplate=\"frozenrows\" let-row let-columns=\"columns\">-->\n  <!--<ng-container *ngTemplateOutlet=\"template(templateNames.frozenRows,defaultBodyTpl);-->\n  <!--context:{$implicit:row,columns:columns,$props:$$props,table:pngTable}\">-->\n  <!--</ng-container>-->\n  <!--</ng-template>-->\n  <!--</ng-container>-->\n\n  <ng-template let-columns=\"columns\" let-expanded=\"expanded\" let-row let-rowIndex=\"rowIndex\" pTemplate=\"body\">\n    <tr [cellTpl]=\"template(templateNames.cell)\"\n        [columns]=\"columns\"\n        [customerTpl]=\"template(templateNames.body)\"\n        [dataCellTpl]=\"template(templateNames.dataCell)\"\n        [expanded]=\"expanded\"\n        [ngClass]=\"getRowStyleClass({row: row, rowIndex: rowIndex})\"\n        [ngStyle]=\"getRowStyle({row: row, rowIndex: rowIndex})\"\n        [pSelectableRowIndex]=\"rowIndex\"\n        [pSelectableRow]=\"row\"\n        [rowIndex]=\"rowIndex\"\n        [row]=\"row\"\n        png-table-body-row\n    >\n    </tr>\n  </ng-template>\n\n  <ng-template let-columns=\"columns\" let-row pTemplate=\"rowexpansion\">\n    <tr [columns]=\"dataColumns\"\n        [customerTpl]=\"template(templateNames.rowExpansion)\"\n        [rowId]=\"row[$props.dataKey || 'id']\"\n        png-table-expanded-row\n    >\n    </tr>\n  </ng-template>\n\n  <ng-template let-columns pTemplate=\"footer\">\n    <tr [columns]=\"columns\"\n        [customerTpl]=\"template(templateNames.footer)\"\n        png-table-footer\n    >\n    </tr>\n  </ng-template>\n\n  <ng-container *ngIf=\"(data$|async)?.aggs as aggValues\">\n    <ng-template pTemplate=\"summary\">\n      <tr [aggValues]=\"aggValues\"\n          [columns]=\"dataColumns\"\n          [customerTpl]=\"template(templateNames.footerSummary)\"\n          png-table-summary\n      >\n      </tr>\n    </ng-template>\n  </ng-container>\n\n  <ng-template let-state pTemplate=\"paginatorleft\">\n    <ng-container *ngIf=\"(data$|async)?.total as totalRecords\">\n      <ng-container\n        *ngTemplateOutlet=\"template(templateNames.paginatorLeft,paginationLeftTpl);context:{$implicit:state,totalRecords:totalRecords}\">\n      </ng-container>\n    </ng-container>\n  </ng-template>\n\n  <ng-template let-state pTemplate=\"paginatorright\">\n    <div class=\"d-flex align-content-center\">\n      <er-http-status [tag]=\"$id\" class=\"mr-2\"></er-http-status>\n      <ng-container *ngIf=\"$props.$ext.hasColumnSelector\">\n        <png-table-column-selector\n          (onColumnsChange)=\"updateColumns($event)\"\n          [columns]=\"columns$|async\"\n          [optionColumns]=\"$props.columns\"\n        >\n        </png-table-column-selector>\n      </ng-container>\n      <ng-container *ngIf=\"$props.$ext.hasPaginatorRight\">\n        <ng-container\n          *ngTemplateOutlet=\"template(templateNames.paginatorRight);context:{$implicit:state}\"></ng-container>\n      </ng-container>\n    </div>\n  </ng-template>\n\n\n  <ng-template #colGroupTpl let-columns=\"columns\" let-props>\n    <colgroup>\n      <col *ngIf=\"props.$ext.rowExpandable\" style=\"width: 3em\">\n      <col *ngIf=\"props.$ext.hasRowCheckbox\" style=\"width: 3em\">\n      <col *ngFor=\"let col of columns\" [ngClass]=\"getHeaderStyleClass(col)\"\n           [ngStyle]=\"getHeaderStyle(col)\"\n           [width]=\"col.width\"\n      >\n    </colgroup>\n  </ng-template>\n\n  <ng-template #defaultFrozonRowsTpl let-columns=\"columns\" let-row>\n  </ng-template>\n\n  <ng-template let-columns pTemplate=\"emptymessage\">\n    <tr>\n      <td [attr.colspan]=\"columns?.length\">\n        <strong>{{$props.$ext.emptyMessage}}</strong>\n      </td>\n    </tr>\n  </ng-template>\n</p-table>\n\n<ng-template #paginationLeftTpl let-state let-totalRecords=\"totalRecords\">\n  <span class=\"paginationLeft\"><span *ngIf=\"simpleQuery || complexQuery\"\n                                     class=\"font-weight-bold text-danger \"><u>\u641C\u7D22\u7ED3\u679C</u></span>\u663E\u793A {{totalRecords < 1 ? 0 : state.first + 1}}\n    -\n  {{totalRecords > 0 ? ((state.rows+ state.first) <= totalRecords ? (state.rows + state.first) :\n  totalRecords) : 0}}\uFF0C\u5171 {{totalRecords ? totalRecords : 0}} \u6761</span>\n</ng-template>\n\n\n<p-overlayPanel #overlayPanel [dismissable]=\"overlayContext?.dismissable\"\n                [showCloseIcon]=\"overlayContext?.showCloseIcon\"\n                [id]=\"overlayContext?.id\"\n                [ngStyle]=\"overlayContext?.overlayStyle\"\n                [styleClass]=\"overlayContext?.overlayStyleClass\">\n  <ng-container *ngIf=\"overlayContext\">\n    <ng-container [ngSwitch]=\"overlayContext.type\">\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.PANEL\">\n        <er-dyna-content [content]=\"overlayContext.content\"\n                         [context]=\"overlayContext.context\"\n                         [styleClass]=\"overlayContext.styleClass\"\n                         [style]=\"overlayContext.style\"\n        ></er-dyna-content>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.TABLE\">\n        <png-table erPropsBind [props]=\"overlayContext.content\"></png-table>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.CHART\">\n        <png-chart erPropsBind [props]=\"overlayContext.content\"></png-chart>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.MENU\">\n        <p-menu appendTo=\"body\" [popup]=\"true\" [model]=\"overlayContext.content\"></p-menu>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.TREE\">\n        <pre [erJsonViewer]=\"overlayContext.content\" openLevel=\"1\"></pre>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.FRAME\">\n        <iframe [ngClass]=\"overlayContext.styleClass\" [ngStyle]=\"overlayContext.style\"\n                [src]=\"overlayContext.content|erSafeHtml:'resource'\" frameborder=\"0\"\n                allowfullscreen></iframe>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.COMPONENT\">\n        <er-dyna-content [content]=\"overlayContext.content\"\n                         [context]=\"overlayContext.context\"\n                         [styleClass]=\"overlayContext.styleClass\"\n                         [style]=\"overlayContext.style\"\n        ></er-dyna-content>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</p-overlayPanel>\n\n<!--<div style=\"position: relative;\">-->\n<!--<p-paginator rows=\"10\"-->\n<!--(onLazyLoad)=\"load($event)\"-->\n<!--(onPageChange)=\"load($event)\"-->\n<!--[totalRecords]=\"totalRecords\"-->\n<!--[rowsPerPageOptions]=\"[10, 25]\">-->\n<!--</p-paginator>-->\n<!--<span style=\"position: absolute; top:3px; right:5px; margin: 5px;\">Total records: {{totalRecords}} </span>-->\n<!--</div>-->\n",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngTableComponent; }),
                            multi: true
                        }],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["/deep/ .ui-paginator{font-size:.8rem!important}/deep/ td.col-expandable,/deep/ th.col-expandable{width:1em}/deep/ td.col-checkbox,/deep/ th.col-checkbox{width:1em}/deep/ td.col-radio,/deep/ th.col-radio{width:5px}/deep/ td.row-index,/deep/ th.row-index{width:100px}/deep/ td.circle,/deep/ th.circle{border-radius:50%!important}/deep/ td.col-summary,/deep/ th.col-summary{background-color:#068020;color:#fff!important}"]
                }] }
    ];
    /** @nocollapse */
    PngTableComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Router },
        { type: ActivatedRoute }
    ]; };
    PngTableComponent.propDecorators = {
        table: [{ type: ViewChild, args: ['pngTable',] }],
        overlayPanel: [{ type: ViewChild, args: ['overlayPanel',] }],
        popupMenu: [{ type: ViewChild, args: [Menu,] }]
    };
    return PngTableComponent;
}(DataAwareControlWrapperComponent));
export { PngTableComponent };
if (false) {
    /** @type {?} */
    PngTableComponent.prototype.OVERLAY_TYPE;
    /** @type {?} */
    PngTableComponent.prototype.table;
    /** @type {?} */
    PngTableComponent.prototype.overlayPanel;
    /** @type {?} */
    PngTableComponent.prototype.popupMenu;
    /** @type {?} */
    PngTableComponent.prototype.bodyData$;
    /** @type {?} */
    PngTableComponent.prototype.columns$;
    /** @type {?} */
    PngTableComponent.prototype.dataColumnNames;
    /** @type {?} */
    PngTableComponent.prototype.dataColumns;
    /** @type {?} */
    PngTableComponent.prototype.templateNames;
    /** @type {?} */
    PngTableComponent.prototype.$defaultProps;
    /** @type {?} */
    PngTableComponent.prototype.simpleQuery;
    /** @type {?} */
    PngTableComponent.prototype.complexQuery;
    /** @type {?} */
    PngTableComponent.prototype.eventQuery;
    /** @type {?} */
    PngTableComponent.prototype.selectedRows;
    /** @type {?} */
    PngTableComponent.prototype.addBtn;
    /** @type {?} */
    PngTableComponent.prototype.overlayContext;
    /** @type {?} */
    PngTableComponent.prototype.switch;
    /** @type {?} */
    PngTableComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    PngTableComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PngTableComponent.prototype.activatedRoute;
}
//# sourceMappingURL=data:application/json;base64,