/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, ViewChild } from '@angular/core';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { RouteBindComponent } from '@er/core';
import { ANIMATIONS } from '@er/presets';
import { CommonsUtils, IdUtils } from '@er/utils';
import { PngTableComponent } from '../table/component/table/component';
import { PngTreeComponent } from '../tree/component';
var PngTreeNavTableComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngTreeNavTableComponent, _super);
    function PngTreeNavTableComponent(cd, router, activatedRoute) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.router = router;
        _this.activatedRoute = activatedRoute;
        _this.switchable = true;
        _this.hideTree = false;
        _this.$subscriptions = _this.router.events.subscribe(function (event) {
            if (event instanceof NavigationEnd) {
                _this.isFormOutlet = event.url.indexOf('(aux:') > 0;
                if (_this.isRestore) {
                    _this.isRestore = false;
                    _this.refresh();
                }
                _this.cd.markForCheck();
            }
        });
        return _this;
    }
    Object.defineProperty(PngTreeNavTableComponent.prototype, "isFormOutlet", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isFormOutlet;
        },
        set: /**
         * @param {?} formOutlet
         * @return {?}
         */
        function (formOutlet) {
            if (this.isFormOutlet !== formOutlet) {
                this._isFormOutlet = formOutlet;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PngTreeNavTableComponent.prototype.refresh = /**
     * @return {?}
     */
    function () {
        this.pngTable.load();
        if (this.pngTree && this.refreshTree) {
            this.refreshTree = false;
            this.pngTree.load();
        }
    };
    /**
     * @param {?} props
     * @return {?}
     */
    PngTreeNavTableComponent.prototype.beforeRoutePropsBind = /**
     * @param {?} props
     * @return {?}
     */
    function (props) {
        this.tree = undefined;
        this.table = undefined;
        this.switchable = true;
        this.hideTree = false;
        if (props.caption) {
            CommonsUtils.set(props, 'table.caption', props.caption);
        }
        return props;
    };
    /**
     * @return {?}
     */
    PngTreeNavTableComponent.prototype.afterRoutePropsBind = /**
     * @return {?}
     */
    function () {
        if (!this.tree) {
            this.switchable = false;
        }
        else {
            this.hideTree = false;
            this.switchable = true;
            this.tree.$id = IdUtils.getRandom();
            this.tree.$container = this;
            CommonsUtils.set(this.tree, '$ext.$container', this);
        }
        if (this.table) {
            this.table.$id = IdUtils.getRandom();
            this.table.$container = this;
            CommonsUtils.set(this.table, '$ext.$container', this);
        }
    };
    /**
     * @return {?}
     */
    PngTreeNavTableComponent.prototype.closeTree = /**
     * @return {?}
     */
    function () {
        this.hideTree = true;
    };
    /**
     * @return {?}
     */
    PngTreeNavTableComponent.prototype.back = /**
     * @return {?}
     */
    function () {
        this.isRestore = true;
        this.router.navigate(['./', { outlets: { aux: null } }], {
            relativeTo: this.activatedRoute
        });
    };
    PngTreeNavTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-tree-nav-table',
                    template: "\n    <div [hidden]=\"isFormOutlet\">\n      <er-fluid-container>\n        <er-left-right [hideLeft]=\"!tree || hideTree\" [switchable]=\"!!tree && switchable\">\n          <ng-template erTypedTemplate=\"left\">\n            <png-panel *ngIf=\"tree\" [icon]=\"tree.$ext?.captionIcon || 'fa fa-tree'\" [header]=\"tree.$ext?.caption || '\u7BA1\u7406\u6811'\">\n              <png-tree erPropsBind [props]=\"tree\" (onEmptyNode)=\"closeTree()\"></png-tree>\n            </png-panel>\n          </ng-template>\n          <ng-template erTypedTemplate=\"right\">\n            <div *ngIf=\"table\">\n              <div [@fadeIn]=\"true\">\n                <png-table erPropsBind [props]=\"table\"></png-table>\n              </div>\n            </div>\n          </ng-template>\n        </er-left-right>\n      </er-fluid-container>\n    </div>\n    <router-outlet name=\"aux\">\n      <ng-container *ngTemplateOutlet=\"goBack\"></ng-container>\n    </router-outlet>\n    <ng-container *ngTemplateOutlet=\"goBack\"></ng-container>\n    <ng-template #goBack>\n      <div *ngIf=\"isFormOutlet\">\n        <a (click)=\"back()\" class=\"btn btn-outline-primary\"\n           title=\"\u8FD4\u56DE\u5230\u6570\u636E\u6D4F\u89C8\"> <i class=\"fa fa-2x text-danger fa-sign-out fa-rotate-180\"></i> \u8FD4\u56DE</a>\n\n      </div>\n    </ng-template>\n  ",
                    animations: [
                        ANIMATIONS.zoomIn,
                        ANIMATIONS.fadeIn
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngTreeNavTableComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Router },
        { type: ActivatedRoute }
    ]; };
    PngTreeNavTableComponent.propDecorators = {
        tree: [{ type: Input }],
        table: [{ type: Input }],
        switchable: [{ type: Input }],
        hideTree: [{ type: Input }],
        pngTable: [{ type: ViewChild, args: [PngTableComponent,] }],
        pngTree: [{ type: ViewChild, args: [PngTreeComponent,] }]
    };
    return PngTreeNavTableComponent;
}(RouteBindComponent));
export { PngTreeNavTableComponent };
if (false) {
    /** @type {?} */
    PngTreeNavTableComponent.prototype.tree;
    /** @type {?} */
    PngTreeNavTableComponent.prototype.table;
    /** @type {?} */
    PngTreeNavTableComponent.prototype.switchable;
    /** @type {?} */
    PngTreeNavTableComponent.prototype.hideTree;
    /** @type {?} */
    PngTreeNavTableComponent.prototype.pngTable;
    /** @type {?} */
    PngTreeNavTableComponent.prototype.pngTree;
    /** @type {?} */
    PngTreeNavTableComponent.prototype.refreshTree;
    /** @type {?} */
    PngTreeNavTableComponent.prototype.isRestore;
    /** @type {?} */
    PngTreeNavTableComponent.prototype._isFormOutlet;
    /**
     * @type {?}
     * @private
     */
    PngTreeNavTableComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    PngTreeNavTableComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PngTreeNavTableComponent.prototype.activatedRoute;
}
//# sourceMappingURL=data:application/json;base64,