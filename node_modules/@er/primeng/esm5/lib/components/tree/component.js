/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, Output, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DataAwareControlWrapperComponent, HTTP_TAG_STATE$ } from '@er/core';
import { CommonsUtils, DataItemUtils, PinyinUtil, RegUtils, StatesUtils, TreeUtils } from '@er/utils';
import { Tree } from 'primeng/tree';
import { DEFAULT_PNG_TREE_PROPS, PNG_TREE_NODE_KEYS } from './types';
export { PNG_TREE_NODE_KEYS } from './types';
var PngTreeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngTreeComponent, _super);
    function PngTreeComponent(cd) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.templateNames = {
            icon: 'icon',
            node: 'node'
        };
        _this.onEmptyNode = new EventEmitter();
        _this.onLazyLoad = new EventEmitter();
        _this.$defaultProps = DEFAULT_PNG_TREE_PROPS;
        _this.modelFormatter = _this.formatModel;
        _this.valueParser = _this.parseValue;
        return _this;
    }
    Object.defineProperty(PngTreeComponent.prototype, "selection", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selection;
        },
        set: /**
         * @param {?} selection
         * @return {?}
         */
        function (selection) {
            this._selection = selection;
            this.value = selection;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PngTreeComponent.prototype.onPropsInit = /**
     * @return {?}
     */
    function () {
        this.filtered = false;
        this.loading$ = HTTP_TAG_STATE$(this.$props.$id);
        if (this.$props.$ext.dataItems) {
            this.data$.next(this.$props.$ext.dataItems);
        }
        StatesUtils.create(this.$props.$id, {
            component: this
        }, true);
    };
    /**
     * @return {?}
     */
    PngTreeComponent.prototype.load = /**
     * @return {?}
     */
    function () {
        this.apiDataProps = tslib_1.__assign({}, this.apiDataProps);
        this.cd.markForCheck();
    };
    /**
     * @param {?} model
     * @return {?}
     */
    PngTreeComponent.prototype.formatModel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (model) {
            this.selectedNodeValues = model;
        }
        return model;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PngTreeComponent.prototype.parseValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var selectedNodeValues;
        if (CommonsUtils.isArray(value)) {
            selectedNodeValues = CommonsUtils.flattenDeep(value).map(function (node) { return _this.getSelectedNodeValues(node); });
        }
        else if (CommonsUtils.isJson(value)) {
            selectedNodeValues = this.getSelectedNodeValues(value);
        }
        selectedNodeValues = CommonsUtils.flatten(selectedNodeValues);
        selectedNodeValues = CommonsUtils.unique(selectedNodeValues, this.$props.$ext.dataItemProps.idKey);
        selectedNodeValues = CommonsUtils.orderBy(selectedNodeValues, this.$props.$ext.dataItemProps.idKey, 'asc');
        if (this.$props && this.$props.$id) {
            StatesUtils.update(this.$props.$id, {
                selectedNodeValues: selectedNodeValues
            });
        }
        this.selectedNodeValues = selectedNodeValues;
        return selectedNodeValues;
    };
    /**
     * @return {?}
     */
    PngTreeComponent.prototype.expandAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.data$.value.forEach(function (node) {
            TreeUtils.expandNode(node, true, _this.$props.$ext);
        });
    };
    /**
     * @return {?}
     */
    PngTreeComponent.prototype.collapseAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.data$.value.forEach(function (node) {
            TreeUtils.expandNode(node, false, _this.$props.$ext);
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTreeComponent.prototype.filter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var data = this.applyFilter(event.target.value);
        this.data$.next(data);
        this.filtered = true;
        this.expandAll();
        //  this.cd.detectChanges();
    };
    /**
     * @param {?} filterValue
     * @return {?}
     */
    PngTreeComponent.prototype.applyFilter = /**
     * @param {?} filterValue
     * @return {?}
     */
    function (filterValue) {
        var _this = this;
        if (!filterValue) {
            this.clearFilter();
            return this.unFilteredValue;
        }
        else {
            filterValue = filterValue.toLowerCase();
            return TreeUtils.filter(this.unFilteredValue, function (node) {
                /** @type {?} */
                var py = node['$py'];
                if (!py) {
                    py = PinyinUtil.getFirstLetter(node.label);
                    node['$py'] = py;
                }
                /** @type {?} */
                var idKey = _this.$props.$ext.dataItemProps && _this.$props.$ext.dataItemProps.idKey;
                /** @type {?} */
                var sVal = ((node.data && node.data[idKey]) || '') + '';
                /** @type {?} */
                var sLab = node.label || '';
                if (/^\w+$/.test(filterValue)) {
                    return sLab.startsWith(filterValue) || sVal.startsWith(filterValue) || py.startsWith(filterValue);
                }
                else {
                    return RegUtils.test(sVal, filterValue) || RegUtils.test(py, filterValue);
                }
            });
        }
    };
    /**
     * @return {?}
     */
    PngTreeComponent.prototype.clearFilter = /**
     * @return {?}
     */
    function () {
        this.filterValue = '';
        this.data$.next(tslib_1.__spread(this.unFilteredValue));
        this.filtered = false;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    PngTreeComponent.prototype.getSelectedNodeValues = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var value = this.getSelectedNodeValue(node);
        return CommonsUtils.flattenDeep(value);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTreeComponent.prototype.onNodeExpand = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.expandedNode = event.node;
        if (!event.node.children && this.$props.$ext.lazy) {
            this.onLazyLoad.emit(this.getEventContext(event));
        }
        else {
            this.resolveNode(event.node);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTreeComponent.prototype.onNodeSelect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.selectedNode = event.node && event.node[PNG_TREE_NODE_KEYS.dataKey] || event.node;
        if (this.$props && this.$props.$id) {
            StatesUtils.update(this.$props.$id, {
                selectedNode: this.selectedNode
            });
        }
        this.updateTouch();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTreeComponent.prototype.onNodeUnSelect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.updateTouch();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTreeComponent.prototype.onTreeDataReady = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var treeNodes = this.createTreeNodes(event);
        this.initSelection(treeNodes);
        this.unFilteredValue = treeNodes;
        if (treeNodes.length > 0) {
            /** @type {?} */
            var level = this.$props.$ext.autoExpandLevel;
            /** @type {?} */
            var nodeId = void 0;
            if (this.expandedNode) {
                /** @type {?} */
                var node = this.expandedNode;
                nodeId = node['id'];
                while (node.parent) {
                    level++;
                    node = node.parent;
                }
            }
            TreeUtils.expandNode(treeNodes[0], true, this.$props.$ext, level, 1, nodeId);
        }
        else if (treeNodes.length === 0 || (treeNodes.length === 1 && !treeNodes['children'])) {
            this.onEmptyNode.emit();
        }
        if (this.$props.$ext.filter) {
            /** @type {?} */
            var filter = this.$props.$ext.filter;
            if (CommonsUtils.isString(filter)) {
                treeNodes = this.applyFilter((/** @type {?} */ (filter)));
            }
            else {
                treeNodes = filter['method'](treeNodes);
            }
        }
        this.data$.next(treeNodes);
    };
    /**
     * @param {?} treeNodes
     * @return {?}
     */
    PngTreeComponent.prototype.initSelection = /**
     * @param {?} treeNodes
     * @return {?}
     */
    function (treeNodes) {
        var _this = this;
        if (this._selection) {
            this.tree.selection = this._selection;
            this.tree.propagateUp((/** @type {?} */ (this._selection)), true);
            return;
        }
        if (this.selectedNodeValues && treeNodes) {
            this._selection = [];
            /** @type {?} */
            var values = CommonsUtils.getArrayValue(this.selectedNodeValues);
            for (var i = 0; i < values.length; i++) {
                /** @type {?} */
                var found = TreeUtils.findNode(treeNodes, values[i], this.$props.$ext);
                if (found) {
                    ((/** @type {?} */ (this._selection))).push(found);
                }
            }
            this.tree.selection = this._selection;
            ((/** @type {?} */ (this._selection))).forEach(function (node) {
                _this.tree.propagateUp(node, true);
            });
        }
    };
    /**
     * @return {?}
     */
    PngTreeComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.$props && this.$props.$id) {
            StatesUtils.deleteState(this.$props.$id);
        }
        _super.prototype.ngOnDestroy.call(this);
    };
    /**
     * @private
     * @param {?} node
     * @param {?=} nodes
     * @return {?}
     */
    PngTreeComponent.prototype.getSelectedNodeValue = /**
     * @private
     * @param {?} node
     * @param {?=} nodes
     * @return {?}
     */
    function (node, nodes) {
        if (CommonsUtils.isEmpty(node)) {
            return undefined;
        }
        if (node['isVirtual']) {
            return undefined;
        }
        nodes = nodes || [];
        /** @type {?} */
        var data = node[PNG_TREE_NODE_KEYS.dataKey];
        if (CommonsUtils.isEmpty(data)) {
            return undefined;
        }
        /** @type {?} */
        var val;
        if (this.$props.$ext.dataItemProps && this.$props.$ext.dataItemProps.valueKey) {
            val = DataItemUtils.getItemValue(data, this.$props.$ext.dataItemProps.valueKey);
        }
        else {
            val = {};
            val[this.$props.$ext.dataItemProps.idKey] = data[this.$props.$ext.dataItemProps.idKey];
            val[(/** @type {?} */ (this.$props.$ext.dataItemProps.labelKey))] = data[(/** @type {?} */ (this.$props.$ext.dataItemProps.labelKey))];
            if (this.$props.$ext.dataItemProps.typeKey) {
                val[this.$props.$ext.dataItemProps.typeKey] = data[this.$props.$ext.dataItemProps.typeKey];
            }
        }
        nodes.push(val);
        if (node[PNG_TREE_NODE_KEYS.parentKey]) {
            this.getSelectedNodeValue(node[PNG_TREE_NODE_KEYS.parentKey], nodes);
        }
        return nodes;
    };
    /**
     * @private
     * @param {?} nodes
     * @return {?}
     */
    PngTreeComponent.prototype.createTreeNodes = /**
     * @private
     * @param {?} nodes
     * @return {?}
     */
    function (nodes) {
        if (!nodes) {
            return [];
        }
        /** @type {?} */
        var treeNodes = tslib_1.__spread(nodes);
        if (this.$props.$ext.nodesFormat === 'plainArray') {
            treeNodes = TreeUtils.transNodes(treeNodes, {
                src: this.$props.$ext.dataItemProps,
                node: PNG_TREE_NODE_KEYS
            }, this.$props.$ext.root, this.$props.$ext.lazy);
        }
        if (treeNodes[0]) {
            TreeUtils.initNode(treeNodes[0], this.$props.$ext);
        }
        /** @type {?} */
        var rootNode = {};
        if (this.$props.$ext.virtualRoot) {
            if (CommonsUtils.isString(this.$props.$ext.virtualRoot)) {
                rootNode.label = (/** @type {?} */ (this.$props.$ext.virtualRoot));
            }
            else {
                rootNode = (/** @type {?} */ (this.$props.$ext.virtualRoot));
            }
            rootNode.children = treeNodes;
            rootNode['isVirtual'] = true;
            return [rootNode];
        }
        else {
            return treeNodes;
        }
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    PngTreeComponent.prototype.resolveNode = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        if (node) {
            TreeUtils.initNode(node, this.$props.$ext);
            if (node.children) {
                node.children.forEach(function (child) { return TreeUtils.initNode(child, _this.$props.$ext); });
            }
        }
    };
    PngTreeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-tree',
                    template: "<div class=\"ui-g ui-fluid\">\n\n  <div *ngIf=\"$props.$ext.hasSearchBox\" class=\"ui-g-12\">\n     <span class=\"inner-addon\">\n       <i class=\"fa fa-search text-primary left\"></i>\n       <input (keyup)=\"filter($event)\" [(ngModel)]=\"filterValue\" pInputText placeholder=\"\u8F93\u5165\u4EE3\u7801\u6216\u540D\u79F0\u9996\u5B57\u6BCD\" title=\"\u641C\u7D22\u8282\u70B9\"/>\n       <i (click)=\"clearFilter()\" *ngIf=\"filtered\" class=\"fa fa-trash text-muted right\" title=\"\u6E05\u9664\u641C\u7D22\u5185\u5BB9\"></i>\n     </span>\n  </div>\n\n  <p-card class=\"w-100\" erAnimate=\"slideInLeft\">\n    <span class=\"pull-right\">\n          <i class=\"fa fa-arrow-circle-up mr-1\" (click)=\"collapseAll()\" title=\"\u6536\u8D77\u5168\u90E8\"></i>\n          <i (click)=\"expandAll()\" class=\"fa fa-arrow-circle-down mr-1\" title=\"\u5C55\u5F00\u5168\u90E8\"></i>\n          <i (click)=\"load()\" class=\"fa fa-refresh\" title=\"\u5237\u65B0\u6811\"></i>\n      </span>\n    <p-tree #pngTree\n            erPropsBind\n            [props]=\"$props\"\n            [context]=\"ctx\"\n            [erApiData]=\"apiDataProps\"\n            [value]=\"data$|async\"\n            [(selection)]=\"selection\"\n            [loading]=\"loading$ | async\"\n            (onDataReady)=\"onTreeDataReady($event)\"\n            (onNodeExpand)=\"onNodeExpand($event)\"\n            (onNodeSelect)=\"onNodeSelect($event)\"\n            (onNodeUnselect)=\"onNodeUnSelect($event)\"\n    >\n      <ng-template pTemplate=\"default\" let-node>\n        <ng-container *ngTemplateOutlet=\"template(templateNames.node,defaultNodeTpl);\n                                  context:{$implicit: node,props:$props}\"></ng-container>\n      </ng-template>\n\n      <ng-container *ngIf=\"template(templateNames.icon)\">\n        <ng-template let-node pTemplate=\"picture\">\n          <ng-container *ngTemplateOutlet=\"template(templateNames.icon);\n                                  context:{$implicit: node,props:$props}\"></ng-container>\n        </ng-template>\n      </ng-container>\n\n      <ng-template #defaultNodeTpl let-node let-props=\"props\">\n        <!--<input type=\"radio\" name=\"tree_radio\" *ngIf=\"props.selectionMode === 'radio' && !node['children']\"/>-->\n        <span [innerHTML]=\"node['label']\" [ngClass]=\"{'ui-state-highlight':node.matched}\"></span>\n      </ng-template>\n\n    </p-tree>\n  </p-card>\n\n</div>\n",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngTreeComponent; }),
                            multi: true
                        }],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["/deep/ li:focus{outline:green solid 1px!important}/deep/ .ui-state-highlight{background-color:#9acd32!important;color:inherit!important;font-weight:700}/deep/ .ui-treenode-content-selected .ui-state-highlight{background-color:transparent!important;font-size:1.1em!important;font-weight:700;color:red!important}"]
                }] }
    ];
    /** @nocollapse */
    PngTreeComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    PngTreeComponent.propDecorators = {
        tree: [{ type: ViewChild, args: ['pngTree',] }],
        onEmptyNode: [{ type: Output }],
        onLazyLoad: [{ type: Output }]
    };
    return PngTreeComponent;
}(DataAwareControlWrapperComponent));
export { PngTreeComponent };
if (false) {
    /** @type {?} */
    PngTreeComponent.prototype.tree;
    /** @type {?} */
    PngTreeComponent.prototype.unFilteredValue;
    /** @type {?} */
    PngTreeComponent.prototype.loading$;
    /** @type {?} */
    PngTreeComponent.prototype.filtered;
    /** @type {?} */
    PngTreeComponent.prototype.filterValue;
    /** @type {?} */
    PngTreeComponent.prototype.expandedNode;
    /** @type {?} */
    PngTreeComponent.prototype.templateNames;
    /** @type {?} */
    PngTreeComponent.prototype.onEmptyNode;
    /** @type {?} */
    PngTreeComponent.prototype.onLazyLoad;
    /** @type {?} */
    PngTreeComponent.prototype.$defaultProps;
    /** @type {?} */
    PngTreeComponent.prototype.selectedNode;
    /** @type {?} */
    PngTreeComponent.prototype.selectedNodeValues;
    /** @type {?} */
    PngTreeComponent.prototype.modelFormatter;
    /** @type {?} */
    PngTreeComponent.prototype.valueParser;
    /**
     * @type {?}
     * @private
     */
    PngTreeComponent.prototype._selection;
    /**
     * @type {?}
     * @private
     */
    PngTreeComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,