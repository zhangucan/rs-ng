/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, EventEmitter, Input, Output, QueryList } from '@angular/core';
import { BaseComponent } from '@er/core';
import { PngStepComponent } from './step.component';
var PngWizardComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngWizardComponent, _super);
    function PngWizardComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.activeIndex = 0;
        _this.stepChange = new EventEmitter();
        _this.items = [];
        _this.templateNames = {
            header: 'header',
            footer: 'footer'
        };
        return _this;
    }
    /**
     * @return {?}
     */
    PngWizardComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngAfterContentInit.call(this);
        this.steps.toArray().forEach(function (step, index) {
            if (!step.styleClass) {
                step.styleClass = _this.stepStyleClass;
            }
            if (!step.style) {
                step.style = _this.style;
            }
            if (index === _this.activeIndex) {
                step.active = true;
            }
            _this.items[index] = {
                label: step.label,
                command: function (event) {
                    _this.steps.toArray().forEach(function (s) { return s.active = false; });
                    step.active = true;
                    _this.activeIndex = index;
                    _this.stepChange.emit(index);
                }
            };
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PngWizardComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this.steps) {
            return;
        }
        var _loop_1 = function (prop) {
            if (prop === 'activeIndex') {
                /** @type {?} */
                var curIndex_1 = changes[prop].currentValue;
                this_1.steps.toArray().forEach(function (step, index) {
                    /** @type {?} */
                    var selected = index === curIndex_1;
                    step.active = selected;
                    if (selected) {
                        // emit currently selected label
                        // this.change.next(step.label);
                    }
                });
                this_1.stepChange.emit(curIndex_1);
            }
        };
        var this_1 = this;
        for (var prop in changes) {
            _loop_1(prop);
        }
    };
    /**
     * @return {?}
     */
    PngWizardComponent.prototype.previous = /**
     * @return {?}
     */
    function () {
        this.activeIndex--;
        this.stepChange.emit(this.activeIndex);
        this.ngOnChanges({
            activeIndex: {
                currentValue: this.activeIndex,
                previousValue: this.activeIndex + 1,
                firstChange: false,
                isFirstChange: function () { return false; }
            }
        });
    };
    /**
     * @return {?}
     */
    PngWizardComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        this.activeIndex++;
        this.stepChange.emit(this.activeIndex);
        this.ngOnChanges({
            activeIndex: {
                currentValue: this.activeIndex,
                previousValue: this.activeIndex - 1,
                firstChange: false,
                isFirstChange: function () { return false; }
            }
        });
    };
    PngWizardComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-wizard',
                    template: "\n    <ng-container *ngIf=\"template(templateNames.header)\">\n      <ng-container *ngTemplateOutlet=\"template(templateNames.header)\"></ng-container>\n    </ng-container>\n    <p-steps [model]=\"items\" [(activeIndex)]=\"activeIndex\"\n             [ngClass]=\"styleClass\" [ngStyle]=\"style\" [readonly]=\"false\"></p-steps>\n    <ng-content></ng-content>\n    <button pButton type=\"button\" *ngIf=\"activeIndex > 0\" class=\"mr-2\"\n            (click)=\"previous()\" icon=\"fa fa-hand-o-left\" label=\"Previous\"></button>\n    <button pButton type=\"button\" *ngIf=\"activeIndex < items.length - 1\"\n            (click)=\"next()\" icon=\"fa fa-hand-o-right\" iconPos=\"right\" label=\"Next\"></button>\n    <ng-container *ngIf=\"template(templateNames.footer)\">\n      <ng-container *ngTemplateOutlet=\"template(templateNames.footer)\"></ng-container>\n    </ng-container>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host::ng-deep .ui-steps ul[role=tablist]{display:flex!important;justify-content:space-around!important}"]
                }] }
    ];
    PngWizardComponent.propDecorators = {
        activeIndex: [{ type: Input }],
        styleClass: [{ type: Input }],
        style: [{ type: Input }],
        stepStyleClass: [{ type: Input }],
        stepStyle: [{ type: Input }],
        stepChange: [{ type: Output }],
        steps: [{ type: ContentChildren, args: [PngStepComponent,] }]
    };
    return PngWizardComponent;
}(BaseComponent));
export { PngWizardComponent };
if (false) {
    /** @type {?} */
    PngWizardComponent.prototype.activeIndex;
    /** @type {?} */
    PngWizardComponent.prototype.styleClass;
    /** @type {?} */
    PngWizardComponent.prototype.style;
    /** @type {?} */
    PngWizardComponent.prototype.stepStyleClass;
    /** @type {?} */
    PngWizardComponent.prototype.stepStyle;
    /** @type {?} */
    PngWizardComponent.prototype.stepChange;
    /** @type {?} */
    PngWizardComponent.prototype.items;
    /** @type {?} */
    PngWizardComponent.prototype.steps;
    /** @type {?} */
    PngWizardComponent.prototype.templateNames;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy93aXphcmQvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUVMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsZUFBZSxFQUNmLFlBQVksRUFDWixLQUFLLEVBRUwsTUFBTSxFQUNOLFNBQVMsRUFFVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBRXZDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBSWxEO0lBb0J3Qyw4Q0FBYTtJQXBCckQ7UUFBQSxxRUF1SEM7UUFqR1UsaUJBQVcsR0FBRyxDQUFDLENBQUM7UUFVZixnQkFBVSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTdELFdBQUssR0FBZSxFQUFFLENBQUM7UUFJdkIsbUJBQWEsR0FBRztZQUNkLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLE1BQU0sRUFBRSxRQUFRO1NBQ2pCLENBQUM7O0lBOEVKLENBQUM7Ozs7SUE1RUMsK0NBQWtCOzs7SUFBbEI7UUFBQSxpQkEyQkM7UUF6QkMsaUJBQU0sa0JBQWtCLFdBQUUsQ0FBQztRQUUzQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQXNCLEVBQUUsS0FBYTtZQUNqRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDcEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFJLENBQUMsY0FBYyxDQUFDO2FBQ3ZDO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFJLENBQUMsS0FBSyxDQUFDO2FBQ3pCO1lBRUQsSUFBSSxLQUFLLEtBQUssS0FBSSxDQUFDLFdBQVcsRUFBRTtnQkFD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QUF2SEQsQ0FvQndDLGFBQWEsR0FtR3BEO1NBbkdZLGtCQUFrQjs7O0lBRTdCLHlDQUF5Qjs7SUFFekIsd0NBQXlCOztJQUV6QixtQ0FBb0I7O0lBRXBCLDRDQUFnQzs7SUFFaEMsdUNBQTJCOztJQUUzQix3Q0FBNkQ7O0lBRTdELG1DQUF1Qjs7SUFFdkIsbUNBQXNFOztJQUV0RSwyQ0FHRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPdXRwdXQsXG4gIFF1ZXJ5TGlzdCxcbiAgU2ltcGxlQ2hhbmdlc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmFzZUNvbXBvbmVudH0gZnJvbSAnQGVyL2NvcmUnO1xuaW1wb3J0IHtNZW51SXRlbX0gZnJvbSAncHJpbWVuZy9jb21wb25lbnRzL2NvbW1vbi9hcGknO1xuaW1wb3J0IHtQbmdTdGVwQ29tcG9uZW50fSBmcm9tICcuL3N0ZXAuY29tcG9uZW50JztcblxuZXhwb3J0IHtQbmdXaXphcmRQcm9wc30gZnJvbSAnLi90eXBlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG5nLXdpemFyZCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInRlbXBsYXRlKHRlbXBsYXRlTmFtZXMuaGVhZGVyKVwiPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cInRlbXBsYXRlKHRlbXBsYXRlTmFtZXMuaGVhZGVyKVwiPjwvbmctY29udGFpbmVyPlxuICAgIDwvbmctY29udGFpbmVyPlxuICAgIDxwLXN0ZXBzIFttb2RlbF09XCJpdGVtc1wiIFsoYWN0aXZlSW5kZXgpXT1cImFjdGl2ZUluZGV4XCJcbiAgICAgICAgICAgICBbbmdDbGFzc109XCJzdHlsZUNsYXNzXCIgW25nU3R5bGVdPVwic3R5bGVcIiBbcmVhZG9ubHldPVwiZmFsc2VcIj48L3Atc3RlcHM+XG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIDxidXR0b24gcEJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgKm5nSWY9XCJhY3RpdmVJbmRleCA+IDBcIiBjbGFzcz1cIm1yLTJcIlxuICAgICAgICAgICAgKGNsaWNrKT1cInByZXZpb3VzKClcIiBpY29uPVwiZmEgZmEtaGFuZC1vLWxlZnRcIiBsYWJlbD1cIlByZXZpb3VzXCI+PC9idXR0b24+XG4gICAgPGJ1dHRvbiBwQnV0dG9uIHR5cGU9XCJidXR0b25cIiAqbmdJZj1cImFjdGl2ZUluZGV4IDwgaXRlbXMubGVuZ3RoIC0gMVwiXG4gICAgICAgICAgICAoY2xpY2spPVwibmV4dCgpXCIgaWNvbj1cImZhIGZhLWhhbmQtby1yaWdodFwiIGljb25Qb3M9XCJyaWdodFwiIGxhYmVsPVwiTmV4dFwiPjwvYnV0dG9uPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJ0ZW1wbGF0ZSh0ZW1wbGF0ZU5hbWVzLmZvb3RlcilcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0ZW1wbGF0ZSh0ZW1wbGF0ZU5hbWVzLmZvb3RlcilcIj48L25nLWNvbnRhaW5lcj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgYCxcbiAgc3R5bGVVcmxzOiBbJ3N0eWxlcy5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFBuZ1dpemFyZENvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkNoYW5nZXMge1xuXG4gIEBJbnB1dCgpIGFjdGl2ZUluZGV4ID0gMDtcblxuICBASW5wdXQoKSBzdHlsZUNsYXNzOiBhbnk7XG5cbiAgQElucHV0KCkgc3R5bGU6IGFueTtcblxuICBASW5wdXQoKSBzdGVwU3R5bGVDbGFzczogc3RyaW5nO1xuXG4gIEBJbnB1dCgpIHN0ZXBTdHlsZTogc3RyaW5nO1xuXG4gIEBPdXRwdXQoKSBzdGVwQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBpdGVtczogTWVudUl0ZW1bXSA9IFtdO1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oUG5nU3RlcENvbXBvbmVudCkgc3RlcHM6IFF1ZXJ5TGlzdDxQbmdTdGVwQ29tcG9uZW50PjtcblxuICB0ZW1wbGF0ZU5hbWVzID0ge1xuICAgIGhlYWRlcjogJ2hlYWRlcicsXG4gICAgZm9vdGVyOiAnZm9vdGVyJ1xuICB9O1xuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcblxuICAgIHN1cGVyLm5nQWZ0ZXJDb250ZW50SW5pdCgpO1xuXG4gICAgdGhpcy5zdGVwcy50b0FycmF5KCkuZm9yRWFjaCgoc3RlcDogUG5nU3RlcENvbXBvbmVudCwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgaWYgKCFzdGVwLnN0eWxlQ2xhc3MpIHtcbiAgICAgICAgc3RlcC5zdHlsZUNsYXNzID0gdGhpcy5zdGVwU3R5bGVDbGFzcztcbiAgICAgIH1cblxuICAgICAgaWYgKCFzdGVwLnN0eWxlKSB7XG4gICAgICAgIHN0ZXAuc3R5bGUgPSB0aGlzLnN0eWxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5kZXggPT09IHRoaXMuYWN0aXZlSW5kZXgpIHtcbiAgICAgICAgc3RlcC5hY3RpdmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLml0ZW1zW2luZGV4XSA9IHtcbiAgICAgICAgbGFiZWw6IHN0ZXAubGFiZWwsXG4gICAgICAgIGNvbW1hbmQ6IChldmVudDogYW55KSA9PiB7XG4gICAgICAgICAgdGhpcy5zdGVwcy50b0FycmF5KCkuZm9yRWFjaCgoczogUG5nU3RlcENvbXBvbmVudCkgPT4gcy5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICAgICAgc3RlcC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSBpbmRleDtcbiAgICAgICAgICB0aGlzLnN0ZXBDaGFuZ2UuZW1pdChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKCF0aGlzLnN0ZXBzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBwcm9wIGluIGNoYW5nZXMpIHtcbiAgICAgIGlmIChwcm9wID09PSAnYWN0aXZlSW5kZXgnKSB7XG4gICAgICAgIGNvbnN0IGN1ckluZGV4ID0gY2hhbmdlc1twcm9wXS5jdXJyZW50VmFsdWU7XG4gICAgICAgIHRoaXMuc3RlcHMudG9BcnJheSgpLmZvckVhY2goKHN0ZXA6IFBuZ1N0ZXBDb21wb25lbnQsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IGluZGV4ID09PSBjdXJJbmRleDtcbiAgICAgICAgICBzdGVwLmFjdGl2ZSA9IHNlbGVjdGVkO1xuICAgICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICAgICAgLy8gZW1pdCBjdXJyZW50bHkgc2VsZWN0ZWQgbGFiZWxcbiAgICAgICAgICAgIC8vIHRoaXMuY2hhbmdlLm5leHQoc3RlcC5sYWJlbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdGVwQ2hhbmdlLmVtaXQoY3VySW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByZXZpb3VzKCkge1xuICAgIHRoaXMuYWN0aXZlSW5kZXgtLTtcbiAgICB0aGlzLnN0ZXBDaGFuZ2UuZW1pdCh0aGlzLmFjdGl2ZUluZGV4KTtcbiAgICB0aGlzLm5nT25DaGFuZ2VzKHtcbiAgICAgIGFjdGl2ZUluZGV4OiB7XG4gICAgICAgIGN1cnJlbnRWYWx1ZTogdGhpcy5hY3RpdmVJbmRleCxcbiAgICAgICAgcHJldmlvdXNWYWx1ZTogdGhpcy5hY3RpdmVJbmRleCArIDEsXG4gICAgICAgIGZpcnN0Q2hhbmdlOiBmYWxzZSxcbiAgICAgICAgaXNGaXJzdENoYW5nZTogKCkgPT4gZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgdGhpcy5hY3RpdmVJbmRleCsrO1xuICAgIHRoaXMuc3RlcENoYW5nZS5lbWl0KHRoaXMuYWN0aXZlSW5kZXgpO1xuICAgIHRoaXMubmdPbkNoYW5nZXMoe1xuICAgICAgYWN0aXZlSW5kZXg6IHtcbiAgICAgICAgY3VycmVudFZhbHVlOiB0aGlzLmFjdGl2ZUluZGV4LFxuICAgICAgICBwcmV2aW91c1ZhbHVlOiB0aGlzLmFjdGl2ZUluZGV4IC0gMSxcbiAgICAgICAgZmlyc3RDaGFuZ2U6IGZhbHNlLFxuICAgICAgICBpc0ZpcnN0Q2hhbmdlOiAoKSA9PiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==