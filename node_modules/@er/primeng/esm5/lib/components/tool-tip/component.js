/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, HostListener, Input, Optional, ViewChild } from '@angular/core';
import { ControlContainer, FormControl } from '@angular/forms';
import { FormUtils } from '@er/utils';
import { ValidateUtils } from '@er/validate';
import { DomHandler } from 'primeng/primeng';
/**
 * <png-tooltip [control]="ngForm.get('start')">
 * <input pInputText formControlName="start">
 * </png-tooltip>
 */
var ValidateMessageTooltipComponent = /** @class */ (function () {
    function ValidateMessageTooltipComponent(domHandler, controlContainer) {
        this.domHandler = domHandler;
        this.controlContainer = controlContainer;
        this.tooltipPosition = 'right';
    }
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.control && this.controlContainer) {
            /** @type {?} */
            var form = this.controlContainer.formDirective ? ((/** @type {?} */ (this.controlContainer.formDirective))).form : null;
            if (form) {
                this.control = FormUtils.getFormControl.apply(FormUtils, tslib_1.__spread([form], this.controlContainer.path, [this.controlName]));
            }
        }
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.onMouseEnter = /**
     * @return {?}
     */
    function () {
        if (this.control.invalid) {
            this.showErrMsg();
        }
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.onMouseLeave = /**
     * @return {?}
     */
    function () {
        this.hide();
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.onFocusIn = /**
     * @return {?}
     */
    function () {
        if (this.control.invalid) {
            this.showErrMsg();
        }
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.onFocusOut = /**
     * @return {?}
     */
    function () {
        this.hide();
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.onKeyup = /**
     * @return {?}
     */
    function () {
        if (this.control.invalid) {
            this.showErrMsg();
        }
        else {
            this.hide();
        }
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.showErrMsg = /**
     * @return {?}
     */
    function () {
        this.errorMessage = this.getErrorMsg();
        if (this.errorMessage !== null && this.errorMessage !== undefined) {
            this.show();
        }
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.getErrorMsg = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var errMsgs = ValidateUtils.getErrorMessage(this.control.errors, this.messages);
        if (Object.keys(errMsgs).length > 0) {
            return errMsgs[Object.keys(errMsgs)[0]];
        }
        return undefined;
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.ngOnDestroy();
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        /** 如果存在则不新建，只需要修改里面的内容 **/
        if (!this.container) {
            this.create();
        }
        else {
            this.domHandler.findSingle(this.container, '.ui-tooltip-text').innerText = this.errorMessage;
        }
        /** @type {?} */
        var offset = this.domHandler.getOffset(this.in.nativeElement);
        /** @type {?} */
        var targetTop = offset.top;
        /** @type {?} */
        var targetLeft = offset.left;
        /** @type {?} */
        var left;
        /** @type {?} */
        var top;
        this.container.style.display = 'block';
        switch (this.tooltipPosition) {
            case 'right':
                left = targetLeft + this.domHandler.getOuterWidth(this.in.nativeElement);
                top = targetTop + (this.domHandler.getOuterHeight(this.in.nativeElement) - this.domHandler.getOuterHeight(this.container)) / 2;
                break;
            case 'left':
                left = targetLeft - this.domHandler.getOuterWidth(this.container);
                top = targetTop + (this.domHandler.getOuterHeight(this.in.nativeElement) - this.domHandler.getOuterHeight(this.container)) / 2;
                break;
            case 'top':
                left = targetLeft + (this.domHandler.getOuterWidth(this.in.nativeElement) - this.domHandler.getOuterWidth(this.container)) / 2;
                top = targetTop - this.domHandler.getOuterHeight(this.container);
                break;
            case 'bottom':
                left = targetLeft + (this.domHandler.getOuterWidth(this.in.nativeElement) - this.domHandler.getOuterWidth(this.container)) / 2;
                top = targetTop + this.domHandler.getOuterHeight(this.in.nativeElement);
                break;
        }
        this.container.style.left = left + 'px';
        this.container.style.top = top + 'px';
        this.container.style.zIndex = 999999; // different from PrimeNg
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.create = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var styleClass = 'ui-widget ui-tooltip ui-tooltip-' + this.tooltipPosition;
        this.container = document.createElement('div');
        if (this.tooltipStyleClass) {
            styleClass += ' ' + this.tooltipStyleClass;
        }
        this.container.className = styleClass;
        /** @type {?} */
        var tooltipArrow = document.createElement('div');
        tooltipArrow.className = 'ui-tooltip-arrow';
        this.container.appendChild(tooltipArrow);
        /** @type {?} */
        var tooltipText = document.createElement('div');
        tooltipText.className = 'ui-tooltip-text ui-shadow ui-corner-all';
        tooltipText.innerHTML = this.errorMessage;
        if (this.positionStyle) {
            this.container.style.position = this.positionStyle;
        }
        this.container.appendChild(tooltipText);
        document.body.appendChild(this.container);
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.container && this.container.parentElement) {
            document.body.removeChild(this.container);
        }
        this.container = null;
    };
    ValidateMessageTooltipComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-tooltip',
                    template: "\n    <div #in style=\"display:inline-block;position:relative\">\n      <ng-content></ng-content>\n    </div>\n  ",
                    providers: [DomHandler]
                }] }
    ];
    /** @nocollapse */
    ValidateMessageTooltipComponent.ctorParameters = function () { return [
        { type: DomHandler },
        { type: ControlContainer, decorators: [{ type: Optional }] }
    ]; };
    ValidateMessageTooltipComponent.propDecorators = {
        tooltipPosition: [{ type: Input }],
        control: [{ type: Input }],
        controlName: [{ type: Input }],
        positionStyle: [{ type: Input }],
        tooltipStyleClass: [{ type: Input }],
        messages: [{ type: Input }],
        in: [{ type: ViewChild, args: ['in',] }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }],
        onFocusIn: [{ type: HostListener, args: ['focusin',] }],
        onFocusOut: [{ type: HostListener, args: ['focusout',] }],
        onKeyup: [{ type: HostListener, args: ['keyup',] }]
    };
    return ValidateMessageTooltipComponent;
}());
export { ValidateMessageTooltipComponent };
if (false) {
    /** @type {?} */
    ValidateMessageTooltipComponent.prototype.tooltipPosition;
    /** @type {?} */
    ValidateMessageTooltipComponent.prototype.control;
    /** @type {?} */
    ValidateMessageTooltipComponent.prototype.controlName;
    /** @type {?} */
    ValidateMessageTooltipComponent.prototype.positionStyle;
    /** @type {?} */
    ValidateMessageTooltipComponent.prototype.tooltipStyleClass;
    /** @type {?} */
    ValidateMessageTooltipComponent.prototype.messages;
    /** @type {?} */
    ValidateMessageTooltipComponent.prototype.errorMessage;
    /** @type {?} */
    ValidateMessageTooltipComponent.prototype.container;
    /** @type {?} */
    ValidateMessageTooltipComponent.prototype.in;
    /**
     * @type {?}
     * @private
     */
    ValidateMessageTooltipComponent.prototype.domHandler;
    /**
     * @type {?}
     * @private
     */
    ValidateMessageTooltipComponent.prototype.controlContainer;
}
//# sourceMappingURL=data:application/json;base64,