/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { ApiUtils, BaseComponent } from '@er/core';
import { ChartType } from '@er/types';
import { ChartUtils, CommonsUtils, IdUtils } from '@er/utils';
import { BehaviorSubject } from 'rxjs';
var PngChartComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngChartComponent, _super);
    function PngChartComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = ChartType.BAR;
        _this.plugins = [];
        _this.responsive = true;
        _this.switchable = true;
        _this.templateNames = {
            header: 'header'
        };
        _this.onDataSelect = new EventEmitter();
        _this.data$ = new BehaviorSubject(undefined);
        _this.chartTypes = [
            { label: '柱状图', value: ChartType.BAR, icon: 'fa fa-bar-chart' },
            { label: '圆饼图', value: ChartType.PIE, icon: 'fa fa-pie-chart' },
            { label: '曲线图', value: ChartType.LINE, icon: 'fa fa-line-chart' },
            { label: '雷达图', value: ChartType.RADAR, icon: 'fa fa-bar' },
            { label: '区域图', value: ChartType.AREA, icon: 'fa fa-area-chart' },
            { label: '环形图', value: ChartType.DOUGHNUT, icon: 'fa fa-circle' }
        ];
        return _this;
    }
    Object.defineProperty(PngChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this.data$.value;
        },
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this.data$.next(data || {});
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    PngChartComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.rawData = undefined;
        this.buildChart();
    };
    /**
     * @return {?}
     */
    PngChartComponent.prototype.changeType = /**
     * @return {?}
     */
    function () {
        this.buildChart();
    };
    /**
     * @return {?}
     */
    PngChartComponent.prototype.reBuildChart = /**
     * @return {?}
     */
    function () {
        this.rawData = undefined;
        this.buildChart();
    };
    /**
     * @return {?}
     */
    PngChartComponent.prototype.buildChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.$id) {
            this.$id = IdUtils.getRandom();
        }
        if (this.rawData) {
            this.resolvedRawData(this.rawData);
        }
        else if (this.dataSource) {
            /** @type {?} */
            var ds = this.dataSource;
            if (!ds.hasOwnProperty('apiDataProps')) {
                /** @type {?} */
                var apiDataProps = ds;
                ds = {};
                ds['apiDataProps'] = apiDataProps;
            }
            if (this.resolveDataSource) {
                ds = this.resolveDataSource.method((/** @type {?} */ (ds)));
            }
            ApiUtils.batchFetch(ds, this.$id)
                .subscribe(function (data) {
                _this.rawData = data;
                _this.resolvedRawData(_this.rawData);
            });
        }
    };
    /**
     * @param {?} rawData
     * @return {?}
     */
    PngChartComponent.prototype.resolvedRawData = /**
     * @param {?} rawData
     * @return {?}
     */
    function (rawData) {
        var _this = this;
        if (!CommonsUtils.isEmpty(rawData)) {
            /** @type {?} */
            var data = void 0;
            /** @type {?} */
            var datasets_1 = [];
            /** @type {?} */
            var labels_1 = [];
            if (CommonsUtils.isFunction(this.dimensions)) {
                data = ((/** @type {?} */ (this.dimensions)))(rawData);
            }
            else {
                if (this.dimensions) {
                    /** @type {?} */
                    var dimensions = CommonsUtils.getArrayValue(this.dimensions);
                    dimensions.forEach(function (dimension, index) {
                        if (_this.resolveDimension) {
                            dimension = _this.resolveDimension.method(dimension);
                        }
                        /** @type {?} */
                        var chartData = ChartUtils.buildChartData(rawData, {
                            type: _this.type,
                            dimension: dimension,
                            dataItemProps: _this.dataItemProps
                        }, index);
                        datasets_1.push.apply(datasets_1, tslib_1.__spread(chartData.datasets));
                        if (labels_1.length === 0) {
                            labels_1 = chartData.labels;
                        }
                    });
                    data = { labels: labels_1, datasets: datasets_1 };
                }
                else {
                    data = ChartUtils.buildChartData(rawData, {
                        type: this.type,
                        dataItemProps: this.dataItemProps
                    });
                }
            }
            this.data = data;
        }
        else {
            this.data = {};
        }
    };
    PngChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-chart',
                    template: "\n    <p-panel [toggleable]=\"true\" [showHeader]=\"!!caption\">\n      <p-header>\n        <i [ngClass]=\"captionIcon || 'fa fa-bar-chart'\"></i>\n        <span [innerHTML]=\"caption|erSafeHtml\"></span>\n        <ng-container *ngTemplateOutlet=\"templates[templateNames.header]\"></ng-container>\n      </p-header>\n      <er-http-status class=\"mr-2\" [tag]=\"$id\"></er-http-status>\n      <div class=\"p-3\" *ngIf=\"switchable\">\n        <p-selectButton erPosition=\"center\" [options]=\"chartTypes\" [(ngModel)]=\"type\" (onChange)=\"changeType()\"></p-selectButton>\n      </div>\n      <p-chart\n        [type]=\"type\"\n        [options]=\"options\"\n        [data]=\"data$|async\"\n        [plugins]=\"plugins\"\n        [width]=\"width \"\n        [height]=\"height\"\n        [responsive]=\"responsive\"\n        (onDataSelect)=\"onDataSelect.emit($event)\"\n      >\n      </p-chart>\n    </p-panel>\n\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    PngChartComponent.propDecorators = {
        $id: [{ type: Input }],
        type: [{ type: Input }],
        rawData: [{ type: Input }],
        options: [{ type: Input }],
        caption: [{ type: Input }],
        captionIcon: [{ type: Input }],
        query: [{ type: Input }],
        plugins: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        responsive: [{ type: Input }],
        switchable: [{ type: Input }],
        dataSource: [{ type: Input }],
        dataItemProps: [{ type: Input }],
        dimensions: [{ type: Input }],
        resolveDataSource: [{ type: Input }],
        resolveDimension: [{ type: Input }],
        onDataSelect: [{ type: Output }],
        data: [{ type: Input }]
    };
    return PngChartComponent;
}(BaseComponent));
export { PngChartComponent };
if (false) {
    /** @type {?} */
    PngChartComponent.prototype.$id;
    /** @type {?} */
    PngChartComponent.prototype.type;
    /** @type {?} */
    PngChartComponent.prototype.rawData;
    /** @type {?} */
    PngChartComponent.prototype.options;
    /** @type {?} */
    PngChartComponent.prototype.caption;
    /** @type {?} */
    PngChartComponent.prototype.captionIcon;
    /** @type {?} */
    PngChartComponent.prototype.query;
    /** @type {?} */
    PngChartComponent.prototype.plugins;
    /** @type {?} */
    PngChartComponent.prototype.width;
    /** @type {?} */
    PngChartComponent.prototype.height;
    /** @type {?} */
    PngChartComponent.prototype.responsive;
    /** @type {?} */
    PngChartComponent.prototype.switchable;
    /** @type {?} */
    PngChartComponent.prototype.dataSource;
    /** @type {?} */
    PngChartComponent.prototype.dataItemProps;
    /** @type {?} */
    PngChartComponent.prototype.dimensions;
    /** @type {?} */
    PngChartComponent.prototype.resolveDataSource;
    /** @type {?} */
    PngChartComponent.prototype.resolveDimension;
    /** @type {?} */
    PngChartComponent.prototype.templateNames;
    /** @type {?} */
    PngChartComponent.prototype.onDataSelect;
    /** @type {?} */
    PngChartComponent.prototype.data$;
    /** @type {?} */
    PngChartComponent.prototype.chartTypes;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9jaGFydC9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQXFCLE1BQU0sRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDaEksT0FBTyxFQUFDLFFBQVEsRUFBRSxhQUFhLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDakQsT0FBTyxFQUFtRSxTQUFTLEVBQTRCLE1BQU0sV0FBVyxDQUFDO0FBQ2pJLE9BQU8sRUFBQyxVQUFVLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUU1RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRXJDO0lBOEJ1Qyw2Q0FBYTtJQTlCcEQ7UUFBQSxxRUF3SkM7UUF2SFUsVUFBSSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUM7UUFNckIsYUFBTyxHQUFVLEVBQUUsQ0FBQztRQUdwQixnQkFBVSxHQUFHLElBQUksQ0FBQztRQUNsQixnQkFBVSxHQUFHLElBQUksQ0FBQztRQU8zQixtQkFBYSxHQUFHO1lBQ2QsTUFBTSxFQUFFLFFBQVE7U0FDakIsQ0FBQztRQUVRLGtCQUFZLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFFL0QsV0FBSyxHQUF3QixJQUFJLGVBQWUsQ0FBSyxTQUFTLENBQUMsQ0FBQztRQUVoRSxnQkFBVSxHQUFHO1lBQ1gsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBQztZQUM3RCxFQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFDO1lBQzdELEVB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QkF2SkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxXQUFXO29CQUNyQixRQUFRLEVBQUUseTVCQXdCVDtvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7OztzQkFJRSxLQUFLO3VCQUNMLEtBQUs7MEJBQ0wsS0FBSzswQkFDTCxLQUFLOzBCQUNMLEtBQUs7OEJBQ0wsS0FBSzt3QkFDTCxLQUFLOzBCQUNMLEtBQUs7d0JBQ0wsS0FBSzt5QkFDTCxLQUFLOzZCQUNMLEtBQUs7NkJBQ0wsS0FBSzs2QkFDTCxLQUFLO2dDQUNMLEtBQUs7NkJBQ0wsS0FBSztvQ0FDTCxLQUFLO21DQUNMLEtBQUs7K0JBTUwsTUFBTTt1QkFhTixLQUFLOztJQXFGUix3QkFBQztDQUFBLEFBeEpELENBOEJ1QyxhQUFhLEdBMEhuRDtTQTFIWSxpQkFBaUI7OztJQUU1QixnQ0FBcUI7O0lBQ3JCLGlDQUE4Qjs7SUFDOUIsb0NBQXVCOztJQUN2QixvQ0FBcUI7O0lBQ3JCLG9DQUF5Qjs7SUFDekIsd0NBQTZCOztJQUM3QixrQ0FBaUM7O0lBQ2pDLG9DQUE2Qjs7SUFDN0Isa0NBQXVCOztJQUN2QixtQ0FBd0I7O0lBQ3hCLHVDQUEyQjs7SUFDM0IsdUNBQTJCOztJQUMzQix1Q0FBZ0U7O0lBQ2hFLDBDQUFzQzs7SUFDdEMsdUNBQXVGOztJQUN2Riw4Q0FBeUU7O0lBQ3pFLDZDQUF1Rjs7SUFFdkYsMENBRUU7O0lBRUYseUNBQStEOztJQUUvRCxrQ0FBZ0U7O0lBRWhFLHVDQU9FIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QXBpVXRpbHMsIEJhc2VDb21wb25lbnR9IGZyb20gJ0Blci9jb3JlJztcbmltcG9ydCB7QXBpRGF0YVByb3BzLCBDaGFydERhdGFQcm9wcywgQ2hhcnREYXRhU2V0c1Byb3BzLCBDaGFydERpbWVuc2lvbiwgQ2hhcnRUeXBlLCBEYXRhSXRlbVByb3BzLCBEYXRhU291cmNlfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDaGFydFV0aWxzLCBDb21tb25zVXRpbHMsIElkVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge1F1ZXJ5fSBmcm9tICdlbGFzdGljLWJ1aWxkZXInO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3R9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwbmctY2hhcnQnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxwLXBhbmVsIFt0b2dnbGVhYmxlXT1cInRydWVcIiBbc2hvd0hlYWRlcl09XCIhIWNhcHRpb25cIj5cbiAgICAgIDxwLWhlYWRlcj5cbiAgICAgICAgPGkgW25nQ2xhc3NdPVwiY2FwdGlvbkljb24gfHwgJ2ZhIGZhLWJhci1jaGFydCdcIj48L2k+XG4gICAgICAgIDxzcGFuIFtpbm5lckhUTUxdPVwiY2FwdGlvbnxlclNhZmVIdG1sXCI+PC9zcGFuPlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwidGVtcGxhdGVzW3RlbXBsYXRlTmFtZXMuaGVhZGVyXVwiPjwvbmctY29udGFpbmVyPlxuICAgICAgPC9wLWhlYWRlcj5cbiAgICAgIDxlci1odHRwLXN0YXR1cyBjbGFzcz1cIm1yLTJcIiBbdGFnXT1cIiRpZFwiPjwvZXItaHR0cC1zdGF0dXM+XG4gICAgICA8ZGl2IGNsYXNzPVwicC0zXCIgKm5nSWY9XCJzd2l0Y2hhYmxlXCI+XG4gICAgICAgIDxwLXNlbGVjdEJ1dHRvbiBlclBvc2l0aW9uPVwiY2VudGVyXCIgW29wdGlvbnNdPVwiY2hhcnRUeXBlc1wiIFsobmdNb2RlbCldPVwidHlwZVwiIChvbkNoYW5nZSk9XCJjaGFuZ2VUeXBlKClcIj48L3Atc2VsZWN0QnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8cC1jaGFydFxuICAgICAgICBbdHlwZV09XCJ0eXBlXCJcbiAgICAgICAgW29wdGlvbnNdPVwib3B0aW9uc1wiXG4gICAgICAgIFtkYXRhXT1cImRhdGEkfGFzeW5jXCJcbiAgICAgICAgW3BsdWdpbnNdPVwicGx1Z2luc1wiXG4gICAgICAgIFt3aWR0aF09XCJ3aWR0aCBcIlxuICAgICAgICBbaGVpZ2h0XT1cImhlaWdodFwiXG4gICAgICAgIFtyZXNwb25zaXZlXT1cInJlc3BvbnNpdmVcIlxuICAgICAgICAob25EYXRhU2VsZWN0KT1cIm9uRGF0YVNlbGVjdC5lbWl0KCRldmVudClcIlxuICAgICAgPlxuICAgICAgPC9wLWNoYXJ0PlxuICAgIDwvcC1wYW5lbD5cblxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcblxuZXhwb3J0IGNsYXNzIFBuZ0NoYXJ0Q29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcblxuICBASW5wdXQoKSAkaWQ6IHN0cmluZztcbiAgQElucHV0KCkgdHlwZSA9IENoYXJ0VHlwZS5CQVI7XG4gIEBJbnB1dCgpIHJhd0RhdGE6IHt9W107XG4gIEBJbnB1dCgpIG9wdGlvbnM6IHt9O1xuICBASW5wdXQoKSBjYXB0aW9uOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNhcHRpb25JY29uOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHF1ZXJ5PzogUXVlcnkgfCBRdWVyeVtdO1xuICBASW5wdXQoKSBwbHVnaW5zOiBhbnlbXSA9IFtdO1xuICBASW5wdXQoKSB3aWR0aDogc3RyaW5nO1xuICBASW5wdXQoKSBoZWlnaHQ6IHN0cmluZztcbiAgQElucHV0KCkgcmVzcG9uc2l2ZSA9IHRydWU7XG4gIEBJbnB1dCgpIHN3aXRjaGFibGUgPSB0cnVlO1xuICBASW5wdXQoKSBkYXRhU291cmNlOiBEYXRhU291cmNlIHwgQXBpRGF0YVByb3BzIHwgQXBpRGF0YVByb3BzW107XG4gIEBJbnB1dCgpIGRhdGFJdGVtUHJvcHM6IERhdGFJdGVtUHJvcHM7XG4gIEBJbnB1dCgpIGRpbWVuc2lvbnM6IENoYXJ0RGltZW5zaW9uIHwgQ2hhcnREaW1lbnNpb25bXSB8ICgocmF3RGF0YSkgPT4gQ2hhcnREYXRhUHJvcHMpO1xuICBASW5wdXQoKSByZXNvbHZlRGF0YVNvdXJjZTogeyBtZXRob2Q6ICgoZHM6IERhdGFTb3VyY2UpID0+IERhdGFTb3VyY2UpIH07XG4gIEBJbnB1dCgpIHJlc29sdmVEaW1lbnNpb246IHsgbWV0aG9kOiAoKGRpbWVuc2lvbjogQ2hhcnREaW1lbnNpb24pID0+IENoYXJ0RGltZW5zaW9uKSB9O1xuXG4gIHRlbXBsYXRlTmFtZXMgPSB7XG4gICAgaGVhZGVyOiAnaGVhZGVyJ1xuICB9O1xuXG4gIEBPdXRwdXQoKSBvbkRhdGFTZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGRhdGEkOiBCZWhhdmlvclN1YmplY3Q8e30+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDx7fT4odW5kZWZpbmVkKTtcblxuICBjaGFydFR5cGVzID0gW1xuICAgIHtsYWJlbDogJ+afseeKtuWbvicsIHZhbHVlOiBDaGFydFR5cGUuQkFSLCBpY29uOiAnZmEgZmEtYmFyLWNoYXJ0J30sXG4gICAge2xhYmVsOiAn5ZyG6aW85Zu+JywgdmFsdWU6IENoYXJ0VHlwZS5QSUUsIGljb246ICdmYSBmYS1waWUtY2hhcnQnfSxcbiAgICB7bGFiZWw6ICfmm7Lnur/lm74nLCB2YWx1ZTogQ2hhcnRUeXBlLkxJTkUsIGljb246ICdmYSBmYS1saW5lLWNoYXJ0J30sXG4gICAge2xhYmVsOiAn6Zu36L6+5Zu+JywgdmFsdWU6IENoYXJ0VHlwZS5SQURBUiwgaWNvbjogJ2ZhIGZhLWJhcid9LFxuICAgIHtsYWJlbDogJ+WMuuWfn+WbvicsIHZhbHVlOiBDaGFydFR5cGUuQVJFQSwgaWNvbjogJ2ZhIGZhLWFyZWEtY2hhcnQnfSxcbiAgICB7bGFiZWw6ICfnjq/lvaLlm74nLCB2YWx1ZTogQ2hhcnRUeXBlLkRPVUdITlVULCBpY29uOiAnZmEgZmEtY2lyY2xlJ31cbiAgXTtcblxuICBASW5wdXQoKSBnZXQgZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhJC52YWx1ZTtcbiAgfVxuXG4gIHNldCBkYXRhKGRhdGEpIHtcbiAgICB0aGlzLmRhdGEkLm5leHQoZGF0YSB8fCB7fSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgdGhpcy5yYXdEYXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYnVpbGRDaGFydCgpO1xuICB9XG5cbiAgY2hhbmdlVHlwZSgpIHtcbiAgICB0aGlzLmJ1aWxkQ2hhcnQoKTtcbiAgfVxuXG4gIHJlQnVpbGRDaGFydCgpIHtcbiAgICB0aGlzLnJhd0RhdGEgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5idWlsZENoYXJ0KCk7XG4gIH1cblxuICBidWlsZENoYXJ0KCkge1xuICAgIGlmICghdGhpcy4kaWQpIHtcbiAgICAgIHRoaXMuJGlkID0gSWRVdGlscy5nZXRSYW5kb20oKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucmF3RGF0YSkge1xuICAgICAgdGhpcy5yZXNvbHZlZFJhd0RhdGEodGhpcy5yYXdEYXRhKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YVNvdXJjZSkge1xuICAgICAgbGV0IGRzID0gdGhpcy5kYXRhU291cmNlO1xuICAgICAgaWYgKCFkcy5oYXNPd25Qcm9wZXJ0eSgnYXBpRGF0YVByb3BzJykpIHtcbiAgICAgICAgY29uc3QgYXBpRGF0YVByb3BzID0gZHM7XG4gICAgICAgIGRzID0ge307XG4gICAgICAgIGRzWydhcGlEYXRhUHJvcHMnXSA9IGFwaURhdGFQcm9wcztcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucmVzb2x2ZURhdGFTb3VyY2UpIHtcbiAgICAgICAgZHMgPSB0aGlzLnJlc29sdmVEYXRhU291cmNlLm1ldGhvZCg8RGF0YVNvdXJjZT5kcyk7XG4gICAgICB9XG5cbiAgICAgIEFwaVV0aWxzLmJhdGNoRmV0Y2goZHMsIHRoaXMuJGlkKVxuICAgICAgICAuc3Vic2NyaWJlKGRhdGEgPT4ge1xuICAgICAgICAgIHRoaXMucmF3RGF0YSA9IGRhdGE7XG4gICAgICAgICAgdGhpcy5yZXNvbHZlZFJhd0RhdGEodGhpcy5yYXdEYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmVzb2x2ZWRSYXdEYXRhKHJhd0RhdGEpIHtcbiAgICBpZiAoIUNvbW1vbnNVdGlscy5pc0VtcHR5KHJhd0RhdGEpKSB7XG4gICAgICBsZXQgZGF0YTogQ2hhcnREYXRhUHJvcHM7XG4gICAgICBjb25zdCBkYXRhc2V0czogQ2hhcnREYXRhU2V0c1Byb3BzW10gPSBbXTtcbiAgICAgIGxldCBsYWJlbHM6IHN0cmluZ1tdID0gW107XG4gICAgICBpZiAoQ29tbW9uc1V0aWxzLmlzRnVuY3Rpb24odGhpcy5kaW1lbnNpb25zKSkge1xuICAgICAgICBkYXRhID0gKDxGdW5jdGlvbj50aGlzLmRpbWVuc2lvbnMpKHJhd0RhdGEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuZGltZW5zaW9ucykge1xuICAgICAgICAgIGNvbnN0IGRpbWVuc2lvbnMgPSBDb21tb25zVXRpbHMuZ2V0QXJyYXlWYWx1ZSh0aGlzLmRpbWVuc2lvbnMpO1xuICAgICAgICAgIGRpbWVuc2lvbnMuZm9yRWFjaCgoZGltZW5zaW9uLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVzb2x2ZURpbWVuc2lvbikge1xuICAgICAgICAgICAgICBkaW1lbnNpb24gPSB0aGlzLnJlc29sdmVEaW1lbnNpb24ubWV0aG9kKGRpbWVuc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjaGFydERhdGEgPSBDaGFydFV0aWxzLmJ1aWxkQ2hhcnREYXRhKHJhd0RhdGEsIHtcbiAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgICBkaW1lbnNpb246IGRpbWVuc2lvbixcbiAgICAgICAgICAgICAgZGF0YUl0ZW1Qcm9wczogdGhpcy5kYXRhSXRlbVByb3BzXG4gICAgICAgICAgICB9LCBpbmRleCk7XG4gICAgICAgICAgICBkYXRhc2V0cy5wdXNoKC4uLmNoYXJ0RGF0YS5kYXRhc2V0cyk7XG4gICAgICAgICAgICBpZiAobGFiZWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICBsYWJlbHMgPSBjaGFydERhdGEubGFiZWxzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGRhdGEgPSB7bGFiZWxzLCBkYXRhc2V0c307XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0YSA9IENoYXJ0VXRpbHMuYnVpbGRDaGFydERhdGEocmF3RGF0YSwge1xuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgZGF0YUl0ZW1Qcm9wczogdGhpcy5kYXRhSXRlbVByb3BzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YSA9IHt9O1xuICAgIH1cbiAgfVxufVxuIl19