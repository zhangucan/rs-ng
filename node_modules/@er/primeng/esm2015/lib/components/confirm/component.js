/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';
import { BaseComponent } from '@er/core';
import { StateNames } from '@er/types';
import { StatesUtils } from '@er/utils';
import { ConfirmationService } from 'primeng/api';
import { filter } from 'rxjs/operators';
import { DEFAULT_CONFIRM_DIALOG_PROPS } from './defaults';
export class PngConfirmDialogComponent extends BaseComponent {
    /**
     * @param {?} confirmationService
     * @param {?} cd
     */
    constructor(confirmationService, cd) {
        super();
        this.confirmationService = confirmationService;
        this.cd = cd;
        this.options = {};
        this.onAccept = new EventEmitter();
        this.onReject = new EventEmitter();
        this.dlgOptions = {};
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dlgOptions = Object.assign({}, DEFAULT_CONFIRM_DIALOG_PROPS, { header: this.header, content: this.content, acceptEvent: this.onAccept, rejectEvent: this.onReject }, this.options);
        this.$subscriptions = StatesUtils.observe(StateNames.confirm)
            .pipe(filter(state => state && state.open))
            .subscribe(state => {
            this.open(state);
        });
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    open(options) {
        if (options) {
            this.dlgOptions = Object.assign({}, DEFAULT_CONFIRM_DIALOG_PROPS, options);
        }
        this.confirmationService.confirm(this.getConfirmation(this.dlgOptions));
        this.cd.detectChanges();
    }
    /**
     * @param {?} modal
     * @return {?}
     */
    getConfirmation(modal) {
        return {
            message: modal.content,
            icon: modal.icon,
            header: modal.header,
            acceptVisible: modal.acceptVisible,
            rejectVisible: modal.rejectVisible,
            acceptLabel: modal.acceptLabel,
            rejectLabel: modal.rejectLabel,
            accept: this.accept.bind(this),
            reject: this.reject.bind(this)
        };
    }
    /**
     * @return {?}
     */
    accept() {
        this.onAccept.emit();
        if (this.dlgOptions.onAccept) {
            this.dlgOptions.onAccept.call(this.dlgOptions.context, true);
        }
        StatesUtils.create(StateNames.confirm, {
            open: false,
            accept: true,
            reject: false
        });
    }
    /**
     * @return {?}
     */
    reject() {
        this.onReject.emit();
        if (this.options.onReject) {
            this.options.onReject.call(this.options.context, false);
        }
        StatesUtils.create(StateNames.confirm, {
            open: false,
            accept: false,
            reject: true
        });
    }
}
PngConfirmDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-confirm-dialog',
                template: `
    <p-confirmDialog #dlg>
      <p-footer>
        <button type="button" class="ui-button-rounded ui-button-success" *ngIf="dlgOptions.acceptVisible" pButton icon="pi pi-check"
                [label]="dlgOptions.acceptLabel"
                (click)="dlg.accept()"></button>
        <button type="button" class="ui-button-rounded ui-button-danger" *ngIf="dlgOptions.rejectVisible" pButton icon="pi pi-times"
                [label]="dlgOptions.rejectLabel"
                (click)="dlg.reject()"></button>
      </p-footer>
    </p-confirmDialog>`,
                providers: [ConfirmationService],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [""]
            }] }
];
/** @nocollapse */
PngConfirmDialogComponent.ctorParameters = () => [
    { type: ConfirmationService },
    { type: ChangeDetectorRef }
];
PngConfirmDialogComponent.propDecorators = {
    header: [{ type: Input }],
    content: [{ type: Input }],
    options: [{ type: Input }],
    onAccept: [{ type: Output }],
    onReject: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    PngConfirmDialogComponent.prototype.header;
    /** @type {?} */
    PngConfirmDialogComponent.prototype.content;
    /** @type {?} */
    PngConfirmDialogComponent.prototype.options;
    /** @type {?} */
    PngConfirmDialogComponent.prototype.onAccept;
    /** @type {?} */
    PngConfirmDialogComponent.prototype.onReject;
    /** @type {?} */
    PngConfirmDialogComponent.prototype.dlgOptions;
    /**
     * @type {?}
     * @private
     */
    PngConfirmDialogComponent.prototype.confirmationService;
    /**
     * @type {?}
     * @private
     */
    PngConfirmDialogComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,