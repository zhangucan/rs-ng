/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { BaseComponent, HttpUtils } from '@er/core';
import { HttpResponseType } from '@er/types';
import { CommonsUtils, ConfigUtils, DialogUtils } from '@er/utils';
import { Lightbox } from 'primeng/primeng';
export class PngImageComponent extends BaseComponent {
    /**
     * @param {?} cd
     * @param {?} sanitizer
     */
    constructor(cd, sanitizer) {
        super();
        this.cd = cd;
        this.sanitizer = sanitizer;
        this.imageViewStyle = { 'max-height': '300px', 'max-width': '500px', 'overflow': 'auto' };
        this.showDescription = true;
        this.descriptionChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get description() {
        return this._description;
    }
    /**
     * @param {?} description
     * @return {?}
     */
    set description(description) {
        this._description = description;
        this.descriptionChange.emit(description);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.src) {
            if (CommonsUtils.isArray(this.src)) {
                if (this.src.length === 1) {
                    this.images = undefined;
                    this.image = this.src[0];
                    this.fullImage = this.src[0];
                }
                else {
                    this.images = [];
                    this.image = this.src[0];
                    this.fullImage = this.src[0];
                    ((/** @type {?} */ (this.src))).forEach(image => {
                        if (CommonsUtils.isString(image)) {
                            this.images.push({ source: image });
                        }
                        else {
                            this.images.push(image);
                        }
                    });
                }
            }
            else {
                this.images = undefined;
                this.image = this.src;
                this.fullImage = this.src;
            }
        }
        if (changes.fileId) {
            /** @type {?} */
            let fileId;
            if (!this.fileId) {
                this.images = undefined;
                this.image = null;
            }
            else {
                if (CommonsUtils.isArray(this.fileId)) {
                    if (this.fileId.length === 0) {
                        this.images = undefined;
                        this.image = null;
                        return;
                    }
                    else {
                        fileId = this.fileId[0];
                    }
                }
                else {
                    fileId = this.fileId;
                }
                HttpUtils.request({
                    uri: `${ConfigUtils.getConfig().api.servers['image'].uri}/${fileId}${this.size ? '?' + this.size : ''}`,
                    observe: 'events',
                    responseType: HttpResponseType.BLOB
                }).subscribe(response => {
                    /** @type {?} */
                    const objectURL = this.sanitizer.bypassSecurityTrustUrl((window.URL.createObjectURL(response.body)));
                    this.images = undefined;
                    this.image = objectURL;
                    this.fullImage = `${ConfigUtils.getConfig().api.servers['image'].uri}/${fileId}`;
                    /** @type {?} */
                    const descriptions = response.headers.getAll('description');
                    if (descriptions && descriptions.length > 0) {
                        this.description = descriptions[0];
                    }
                    this.cd.detectChanges();
                });
            }
        }
    }
    /**
     * @return {?}
     */
    viewImage() {
        if (this.images) {
            this.imageViewer.show();
            this.imageViewer.center();
        }
        else if (this.image) {
            DialogUtils.info('图片预览', this.imageViewTpl, (/** @type {?} */ ({})));
        }
    }
}
PngImageComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-image',
                template: `
    <div [ngClass]="styleClass" [ngStyle]="style">
      <img *ngIf="image"
           style="margin: 5px"
           [src]="image"
           [ngClass]="imageStyleClass"
           [ngStyle]="imageStyle"
           [title]="description || ''"
           (click)="viewImage()"/>
      <div *ngIf="showDescription" [ngClass]="descriptionStyleClass" [ngStyle]="descriptionStyle">
        {{description}}
      </div>
    </div>
    <ng-template #imageView>
      <img [src]="fullImage" [ngStyle]="imageViewStyle" [ngClass]="imageViewStyleClass"/>
    </ng-template>
    <ng-template #imagesView>
      <p-lightbox [images]="images" [styleClass]="boxStyleClass" [style]="boxStyle"></p-lightbox>
    </ng-template>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngImageComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: DomSanitizer }
];
PngImageComponent.propDecorators = {
    src: [{ type: Input }],
    styleClass: [{ type: Input }],
    style: [{ type: Input }],
    imageStyleClass: [{ type: Input }],
    imageStyle: [{ type: Input }],
    descriptionStyleClass: [{ type: Input }],
    descriptionStyle: [{ type: Input }],
    boxStyleClass: [{ type: Input }],
    boxStyle: [{ type: Input }],
    imageViewStyleClass: [{ type: Input }],
    imageViewStyle: [{ type: Input }],
    showDescription: [{ type: Input }],
    size: [{ type: Input }],
    fileId: [{ type: Input }],
    imageViewTpl: [{ type: ViewChild, args: ['imageView',] }],
    imageViewer: [{ type: ViewChild, args: ['imagesView',] }],
    descriptionChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    PngImageComponent.prototype.src;
    /** @type {?} */
    PngImageComponent.prototype.styleClass;
    /** @type {?} */
    PngImageComponent.prototype.style;
    /** @type {?} */
    PngImageComponent.prototype.imageStyleClass;
    /** @type {?} */
    PngImageComponent.prototype.imageStyle;
    /** @type {?} */
    PngImageComponent.prototype.descriptionStyleClass;
    /** @type {?} */
    PngImageComponent.prototype.descriptionStyle;
    /** @type {?} */
    PngImageComponent.prototype.boxStyleClass;
    /** @type {?} */
    PngImageComponent.prototype.boxStyle;
    /** @type {?} */
    PngImageComponent.prototype.imageViewStyleClass;
    /** @type {?} */
    PngImageComponent.prototype.imageViewStyle;
    /** @type {?} */
    PngImageComponent.prototype.showDescription;
    /** @type {?} */
    PngImageComponent.prototype.size;
    /** @type {?} */
    PngImageComponent.prototype.fileId;
    /** @type {?} */
    PngImageComponent.prototype.imageViewTpl;
    /** @type {?} */
    PngImageComponent.prototype.imageViewer;
    /** @type {?} */
    PngImageComponent.prototype.image;
    /** @type {?} */
    PngImageComponent.prototype.fullImage;
    /** @type {?} */
    PngImageComponent.prototype.images;
    /** @type {?} */
    PngImageComponent.prototype.descriptionChange;
    /** @type {?} */
    PngImageComponent.prototype._description;
    /**
     * @type {?}
     * @private
     */
    PngImageComponent.prototype.cd;
    /** @type {?} */
    PngImageComponent.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,