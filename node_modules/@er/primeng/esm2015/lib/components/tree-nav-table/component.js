/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, ViewChild } from '@angular/core';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { RouteBindComponent } from '@er/core';
import { ANIMATIONS } from '@er/presets';
import { CommonsUtils, IdUtils } from '@er/utils';
import { PngTableComponent } from '../table/component/table/component';
import { PngTreeComponent } from '../tree/component';
export class PngTreeNavTableComponent extends RouteBindComponent {
    /**
     * @param {?} cd
     * @param {?} router
     * @param {?} activatedRoute
     */
    constructor(cd, router, activatedRoute) {
        super();
        this.cd = cd;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.switchable = true;
        this.hideTree = false;
        this.$subscriptions = this.router.events.subscribe(event => {
            if (event instanceof NavigationEnd) {
                this.isFormOutlet = event.url.indexOf('(aux:') > 0;
                if (this.isRestore) {
                    this.isRestore = false;
                    this.refresh();
                }
                this.cd.markForCheck();
            }
        });
    }
    /**
     * @return {?}
     */
    get isFormOutlet() {
        return this._isFormOutlet;
    }
    /**
     * @param {?} formOutlet
     * @return {?}
     */
    set isFormOutlet(formOutlet) {
        if (this.isFormOutlet !== formOutlet) {
            this._isFormOutlet = formOutlet;
        }
    }
    /**
     * @return {?}
     */
    refresh() {
        this.pngTable.load();
        if (this.pngTree && this.refreshTree) {
            this.refreshTree = false;
            this.pngTree.load();
        }
    }
    /**
     * @param {?} props
     * @return {?}
     */
    beforeRoutePropsBind(props) {
        this.tree = undefined;
        this.table = undefined;
        this.switchable = true;
        this.hideTree = false;
        if (props.caption) {
            CommonsUtils.set(props, 'table.caption', props.caption);
        }
        return props;
    }
    /**
     * @return {?}
     */
    afterRoutePropsBind() {
        if (!this.tree) {
            this.switchable = false;
        }
        else {
            this.hideTree = false;
            this.switchable = true;
            this.tree.$id = IdUtils.getRandom();
            this.tree.$container = this;
            CommonsUtils.set(this.tree, '$ext.$container', this);
        }
        if (this.table) {
            this.table.$id = IdUtils.getRandom();
            this.table.$container = this;
            CommonsUtils.set(this.table, '$ext.$container', this);
        }
    }
    /**
     * @return {?}
     */
    closeTree() {
        this.hideTree = true;
    }
    /**
     * @return {?}
     */
    back() {
        this.isRestore = true;
        this.router.navigate(['./', { outlets: { aux: null } }], {
            relativeTo: this.activatedRoute
        });
    }
}
PngTreeNavTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-tree-nav-table',
                template: `
    <div [hidden]="isFormOutlet">
      <er-fluid-container>
        <er-left-right [hideLeft]="!tree || hideTree" [switchable]="!!tree && switchable">
          <ng-template erTypedTemplate="left">
            <png-panel *ngIf="tree" [icon]="tree.$ext?.captionIcon || 'fa fa-tree'" [header]="tree.$ext?.caption || '管理树'">
              <png-tree erPropsBind [props]="tree" (onEmptyNode)="closeTree()"></png-tree>
            </png-panel>
          </ng-template>
          <ng-template erTypedTemplate="right">
            <div *ngIf="table">
              <div [@fadeIn]="true">
                <png-table erPropsBind [props]="table"></png-table>
              </div>
            </div>
          </ng-template>
        </er-left-right>
      </er-fluid-container>
    </div>
    <router-outlet name="aux">
      <ng-container *ngTemplateOutlet="goBack"></ng-container>
    </router-outlet>
    <ng-container *ngTemplateOutlet="goBack"></ng-container>
    <ng-template #goBack>
      <div *ngIf="isFormOutlet">
        <a (click)="back()" class="btn btn-outline-primary"
           title="返回到数据浏览"> <i class="fa fa-2x text-danger fa-sign-out fa-rotate-180"></i> 返回</a>

      </div>
    </ng-template>
  `,
                animations: [
                    ANIMATIONS.zoomIn,
                    ANIMATIONS.fadeIn
                ],
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngTreeNavTableComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Router },
    { type: ActivatedRoute }
];
PngTreeNavTableComponent.propDecorators = {
    tree: [{ type: Input }],
    table: [{ type: Input }],
    switchable: [{ type: Input }],
    hideTree: [{ type: Input }],
    pngTable: [{ type: ViewChild, args: [PngTableComponent,] }],
    pngTree: [{ type: ViewChild, args: [PngTreeComponent,] }]
};
if (false) {
    /** @type {?} */
    PngTreeNavTableComponent.prototype.tree;
    /** @type {?} */
    PngTreeNavTableComponent.prototype.table;
    /** @type {?} */
    PngTreeNavTableComponent.prototype.switchable;
    /** @type {?} */
    PngTreeNavTableComponent.prototype.hideTree;
    /** @type {?} */
    PngTreeNavTableComponent.prototype.pngTable;
    /** @type {?} */
    PngTreeNavTableComponent.prototype.pngTree;
    /** @type {?} */
    PngTreeNavTableComponent.prototype.refreshTree;
    /** @type {?} */
    PngTreeNavTableComponent.prototype.isRestore;
    /** @type {?} */
    PngTreeNavTableComponent.prototype._isFormOutlet;
    /**
     * @type {?}
     * @private
     */
    PngTreeNavTableComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    PngTreeNavTableComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PngTreeNavTableComponent.prototype.activatedRoute;
}
//# sourceMappingURL=data:application/json;base64,