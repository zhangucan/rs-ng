/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { BaseComponent } from '@er/core';
import { CommonsUtils, DataItemUtils } from '@er/utils';
export class PngOptionItemComponent extends BaseComponent {
    /**
     * @return {?}
     */
    get labels() {
        /** @type {?} */
        const _label = DataItemUtils.getItemLabel(this.item, this.props.dropDownOptionKey || this.props.labelKey || 'label');
        if (CommonsUtils.isArray(_label)) {
            return _label;
        }
        else {
            return [_label];
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.props) {
            this.props = {};
        }
    }
}
PngOptionItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-option-item',
                template: `
    <ng-container *ngIf="customerTpl;else default">
      <ng-container *ngTemplateOutlet="customerTpl;context:{$implicit:item}"></ng-container>
    </ng-container>
    <ng-template #default>
      <div class="d-flex option-item" [ngClass]="props.itemStyleClass || 'ui-helper-clearfix'">
          <span class="label mr-3" *ngFor="let label of labels" [ngClass]="props.labelStyleClass" [innerHTML]="label"></span>
          <span class="pull-right count" *ngIf="props.showCounter && item['count']">
          <span [ngClass]="props.counterStyleClass || 'badge badge-pill badge-info'">{{item['count']}}</span>
        </span>
      </div>
    </ng-template>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".option-item{border-bottom:1px solid #d5d5d5;font-size:.8em}.option-item:hover{font-weight:700;font-size:1em}"]
            }] }
];
PngOptionItemComponent.propDecorators = {
    item: [{ type: Input }],
    props: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PngOptionItemComponent.prototype.item;
    /** @type {?} */
    PngOptionItemComponent.prototype.props;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9vcHRpb24taXRlbS9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFdkMsT0FBTyxFQUFDLFlBQVksRUFBRSxhQUFhLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFxQnRELE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxhQUFhOzs7O0lBSXZELElBQUksTUFBTTs7Y0FDRixNQUFNLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDO1FBQ3BILElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNoQyxPQUFPLE1BQU0sQ0FBQztTQUNmO2FBQU07WUFDTCxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDakI7SUFDSCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7U0FDakI7SUFDSCxDQUFDOzs7WUFwQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7O0dBWVQ7Z0JBRUQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2FBQ2hEOzs7bUJBR0UsS0FBSztvQkFDTCxLQUFLOzs7O0lBRE4sc0NBQWtCOztJQUNsQix1Q0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCYXNlQ29tcG9uZW50fSBmcm9tICdAZXIvY29yZSc7XG5pbXBvcnQge0RhdGFJdGVtUHJvcHN9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge0NvbW1vbnNVdGlscywgRGF0YUl0ZW1VdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG5nLW9wdGlvbi1pdGVtJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiY3VzdG9tZXJUcGw7ZWxzZSBkZWZhdWx0XCI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwiY3VzdG9tZXJUcGw7Y29udGV4dDp7JGltcGxpY2l0Oml0ZW19XCI+PC9uZy1jb250YWluZXI+XG4gICAgPC9uZy1jb250YWluZXI+XG4gICAgPG5nLXRlbXBsYXRlICNkZWZhdWx0PlxuICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBvcHRpb24taXRlbVwiIFtuZ0NsYXNzXT1cInByb3BzLml0ZW1TdHlsZUNsYXNzIHx8ICd1aS1oZWxwZXItY2xlYXJmaXgnXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbCBtci0zXCIgKm5nRm9yPVwibGV0IGxhYmVsIG9mIGxhYmVsc1wiIFtuZ0NsYXNzXT1cInByb3BzLmxhYmVsU3R5bGVDbGFzc1wiIFtpbm5lckhUTUxdPVwibGFiZWxcIj48L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJwdWxsLXJpZ2h0IGNvdW50XCIgKm5nSWY9XCJwcm9wcy5zaG93Q291bnRlciAmJiBpdGVtWydjb3VudCddXCI+XG4gICAgICAgICAgPHNwYW4gW25nQ2xhc3NdPVwicHJvcHMuY291bnRlclN0eWxlQ2xhc3MgfHwgJ2JhZGdlIGJhZGdlLXBpbGwgYmFkZ2UtaW5mbydcIj57e2l0ZW1bJ2NvdW50J119fTwvc3Bhbj5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgYCxcbiAgc3R5bGVVcmxzOiBbJ3N0eWxlcy5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuXG5leHBvcnQgY2xhc3MgUG5nT3B0aW9uSXRlbUNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSBpdGVtOiB7fTtcbiAgQElucHV0KCkgcHJvcHM6IERhdGFJdGVtUHJvcHM7XG5cbiAgZ2V0IGxhYmVscygpIHtcbiAgICBjb25zdCBfbGFiZWwgPSBEYXRhSXRlbVV0aWxzLmdldEl0ZW1MYWJlbCh0aGlzLml0ZW0sIHRoaXMucHJvcHMuZHJvcERvd25PcHRpb25LZXkgfHwgdGhpcy5wcm9wcy5sYWJlbEtleSB8fCAnbGFiZWwnKTtcbiAgICBpZiAoQ29tbW9uc1V0aWxzLmlzQXJyYXkoX2xhYmVsKSkge1xuICAgICAgcmV0dXJuIF9sYWJlbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtfbGFiZWxdO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICghdGhpcy5wcm9wcykge1xuICAgICAgdGhpcy5wcm9wcyA9IHt9O1xuICAgIH1cbiAgfVxuXG59XG4iXX0=