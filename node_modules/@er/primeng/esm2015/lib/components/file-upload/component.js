/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, forwardRef, Input, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DomSanitizer } from '@angular/platform-browser';
import { ControlWrapperComponent, HttpUtils, LogUtils } from '@er/core';
import { ImageToolsService } from '@er/image-editor';
import { HttpMethod, NotifyLevel, StateNames } from '@er/types';
import { CommonsUtils, ConfigUtils, StatesUtils } from '@er/utils';
import { FileUpload } from 'primeng/primeng';
import { BehaviorSubject, Subject } from 'rxjs';
import { DEFAULT_PNG_FILE_UPLOAD_PROPS } from './type';
export class PngFileUploadComponent extends ControlWrapperComponent {
    /**
     * @param {?} imageToolsService
     * @param {?} sanitizer
     * @param {?} cd
     */
    constructor(imageToolsService, sanitizer, cd) {
        super();
        this.imageToolsService = imageToolsService;
        this.sanitizer = sanitizer;
        this.cd = cd;
        this.selectedFiles$ = new BehaviorSubject([]);
        this.uploadedFiles = [];
        this.$defaultProps = DEFAULT_PNG_FILE_UPLOAD_PROPS;
        this.showUpload = true;
        this.uploadProgress$ = new Subject();
        this.processing$ = new Subject();
        this.fileAttrs = {};
    }
    /**
     * @return {?}
     */
    get uploadValue() {
        if (!this.value) {
            return this.value;
        }
        return CommonsUtils.getArrayValue(this.value);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    fileIcon(file) {
        /** @type {?} */
        let ext = (this.fileUpload.getFileExtension(file) || '').toLowerCase();
        ext = ext.substring(1, 4);
        /** @type {?} */
        const exts = ['txt', 'doc', 'xls', '.pdf', '.zip'];
        /** @type {?} */
        let icon;
        switch (ext) {
            case 'txt':
                icon = 'text';
                break;
            case 'xls':
                icon = 'excel';
                break;
            case 'doc':
                icon = 'word';
                break;
            case 'zip':
                icon = 'zip';
                break;
            case 'pdf':
                icon = 'pdf';
                break;
            case 'mp3':
                icon = 'audio';
                break;
            case 'mp4':
                icon = 'video';
                break;
            default:
                icon = exts.indexOf(ext) >= 0 ? ext : undefined;
        }
        return icon ? `file-${icon}-o` : 'file-o';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @param {?} model
     * @return {?}
     */
    writeValue(model) {
        super.writeValue(model);
        this.showUpload = !((model && this.$props && !this.$props.multiple));
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    onPropsInit() {
        super.onPropsInit();
        if (!this.$props.url) {
            this.$props.url = `${ConfigUtils.getConfig().api.servers.image.uri}`;
            LogUtils.debug(this, '文件上传路径', this.$props.url);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSelect(event) {
        /** @type {?} */
        const files = event.files;
        for (let i = 0; i < files.length; i++) {
            /** @type {?} */
            const file = files[i];
            this.processing$.next(true);
            this.imageToolsService.resizeImage(file, this.$props.$ext.maxWidth, this.$props.$ext.maxHeight).subscribe(result => {
                this.imageToolsService.compressImage(result, this.$props.$ext.maxSize).subscribe(final => {
                    final['objectURL'] = this.sanitizer.bypassSecurityTrustUrl((URL.createObjectURL(final)));
                    this.selectedFiles$.next(this.selectedFiles$.value.concat(final));
                    this.processing$.next(false);
                    this.fileUpload.files = this.fileUpload.files.map(f => f.name === file.name ? final : f);
                });
            });
        }
    }
    /**
     * @param {?} event
     * @param {?} i
     * @return {?}
     */
    delete(event, i) {
        /** @type {?} */
        const files = this.selectedFiles$.value;
        files.splice(i, 1);
        this.selectedFiles$.next(files);
        this.fileUpload.remove(event, i);
    }
    /**
     * @param {?} fileId
     * @return {?}
     */
    remove(fileId) {
        this.$subscriptions = HttpUtils.request({
            uri: `${ConfigUtils.getConfig().api.servers.image.uri}/${fileId}`,
            method: HttpMethod.DELETE
        }).subscribe(resp => {
            if (resp && resp.success) {
                if (this.$props.multiple) {
                    this.value = this.value.filter(v => v !== fileId);
                }
                else {
                    this.value = undefined;
                }
                this.showUpload = true;
                this.cd.detectChanges();
            }
        });
    }
    /**
     * @param {?} event
     * @param {?} file
     * @return {?}
     */
    setFileAttr(event, file) {
        this.fileAttrs[file.name] = event.target.value;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onBeforeSend(event) {
        /** @type {?} */
        const formData = event.formData;
        formData.append(this.$props.$ext.attrsName, `waterMark=${this.$props.$ext.waterMark}`);
        formData.append(this.$props.$ext.attrsName, `smallSize=${this.$props.$ext.smallSize}`);
        formData.append(this.$props.$ext.attrsName, `storeTo=${this.$props.$ext.storeTo}`);
        if (!CommonsUtils.isEmpty(this.fileAttrs)) {
            Object.keys(this.fileAttrs).forEach(key => {
                formData.append(this.$props.$ext.attrsName, `${key}=${this.fileAttrs[key]}`);
            });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onProgress(event) {
        this.uploadProgress$.next(event.progress);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onUploadSuccess(event) {
        for (const file of event.files) {
            this.uploadedFiles.push(file);
        }
        /** @type {?} */
        const response = JSON.parse(event.xhr.responseText);
        if (response.success) {
            StatesUtils.create(StateNames.notify, {
                message: '文件上传成功',
                title: '提示'
            });
            if (this.$props.multiple) {
                this.value = [
                    ...this.value || [],
                    ...Object.keys(response.content).map(k => response.content[k])
                ];
            }
            else {
                this.value = Object.keys(response.content).map(k => response.content[k])[0];
                this.showUpload = false;
            }
            this.fileAttrs = {};
            this.selectedFiles$.next([]);
            this.uploadProgress$.next(undefined);
            this.cd.detectChanges();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onUploadFailed(event) {
        /** @type {?} */
        const response = JSON.parse(event.xhr.responseText);
        StatesUtils.create(StateNames.notify, {
            level: NotifyLevel.ERROR,
            message: response.message,
            title: '文件上传失败'
        });
        this.uploadProgress$.next(undefined);
    }
}
PngFileUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-file-upload',
                template: `
    <ng-container *ngIf="showUpload">
      <p-fileUpload
        #fileUpload
        erPropsBind
        [props]="$props || {}"
        [context]="ctx"
        (onSelect)="onSelect($event)"
        (onUpload)="onUploadSuccess($event)"
        (onError)="onUploadFailed($event)"
        (onProgress)="onProgress($event)"
        (onBeforeSend)="onBeforeSend($event)"
      >
        <ng-template pTemplate="toolbar">
          <div *ngIf="uploadProgress$|async as uploadProgress">
            <p-progressBar [value]="uploadProgress"></p-progressBar>
          </div>
        </ng-template>
        <ng-template pTemplate="file"></ng-template>
        <ng-template pTemplate="content">
          <span class="text-muted small" *ngIf="!fileUpload.hasFiles()">您也可以拖动文件到这里</span>
        </ng-template>
      </p-fileUpload>
      <div *ngIf="processing$|async"><i class="fa fa-spin fa-gears"></i>正在处理图片</div>
      <div class="ui-fileupload-row" *ngFor="let file of selectedFiles$|async; let i = index">
      <div>
        <span class="badge badge-info">{{i + 1}}</span>
      </div>
      <div>
        <png-image *ngIf="fileUpload.isImage(file)"
                   [src]="file['objectURL']" [imageStyle]="{width: $props.previewWidth + 'px'}">
        </png-image>
        <span *ngIf="!fileUpload.isImage(file)" class="fa fa-2x text-primary fa-{{fileIcon(file)}}"></span>
      </div>
      <div>{{file.name}}</div>
      <div>{{fileUpload.formatSize(file.size)}}<span class="text-danger">(压缩后)</span></div>
      <div>
        <input pInputText placeholder="图片描述信息" size="50" (change)="setFileAttr($event,file)"/>
      </div>
      <div>
        <button type="button" icon="pi pi-times white" pButton (click)="delete($event,i)"></button>
      </div>
    </div>
    </ng-container>

    <div *ngIf="uploadValue && uploadValue.length>0">
      <div style="text-decoration: underline;font-weight: bold">已上传文件：</div>
      <div class="ui-fileupload-row" *ngFor="let fileId of uploadValue">
        <div>
          <png-image [fileId]="fileId" size="small"
                     styleClass="d-flex align-items-center"
                     imageStyleClass="mr-3"
                     [imageStyle]="{width:$props.previewWidth}">
          </png-image>
        </div>
        <div>
          <button type="button" icon="pi pi-times white" pButton (click)="remove(fileId)"></button>
        </div>
      </div>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngFileUploadComponent),
                        multi: true
                    }]
            }] }
];
/** @nocollapse */
PngFileUploadComponent.ctorParameters = () => [
    { type: ImageToolsService },
    { type: DomSanitizer },
    { type: ChangeDetectorRef }
];
PngFileUploadComponent.propDecorators = {
    maxSize: [{ type: Input }],
    fileUpload: [{ type: ViewChild, args: ['fileUpload',] }]
};
if (false) {
    /** @type {?} */
    PngFileUploadComponent.prototype.maxSize;
    /** @type {?} */
    PngFileUploadComponent.prototype.selectedFiles$;
    /** @type {?} */
    PngFileUploadComponent.prototype.uploadedFiles;
    /** @type {?} */
    PngFileUploadComponent.prototype.$defaultProps;
    /** @type {?} */
    PngFileUploadComponent.prototype.currentFile;
    /** @type {?} */
    PngFileUploadComponent.prototype.showUpload;
    /** @type {?} */
    PngFileUploadComponent.prototype.uploadProgress$;
    /** @type {?} */
    PngFileUploadComponent.prototype.processing$;
    /** @type {?} */
    PngFileUploadComponent.prototype.fileUpload;
    /** @type {?} */
    PngFileUploadComponent.prototype.fileAttrs;
    /**
     * @type {?}
     * @private
     */
    PngFileUploadComponent.prototype.imageToolsService;
    /** @type {?} */
    PngFileUploadComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    PngFileUploadComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,