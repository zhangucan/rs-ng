/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';
import { BaseComponent } from '@er/core';
import { NotifyLevel, NotifyType, StateNames } from '@er/types';
import { ConfigUtils, StatesUtils } from '@er/utils';
import { MessageService } from 'primeng/api';
import { filter } from 'rxjs/operators';
/** @type {?} */
export const DEFAULT_ANNOUNCE_PROPS = {
    level: NotifyLevel.INFO,
    animation: true,
    closable: true,
    baseZIndex: 2000
};
export class PngAnnounceComponent extends BaseComponent {
    /**
     * @param {?} messageService
     * @param {?} cd
     */
    constructor(messageService, cd) {
        super();
        this.messageService = messageService;
        this.cd = cd;
        this.announce = Object.assign({}, DEFAULT_ANNOUNCE_PROPS, ConfigUtils.getConfig().announce || {});
        this.defaultNotifyType = ConfigUtils.getConfig().notify;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.$subscriptions = StatesUtils.observe(StateNames.notify)
            .pipe(filter(notify => notify && notify.message), filter(notify => notify.type === NotifyType.ANNOUNCE || (!notify.type && this.defaultNotifyType === NotifyType.ANNOUNCE))).subscribe(notify => {
            /** @type {?} */
            const model = this.getNotifyModel(notify);
            this.messageService.add(model);
            this.cd.detectChanges();
        });
    }
    /**
     * @param {?} notify
     * @return {?}
     */
    getNotifyModel(notify) {
        return {
            key: notify.key,
            severity: notify.level || NotifyLevel.INFO,
            summary: notify.title,
            detail: notify.message,
            closable: notify.closable,
            data: notify.data
        };
    }
}
PngAnnounceComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-announce',
                template: `
    <p-messages [styleClass]="announce.styleClass"
                [style]="announce.style"
                [closable]="announce.closable"
    ></p-messages>
  `,
                providers: [MessageService],
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngAnnounceComponent.ctorParameters = () => [
    { type: MessageService },
    { type: ChangeDetectorRef }
];
if (false) {
    /** @type {?} */
    PngAnnounceComponent.prototype.announce;
    /**
     * @type {?}
     * @private
     */
    PngAnnounceComponent.prototype.defaultNotifyType;
    /**
     * @type {?}
     * @private
     */
    PngAnnounceComponent.prototype.messageService;
    /**
     * @type {?}
     * @private
     */
    PngAnnounceComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9ub3RpZnkuYW5ub3VuY2UvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBQzVGLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDdkMsT0FBTyxFQUFDLFdBQVcsRUFBYyxVQUFVLEVBQUUsVUFBVSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQzFFLE9BQU8sRUFBQyxXQUFXLEVBQUUsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ25ELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFFM0MsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLGdCQUFnQixDQUFDOztBQUd0QyxNQUFNLE9BQU8sc0JBQXNCLEdBQWU7SUFDaEQsS0FBSyxFQUFFLFdBQVcsQ0FBQyxJQUFJO0lBQ3ZCLFNBQVMsRUFBRSxJQUFJO0lBQ2YsUUFBUSxFQUFFLElBQUk7SUFDZCxVQUFVLEVBQUUsSUFBSTtDQUNqQjtBQWFELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxhQUFhOzs7OztJQU1yRCxZQUFvQixjQUE4QixFQUFVLEVBQXFCO1FBQy9FLEtBQUssRUFBRSxDQUFDO1FBRFUsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFFL0UsSUFBSSxDQUFDLFFBQVEscUJBQ1Isc0JBQXNCLEVBQ3RCLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUMxQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLENBQUM7SUFDMUQsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsY0FBYyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQzthQUN6RCxJQUFJLENBQ0gsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDMUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsS0FBSyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FDMUgsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7O2tCQUNiLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQztZQUN6QyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7SUFFRCxjQUFjLENBQUMsTUFBa0I7UUFDL0IsT0FBTztZQUNMLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRztZQUNmLFFBQVEsRUFBRSxNQUFNLENBQUMsS0FBSyxJQUFJLFdBQVcsQ0FBQyxJQUFJO1lBQzFDLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FBSztZQUNyQixNQUFNLEVBQUUsTUFBTSxDQUFDLE9BQU87WUFDdEIsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRO1lBQ3pCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtTQUNsQixDQUFDO0lBQ0osQ0FBQzs7O1lBL0NGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsUUFBUSxFQUFFOzs7OztHQUtUO2dCQUNELFNBQVMsRUFBRSxDQUFDLGNBQWMsQ0FBQztnQkFDM0IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQ7Ozs7WUF0Qk8sY0FBYztZQUpXLGlCQUFpQjs7OztJQTZCaEQsd0NBQXFCOzs7OztJQUVyQixpREFBc0M7Ozs7O0lBRTFCLDhDQUFzQzs7Ozs7SUFBRSxrQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCYXNlQ29tcG9uZW50fSBmcm9tICdAZXIvY29yZSc7XG5pbXBvcnQge05vdGlmeUxldmVsLCBOb3RpZnlQcm9wLCBOb3RpZnlUeXBlLCBTdGF0ZU5hbWVzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb25maWdVdGlscywgU3RhdGVzVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge01lc3NhZ2VTZXJ2aWNlfSBmcm9tICdwcmltZW5nL2FwaSc7XG5pbXBvcnQge01lc3NhZ2V9IGZyb20gJ3ByaW1lbmcvY29tcG9uZW50cy9jb21tb24vbWVzc2FnZSc7XG5pbXBvcnQge2ZpbHRlcn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0FOTk9VTkNFX1BST1BTOiBOb3RpZnlQcm9wID0ge1xuICBsZXZlbDogTm90aWZ5TGV2ZWwuSU5GTyxcbiAgYW5pbWF0aW9uOiB0cnVlLFxuICBjbG9zYWJsZTogdHJ1ZSxcbiAgYmFzZVpJbmRleDogMjAwMFxufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG5nLWFubm91bmNlJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8cC1tZXNzYWdlcyBbc3R5bGVDbGFzc109XCJhbm5vdW5jZS5zdHlsZUNsYXNzXCJcbiAgICAgICAgICAgICAgICBbc3R5bGVdPVwiYW5ub3VuY2Uuc3R5bGVcIlxuICAgICAgICAgICAgICAgIFtjbG9zYWJsZV09XCJhbm5vdW5jZS5jbG9zYWJsZVwiXG4gICAgPjwvcC1tZXNzYWdlcz5cbiAgYCxcbiAgcHJvdmlkZXJzOiBbTWVzc2FnZVNlcnZpY2VdLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBQbmdBbm5vdW5jZUNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIGFubm91bmNlOiBOb3RpZnlQcm9wO1xuXG4gIHByaXZhdGUgZGVmYXVsdE5vdGlmeVR5cGU6IE5vdGlmeVR5cGU7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtZXNzYWdlU2VydmljZTogTWVzc2FnZVNlcnZpY2UsIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmFubm91bmNlID0ge1xuICAgICAgLi4uREVGQVVMVF9BTk5PVU5DRV9QUk9QUyxcbiAgICAgIC4uLkNvbmZpZ1V0aWxzLmdldENvbmZpZygpLmFubm91bmNlIHx8IHt9XG4gICAgfTtcbiAgICB0aGlzLmRlZmF1bHROb3RpZnlUeXBlID0gQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkubm90aWZ5O1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy4kc3Vic2NyaXB0aW9ucyA9IFN0YXRlc1V0aWxzLm9ic2VydmUoU3RhdGVOYW1lcy5ub3RpZnkpXG4gICAgICAucGlwZShcbiAgICAgICAgZmlsdGVyKG5vdGlmeSA9PiBub3RpZnkgJiYgbm90aWZ5Lm1lc3NhZ2UpLFxuICAgICAgICBmaWx0ZXIobm90aWZ5ID0+IG5vdGlmeS50eXBlID09PSBOb3RpZnlUeXBlLkFOTk9VTkNFIHx8ICghbm90aWZ5LnR5cGUgJiYgdGhpcy5kZWZhdWx0Tm90aWZ5VHlwZSA9PT0gTm90aWZ5VHlwZS5BTk5PVU5DRSkpXG4gICAgICApLnN1YnNjcmliZShub3RpZnkgPT4ge1xuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMuZ2V0Tm90aWZ5TW9kZWwobm90aWZ5KTtcbiAgICAgICAgdGhpcy5tZXNzYWdlU2VydmljZS5hZGQobW9kZWwpO1xuICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZ2V0Tm90aWZ5TW9kZWwobm90aWZ5OiBOb3RpZnlQcm9wKTogTWVzc2FnZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleTogbm90aWZ5LmtleSxcbiAgICAgIHNldmVyaXR5OiBub3RpZnkubGV2ZWwgfHwgTm90aWZ5TGV2ZWwuSU5GTyxcbiAgICAgIHN1bW1hcnk6IG5vdGlmeS50aXRsZSxcbiAgICAgIGRldGFpbDogbm90aWZ5Lm1lc3NhZ2UsXG4gICAgICBjbG9zYWJsZTogbm90aWZ5LmNsb3NhYmxlLFxuICAgICAgZGF0YTogbm90aWZ5LmRhdGFcbiAgICB9O1xuICB9XG5cbn1cblxuXG4iXX0=