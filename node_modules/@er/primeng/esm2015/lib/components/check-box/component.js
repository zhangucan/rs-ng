/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DataAwareControlWrapperComponent } from '@er/core';
import { CommonsUtils, DataItemUtils } from '@er/utils';
import { DEFAULT_CHECK_BOX_PROPS } from './type';
export class PngCheckBoxComponent extends DataAwareControlWrapperComponent {
    constructor() {
        super(...arguments);
        this.valueParser = this.parseValue;
        this.modelFormatter = this.formatModel;
        this.$defaultProps = DEFAULT_CHECK_BOX_PROPS;
    }
    /**
     * @return {?}
     */
    get chkValue() {
        return this._chkValue;
    }
    /**
     * @param {?} values
     * @return {?}
     */
    set chkValue(values) {
        this._chkValue = values;
        /** @type {?} */
        const data = this.data$.value;
        if (CommonsUtils.isArray(data)) {
            /** @type {?} */
            const objectValues = [];
            values.forEach(value => {
                /** @type {?} */
                const matched = ((/** @type {?} */ (data))).filter(v => v[this.dataKey] === value);
                if (matched.length === 1) {
                    objectValues.push(DataItemUtils.getItemValue(matched[0], this.valueKey));
                }
            });
            this.value = objectValues.length > 0 ? objectValues : null;
        }
        else {
            this.value = values;
        }
    }
    /**
     * @return {?}
     */
    get dataKey() {
        return CommonsUtils.get(this.$props, '$ext.dataItemProps.idKey', 'value');
    }
    /**
     * @return {?}
     */
    get valueKey() {
        return CommonsUtils.get(this.$props, '$ext.dataItemProps.valueKey', 'value');
    }
    /**
     * @param {?} model
     * @return {?}
     */
    formatModel(model) {
        if (this.$props && !this.$props.label && model) {
            /** @type {?} */
            const models = CommonsUtils.getArrayValue(model);
            this._chkValue = [];
            models.forEach(m => {
                if (CommonsUtils.isJson(m)) {
                    this._chkValue.push(DataItemUtils.getItemValue(m, this.dataKey));
                }
                else {
                    this._chkValue.push(m);
                }
            });
            return models;
        }
        else {
            return model;
        }
    }
}
PngCheckBoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-check-box',
                template: `
    <ng-container *ngIf="$props.label;else multiTpl">
      <p-checkbox
        class="m-2"
        [(ngModel)]="value"
        erPropsBind
        [props]="$props"
        [context]="ctx"
        binary="true"
        (onChange)="updateTouch()"
      >
      </p-checkbox>
    </ng-container>
    <ng-template #multiTpl>
      <div class="d-flex pb-2"
           [ngClass]="$props.$ext['inline']===false?'flex-column':'flex-wrap'"
           [erApiData]="apiDataProps"
      >
        <ng-container *ngFor="let option of data$|async|erDataItems:$props.$ext.dataItemProps;let i=index">
          <span class="d-flex align-items-center">
             <p-checkbox
               class="m-2"
               [(ngModel)]="chkValue"
               [attr.index]="i"
               erPropsBind
               [props]="$props"
               [context]="ctx"
               [value]="option.data|erValue:dataKey"
               (onChange)="updateTouch()"
             >
             </p-checkbox>
             <span class="mr-4" [innerHTML]="option.label|erSafeHtml"></span>
          </span>
        </ng-container>
      </div>
    </ng-template>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngCheckBoxComponent),
                        multi: true
                    }]
            }] }
];
if (false) {
    /** @type {?} */
    PngCheckBoxComponent.prototype.valueParser;
    /** @type {?} */
    PngCheckBoxComponent.prototype.modelFormatter;
    /** @type {?} */
    PngCheckBoxComponent.prototype.$defaultProps;
    /**
     * @type {?}
     * @private
     */
    PngCheckBoxComponent.prototype._chkValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9jaGVjay1ib3gvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUMsZ0NBQWdDLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDMUQsT0FBTyxFQUFDLFlBQVksRUFBRSxhQUFhLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdEQsT0FBTyxFQUFDLHVCQUF1QixFQUFtQixNQUFNLFFBQVEsQ0FBQztBQWtEakUsTUFBTSxPQUFPLG9CQUFxQixTQUFRLGdDQUFrRDtJQTlDNUY7O1FBZ0RFLGdCQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUU5QixtQkFBYyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFFbEMsa0JBQWEsR0FBRyx1QkFBdUIsQ0FBQztJQWtEMUMsQ0FBQzs7OztJQTdDQyxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFFRCxJQUFJLFFBQVEsQ0FBQyxNQUFhO1FBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDOztjQUNsQixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLO1FBQzdCLElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTs7a0JBQ3hCLFlBQVksR0FBRyxFQUFFO1lBQ3ZCLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7O3NCQUNmLE9BQU8sR0FBRyxDQUFDLG1CQUFNLElBQUksRUFBQSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxLQUFLLENBQUM7Z0JBQ25FLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBQ3hCLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7aUJBQzFFO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztTQUM1RDthQUFNO1lBQ0wsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7U0FDckI7SUFDSCxDQUFDOzs7O0lBRUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsMEJBQTBCLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDNUUsQ0FBQzs7OztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLDZCQUE2QixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9FLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLEtBQUs7UUFDZixJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxLQUFLLEVBQUU7O2tCQUN4QyxNQUFNLEdBQUcsWUFBWSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7WUFDaEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7WUFDcEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDakIsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUMxQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztpQkFDbEU7cUJBQU07b0JBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3hCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSCxPQUFPLE1BQU0sQ0FBQztTQUNmO2FBQU07WUFDTCxPQUFPLEtBQUssQ0FBQztTQUNkO0lBQ0gsQ0FBQzs7O1lBckdGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZUFBZTtnQkFDekIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQ1Q7Z0JBQ0QsU0FBUyxFQUFFLENBQUM7d0JBQ1YsT0FBTyxFQUFFLGlCQUFpQjt3QkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQzt3QkFDbkQsS0FBSyxFQUFFLElBQUk7cUJBQ1osQ0FBQzthQUNIOzs7O0lBSUMsMkNBQThCOztJQUU5Qiw4Q0FBa0M7O0lBRWxDLDZDQUF3Qzs7Ozs7SUFFeEMseUNBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIGZvcndhcmRSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOR19WQUxVRV9BQ0NFU1NPUn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtEYXRhQXdhcmVDb250cm9sV3JhcHBlckNvbXBvbmVudH0gZnJvbSAnQGVyL2NvcmUnO1xuaW1wb3J0IHtDb21tb25zVXRpbHMsIERhdGFJdGVtVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge0RFRkFVTFRfQ0hFQ0tfQk9YX1BST1BTLCBQbmdDaGVja2JveFByb3BzfSBmcm9tICcuL3R5cGUnO1xuXG5leHBvcnQge1BuZ0NoZWNrYm94UHJvcHN9IGZyb20gJy4vdHlwZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BuZy1jaGVjay1ib3gnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIkcHJvcHMubGFiZWw7ZWxzZSBtdWx0aVRwbFwiPlxuICAgICAgPHAtY2hlY2tib3hcbiAgICAgICAgY2xhc3M9XCJtLTJcIlxuICAgICAgICBbKG5nTW9kZWwpXT1cInZhbHVlXCJcbiAgICAgICAgZXJQcm9wc0JpbmRcbiAgICAgICAgW3Byb3BzXT1cIiRwcm9wc1wiXG4gICAgICAgIFtjb250ZXh0XT1cImN0eFwiXG4gICAgICAgIGJpbmFyeT1cInRydWVcIlxuICAgICAgICAob25DaGFuZ2UpPVwidXBkYXRlVG91Y2goKVwiXG4gICAgICA+XG4gICAgICA8L3AtY2hlY2tib3g+XG4gICAgPC9uZy1jb250YWluZXI+XG4gICAgPG5nLXRlbXBsYXRlICNtdWx0aVRwbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggcGItMlwiXG4gICAgICAgICAgIFtuZ0NsYXNzXT1cIiRwcm9wcy4kZXh0WydpbmxpbmUnXT09PWZhbHNlPydmbGV4LWNvbHVtbic6J2ZsZXgtd3JhcCdcIlxuICAgICAgICAgICBbZXJBcGlEYXRhXT1cImFwaURhdGFQcm9wc1wiXG4gICAgICA+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IG9wdGlvbiBvZiBkYXRhJHxhc3luY3xlckRhdGFJdGVtczokcHJvcHMuJGV4dC5kYXRhSXRlbVByb3BzO2xldCBpPWluZGV4XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICAgPHAtY2hlY2tib3hcbiAgICAgICAgICAgICAgIGNsYXNzPVwibS0yXCJcbiAgICAgICAgICAgICAgIFsobmdNb2RlbCldPVwiY2hrVmFsdWVcIlxuICAgICAgICAgICAgICAgW2F0dHIuaW5kZXhdPVwiaVwiXG4gICAgICAgICAgICAgICBlclByb3BzQmluZFxuICAgICAgICAgICAgICAgW3Byb3BzXT1cIiRwcm9wc1wiXG4gICAgICAgICAgICAgICBbY29udGV4dF09XCJjdHhcIlxuICAgICAgICAgICAgICAgW3ZhbHVlXT1cIm9wdGlvbi5kYXRhfGVyVmFsdWU6ZGF0YUtleVwiXG4gICAgICAgICAgICAgICAob25DaGFuZ2UpPVwidXBkYXRlVG91Y2goKVwiXG4gICAgICAgICAgICAgPlxuICAgICAgICAgICAgIDwvcC1jaGVja2JveD5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1yLTRcIiBbaW5uZXJIVE1MXT1cIm9wdGlvbi5sYWJlbHxlclNhZmVIdG1sXCI+PC9zcGFuPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8L2Rpdj5cbiAgICA8L25nLXRlbXBsYXRlPlxuICBgLFxuICBwcm92aWRlcnM6IFt7XG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gUG5nQ2hlY2tCb3hDb21wb25lbnQpLFxuICAgIG11bHRpOiB0cnVlXG4gIH1dXG59KVxuXG5leHBvcnQgY2xhc3MgUG5nQ2hlY2tCb3hDb21wb25lbnQgZXh0ZW5kcyBEYXRhQXdhcmVDb250cm9sV3JhcHBlckNvbXBvbmVudDxQbmdDaGVja2JveFByb3BzPiB7XG5cbiAgdmFsdWVQYXJzZXIgPSB0aGlzLnBhcnNlVmFsdWU7XG5cbiAgbW9kZWxGb3JtYXR0ZXIgPSB0aGlzLmZvcm1hdE1vZGVsO1xuXG4gICRkZWZhdWx0UHJvcHMgPSBERUZBVUxUX0NIRUNLX0JPWF9QUk9QUztcblxuICBwcml2YXRlIF9jaGtWYWx1ZTogYW55W107XG5cblxuICBnZXQgY2hrVmFsdWUoKTogYW55W10ge1xuICAgIHJldHVybiB0aGlzLl9jaGtWYWx1ZTtcbiAgfVxuXG4gIHNldCBjaGtWYWx1ZSh2YWx1ZXM6IGFueVtdKSB7XG4gICAgdGhpcy5fY2hrVmFsdWUgPSB2YWx1ZXM7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YSQudmFsdWU7XG4gICAgaWYgKENvbW1vbnNVdGlscy5pc0FycmF5KGRhdGEpKSB7XG4gICAgICBjb25zdCBvYmplY3RWYWx1ZXMgPSBbXTtcbiAgICAgIHZhbHVlcy5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgY29uc3QgbWF0Y2hlZCA9ICg8e31bXT5kYXRhKS5maWx0ZXIodiA9PiB2W3RoaXMuZGF0YUtleV0gPT09IHZhbHVlKTtcbiAgICAgICAgaWYgKG1hdGNoZWQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgb2JqZWN0VmFsdWVzLnB1c2goRGF0YUl0ZW1VdGlscy5nZXRJdGVtVmFsdWUobWF0Y2hlZFswXSwgdGhpcy52YWx1ZUtleSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMudmFsdWUgPSBvYmplY3RWYWx1ZXMubGVuZ3RoID4gMCA/IG9iamVjdFZhbHVlcyA6IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZXM7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGRhdGFLZXkoKSB7XG4gICAgcmV0dXJuIENvbW1vbnNVdGlscy5nZXQodGhpcy4kcHJvcHMsICckZXh0LmRhdGFJdGVtUHJvcHMuaWRLZXknLCAndmFsdWUnKTtcbiAgfVxuXG4gIGdldCB2YWx1ZUtleSgpIHtcbiAgICByZXR1cm4gQ29tbW9uc1V0aWxzLmdldCh0aGlzLiRwcm9wcywgJyRleHQuZGF0YUl0ZW1Qcm9wcy52YWx1ZUtleScsICd2YWx1ZScpO1xuICB9XG5cbiAgZm9ybWF0TW9kZWwobW9kZWwpIHtcbiAgICBpZiAodGhpcy4kcHJvcHMgJiYgIXRoaXMuJHByb3BzLmxhYmVsICYmIG1vZGVsKSB7XG4gICAgICBjb25zdCBtb2RlbHMgPSBDb21tb25zVXRpbHMuZ2V0QXJyYXlWYWx1ZShtb2RlbCk7XG4gICAgICB0aGlzLl9jaGtWYWx1ZSA9IFtdO1xuICAgICAgbW9kZWxzLmZvckVhY2gobSA9PiB7XG4gICAgICAgIGlmIChDb21tb25zVXRpbHMuaXNKc29uKG0pKSB7XG4gICAgICAgICAgdGhpcy5fY2hrVmFsdWUucHVzaChEYXRhSXRlbVV0aWxzLmdldEl0ZW1WYWx1ZShtLCB0aGlzLmRhdGFLZXkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9jaGtWYWx1ZS5wdXNoKG0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtb2RlbHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==