/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, forwardRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DataAwareControlWrapperComponent } from '@er/core';
import { Dropdown } from 'primeng/primeng';
import { DEFAULT_PNG_SELECT_PROPS } from './type';
export class PngSelectComponent extends DataAwareControlWrapperComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        super();
        this.cd = cd;
        this.$defaultProps = DEFAULT_PNG_SELECT_PROPS;
        this.templateNames = {
            group: 'group',
            item: 'item'
        };
    }
    /**
     * @return {?}
     */
    onPropsInit() {
        super.onPropsInit();
        if (!this.$props.group && this.$props.$ext && this.$props.$ext.dataItemProps && this.$props.$ext.dataItemProps.groupKey) {
            this.$props.group = true;
        }
    }
}
PngSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-select',
                template: `
    <p-dropdown
      [(ngModel)]="value"
      erPropsBind
      [props]="$props"
      [context]="ctx"
      [erApiData]="apiDataProps"
      [options]="data$|async|erDataItems:$props?.$ext?.dataItemProps"
      (onBlur)="updateTouch()"
    >
      <ng-template let-group pTemplate="group">
        <ng-container *ngTemplateOutlet="template(templateNames.group,groupTpl);context:{$implicit:group}"></ng-container>
      </ng-template>
      <ng-template let-group #groupTpl>
        <span *ngIf="group" style="font-size: 1em"><i class="fa fa-group text-primary"></i> {{group.label}}</span>
      </ng-template>
      <ng-template let-item pTemplate="item">
        <er-data-item [customerTpl]="template(templateNames.item)"
                      [item]="item.data"
                      [props]="$props.$ext.dataItemProps">
        </er-data-item>
      </ng-template>
    </p-dropdown>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngSelectComponent),
                        multi: true
                    }],
                styles: ["/deep/ .ui-dropdown-item{border-bottom:1px solid #a8a8a8!important;font-size:.8em;color:#000!important}/deep/ .ui-dropdown-item:hover{background-color:transparent!important;font-weight:700;color:red!important;font-size:1em}"]
            }] }
];
/** @nocollapse */
PngSelectComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PngSelectComponent.propDecorators = {
    dropDown: [{ type: ViewChild, args: [Dropdown,] }]
};
if (false) {
    /** @type {?} */
    PngSelectComponent.prototype.$defaultProps;
    /** @type {?} */
    PngSelectComponent.prototype.templateNames;
    /** @type {?} */
    PngSelectComponent.prototype.dropDown;
    /**
     * @type {?}
     * @private
     */
    PngSelectComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9zZWxlY3QvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFDLGdDQUFnQyxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQzFELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsd0JBQXdCLEVBQWlCLE1BQU0sUUFBUSxDQUFDO0FBc0NoRSxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsZ0NBQWdEOzs7O0lBV3RGLFlBQW9CLEVBQXFCO1FBQ3ZDLEtBQUssRUFBRSxDQUFDO1FBRFUsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFUekMsa0JBQWEsR0FBRyx3QkFBd0IsQ0FBQztRQUV6QyxrQkFBYSxHQUFHO1lBQ2QsS0FBSyxFQUFFLE9BQU87WUFDZCxJQUFJLEVBQUUsTUFBTTtTQUNiLENBQUM7SUFNRixDQUFDOzs7O0lBRUQsV0FBVztRQUNULEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUU7WUFDdkgsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQzs7O1lBdERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXVCVDtnQkFFRCxTQUFTLEVBQUUsQ0FBQzt3QkFDVixPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDO3dCQUNqRCxLQUFLLEVBQUUsSUFBSTtxQkFDWixDQUFDOzthQUNIOzs7O1lBeENPLGlCQUFpQjs7O3VCQW1EdEIsU0FBUyxTQUFDLFFBQVE7Ozs7SUFQbkIsMkNBQXlDOztJQUV6QywyQ0FHRTs7SUFFRixzQ0FBd0M7Ozs7O0lBRTVCLGdDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgZm9yd2FyZFJlZiwgVmlld0NoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TkdfVkFMVUVfQUNDRVNTT1J9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7RGF0YUF3YXJlQ29udHJvbFdyYXBwZXJDb21wb25lbnR9IGZyb20gJ0Blci9jb3JlJztcbmltcG9ydCB7RHJvcGRvd259IGZyb20gJ3ByaW1lbmcvcHJpbWVuZyc7XG5pbXBvcnQge0RFRkFVTFRfUE5HX1NFTEVDVF9QUk9QUywgUG5nU2VsZWN0UHJvcHN9IGZyb20gJy4vdHlwZSc7XG5cbmV4cG9ydCB7UG5nU2VsZWN0UHJvcHN9IGZyb20gJy4vdHlwZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BuZy1zZWxlY3QnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxwLWRyb3Bkb3duXG4gICAgICBbKG5nTW9kZWwpXT1cInZhbHVlXCJcbiAgICAgIGVyUHJvcHNCaW5kXG4gICAgICBbcHJvcHNdPVwiJHByb3BzXCJcbiAgICAgIFtjb250ZXh0XT1cImN0eFwiXG4gICAgICBbZXJBcGlEYXRhXT1cImFwaURhdGFQcm9wc1wiXG4gICAgICBbb3B0aW9uc109XCJkYXRhJHxhc3luY3xlckRhdGFJdGVtczokcHJvcHM/LiRleHQ/LmRhdGFJdGVtUHJvcHNcIlxuICAgICAgKG9uQmx1cik9XCJ1cGRhdGVUb3VjaCgpXCJcbiAgICA+XG4gICAgICA8bmctdGVtcGxhdGUgbGV0LWdyb3VwIHBUZW1wbGF0ZT1cImdyb3VwXCI+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0ZW1wbGF0ZSh0ZW1wbGF0ZU5hbWVzLmdyb3VwLGdyb3VwVHBsKTtjb250ZXh0OnskaW1wbGljaXQ6Z3JvdXB9XCI+PC9uZy1jb250YWluZXI+XG4gICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgPG5nLXRlbXBsYXRlIGxldC1ncm91cCAjZ3JvdXBUcGw+XG4gICAgICAgIDxzcGFuICpuZ0lmPVwiZ3JvdXBcIiBzdHlsZT1cImZvbnQtc2l6ZTogMWVtXCI+PGkgY2xhc3M9XCJmYSBmYS1ncm91cCB0ZXh0LXByaW1hcnlcIj48L2k+IHt7Z3JvdXAubGFiZWx9fTwvc3Bhbj5cbiAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICA8bmctdGVtcGxhdGUgbGV0LWl0ZW0gcFRlbXBsYXRlPVwiaXRlbVwiPlxuICAgICAgICA8ZXItZGF0YS1pdGVtIFtjdXN0b21lclRwbF09XCJ0ZW1wbGF0ZSh0ZW1wbGF0ZU5hbWVzLml0ZW0pXCJcbiAgICAgICAgICAgICAgICAgICAgICBbaXRlbV09XCJpdGVtLmRhdGFcIlxuICAgICAgICAgICAgICAgICAgICAgIFtwcm9wc109XCIkcHJvcHMuJGV4dC5kYXRhSXRlbVByb3BzXCI+XG4gICAgICAgIDwvZXItZGF0YS1pdGVtPlxuICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICA8L3AtZHJvcGRvd24+XG4gIGAsXG4gIHN0eWxlVXJsczogWydzdHlsZXMuc2NzcyddLFxuICBwcm92aWRlcnM6IFt7XG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gUG5nU2VsZWN0Q29tcG9uZW50KSxcbiAgICBtdWx0aTogdHJ1ZVxuICB9XVxufSlcblxuZXhwb3J0IGNsYXNzIFBuZ1NlbGVjdENvbXBvbmVudCBleHRlbmRzIERhdGFBd2FyZUNvbnRyb2xXcmFwcGVyQ29tcG9uZW50PFBuZ1NlbGVjdFByb3BzPiB7XG5cbiAgJGRlZmF1bHRQcm9wcyA9IERFRkFVTFRfUE5HX1NFTEVDVF9QUk9QUztcblxuICB0ZW1wbGF0ZU5hbWVzID0ge1xuICAgIGdyb3VwOiAnZ3JvdXAnLFxuICAgIGl0ZW06ICdpdGVtJ1xuICB9O1xuXG4gIEBWaWV3Q2hpbGQoRHJvcGRvd24pIGRyb3BEb3duOiBEcm9wZG93bjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBvblByb3BzSW5pdCgpIHtcbiAgICBzdXBlci5vblByb3BzSW5pdCgpO1xuICAgIGlmICghdGhpcy4kcHJvcHMuZ3JvdXAgJiYgdGhpcy4kcHJvcHMuJGV4dCAmJiB0aGlzLiRwcm9wcy4kZXh0LmRhdGFJdGVtUHJvcHMgJiYgdGhpcy4kcHJvcHMuJGV4dC5kYXRhSXRlbVByb3BzLmdyb3VwS2V5KSB7XG4gICAgICB0aGlzLiRwcm9wcy5ncm91cCA9IHRydWU7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==