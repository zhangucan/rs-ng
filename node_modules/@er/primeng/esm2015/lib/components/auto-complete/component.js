/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DataAwareControlWrapperComponent } from '@er/core';
import { CommonsUtils } from '@er/utils';
import { DEFAULT_PNG_AUTO_COMPLETE_PROPS } from './type';
export class PngAutoCompleteComponent extends DataAwareControlWrapperComponent {
    constructor() {
        super(...arguments);
        this.valueParser = this.parseValue;
        this.$defaultProps = DEFAULT_PNG_AUTO_COMPLETE_PROPS;
    }
    /**
     * @return {?}
     */
    onPropsInit() {
        super.onPropsInit();
        /** @type {?} */
        let placeholder = '请输入';
        if (this.$props.$ext.apiDataProps) {
            if (!this.$props.$ext.apiDataProps.withPrefix &&
                !this.$props.$ext.apiDataProps.withTerm &&
                !this.$props.$ext.apiDataProps.withWildcard) {
                this.$props.$ext.apiDataProps.withPy = this.$props.$ext.apiDataProps.withPy || true;
                this.$props.$ext.apiDataProps.withZh = this.$props.$ext.apiDataProps.withZh || true;
            }
            if (!this.$props.placeholder) {
                if (this.$props.$ext.apiDataProps.withPy) {
                    placeholder += '拼音首字母，';
                }
                if (this.$props.$ext.apiDataProps.withZh) {
                    placeholder += '汉字关键字';
                }
                placeholder += '筛选';
                this.$props.placeholder = placeholder;
            }
        }
        if (this.$props.$ext.dataItemProps) {
            if (!this.$props.field && CommonsUtils.isString(this.$props.$ext.dataItemProps.labelKey)) {
                this.$props.field = (/** @type {?} */ (this.$props.$ext.dataItemProps.labelKey));
            }
            if (this.$props.$ext.dataItemProps.showCounter) {
                if (!this.$props.$ext.apiDataProps.aggProps) {
                    /** @type {?} */
                    const fields = this.$props.$ext.apiDataProps.returnFields;
                    this.$props.$ext.apiDataProps.aggProps = fields;
                }
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    complete(event) {
        this.apiDataProps = Object.assign({}, this.apiDataProps, { queryValue: event.query });
    }
}
PngAutoCompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-auto-complete',
                template: `
    <div class="inner-addon">
      <p-autoComplete
        [(ngModel)]="value"
        erPropsBind
        [props]="$props"
        [context]="ctx"
        [erApiData]="apiDataProps"
        (completeMethod)="complete($event)"
        [suggestions]="data$|async"
        (onBlur)="updateTouch()"
      >
        <ng-template let-item pTemplate="item">
          <er-data-item [customerTpl]="template('_')"
                        [item]="item"
                        [props]="$props.$ext.dataItemProps"
          >
          </er-data-item>
        </ng-template>
      </p-autoComplete>
      <i *ngIf="value && resettable && !disabled" title="清除输入内容" class="fa fa-trash text-muted right" [ngClass]="$props.dropdown? 'clear1': 'clear2'" (click)="reset()"></i>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngAutoCompleteComponent),
                        multi: true
                    }],
                styles: [".clear1{right:22px!important}.clear2{right:2px!important}"]
            }] }
];
if (false) {
    /** @type {?} */
    PngAutoCompleteComponent.prototype.valueParser;
    /** @type {?} */
    PngAutoCompleteComponent.prototype.$defaultProps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9hdXRvLWNvbXBsZXRlL2NvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsT0FBTyxFQUFDLGdDQUFnQyxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQzFELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxFQUFDLCtCQUErQixFQUF1QixNQUFNLFFBQVEsQ0FBQztBQXFDN0UsTUFBTSxPQUFPLHdCQUF5QixTQUFRLGdDQUFzRDtJQWpDcEc7O1FBbUNFLGdCQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUU5QixrQkFBYSxHQUFHLCtCQUErQixDQUFDO0lBNkNsRCxDQUFDOzs7O0lBM0NDLFdBQVc7UUFDVCxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7O1lBQ2hCLFdBQVcsR0FBRyxLQUFLO1FBQ3ZCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBRWpDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVTtnQkFDM0MsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUTtnQkFDdkMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFO2dCQUM3QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDO2dCQUNwRixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDO2FBQ3JGO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFO2dCQUM1QixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUU7b0JBQ3hDLFdBQVcsSUFBSSxRQUFRLENBQUM7aUJBQ3pCO2dCQUNELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRTtvQkFDeEMsV0FBVyxJQUFJLE9BQU8sQ0FBQztpQkFDeEI7Z0JBQ0QsV0FBVyxJQUFJLElBQUksQ0FBQztnQkFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO2FBQ3ZDO1NBQ0Y7UUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ3hGLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLG1CQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUEsQ0FBQzthQUNyRTtZQUNELElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRTtnQkFDOUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUU7OzBCQUNyQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVk7b0JBQ3pELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDO2lCQUNqRDthQUNGO1NBQ0Y7SUFDSCxDQUFDOzs7OztJQUVELFFBQVEsQ0FBQyxLQUFLO1FBQ1osSUFBSSxDQUFDLFlBQVkscUJBQ1osSUFBSSxDQUFDLFlBQVksSUFDcEIsVUFBVSxFQUFFLEtBQUssQ0FBQyxLQUFLLEdBQ3hCLENBQUM7SUFDSixDQUFDOzs7WUFqRkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXNCVDtnQkFFRCxTQUFTLEVBQUUsQ0FBQzt3QkFDVixPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHdCQUF3QixDQUFDO3dCQUN2RCxLQUFLLEVBQUUsSUFBSTtxQkFDWixDQUFDOzthQUNIOzs7O0lBSUMsK0NBQThCOztJQUU5QixpREFBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgZm9yd2FyZFJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05HX1ZBTFVFX0FDQ0VTU09SfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0RhdGFBd2FyZUNvbnRyb2xXcmFwcGVyQ29tcG9uZW50fSBmcm9tICdAZXIvY29yZSc7XG5pbXBvcnQge0NvbW1vbnNVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7REVGQVVMVF9QTkdfQVVUT19DT01QTEVURV9QUk9QUywgUG5nQXV0b0NvbXBsZXRlUHJvcHN9IGZyb20gJy4vdHlwZSc7XG5cbmV4cG9ydCB7UG5nQXV0b0NvbXBsZXRlUHJvcHN9IGZyb20gJy4vdHlwZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BuZy1hdXRvLWNvbXBsZXRlJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwiaW5uZXItYWRkb25cIj5cbiAgICAgIDxwLWF1dG9Db21wbGV0ZVxuICAgICAgICBbKG5nTW9kZWwpXT1cInZhbHVlXCJcbiAgICAgICAgZXJQcm9wc0JpbmRcbiAgICAgICAgW3Byb3BzXT1cIiRwcm9wc1wiXG4gICAgICAgIFtjb250ZXh0XT1cImN0eFwiXG4gICAgICAgIFtlckFwaURhdGFdPVwiYXBpRGF0YVByb3BzXCJcbiAgICAgICAgKGNvbXBsZXRlTWV0aG9kKT1cImNvbXBsZXRlKCRldmVudClcIlxuICAgICAgICBbc3VnZ2VzdGlvbnNdPVwiZGF0YSR8YXN5bmNcIlxuICAgICAgICAob25CbHVyKT1cInVwZGF0ZVRvdWNoKClcIlxuICAgICAgPlxuICAgICAgICA8bmctdGVtcGxhdGUgbGV0LWl0ZW0gcFRlbXBsYXRlPVwiaXRlbVwiPlxuICAgICAgICAgIDxlci1kYXRhLWl0ZW0gW2N1c3RvbWVyVHBsXT1cInRlbXBsYXRlKCdfJylcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2l0ZW1dPVwiaXRlbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbcHJvcHNdPVwiJHByb3BzLiRleHQuZGF0YUl0ZW1Qcm9wc1wiXG4gICAgICAgICAgPlxuICAgICAgICAgIDwvZXItZGF0YS1pdGVtPlxuICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgPC9wLWF1dG9Db21wbGV0ZT5cbiAgICAgIDxpICpuZ0lmPVwidmFsdWUgJiYgcmVzZXR0YWJsZSAmJiAhZGlzYWJsZWRcIiB0aXRsZT1cIua4hemZpOi+k+WFpeWGheWuuVwiIGNsYXNzPVwiZmEgZmEtdHJhc2ggdGV4dC1tdXRlZCByaWdodFwiIFtuZ0NsYXNzXT1cIiRwcm9wcy5kcm9wZG93bj8gJ2NsZWFyMSc6ICdjbGVhcjInXCIgKGNsaWNrKT1cInJlc2V0KClcIj48L2k+XG4gICAgPC9kaXY+XG4gIGAsXG4gIHN0eWxlVXJsczogWydzdHlsZXMuc2NzcyddLFxuICBwcm92aWRlcnM6IFt7XG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gUG5nQXV0b0NvbXBsZXRlQ29tcG9uZW50KSxcbiAgICBtdWx0aTogdHJ1ZVxuICB9XVxufSlcblxuZXhwb3J0IGNsYXNzIFBuZ0F1dG9Db21wbGV0ZUNvbXBvbmVudCBleHRlbmRzIERhdGFBd2FyZUNvbnRyb2xXcmFwcGVyQ29tcG9uZW50PFBuZ0F1dG9Db21wbGV0ZVByb3BzPiB7XG5cbiAgdmFsdWVQYXJzZXIgPSB0aGlzLnBhcnNlVmFsdWU7XG5cbiAgJGRlZmF1bHRQcm9wcyA9IERFRkFVTFRfUE5HX0FVVE9fQ09NUExFVEVfUFJPUFM7XG5cbiAgb25Qcm9wc0luaXQoKSB7XG4gICAgc3VwZXIub25Qcm9wc0luaXQoKTtcbiAgICBsZXQgcGxhY2Vob2xkZXIgPSAn6K+36L6T5YWlJztcbiAgICBpZiAodGhpcy4kcHJvcHMuJGV4dC5hcGlEYXRhUHJvcHMpIHtcblxuICAgICAgaWYgKCF0aGlzLiRwcm9wcy4kZXh0LmFwaURhdGFQcm9wcy53aXRoUHJlZml4ICYmXG4gICAgICAgICF0aGlzLiRwcm9wcy4kZXh0LmFwaURhdGFQcm9wcy53aXRoVGVybSAmJlxuICAgICAgICAhdGhpcy4kcHJvcHMuJGV4dC5hcGlEYXRhUHJvcHMud2l0aFdpbGRjYXJkKSB7XG4gICAgICAgIHRoaXMuJHByb3BzLiRleHQuYXBpRGF0YVByb3BzLndpdGhQeSA9IHRoaXMuJHByb3BzLiRleHQuYXBpRGF0YVByb3BzLndpdGhQeSB8fCB0cnVlO1xuICAgICAgICB0aGlzLiRwcm9wcy4kZXh0LmFwaURhdGFQcm9wcy53aXRoWmggPSB0aGlzLiRwcm9wcy4kZXh0LmFwaURhdGFQcm9wcy53aXRoWmggfHwgdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLiRwcm9wcy5wbGFjZWhvbGRlcikge1xuICAgICAgICBpZiAodGhpcy4kcHJvcHMuJGV4dC5hcGlEYXRhUHJvcHMud2l0aFB5KSB7XG4gICAgICAgICAgcGxhY2Vob2xkZXIgKz0gJ+aLvOmfs+mmluWtl+avje+8jCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuJHByb3BzLiRleHQuYXBpRGF0YVByb3BzLndpdGhaaCkge1xuICAgICAgICAgIHBsYWNlaG9sZGVyICs9ICfmsYnlrZflhbPplK7lrZcnO1xuICAgICAgICB9XG4gICAgICAgIHBsYWNlaG9sZGVyICs9ICfnrZvpgIknO1xuICAgICAgICB0aGlzLiRwcm9wcy5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLiRwcm9wcy4kZXh0LmRhdGFJdGVtUHJvcHMpIHtcbiAgICAgIGlmICghdGhpcy4kcHJvcHMuZmllbGQgJiYgQ29tbW9uc1V0aWxzLmlzU3RyaW5nKHRoaXMuJHByb3BzLiRleHQuZGF0YUl0ZW1Qcm9wcy5sYWJlbEtleSkpIHtcbiAgICAgICAgdGhpcy4kcHJvcHMuZmllbGQgPSA8c3RyaW5nPnRoaXMuJHByb3BzLiRleHQuZGF0YUl0ZW1Qcm9wcy5sYWJlbEtleTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLiRwcm9wcy4kZXh0LmRhdGFJdGVtUHJvcHMuc2hvd0NvdW50ZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLiRwcm9wcy4kZXh0LmFwaURhdGFQcm9wcy5hZ2dQcm9wcykge1xuICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMuJHByb3BzLiRleHQuYXBpRGF0YVByb3BzLnJldHVybkZpZWxkcztcbiAgICAgICAgICB0aGlzLiRwcm9wcy4kZXh0LmFwaURhdGFQcm9wcy5hZ2dQcm9wcyA9IGZpZWxkcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbXBsZXRlKGV2ZW50KSB7XG4gICAgdGhpcy5hcGlEYXRhUHJvcHMgPSB7XG4gICAgICAuLi50aGlzLmFwaURhdGFQcm9wcyxcbiAgICAgIHF1ZXJ5VmFsdWU6IGV2ZW50LnF1ZXJ5XG4gICAgfTtcbiAgfVxufVxuIl19