/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';
import { BaseComponent } from '@er/core';
import { NotifyLevel, NotifyType, StateNames, UiPosition } from '@er/types';
import { ConfigUtils, StatesUtils } from '@er/utils';
import { MessageService } from 'primeng/api';
import { filter } from 'rxjs/operators';
/** @type {?} */
export const DEFAULT_ALERT_PROPS = {
    animation: true,
    duration: 3000,
    immutable: true,
    closable: true,
    autoZIndex: true,
    position: UiPosition.rightTop
};
export class PngAlertComponent extends BaseComponent {
    /**
     * @param {?} messageService
     * @param {?} cd
     */
    constructor(messageService, cd) {
        super();
        this.messageService = messageService;
        this.cd = cd;
        this.alert = Object.assign({}, DEFAULT_ALERT_PROPS, ConfigUtils.getConfig().alert || {});
        this.defaultNotifyType = ConfigUtils.getConfig().notify || NotifyType.ALERT;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.$subscriptions = StatesUtils.observe(StateNames.notify)
            .pipe(filter(notify => notify && notify.message), filter(notify => notify.type === NotifyType.ALERT || (!notify.type && this.defaultNotifyType === NotifyType.ALERT))).subscribe(notify => {
            /** @type {?} */
            const model = this.getNotifyModel(notify);
            this.messageService.add(model);
            this.cd.detectChanges();
        });
    }
    /**
     * @param {?} notify
     * @return {?}
     */
    getNotifyModel(notify) {
        return {
            key: notify.key,
            severity: notify.level || NotifyLevel.INFO,
            summary: notify.title,
            detail: notify.message,
            sticky: notify.sticky || false,
            life: notify.duration || notify.level === NotifyLevel.ERROR ? DEFAULT_ALERT_PROPS.duration * 2 : DEFAULT_ALERT_PROPS.duration,
            closable: notify.closable || true,
            data: notify.data
        };
    }
}
PngAlertComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-alert',
                template: `
    <p-toast [styleClass]="alert.styleClass"
             [style]="alert.style"
             [position]="alert.position"
             [autoZIndex]="alert.autoZIndex"
    ></p-toast>
  `,
                providers: [MessageService],
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngAlertComponent.ctorParameters = () => [
    { type: MessageService },
    { type: ChangeDetectorRef }
];
if (false) {
    /** @type {?} */
    PngAlertComponent.prototype.alert;
    /**
     * @type {?}
     * @private
     */
    PngAlertComponent.prototype.defaultNotifyType;
    /**
     * @type {?}
     * @private
     */
    PngAlertComponent.prototype.messageService;
    /**
     * @type {?}
     * @private
     */
    PngAlertComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9ub3RpZnkuYWxlcnQvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBQzVGLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDdkMsT0FBTyxFQUFDLFdBQVcsRUFBYyxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUN0RixPQUFPLEVBQUMsV0FBVyxFQUFFLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNuRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBRTNDLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFHdEMsTUFBTSxPQUFPLG1CQUFtQixHQUFlO0lBQzdDLFNBQVMsRUFBRSxJQUFJO0lBQ2YsUUFBUSxFQUFFLElBQUk7SUFDZCxTQUFTLEVBQUUsSUFBSTtJQUNmLFFBQVEsRUFBRSxJQUFJO0lBQ2QsVUFBVSxFQUFFLElBQUk7SUFDaEIsUUFBUSxFQUFFLFVBQVUsQ0FBQyxRQUFRO0NBQzlCO0FBY0QsTUFBTSxPQUFPLGlCQUFrQixTQUFRLGFBQWE7Ozs7O0lBTWxELFlBQW9CLGNBQThCLEVBQVUsRUFBcUI7UUFDL0UsS0FBSyxFQUFFLENBQUM7UUFEVSxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUUvRSxJQUFJLENBQUMsS0FBSyxxQkFDTCxtQkFBbUIsRUFDbkIsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQ3ZDLENBQUM7UUFDRixJQUFJLENBQUMsaUJBQWlCLEdBQUcsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDO0lBQzlFLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGNBQWMsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7YUFDekQsSUFBSSxDQUNILE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQzFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsaUJBQWlCLEtBQUssVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQ3BILENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFOztrQkFDYixLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUM7WUFDekMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Ozs7O0lBRUQsY0FBYyxDQUFDLE1BQWtCO1FBQy9CLE9BQU87WUFDTCxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUc7WUFDZixRQUFRLEVBQUUsTUFBTSxDQUFDLEtBQUssSUFBSSxXQUFXLENBQUMsSUFBSTtZQUMxQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEtBQUs7WUFDckIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPO1lBQ3RCLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxJQUFJLEtBQUs7WUFDOUIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDLEtBQUssS0FBSyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRO1lBQzdILFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxJQUFJLElBQUk7WUFDakMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJO1NBQ2xCLENBQUM7SUFDSixDQUFDOzs7WUFsREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxXQUFXO2dCQUNyQixRQUFRLEVBQUU7Ozs7OztHQU1UO2dCQUNELFNBQVMsRUFBRSxDQUFDLGNBQWMsQ0FBQztnQkFDM0IsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQ7Ozs7WUF6Qk8sY0FBYztZQUpXLGlCQUFpQjs7OztJQWdDaEQsa0NBQWtCOzs7OztJQUVsQiw4Q0FBc0M7Ozs7O0lBRTFCLDJDQUFzQzs7Ozs7SUFBRSwrQkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCYXNlQ29tcG9uZW50fSBmcm9tICdAZXIvY29yZSc7XG5pbXBvcnQge05vdGlmeUxldmVsLCBOb3RpZnlQcm9wLCBOb3RpZnlUeXBlLCBTdGF0ZU5hbWVzLCBVaVBvc2l0aW9ufSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb25maWdVdGlscywgU3RhdGVzVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge01lc3NhZ2VTZXJ2aWNlfSBmcm9tICdwcmltZW5nL2FwaSc7XG5pbXBvcnQge01lc3NhZ2V9IGZyb20gJ3ByaW1lbmcvY29tcG9uZW50cy9jb21tb24vbWVzc2FnZSc7XG5pbXBvcnQge2ZpbHRlcn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0FMRVJUX1BST1BTOiBOb3RpZnlQcm9wID0ge1xuICBhbmltYXRpb246IHRydWUsXG4gIGR1cmF0aW9uOiAzMDAwLFxuICBpbW11dGFibGU6IHRydWUsXG4gIGNsb3NhYmxlOiB0cnVlLFxuICBhdXRvWkluZGV4OiB0cnVlLFxuICBwb3NpdGlvbjogVWlQb3NpdGlvbi5yaWdodFRvcFxufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG5nLWFsZXJ0JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8cC10b2FzdCBbc3R5bGVDbGFzc109XCJhbGVydC5zdHlsZUNsYXNzXCJcbiAgICAgICAgICAgICBbc3R5bGVdPVwiYWxlcnQuc3R5bGVcIlxuICAgICAgICAgICAgIFtwb3NpdGlvbl09XCJhbGVydC5wb3NpdGlvblwiXG4gICAgICAgICAgICAgW2F1dG9aSW5kZXhdPVwiYWxlcnQuYXV0b1pJbmRleFwiXG4gICAgPjwvcC10b2FzdD5cbiAgYCxcbiAgcHJvdmlkZXJzOiBbTWVzc2FnZVNlcnZpY2VdLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBQbmdBbGVydENvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIGFsZXJ0OiBOb3RpZnlQcm9wO1xuXG4gIHByaXZhdGUgZGVmYXVsdE5vdGlmeVR5cGU6IE5vdGlmeVR5cGU7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtZXNzYWdlU2VydmljZTogTWVzc2FnZVNlcnZpY2UsIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmFsZXJ0ID0ge1xuICAgICAgLi4uREVGQVVMVF9BTEVSVF9QUk9QUyxcbiAgICAgIC4uLkNvbmZpZ1V0aWxzLmdldENvbmZpZygpLmFsZXJ0IHx8IHt9XG4gICAgfTtcbiAgICB0aGlzLmRlZmF1bHROb3RpZnlUeXBlID0gQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkubm90aWZ5IHx8IE5vdGlmeVR5cGUuQUxFUlQ7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLiRzdWJzY3JpcHRpb25zID0gU3RhdGVzVXRpbHMub2JzZXJ2ZShTdGF0ZU5hbWVzLm5vdGlmeSlcbiAgICAgIC5waXBlKFxuICAgICAgICBmaWx0ZXIobm90aWZ5ID0+IG5vdGlmeSAmJiBub3RpZnkubWVzc2FnZSksXG4gICAgICAgIGZpbHRlcihub3RpZnkgPT4gbm90aWZ5LnR5cGUgPT09IE5vdGlmeVR5cGUuQUxFUlQgfHwgKCFub3RpZnkudHlwZSAmJiB0aGlzLmRlZmF1bHROb3RpZnlUeXBlID09PSBOb3RpZnlUeXBlLkFMRVJUKSlcbiAgICAgICkuc3Vic2NyaWJlKG5vdGlmeSA9PiB7XG4gICAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5nZXROb3RpZnlNb2RlbChub3RpZnkpO1xuICAgICAgICB0aGlzLm1lc3NhZ2VTZXJ2aWNlLmFkZChtb2RlbCk7XG4gICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgfSk7XG4gIH1cblxuICBnZXROb3RpZnlNb2RlbChub3RpZnk6IE5vdGlmeVByb3ApOiBNZXNzYWdlIHtcbiAgICByZXR1cm4ge1xuICAgICAga2V5OiBub3RpZnkua2V5LFxuICAgICAgc2V2ZXJpdHk6IG5vdGlmeS5sZXZlbCB8fCBOb3RpZnlMZXZlbC5JTkZPLFxuICAgICAgc3VtbWFyeTogbm90aWZ5LnRpdGxlLFxuICAgICAgZGV0YWlsOiBub3RpZnkubWVzc2FnZSxcbiAgICAgIHN0aWNreTogbm90aWZ5LnN0aWNreSB8fCBmYWxzZSxcbiAgICAgIGxpZmU6IG5vdGlmeS5kdXJhdGlvbiB8fCBub3RpZnkubGV2ZWwgPT09IE5vdGlmeUxldmVsLkVSUk9SID8gREVGQVVMVF9BTEVSVF9QUk9QUy5kdXJhdGlvbiAqIDIgOiBERUZBVUxUX0FMRVJUX1BST1BTLmR1cmF0aW9uLFxuICAgICAgY2xvc2FibGU6IG5vdGlmeS5jbG9zYWJsZSB8fCB0cnVlLFxuICAgICAgZGF0YTogbm90aWZ5LmRhdGFcbiAgICB9O1xuICB9XG5cbn1cblxuXG4iXX0=