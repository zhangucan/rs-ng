/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ControlWrapperComponent } from '@er/core';
import { DateUtils } from '@er/utils';
import { DEFAULT_CALENDAR_PROPS } from './type';
export class PngCalendarComponent extends ControlWrapperComponent {
    constructor() {
        super(...arguments);
        this.modelFormatter = this.formatter;
        this.today = DateUtils.getDay();
        this.templateNames = {
            header: 'header',
            footer: 'footer',
            date: 'date'
        };
        this.$defaultProps = DEFAULT_CALENDAR_PROPS;
    }
    /**
     * @param {?} model
     * @return {?}
     */
    formatter(model) {
        if (model) {
            return DateUtils.toDate(model);
        }
    }
}
PngCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-calendar',
                template: `
    <p-calendar
      [(ngModel)]="value"
      erPropsBind
      [props]="$props"
      [context]="ctx"
      [monthNavigator]="$props.monthNavigator"
      [yearNavigator]="$props.yearNavigator"
      [yearRange]="$props.yearRange"
      (onBlur)="updateTouch()"
    >
      <p-header *ngIf="template(templateNames.header)">
        <ng-container *ngTemplateOutlet="template(templateNames.header)"></ng-container>
      </p-header>

      <p-footer *ngIf="template(templateNames.footer)">
        <ng-container *ngTemplateOutlet="template(templateNames.footer)"></ng-container>
      </p-footer>
      
      <ng-template pTemplate="date" let-date>
        <ng-container *ngTemplateOutlet="template(templateNames.date, dateTpl);context:{$implicit: date}"></ng-container>
      </ng-template>
    </p-calendar>

    <ng-template #dateTpl let-date>
      <span [ngClass]="{'bg-red white': (date.day === today)}"
            style="border-radius:50%;">{{date.day}}</span>
    </ng-template>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngCalendarComponent),
                        multi: true
                    }]
            }] }
];
if (false) {
    /** @type {?} */
    PngCalendarComponent.prototype.modelFormatter;
    /** @type {?} */
    PngCalendarComponent.prototype.today;
    /** @type {?} */
    PngCalendarComponent.prototype.templateNames;
    /** @type {?} */
    PngCalendarComponent.prototype.$defaultProps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9jYWxlbmRhci9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUNqRCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3BDLE9BQU8sRUFBQyxzQkFBc0IsRUFBbUIsTUFBTSxRQUFRLENBQUM7QUEwQ2hFLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSx1QkFBeUM7SUF0Q25GOztRQXdDRSxtQkFBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFFaEMsVUFBSyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUUzQixrQkFBYSxHQUFHO1lBQ2QsTUFBTSxFQUFFLFFBQVE7WUFDaEIsTUFBTSxFQUFFLFFBQVE7WUFDaEIsSUFBSSxFQUFFLE1BQU07U0FDYixDQUFDO1FBRUYsa0JBQWEsR0FBRyxzQkFBc0IsQ0FBQztJQU96QyxDQUFDOzs7OztJQUxDLFNBQVMsQ0FBQyxLQUFLO1FBQ2IsSUFBSSxLQUFLLEVBQUU7WUFDVCxPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDaEM7SUFDSCxDQUFDOzs7WUF4REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxjQUFjO2dCQUN4QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E0QlQ7Z0JBQ0QsU0FBUyxFQUFFLENBQUM7d0JBQ1YsT0FBTyxFQUFFLGlCQUFpQjt3QkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQzt3QkFDbkQsS0FBSyxFQUFFLElBQUk7cUJBQ1osQ0FBQzthQUNIOzs7O0lBSUMsOENBQWdDOztJQUVoQyxxQ0FBMkI7O0lBRTNCLDZDQUlFOztJQUVGLDZDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBmb3J3YXJkUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TkdfVkFMVUVfQUNDRVNTT1J9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7Q29udHJvbFdyYXBwZXJDb21wb25lbnR9IGZyb20gJ0Blci9jb3JlJztcbmltcG9ydCB7RGF0ZVV0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtERUZBVUxUX0NBTEVOREFSX1BST1BTLCBQbmdDYWxlbmRhclByb3BzfSBmcm9tICcuL3R5cGUnO1xuXG5leHBvcnQge1BuZ0NhbGVuZGFyUHJvcHN9IGZyb20gJy4vdHlwZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BuZy1jYWxlbmRhcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPHAtY2FsZW5kYXJcbiAgICAgIFsobmdNb2RlbCldPVwidmFsdWVcIlxuICAgICAgZXJQcm9wc0JpbmRcbiAgICAgIFtwcm9wc109XCIkcHJvcHNcIlxuICAgICAgW2NvbnRleHRdPVwiY3R4XCJcbiAgICAgIFttb250aE5hdmlnYXRvcl09XCIkcHJvcHMubW9udGhOYXZpZ2F0b3JcIlxuICAgICAgW3llYXJOYXZpZ2F0b3JdPVwiJHByb3BzLnllYXJOYXZpZ2F0b3JcIlxuICAgICAgW3llYXJSYW5nZV09XCIkcHJvcHMueWVhclJhbmdlXCJcbiAgICAgIChvbkJsdXIpPVwidXBkYXRlVG91Y2goKVwiXG4gICAgPlxuICAgICAgPHAtaGVhZGVyICpuZ0lmPVwidGVtcGxhdGUodGVtcGxhdGVOYW1lcy5oZWFkZXIpXCI+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0ZW1wbGF0ZSh0ZW1wbGF0ZU5hbWVzLmhlYWRlcilcIj48L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvcC1oZWFkZXI+XG5cbiAgICAgIDxwLWZvb3RlciAqbmdJZj1cInRlbXBsYXRlKHRlbXBsYXRlTmFtZXMuZm9vdGVyKVwiPlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwidGVtcGxhdGUodGVtcGxhdGVOYW1lcy5mb290ZXIpXCI+PC9uZy1jb250YWluZXI+XG4gICAgICA8L3AtZm9vdGVyPlxuICAgICAgXG4gICAgICA8bmctdGVtcGxhdGUgcFRlbXBsYXRlPVwiZGF0ZVwiIGxldC1kYXRlPlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwidGVtcGxhdGUodGVtcGxhdGVOYW1lcy5kYXRlLCBkYXRlVHBsKTtjb250ZXh0OnskaW1wbGljaXQ6IGRhdGV9XCI+PC9uZy1jb250YWluZXI+XG4gICAgICA8L25nLXRlbXBsYXRlPlxuICAgIDwvcC1jYWxlbmRhcj5cblxuICAgIDxuZy10ZW1wbGF0ZSAjZGF0ZVRwbCBsZXQtZGF0ZT5cbiAgICAgIDxzcGFuIFtuZ0NsYXNzXT1cInsnYmctcmVkIHdoaXRlJzogKGRhdGUuZGF5ID09PSB0b2RheSl9XCJcbiAgICAgICAgICAgIHN0eWxlPVwiYm9yZGVyLXJhZGl1czo1MCU7XCI+e3tkYXRlLmRheX19PC9zcGFuPlxuICAgIDwvbmctdGVtcGxhdGU+XG4gIGAsXG4gIHByb3ZpZGVyczogW3tcbiAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBQbmdDYWxlbmRhckNvbXBvbmVudCksXG4gICAgbXVsdGk6IHRydWVcbiAgfV1cbn0pXG5cbmV4cG9ydCBjbGFzcyBQbmdDYWxlbmRhckNvbXBvbmVudCBleHRlbmRzIENvbnRyb2xXcmFwcGVyQ29tcG9uZW50PFBuZ0NhbGVuZGFyUHJvcHM+IHtcblxuICBtb2RlbEZvcm1hdHRlciA9IHRoaXMuZm9ybWF0dGVyO1xuXG4gIHRvZGF5ID0gRGF0ZVV0aWxzLmdldERheSgpO1xuXG4gIHRlbXBsYXRlTmFtZXMgPSB7XG4gICAgaGVhZGVyOiAnaGVhZGVyJyxcbiAgICBmb290ZXI6ICdmb290ZXInLFxuICAgIGRhdGU6ICdkYXRlJ1xuICB9O1xuXG4gICRkZWZhdWx0UHJvcHMgPSBERUZBVUxUX0NBTEVOREFSX1BST1BTO1xuXG4gIGZvcm1hdHRlcihtb2RlbCkge1xuICAgIGlmIChtb2RlbCkge1xuICAgICAgcmV0dXJuIERhdGVVdGlscy50b0RhdGUobW9kZWwpO1xuICAgIH1cbiAgfVxufVxuIl19