/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ContentChildren, EventEmitter, Input, Output, QueryList } from '@angular/core';
import { BaseComponent } from '@er/core';
import { PngStepComponent } from './step.component';
export class PngWizardComponent extends BaseComponent {
    constructor() {
        super(...arguments);
        this.activeIndex = 0;
        this.stepChange = new EventEmitter();
        this.items = [];
        this.templateNames = {
            header: 'header',
            footer: 'footer'
        };
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        super.ngAfterContentInit();
        this.steps.toArray().forEach((step, index) => {
            if (!step.styleClass) {
                step.styleClass = this.stepStyleClass;
            }
            if (!step.style) {
                step.style = this.style;
            }
            if (index === this.activeIndex) {
                step.active = true;
            }
            this.items[index] = {
                label: step.label,
                command: (event) => {
                    this.steps.toArray().forEach((s) => s.active = false);
                    step.active = true;
                    this.activeIndex = index;
                    this.stepChange.emit(index);
                }
            };
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.steps) {
            return;
        }
        for (const prop in changes) {
            if (prop === 'activeIndex') {
                /** @type {?} */
                const curIndex = changes[prop].currentValue;
                this.steps.toArray().forEach((step, index) => {
                    /** @type {?} */
                    const selected = index === curIndex;
                    step.active = selected;
                    if (selected) {
                        // emit currently selected label
                        // this.change.next(step.label);
                    }
                });
                this.stepChange.emit(curIndex);
            }
        }
    }
    /**
     * @return {?}
     */
    previous() {
        this.activeIndex--;
        this.stepChange.emit(this.activeIndex);
        this.ngOnChanges({
            activeIndex: {
                currentValue: this.activeIndex,
                previousValue: this.activeIndex + 1,
                firstChange: false,
                isFirstChange: () => false
            }
        });
    }
    /**
     * @return {?}
     */
    next() {
        this.activeIndex++;
        this.stepChange.emit(this.activeIndex);
        this.ngOnChanges({
            activeIndex: {
                currentValue: this.activeIndex,
                previousValue: this.activeIndex - 1,
                firstChange: false,
                isFirstChange: () => false
            }
        });
    }
}
PngWizardComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-wizard',
                template: `
    <ng-container *ngIf="template(templateNames.header)">
      <ng-container *ngTemplateOutlet="template(templateNames.header)"></ng-container>
    </ng-container>
    <p-steps [model]="items" [(activeIndex)]="activeIndex"
             [ngClass]="styleClass" [ngStyle]="style" [readonly]="false"></p-steps>
    <ng-content></ng-content>
    <button pButton type="button" *ngIf="activeIndex > 0" class="mr-2"
            (click)="previous()" icon="fa fa-hand-o-left" label="Previous"></button>
    <button pButton type="button" *ngIf="activeIndex < items.length - 1"
            (click)="next()" icon="fa fa-hand-o-right" iconPos="right" label="Next"></button>
    <ng-container *ngIf="template(templateNames.footer)">
      <ng-container *ngTemplateOutlet="template(templateNames.footer)"></ng-container>
    </ng-container>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host::ng-deep .ui-steps ul[role=tablist]{display:flex!important;justify-content:space-around!important}"]
            }] }
];
PngWizardComponent.propDecorators = {
    activeIndex: [{ type: Input }],
    styleClass: [{ type: Input }],
    style: [{ type: Input }],
    stepStyleClass: [{ type: Input }],
    stepStyle: [{ type: Input }],
    stepChange: [{ type: Output }],
    steps: [{ type: ContentChildren, args: [PngStepComponent,] }]
};
if (false) {
    /** @type {?} */
    PngWizardComponent.prototype.activeIndex;
    /** @type {?} */
    PngWizardComponent.prototype.styleClass;
    /** @type {?} */
    PngWizardComponent.prototype.style;
    /** @type {?} */
    PngWizardComponent.prototype.stepStyleClass;
    /** @type {?} */
    PngWizardComponent.prototype.stepStyle;
    /** @type {?} */
    PngWizardComponent.prototype.stepChange;
    /** @type {?} */
    PngWizardComponent.prototype.items;
    /** @type {?} */
    PngWizardComponent.prototype.steps;
    /** @type {?} */
    PngWizardComponent.prototype.templateNames;
}
//# sourceMappingURL=data:application/json;base64,