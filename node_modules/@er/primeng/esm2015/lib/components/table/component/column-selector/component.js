/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { BaseComponent } from '@er/core';
export class PngTableColumnSelectorComponent extends BaseComponent {
    constructor() {
        super(...arguments);
        this.onColumnsChange = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    changeColumns(event) {
        event.value.forEach(column => column.hidden = false);
        this.onColumnsChange.emit(event);
    }
}
PngTableColumnSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-table-column-selector',
                template: `

    <p-multiSelect [style]="{height: '30px', minWidth: '150px'}"
                   [ngClass]="styleClass"
                   [ngStyle]="style"
                   [options]="optionColumns"
                   [(ngModel)]="columns"
                   optionLabel="label"
                   [selectedItemsLabel]="'当前显示{0}('+optionColumns?.length+')个列'"
                   defaultLabel="选择显示字段"
                   (onChange)="changeColumns($event)"
    >
    </p-multiSelect>

  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
PngTableColumnSelectorComponent.propDecorators = {
    columns: [{ type: Input }],
    optionColumns: [{ type: Input }],
    styleClass: [{ type: Input }],
    style: [{ type: Input }],
    onColumnsChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    PngTableColumnSelectorComponent.prototype.columns;
    /** @type {?} */
    PngTableColumnSelectorComponent.prototype.optionColumns;
    /** @type {?} */
    PngTableColumnSelectorComponent.prototype.styleClass;
    /** @type {?} */
    PngTableColumnSelectorComponent.prototype.style;
    /** @type {?} */
    PngTableColumnSelectorComponent.prototype.onColumnsChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YWJsZS9jb21wb25lbnQvY29sdW1uLXNlbGVjdG9yL2NvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM5RixPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBdUJ2QyxNQUFNLE9BQU8sK0JBQWdDLFNBQVEsYUFBYTtJQXBCbEU7O1FBOEJZLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQU9qRCxDQUFDOzs7OztJQUxDLGFBQWEsQ0FBQyxLQUFLO1FBQ2pCLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7WUFuQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7R0FjVDtnQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7O3NCQUlFLEtBQUs7NEJBRUwsS0FBSzt5QkFFTCxLQUFLO29CQUVMLEtBQUs7OEJBRUwsTUFBTTs7OztJQVJQLGtEQUF3Qzs7SUFFeEMsd0RBQThDOztJQUU5QyxxREFBeUI7O0lBRXpCLGdEQUFtQjs7SUFFbkIsMERBQStDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCYXNlQ29tcG9uZW50fSBmcm9tICdAZXIvY29yZSc7XG5pbXBvcnQge1BuZ1RhYmxlQ29sdW1uUHJvcHN9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG5nLXRhYmxlLWNvbHVtbi1zZWxlY3RvcicsXG4gIHRlbXBsYXRlOiBgXG5cbiAgICA8cC1tdWx0aVNlbGVjdCBbc3R5bGVdPVwie2hlaWdodDogJzMwcHgnLCBtaW5XaWR0aDogJzE1MHB4J31cIlxuICAgICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cInN0eWxlQ2xhc3NcIlxuICAgICAgICAgICAgICAgICAgIFtuZ1N0eWxlXT1cInN0eWxlXCJcbiAgICAgICAgICAgICAgICAgICBbb3B0aW9uc109XCJvcHRpb25Db2x1bW5zXCJcbiAgICAgICAgICAgICAgICAgICBbKG5nTW9kZWwpXT1cImNvbHVtbnNcIlxuICAgICAgICAgICAgICAgICAgIG9wdGlvbkxhYmVsPVwibGFiZWxcIlxuICAgICAgICAgICAgICAgICAgIFtzZWxlY3RlZEl0ZW1zTGFiZWxdPVwiJ+W9k+WJjeaYvuekunswfSgnK29wdGlvbkNvbHVtbnM/Lmxlbmd0aCsnKeS4quWIlydcIlxuICAgICAgICAgICAgICAgICAgIGRlZmF1bHRMYWJlbD1cIumAieaLqeaYvuekuuWtl+autVwiXG4gICAgICAgICAgICAgICAgICAgKG9uQ2hhbmdlKT1cImNoYW5nZUNvbHVtbnMoJGV2ZW50KVwiXG4gICAgPlxuICAgIDwvcC1tdWx0aVNlbGVjdD5cblxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcblxuZXhwb3J0IGNsYXNzIFBuZ1RhYmxlQ29sdW1uU2VsZWN0b3JDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcblxuICBASW5wdXQoKSBjb2x1bW5zOiBQbmdUYWJsZUNvbHVtblByb3BzW107XG5cbiAgQElucHV0KCkgb3B0aW9uQ29sdW1uczogUG5nVGFibGVDb2x1bW5Qcm9wc1tdO1xuXG4gIEBJbnB1dCgpIHN0eWxlQ2xhc3M6IGFueTtcblxuICBASW5wdXQoKSBzdHlsZToge307XG5cbiAgQE91dHB1dCgpIG9uQ29sdW1uc0NoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBjaGFuZ2VDb2x1bW5zKGV2ZW50KSB7XG4gICAgZXZlbnQudmFsdWUuZm9yRWFjaChjb2x1bW4gPT4gY29sdW1uLmhpZGRlbiA9IGZhbHNlKTtcbiAgICB0aGlzLm9uQ29sdW1uc0NoYW5nZS5lbWl0KGV2ZW50KTtcbiAgfVxuXG59XG4iXX0=