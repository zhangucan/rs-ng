/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { BaseComponent, DataFieldUtils } from '@er/core';
import { DataAttr, DataType } from '@er/types';
import { CommonsUtils } from '@er/utils';
import { PngTableComponent } from '../../table/component';
export class PngTableFieldDataFilterComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     */
    constructor(pngTable) {
        super();
        this.pngTable = pngTable;
        this.onFilterChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get column() {
        return this._column;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    set column(column) {
        if (!this.queryKey && column) {
            this.queryKey = DataFieldUtils.getDefaultFieldName(column.dataField) || column.key;
        }
        if (!this.queryDataType && column) {
            this.queryDataType = column.filterDataType || column.dataType;
        }
        if (!this.queryDataAttr && column && column.dataAttr) {
            this.queryDataAttr = CommonsUtils.getArrayValue(column.dataAttr)[0];
        }
        this._column = column;
    }
    /**
     * @return {?}
     */
    get dataField() {
        return this._dataField;
    }
    /**
     * @param {?} dataField
     * @return {?}
     */
    set dataField(dataField) {
        if (!this.queryKey && dataField) {
            this.queryKey = DataFieldUtils.getDefaultFieldName(dataField);
        }
        if (!this.queryDataType && dataField) {
            this.queryDataType = dataField.dataType;
        }
        this._dataField = dataField;
    }
    /**
     * @return {?}
     */
    onFilter() {
        this.onFilterChange.emit({
            key: this.queryKey,
            column: this.column,
            value: this.queryValue
        });
    }
    /**
     * @return {?}
     */
    clearFilter() {
        this.queryValue = undefined;
        this.onFilter();
    }
}
PngTableFieldDataFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-field-data-filter',
                template: `
    <div class="d-flex justify-content-end align-items-end">
      <png-query-input [queryKey]="queryKey" [queryDataType]="queryDataType" [queryDataAttr]="queryDataAttr"
                       [(queryValue)]="queryValue"></png-query-input>
      <ng-container *ngIf="queryValue">
      <span class="ml-2">
       <p-button
         type="button"
         icon="fa fa-search"
         label="查询"
         (click)="onFilter()"
       ></p-button>
    </span>
        <span class="ml-2">
    <p-button
      type="button"
      icon="fa fa-trash"
      label="清除"
      (click)="clearFilter()"
    ></p-button>
    </span>
      </ng-container>
    </div>
  `
            }] }
];
/** @nocollapse */
PngTableFieldDataFilterComponent.ctorParameters = () => [
    { type: PngTableComponent }
];
PngTableFieldDataFilterComponent.propDecorators = {
    queryKey: [{ type: Input }],
    queryDataType: [{ type: Input }],
    queryDataAttr: [{ type: Input }],
    queryValue: [{ type: Input }],
    onFilterChange: [{ type: Output }],
    column: [{ type: Input }],
    dataField: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PngTableFieldDataFilterComponent.prototype.queryKey;
    /** @type {?} */
    PngTableFieldDataFilterComponent.prototype.queryDataType;
    /** @type {?} */
    PngTableFieldDataFilterComponent.prototype.queryDataAttr;
    /** @type {?} */
    PngTableFieldDataFilterComponent.prototype.queryValue;
    /** @type {?} */
    PngTableFieldDataFilterComponent.prototype.onFilterChange;
    /**
     * @type {?}
     * @private
     */
    PngTableFieldDataFilterComponent.prototype._column;
    /** @type {?} */
    PngTableFieldDataFilterComponent.prototype._dataField;
    /** @type {?} */
    PngTableFieldDataFilterComponent.prototype.pngTable;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YWJsZS9jb21wb25lbnQvcXVlcnkvZmllbGQtZmlsdGVyL2NvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUMsYUFBYSxFQUFFLGNBQWMsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUN2RCxPQUFPLEVBQUMsUUFBUSxFQUFhLFFBQVEsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUN4RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRXZDLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBOEJ4RCxNQUFNLE9BQU8sZ0NBQWlDLFNBQVEsYUFBYTs7OztJQVlqRSxZQUFtQixRQUEyQjtRQUM1QyxLQUFLLEVBQUUsQ0FBQztRQURTLGFBQVEsR0FBUixRQUFRLENBQW1CO1FBRnBDLG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUk5QyxDQUFDOzs7O0lBSUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBRUQsSUFBYSxNQUFNLENBQUMsTUFBMkI7UUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksTUFBTSxFQUFFO1lBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDO1NBQ3BGO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLElBQUksTUFBTSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDO1NBQy9EO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDcEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyRTtRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQ3hCLENBQUM7Ozs7SUFJRCxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQzs7Ozs7SUFFRCxJQUFhLFNBQVMsQ0FBQyxTQUFTO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLFNBQVMsRUFBRTtZQUMvQixJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMvRDtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLFNBQVMsRUFBRTtZQUNwQyxJQUFJLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUM7U0FDekM7UUFDRCxJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztJQUM5QixDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO1lBQ3ZCLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNsQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVO1NBQ3ZCLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDNUIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2xCLENBQUM7OztZQTFGRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHVCQUF1QjtnQkFDakMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXVCVDthQUNGOzs7O1lBNUJPLGlCQUFpQjs7O3VCQWdDdEIsS0FBSzs0QkFFTCxLQUFLOzRCQUVMLEtBQUs7eUJBRUwsS0FBSzs2QkFFTCxNQUFNO3FCQVlOLEtBQUs7d0JBbUJMLEtBQUs7Ozs7SUF2Q04sb0RBQTBCOztJQUUxQix5REFBaUM7O0lBRWpDLHlEQUFpQzs7SUFFakMsc0RBQXlCOztJQUV6QiwwREFBOEM7Ozs7O0lBTTlDLG1EQUFxQzs7SUFtQnJDLHNEQUFzQjs7SUF2QlYsb0RBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Jhc2VDb21wb25lbnQsIERhdGFGaWVsZFV0aWxzfSBmcm9tICdAZXIvY29yZSc7XG5pbXBvcnQge0RhdGFBdHRyLCBEYXRhRmllbGQsIERhdGFUeXBlfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb21tb25zVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge1BuZ1RhYmxlQ29sdW1uUHJvcHN9IGZyb20gJy4uLy4uLy4uL3R5cGVzJztcbmltcG9ydCB7UG5nVGFibGVDb21wb25lbnR9IGZyb20gJy4uLy4uL3RhYmxlL2NvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BuZy1maWVsZC1kYXRhLWZpbHRlcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtZW5kIGFsaWduLWl0ZW1zLWVuZFwiPlxuICAgICAgPHBuZy1xdWVyeS1pbnB1dCBbcXVlcnlLZXldPVwicXVlcnlLZXlcIiBbcXVlcnlEYXRhVHlwZV09XCJxdWVyeURhdGFUeXBlXCIgW3F1ZXJ5RGF0YUF0dHJdPVwicXVlcnlEYXRhQXR0clwiXG4gICAgICAgICAgICAgICAgICAgICAgIFsocXVlcnlWYWx1ZSldPVwicXVlcnlWYWx1ZVwiPjwvcG5nLXF1ZXJ5LWlucHV0PlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInF1ZXJ5VmFsdWVcIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwibWwtMlwiPlxuICAgICAgIDxwLWJ1dHRvblxuICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICBpY29uPVwiZmEgZmEtc2VhcmNoXCJcbiAgICAgICAgIGxhYmVsPVwi5p+l6K+iXCJcbiAgICAgICAgIChjbGljayk9XCJvbkZpbHRlcigpXCJcbiAgICAgICA+PC9wLWJ1dHRvbj5cbiAgICA8L3NwYW4+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwibWwtMlwiPlxuICAgIDxwLWJ1dHRvblxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICBpY29uPVwiZmEgZmEtdHJhc2hcIlxuICAgICAgbGFiZWw9XCLmuIXpmaRcIlxuICAgICAgKGNsaWNrKT1cImNsZWFyRmlsdGVyKClcIlxuICAgID48L3AtYnV0dG9uPlxuICAgIDwvc3Bhbj5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvZGl2PlxuICBgXG59KVxuXG5leHBvcnQgY2xhc3MgUG5nVGFibGVGaWVsZERhdGFGaWx0ZXJDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcblxuICBASW5wdXQoKSBxdWVyeUtleTogc3RyaW5nO1xuXG4gIEBJbnB1dCgpIHF1ZXJ5RGF0YVR5cGU6IERhdGFUeXBlO1xuXG4gIEBJbnB1dCgpIHF1ZXJ5RGF0YUF0dHI6IERhdGFBdHRyO1xuXG4gIEBJbnB1dCgpIHF1ZXJ5VmFsdWU6IGFueTtcblxuICBAT3V0cHV0KCkgb25GaWx0ZXJDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHBuZ1RhYmxlOiBQbmdUYWJsZUNvbXBvbmVudCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwcml2YXRlIF9jb2x1bW46IFBuZ1RhYmxlQ29sdW1uUHJvcHM7XG5cbiAgZ2V0IGNvbHVtbigpIHtcbiAgICByZXR1cm4gdGhpcy5fY29sdW1uO1xuICB9XG5cbiAgQElucHV0KCkgc2V0IGNvbHVtbihjb2x1bW46IFBuZ1RhYmxlQ29sdW1uUHJvcHMpIHtcbiAgICBpZiAoIXRoaXMucXVlcnlLZXkgJiYgY29sdW1uKSB7XG4gICAgICB0aGlzLnF1ZXJ5S2V5ID0gRGF0YUZpZWxkVXRpbHMuZ2V0RGVmYXVsdEZpZWxkTmFtZShjb2x1bW4uZGF0YUZpZWxkKSB8fCBjb2x1bW4ua2V5O1xuICAgIH1cbiAgICBpZiAoIXRoaXMucXVlcnlEYXRhVHlwZSAmJiBjb2x1bW4pIHtcbiAgICAgIHRoaXMucXVlcnlEYXRhVHlwZSA9IGNvbHVtbi5maWx0ZXJEYXRhVHlwZSB8fCBjb2x1bW4uZGF0YVR5cGU7XG4gICAgfVxuICAgIGlmICghdGhpcy5xdWVyeURhdGFBdHRyICYmIGNvbHVtbiAmJiBjb2x1bW4uZGF0YUF0dHIpIHtcbiAgICAgIHRoaXMucXVlcnlEYXRhQXR0ciA9IENvbW1vbnNVdGlscy5nZXRBcnJheVZhbHVlKGNvbHVtbi5kYXRhQXR0cilbMF07XG4gICAgfVxuICAgIHRoaXMuX2NvbHVtbiA9IGNvbHVtbjtcbiAgfVxuXG4gIF9kYXRhRmllbGQ6IERhdGFGaWVsZDtcblxuICBnZXQgZGF0YUZpZWxkKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhRmllbGQ7XG4gIH1cblxuICBASW5wdXQoKSBzZXQgZGF0YUZpZWxkKGRhdGFGaWVsZCkge1xuICAgIGlmICghdGhpcy5xdWVyeUtleSAmJiBkYXRhRmllbGQpIHtcbiAgICAgIHRoaXMucXVlcnlLZXkgPSBEYXRhRmllbGRVdGlscy5nZXREZWZhdWx0RmllbGROYW1lKGRhdGFGaWVsZCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5xdWVyeURhdGFUeXBlICYmIGRhdGFGaWVsZCkge1xuICAgICAgdGhpcy5xdWVyeURhdGFUeXBlID0gZGF0YUZpZWxkLmRhdGFUeXBlO1xuICAgIH1cbiAgICB0aGlzLl9kYXRhRmllbGQgPSBkYXRhRmllbGQ7XG4gIH1cblxuICBvbkZpbHRlcigpIHtcbiAgICB0aGlzLm9uRmlsdGVyQ2hhbmdlLmVtaXQoe1xuICAgICAga2V5OiB0aGlzLnF1ZXJ5S2V5LFxuICAgICAgY29sdW1uOiB0aGlzLmNvbHVtbixcbiAgICAgIHZhbHVlOiB0aGlzLnF1ZXJ5VmFsdWVcbiAgICB9KTtcbiAgfVxuXG4gIGNsZWFyRmlsdGVyKCkge1xuICAgIHRoaXMucXVlcnlWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm9uRmlsdGVyKCk7XG4gIH1cblxuXG59XG4iXX0=