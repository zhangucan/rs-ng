/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BaseComponent } from '@er/core';
import { AggMethodsProps, DataType } from '@er/types';
import { OverlayPanel } from 'primeng/primeng';
import { PngTableComponent } from '../table/component';
export class PngTableHeaderComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     */
    constructor(pngTable) {
        super();
        this.pngTable = pngTable;
        this.onFiltersSet = new EventEmitter();
        this.onAggKeysSet = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    showFilterPanel(event) {
        this.filterColumn = event.column;
        /** @type {?} */
        const filters = this.filterColumn.filters;
        if (filters && filters.length > 0) {
            this.queryValue = filters[0];
        }
        else {
            this.queryValue = undefined;
        }
        this.filterPanel.toggle(event.event);
    }
    /**
     * @return {?}
     */
    clearFilterColumn() {
        this.filterColumn = undefined;
    }
    /**
     * @return {?}
     */
    clearAggColumn() {
        this.aggColumn = undefined;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    showAggsPanel(event) {
        this.availableAggs = [];
        this.aggColumn = event.column;
        /** @type {?} */
        const type = this.aggColumn.dataType || DataType.STRING;
        this.aggMethods = (this.aggColumn.aggProps || []).map(aggProp => aggProp.method);
        Object.keys(AggMethodsProps).forEach(method => {
            if (!AggMethodsProps[method].dataTypes || (AggMethodsProps[method].dataTypes && AggMethodsProps[method].dataTypes.indexOf(type) >= 0)) {
                this.availableAggs.push({
                    label: AggMethodsProps[method].label,
                    key: AggMethodsProps[method].key
                });
            }
        });
        this.aggPanel.toggle(event.$event);
    }
    /**
     * @return {?}
     */
    setAggs() {
        this.onAggKeysSet.emit({ column: this.aggColumn, methods: this.aggMethods });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    updateFilters(event) {
        this.filterPanel.hide();
        this.onFiltersSet.emit(event);
    }
}
PngTableHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: '[png-table-header]',
                template: `
    <ng-container *ngIf="customerTpl;else default">
      <ng-container *ngTemplateOutlet="customerTpl;context:{$implicit:columns,context:pngTable}"></ng-container>
    </ng-container>
    <ng-template #default>
      <th *ngIf="pngTable.$props.$ext.rowExpandable" class="col-expandable"></th>
      <th *ngIf="pngTable.$props.$ext.hasRowCheckbox" class="col-checkbox" title="全选">
        <p-tableHeaderCheckbox></p-tableHeaderCheckbox>
      </th>
      <th *ngIf="pngTable.$props.$ext.hasRowRadioButton" class="col-radio"></th>
      <th *ngFor="let column of columns" pReorderableColumn pResizableColumn
          png-table-header-col
          [column]="column"
          (onFilterBtnClick)="showFilterPanel($event)"
          (onAggsBtnClick)="showAggsPanel($event)"
      >
      </th>
    </ng-template>
    <div class="d-none">
      <p-overlayPanel #filterPanel appendTo="body"
                      [dismissable]="false" (onHide)="clearFilterColumn()"
                      [showCloseIcon]="true">
        <ng-container *ngIf="filterColumn">
          <png-field-data-filter [column]="filterColumn" [queryValue]="queryValue"
                                 (onFilterChange)="updateFilters($event)"></png-field-data-filter>
        </ng-container>
      </p-overlayPanel>
      <p-overlayPanel #aggPanel appendTo="body"
                      [dismissable]="true" (onHide)="clearAggColumn()"
                      [showCloseIcon]="true">
        <div class="shadow" style="width:150px;margin-bottom:10px">
          <h6>可选统计方式</h6>
          <ng-container *ngFor="let agg of availableAggs">
            <div style="font-size: .8em">
              <p-checkbox name="aggs" [value]="agg['key']" [label]="agg['label']"
                          [(ngModel)]="aggMethods" (onChange)="setAggs()"></p-checkbox>
            </div>
          </ng-container>
        </div>
      </p-overlayPanel>
    </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngTableHeaderComponent.ctorParameters = () => [
    { type: PngTableComponent }
];
PngTableHeaderComponent.propDecorators = {
    columns: [{ type: Input }],
    onFiltersSet: [{ type: Output }],
    onAggKeysSet: [{ type: Output }],
    filterPanel: [{ type: ViewChild, args: ['filterPanel',] }],
    aggPanel: [{ type: ViewChild, args: ['aggPanel',] }]
};
if (false) {
    /** @type {?} */
    PngTableHeaderComponent.prototype.columns;
    /** @type {?} */
    PngTableHeaderComponent.prototype.onFiltersSet;
    /** @type {?} */
    PngTableHeaderComponent.prototype.onAggKeysSet;
    /** @type {?} */
    PngTableHeaderComponent.prototype.filterPanel;
    /** @type {?} */
    PngTableHeaderComponent.prototype.aggPanel;
    /** @type {?} */
    PngTableHeaderComponent.prototype.availableAggs;
    /** @type {?} */
    PngTableHeaderComponent.prototype.filterColumn;
    /** @type {?} */
    PngTableHeaderComponent.prototype.queryValue;
    /** @type {?} */
    PngTableHeaderComponent.prototype.aggColumn;
    /** @type {?} */
    PngTableHeaderComponent.prototype.aggMethods;
    /** @type {?} */
    PngTableHeaderComponent.prototype.pngTable;
}
//# sourceMappingURL=data:application/json;base64,