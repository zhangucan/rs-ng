/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BaseComponent } from '@er/core';
import { EsQueryMethods } from '@er/types';
import { PngTableComponent } from '../../table/component';
export class PngTableQueryBuilderComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     */
    constructor(pngTable) {
        super();
        this.pngTable = pngTable;
        this.qbConfig = {};
        this.switches = [
            { label: '并且', value: 'and', icon: 'fa fa-fw fa-cc-paypal' },
            { label: '或者', value: 'or', icon: 'fa fa-fw fa-cc-visa' },
            { label: '非', value: 'not', icon: 'fa fa-fw fa-cc-mastercard' }
        ];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.qbConfig.fields = this.pngTable.$props.columns
            .filter(column => column.dataField)
            .map(column => column.dataField);
        this.qbConfig.operators = (field) => Object.keys(EsQueryMethods).map(key => {
            return {
                label: EsQueryMethods[key].label,
                value: EsQueryMethods[key].key
            };
        });
    }
}
PngTableQueryBuilderComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-table-query-builder',
                template: `
    <er-query-builder [config]="qbConfig">
      <!--<ng-template erTypedTemplate="switchGroup" let-qb="qb">-->
      <!--<p-selectButton [options]="switches" [ngModel]="qb.value.condition"></p-selectButton>-->
      <!--</ng-template>-->
      <!--<ng-template erTypedTemplate="buttonGroup" let-qb="qb">-->
      <!--<p-button label="条件" icon="fa fa-plus" (onClick)="qb.addRule()"></p-button>-->
      <!--<p-button label="组" icon="fa fa-group" (onClick)="qb.addRuleSet()"></p-button>-->
      <!--<ng-container *ngIf="!!parentRuleSet && qb.config.allowRuleSet">-->
      <!--<p-button icon="fa fa-minus" (onClick)="qb.removeRuleSet()"></p-button>-->
      <!--</ng-container>-->
      <!--</ng-template>-->
      <ng-template erTypedTemplate="input" let-rule let-qb="qb">
        <png-query-input [options]="pngTable.$props.$ext"></png-query-input>
      </ng-template>
    </er-query-builder>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngTableQueryBuilderComponent),
                        multi: true
                    }],
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngTableQueryBuilderComponent.ctorParameters = () => [
    { type: PngTableComponent }
];
if (false) {
    /** @type {?} */
    PngTableQueryBuilderComponent.prototype.qbConfig;
    /** @type {?} */
    PngTableQueryBuilderComponent.prototype.switches;
    /** @type {?} */
    PngTableQueryBuilderComponent.prototype.pngTable;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YWJsZS9jb21wb25lbnQvcXVlcnkvZmllbGRzLWJ1aWxkZXIvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBUyxNQUFNLGVBQWUsQ0FBQztBQUNyRixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxjQUFjLEVBQW9CLE1BQU0sV0FBVyxDQUFDO0FBQzVELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBNEJ4RCxNQUFNLE9BQU8sNkJBQThCLFNBQVEsYUFBYTs7OztJQVc5RCxZQUFtQixRQUEyQjtRQUM1QyxLQUFLLEVBQUUsQ0FBQztRQURTLGFBQVEsR0FBUixRQUFRLENBQW1CO1FBUjlDLGFBQVEsR0FBc0IsRUFBRSxDQUFDO1FBRWpDLGFBQVEsR0FBRztZQUNULEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSx1QkFBdUIsRUFBQztZQUMxRCxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUscUJBQXFCLEVBQUM7WUFDdkQsRUFBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLDJCQUEyQixFQUFDO1NBQzlELENBQUM7SUFJRixDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU87YUFDaEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQzthQUNsQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3pFLE9BQU87Z0JBQ0wsS0FBSyxFQUFFLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLO2dCQUNoQyxLQUFLLEVBQUUsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUc7YUFDL0IsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBbkRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUseUJBQXlCO2dCQUNuQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQlQ7Z0JBQ0QsU0FBUyxFQUFFLENBQUM7d0JBQ1YsT0FBTyxFQUFFLGlCQUFpQjt3QkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQzt3QkFDNUQsS0FBSyxFQUFFLElBQUk7cUJBQ1osQ0FBQztnQkFDRixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7OztZQTNCTyxpQkFBaUI7Ozs7SUErQnZCLGlEQUFpQzs7SUFFakMsaURBSUU7O0lBRVUsaURBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOR19WQUxVRV9BQ0NFU1NPUn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtCYXNlQ29tcG9uZW50fSBmcm9tICdAZXIvY29yZSc7XG5pbXBvcnQge0VzUXVlcnlNZXRob2RzLCBRdWVyeUJ1aWxkZXJQcm9wc30gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7UG5nVGFibGVDb21wb25lbnR9IGZyb20gJy4uLy4uL3RhYmxlL2NvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BuZy10YWJsZS1xdWVyeS1idWlsZGVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZXItcXVlcnktYnVpbGRlciBbY29uZmlnXT1cInFiQ29uZmlnXCI+XG4gICAgICA8IS0tPG5nLXRlbXBsYXRlIGVyVHlwZWRUZW1wbGF0ZT1cInN3aXRjaEdyb3VwXCIgbGV0LXFiPVwicWJcIj4tLT5cbiAgICAgIDwhLS08cC1zZWxlY3RCdXR0b24gW29wdGlvbnNdPVwic3dpdGNoZXNcIiBbbmdNb2RlbF09XCJxYi52YWx1ZS5jb25kaXRpb25cIj48L3Atc2VsZWN0QnV0dG9uPi0tPlxuICAgICAgPCEtLTwvbmctdGVtcGxhdGU+LS0+XG4gICAgICA8IS0tPG5nLXRlbXBsYXRlIGVyVHlwZWRUZW1wbGF0ZT1cImJ1dHRvbkdyb3VwXCIgbGV0LXFiPVwicWJcIj4tLT5cbiAgICAgIDwhLS08cC1idXR0b24gbGFiZWw9XCLmnaHku7ZcIiBpY29uPVwiZmEgZmEtcGx1c1wiIChvbkNsaWNrKT1cInFiLmFkZFJ1bGUoKVwiPjwvcC1idXR0b24+LS0+XG4gICAgICA8IS0tPHAtYnV0dG9uIGxhYmVsPVwi57uEXCIgaWNvbj1cImZhIGZhLWdyb3VwXCIgKG9uQ2xpY2spPVwicWIuYWRkUnVsZVNldCgpXCI+PC9wLWJ1dHRvbj4tLT5cbiAgICAgIDwhLS08bmctY29udGFpbmVyICpuZ0lmPVwiISFwYXJlbnRSdWxlU2V0ICYmIHFiLmNvbmZpZy5hbGxvd1J1bGVTZXRcIj4tLT5cbiAgICAgIDwhLS08cC1idXR0b24gaWNvbj1cImZhIGZhLW1pbnVzXCIgKG9uQ2xpY2spPVwicWIucmVtb3ZlUnVsZVNldCgpXCI+PC9wLWJ1dHRvbj4tLT5cbiAgICAgIDwhLS08L25nLWNvbnRhaW5lcj4tLT5cbiAgICAgIDwhLS08L25nLXRlbXBsYXRlPi0tPlxuICAgICAgPG5nLXRlbXBsYXRlIGVyVHlwZWRUZW1wbGF0ZT1cImlucHV0XCIgbGV0LXJ1bGUgbGV0LXFiPVwicWJcIj5cbiAgICAgICAgPHBuZy1xdWVyeS1pbnB1dCBbb3B0aW9uc109XCJwbmdUYWJsZS4kcHJvcHMuJGV4dFwiPjwvcG5nLXF1ZXJ5LWlucHV0PlxuICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICA8L2VyLXF1ZXJ5LWJ1aWxkZXI+XG4gIGAsXG4gIHByb3ZpZGVyczogW3tcbiAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBQbmdUYWJsZVF1ZXJ5QnVpbGRlckNvbXBvbmVudCksXG4gICAgbXVsdGk6IHRydWVcbiAgfV0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFBuZ1RhYmxlUXVlcnlCdWlsZGVyQ29tcG9uZW50IGV4dGVuZHMgQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cblxuICBxYkNvbmZpZzogUXVlcnlCdWlsZGVyUHJvcHMgPSB7fTtcblxuICBzd2l0Y2hlcyA9IFtcbiAgICB7bGFiZWw6ICflubbkuJQnLCB2YWx1ZTogJ2FuZCcsIGljb246ICdmYSBmYS1mdyBmYS1jYy1wYXlwYWwnfSxcbiAgICB7bGFiZWw6ICfmiJbogIUnLCB2YWx1ZTogJ29yJywgaWNvbjogJ2ZhIGZhLWZ3IGZhLWNjLXZpc2EnfSxcbiAgICB7bGFiZWw6ICfpnZ4nLCB2YWx1ZTogJ25vdCcsIGljb246ICdmYSBmYS1mdyBmYS1jYy1tYXN0ZXJjYXJkJ31cbiAgXTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcG5nVGFibGU6IFBuZ1RhYmxlQ29tcG9uZW50KSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucWJDb25maWcuZmllbGRzID0gdGhpcy5wbmdUYWJsZS4kcHJvcHMuY29sdW1uc1xuICAgICAgLmZpbHRlcihjb2x1bW4gPT4gY29sdW1uLmRhdGFGaWVsZClcbiAgICAgIC5tYXAoY29sdW1uID0+IGNvbHVtbi5kYXRhRmllbGQpO1xuICAgIHRoaXMucWJDb25maWcub3BlcmF0b3JzID0gKGZpZWxkKSA9PiBPYmplY3Qua2V5cyhFc1F1ZXJ5TWV0aG9kcykubWFwKGtleSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsYWJlbDogRXNRdWVyeU1ldGhvZHNba2V5XS5sYWJlbCxcbiAgICAgICAgdmFsdWU6IEVzUXVlcnlNZXRob2RzW2tleV0ua2V5XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG4iXX0=