/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { BaseComponent } from '@er/core';
import { OverlayType } from '@er/types';
import { CommonsUtils } from '@er/utils';
import { PngTableComponent } from '../table/component';
export class PngTableHeaderColComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     * @param {?} cd
     */
    constructor(pngTable, cd) {
        super();
        this.pngTable = pngTable;
        this.cd = cd;
        this.OVERLAY_TYPE = OverlayType;
        this.onFilterBtnClick = new EventEmitter();
        this.onAggsBtnClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get colClass() {
        if (CommonsUtils.isFunction(this.column.colClass)) {
            return ((/** @type {?} */ (this.column.colClass))).call(this.pngTable, this.column);
        }
        else {
            return (/** @type {?} */ (this.column.colClass)) || '';
        }
    }
    /**
     * @return {?}
     */
    get width() {
        return this.column.width;
    }
    /**
     * @return {?}
     */
    get colStyle() {
        if (CommonsUtils.isFunction(this.column.colStyle)) {
            return ((/** @type {?} */ (this.column.colStyle))).call(this.pngTable, this.column);
        }
        else {
            return (/** @type {?} */ (this.column.colStyle)) || '';
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.column.headerOverlays) {
            ((/** @type {?} */ (this.column.headerOverlays))).filter(overlay => overlay.type === OverlayType.MENU)
                .forEach(overlay => {
                if (overlay.content['menuItem'].command) {
                    /** @type {?} */
                    const command = overlay.content['menuItem'].command;
                    overlay.content['menuItem'].command = (event) => command.call(this, this.headerContext(event));
                }
            });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    filterClick(event) {
        this.onFilterBtnClick.emit({
            event,
            column: this.column
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    aggsClick(event) {
        this.onAggsBtnClick.emit({
            $event: event,
            column: this.column
        });
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    headerContext(event) {
        return {
            $event: event,
            $id: this.pngTable.$props.$id,
            column: this.column,
            pngTable: this.pngTable
        };
    }
    /**
     * @param {?} overlay
     * @param {?} index
     * @param {?=} event
     * @return {?}
     */
    overlayContext(overlay, index, event) {
        return {
            $event: event,
            type: overlay.type,
            content: CommonsUtils.getValue(overlay.content, this.headerContext(event)),
            context: overlay.context,
            styleClass: CommonsUtils.getValue(overlay.styleClass, this.headerContext(event)),
            style: CommonsUtils.getValue(overlay.style, this.headerContext(event)),
            overlayStyleClass: CommonsUtils.getValue(overlay.overlayStyleClass, this.headerContext(event)),
            overlayStyle: CommonsUtils.getValue(overlay.overlayStyle, this.headerContext(event)),
            id: `overlay-header-${this.column.key}-${index}`
        };
    }
}
PngTableHeaderColComponent.decorators = [
    { type: Component, args: [{
                selector: '[png-table-header-col]',
                template: `
    <span *ngIf="!column.sortable" [innerHTML]="column.label|erSafeHtml"></span>
    <span *ngIf="column.sortable" title="排序" [pSortableColumn]="column.key" [innerHTML]="column.label|erSafeHtml"></span>
    <p-sortIcon *ngIf="column.sortable" [field]="column.key"></p-sortIcon>
    <span *ngIf="column.filterable" class="pull-right">
              <i class="fa fa-filter" title="输入查询内容" [ngClass]="{'ui-state-highlight': column.filters && column.filters.length>0}"
                 (click)="filterClick($event)"></i>
            </span>
    <span *ngIf="column.aggable" class="pull-right">
              <i class="fa fa-sum" title="选择统计方法" [ngClass]="{'ui-state-highlight': column.aggProps && column.aggProps.length>0}"
                 (click)="aggsClick($event)"></i>
            </span>
    <ng-container *ngIf="column.headerOverlays">
      <ng-container *ngFor="let overlay of column.headerOverlays; index as i">
        <ng-container [ngSwitch]="overlay.type">
          <ng-container *ngSwitchCase="OVERLAY_TYPE.CHART">
            <i [ngClass]="overlay.icon || 'fa fa-bar-chart text-primary'" class="pull-right"
               (click)="pngTable.showOverlay(overlayContext(overlay,i,$event))"></i>
          </ng-container>
          <ng-container *ngSwitchCase="OVERLAY_TYPE.TABLE">
            <i [ngClass]="overlay.icon || 'fa fa-eye text-primary'" class="pull-right"
               (click)="pngTable.showOverlay(overlayContext(overlay,i,$event))"></i>
          </ng-container>
          <ng-container *ngSwitchCase="OVERLAY_TYPE.PANEL">
            <i [ngClass]="overlay.icon || 'fa fa-eye text-primary'" class="pull-right"
               (click)="pngTable.showOverlay(overlayContext(overlay,i,$event))"></i>
          </ng-container>
          <ng-container *ngSwitchCase="OVERLAY_TYPE.MENU">
            <i [ngClass]="overlay.icon || 'fa fa-arrow-circle-down text-primary'" class="pull-right"
               (click)="pngTable.showOverlay(overlayContext(overlay,i,$event))"></i>
          </ng-container>
          <ng-container *ngSwitchCase="OVERLAY_TYPE.FRAME">
            <i [ngClass]="overlay.icon || 'fa fa-play text-primary'"
               (click)="pngTable.showOverlay(overlayContext(overlay,i,$event))"></i>
          </ng-container>
          <ng-container *ngSwitchCase="OVERLAY_TYPE.COMPONENT">
            <i [ngClass]="overlay.icon || 'fa fa-eye text-primary'"
               (click)="pngTable.showOverlay(overlayContext(overlay,i,$event))"></i>
          </ng-container>
        </ng-container>
      </ng-container>
    </ng-container>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngTableHeaderColComponent.ctorParameters = () => [
    { type: PngTableComponent },
    { type: ChangeDetectorRef }
];
PngTableHeaderColComponent.propDecorators = {
    column: [{ type: Input }],
    onFilterBtnClick: [{ type: Output }],
    onAggsBtnClick: [{ type: Output }],
    colClass: [{ type: HostBinding, args: ['class',] }],
    width: [{ type: HostBinding, args: ['style.width',] }],
    colStyle: [{ type: HostBinding, args: ['style',] }]
};
if (false) {
    /** @type {?} */
    PngTableHeaderColComponent.prototype.OVERLAY_TYPE;
    /** @type {?} */
    PngTableHeaderColComponent.prototype.column;
    /** @type {?} */
    PngTableHeaderColComponent.prototype.onFilterBtnClick;
    /** @type {?} */
    PngTableHeaderColComponent.prototype.onAggsBtnClick;
    /** @type {?} */
    PngTableHeaderColComponent.prototype.pngTable;
    /**
     * @type {?}
     * @private
     */
    PngTableHeaderColComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,