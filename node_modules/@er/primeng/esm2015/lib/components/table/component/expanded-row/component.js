/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { ApiUtils, BaseComponent, DataFieldUtils } from '@er/core';
import { CommonsUtils } from '@er/utils';
import { PngTableComponent } from '../table/component';
export class PngTableExpandedRowComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     */
    constructor(pngTable) {
        super();
        this.pngTable = pngTable;
        this.customerContent = false;
    }
    /**
     * @return {?}
     */
    get dataColumns() {
        return this.columns.filter(column => column.isDataColumn !== false && !column.isActionColumn);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.rowId) {
            if (this.pngTable.$props.$ext.onExpandRowContent) {
                this.customerContent = true;
                this.expandContent$ = this.pngTable.$props.$ext.onExpandRowContent.method(this.rowId);
            }
            else {
                this.expandContent$ = ApiUtils.getById(this.pngTable.$props.$ext.apiDataProps.apiEntry, this.rowId, {
                    tag: this.rowId,
                    payload: { 'fields': this.pngTable.$props.$ext.expandRowFields || this.pngTable.dataColumnNames }
                });
            }
        }
    }
    /**
     * @param {?} col
     * @param {?} rowData
     * @return {?}
     */
    content(col, rowData) {
        if (!col.key) {
            return;
        }
        if (col.cellContent) {
            console.log('cellcontent');
            return col.cellContent({ row: rowData });
        }
        /** @type {?} */
        let c = rowData[col.key];
        if (CommonsUtils.isJson(c)) {
            /** @type {?} */
            let key;
            if (col.dataField) {
                key = DataFieldUtils.getDefaultFieldName(col.dataField);
            }
            if (key) {
                return CommonsUtils.get(c, key);
            }
            else {
                /** @type {?} */
                const trans = {};
                Object.keys(c).forEach(sub => {
                    /** @type {?} */
                    const label = CommonsUtils.get(col, `dataField.fields.${sub}.label`);
                    if (label) {
                        trans[label] = c[sub];
                    }
                    else {
                        trans[sub] = c[sub];
                    }
                });
                c = trans;
            }
        }
        return CommonsUtils.getText(c);
    }
}
PngTableExpandedRowComponent.decorators = [
    { type: Component, args: [{
                selector: '[png-table-expanded-row]',
                template: `
    <ng-container *ngIf="customerTpl;else default">
      <ng-container *ngTemplateOutlet="customerTpl;context:{$implicit:rowId,context:pngTable}"></ng-container>
    </ng-container>
    <ng-template #default>
      <td colspan="100%">
        <p-card styleClass="ui-card-shadow w-100 ui-table-expanded-content" >
          <er-http-status [tag]="rowId" erPosition></er-http-status>
          <ng-container *ngIf="expandContent$|async as expandContent">
            <div class="row w-100 m-3" style="font-size: 16px">
              <ng-container *ngIf="!customerContent">
                <ng-container *ngFor="let col of dataColumns">
                  <span class="col-2 my-3"><b class="pull-right" [innerHTML]="col.label"></b></span>
                  <ng-container *ngIf="col.expandViewContent;else defaultView">
                    <er-dyna-content [content]="col.expandViewContent" [context]="{data: expandContent, col: col}"></er-dyna-content>
                  </ng-container>
                  <ng-template #defaultView>
                    <span class="col-4 my-3">{{content(col, expandContent)}}</span>
                  </ng-template>
                </ng-container>
              </ng-container>
              <ng-container *ngIf="customerContent">
                <er-dyna-content [content]="expandContent"></er-dyna-content>
              </ng-container>
            </div>
          </ng-container>
        </p-card>
      </td>
    </ng-template>

  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngTableExpandedRowComponent.ctorParameters = () => [
    { type: PngTableComponent }
];
PngTableExpandedRowComponent.propDecorators = {
    rowId: [{ type: Input }],
    columns: [{ type: Input }],
    styleClass: [{ type: Input }],
    style: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PngTableExpandedRowComponent.prototype.rowId;
    /** @type {?} */
    PngTableExpandedRowComponent.prototype.columns;
    /** @type {?} */
    PngTableExpandedRowComponent.prototype.styleClass;
    /** @type {?} */
    PngTableExpandedRowComponent.prototype.style;
    /** @type {?} */
    PngTableExpandedRowComponent.prototype.expandContent$;
    /** @type {?} */
    PngTableExpandedRowComponent.prototype.customerContent;
    /** @type {?} */
    PngTableExpandedRowComponent.prototype.pngTable;
}
//# sourceMappingURL=data:application/json;base64,