/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { BaseComponent } from '@er/core';
import { AggMethods, DataAttr, DataType } from '@er/types';
import { CommonsUtils, DataItemUtils } from '@er/utils';
import { BehaviorSubject } from 'rxjs';
import { PngTableComponent } from '../../table/component';
export class PngQueryInputComponent extends BaseComponent {
    /**
     * @param {?} pngTable
     */
    constructor(pngTable) {
        super();
        this.pngTable = pngTable;
        this.DATA_TYPE = DataType;
        this.DATA_ATTR = DataAttr;
        this.options = {};
        this.queryValueChange = new EventEmitter();
        this.isTime = false;
        this.autoCompleteProps$ = new BehaviorSubject(undefined);
    }
    /**
     * @return {?}
     */
    get queryValue() {
        return this._queryValue;
    }
    /**
     * @param {?} queryValue
     * @return {?}
     */
    set queryValue(queryValue) {
        this._queryValue = queryValue;
        this.queryValueChange.emit(queryValue);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.autoProps = (/** @type {?} */ ({
            inputStyle: { 'min-width': '200px' },
            appendTo: 'body',
            forceSelection: false,
            $ext: {
                apiDataProps: Object.assign({}, this.pngTable.getTableQuery(), { searchFields: this.queryKey, returnFields: this.queryKey, aggProps: { name: this.queryKey, field: this.queryKey }, dataPath: `aggs.${this.queryKey}` }),
                dataItemProps: {
                    showCounter: true,
                    dropDownOptionKey: DataItemUtils.ITEM_LABEL_KEY,
                    valueKey: DataItemUtils.ITEM_LABEL_KEY
                }
            }
        }));
        this.sliderProps = (/** @type {?} */ ({
            range: true,
            $ext: {
                apiDataProps: Object.assign({}, this.pngTable.getTableQuery(), { aggProps: [
                        { name: 'max', field: this.queryKey, method: AggMethods.MAX },
                        { name: 'min', field: this.queryKey, method: AggMethods.MIN }
                    ] })
            }
        }));
        if (this.queryDataType === DataType.DATE && this.queryDataAttr) {
            /** @type {?} */
            const attrs = CommonsUtils.getArrayValue(this.queryDataAttr);
            if (attrs.indexOf(DataAttr.DATE) >= 0) {
                this.isTime = false;
            }
            if (attrs.indexOf(DataAttr.TIME) >= 0) {
                this.isTime = true;
            }
        }
    }
}
PngQueryInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-query-input',
                template: `
    <ng-container [ngSwitch]="queryDataType">
      <ng-container *ngSwitchCase="DATA_TYPE.NUMBER">
        <png-slider [(ngModel)]="queryValue"
                    erPropsBind
                    [props]="sliderProps"
        >
        </png-slider>
      </ng-container>
      <ng-container *ngSwitchCase="DATA_TYPE.BOOLEAN">
        <p-inputSwitch [(ngModel)]="queryValue">
        </p-inputSwitch>
      </ng-container>
      <ng-container *ngSwitchCase="DATA_TYPE.DATE">
        <ng-container *ngIf="!isTime">
          <png-calendar erPropsBind [(ngModel)]="queryValue"
                        [props]="{ selectionMode: 'range',placeholder:'请选择日期'}">
          </png-calendar>
        </ng-container>
        <ng-container *ngIf="isTime">
          <png-calendar erPropsBind [(ngModel)]="queryValue"
                        [props]="{ timeOnly: true, selectionMode: 'range',placeholder:'请选择时间'}"
          >
          </png-calendar>
        </ng-container>
      </ng-container>
      <ng-container *ngSwitchDefault>
        <png-auto-complete
          [(ngModel)]="queryValue"
          erPropsBind
          [props]="autoProps"
        >
        </png-auto-complete>
        <!--<input type="text" pInputText [(ngModel)]="queryValue" placeholder="输入查询标准">-->
      </ng-container>
    </ng-container>
  `,
                styles: ["/deep/ .ui-multiselect{min-width:150px}/deep/ .ui-multiselect-label-container label{margin:0!important}/deep/ .ui-slider{width:100px;margin:5px}"]
            }] }
];
/** @nocollapse */
PngQueryInputComponent.ctorParameters = () => [
    { type: PngTableComponent }
];
PngQueryInputComponent.propDecorators = {
    queryKey: [{ type: Input }],
    queryDataType: [{ type: Input }],
    queryDataAttr: [{ type: Input }],
    options: [{ type: Input }],
    autoProps: [{ type: Input }],
    sliderProps: [{ type: Input }],
    queryValueChange: [{ type: Output }],
    queryValue: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PngQueryInputComponent.prototype.DATA_TYPE;
    /** @type {?} */
    PngQueryInputComponent.prototype.DATA_ATTR;
    /** @type {?} */
    PngQueryInputComponent.prototype.queryKey;
    /** @type {?} */
    PngQueryInputComponent.prototype.queryDataType;
    /** @type {?} */
    PngQueryInputComponent.prototype.queryDataAttr;
    /** @type {?} */
    PngQueryInputComponent.prototype.options;
    /** @type {?} */
    PngQueryInputComponent.prototype.autoProps;
    /** @type {?} */
    PngQueryInputComponent.prototype.sliderProps;
    /** @type {?} */
    PngQueryInputComponent.prototype.queryValueChange;
    /** @type {?} */
    PngQueryInputComponent.prototype.isTime;
    /** @type {?} */
    PngQueryInputComponent.prototype.autoCompleteProps$;
    /**
     * @type {?}
     * @private
     */
    PngQueryInputComponent.prototype._queryValue;
    /**
     * @type {?}
     * @private
     */
    PngQueryInputComponent.prototype.pngTable;
}
//# sourceMappingURL=data:application/json;base64,