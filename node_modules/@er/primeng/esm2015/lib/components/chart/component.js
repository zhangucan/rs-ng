/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { ApiUtils, BaseComponent } from '@er/core';
import { ChartType } from '@er/types';
import { ChartUtils, CommonsUtils, IdUtils } from '@er/utils';
import { BehaviorSubject } from 'rxjs';
export class PngChartComponent extends BaseComponent {
    constructor() {
        super(...arguments);
        this.type = ChartType.BAR;
        this.plugins = [];
        this.responsive = true;
        this.switchable = true;
        this.templateNames = {
            header: 'header'
        };
        this.onDataSelect = new EventEmitter();
        this.data$ = new BehaviorSubject(undefined);
        this.chartTypes = [
            { label: '柱状图', value: ChartType.BAR, icon: 'fa fa-bar-chart' },
            { label: '圆饼图', value: ChartType.PIE, icon: 'fa fa-pie-chart' },
            { label: '曲线图', value: ChartType.LINE, icon: 'fa fa-line-chart' },
            { label: '雷达图', value: ChartType.RADAR, icon: 'fa fa-bar' },
            { label: '区域图', value: ChartType.AREA, icon: 'fa fa-area-chart' },
            { label: '环形图', value: ChartType.DOUGHNUT, icon: 'fa fa-circle' }
        ];
    }
    /**
     * @return {?}
     */
    get data() {
        return this.data$.value;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this.data$.next(data || {});
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.rawData = undefined;
        this.buildChart();
    }
    /**
     * @return {?}
     */
    changeType() {
        this.buildChart();
    }
    /**
     * @return {?}
     */
    reBuildChart() {
        this.rawData = undefined;
        this.buildChart();
    }
    /**
     * @return {?}
     */
    buildChart() {
        if (!this.$id) {
            this.$id = IdUtils.getRandom();
        }
        if (this.rawData) {
            this.resolvedRawData(this.rawData);
        }
        else if (this.dataSource) {
            /** @type {?} */
            let ds = this.dataSource;
            if (!ds.hasOwnProperty('apiDataProps')) {
                /** @type {?} */
                const apiDataProps = ds;
                ds = {};
                ds['apiDataProps'] = apiDataProps;
            }
            if (this.resolveDataSource) {
                ds = this.resolveDataSource.method((/** @type {?} */ (ds)));
            }
            ApiUtils.batchFetch(ds, this.$id)
                .subscribe(data => {
                this.rawData = data;
                this.resolvedRawData(this.rawData);
            });
        }
    }
    /**
     * @param {?} rawData
     * @return {?}
     */
    resolvedRawData(rawData) {
        if (!CommonsUtils.isEmpty(rawData)) {
            /** @type {?} */
            let data;
            /** @type {?} */
            const datasets = [];
            /** @type {?} */
            let labels = [];
            if (CommonsUtils.isFunction(this.dimensions)) {
                data = ((/** @type {?} */ (this.dimensions)))(rawData);
            }
            else {
                if (this.dimensions) {
                    /** @type {?} */
                    const dimensions = CommonsUtils.getArrayValue(this.dimensions);
                    dimensions.forEach((dimension, index) => {
                        if (this.resolveDimension) {
                            dimension = this.resolveDimension.method(dimension);
                        }
                        /** @type {?} */
                        const chartData = ChartUtils.buildChartData(rawData, {
                            type: this.type,
                            dimension: dimension,
                            dataItemProps: this.dataItemProps
                        }, index);
                        datasets.push(...chartData.datasets);
                        if (labels.length === 0) {
                            labels = chartData.labels;
                        }
                    });
                    data = { labels, datasets };
                }
                else {
                    data = ChartUtils.buildChartData(rawData, {
                        type: this.type,
                        dataItemProps: this.dataItemProps
                    });
                }
            }
            this.data = data;
        }
        else {
            this.data = {};
        }
    }
}
PngChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-chart',
                template: `
    <p-panel [toggleable]="true" [showHeader]="!!caption">
      <p-header>
        <i [ngClass]="captionIcon || 'fa fa-bar-chart'"></i>
        <span [innerHTML]="caption|erSafeHtml"></span>
        <ng-container *ngTemplateOutlet="templates[templateNames.header]"></ng-container>
      </p-header>
      <er-http-status class="mr-2" [tag]="$id"></er-http-status>
      <div class="p-3" *ngIf="switchable">
        <p-selectButton erPosition="center" [options]="chartTypes" [(ngModel)]="type" (onChange)="changeType()"></p-selectButton>
      </div>
      <p-chart
        [type]="type"
        [options]="options"
        [data]="data$|async"
        [plugins]="plugins"
        [width]="width "
        [height]="height"
        [responsive]="responsive"
        (onDataSelect)="onDataSelect.emit($event)"
      >
      </p-chart>
    </p-panel>

  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
PngChartComponent.propDecorators = {
    $id: [{ type: Input }],
    type: [{ type: Input }],
    rawData: [{ type: Input }],
    options: [{ type: Input }],
    caption: [{ type: Input }],
    captionIcon: [{ type: Input }],
    query: [{ type: Input }],
    plugins: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    responsive: [{ type: Input }],
    switchable: [{ type: Input }],
    dataSource: [{ type: Input }],
    dataItemProps: [{ type: Input }],
    dimensions: [{ type: Input }],
    resolveDataSource: [{ type: Input }],
    resolveDimension: [{ type: Input }],
    onDataSelect: [{ type: Output }],
    data: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PngChartComponent.prototype.$id;
    /** @type {?} */
    PngChartComponent.prototype.type;
    /** @type {?} */
    PngChartComponent.prototype.rawData;
    /** @type {?} */
    PngChartComponent.prototype.options;
    /** @type {?} */
    PngChartComponent.prototype.caption;
    /** @type {?} */
    PngChartComponent.prototype.captionIcon;
    /** @type {?} */
    PngChartComponent.prototype.query;
    /** @type {?} */
    PngChartComponent.prototype.plugins;
    /** @type {?} */
    PngChartComponent.prototype.width;
    /** @type {?} */
    PngChartComponent.prototype.height;
    /** @type {?} */
    PngChartComponent.prototype.responsive;
    /** @type {?} */
    PngChartComponent.prototype.switchable;
    /** @type {?} */
    PngChartComponent.prototype.dataSource;
    /** @type {?} */
    PngChartComponent.prototype.dataItemProps;
    /** @type {?} */
    PngChartComponent.prototype.dimensions;
    /** @type {?} */
    PngChartComponent.prototype.resolveDataSource;
    /** @type {?} */
    PngChartComponent.prototype.resolveDimension;
    /** @type {?} */
    PngChartComponent.prototype.templateNames;
    /** @type {?} */
    PngChartComponent.prototype.onDataSelect;
    /** @type {?} */
    PngChartComponent.prototype.data$;
    /** @type {?} */
    PngChartComponent.prototype.chartTypes;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9jaGFydC9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUNoSSxPQUFPLEVBQUMsUUFBUSxFQUFFLGFBQWEsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUNqRCxPQUFPLEVBQW1FLFNBQVMsRUFBNEIsTUFBTSxXQUFXLENBQUM7QUFDakksT0FBTyxFQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRTVELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFnQ3JDLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxhQUFhO0lBOUJwRDs7UUFpQ1csU0FBSSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUM7UUFNckIsWUFBTyxHQUFVLEVBQUUsQ0FBQztRQUdwQixlQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFPM0Isa0JBQWEsR0FBRztZQUNkLE1BQU0sRUFBRSxRQUFRO1NBQ2pCLENBQUM7UUFFUSxpQkFBWSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRS9ELFVBQUssR0FBd0IsSUFBSSxlQUFlLENBQUssU0FBUyxDQUFDLENBQUM7UUFFaEUsZUFBVSxHQUFHO1lBQ1gsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBQztZQUM3RCxFQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFDO1lBQzdELEVB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OztHQXdCVDtnQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7O2tCQUlFLEtBQUs7bUJBQ0wsS0FBSztzQkFDTCxLQUFLO3NCQUNMLEtBQUs7c0JBQ0wsS0FBSzswQkFDTCxLQUFLO29CQUNMLEtBQUs7c0JBQ0wsS0FBSztvQkFDTCxLQUFLO3FCQUNMLEtBQUs7eUJBQ0wsS0FBSzt5QkFDTCxLQUFLO3lCQUNMLEtBQUs7NEJBQ0wsS0FBSzt5QkFDTCxLQUFLO2dDQUNMLEtBQUs7K0JBQ0wsS0FBSzsyQkFNTCxNQUFNO21CQWFOLEtBQUs7Ozs7SUFuQ04sZ0NBQXFCOztJQUNyQixpQ0FBOEI7O0lBQzlCLG9DQUF1Qjs7SUFDdkIsb0NBQXFCOztJQUNyQixvQ0FBeUI7O0lBQ3pCLHdDQUE2Qjs7SUFDN0Isa0NBQWlDOztJQUNqQyxvQ0FBNkI7O0lBQzdCLGtDQUF1Qjs7SUFDdkIsbUNBQXdCOztJQUN4Qix1Q0FBMkI7O0lBQzNCLHVDQUEyQjs7SUFDM0IsdUNBQWdFOztJQUNoRSwwQ0FBc0M7O0lBQ3RDLHVDQUF1Rjs7SUFDdkYsOENBQXlFOztJQUN6RSw2Q0FBdUY7O0lBRXZGLDBDQUVFOztJQUVGLHlDQUErRDs7SUFFL0Qsa0NBQWdFOztJQUVoRSx1Q0FPRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIE91dHB1dCwgU2ltcGxlQ2hhbmdlc30gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0FwaVV0aWxzLCBCYXNlQ29tcG9uZW50fSBmcm9tICdAZXIvY29yZSc7XG5pbXBvcnQge0FwaURhdGFQcm9wcywgQ2hhcnREYXRhUHJvcHMsIENoYXJ0RGF0YVNldHNQcm9wcywgQ2hhcnREaW1lbnNpb24sIENoYXJ0VHlwZSwgRGF0YUl0ZW1Qcm9wcywgRGF0YVNvdXJjZX0gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q2hhcnRVdGlscywgQ29tbW9uc1V0aWxzLCBJZFV0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtRdWVyeX0gZnJvbSAnZWxhc3RpYy1idWlsZGVyJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG5nLWNoYXJ0JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8cC1wYW5lbCBbdG9nZ2xlYWJsZV09XCJ0cnVlXCIgW3Nob3dIZWFkZXJdPVwiISFjYXB0aW9uXCI+XG4gICAgICA8cC1oZWFkZXI+XG4gICAgICAgIDxpIFtuZ0NsYXNzXT1cImNhcHRpb25JY29uIHx8ICdmYSBmYS1iYXItY2hhcnQnXCI+PC9pPlxuICAgICAgICA8c3BhbiBbaW5uZXJIVE1MXT1cImNhcHRpb258ZXJTYWZlSHRtbFwiPjwvc3Bhbj5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdUZW1wbGF0ZU91dGxldD1cInRlbXBsYXRlc1t0ZW1wbGF0ZU5hbWVzLmhlYWRlcl1cIj48L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvcC1oZWFkZXI+XG4gICAgICA8ZXItaHR0cC1zdGF0dXMgY2xhc3M9XCJtci0yXCIgW3RhZ109XCIkaWRcIj48L2VyLWh0dHAtc3RhdHVzPlxuICAgICAgPGRpdiBjbGFzcz1cInAtM1wiICpuZ0lmPVwic3dpdGNoYWJsZVwiPlxuICAgICAgICA8cC1zZWxlY3RCdXR0b24gZXJQb3NpdGlvbj1cImNlbnRlclwiIFtvcHRpb25zXT1cImNoYXJ0VHlwZXNcIiBbKG5nTW9kZWwpXT1cInR5cGVcIiAob25DaGFuZ2UpPVwiY2hhbmdlVHlwZSgpXCI+PC9wLXNlbGVjdEJ1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPHAtY2hhcnRcbiAgICAgICAgW3R5cGVdPVwidHlwZVwiXG4gICAgICAgIFtvcHRpb25zXT1cIm9wdGlvbnNcIlxuICAgICAgICBbZGF0YV09XCJkYXRhJHxhc3luY1wiXG4gICAgICAgIFtwbHVnaW5zXT1cInBsdWdpbnNcIlxuICAgICAgICBbd2lkdGhdPVwid2lkdGggXCJcbiAgICAgICAgW2hlaWdodF09XCJoZWlnaHRcIlxuICAgICAgICBbcmVzcG9uc2l2ZV09XCJyZXNwb25zaXZlXCJcbiAgICAgICAgKG9uRGF0YVNlbGVjdCk9XCJvbkRhdGFTZWxlY3QuZW1pdCgkZXZlbnQpXCJcbiAgICAgID5cbiAgICAgIDwvcC1jaGFydD5cbiAgICA8L3AtcGFuZWw+XG5cbiAgYCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5cbmV4cG9ydCBjbGFzcyBQbmdDaGFydENvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG5cbiAgQElucHV0KCkgJGlkOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHR5cGUgPSBDaGFydFR5cGUuQkFSO1xuICBASW5wdXQoKSByYXdEYXRhOiB7fVtdO1xuICBASW5wdXQoKSBvcHRpb25zOiB7fTtcbiAgQElucHV0KCkgY2FwdGlvbjogc3RyaW5nO1xuICBASW5wdXQoKSBjYXB0aW9uSWNvbjogc3RyaW5nO1xuICBASW5wdXQoKSBxdWVyeT86IFF1ZXJ5IHwgUXVlcnlbXTtcbiAgQElucHV0KCkgcGx1Z2luczogYW55W10gPSBbXTtcbiAgQElucHV0KCkgd2lkdGg6IHN0cmluZztcbiAgQElucHV0KCkgaGVpZ2h0OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHJlc3BvbnNpdmUgPSB0cnVlO1xuICBASW5wdXQoKSBzd2l0Y2hhYmxlID0gdHJ1ZTtcbiAgQElucHV0KCkgZGF0YVNvdXJjZTogRGF0YVNvdXJjZSB8IEFwaURhdGFQcm9wcyB8IEFwaURhdGFQcm9wc1tdO1xuICBASW5wdXQoKSBkYXRhSXRlbVByb3BzOiBEYXRhSXRlbVByb3BzO1xuICBASW5wdXQoKSBkaW1lbnNpb25zOiBDaGFydERpbWVuc2lvbiB8IENoYXJ0RGltZW5zaW9uW10gfCAoKHJhd0RhdGEpID0+IENoYXJ0RGF0YVByb3BzKTtcbiAgQElucHV0KCkgcmVzb2x2ZURhdGFTb3VyY2U6IHsgbWV0aG9kOiAoKGRzOiBEYXRhU291cmNlKSA9PiBEYXRhU291cmNlKSB9O1xuICBASW5wdXQoKSByZXNvbHZlRGltZW5zaW9uOiB7IG1ldGhvZDogKChkaW1lbnNpb246IENoYXJ0RGltZW5zaW9uKSA9PiBDaGFydERpbWVuc2lvbikgfTtcblxuICB0ZW1wbGF0ZU5hbWVzID0ge1xuICAgIGhlYWRlcjogJ2hlYWRlcidcbiAgfTtcblxuICBAT3V0cHV0KCkgb25EYXRhU2VsZWN0OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBkYXRhJDogQmVoYXZpb3JTdWJqZWN0PHt9PiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8e30+KHVuZGVmaW5lZCk7XG5cbiAgY2hhcnRUeXBlcyA9IFtcbiAgICB7bGFiZWw6ICfmn7Hnirblm74nLCB2YWx1ZTogQ2hhcnRUeXBlLkJBUiwgaWNvbjogJ2ZhIGZhLWJhci1jaGFydCd9LFxuICAgIHtsYWJlbDogJ+WchumlvOWbvicsIHZhbHVlOiBDaGFydFR5cGUuUElFLCBpY29uOiAnZmEgZmEtcGllLWNoYXJ0J30sXG4gICAge2xhYmVsOiAn5puy57q/5Zu+JywgdmFsdWU6IENoYXJ0VHlwZS5MSU5FLCBpY29uOiAnZmEgZmEtbGluZS1jaGFydCd9LFxuICAgIHtsYWJlbDogJ+mbt+i+vuWbvicsIHZhbHVlOiBDaGFydFR5cGUuUkFEQVIsIGljb246ICdmYSBmYS1iYXInfSxcbiAgICB7bGFiZWw6ICfljLrln5/lm74nLCB2YWx1ZTogQ2hhcnRUeXBlLkFSRUEsIGljb246ICdmYSBmYS1hcmVhLWNoYXJ0J30sXG4gICAge2xhYmVsOiAn546v5b2i5Zu+JywgdmFsdWU6IENoYXJ0VHlwZS5ET1VHSE5VVCwgaWNvbjogJ2ZhIGZhLWNpcmNsZSd9XG4gIF07XG5cbiAgQElucHV0KCkgZ2V0IGRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YSQudmFsdWU7XG4gIH1cblxuICBzZXQgZGF0YShkYXRhKSB7XG4gICAgdGhpcy5kYXRhJC5uZXh0KGRhdGEgfHwge30pO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIHRoaXMucmF3RGF0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJ1aWxkQ2hhcnQoKTtcbiAgfVxuXG4gIGNoYW5nZVR5cGUoKSB7XG4gICAgdGhpcy5idWlsZENoYXJ0KCk7XG4gIH1cblxuICByZUJ1aWxkQ2hhcnQoKSB7XG4gICAgdGhpcy5yYXdEYXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYnVpbGRDaGFydCgpO1xuICB9XG5cbiAgYnVpbGRDaGFydCgpIHtcbiAgICBpZiAoIXRoaXMuJGlkKSB7XG4gICAgICB0aGlzLiRpZCA9IElkVXRpbHMuZ2V0UmFuZG9tKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnJhd0RhdGEpIHtcbiAgICAgIHRoaXMucmVzb2x2ZWRSYXdEYXRhKHRoaXMucmF3RGF0YSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmRhdGFTb3VyY2UpIHtcbiAgICAgIGxldCBkcyA9IHRoaXMuZGF0YVNvdXJjZTtcbiAgICAgIGlmICghZHMuaGFzT3duUHJvcGVydHkoJ2FwaURhdGFQcm9wcycpKSB7XG4gICAgICAgIGNvbnN0IGFwaURhdGFQcm9wcyA9IGRzO1xuICAgICAgICBkcyA9IHt9O1xuICAgICAgICBkc1snYXBpRGF0YVByb3BzJ10gPSBhcGlEYXRhUHJvcHM7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnJlc29sdmVEYXRhU291cmNlKSB7XG4gICAgICAgIGRzID0gdGhpcy5yZXNvbHZlRGF0YVNvdXJjZS5tZXRob2QoPERhdGFTb3VyY2U+ZHMpO1xuICAgICAgfVxuXG4gICAgICBBcGlVdGlscy5iYXRjaEZldGNoKGRzLCB0aGlzLiRpZClcbiAgICAgICAgLnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgICAgICB0aGlzLnJhd0RhdGEgPSBkYXRhO1xuICAgICAgICAgIHRoaXMucmVzb2x2ZWRSYXdEYXRhKHRoaXMucmF3RGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlc29sdmVkUmF3RGF0YShyYXdEYXRhKSB7XG4gICAgaWYgKCFDb21tb25zVXRpbHMuaXNFbXB0eShyYXdEYXRhKSkge1xuICAgICAgbGV0IGRhdGE6IENoYXJ0RGF0YVByb3BzO1xuICAgICAgY29uc3QgZGF0YXNldHM6IENoYXJ0RGF0YVNldHNQcm9wc1tdID0gW107XG4gICAgICBsZXQgbGFiZWxzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgaWYgKENvbW1vbnNVdGlscy5pc0Z1bmN0aW9uKHRoaXMuZGltZW5zaW9ucykpIHtcbiAgICAgICAgZGF0YSA9ICg8RnVuY3Rpb24+dGhpcy5kaW1lbnNpb25zKShyYXdEYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmRpbWVuc2lvbnMpIHtcbiAgICAgICAgICBjb25zdCBkaW1lbnNpb25zID0gQ29tbW9uc1V0aWxzLmdldEFycmF5VmFsdWUodGhpcy5kaW1lbnNpb25zKTtcbiAgICAgICAgICBkaW1lbnNpb25zLmZvckVhY2goKGRpbWVuc2lvbiwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlc29sdmVEaW1lbnNpb24pIHtcbiAgICAgICAgICAgICAgZGltZW5zaW9uID0gdGhpcy5yZXNvbHZlRGltZW5zaW9uLm1ldGhvZChkaW1lbnNpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2hhcnREYXRhID0gQ2hhcnRVdGlscy5idWlsZENoYXJ0RGF0YShyYXdEYXRhLCB7XG4gICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgICAgZGltZW5zaW9uOiBkaW1lbnNpb24sXG4gICAgICAgICAgICAgIGRhdGFJdGVtUHJvcHM6IHRoaXMuZGF0YUl0ZW1Qcm9wc1xuICAgICAgICAgICAgfSwgaW5kZXgpO1xuICAgICAgICAgICAgZGF0YXNldHMucHVzaCguLi5jaGFydERhdGEuZGF0YXNldHMpO1xuICAgICAgICAgICAgaWYgKGxhYmVscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgbGFiZWxzID0gY2hhcnREYXRhLmxhYmVscztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkYXRhID0ge2xhYmVscywgZGF0YXNldHN9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEgPSBDaGFydFV0aWxzLmJ1aWxkQ2hhcnREYXRhKHJhd0RhdGEsIHtcbiAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIGRhdGFJdGVtUHJvcHM6IHRoaXMuZGF0YUl0ZW1Qcm9wc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEgPSB7fTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==