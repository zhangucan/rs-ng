/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DataAwareControlWrapperComponent } from '@er/core';
import { CommonsUtils } from '@er/utils';
import { DEFAULT_PNG_SLIDER_PROPS } from './type';
export class PngSliderComponent extends DataAwareControlWrapperComponent {
    constructor() {
        super(...arguments);
        this.$defaultProps = DEFAULT_PNG_SLIDER_PROPS;
    }
    /**
     * @return {?}
     */
    get current() {
        return CommonsUtils.join(this.value, '——');
    }
    /**
     * @param {?} event
     * @return {?}
     */
    initValue(event) {
        if (event.hasOwnProperty('min') && event.hasOwnProperty('max')) {
            this.min = event.min;
            this.max = event.max;
            this.value = [event.min, event.max];
        }
        else {
            this.value = event;
        }
    }
}
PngSliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-slider',
                template: `
    <small class="d-inline w-25">值：{{current}}</small>
    <p-slider class="d-inline"
              [erApiData]="apiDataProps"
              [(ngModel)]="value"
              erPropsBind
              [props]="$props"
              [min]="min"
              [max]="max"
              (onChange)="updateTouch()"
              (onDataReady)="initValue($event)"
    >
    </p-slider>

  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PngSliderComponent),
                        multi: true
                    }]
            }] }
];
if (false) {
    /** @type {?} */
    PngSliderComponent.prototype.$defaultProps;
    /** @type {?} */
    PngSliderComponent.prototype.min;
    /** @type {?} */
    PngSliderComponent.prototype.max;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9zbGlkZXIvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUMsZ0NBQWdDLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDMUQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUN2QyxPQUFPLEVBQUMsd0JBQXdCLEVBQWlCLE1BQU0sUUFBUSxDQUFDO0FBNEJoRSxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsZ0NBQWdEO0lBeEJ4Rjs7UUEwQkUsa0JBQWEsR0FBRyx3QkFBd0IsQ0FBQztJQW1CM0MsQ0FBQzs7OztJQWJDLElBQUksT0FBTztRQUNULE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7O0lBRUQsU0FBUyxDQUFDLEtBQUs7UUFDYixJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM5RCxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7WUFDckIsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNyQzthQUFNO1lBQ0wsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7U0FDcEI7SUFDSCxDQUFDOzs7WUE1Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2dCQUN0QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7O0dBY1Q7Z0JBQ0QsU0FBUyxFQUFFLENBQUM7d0JBQ1YsT0FBTyxFQUFFLGlCQUFpQjt3QkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQzt3QkFDakQsS0FBSyxFQUFFLElBQUk7cUJBQ1osQ0FBQzthQUNIOzs7O0lBSUMsMkNBQXlDOztJQUV6QyxpQ0FBWTs7SUFFWixpQ0FBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBmb3J3YXJkUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TkdfVkFMVUVfQUNDRVNTT1J9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7RGF0YUF3YXJlQ29udHJvbFdyYXBwZXJDb21wb25lbnR9IGZyb20gJ0Blci9jb3JlJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtERUZBVUxUX1BOR19TTElERVJfUFJPUFMsIFBuZ1NsaWRlclByb3BzfSBmcm9tICcuL3R5cGUnO1xuXG5leHBvcnQge1BuZ1NsaWRlclByb3BzfSBmcm9tICcuL3R5cGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwbmctc2xpZGVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8c21hbGwgY2xhc3M9XCJkLWlubGluZSB3LTI1XCI+5YC877yae3tjdXJyZW50fX08L3NtYWxsPlxuICAgIDxwLXNsaWRlciBjbGFzcz1cImQtaW5saW5lXCJcbiAgICAgICAgICAgICAgW2VyQXBpRGF0YV09XCJhcGlEYXRhUHJvcHNcIlxuICAgICAgICAgICAgICBbKG5nTW9kZWwpXT1cInZhbHVlXCJcbiAgICAgICAgICAgICAgZXJQcm9wc0JpbmRcbiAgICAgICAgICAgICAgW3Byb3BzXT1cIiRwcm9wc1wiXG4gICAgICAgICAgICAgIFttaW5dPVwibWluXCJcbiAgICAgICAgICAgICAgW21heF09XCJtYXhcIlxuICAgICAgICAgICAgICAob25DaGFuZ2UpPVwidXBkYXRlVG91Y2goKVwiXG4gICAgICAgICAgICAgIChvbkRhdGFSZWFkeSk9XCJpbml0VmFsdWUoJGV2ZW50KVwiXG4gICAgPlxuICAgIDwvcC1zbGlkZXI+XG5cbiAgYCxcbiAgcHJvdmlkZXJzOiBbe1xuICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFBuZ1NsaWRlckNvbXBvbmVudCksXG4gICAgbXVsdGk6IHRydWVcbiAgfV1cbn0pXG5cbmV4cG9ydCBjbGFzcyBQbmdTbGlkZXJDb21wb25lbnQgZXh0ZW5kcyBEYXRhQXdhcmVDb250cm9sV3JhcHBlckNvbXBvbmVudDxQbmdTbGlkZXJQcm9wcz4ge1xuXG4gICRkZWZhdWx0UHJvcHMgPSBERUZBVUxUX1BOR19TTElERVJfUFJPUFM7XG5cbiAgbWluOiBudW1iZXI7XG5cbiAgbWF4OiBudW1iZXI7XG5cbiAgZ2V0IGN1cnJlbnQoKSB7XG4gICAgcmV0dXJuIENvbW1vbnNVdGlscy5qb2luKHRoaXMudmFsdWUsICfigJTigJQnKTtcbiAgfVxuXG4gIGluaXRWYWx1ZShldmVudCkge1xuICAgIGlmIChldmVudC5oYXNPd25Qcm9wZXJ0eSgnbWluJykgJiYgZXZlbnQuaGFzT3duUHJvcGVydHkoJ21heCcpKSB7XG4gICAgICB0aGlzLm1pbiA9IGV2ZW50Lm1pbjtcbiAgICAgIHRoaXMubWF4ID0gZXZlbnQubWF4O1xuICAgICAgdGhpcy52YWx1ZSA9IFtldmVudC5taW4sIGV2ZW50Lm1heF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsdWUgPSBldmVudDtcbiAgICB9XG4gIH1cbn1cbiJdfQ==