/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { BaseComponent } from '@er/core';
import { StateNames } from '@er/types';
import { StatesUtils } from '@er/utils';
import { of } from 'rxjs';
import { filter, map, takeUntil } from 'rxjs/operators';
import { DEFAULT_POPUP_DIALOG_PROPS } from './defaults';
export class PngPopupDialogComponent extends BaseComponent {
    constructor() {
        super(...arguments);
        this.onClose = new EventEmitter();
        this.onAction = new EventEmitter();
        this.templateNames = {
            header: 'header',
            content: 'content',
            footer: 'footer'
        };
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this.dlgOptions$ = of(this.resolveDlgOptions(options));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dlgOptions$ = StatesUtils.observe(StateNames.popup)
            .pipe(filter(state => !!state), map(options => this.resolveDlgOptions(options)), takeUntil(this.destroyed$));
    }
    /**
     * @param {?} options
     * @return {?}
     */
    resolveDlgOptions(options) {
        /** @type {?} */
        const opt = Object.assign({}, DEFAULT_POPUP_DIALOG_PROPS, { header: this.header, content: this.content }, options);
        if (options.contentMaxHeight || options.contentMaxWidth) {
            opt.contentStyle = Object.assign({}, opt.contentStyle || {}, { 'max-height': `${options.contentMaxHeight || 3000}px`, 'max-width': `${options.contentMaxWidth || 3000}px` });
        }
        return opt;
    }
    /**
     * @param {?} dlg
     * @param {?} options
     * @return {?}
     */
    showEvent(dlg, options) {
        super.emitEvent('onShow', {
            scope: options,
            event: dlg,
            context: options.context
        });
    }
    /**
     * @param {?} dlg
     * @param {?} options
     * @return {?}
     */
    closeDlg(dlg, options) {
        if (this.canClose && !this.canClose({
            scope: options,
            event: dlg,
            context: options.context
        })) {
            return;
        }
        StatesUtils.create(StateNames.popup, { visible: false });
    }
}
PngPopupDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-popup-dialog',
                template: "<ng-container *ngIf=\"dlgOptions$|async as dlgOptions\">\n  <p-dialog #pngDialog\n            [(visible)]=\"dlgOptions.visible\"\n            [minWidth]=\"dlgOptions.minWidth\"\n            [minHeight]=\"dlgOptions.minHeight\"\n            [width]=\"dlgOptions.width\"\n            [height]=\"dlgOptions.height\"\n            [modal]=\"dlgOptions.modal\"\n            [draggable]=\"dlgOptions.draggable\"\n            [resizable]=\"dlgOptions.resizable\"\n            [closeOnEscape]=\"dlgOptions.closeOnEscape\"\n            [contentStyle]=\"dlgOptions.contentStyle\"\n            [dismissableMask]=\"dlgOptions.dismissableMask\"\n            [rtl]=\"dlgOptions.rtl\"\n            [closable]=\"dlgOptions.closable\"\n            [responsive]=\"dlgOptions.responsive\"\n            [breakpoint]=\"dlgOptions.breakpoint\"\n            [appendTo]=\"dlgOptions.appendTo\"\n            [maximizable]=\"dlgOptions.maximizable\"\n            [blockScroll]=\"dlgOptions.blockScroll\"\n            [style]=\"dlgOptions.style\"\n            [styleClass]=\"dlgOptions.styleClass\"\n            [showHeader]=\"dlgOptions.showHeader\"\n            [positionLeft]=\"dlgOptions.positionLeft\"\n            [positionTop]=\"dlgOptions.positionTop\"\n            (onShow)=\"showEvent(pngDialog,dlgOptions)\"\n  >\n    <p-header>\n      <ng-container *ngIf=\"templates[templateNames.header]\">\n        <ng-container *ngTemplateOutlet=\"templates[templateNames.header]\"></ng-container>\n      </ng-container>\n      <span [innerHTML]=\"dlgOptions.header\"></span>\n    </p-header>\n\n    <ng-container *ngTemplateOutlet=\"templates[templateNames.content]\"></ng-container>\n\n    <ng-container *ngIf=\"dlgOptions.content\">\n      <er-dyna-content [content]=\"dlgOptions.content\"></er-dyna-content>\n    </ng-container>\n\n    <ng-content></ng-content>\n\n    <p-footer *ngIf=\"dlgOptions.showFooter\">\n      <ng-container *ngIf=\"templates[templateNames.footer]\">\n        <ng-container *ngTemplateOutlet=\"templates[templateNames.footer]\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!templates[templateNames.footer]\">\n        <png-buttons [btns]=\"dlgOptions.buttons\" [context]=\"dlgOptions.context\"></png-buttons>\n        <button pButton type=\"button\" class=\"ui-button-rounded ui-button-danger\" iconPos=\"left\"\n                (click)=\"closeDlg(pngDialog,dlgOptions)\"\n                [icon]=\"dlgOptions.closeIcon\" [label]=\"dlgOptions.closeLabel\"></button>\n      </ng-container>\n    </p-footer>\n  </p-dialog>\n</ng-container>\n\n\n\n\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host::ng-deep .ui-dialog-titlebar{background-color:#0d7a8b!important;color:#fff!important}"]
            }] }
];
PngPopupDialogComponent.propDecorators = {
    header: [{ type: Input }],
    content: [{ type: Input }],
    canClose: [{ type: Input }],
    onClose: [{ type: Output }],
    onAction: [{ type: Output }],
    options: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PngPopupDialogComponent.prototype.header;
    /** @type {?} */
    PngPopupDialogComponent.prototype.content;
    /** @type {?} */
    PngPopupDialogComponent.prototype.canClose;
    /** @type {?} */
    PngPopupDialogComponent.prototype.onClose;
    /** @type {?} */
    PngPopupDialogComponent.prototype.onAction;
    /** @type {?} */
    PngPopupDialogComponent.prototype.dlgOptions$;
    /** @type {?} */
    PngPopupDialogComponent.prototype.templateNames;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wb3B1cC9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdEcsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUN2QyxPQUFPLEVBQStCLFVBQVUsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNuRSxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3RDLE9BQU8sRUFBYSxFQUFFLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDcEMsT0FBTyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEQsT0FBTyxFQUFDLDBCQUEwQixFQUFDLE1BQU0sWUFBWSxDQUFDO0FBU3RELE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxhQUFhO0lBTjFEOztRQVlZLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ2xDLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBSTdDLGtCQUFhLEdBQUc7WUFDZCxNQUFNLEVBQUUsUUFBUTtZQUNoQixPQUFPLEVBQUUsU0FBUztZQUNsQixNQUFNLEVBQUUsUUFBUTtTQUNqQixDQUFDO0lBb0RKLENBQUM7Ozs7O0lBbERDLElBQ0ksT0FBTyxDQUFDLE9BQU87UUFDakIsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQzthQUNyRCxJQUFJLENBQ0gsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUN4QixHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUMsRUFDL0MsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FDM0IsQ0FBQztJQUNOLENBQUM7Ozs7O0lBRUQsaUJBQWlCLENBQUMsT0FBTzs7Y0FDakIsR0FBRyxxQkFDSiwwQkFBMEIsSUFDN0IsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQ25CLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxJQUNsQixPQUFPLENBQ1g7UUFDRCxJQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsSUFBSSxPQUFPLENBQUMsZUFBZSxFQUFFO1lBQ3ZELEdBQUcsQ0FBQyxZQUFZLHFCQUNYLEdBQUcsQ0FBQyxZQUFZLElBQUksRUFBRSxJQUN6QixZQUFZLEVBQUUsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLElBQUksSUFBSSxJQUFJLEVBQ3JELFdBQVcsRUFBRSxHQUFHLE9BQU8sQ0FBQyxlQUFlLElBQUksSUFBSSxJQUFJLEdBQ3BELENBQUM7U0FDSDtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQzs7Ozs7O0lBRUQsU0FBUyxDQUFDLEdBQUcsRUFBRSxPQUFPO1FBQ3BCLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFO1lBQ3hCLEtBQUssRUFBRSxPQUFPO1lBQ2QsS0FBSyxFQUFFLEdBQUc7WUFDVixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87U0FDekIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7O0lBRUQsUUFBUSxDQUFDLEdBQUcsRUFBRSxPQUFPO1FBQ25CLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDbEMsS0FBSyxFQUFFLE9BQU87WUFDZCxLQUFLLEVBQUUsR0FBRztZQUNWLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTztTQUN6QixDQUFDLEVBQUU7WUFDRixPQUFPO1NBQ1I7UUFDRCxXQUFXLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDOzs7WUF2RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLHFoRkFBdUI7Z0JBRXZCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOzthQUNoRDs7O3FCQUdFLEtBQUs7c0JBQ0wsS0FBSzt1QkFDTCxLQUFLO3NCQUVMLE1BQU07dUJBQ04sTUFBTTtzQkFVTixLQUFLOzs7O0lBZk4seUNBQXdCOztJQUN4QiwwQ0FBOEI7O0lBQzlCLDJDQUF3Qzs7SUFFeEMsMENBQTRDOztJQUM1QywyQ0FBNkM7O0lBRTdDLDhDQUF5Qzs7SUFFekMsZ0RBSUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmFzZUNvbXBvbmVudH0gZnJvbSAnQGVyL2NvcmUnO1xuaW1wb3J0IHtEeW5hQ29udGVudCwgUG9wdXBEaWFsb2dQcm9wLCBTdGF0ZU5hbWVzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtTdGF0ZXNVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgb2Z9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmaWx0ZXIsIG1hcCwgdGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0RFRkFVTFRfUE9QVVBfRElBTE9HX1BST1BTfSBmcm9tICcuL2RlZmF1bHRzJztcblxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwbmctcG9wdXAtZGlhbG9nJyxcbiAgdGVtcGxhdGVVcmw6ICd0cGwuaHRtbCcsXG4gIHN0eWxlVXJsczogWydzdHlsZXMuc2NzcyddLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBQbmdQb3B1cERpYWxvZ0NvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIGhlYWRlcjogc3RyaW5nO1xuICBASW5wdXQoKSBjb250ZW50OiBEeW5hQ29udGVudDtcbiAgQElucHV0KCkgY2FuQ2xvc2U6IChjb250ZXh0KSA9PiBib29sZWFuO1xuXG4gIEBPdXRwdXQoKSBvbkNsb3NlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBPdXRwdXQoKSBvbkFjdGlvbiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGRsZ09wdGlvbnMkOiBPYnNlcnZhYmxlPFBvcHVwRGlhbG9nUHJvcD47XG5cbiAgdGVtcGxhdGVOYW1lcyA9IHtcbiAgICBoZWFkZXI6ICdoZWFkZXInLFxuICAgIGNvbnRlbnQ6ICdjb250ZW50JyxcbiAgICBmb290ZXI6ICdmb290ZXInXG4gIH07XG5cbiAgQElucHV0KClcbiAgc2V0IG9wdGlvbnMob3B0aW9ucykge1xuICAgIHRoaXMuZGxnT3B0aW9ucyQgPSBvZih0aGlzLnJlc29sdmVEbGdPcHRpb25zKG9wdGlvbnMpKTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuZGxnT3B0aW9ucyQgPSBTdGF0ZXNVdGlscy5vYnNlcnZlKFN0YXRlTmFtZXMucG9wdXApXG4gICAgICAucGlwZShcbiAgICAgICAgZmlsdGVyKHN0YXRlID0+ICEhc3RhdGUpLFxuICAgICAgICBtYXAob3B0aW9ucyA9PiB0aGlzLnJlc29sdmVEbGdPcHRpb25zKG9wdGlvbnMpKSxcbiAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveWVkJClcbiAgICAgICk7XG4gIH1cblxuICByZXNvbHZlRGxnT3B0aW9ucyhvcHRpb25zKTogUG9wdXBEaWFsb2dQcm9wIHtcbiAgICBjb25zdCBvcHQgPSB7XG4gICAgICAuLi5ERUZBVUxUX1BPUFVQX0RJQUxPR19QUk9QUyxcbiAgICAgIGhlYWRlcjogdGhpcy5oZWFkZXIsXG4gICAgICBjb250ZW50OiB0aGlzLmNvbnRlbnQsXG4gICAgICAuLi5vcHRpb25zXG4gICAgfTtcbiAgICBpZiAob3B0aW9ucy5jb250ZW50TWF4SGVpZ2h0IHx8IG9wdGlvbnMuY29udGVudE1heFdpZHRoKSB7XG4gICAgICBvcHQuY29udGVudFN0eWxlID0ge1xuICAgICAgICAuLi5vcHQuY29udGVudFN0eWxlIHx8IHt9LFxuICAgICAgICAnbWF4LWhlaWdodCc6IGAke29wdGlvbnMuY29udGVudE1heEhlaWdodCB8fCAzMDAwfXB4YCxcbiAgICAgICAgJ21heC13aWR0aCc6IGAke29wdGlvbnMuY29udGVudE1heFdpZHRoIHx8IDMwMDB9cHhgXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gb3B0O1xuICB9XG5cbiAgc2hvd0V2ZW50KGRsZywgb3B0aW9ucykge1xuICAgIHN1cGVyLmVtaXRFdmVudCgnb25TaG93Jywge1xuICAgICAgc2NvcGU6IG9wdGlvbnMsXG4gICAgICBldmVudDogZGxnLFxuICAgICAgY29udGV4dDogb3B0aW9ucy5jb250ZXh0XG4gICAgfSk7XG4gIH1cblxuICBjbG9zZURsZyhkbGcsIG9wdGlvbnMpIHtcbiAgICBpZiAodGhpcy5jYW5DbG9zZSAmJiAhdGhpcy5jYW5DbG9zZSh7XG4gICAgICBzY29wZTogb3B0aW9ucyxcbiAgICAgIGV2ZW50OiBkbGcsXG4gICAgICBjb250ZXh0OiBvcHRpb25zLmNvbnRleHRcbiAgICB9KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBTdGF0ZXNVdGlscy5jcmVhdGUoU3RhdGVOYW1lcy5wb3B1cCwge3Zpc2libGU6IGZhbHNlfSk7XG4gIH1cblxufVxuIl19