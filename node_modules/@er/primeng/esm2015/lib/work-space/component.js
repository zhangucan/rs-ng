/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, Renderer2, ViewChild } from '@angular/core';
import { BaseComponent } from '@er/core';
import { StateNames } from '@er/types';
import { ConfigUtils, StatesUtils } from '@er/utils';
import { ScrollPanel } from 'primeng/primeng';
import { filter } from 'rxjs/operators';
/** @enum {number} */
const MenuOrientation = {
    STATIC: 0,
    OVERLAY: 1,
    SLIM: 2,
    HORIZONTAL: 3,
};
MenuOrientation[MenuOrientation.STATIC] = 'STATIC';
MenuOrientation[MenuOrientation.OVERLAY] = 'OVERLAY';
MenuOrientation[MenuOrientation.SLIM] = 'SLIM';
MenuOrientation[MenuOrientation.HORIZONTAL] = 'HORIZONTAL';
export class PngAdminWorkSpaceComponent extends BaseComponent {
    /**
     * @param {?} renderer
     * @param {?} cd
     */
    constructor(renderer, cd) {
        super();
        this.renderer = renderer;
        this.cd = cd;
        this.menuOrientation = MenuOrientation.STATIC;
        this.darkMenu = true;
        this.onInitMenu = new EventEmitter();
        this.profileMode = 'inline';
        this.rootMenuToggleStateName = '$rootMenuToggler';
        this.templateNames = {
            topbar: 'topbar',
            header: 'header',
            main: 'main',
            footer: 'footer',
            profile: 'profile',
            settings: 'settings',
            messages: 'messages',
            notifications: 'notifications',
            search: 'search'
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onInitMenu.emit();
        this.$subscriptions = StatesUtils.observe(StateNames.menu, this.rootMenuToggleStateName)
            .pipe(filter(state => state !== undefined))
            .subscribe(() => this._toggleMainMenu());
        this.appTitle = this.appTitle || ConfigUtils.getConfig().appTitle;
        this.appName = this.appName || ConfigUtils.getConfig().appName;
        this.appLogo = this.appLogo || ConfigUtils.getConfig().appLogo;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout(() => {
            this.layoutMenuScrollerViewChild.moveBar();
        }, 100);
    }
    /**
     * @return {?}
     */
    onLayoutClick() {
        if (!this.topbarItemClick) {
            this.activeTopbarItem = null;
            this.topbarMenuActive = false;
        }
        if (!this.menuClick) {
            if (this.isHorizontal() || this.isSlim()) {
                this.resetMenu = true;
            }
            if (this.overlayMenuActive || this.staticMenuMobileActive) {
                this.hideOverlayMenu();
            }
            this.menuHoverActive = false;
        }
        this.topbarItemClick = false;
        this.menuClick = false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMenuClick($event) {
        this.menuClick = true;
        this.resetMenu = false;
        if (!this.isHorizontal()) {
            setTimeout(() => {
                this.layoutMenuScrollerViewChild.moveBar();
            }, 450);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTopbarMenuButtonClick(event) {
        this.topbarItemClick = true;
        this.topbarMenuActive = !this.topbarMenuActive;
        this.hideOverlayMenu();
        event.preventDefault();
    }
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    onTopbarItemClick(event, item) {
        this.topbarItemClick = true;
        if (this.activeTopbarItem === item) {
            this.activeTopbarItem = null;
        }
        else {
            this.activeTopbarItem = item;
        }
        event.preventDefault();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTopbarSubItemClick(event) {
        event.preventDefault();
    }
    /**
     * @return {?}
     */
    hideOverlayMenu() {
        this.rotateMenuButton = false;
        this.overlayMenuActive = false;
        this.staticMenuMobileActive = false;
    }
    /**
     * @return {?}
     */
    isTablet() {
        /** @type {?} */
        const width = window.innerWidth;
        return width <= 1024 && width > 640;
    }
    /**
     * @return {?}
     */
    isDesktop() {
        return window.innerWidth > 1024;
    }
    /**
     * @return {?}
     */
    isMobile() {
        return window.innerWidth <= 640;
    }
    /**
     * @return {?}
     */
    isOverlay() {
        return this.menuOrientation === MenuOrientation.OVERLAY;
    }
    /**
     * @return {?}
     */
    isHorizontal() {
        return this.menuOrientation === MenuOrientation.HORIZONTAL;
    }
    /**
     * @return {?}
     */
    isSlim() {
        return this.menuOrientation === MenuOrientation.SLIM;
    }
    /**
     * @return {?}
     */
    changeToStaticMenu() {
        this.menuOrientation = MenuOrientation.STATIC;
    }
    /**
     * @return {?}
     */
    changeToOverlayMenu() {
        this.menuOrientation = MenuOrientation.OVERLAY;
    }
    /**
     * @return {?}
     */
    changeToHorizontalMenu() {
        this.menuOrientation = MenuOrientation.HORIZONTAL;
    }
    /**
     * @return {?}
     */
    changeToSlimMenu() {
        this.menuOrientation = MenuOrientation.SLIM;
    }
    /**
     * @private
     * @return {?}
     */
    _toggleMainMenu() {
        /** @type {?} */
        const menu = StatesUtils.getValue(StateNames.rootMenu);
        this.menuOrientation = menu && menu.orientation;
        this.darkMenu = menu && menu.dark;
        this.menuClick = true;
        this.rotateMenuButton = !this.rotateMenuButton;
        this.topbarMenuActive = false;
        if (this.menuOrientation === MenuOrientation.OVERLAY) {
            this.overlayMenuActive = !this.overlayMenuActive;
        }
        else {
            if (this.isDesktop()) {
                this.staticMenuDesktopInactive = !this.staticMenuDesktopInactive;
            }
            else {
                this.staticMenuMobileActive = !this.staticMenuMobileActive;
            }
        }
        this.cd.detectChanges();
    }
}
PngAdminWorkSpaceComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-admin-work-space',
                template: "<div class=\"layout-wrapper\" (click)=\"onLayoutClick()\"\n     [ngClass]=\"{'menu-layout-static': !isOverlay(),\n                'menu-layout-overlay': isOverlay(),\n                'layout-menu-overlay-active': overlayMenuActive,\n                'menu-layout-horizontal': isHorizontal(),\n                'menu-layout-slim': isSlim(),\n                'layout-menu-static-inactive': staticMenuDesktopInactive,\n                'layout-menu-static-active': staticMenuMobileActive}\">\n\n  <png-ws-topbar></png-ws-topbar>\n\n  <div class=\"layout-menu-container\" [ngClass]=\"{'layout-menu-dark':darkMenu}\" (click)=\"onMenuClick($event)\">\n    <p-scrollPanel #layoutMenuScroller [style]=\"{height: '100%' }\">\n      <div class=\"menu-scroll-content\">\n        <png-ws-profile *ngIf=\"profileMode=='inline'&&!isHorizontal()\"></png-ws-profile>\n        <png-ws-main-menu [reset]=\"resetMenu\" [httpMenuTag]=\"httpMenuTag\"></png-ws-main-menu>\n      </div>\n    </p-scrollPanel>\n  </div>\n\n  <div class=\"layout-main\">\n    <ng-container *ngTemplateOutlet=\"template(templateNames.main)\"></ng-container>\n    <router-outlet></router-outlet>\n  </div>\n\n  <div class=\"layout-mask\"></div>\n\n  <png-ws-footer></png-ws-footer>\n\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PngAdminWorkSpaceComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ChangeDetectorRef }
];
PngAdminWorkSpaceComponent.propDecorators = {
    menuOrientation: [{ type: Input }],
    darkMenu: [{ type: Input }],
    appName: [{ type: Input }],
    appTitle: [{ type: Input }],
    appLogo: [{ type: Input }],
    httpMenuTag: [{ type: Input }],
    onInitMenu: [{ type: Output }],
    layoutMenuScrollerViewChild: [{ type: ViewChild, args: ['layoutMenuScroller',] }]
};
if (false) {
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.menuOrientation;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.darkMenu;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.appName;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.appTitle;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.appLogo;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.httpMenuTag;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.onInitMenu;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.profileMode;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.rotateMenuButton;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.topbarMenuActive;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.overlayMenuActive;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.staticMenuDesktopInactive;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.staticMenuMobileActive;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.layoutMenuScroller;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.menuClick;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.topbarItemClick;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.activeTopbarItem;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.resetMenu;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.menuHoverActive;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.rootMenuToggleStateName;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.layoutMenuScrollerViewChild;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.templateNames;
    /** @type {?} */
    PngAdminWorkSpaceComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PngAdminWorkSpaceComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,