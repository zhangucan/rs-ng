import { ImageToolsService } from '@er/image-editor';
import { DomSanitizer } from '@angular/platform-browser';
import { ConfirmationService, MessageService } from 'primeng/api';
import { simpleQueryStringQuery, rangeQuery, matchQuery } from 'elastic-builder';
import { ValidateUtils } from '@er/validate';
import { ActivatedRoute, Router, NavigationEnd } from '@angular/router';
import { DEFAULT_BUTTON_PROPS, ANIMATIONS } from '@er/presets';
import 'primeng/tree';
import { ToastModule } from 'primeng/toast';
import { TableModule } from 'primeng/table';
import { OverlayPanel, Dropdown, Menu, DomHandler, AccordionModule, AutoCompleteModule, BreadcrumbModule, ButtonModule, CalendarModule, CardModule, ChartModule, CheckboxModule, ChipsModule, ConfirmDialogModule, DialogModule, DropdownModule, EditorModule, FieldsetModule, FileUploadModule, InputMaskModule, InputSwitchModule, InputTextareaModule, InputTextModule, KeyFilterModule, LightboxModule, ListboxModule, MenuModule, MessagesModule, MultiSelectModule, OrganizationChartModule, OverlayPanelModule, PaginatorModule, PanelModule, RadioButtonModule, RatingModule, ScrollPanelModule, SelectButtonModule, SliderModule, SpinnerModule, SplitButtonModule, StepsModule, TabViewModule, ToggleButtonModule, TooltipModule, TreeModule } from 'primeng/primeng';
import { BehaviorSubject, Subject, of } from 'rxjs';
import { __extends, __assign, __spread, __values } from 'tslib';
import { NG_VALUE_ACCESSOR, ControlContainer, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { ChartType, StateNames, HttpMethod, NotifyLevel, HttpResponseType, NotifyType, UiPosition, DataAttr, DataType, AggMethodsProps, Order, OverlayType, EsQueryMethods, AggMethods } from '@er/types';
import { filter, map, takeUntil, skip, distinctUntilChanged } from 'rxjs/operators';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { Component, forwardRef, Input, ChangeDetectionStrategy, EventEmitter, Output, ChangeDetectorRef, ViewChild, ElementRef, Renderer2, HostListener, Optional, ContentChildren, NgModule, HostBinding, ViewChildren } from '@angular/core';
import { DataAwareControlWrapperComponent, WrapperComponent, BaseComponent, ControlWrapperComponent, ApiUtils, HttpUtils, LogUtils, DiUtils, DataFieldUtils, HTTP_TAG_STATE$, RouteBindComponent, SelectorDirective, ErCoreModule, AuthUtils, RouteUtils } from '@er/core';
import { CommonsUtils, DateUtils, ChartUtils, IdUtils, DataItemUtils, StatesUtils, ConfigUtils, DialogUtils, DomUtils, FormUtils, PinyinUtil, RegUtils, TreeUtils } from '@er/utils';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_PNG_AUTO_COMPLETE_PROPS = {
    minLength: 0,
    size: 10,
    dropdown: true,
    forceSelection: true,
    $ext: {
        apiDataProps: {
            dataPath: 'items',
            autoFetch: false
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngAutoCompleteComponent = /** @class */ (function (_super) {
    __extends(PngAutoCompleteComponent, _super);
    function PngAutoCompleteComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.valueParser = _this.parseValue;
        _this.$defaultProps = DEFAULT_PNG_AUTO_COMPLETE_PROPS;
        return _this;
    }
    /**
     * @return {?}
     */
    PngAutoCompleteComponent.prototype.onPropsInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.onPropsInit.call(this);
        /** @type {?} */
        var placeholder = '请输入';
        if (this.$props.$ext.apiDataProps) {
            if (!this.$props.$ext.apiDataProps.withPrefix &&
                !this.$props.$ext.apiDataProps.withTerm &&
                !this.$props.$ext.apiDataProps.withWildcard) {
                this.$props.$ext.apiDataProps.withPy = this.$props.$ext.apiDataProps.withPy || true;
                this.$props.$ext.apiDataProps.withZh = this.$props.$ext.apiDataProps.withZh || true;
            }
            if (!this.$props.placeholder) {
                if (this.$props.$ext.apiDataProps.withPy) {
                    placeholder += '拼音首字母，';
                }
                if (this.$props.$ext.apiDataProps.withZh) {
                    placeholder += '汉字关键字';
                }
                placeholder += '筛选';
                this.$props.placeholder = placeholder;
            }
        }
        if (this.$props.$ext.dataItemProps) {
            if (!this.$props.field && CommonsUtils.isString(this.$props.$ext.dataItemProps.labelKey)) {
                this.$props.field = (/** @type {?} */ (this.$props.$ext.dataItemProps.labelKey));
            }
            if (this.$props.$ext.dataItemProps.showCounter) {
                if (!this.$props.$ext.apiDataProps.aggProps) {
                    /** @type {?} */
                    var fields = this.$props.$ext.apiDataProps.returnFields;
                    this.$props.$ext.apiDataProps.aggProps = fields;
                }
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngAutoCompleteComponent.prototype.complete = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.apiDataProps = __assign({}, this.apiDataProps, { queryValue: event.query });
    };
    PngAutoCompleteComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-auto-complete',
                    template: "\n    <div class=\"inner-addon\">\n      <p-autoComplete\n        [(ngModel)]=\"value\"\n        erPropsBind\n        [props]=\"$props\"\n        [context]=\"ctx\"\n        [erApiData]=\"apiDataProps\"\n        (completeMethod)=\"complete($event)\"\n        [suggestions]=\"data$|async\"\n        (onBlur)=\"updateTouch()\"\n      >\n        <ng-template let-item pTemplate=\"item\">\n          <er-data-item [customerTpl]=\"template('_')\"\n                        [item]=\"item\"\n                        [props]=\"$props.$ext.dataItemProps\"\n          >\n          </er-data-item>\n        </ng-template>\n      </p-autoComplete>\n      <i *ngIf=\"value && resettable && !disabled\" title=\"\u6E05\u9664\u8F93\u5165\u5185\u5BB9\" class=\"fa fa-trash text-muted right\" [ngClass]=\"$props.dropdown? 'clear1': 'clear2'\" (click)=\"reset()\"></i>\n    </div>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngAutoCompleteComponent; }),
                            multi: true
                        }],
                    styles: [".clear1{right:22px!important}.clear2{right:2px!important}"]
                }] }
    ];
    return PngAutoCompleteComponent;
}(DataAwareControlWrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngButtonComponent = /** @class */ (function (_super) {
    __extends(PngButtonComponent, _super);
    function PngButtonComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PngButtonComponent.prototype, "isHidden", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.$props && this.$props.hidden) {
                return CommonsUtils.getValue(this.$props.hidden, this.outputContext) || false;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PngButtonComponent.prototype.onPropsInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var btnProps = CommonsUtils.copy(this.$props || {});
        if (btnProps.menu) {
            btnProps.menu.forEach(function (item) {
                if (item.command) {
                    /** @type {?} */
                    var command_1 = item.command;
                    item.command = function (event) { return _this.onMenuCommand(command_1, event); };
                }
            });
        }
        this.$props = __assign({}, DEFAULT_BUTTON_PROPS, btnProps);
    };
    /**
     * @param {?} command
     * @param {?} event
     * @return {?}
     */
    PngButtonComponent.prototype.onMenuCommand = /**
     * @param {?} command
     * @param {?} event
     * @return {?}
     */
    function (command, event) {
        command.call(this, __assign({}, event || {}, this.outputContext || {}));
    };
    /**
     * @param {?} state
     * @return {?}
     */
    PngButtonComponent.prototype.setState = /**
     * @param {?} state
     * @return {?}
     */
    function (state$$1) {
        this.icon = state$$1 ? 'fa fa-cog fa-spin' : this.$props['icon'];
    };
    PngButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-button',
                    template: "<ng-container *ngIf=\"!isHidden\">\n  <p-splitButton *ngIf=\"$props?.menu\"\n                 erPropsBind\n                 [props]=\"$props\"\n                 [context]=\"outputContext\"\n  >\n  </p-splitButton>\n  <p-button *ngIf=\"!$props?.menu\" [title]=\"$props?.title || ''\"\n            erPropsBind\n            [props]=\"$props\"\n            [context]=\"outputContext\"\n  >\n  </p-button>\n</ng-container>\n"
                }] }
    ];
    return PngButtonComponent;
}(WrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngButtonsComponent = /** @class */ (function (_super) {
    __extends(PngButtonsComponent, _super);
    function PngButtonsComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PngButtonsComponent.prototype, "hasOverlay", {
        get: /**
         * @return {?}
         */
        function () {
            return this.btns && this.btns.some(function (btn) { return !!btn.overlay; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @param {?} panel
     * @return {?}
     */
    PngButtonsComponent.prototype.toggle = /**
     * @param {?} event
     * @param {?} panel
     * @return {?}
     */
    function (event, panel) {
        panel.toggle(event);
    };
    PngButtonsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-buttons',
                    template: "<div [ngClass]=\"styleClass\" [ngStyle]=\"style\">\n  <ng-container *ngIf=\"btns\">\n    <div class=\"d-flex\">\n      <ng-container *ngFor=\"let btn of btns\">\n        <ng-container *ngIf=\"!btn.overlay\">\n          <png-button [outputContext]=\"context || btn.context\" [props]=\"btn\" class=\"mr-2 w-100\"\n                      erPropsBind></png-button>\n        </ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"hasOverlay\">\n        <button pButton title=\"\u66F4\u591A\u64CD\u4F5C...\" icon=\"fa fa-caret-down\"\n                (click)=\"toggle($event, buttonsOverlayPanel)\"></button>\n        <p-overlayPanel #buttonsOverlayPanel [dismissable]=\"true\" appendTo=\"body\">\n        <span *ngFor=\"let btn of btns\">\n          <ng-container *ngIf=\"btn.overlay\">\n           <png-button class=\"ml-2\" erPropsBind [props]=\"btn\" [outputContext]=\"context || btn.context\"></png-button>\n          </ng-container>\n        </span>\n        </p-overlayPanel>\n      </ng-container>\n    </div>\n  </ng-container>\n</div>\n"
                }] }
    ];
    PngButtonsComponent.propDecorators = {
        context: [{ type: Input }],
        btns: [{ type: Input }],
        style: [{ type: Input }],
        styleClass: [{ type: Input }]
    };
    return PngButtonsComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var CALENDAR_LOCAL_CN = {
    firstDayOfWeek: 0,
    dayNames: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
    dayNamesShort: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
    dayNamesMin: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
    monthNames: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
    monthNamesShort: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
    today: '今天',
    clear: '清除'
};
/** @type {?} */
var DEFAULT_CALENDAR_PROPS = {
    dateFormat: 'yy-mm-dd',
    hourFormat: '24',
    locale: CALENDAR_LOCAL_CN,
    monthNavigator: true,
    yearNavigator: true,
    showIcon: true,
    readonlyInput: false,
    yearRange: '2000:2030',
    showButtonBar: true
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngCalendarComponent = /** @class */ (function (_super) {
    __extends(PngCalendarComponent, _super);
    function PngCalendarComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.modelFormatter = _this.formatter;
        _this.today = DateUtils.getDay();
        _this.templateNames = {
            header: 'header',
            footer: 'footer',
            date: 'date'
        };
        _this.$defaultProps = DEFAULT_CALENDAR_PROPS;
        return _this;
    }
    /**
     * @param {?} model
     * @return {?}
     */
    PngCalendarComponent.prototype.formatter = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (model) {
            return DateUtils.toDate(model);
        }
    };
    PngCalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-calendar',
                    template: "\n    <p-calendar\n      [(ngModel)]=\"value\"\n      erPropsBind\n      [props]=\"$props\"\n      [context]=\"ctx\"\n      [monthNavigator]=\"$props.monthNavigator\"\n      [yearNavigator]=\"$props.yearNavigator\"\n      [yearRange]=\"$props.yearRange\"\n      (onBlur)=\"updateTouch()\"\n    >\n      <p-header *ngIf=\"template(templateNames.header)\">\n        <ng-container *ngTemplateOutlet=\"template(templateNames.header)\"></ng-container>\n      </p-header>\n\n      <p-footer *ngIf=\"template(templateNames.footer)\">\n        <ng-container *ngTemplateOutlet=\"template(templateNames.footer)\"></ng-container>\n      </p-footer>\n      \n      <ng-template pTemplate=\"date\" let-date>\n        <ng-container *ngTemplateOutlet=\"template(templateNames.date, dateTpl);context:{$implicit: date}\"></ng-container>\n      </ng-template>\n    </p-calendar>\n\n    <ng-template #dateTpl let-date>\n      <span [ngClass]=\"{'bg-red white': (date.day === today)}\"\n            style=\"border-radius:50%;\">{{date.day}}</span>\n    </ng-template>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngCalendarComponent; }),
                            multi: true
                        }]
                }] }
    ];
    return PngCalendarComponent;
}(ControlWrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngChartComponent = /** @class */ (function (_super) {
    __extends(PngChartComponent, _super);
    function PngChartComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = ChartType.BAR;
        _this.plugins = [];
        _this.responsive = true;
        _this.switchable = true;
        _this.templateNames = {
            header: 'header'
        };
        _this.onDataSelect = new EventEmitter();
        _this.data$ = new BehaviorSubject(undefined);
        _this.chartTypes = [
            { label: '柱状图', value: ChartType.BAR, icon: 'fa fa-bar-chart' },
            { label: '圆饼图', value: ChartType.PIE, icon: 'fa fa-pie-chart' },
            { label: '曲线图', value: ChartType.LINE, icon: 'fa fa-line-chart' },
            { label: '雷达图', value: ChartType.RADAR, icon: 'fa fa-bar' },
            { label: '区域图', value: ChartType.AREA, icon: 'fa fa-area-chart' },
            { label: '环形图', value: ChartType.DOUGHNUT, icon: 'fa fa-circle' }
        ];
        return _this;
    }
    Object.defineProperty(PngChartComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this.data$.value;
        },
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this.data$.next(data || {});
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    PngChartComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.rawData = undefined;
        this.buildChart();
    };
    /**
     * @return {?}
     */
    PngChartComponent.prototype.changeType = /**
     * @return {?}
     */
    function () {
        this.buildChart();
    };
    /**
     * @return {?}
     */
    PngChartComponent.prototype.reBuildChart = /**
     * @return {?}
     */
    function () {
        this.rawData = undefined;
        this.buildChart();
    };
    /**
     * @return {?}
     */
    PngChartComponent.prototype.buildChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.$id) {
            this.$id = IdUtils.getRandom();
        }
        if (this.rawData) {
            this.resolvedRawData(this.rawData);
        }
        else if (this.dataSource) {
            /** @type {?} */
            var ds = this.dataSource;
            if (!ds.hasOwnProperty('apiDataProps')) {
                /** @type {?} */
                var apiDataProps = ds;
                ds = {};
                ds['apiDataProps'] = apiDataProps;
            }
            if (this.resolveDataSource) {
                ds = this.resolveDataSource.method((/** @type {?} */ (ds)));
            }
            ApiUtils.batchFetch(ds, this.$id)
                .subscribe(function (data) {
                _this.rawData = data;
                _this.resolvedRawData(_this.rawData);
            });
        }
    };
    /**
     * @param {?} rawData
     * @return {?}
     */
    PngChartComponent.prototype.resolvedRawData = /**
     * @param {?} rawData
     * @return {?}
     */
    function (rawData) {
        var _this = this;
        if (!CommonsUtils.isEmpty(rawData)) {
            /** @type {?} */
            var data = void 0;
            /** @type {?} */
            var datasets_1 = [];
            /** @type {?} */
            var labels_1 = [];
            if (CommonsUtils.isFunction(this.dimensions)) {
                data = ((/** @type {?} */ (this.dimensions)))(rawData);
            }
            else {
                if (this.dimensions) {
                    /** @type {?} */
                    var dimensions = CommonsUtils.getArrayValue(this.dimensions);
                    dimensions.forEach(function (dimension, index) {
                        if (_this.resolveDimension) {
                            dimension = _this.resolveDimension.method(dimension);
                        }
                        /** @type {?} */
                        var chartData = ChartUtils.buildChartData(rawData, {
                            type: _this.type,
                            dimension: dimension,
                            dataItemProps: _this.dataItemProps
                        }, index);
                        datasets_1.push.apply(datasets_1, __spread(chartData.datasets));
                        if (labels_1.length === 0) {
                            labels_1 = chartData.labels;
                        }
                    });
                    data = { labels: labels_1, datasets: datasets_1 };
                }
                else {
                    data = ChartUtils.buildChartData(rawData, {
                        type: this.type,
                        dataItemProps: this.dataItemProps
                    });
                }
            }
            this.data = data;
        }
        else {
            this.data = {};
        }
    };
    PngChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-chart',
                    template: "\n    <p-panel [toggleable]=\"true\" [showHeader]=\"!!caption\">\n      <p-header>\n        <i [ngClass]=\"captionIcon || 'fa fa-bar-chart'\"></i>\n        <span [innerHTML]=\"caption|erSafeHtml\"></span>\n        <ng-container *ngTemplateOutlet=\"templates[templateNames.header]\"></ng-container>\n      </p-header>\n      <er-http-status class=\"mr-2\" [tag]=\"$id\"></er-http-status>\n      <div class=\"p-3\" *ngIf=\"switchable\">\n        <p-selectButton erPosition=\"center\" [options]=\"chartTypes\" [(ngModel)]=\"type\" (onChange)=\"changeType()\"></p-selectButton>\n      </div>\n      <p-chart\n        [type]=\"type\"\n        [options]=\"options\"\n        [data]=\"data$|async\"\n        [plugins]=\"plugins\"\n        [width]=\"width \"\n        [height]=\"height\"\n        [responsive]=\"responsive\"\n        (onDataSelect)=\"onDataSelect.emit($event)\"\n      >\n      </p-chart>\n    </p-panel>\n\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    PngChartComponent.propDecorators = {
        $id: [{ type: Input }],
        type: [{ type: Input }],
        rawData: [{ type: Input }],
        options: [{ type: Input }],
        caption: [{ type: Input }],
        captionIcon: [{ type: Input }],
        query: [{ type: Input }],
        plugins: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        responsive: [{ type: Input }],
        switchable: [{ type: Input }],
        dataSource: [{ type: Input }],
        dataItemProps: [{ type: Input }],
        dimensions: [{ type: Input }],
        resolveDataSource: [{ type: Input }],
        resolveDimension: [{ type: Input }],
        onDataSelect: [{ type: Output }],
        data: [{ type: Input }]
    };
    return PngChartComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_CHECK_BOX_PROPS = {
    $ext: {
        inline: true
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngCheckBoxComponent = /** @class */ (function (_super) {
    __extends(PngCheckBoxComponent, _super);
    function PngCheckBoxComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.valueParser = _this.parseValue;
        _this.modelFormatter = _this.formatModel;
        _this.$defaultProps = DEFAULT_CHECK_BOX_PROPS;
        return _this;
    }
    Object.defineProperty(PngCheckBoxComponent.prototype, "chkValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._chkValue;
        },
        set: /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            var _this = this;
            this._chkValue = values;
            /** @type {?} */
            var data = this.data$.value;
            if (CommonsUtils.isArray(data)) {
                /** @type {?} */
                var objectValues_1 = [];
                values.forEach(function (value) {
                    /** @type {?} */
                    var matched = ((/** @type {?} */ (data))).filter(function (v) { return v[_this.dataKey] === value; });
                    if (matched.length === 1) {
                        objectValues_1.push(DataItemUtils.getItemValue(matched[0], _this.valueKey));
                    }
                });
                this.value = objectValues_1.length > 0 ? objectValues_1 : null;
            }
            else {
                this.value = values;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngCheckBoxComponent.prototype, "dataKey", {
        get: /**
         * @return {?}
         */
        function () {
            return CommonsUtils.get(this.$props, '$ext.dataItemProps.idKey', 'value');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngCheckBoxComponent.prototype, "valueKey", {
        get: /**
         * @return {?}
         */
        function () {
            return CommonsUtils.get(this.$props, '$ext.dataItemProps.valueKey', 'value');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} model
     * @return {?}
     */
    PngCheckBoxComponent.prototype.formatModel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        var _this = this;
        if (this.$props && !this.$props.label && model) {
            /** @type {?} */
            var models = CommonsUtils.getArrayValue(model);
            this._chkValue = [];
            models.forEach(function (m) {
                if (CommonsUtils.isJson(m)) {
                    _this._chkValue.push(DataItemUtils.getItemValue(m, _this.dataKey));
                }
                else {
                    _this._chkValue.push(m);
                }
            });
            return models;
        }
        else {
            return model;
        }
    };
    PngCheckBoxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-check-box',
                    template: "\n    <ng-container *ngIf=\"$props.label;else multiTpl\">\n      <p-checkbox\n        class=\"m-2\"\n        [(ngModel)]=\"value\"\n        erPropsBind\n        [props]=\"$props\"\n        [context]=\"ctx\"\n        binary=\"true\"\n        (onChange)=\"updateTouch()\"\n      >\n      </p-checkbox>\n    </ng-container>\n    <ng-template #multiTpl>\n      <div class=\"d-flex pb-2\"\n           [ngClass]=\"$props.$ext['inline']===false?'flex-column':'flex-wrap'\"\n           [erApiData]=\"apiDataProps\"\n      >\n        <ng-container *ngFor=\"let option of data$|async|erDataItems:$props.$ext.dataItemProps;let i=index\">\n          <span class=\"d-flex align-items-center\">\n             <p-checkbox\n               class=\"m-2\"\n               [(ngModel)]=\"chkValue\"\n               [attr.index]=\"i\"\n               erPropsBind\n               [props]=\"$props\"\n               [context]=\"ctx\"\n               [value]=\"option.data|erValue:dataKey\"\n               (onChange)=\"updateTouch()\"\n             >\n             </p-checkbox>\n             <span class=\"mr-4\" [innerHTML]=\"option.label|erSafeHtml\"></span>\n          </span>\n        </ng-container>\n      </div>\n    </ng-template>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngCheckBoxComponent; }),
                            multi: true
                        }]
                }] }
    ];
    return PngCheckBoxComponent;
}(DataAwareControlWrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_CONFIRM_DIALOG_PROPS = {
    width: 300,
    closeOnEscape: true,
    rtl: false,
    closable: true,
    responsive: true,
    header: '操作确认',
    icon: 'fa fa-question-circle-o text-danger',
    acceptLabel: '确定',
    acceptIcon: 'fa-check text-success',
    acceptVisible: true,
    rejectLabel: '取消',
    rejectIcon: 'fa-close text-danger',
    rejectVisible: true
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngConfirmDialogComponent = /** @class */ (function (_super) {
    __extends(PngConfirmDialogComponent, _super);
    function PngConfirmDialogComponent(confirmationService, cd) {
        var _this = _super.call(this) || this;
        _this.confirmationService = confirmationService;
        _this.cd = cd;
        _this.options = {};
        _this.onAccept = new EventEmitter();
        _this.onReject = new EventEmitter();
        _this.dlgOptions = {};
        return _this;
    }
    /**
     * @return {?}
     */
    PngConfirmDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dlgOptions = __assign({}, DEFAULT_CONFIRM_DIALOG_PROPS, { header: this.header, content: this.content, acceptEvent: this.onAccept, rejectEvent: this.onReject }, this.options);
        this.$subscriptions = StatesUtils.observe(StateNames.confirm)
            .pipe(filter(function (state$$1) { return state$$1 && state$$1.open; }))
            .subscribe(function (state$$1) {
            _this.open(state$$1);
        });
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    PngConfirmDialogComponent.prototype.open = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options) {
            this.dlgOptions = __assign({}, DEFAULT_CONFIRM_DIALOG_PROPS, options);
        }
        this.confirmationService.confirm(this.getConfirmation(this.dlgOptions));
        this.cd.detectChanges();
    };
    /**
     * @param {?} modal
     * @return {?}
     */
    PngConfirmDialogComponent.prototype.getConfirmation = /**
     * @param {?} modal
     * @return {?}
     */
    function (modal) {
        return {
            message: modal.content,
            icon: modal.icon,
            header: modal.header,
            acceptVisible: modal.acceptVisible,
            rejectVisible: modal.rejectVisible,
            acceptLabel: modal.acceptLabel,
            rejectLabel: modal.rejectLabel,
            accept: this.accept.bind(this),
            reject: this.reject.bind(this)
        };
    };
    /**
     * @return {?}
     */
    PngConfirmDialogComponent.prototype.accept = /**
     * @return {?}
     */
    function () {
        this.onAccept.emit();
        if (this.dlgOptions.onAccept) {
            this.dlgOptions.onAccept.call(this.dlgOptions.context, true);
        }
        StatesUtils.create(StateNames.confirm, {
            open: false,
            accept: true,
            reject: false
        });
    };
    /**
     * @return {?}
     */
    PngConfirmDialogComponent.prototype.reject = /**
     * @return {?}
     */
    function () {
        this.onReject.emit();
        if (this.options.onReject) {
            this.options.onReject.call(this.options.context, false);
        }
        StatesUtils.create(StateNames.confirm, {
            open: false,
            accept: false,
            reject: true
        });
    };
    PngConfirmDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-confirm-dialog',
                    template: "\n    <p-confirmDialog #dlg>\n      <p-footer>\n        <button type=\"button\" class=\"ui-button-rounded ui-button-success\" *ngIf=\"dlgOptions.acceptVisible\" pButton icon=\"pi pi-check\"\n                [label]=\"dlgOptions.acceptLabel\"\n                (click)=\"dlg.accept()\"></button>\n        <button type=\"button\" class=\"ui-button-rounded ui-button-danger\" *ngIf=\"dlgOptions.rejectVisible\" pButton icon=\"pi pi-times\"\n                [label]=\"dlgOptions.rejectLabel\"\n                (click)=\"dlg.reject()\"></button>\n      </p-footer>\n    </p-confirmDialog>",
                    providers: [ConfirmationService],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PngConfirmDialogComponent.ctorParameters = function () { return [
        { type: ConfirmationService },
        { type: ChangeDetectorRef }
    ]; };
    PngConfirmDialogComponent.propDecorators = {
        header: [{ type: Input }],
        content: [{ type: Input }],
        options: [{ type: Input }],
        onAccept: [{ type: Output }],
        onReject: [{ type: Output }]
    };
    return PngConfirmDialogComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_PNG_FILE_UPLOAD_PROPS = (/** @type {?} */ ({
    accept: 'image/*',
    name: 'files',
    files: [],
    multiple: false,
    previewWidth: 50,
    invalidFileSizeMessageSummary: '"{0}: 文件大小无效, "',
    invalidFileSizeMessageDetail: '"最大上传文件大小 {0}."',
    invalidFileTypeMessageSummary: '"{0}: 无效的文件类型, "',
    invalidFileTypeMessageDetail: '"可上传的文件类型: {0}."',
    chooseLabel: '选择',
    uploadLabel: '上传',
    cancelLabel: '取消',
    $ext: {
        attrsName: 'attrs',
        waterMark: '公司名称',
        maxSize: 0.5,
        maxHeight: 200,
        maxWidth: 300,
        smallSize: 50,
        storeTo: 'db'
    }
}));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngFileUploadComponent = /** @class */ (function (_super) {
    __extends(PngFileUploadComponent, _super);
    function PngFileUploadComponent(imageToolsService, sanitizer, cd) {
        var _this = _super.call(this) || this;
        _this.imageToolsService = imageToolsService;
        _this.sanitizer = sanitizer;
        _this.cd = cd;
        _this.selectedFiles$ = new BehaviorSubject([]);
        _this.uploadedFiles = [];
        _this.$defaultProps = DEFAULT_PNG_FILE_UPLOAD_PROPS;
        _this.showUpload = true;
        _this.uploadProgress$ = new Subject();
        _this.processing$ = new Subject();
        _this.fileAttrs = {};
        return _this;
    }
    Object.defineProperty(PngFileUploadComponent.prototype, "uploadValue", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.value) {
                return this.value;
            }
            return CommonsUtils.getArrayValue(this.value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} file
     * @return {?}
     */
    PngFileUploadComponent.prototype.fileIcon = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var ext = (this.fileUpload.getFileExtension(file) || '').toLowerCase();
        ext = ext.substring(1, 4);
        /** @type {?} */
        var exts = ['txt', 'doc', 'xls', '.pdf', '.zip'];
        /** @type {?} */
        var icon;
        switch (ext) {
            case 'txt':
                icon = 'text';
                break;
            case 'xls':
                icon = 'excel';
                break;
            case 'doc':
                icon = 'word';
                break;
            case 'zip':
                icon = 'zip';
                break;
            case 'pdf':
                icon = 'pdf';
                break;
            case 'mp3':
                icon = 'audio';
                break;
            case 'mp4':
                icon = 'video';
                break;
            default:
                icon = exts.indexOf(ext) >= 0 ? ext : undefined;
        }
        return icon ? "file-" + icon + "-o" : 'file-o';
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PngFileUploadComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @param {?} model
     * @return {?}
     */
    PngFileUploadComponent.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        _super.prototype.writeValue.call(this, model);
        this.showUpload = !((model && this.$props && !this.$props.multiple));
        this.cd.detectChanges();
    };
    /**
     * @return {?}
     */
    PngFileUploadComponent.prototype.onPropsInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.onPropsInit.call(this);
        if (!this.$props.url) {
            this.$props.url = "" + ConfigUtils.getConfig().api.servers.image.uri;
            LogUtils.debug(this, '文件上传路径', this.$props.url);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngFileUploadComponent.prototype.onSelect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var files = event.files;
        var _loop_1 = function (i) {
            /** @type {?} */
            var file = files[i];
            this_1.processing$.next(true);
            this_1.imageToolsService.resizeImage(file, this_1.$props.$ext.maxWidth, this_1.$props.$ext.maxHeight).subscribe(function (result) {
                _this.imageToolsService.compressImage(result, _this.$props.$ext.maxSize).subscribe(function (final) {
                    final['objectURL'] = _this.sanitizer.bypassSecurityTrustUrl((URL.createObjectURL(final)));
                    _this.selectedFiles$.next(_this.selectedFiles$.value.concat(final));
                    _this.processing$.next(false);
                    _this.fileUpload.files = _this.fileUpload.files.map(function (f) { return f.name === file.name ? final : f; });
                });
            });
        };
        var this_1 = this;
        for (var i = 0; i < files.length; i++) {
            _loop_1(i);
        }
    };
    /**
     * @param {?} event
     * @param {?} i
     * @return {?}
     */
    PngFileUploadComponent.prototype.delete = /**
     * @param {?} event
     * @param {?} i
     * @return {?}
     */
    function (event, i) {
        /** @type {?} */
        var files = this.selectedFiles$.value;
        files.splice(i, 1);
        this.selectedFiles$.next(files);
        this.fileUpload.remove(event, i);
    };
    /**
     * @param {?} fileId
     * @return {?}
     */
    PngFileUploadComponent.prototype.remove = /**
     * @param {?} fileId
     * @return {?}
     */
    function (fileId) {
        var _this = this;
        this.$subscriptions = HttpUtils.request({
            uri: ConfigUtils.getConfig().api.servers.image.uri + "/" + fileId,
            method: HttpMethod.DELETE
        }).subscribe(function (resp) {
            if (resp && resp.success) {
                if (_this.$props.multiple) {
                    _this.value = _this.value.filter(function (v) { return v !== fileId; });
                }
                else {
                    _this.value = undefined;
                }
                _this.showUpload = true;
                _this.cd.detectChanges();
            }
        });
    };
    /**
     * @param {?} event
     * @param {?} file
     * @return {?}
     */
    PngFileUploadComponent.prototype.setFileAttr = /**
     * @param {?} event
     * @param {?} file
     * @return {?}
     */
    function (event, file) {
        this.fileAttrs[file.name] = event.target.value;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngFileUploadComponent.prototype.onBeforeSend = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var formData = event.formData;
        formData.append(this.$props.$ext.attrsName, "waterMark=" + this.$props.$ext.waterMark);
        formData.append(this.$props.$ext.attrsName, "smallSize=" + this.$props.$ext.smallSize);
        formData.append(this.$props.$ext.attrsName, "storeTo=" + this.$props.$ext.storeTo);
        if (!CommonsUtils.isEmpty(this.fileAttrs)) {
            Object.keys(this.fileAttrs).forEach(function (key) {
                formData.append(_this.$props.$ext.attrsName, key + "=" + _this.fileAttrs[key]);
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngFileUploadComponent.prototype.onProgress = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.uploadProgress$.next(event.progress);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngFileUploadComponent.prototype.onUploadSuccess = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var e_1, _a;
        try {
            for (var _b = __values(event.files), _c = _b.next(); !_c.done; _c = _b.next()) {
                var file = _c.value;
                this.uploadedFiles.push(file);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        /** @type {?} */
        var response = JSON.parse(event.xhr.responseText);
        if (response.success) {
            StatesUtils.create(StateNames.notify, {
                message: '文件上传成功',
                title: '提示'
            });
            if (this.$props.multiple) {
                this.value = __spread(this.value || [], Object.keys(response.content).map(function (k) { return response.content[k]; }));
            }
            else {
                this.value = Object.keys(response.content).map(function (k) { return response.content[k]; })[0];
                this.showUpload = false;
            }
            this.fileAttrs = {};
            this.selectedFiles$.next([]);
            this.uploadProgress$.next(undefined);
            this.cd.detectChanges();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngFileUploadComponent.prototype.onUploadFailed = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var response = JSON.parse(event.xhr.responseText);
        StatesUtils.create(StateNames.notify, {
            level: NotifyLevel.ERROR,
            message: response.message,
            title: '文件上传失败'
        });
        this.uploadProgress$.next(undefined);
    };
    PngFileUploadComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-file-upload',
                    template: "\n    <ng-container *ngIf=\"showUpload\">\n      <p-fileUpload\n        #fileUpload\n        erPropsBind\n        [props]=\"$props || {}\"\n        [context]=\"ctx\"\n        (onSelect)=\"onSelect($event)\"\n        (onUpload)=\"onUploadSuccess($event)\"\n        (onError)=\"onUploadFailed($event)\"\n        (onProgress)=\"onProgress($event)\"\n        (onBeforeSend)=\"onBeforeSend($event)\"\n      >\n        <ng-template pTemplate=\"toolbar\">\n          <div *ngIf=\"uploadProgress$|async as uploadProgress\">\n            <p-progressBar [value]=\"uploadProgress\"></p-progressBar>\n          </div>\n        </ng-template>\n        <ng-template pTemplate=\"file\"></ng-template>\n        <ng-template pTemplate=\"content\">\n          <span class=\"text-muted small\" *ngIf=\"!fileUpload.hasFiles()\">\u60A8\u4E5F\u53EF\u4EE5\u62D6\u52A8\u6587\u4EF6\u5230\u8FD9\u91CC</span>\n        </ng-template>\n      </p-fileUpload>\n      <div *ngIf=\"processing$|async\"><i class=\"fa fa-spin fa-gears\"></i>\u6B63\u5728\u5904\u7406\u56FE\u7247</div>\n      <div class=\"ui-fileupload-row\" *ngFor=\"let file of selectedFiles$|async; let i = index\">\n      <div>\n        <span class=\"badge badge-info\">{{i + 1}}</span>\n      </div>\n      <div>\n        <png-image *ngIf=\"fileUpload.isImage(file)\"\n                   [src]=\"file['objectURL']\" [imageStyle]=\"{width: $props.previewWidth + 'px'}\">\n        </png-image>\n        <span *ngIf=\"!fileUpload.isImage(file)\" class=\"fa fa-2x text-primary fa-{{fileIcon(file)}}\"></span>\n      </div>\n      <div>{{file.name}}</div>\n      <div>{{fileUpload.formatSize(file.size)}}<span class=\"text-danger\">(\u538B\u7F29\u540E)</span></div>\n      <div>\n        <input pInputText placeholder=\"\u56FE\u7247\u63CF\u8FF0\u4FE1\u606F\" size=\"50\" (change)=\"setFileAttr($event,file)\"/>\n      </div>\n      <div>\n        <button type=\"button\" icon=\"pi pi-times white\" pButton (click)=\"delete($event,i)\"></button>\n      </div>\n    </div>\n    </ng-container>\n\n    <div *ngIf=\"uploadValue && uploadValue.length>0\">\n      <div style=\"text-decoration: underline;font-weight: bold\">\u5DF2\u4E0A\u4F20\u6587\u4EF6\uFF1A</div>\n      <div class=\"ui-fileupload-row\" *ngFor=\"let fileId of uploadValue\">\n        <div>\n          <png-image [fileId]=\"fileId\" size=\"small\"\n                     styleClass=\"d-flex align-items-center\"\n                     imageStyleClass=\"mr-3\"\n                     [imageStyle]=\"{width:$props.previewWidth}\">\n          </png-image>\n        </div>\n        <div>\n          <button type=\"button\" icon=\"pi pi-times white\" pButton (click)=\"remove(fileId)\"></button>\n        </div>\n      </div>\n    </div>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngFileUploadComponent; }),
                            multi: true
                        }]
                }] }
    ];
    /** @nocollapse */
    PngFileUploadComponent.ctorParameters = function () { return [
        { type: ImageToolsService },
        { type: DomSanitizer },
        { type: ChangeDetectorRef }
    ]; };
    PngFileUploadComponent.propDecorators = {
        maxSize: [{ type: Input }],
        fileUpload: [{ type: ViewChild, args: ['fileUpload',] }]
    };
    return PngFileUploadComponent;
}(ControlWrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngImageComponent = /** @class */ (function (_super) {
    __extends(PngImageComponent, _super);
    function PngImageComponent(cd, sanitizer) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.sanitizer = sanitizer;
        _this.imageViewStyle = { 'max-height': '300px', 'max-width': '500px', 'overflow': 'auto' };
        _this.showDescription = true;
        _this.descriptionChange = new EventEmitter();
        return _this;
    }
    Object.defineProperty(PngImageComponent.prototype, "description", {
        get: /**
         * @return {?}
         */
        function () {
            return this._description;
        },
        set: /**
         * @param {?} description
         * @return {?}
         */
        function (description) {
            this._description = description;
            this.descriptionChange.emit(description);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    PngImageComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.src) {
            if (CommonsUtils.isArray(this.src)) {
                if (this.src.length === 1) {
                    this.images = undefined;
                    this.image = this.src[0];
                    this.fullImage = this.src[0];
                }
                else {
                    this.images = [];
                    this.image = this.src[0];
                    this.fullImage = this.src[0];
                    ((/** @type {?} */ (this.src))).forEach(function (image) {
                        if (CommonsUtils.isString(image)) {
                            _this.images.push({ source: image });
                        }
                        else {
                            _this.images.push(image);
                        }
                    });
                }
            }
            else {
                this.images = undefined;
                this.image = this.src;
                this.fullImage = this.src;
            }
        }
        if (changes.fileId) {
            /** @type {?} */
            var fileId_1;
            if (!this.fileId) {
                this.images = undefined;
                this.image = null;
            }
            else {
                if (CommonsUtils.isArray(this.fileId)) {
                    if (this.fileId.length === 0) {
                        this.images = undefined;
                        this.image = null;
                        return;
                    }
                    else {
                        fileId_1 = this.fileId[0];
                    }
                }
                else {
                    fileId_1 = this.fileId;
                }
                HttpUtils.request({
                    uri: ConfigUtils.getConfig().api.servers['image'].uri + "/" + fileId_1 + (this.size ? '?' + this.size : ''),
                    observe: 'events',
                    responseType: HttpResponseType.BLOB
                }).subscribe(function (response) {
                    /** @type {?} */
                    var objectURL = _this.sanitizer.bypassSecurityTrustUrl((window.URL.createObjectURL(response.body)));
                    _this.images = undefined;
                    _this.image = objectURL;
                    _this.fullImage = ConfigUtils.getConfig().api.servers['image'].uri + "/" + fileId_1;
                    /** @type {?} */
                    var descriptions = response.headers.getAll('description');
                    if (descriptions && descriptions.length > 0) {
                        _this.description = descriptions[0];
                    }
                    _this.cd.detectChanges();
                });
            }
        }
    };
    /**
     * @return {?}
     */
    PngImageComponent.prototype.viewImage = /**
     * @return {?}
     */
    function () {
        if (this.images) {
            this.imageViewer.show();
            this.imageViewer.center();
        }
        else if (this.image) {
            DialogUtils.info('图片预览', this.imageViewTpl, (/** @type {?} */ ({})));
        }
    };
    PngImageComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-image',
                    template: "\n    <div [ngClass]=\"styleClass\" [ngStyle]=\"style\">\n      <img *ngIf=\"image\"\n           style=\"margin: 5px\"\n           [src]=\"image\"\n           [ngClass]=\"imageStyleClass\"\n           [ngStyle]=\"imageStyle\"\n           [title]=\"description || ''\"\n           (click)=\"viewImage()\"/>\n      <div *ngIf=\"showDescription\" [ngClass]=\"descriptionStyleClass\" [ngStyle]=\"descriptionStyle\">\n        {{description}}\n      </div>\n    </div>\n    <ng-template #imageView>\n      <img [src]=\"fullImage\" [ngStyle]=\"imageViewStyle\" [ngClass]=\"imageViewStyleClass\"/>\n    </ng-template>\n    <ng-template #imagesView>\n      <p-lightbox [images]=\"images\" [styleClass]=\"boxStyleClass\" [style]=\"boxStyle\"></p-lightbox>\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngImageComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: DomSanitizer }
    ]; };
    PngImageComponent.propDecorators = {
        src: [{ type: Input }],
        styleClass: [{ type: Input }],
        style: [{ type: Input }],
        imageStyleClass: [{ type: Input }],
        imageStyle: [{ type: Input }],
        descriptionStyleClass: [{ type: Input }],
        descriptionStyle: [{ type: Input }],
        boxStyleClass: [{ type: Input }],
        boxStyle: [{ type: Input }],
        imageViewStyleClass: [{ type: Input }],
        imageViewStyle: [{ type: Input }],
        showDescription: [{ type: Input }],
        size: [{ type: Input }],
        fileId: [{ type: Input }],
        imageViewTpl: [{ type: ViewChild, args: ['imageView',] }],
        imageViewer: [{ type: ViewChild, args: ['imagesView',] }],
        descriptionChange: [{ type: Output }]
    };
    return PngImageComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngInputComponent = /** @class */ (function (_super) {
    __extends(PngInputComponent, _super);
    function PngInputComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PngInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-input',
                    template: "\n    <div class=\"ui-inputgroup\">\n      <ng-container *ngIf=\"attrs?.$ext?.preIcon || attrs?.$ext?.preText\">\n        <span class=\"ui-inputgroup-addon\"><i [ngClass]=\"attrs?.$ext?.preIcon\"></i>{{attrs?.$ext?.preText}}</span>\n      </ng-container>\n      <png-buttons *ngIf=\"attrs?.$ext?.preButtons\" [btns]=\"attrs.$ext.preButtons\" [context]=\"ctx\"></png-buttons>\n      <ng-container *ngIf=\"attrs?.$ext?.floatLabel;else inputTpl\">\n       <span class=\"ui-float-label\">\n         <ng-container *ngTemplateOutlet=\"inputTpl\"></ng-container>\n         <label style=\"font-weight: bold;\">{{attrs?.$ext.label}}</label>\n       </span>\n      </ng-container>\n      <ng-template #inputTpl>\n        <span class=\"w-100 inner-addon\">\n          <input pInputText\n                 [(ngModel)]=\"value\"\n                 type=\"{{attrs?.type || 'text'}}\"\n                 erPropsBind\n                 [attrs]=\"attrs\"\n                 [context]=\"ctx\"\n                 [pKeyFilter]=\"attrs?.$ext?.inputRule || 'alphanum'\"\n                 (blur)=\"updateTouch()\"/>\n          <i *ngIf=\"value && !disabled && resettable\" title=\"\u6E05\u9664\u8F93\u5165\u5185\u5BB9\" class=\"fa fa-trash gray right\" (click)=\"reset()\"></i>\n       </span>\n      </ng-template>\n      <ng-container *ngIf=\"attrs?.$ext?.postIcon || attrs?.$ext?.postText\">\n        <span class=\"ui-inputgroup-addon\"><i [ngClass]=\"attrs?.$ext?.postIcon\"></i>{{attrs?.$ext?.postText}}</span>\n      </ng-container>\n      <png-buttons *ngIf=\"attrs?.$ext?.postButtons\" [btns]=\"attrs.$ext.postButtons\" [context]=\"ctx\"></png-buttons>\n    </div>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngInputComponent; }),
                            multi: true
                        }],
                    styles: ["\n    .ui-float-label {\n      width: 100%\n    }\n\n    .ui-float-label > label {\n      font-size: 1em;\n      color: inherit\n    }\n  "]
                }] }
    ];
    PngInputComponent.propDecorators = {
        attrs: [{ type: Input }]
    };
    return PngInputComponent;
}(ControlWrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_PNG_LIST_BOX_PROPS = {
    optionLabel: 'label',
    checkbox: true,
    multiple: true,
    showToggleAll: true,
    $ext: {
        dataItemProps: {
            itemStyleClass: 'd-inline-flex ml-2'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngListBoxComponent = /** @class */ (function (_super) {
    __extends(PngListBoxComponent, _super);
    function PngListBoxComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.templateNames = {
            header: 'header',
            footer: 'footer',
            item: 'item'
        };
        _this.$defaultProps = DEFAULT_PNG_LIST_BOX_PROPS;
        return _this;
    }
    PngListBoxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-list-box',
                    template: "\n    <p-listbox\n      [(ngModel)]=\"value\"\n      erPropsBind\n      [props]=\"$props\"\n      [context]=\"ctx\"\n      [erApiData]=\"apiDataProps\"\n      [options]=\"data$|async\"\n      (onChange)=\"updateTouch()\"\n    >\n      <p-header *ngIf=\"template(templateNames.header)\">\n        <ng-container *ngTemplateOutlet=\"template(templateNames.header)\"></ng-container>\n      </p-header>\n\n      <p-header *ngIf=\"header\">\n        <div [innerHTML]=\"header\"></div>\n      </p-header>\n\n      <p-footer *ngIf=\"template(templateNames.footer)\">\n        <ng-container *ngTemplateOutlet=\"template(templateNames.footer)\"></ng-container>\n      </p-footer>\n\n      <p-footer *ngIf=\"$props.$ext['showValue'] || footer\">\n        <ng-container *ngIf=\"$props.$ext['showValue']\">\n          \u9009\u4E2D\u503C\uFF1A{{value | erValue: $props.$ext['field']}}\n        </ng-container>\n        <ng-container *ngIf=\"footer\">\n          <div [innerHTML]=\"footer\"></div>\n        </ng-container>\n      </p-footer>\n\n      <ng-template let-item let-i=\"index\" pTemplate=\"item\">\n        <er-data-item [customerTpl]=\"template(templateNames.item)\"\n                      [item]=\"item.value\"\n                      [props]=\"$props.$ext.dataItemProps\">\n        </er-data-item>\n      </ng-template>\n    </p-listbox>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngListBoxComponent; }),
                            multi: true
                        }]
                }] }
    ];
    PngListBoxComponent.propDecorators = {
        header: [{ type: Input }],
        footer: [{ type: Input }]
    };
    return PngListBoxComponent;
}(DataAwareControlWrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_PNG_MULTI_SELECT_PROPS = {
    defaultLabel: '请选择',
    selectedItemsLabel: '选中{0} 项',
    filter: false,
    showToggleAll: true,
    $ext: {
        dataItemProps: {
            itemStyleClass: 'd-inline-flex ml-2'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngMultiSelectComponent = /** @class */ (function (_super) {
    __extends(PngMultiSelectComponent, _super);
    function PngMultiSelectComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.$defaultProps = DEFAULT_PNG_MULTI_SELECT_PROPS;
        return _this;
    }
    PngMultiSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-multi-select',
                    template: "\n    <p-multiSelect\n      [(ngModel)]=\"value\"\n      erPropsBind\n      [props]=\"$props\"\n      [context]=\"ctx\"\n      [erApiData]=\"apiDataProps\"\n      [options]=\"data$|async|erDataItems:$props.$ext.dataItemProps\"\n      (onBlur)=\"updateTouch()\"\n    >\n      <ng-template let-item pTemplate=\"item\">\n        <er-data-item [customerTpl]=\"template('_')\"\n                         [item]=\"item.data\"\n                         [props]=\"$props.$ext.dataItemProps\">\n        </er-data-item>\n      </ng-template>\n    </p-multiSelect>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngMultiSelectComponent; }),
                            multi: true
                        }]
                }] }
    ];
    return PngMultiSelectComponent;
}(DataAwareControlWrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_ALERT_PROPS = {
    animation: true,
    duration: 3000,
    immutable: true,
    closable: true,
    autoZIndex: true,
    position: UiPosition.rightTop
};
var PngAlertComponent = /** @class */ (function (_super) {
    __extends(PngAlertComponent, _super);
    function PngAlertComponent(messageService, cd) {
        var _this = _super.call(this) || this;
        _this.messageService = messageService;
        _this.cd = cd;
        _this.alert = __assign({}, DEFAULT_ALERT_PROPS, ConfigUtils.getConfig().alert || {});
        _this.defaultNotifyType = ConfigUtils.getConfig().notify || NotifyType.ALERT;
        return _this;
    }
    /**
     * @return {?}
     */
    PngAlertComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.$subscriptions = StatesUtils.observe(StateNames.notify)
            .pipe(filter(function (notify) { return notify && notify.message; }), filter(function (notify) { return notify.type === NotifyType.ALERT || (!notify.type && _this.defaultNotifyType === NotifyType.ALERT); })).subscribe(function (notify) {
            /** @type {?} */
            var model = _this.getNotifyModel(notify);
            _this.messageService.add(model);
            _this.cd.detectChanges();
        });
    };
    /**
     * @param {?} notify
     * @return {?}
     */
    PngAlertComponent.prototype.getNotifyModel = /**
     * @param {?} notify
     * @return {?}
     */
    function (notify) {
        return {
            key: notify.key,
            severity: notify.level || NotifyLevel.INFO,
            summary: notify.title,
            detail: notify.message,
            sticky: notify.sticky || false,
            life: notify.duration || notify.level === NotifyLevel.ERROR ? DEFAULT_ALERT_PROPS.duration * 2 : DEFAULT_ALERT_PROPS.duration,
            closable: notify.closable || true,
            data: notify.data
        };
    };
    PngAlertComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-alert',
                    template: "\n    <p-toast [styleClass]=\"alert.styleClass\"\n             [style]=\"alert.style\"\n             [position]=\"alert.position\"\n             [autoZIndex]=\"alert.autoZIndex\"\n    ></p-toast>\n  ",
                    providers: [MessageService],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngAlertComponent.ctorParameters = function () { return [
        { type: MessageService },
        { type: ChangeDetectorRef }
    ]; };
    return PngAlertComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_ANNOUNCE_PROPS = {
    level: NotifyLevel.INFO,
    animation: true,
    closable: true,
    baseZIndex: 2000
};
var PngAnnounceComponent = /** @class */ (function (_super) {
    __extends(PngAnnounceComponent, _super);
    function PngAnnounceComponent(messageService, cd) {
        var _this = _super.call(this) || this;
        _this.messageService = messageService;
        _this.cd = cd;
        _this.announce = __assign({}, DEFAULT_ANNOUNCE_PROPS, ConfigUtils.getConfig().announce || {});
        _this.defaultNotifyType = ConfigUtils.getConfig().notify;
        return _this;
    }
    /**
     * @return {?}
     */
    PngAnnounceComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.$subscriptions = StatesUtils.observe(StateNames.notify)
            .pipe(filter(function (notify) { return notify && notify.message; }), filter(function (notify) { return notify.type === NotifyType.ANNOUNCE || (!notify.type && _this.defaultNotifyType === NotifyType.ANNOUNCE); })).subscribe(function (notify) {
            /** @type {?} */
            var model = _this.getNotifyModel(notify);
            _this.messageService.add(model);
            _this.cd.detectChanges();
        });
    };
    /**
     * @param {?} notify
     * @return {?}
     */
    PngAnnounceComponent.prototype.getNotifyModel = /**
     * @param {?} notify
     * @return {?}
     */
    function (notify) {
        return {
            key: notify.key,
            severity: notify.level || NotifyLevel.INFO,
            summary: notify.title,
            detail: notify.message,
            closable: notify.closable,
            data: notify.data
        };
    };
    PngAnnounceComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-announce',
                    template: "\n    <p-messages [styleClass]=\"announce.styleClass\"\n                [style]=\"announce.style\"\n                [closable]=\"announce.closable\"\n    ></p-messages>\n  ",
                    providers: [MessageService],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngAnnounceComponent.ctorParameters = function () { return [
        { type: MessageService },
        { type: ChangeDetectorRef }
    ]; };
    return PngAnnounceComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngOptionItemComponent = /** @class */ (function (_super) {
    __extends(PngOptionItemComponent, _super);
    function PngOptionItemComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PngOptionItemComponent.prototype, "labels", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var _label = DataItemUtils.getItemLabel(this.item, this.props.dropDownOptionKey || this.props.labelKey || 'label');
            if (CommonsUtils.isArray(_label)) {
                return _label;
            }
            else {
                return [_label];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PngOptionItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.props) {
            this.props = {};
        }
    };
    PngOptionItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-option-item',
                    template: "\n    <ng-container *ngIf=\"customerTpl;else default\">\n      <ng-container *ngTemplateOutlet=\"customerTpl;context:{$implicit:item}\"></ng-container>\n    </ng-container>\n    <ng-template #default>\n      <div class=\"d-flex option-item\" [ngClass]=\"props.itemStyleClass || 'ui-helper-clearfix'\">\n          <span class=\"label mr-3\" *ngFor=\"let label of labels\" [ngClass]=\"props.labelStyleClass\" [innerHTML]=\"label\"></span>\n          <span class=\"pull-right count\" *ngIf=\"props.showCounter && item['count']\">\n          <span [ngClass]=\"props.counterStyleClass || 'badge badge-pill badge-info'\">{{item['count']}}</span>\n        </span>\n      </div>\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [".option-item{border-bottom:1px solid #d5d5d5;font-size:.8em}.option-item:hover{font-weight:700;font-size:1em}"]
                }] }
    ];
    PngOptionItemComponent.propDecorators = {
        item: [{ type: Input }],
        props: [{ type: Input }]
    };
    return PngOptionItemComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngOverlayPanelComponent = /** @class */ (function (_super) {
    __extends(PngOverlayPanelComponent, _super);
    function PngOverlayPanelComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    PngOverlayPanelComponent.prototype.show = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.panel.show(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngOverlayPanelComponent.prototype.toggle = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.panel.toggle(event);
    };
    /**
     * @return {?}
     */
    PngOverlayPanelComponent.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.panel.hide();
    };
    PngOverlayPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-overlay-panel',
                    template: "<p-overlayPanel #overlayPanel [showCloseIcon]=\"true\" [dismissable]=\"false\">\n   <er-dyna-content [content]=\"content\" [context]=\"context\"></er-dyna-content>\n</p-overlayPanel>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    PngOverlayPanelComponent.propDecorators = {
        content: [{ type: Input }],
        context: [{ type: Input }],
        panel: [{ type: ViewChild, args: [OverlayPanel,] }]
    };
    return PngOverlayPanelComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngPanelComponent = /** @class */ (function (_super) {
    __extends(PngPanelComponent, _super);
    function PngPanelComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.collapsed = false;
        _this.toggleable = false;
        _this.showHeader = true;
        _this.templateNames = {
            header: 'header',
            footer: 'footer'
        };
        return _this;
    }
    /**
     * @return {?}
     */
    PngPanelComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngAfterViewInit.call(this);
        /** @type {?} */
        var titleBar = this.panelEle.nativeElement.querySelector('.ui-panel-titlebar');
        if (titleBar) {
            if (this.barStyleClass) {
                DomUtils.addClasses(titleBar, this.barStyleClass);
            }
            if (this.barStyle) {
                Object.keys(this.barStyle).forEach(function (name) {
                    DiUtils.get(Renderer2).setStyle(titleBar, name, _this.barStyle[name]);
                });
            }
        }
    };
    PngPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-panel',
                    template: "<div class=\"ui-g\">\n  <div class=\"ui-g-12\">\n    <p-panel #pngPanel [styleClass]=\"styleClass\" [style]=\"style\" [toggleable]=\"toggleable\" [showHeader]=\"showHeader\"\n             [collapsed]=\"collapsed\">\n      <p-header>\n        <ng-container *ngIf=\"header\">\n          <i *ngIf=\"icon\" [class]=\"icon\"></i>\n          <er-dyna-content [content]=\"header\" class=\"d-inline-block\"></er-dyna-content>\n        </ng-container>\n        <ng-container *ngIf=\"template(templateNames.header)\">\n          <ng-container *ngTemplateOutlet=\"template(templateNames.header)\"></ng-container>\n        </ng-container>\n      </p-header>\n      <ng-content></ng-content>\n      <ng-container *ngIf=\"footer || template(templateNames.footer)\">\n        <p-footer>\n          <ng-container *ngIf=\"footer\">\n            <er-dyna-content [content]=\"footer\"></er-dyna-content>\n          </ng-container>\n          <ng-container *ngIf=\"template(templateNames.footer)\">\n            <ng-container *ngTemplateOutlet=\"template(templateNames.footer)\"></ng-container>\n          </ng-container>\n        </p-footer>\n      </ng-container>\n    </p-panel>\n  </div>\n</div>\n\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    PngPanelComponent.propDecorators = {
        barStyle: [{ type: Input }],
        barStyleClass: [{ type: Input }],
        style: [{ type: Input }],
        styleClass: [{ type: Input }],
        header: [{ type: Input }],
        footer: [{ type: Input }],
        icon: [{ type: Input }],
        collapsed: [{ type: Input }],
        toggleable: [{ type: Input }],
        showHeader: [{ type: Input }],
        panelEle: [{ type: ViewChild, args: ['pngPanel', { read: ElementRef },] }]
    };
    return PngPanelComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_POPUP_DIALOG_PROPS = {
    draggable: true,
    minHeight: 100,
    minWidth: 140,
    resizable: true,
    modal: true,
    closeOnEscape: true,
    dismissableMask: false,
    rtl: false,
    closable: true,
    responsive: true,
    maximizable: true,
    blockScroll: true,
    breakpoint: 640,
    showHeader: true,
    showFooter: true,
    baseZIndex: 2000,
    autoZIndex: true,
    closeLabel: '关闭',
    closeIcon: 'fa fa-close'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngPopupDialogComponent = /** @class */ (function (_super) {
    __extends(PngPopupDialogComponent, _super);
    function PngPopupDialogComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onClose = new EventEmitter();
        _this.onAction = new EventEmitter();
        _this.templateNames = {
            header: 'header',
            content: 'content',
            footer: 'footer'
        };
        return _this;
    }
    Object.defineProperty(PngPopupDialogComponent.prototype, "options", {
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this.dlgOptions$ = of(this.resolveDlgOptions(options));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PngPopupDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dlgOptions$ = StatesUtils.observe(StateNames.popup)
            .pipe(filter(function (state$$1) { return !!state$$1; }), map(function (options) { return _this.resolveDlgOptions(options); }), takeUntil(this.destroyed$));
    };
    /**
     * @param {?} options
     * @return {?}
     */
    PngPopupDialogComponent.prototype.resolveDlgOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var opt = __assign({}, DEFAULT_POPUP_DIALOG_PROPS, { header: this.header, content: this.content }, options);
        if (options.contentMaxHeight || options.contentMaxWidth) {
            opt.contentStyle = __assign({}, opt.contentStyle || {}, { 'max-height': (options.contentMaxHeight || 3000) + "px", 'max-width': (options.contentMaxWidth || 3000) + "px" });
        }
        return opt;
    };
    /**
     * @param {?} dlg
     * @param {?} options
     * @return {?}
     */
    PngPopupDialogComponent.prototype.showEvent = /**
     * @param {?} dlg
     * @param {?} options
     * @return {?}
     */
    function (dlg, options) {
        _super.prototype.emitEvent.call(this, 'onShow', {
            scope: options,
            event: dlg,
            context: options.context
        });
    };
    /**
     * @param {?} dlg
     * @param {?} options
     * @return {?}
     */
    PngPopupDialogComponent.prototype.closeDlg = /**
     * @param {?} dlg
     * @param {?} options
     * @return {?}
     */
    function (dlg, options) {
        if (this.canClose && !this.canClose({
            scope: options,
            event: dlg,
            context: options.context
        })) {
            return;
        }
        StatesUtils.create(StateNames.popup, { visible: false });
    };
    PngPopupDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-popup-dialog',
                    template: "<ng-container *ngIf=\"dlgOptions$|async as dlgOptions\">\n  <p-dialog #pngDialog\n            [(visible)]=\"dlgOptions.visible\"\n            [minWidth]=\"dlgOptions.minWidth\"\n            [minHeight]=\"dlgOptions.minHeight\"\n            [width]=\"dlgOptions.width\"\n            [height]=\"dlgOptions.height\"\n            [modal]=\"dlgOptions.modal\"\n            [draggable]=\"dlgOptions.draggable\"\n            [resizable]=\"dlgOptions.resizable\"\n            [closeOnEscape]=\"dlgOptions.closeOnEscape\"\n            [contentStyle]=\"dlgOptions.contentStyle\"\n            [dismissableMask]=\"dlgOptions.dismissableMask\"\n            [rtl]=\"dlgOptions.rtl\"\n            [closable]=\"dlgOptions.closable\"\n            [responsive]=\"dlgOptions.responsive\"\n            [breakpoint]=\"dlgOptions.breakpoint\"\n            [appendTo]=\"dlgOptions.appendTo\"\n            [maximizable]=\"dlgOptions.maximizable\"\n            [blockScroll]=\"dlgOptions.blockScroll\"\n            [style]=\"dlgOptions.style\"\n            [styleClass]=\"dlgOptions.styleClass\"\n            [showHeader]=\"dlgOptions.showHeader\"\n            [positionLeft]=\"dlgOptions.positionLeft\"\n            [positionTop]=\"dlgOptions.positionTop\"\n            (onShow)=\"showEvent(pngDialog,dlgOptions)\"\n  >\n    <p-header>\n      <ng-container *ngIf=\"templates[templateNames.header]\">\n        <ng-container *ngTemplateOutlet=\"templates[templateNames.header]\"></ng-container>\n      </ng-container>\n      <span [innerHTML]=\"dlgOptions.header\"></span>\n    </p-header>\n\n    <ng-container *ngTemplateOutlet=\"templates[templateNames.content]\"></ng-container>\n\n    <ng-container *ngIf=\"dlgOptions.content\">\n      <er-dyna-content [content]=\"dlgOptions.content\"></er-dyna-content>\n    </ng-container>\n\n    <ng-content></ng-content>\n\n    <p-footer *ngIf=\"dlgOptions.showFooter\">\n      <ng-container *ngIf=\"templates[templateNames.footer]\">\n        <ng-container *ngTemplateOutlet=\"templates[templateNames.footer]\"></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!templates[templateNames.footer]\">\n        <png-buttons [btns]=\"dlgOptions.buttons\" [context]=\"dlgOptions.context\"></png-buttons>\n        <button pButton type=\"button\" class=\"ui-button-rounded ui-button-danger\" iconPos=\"left\"\n                (click)=\"closeDlg(pngDialog,dlgOptions)\"\n                [icon]=\"dlgOptions.closeIcon\" [label]=\"dlgOptions.closeLabel\"></button>\n      </ng-container>\n    </p-footer>\n  </p-dialog>\n</ng-container>\n\n\n\n\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host::ng-deep .ui-dialog-titlebar{background-color:#0d7a8b!important;color:#fff!important}"]
                }] }
    ];
    PngPopupDialogComponent.propDecorators = {
        header: [{ type: Input }],
        content: [{ type: Input }],
        canClose: [{ type: Input }],
        onClose: [{ type: Output }],
        onAction: [{ type: Output }],
        options: [{ type: Input }]
    };
    return PngPopupDialogComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_RADIO_PROPS = {
    $ext: {
        inline: false
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngRadioComponent = /** @class */ (function (_super) {
    __extends(PngRadioComponent, _super);
    function PngRadioComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.valueParser = _this.parseValue;
        _this.modelFormatter = _this.formatModel;
        _this.$defaultProps = DEFAULT_RADIO_PROPS;
        return _this;
    }
    Object.defineProperty(PngRadioComponent.prototype, "rbValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rbValue;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._rbValue = value;
            /** @type {?} */
            var values = this.data$.value;
            if (CommonsUtils.isArray(values)) {
                /** @type {?} */
                var matched = ((/** @type {?} */ (values))).filter(function (v) { return v[_this.dataKey] === value; });
                if (matched.length === 1) {
                    this.value = DataItemUtils.getItemValue(matched[0], this.valueKey);
                }
                else {
                    this.value = null;
                }
            }
            else {
                this.value = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngRadioComponent.prototype, "dataKey", {
        get: /**
         * @return {?}
         */
        function () {
            return CommonsUtils.get(this.$props, '$ext.dataItemProps.idKey', 'value');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngRadioComponent.prototype, "valueKey", {
        get: /**
         * @return {?}
         */
        function () {
            return CommonsUtils.get(this.$props, '$ext.dataItemProps.valueKey', 'value');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} model
     * @return {?}
     */
    PngRadioComponent.prototype.formatModel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (CommonsUtils.isJson(model)) {
            this._rbValue = DataItemUtils.getItemValue(model, this.dataKey);
        }
        return model;
    };
    PngRadioComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-radio',
                    template: "\n    <div class=\"d-flex pb-2\" [erApiData]=\"apiDataProps\" [ngClass]=\"$props.$ext['inline']===false?'flex-column':'flex-wrap'\">\n      <ng-container *ngFor=\"let option of data$|async|erDataItems:$props.$ext.dataItemProps;let i=index\">\n       <span class=\"d-flex align-items-center\">\n        <p-radioButton\n          class=\"m-2\"\n          [(ngModel)]=\"rbValue\"\n          erPropsBind\n          [props]=\"$props\"\n          [context]=\"ctx\"\n          [inputId]=\"i\"\n          [value]=\"option.data|erValue:dataKey\"\n          (onClick)=\"updateTouch()\"\n        >\n        </p-radioButton>\n        <span class=\"mr-4\" [innerHTML]=\"option.label|erSafeHtml\"></span>\n       </span>\n      </ng-container>\n    </div>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngRadioComponent; }),
                            multi: true
                        }]
                }] }
    ];
    return PngRadioComponent;
}(DataAwareControlWrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_PNG_RATING_PROPS = {
    stars: 5,
    iconOnClass: 'fa fa-star fa-2x',
    iconOffClass: 'fa fa-star-o fa-2x',
    iconCancelClass: 'fa fa-ban fa-2x red'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngRatingComponent = /** @class */ (function (_super) {
    __extends(PngRatingComponent, _super);
    function PngRatingComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.$defaultProps = DEFAULT_PNG_RATING_PROPS;
        return _this;
    }
    PngRatingComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-rating',
                    template: "\n    <p-rating\n      [(ngModel)]=\"value\"\n      erPropsBind\n      [props]=\"$props\"\n      [context]=\"ctx\"\n      (onRate)=\"updateTouch()\"\n    >\n    </p-rating>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngRatingComponent; }),
                            multi: true
                        }]
                }] }
    ];
    return PngRatingComponent;
}(DataAwareControlWrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngSearchBoxComponent = /** @class */ (function (_super) {
    __extends(PngSearchBoxComponent, _super);
    function PngSearchBoxComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.searched = false;
        _this.title = '按关键字搜索,输入回车键执行';
        _this.onSearch = new EventEmitter();
        _this.onSearchChange = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    PngSearchBoxComponent.prototype.search = /**
     * @return {?}
     */
    function () {
        this.searched = true;
        this.onSearch.emit(this.searchKey);
    };
    /**
     * @return {?}
     */
    PngSearchBoxComponent.prototype.keyChange = /**
     * @return {?}
     */
    function () {
        if (!this.searchKey || this.searchKey.length === 0) {
            this.clearSearch();
        }
        this.onSearchChange.emit(this.searchKey);
    };
    /**
     * @return {?}
     */
    PngSearchBoxComponent.prototype.clearSearch = /**
     * @return {?}
     */
    function () {
        this.searchKey = undefined;
        if (this.searched) {
            this.onSearch.emit(undefined);
        }
        this.searched = false;
    };
    /**
     * @return {?}
     */
    PngSearchBoxComponent.prototype.showHelp = /**
     * @return {?}
     */
    function () {
        DialogUtils.info('查询操作符', "\n    <div class=\"ml-3\">\n       <div><b class=\"font-weight-bold\">+</b> \u5E76\u4E14</div>\n       <div><b class=\"font-weight-bold\">|</b> \u6216\u8005</div>\n       <div><b class=\"font-weight-bold\">-</b> \u6392\u9664</div>\n       <div><b class=\"font-weight-bold\">*</b> \u5F00\u5934</div>\n       <div><b class=\"font-weight-bold\">( )</b> \u4F18\u5148</div>\n    </div>\n    ");
    };
    PngSearchBoxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-search-box',
                    template: "\n    <span class=\"inner-addon\" [ngClass]=\"styleClass\" [ngStyle]=\"style\">\n      <i class=\"fa fa-search text-primary left\"></i>\n      <input [title]=\"title\" pInputText placeholder=\"\u8F93\u5165\u641C\u7D22\u5173\u952E\u5B57\u6216\u62FC\u97F3\" [(ngModel)]=\"searchKey\" (keydown.enter)=\"search()\" (keyup)=\"keyChange()\"/>\n      <i *ngIf=\"searchKey\" class=\"fa fa-trash gray right\" [title]=\"title\" (click)=\"clearSearch()\"></i>\n   </span>\n    <span class=\"position-container\"><i title=\"\u591A\u503C\u67E5\u8BE2\u5E2E\u52A9\" class=\"fa fa-question-circle green position-absolute\" style=\"right:2px\"\n                                        (click)=\"showHelp()\"></i></span>\n\n  "
                }] }
    ];
    PngSearchBoxComponent.propDecorators = {
        styleClass: [{ type: Input }],
        style: [{ type: Input }],
        title: [{ type: Input }],
        onSearch: [{ type: Output }],
        onSearchChange: [{ type: Output }]
    };
    return PngSearchBoxComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_SELECT_BUTTON_PROPS = {
    multiple: false
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngSelectButtonComponent = /** @class */ (function (_super) {
    __extends(PngSelectButtonComponent, _super);
    function PngSelectButtonComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.$defaultProps = DEFAULT_SELECT_BUTTON_PROPS;
        _this.templateNames = {
            item: 'item'
        };
        return _this;
    }
    PngSelectButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-select-button',
                    template: "\n    <p-selectButton\n      [(ngModel)]=\"value\"\n      erPropsBind\n      [props]=\"$props\"\n      [context]=\"ctx\"\n      [erApiData]=\"apiDataProps\"\n      [options]=\"data$|async|erDataItems:$props.$ext.dataItemProps\"\n      (onOptionClick)=\"updateTouch()\"\n    >\n      <ng-template let-item>\n        <er-data-item [customerTpl]=\"template(templateNames.item)\"\n                      [item]=\"item.data\"\n                      [props]=\"$props.$ext.dataItemProps\">\n        </er-data-item>\n      </ng-template>  \n    </p-selectButton>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngSelectButtonComponent; }),
                            multi: true
                        }]
                }] }
    ];
    return PngSelectButtonComponent;
}(DataAwareControlWrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_PNG_SELECT_PROPS = {
    autoWidth: false,
    placeholder: '请选择',
    showClear: true,
    editable: false,
    $ext: {}
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngSelectComponent = /** @class */ (function (_super) {
    __extends(PngSelectComponent, _super);
    function PngSelectComponent(cd) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.$defaultProps = DEFAULT_PNG_SELECT_PROPS;
        _this.templateNames = {
            group: 'group',
            item: 'item'
        };
        return _this;
    }
    /**
     * @return {?}
     */
    PngSelectComponent.prototype.onPropsInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.onPropsInit.call(this);
        if (!this.$props.group && this.$props.$ext && this.$props.$ext.dataItemProps && this.$props.$ext.dataItemProps.groupKey) {
            this.$props.group = true;
        }
    };
    PngSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-select',
                    template: "\n    <p-dropdown\n      [(ngModel)]=\"value\"\n      erPropsBind\n      [props]=\"$props\"\n      [context]=\"ctx\"\n      [erApiData]=\"apiDataProps\"\n      [options]=\"data$|async|erDataItems:$props?.$ext?.dataItemProps\"\n      (onBlur)=\"updateTouch()\"\n    >\n      <ng-template let-group pTemplate=\"group\">\n        <ng-container *ngTemplateOutlet=\"template(templateNames.group,groupTpl);context:{$implicit:group}\"></ng-container>\n      </ng-template>\n      <ng-template let-group #groupTpl>\n        <span *ngIf=\"group\" style=\"font-size: 1em\"><i class=\"fa fa-group text-primary\"></i> {{group.label}}</span>\n      </ng-template>\n      <ng-template let-item pTemplate=\"item\">\n        <er-data-item [customerTpl]=\"template(templateNames.item)\"\n                      [item]=\"item.data\"\n                      [props]=\"$props.$ext.dataItemProps\">\n        </er-data-item>\n      </ng-template>\n    </p-dropdown>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngSelectComponent; }),
                            multi: true
                        }],
                    styles: ["/deep/ .ui-dropdown-item{border-bottom:1px solid #a8a8a8!important;font-size:.8em;color:#000!important}/deep/ .ui-dropdown-item:hover{background-color:transparent!important;font-weight:700;color:red!important;font-size:1em}"]
                }] }
    ];
    /** @nocollapse */
    PngSelectComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    PngSelectComponent.propDecorators = {
        dropDown: [{ type: ViewChild, args: [Dropdown,] }]
    };
    return PngSelectComponent;
}(DataAwareControlWrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_PNG_SLIDER_PROPS = {
    min: 0,
    max: 100,
    range: false,
    orientation: 'horizontal'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngSliderComponent = /** @class */ (function (_super) {
    __extends(PngSliderComponent, _super);
    function PngSliderComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.$defaultProps = DEFAULT_PNG_SLIDER_PROPS;
        return _this;
    }
    Object.defineProperty(PngSliderComponent.prototype, "current", {
        get: /**
         * @return {?}
         */
        function () {
            return CommonsUtils.join(this.value, '——');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    PngSliderComponent.prototype.initValue = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.hasOwnProperty('min') && event.hasOwnProperty('max')) {
            this.min = event.min;
            this.max = event.max;
            this.value = [event.min, event.max];
        }
        else {
            this.value = event;
        }
    };
    PngSliderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-slider',
                    template: "\n    <small class=\"d-inline w-25\">\u503C\uFF1A{{current}}</small>\n    <p-slider class=\"d-inline\"\n              [erApiData]=\"apiDataProps\"\n              [(ngModel)]=\"value\"\n              erPropsBind\n              [props]=\"$props\"\n              [min]=\"min\"\n              [max]=\"max\"\n              (onChange)=\"updateTouch()\"\n              (onDataReady)=\"initValue($event)\"\n    >\n    </p-slider>\n\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngSliderComponent; }),
                            multi: true
                        }]
                }] }
    ];
    return PngSliderComponent;
}(DataAwareControlWrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var defaultPngColumnProps = {
    cellStyleClass: 'text-right',
    sortable: true,
    filterable: true,
    aggable: true,
    width: '150px'
};
/** @type {?} */
var defaultPngTableProps = {
    value: [],
    tableStyleClass: 'rounded shadow',
    dataKey: 'id',
    alwaysShowPaginator: true,
    autoLayout: true,
    columnResizeMode: 'expand',
    compareSelectionBy: 'equals',
    defaultSortOrder: 1,
    resizableColumns: true,
    reorderableColumns: true,
    responsive: true,
    filterDelay: 300,
    filters: {},
    rowHover: true,
    loadingIcon: 'fa fa-spin fa-2x fa-circle-o-notch',
    lazy: true,
    lazyLoadOnInit: false,
    rows: 10,
    pageLinks: 5,
    rowsPerPageOptions: [10, 30, 50],
    paginator: true,
    paginatorPosition: 'both',
    rowExpandMode: 'multiple',
    sortMode: 'single',
    sortOrder: 1,
    $ext: {
        emptyMessage: '没有显示内容',
        hasColumnSelector: true,
        columnSelectorStyleClass: 'd-inline-block align-middle pull-right',
        rowHeight: '30px',
        rowActionsPlaceAhead: false,
        frozenActionColumn: false,
        hasSearchInput: true,
        hasSearchBox: false,
        hasRowIndex: false,
        hasRowCheckbox: false,
        hasHeaderSummary: false,
        hasPaginatorLeft: true,
        hasPaginatorRight: false,
        rowExpandable: false,
        hasAddAction: false,
        hasDeleteAction: false,
        hasAuditAction: false,
        hasDownloadAction: false,
        routerOutlet: 'aux',
        addRouter: 'add',
        viewRouter: 'view',
        editRouter: 'edit',
        auditRouter: 'audit',
        downloadRouter: 'download'
    }
};
/** @type {?} */
var defaultRowIndexColumn = (/** @type {?} */ ({
    label: '行号',
    width: '50px',
    cellClass: 'text-right',
    sortable: false,
    filterable: false,
    aggable: false,
    order: -100,
    isDataColumn: false,
    cellContent: function (data) { return data.rowIndex + 1; }
}));
/** @type {?} */
var defaultOrderedRowIndexColumn = {
    label: '行号',
    width: '50px',
    cellClass: 'text-right',
    sortable: false,
    filterable: false,
    aggable: false,
    order: -100,
    isDataColumn: false,
    cellContent: function (data) { return data.rowIndex + 1; },
    cellStyleClass: function (ctx) {
        if (ctx.rowIndex === 0) {
            return 'badge badge-pill white bg-red No-1';
        }
        else if (ctx.rowIndex === 1) {
            return 'badge badge-pill black bg-yellow No-2';
        }
        else if (ctx.rowIndex === 2) {
            return 'badge badge-pill white bg-blue No-3';
        }
        else {
            return 'badge badge-pill badge-dark';
        }
    }
};
/** @type {?} */
var defaultActionColumn = (/** @type {?} */ ({
    label: '操作',
    width: '150px',
    cellStyleClass: 'text-left',
    sortable: false,
    filterable: false,
    aggable: false,
    dataAttr: DataAttr.BUTTONS,
    isActionColumn: true,
    cellContent: (/** @type {?} */ ([]))
}));
/** @type {?} */
var defaultAddButton = (/** @type {?} */ ({
    $id: 'add',
    title: '新建一条信息',
    label: '新建',
    icon: 'fa fa-plus',
    styleClass: 'ui-button-rounded ui-button-success',
    onClick: function (event) {
        event.pngTable.navigate(event.pngTable.$props.$ext.addRouter, [], { tableId: event.pngTable.$id });
    }
}));
/** @type {?} */
var defaultViewButton = (/** @type {?} */ ({
    $id: 'view',
    title: '查看',
    icon: 'fa fa-edit',
    styleClass: 'ui-button-rounded ui-button-info',
    onClick: function (event) {
        event.pngTable.navigate(event.pngTable.$props.$ext.viewRouter, [event.row['id']]);
    }
}));
/** @type {?} */
var defaultEditButton = (/** @type {?} */ ({
    $id: 'edit',
    title: '修改',
    icon: 'fa fa-edit',
    styleClass: 'ui-button-rounded ui-button-warning',
    onClick: function (event) {
        event.pngTable.navigate(event.pngTable.$props.$ext.editRouter, [event.row['id']], { tableId: event.pngTable.$id });
    }
}));
/** @type {?} */
var defaultDeleteButton = (/** @type {?} */ ({
    $id: 'delete',
    title: '删除',
    icon: 'fa fa-trash',
    styleClass: 'ui-button-rounded ui-button-danger',
    onClick: function (event) {
        ApiUtils.deleteById(event.pngTable.$props.$ext.apiDataProps.apiEntry, event.row['id'])
            .subscribe(function () {
            event.pngTable.load();
            StatesUtils.update(event.pngTable.$props.$id, { deleted: event.row['id'] });
        });
    }
}));
/** @type {?} */
var defaultAuditButton = (/** @type {?} */ ({
    $id: 'audit',
    title: '审核',
    icon: 'fa fa-check',
    styleClass: 'ui-button-rounded ui-button-success',
    onClick: function (event) {
        event.pngTable.navigate(event.pngTable.$props.$ext.auditRouter, [event.row['id']], { action: 'audit', tableId: event.pngTable.$id });
    }
}));
/** @type {?} */
var defaultDownloadButton = (/** @type {?} */ ({
    $id: 'download',
    title: '下载',
    icon: 'fa fa-download',
    overlay: true,
    styleClass: 'ui-button-rounded ui-button-success',
    onClick: function (event) {
        event.pngTable.navigate(event.pngTable.$props.$ext.downloadRouter, [event.row['id']]);
    }
}));
/** @type {?} */
var defaultOverlayColumnProps = {
    sortable: false,
    filterable: false,
    aggable: false
};
/** @type {?} */
var defaultOverlayTableProps = {
    alwaysShowPaginator: false,
    scrollable: true,
    scrollWidth: '800px',
    paginatorPosition: 'bottom'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngTableUtils = /** @class */ (function () {
    function PngTableUtils() {
    }
    /**
     * @param {?} column
     * @return {?}
     */
    PngTableUtils.resolveColumnByDataField = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        if (!column.dataField) {
            return;
        }
        column.dataField = CommonsUtils.merge(DataFieldUtils.getFieldDefaultProps(column.dataField), column.dataField);
        var _a = column.dataField, key = _a.key, label = _a.label, dataType = _a.dataType, dataAttr = _a.dataAttr, order = _a.order, hidden = _a.hidden;
        /** @type {?} */
        var sortKey = column.dataField.key;
        if (!column.sortKey && column.dataField.dataType === DataType.JSON) {
            sortKey = column.dataField.sortKey || column.dataField.key + "." + DataFieldUtils.getDefaultFieldName(column.dataField);
        }
        /** @type {?} */
        var id = column.id || column.key || column.dataField.key;
        CommonsUtils.defaults(column, CommonsUtils.pickBy({
            id: id,
            key: key,
            label: label,
            dataType: dataType,
            dataAttr: dataAttr,
            order: order,
            hidden: hidden,
            sortKey: sortKey
        }, CommonsUtils.lodash().identity));
    };
    return PngTableUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngTableComponent = /** @class */ (function (_super) {
    __extends(PngTableComponent, _super);
    function PngTableComponent(cd, router, activatedRoute) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.router = router;
        _this.activatedRoute = activatedRoute;
        _this.OVERLAY_TYPE = OverlayType;
        _this.bodyData$ = new BehaviorSubject([]);
        _this.columns$ = new BehaviorSubject(undefined);
        _this.templateNames = {
            caption: 'caption',
            spanHeader: 'spanHeader',
            header: 'header',
            headerSummary: 'headerSummary',
            body: 'body',
            frozenRows: 'frozenRows',
            cell: 'cell',
            dataCell: 'dataCell',
            footer: 'footer',
            footerSummary: 'summary',
            colGroup: 'colgroup',
            rowExpansion: 'rowexpansion',
            paginatorLeft: 'paginatorLeft',
            paginatorRight: 'paginatorRight'
        };
        _this.$defaultProps = defaultPngTableProps;
        _this.eventQuery = [];
        _this.selectedRows = [];
        _this.switch = true;
        return _this;
    }
    Object.defineProperty(PngTableComponent.prototype, "apiEntry", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$props.$ext.apiDataProps && this.$props.$ext.apiDataProps.apiEntry;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngTableComponent.prototype, "$id", {
        get: /**
         * @return {?}
         */
        function () {
            return this.$props.$id;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PngTableComponent.prototype.onPropsInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.$props.entity) {
            if (!this.$props.caption || this.$props.caption['method']) {
                /** @type {?} */
                var caption = CommonsUtils.getValue(this.$props.caption, this.$props.entity.label);
                this.$props.caption = caption || "\u6D4F\u89C8" + (this.$props.entity.label || '');
            }
            if (!this.$props.$ext.apiDataProps) {
                this.$props.$ext.apiDataProps = {};
            }
            if (!this.$props.$ext.apiDataProps.apiEntry) {
                this.$props.$ext.apiDataProps.apiEntry = this.$props.entity.apiEntry || '';
            }
        }
        if (this.$props.columns) {
            this.resoleActionsColumn(this.$props);
            /** @type {?} */
            var order_1 = 0;
            this.$props.columns.forEach(function (column) {
                PngTableUtils.resolveColumnByDataField(column);
                CommonsUtils.defaults(column, defaultPngColumnProps);
                if (!column.order) {
                    column.order = ++order_1;
                }
                if (_this.$props.scrollable && _this.$props.scrollWidth && column.width && column.width.endsWith('%')) {
                    column.width = defaultPngColumnProps.width;
                }
                if (column.overlays) {
                    column.overlays = CommonsUtils.getArrayValue(column.overlays);
                }
                if (column.headerOverlays) {
                    column.headerOverlays = CommonsUtils.getArrayValue(column.headerOverlays);
                }
            });
        }
        if (this.$props.virtualScroll) {
            this.$props.alwaysShowPaginator = false;
            this.$props.paginator = false;
        }
        if (this.$props.scrollable) {
            CommonsUtils.set(this.$props, 'style.width', this.$props.scrollWidth);
        }
        /** @type {?} */
        var frozenColumns = this.$props.columns.filter(function (column) { return column.frozen; });
        if (frozenColumns.length > 0) {
            this.$props.frozenColumns = frozenColumns;
            if (!this.$props.$ext.rowHeight) {
                this.$props.$ext.rowHeight = '30px';
            }
            /** @type {?} */
            var frozenWidth_1 = 0;
            frozenColumns.forEach(function (column) {
                /** @type {?} */
                var width = 150;
                if (column.width) {
                    width = Number(column.width.substr(0, column.width.length - 2));
                }
                frozenWidth_1 += width || 150;
                column.styleClass = column.styleClass || '' + ' table-frozen-column';
            });
            this.$props.frozenWidth = frozenWidth_1 + "px";
        }
        this.updateColumns();
        this.apiDataProps = this.getApiDataProps();
        this.$subscriptions = StatesUtils.observe(this.$id)
            .pipe(filter(function (state$$1) { return !!state$$1; }), skip(1))
            .subscribe(function (state$$1) {
            _this.table.first = 0;
            _this.load(state$$1);
        });
        if (this.$props.$ext.dataItems) {
            this.data$.next({
                items: this.$props.$ext.dataItems,
                total: this.$props.$ext.dataItems.length
            });
        }
        StatesUtils.create(this.$id, {
            component: this
        }, true);
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    PngTableComponent.prototype.updateColumns = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var columns;
        if (!event) {
            columns = this.$props.columns.filter(function (column) { return !column.frozen; }) || [];
        }
        else {
            columns = event.value;
        }
        columns.sort(function (a, b) { return a.order - b.order; });
        this.dataColumns = columns.filter(function (column) { return !column.isActionColumn || !(column.hidden && !column.fetch); });
        if (!event) {
            columns = columns.filter(function (column) { return !column.hidden; });
        }
        this.dataColumnNames = CommonsUtils.compact(this.dataColumns.map(function (column) { return column.key; }));
        if (this.$props.frozenColumns) {
            this.$props.frozenColumns.forEach(function (column) {
                if (column.key) {
                    _this.dataColumnNames.push(column.key);
                }
            });
        }
        this.columns$.next(columns);
        if (event) {
            this.load();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableComponent.prototype.updateColAggKeys = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.column) {
            /** @type {?} */
            var column_1 = event.column;
            /** @type {?} */
            var aggProps_1 = [];
            if (event.methods && event.methods.length > 0) {
                event.methods.forEach(function (method) {
                    aggProps_1.push((/** @type {?} */ ({
                        name: column_1.key + "-" + method,
                        field: column_1.aggKey || column_1.key,
                        method: AggMethodsProps[method]['key']
                    })));
                });
            }
            column_1.aggProps = aggProps_1;
            StatesUtils.update(this.$id, {});
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableComponent.prototype.updateColFilters = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.column) {
            /** @type {?} */
            var column = event.column;
            column.filters = [];
            if (event.value) {
                column.filters.push(event.value);
            }
            StatesUtils.update(this.$id, {});
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableComponent.prototype.updateSimpleSearch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (CommonsUtils.isEmpty(event)) {
            this.simpleQuery = undefined;
        }
        else {
            if (event.indexOf('"') === -1) {
                event = "\"" + event + "\"";
            }
            this.simpleQuery = [simpleQueryStringQuery(event)];
        }
        this.load();
    };
    /**
     * @param {?} key
     * @return {?}
     */
    PngTableComponent.prototype.getColumnByKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var columns = this.$props.columns.filter(function (column) { return column.key === key; });
        if (columns.length >= 1) {
            return columns[0];
        }
        else {
            return undefined;
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    PngTableComponent.prototype.getRowStyleClass = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        return CommonsUtils.getValue(this.$props.$ext.rowStyleClass, row);
    };
    /**
     * @param {?} row
     * @return {?}
     */
    PngTableComponent.prototype.getRowStyle = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        /** @type {?} */
        var style$$1 = CommonsUtils.getValue(this.$props.$ext.rowStyle, row) || {};
        if (this.$props.$ext.rowHeight) {
            style$$1['height'] = this.$props.$ext.rowHeight;
        }
        return style$$1;
    };
    /**
     * @param {?} column
     * @return {?}
     */
    PngTableComponent.prototype.getHeaderStyleClass = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return CommonsUtils.getValue(column.headerStyleClass, column);
    };
    /**
     * @param {?} column
     * @return {?}
     */
    PngTableComponent.prototype.getHeaderStyle = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return CommonsUtils.getValue(column.headerStyle, column);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableComponent.prototype.rowSelect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.updateTouch();
        this.value = DataItemUtils.getItemValue(event, this.$props.$ext.dataItemProps && this.$props.$ext.dataItemProps.valueKey);
    };
    /**
     * @param {?=} state
     * @return {?}
     */
    PngTableComponent.prototype.load = /**
     * @param {?=} state
     * @return {?}
     */
    function (state$$1) {
        this.apiDataProps = this.getApiDataProps(state$$1);
        this.cd.markForCheck();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PngTableComponent.prototype.onDataReady = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var dataPath = CommonsUtils.get(this.$props, '$ext.apiDataProps.dataPath');
        if (dataPath && dataPath !== '/') {
            this.bodyData$.next(data);
        }
        else {
            this.bodyData$.next(data.items || []);
        }
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    PngTableComponent.prototype.showOverlay = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        if (ctx && ctx.content) {
            this.overlayContext = __assign({ dismissable: true, showCloseIcon: true }, ctx);
            this.overlayPanel.hide();
            this.overlayPanel.toggle(ctx.$event);
            this.cd.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    PngTableComponent.prototype.hidePanel = /**
     * @return {?}
     */
    function () {
        this.overlayPanel.hide();
    };
    /**
     * @return {?}
     */
    PngTableComponent.prototype.resetQuery = /**
     * @return {?}
     */
    function () {
        this.simpleQuery = undefined;
        this.complexQuery = undefined;
    };
    /**
     * @return {?}
     */
    PngTableComponent.prototype.resetForeignQuery = /**
     * @return {?}
     */
    function () {
        this.eventQuery = [];
    };
    /**
     * @param {?} url
     * @param {?=} commands
     * @param {?=} params
     * @return {?}
     */
    PngTableComponent.prototype.navigate = /**
     * @param {?} url
     * @param {?=} commands
     * @param {?=} params
     * @return {?}
     */
    function (url, commands, params) {
        var _a;
        this.router.navigate([{ outlets: (_a = {}, _a[this.$props.$ext.routerOutlet] = __spread([url], commands), _a) }], {
            relativeTo: this.activatedRoute,
            skipLocationChange: false,
            queryParams: params
        });
    };
    /**
     * @return {?}
     */
    PngTableComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.$props && this.$props.$id) {
            StatesUtils.deleteState(this.$props.$id);
        }
        _super.prototype.ngOnDestroy.call(this);
    };
    /**
     * @param {?=} state
     * @return {?}
     */
    PngTableComponent.prototype.getTableQuery = /**
     * @param {?=} state
     * @return {?}
     */
    function (state$$1) {
        var _a;
        if (state$$1 && (state$$1.query || state$$1.filter)) {
            this.eventQuery = __spread(CommonsUtils.getArrayValue(state$$1['query'] || {}), CommonsUtils.getArrayValue(state$$1['filter'] || {}));
        }
        /** @type {?} */
        var filters = __spread(this.getColumnsFilters(), this.eventQuery, this.simpleQuery || [], CommonsUtils.getArrayValue(this.complexQuery) || []);
        /** @type {?} */
        var gApiDataProps = CommonsUtils.copy(CommonsUtils.get(this.$props, '$ext.apiDataProps'));
        /** @type {?} */
        var apiFilter = gApiDataProps.filter || {};
        if (apiFilter['$and']) {
            apiFilter['$and'] = __spread(apiFilter['$and'], filters);
        }
        else if (apiFilter['$or']) {
            apiFilter['$and'] = filters;
        }
        else {
            apiFilter = CommonsUtils.getArrayValue(apiFilter)
                .concat(filters);
        }
        apiFilter = apiFilter.filter(function (f) { return !CommonsUtils.isEmpty(f); });
        /** @type {?} */
        var aggProps = gApiDataProps.aggProps || {};
        aggProps = CommonsUtils.getArrayValue(aggProps).concat(this.getColumnsAggs());
        aggProps = aggProps.filter(function (a) { return Object.keys(a).length > 0; });
        /** @type {?} */
        var sort = gApiDataProps.sort || [];
        /** @type {?} */
        var tableMetaData = this.table.createLazyLoadMetadata();
        sort = CommonsUtils.getArrayValue(sort);
        /** @type {?} */
        var tableSort = tableMetaData.sortField;
        if (tableSort) {
            /** @type {?} */
            var column = this.getColumnByKey(tableSort);
            /** @type {?} */
            var sortKey = (column && column.sortKey) || tableSort;
            sort.push((_a = {}, _a[sortKey] = tableMetaData.sortOrder === 1 ? Order.ASC : Order.DESC, _a));
        }
        delete gApiDataProps.filter;
        delete gApiDataProps.aggProps;
        return __assign({}, gApiDataProps, { filter: apiFilter, aggProps: aggProps,
            sort: sort });
    };
    /**
     * @private
     * @return {?}
     */
    PngTableComponent.prototype.getColumnsFilters = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var filters = [];
        /** @type {?} */
        var columns = (this.columns$.value || []).concat(this.$props.frozenColumns || []);
        columns
            .filter(function (column) { return column.filters; })
            .forEach(function (column) {
            return column.filters.filter(function (f) { return f; })
                .forEach(function (f) {
                /** @type {?} */
                var query;
                switch (column.filterDataType || column.dataType || (column.dataField && column.dataField.dataType) || DataType.STRING) {
                    case DataType.NUMBER:
                    case DataType.DATE:
                        if (CommonsUtils.isArray(f)) {
                            query = rangeQuery(column.filterKey || column.key).gte(f[0]).lte(f[1]);
                        }
                        else {
                            query = rangeQuery(column.filterKey || column.key).gte(f).lte(f);
                        }
                        break;
                    default:
                        query = matchQuery(column.filterKey || column.key, f);
                }
                filters.push(query);
            });
        });
        return filters;
    };
    /**
     * @private
     * @return {?}
     */
    PngTableComponent.prototype.getColumnsAggs = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var aggs = [];
        /** @type {?} */
        var columns = (this.columns$.value || []).concat(this.$props.frozenColumns || []);
        columns
            .filter(function (column) { return column.aggProps; })
            .forEach(function (column) {
            aggs = aggs.concat(column.aggProps);
        });
        return aggs;
    };
    /**
     * @private
     * @param {?} props
     * @return {?}
     */
    PngTableComponent.prototype.resoleActionsColumn = /**
     * @private
     * @param {?} props
     * @return {?}
     */
    function (props) {
        /** @type {?} */
        var actionColumn;
        /** @type {?} */
        var actionColumnIndex = -1;
        props.columns.some(function (column, i) {
            if (column.isActionColumn) {
                actionColumn = column;
                actionColumnIndex = i;
                return true;
            }
            return false;
        });
        if (actionColumnIndex >= 0) {
            props.columns = CommonsUtils.removeByIndex(props.columns, actionColumnIndex);
        }
        if (props.$ext.hasAddAction) {
            this.addBtn = __assign({}, defaultAddButton, { context: this });
        }
        /** @type {?} */
        var buttons = [];
        if (props.$ext.hasViewAction) {
            buttons.push(__assign({}, defaultViewButton, { show: props.$ext.hasViewAction }));
        }
        if (props.$ext.hasDeleteAction) {
            buttons.push(__assign({}, defaultDeleteButton, { show: props.$ext.hasDeleteAction }));
        }
        if (props.$ext.hasAuditAction) {
            buttons.push(__assign({}, defaultAuditButton, { show: props.$ext.hasAuditAction }));
        }
        if (props.$ext.hasDownloadAction) {
            buttons.push(__assign({}, defaultDownloadButton, { show: props.$ext.hasDownloadAction }));
        }
        if (props.$ext.hasEditAction) {
            buttons.push(__assign({}, defaultEditButton, { show: props.$ext.hasEditAction }));
        }
        if (buttons.length > 0 && !actionColumn) {
            actionColumn = __assign({}, defaultActionColumn, actionColumn || {});
        }
        if (buttons.length > 0) {
            actionColumn.cellContent = __spread(CommonsUtils.getArrayValue(actionColumn.cellContent) || [], buttons);
        }
        if (actionColumn) {
            if (this.$props.$ext.frozenActionColumn) {
                actionColumn.frozen = true;
            }
            if (this.$props.$ext.rowActionsPlaceAhead) {
                ((/** @type {?} */ (this.$props.columns))).splice(0, 0, actionColumn);
            }
            else {
                this.$props.columns.push(actionColumn);
            }
        }
        if (this.$props.$ext.hasRowIndex) {
            this.$props.columns.splice(0, 0, defaultRowIndexColumn);
        }
    };
    /**
     * @private
     * @param {?=} state
     * @return {?}
     */
    PngTableComponent.prototype.getApiDataProps = /**
     * @private
     * @param {?=} state
     * @return {?}
     */
    function (state$$1) {
        /** @type {?} */
        var tableMetaData = this.table.createLazyLoadMetadata();
        /** @type {?} */
        var tableQuery = this.getTableQuery(state$$1);
        /** @type {?} */
        var apiDataProps = (/** @type {?} */ (__assign({}, tableQuery, { dataPath: '/', returnFields: this.dataColumnNames, from: tableMetaData.first, size: tableMetaData.rows })));
        apiDataProps.requestOptions = apiDataProps.requestOptions || {};
        if (!apiDataProps.requestOptions.tag) {
            apiDataProps.requestOptions.tag = this.$id;
        }
        return apiDataProps;
    };
    PngTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-table',
                    template: "<p-table #pngTable\n         (onDataReady)=\"onDataReady($event)\"\n         (onLazyLoad)=\"load($event)\"\n         (selectionChange)=\"rowSelect($event)\"\n         [(selection)]=\"selectedRows\"\n         [columns]=\"columns$|async\"\n         [context]=\"ctx\"\n         [erApiData]=\"apiDataProps\"\n         [props]=\"$props\"\n         [totalRecords]=\"(data$|async)?.total\"\n         [value]=\"bodyData$|async\"\n         erPropsBind\n>\n  <ng-template pTemplate=\"caption\">\n    <png-table-caption\n      (onSimpleSearch)=\"updateSimpleSearch($event)\"\n      [addButton]=\"addBtn\"\n      [caption]=\"$props.caption\"\n      [customerTpl]=\"template(templateNames.caption)\"\n      [hasAddAction]=\"$props.$ext.hasAddAction\"\n      [hasSearchBox]=\"$props.$ext.hasSearchBox\"\n      [hasSearchInput]=\"$props.$ext.hasSearchInput\"\n    >\n    </png-table-caption>\n    <ng-container *ngIf=\"$props.$ext.caption\">\n      <er-dyna-content [content]=\"$props.$ext.caption\" [context]=\"getEventContext()\"></er-dyna-content>\n    </ng-container>\n  </ng-template>\n\n  <ng-template let-columns pTemplate=\"colgroup\">\n    <ng-container *ngTemplateOutlet=\"colGroupTpl;\n                     context:{$implicit:$props,context:getEventContext(),columns:columns}\">\n    </ng-container>\n  </ng-template>\n\n\n  <ng-template let-columns pTemplate=\"header\">\n    <ng-container\n      *ngTemplateOutlet=\"template(templateNames.spanHeader); context:{$implicit:columns}\"></ng-container>\n    <ng-container *ngIf=\"$props.$ext.spanHeader\">\n      <span [outerHTML]=\"$props.$ext.spanHeader\"></span>\n    </ng-container>\n    <tr (onAggKeysSet)=\"updateColAggKeys($event)\"\n        (onFiltersSet)=\"updateColFilters($event)\"\n        [columns]=\"columns\"\n        [customerTpl]=\"template(templateNames.header)\"\n        png-table-header\n    >\n    </tr>\n\n    <ng-container *ngIf=\"(data$|async)?.aggs as aggValues\">\n      <tr [aggValues]=\"aggValues\"\n          [columns]=\"columns\"\n          [customerTpl]=\"template(templateNames.headerSummary)\"\n          png-table-summary\n      >\n      </tr>\n    </ng-container>\n  </ng-template>\n\n  <!--<ng-container *ngIf=\"$$props.frozenValue\">-->\n  <!--<ng-template pTemplate=\"frozenrows\" let-row let-columns=\"columns\">-->\n  <!--<ng-container *ngTemplateOutlet=\"template(templateNames.frozenRows,defaultBodyTpl);-->\n  <!--context:{$implicit:row,columns:columns,$props:$$props,table:pngTable}\">-->\n  <!--</ng-container>-->\n  <!--</ng-template>-->\n  <!--</ng-container>-->\n\n  <ng-template let-columns=\"columns\" let-expanded=\"expanded\" let-row let-rowIndex=\"rowIndex\" pTemplate=\"body\">\n    <tr [cellTpl]=\"template(templateNames.cell)\"\n        [columns]=\"columns\"\n        [customerTpl]=\"template(templateNames.body)\"\n        [dataCellTpl]=\"template(templateNames.dataCell)\"\n        [expanded]=\"expanded\"\n        [ngClass]=\"getRowStyleClass({row: row, rowIndex: rowIndex})\"\n        [ngStyle]=\"getRowStyle({row: row, rowIndex: rowIndex})\"\n        [pSelectableRowIndex]=\"rowIndex\"\n        [pSelectableRow]=\"row\"\n        [rowIndex]=\"rowIndex\"\n        [row]=\"row\"\n        png-table-body-row\n    >\n    </tr>\n  </ng-template>\n\n  <ng-template let-columns=\"columns\" let-row pTemplate=\"rowexpansion\">\n    <tr [columns]=\"dataColumns\"\n        [customerTpl]=\"template(templateNames.rowExpansion)\"\n        [rowId]=\"row[$props.dataKey || 'id']\"\n        png-table-expanded-row\n    >\n    </tr>\n  </ng-template>\n\n  <ng-template let-columns pTemplate=\"footer\">\n    <tr [columns]=\"columns\"\n        [customerTpl]=\"template(templateNames.footer)\"\n        png-table-footer\n    >\n    </tr>\n  </ng-template>\n\n  <ng-container *ngIf=\"(data$|async)?.aggs as aggValues\">\n    <ng-template pTemplate=\"summary\">\n      <tr [aggValues]=\"aggValues\"\n          [columns]=\"dataColumns\"\n          [customerTpl]=\"template(templateNames.footerSummary)\"\n          png-table-summary\n      >\n      </tr>\n    </ng-template>\n  </ng-container>\n\n  <ng-template let-state pTemplate=\"paginatorleft\">\n    <ng-container *ngIf=\"(data$|async)?.total as totalRecords\">\n      <ng-container\n        *ngTemplateOutlet=\"template(templateNames.paginatorLeft,paginationLeftTpl);context:{$implicit:state,totalRecords:totalRecords}\">\n      </ng-container>\n    </ng-container>\n  </ng-template>\n\n  <ng-template let-state pTemplate=\"paginatorright\">\n    <div class=\"d-flex align-content-center\">\n      <er-http-status [tag]=\"$id\" class=\"mr-2\"></er-http-status>\n      <ng-container *ngIf=\"$props.$ext.hasColumnSelector\">\n        <png-table-column-selector\n          (onColumnsChange)=\"updateColumns($event)\"\n          [columns]=\"columns$|async\"\n          [optionColumns]=\"$props.columns\"\n        >\n        </png-table-column-selector>\n      </ng-container>\n      <ng-container *ngIf=\"$props.$ext.hasPaginatorRight\">\n        <ng-container\n          *ngTemplateOutlet=\"template(templateNames.paginatorRight);context:{$implicit:state}\"></ng-container>\n      </ng-container>\n    </div>\n  </ng-template>\n\n\n  <ng-template #colGroupTpl let-columns=\"columns\" let-props>\n    <colgroup>\n      <col *ngIf=\"props.$ext.rowExpandable\" style=\"width: 3em\">\n      <col *ngIf=\"props.$ext.hasRowCheckbox\" style=\"width: 3em\">\n      <col *ngFor=\"let col of columns\" [ngClass]=\"getHeaderStyleClass(col)\"\n           [ngStyle]=\"getHeaderStyle(col)\"\n           [width]=\"col.width\"\n      >\n    </colgroup>\n  </ng-template>\n\n  <ng-template #defaultFrozonRowsTpl let-columns=\"columns\" let-row>\n  </ng-template>\n\n  <ng-template let-columns pTemplate=\"emptymessage\">\n    <tr>\n      <td [attr.colspan]=\"columns?.length\">\n        <strong>{{$props.$ext.emptyMessage}}</strong>\n      </td>\n    </tr>\n  </ng-template>\n</p-table>\n\n<ng-template #paginationLeftTpl let-state let-totalRecords=\"totalRecords\">\n  <span class=\"paginationLeft\"><span *ngIf=\"simpleQuery || complexQuery\"\n                                     class=\"font-weight-bold text-danger \"><u>\u641C\u7D22\u7ED3\u679C</u></span>\u663E\u793A {{totalRecords < 1 ? 0 : state.first + 1}}\n    -\n  {{totalRecords > 0 ? ((state.rows+ state.first) <= totalRecords ? (state.rows + state.first) :\n  totalRecords) : 0}}\uFF0C\u5171 {{totalRecords ? totalRecords : 0}} \u6761</span>\n</ng-template>\n\n\n<p-overlayPanel #overlayPanel [dismissable]=\"overlayContext?.dismissable\"\n                [showCloseIcon]=\"overlayContext?.showCloseIcon\"\n                [id]=\"overlayContext?.id\"\n                [ngStyle]=\"overlayContext?.overlayStyle\"\n                [styleClass]=\"overlayContext?.overlayStyleClass\">\n  <ng-container *ngIf=\"overlayContext\">\n    <ng-container [ngSwitch]=\"overlayContext.type\">\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.PANEL\">\n        <er-dyna-content [content]=\"overlayContext.content\"\n                         [context]=\"overlayContext.context\"\n                         [styleClass]=\"overlayContext.styleClass\"\n                         [style]=\"overlayContext.style\"\n        ></er-dyna-content>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.TABLE\">\n        <png-table erPropsBind [props]=\"overlayContext.content\"></png-table>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.CHART\">\n        <png-chart erPropsBind [props]=\"overlayContext.content\"></png-chart>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.MENU\">\n        <p-menu appendTo=\"body\" [popup]=\"true\" [model]=\"overlayContext.content\"></p-menu>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.TREE\">\n        <pre [erJsonViewer]=\"overlayContext.content\" openLevel=\"1\"></pre>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.FRAME\">\n        <iframe [ngClass]=\"overlayContext.styleClass\" [ngStyle]=\"overlayContext.style\"\n                [src]=\"overlayContext.content|erSafeHtml:'resource'\" frameborder=\"0\"\n                allowfullscreen></iframe>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"OVERLAY_TYPE.COMPONENT\">\n        <er-dyna-content [content]=\"overlayContext.content\"\n                         [context]=\"overlayContext.context\"\n                         [styleClass]=\"overlayContext.styleClass\"\n                         [style]=\"overlayContext.style\"\n        ></er-dyna-content>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</p-overlayPanel>\n\n<!--<div style=\"position: relative;\">-->\n<!--<p-paginator rows=\"10\"-->\n<!--(onLazyLoad)=\"load($event)\"-->\n<!--(onPageChange)=\"load($event)\"-->\n<!--[totalRecords]=\"totalRecords\"-->\n<!--[rowsPerPageOptions]=\"[10, 25]\">-->\n<!--</p-paginator>-->\n<!--<span style=\"position: absolute; top:3px; right:5px; margin: 5px;\">Total records: {{totalRecords}} </span>-->\n<!--</div>-->\n",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngTableComponent; }),
                            multi: true
                        }],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["/deep/ .ui-paginator{font-size:.8rem!important}/deep/ td.col-expandable,/deep/ th.col-expandable{width:1em}/deep/ td.col-checkbox,/deep/ th.col-checkbox{width:1em}/deep/ td.col-radio,/deep/ th.col-radio{width:5px}/deep/ td.row-index,/deep/ th.row-index{width:100px}/deep/ td.circle,/deep/ th.circle{border-radius:50%!important}/deep/ td.col-summary,/deep/ th.col-summary{background-color:#068020;color:#fff!important}"]
                }] }
    ];
    /** @nocollapse */
    PngTableComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Router },
        { type: ActivatedRoute }
    ]; };
    PngTableComponent.propDecorators = {
        table: [{ type: ViewChild, args: ['pngTable',] }],
        overlayPanel: [{ type: ViewChild, args: ['overlayPanel',] }],
        popupMenu: [{ type: ViewChild, args: [Menu,] }]
    };
    return PngTableComponent;
}(DataAwareControlWrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * <png-tooltip [control]="ngForm.get('start')">
 * <input pInputText formControlName="start">
 * </png-tooltip>
 */
var ValidateMessageTooltipComponent = /** @class */ (function () {
    function ValidateMessageTooltipComponent(domHandler, controlContainer) {
        this.domHandler = domHandler;
        this.controlContainer = controlContainer;
        this.tooltipPosition = 'right';
    }
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.control && this.controlContainer) {
            /** @type {?} */
            var form = this.controlContainer.formDirective ? ((/** @type {?} */ (this.controlContainer.formDirective))).form : null;
            if (form) {
                this.control = FormUtils.getFormControl.apply(FormUtils, __spread([form], this.controlContainer.path, [this.controlName]));
            }
        }
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.onMouseEnter = /**
     * @return {?}
     */
    function () {
        if (this.control.invalid) {
            this.showErrMsg();
        }
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.onMouseLeave = /**
     * @return {?}
     */
    function () {
        this.hide();
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.onFocusIn = /**
     * @return {?}
     */
    function () {
        if (this.control.invalid) {
            this.showErrMsg();
        }
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.onFocusOut = /**
     * @return {?}
     */
    function () {
        this.hide();
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.onKeyup = /**
     * @return {?}
     */
    function () {
        if (this.control.invalid) {
            this.showErrMsg();
        }
        else {
            this.hide();
        }
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.showErrMsg = /**
     * @return {?}
     */
    function () {
        this.errorMessage = this.getErrorMsg();
        if (this.errorMessage !== null && this.errorMessage !== undefined) {
            this.show();
        }
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.getErrorMsg = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var errMsgs = ValidateUtils.getErrorMessage(this.control.errors, this.messages);
        if (Object.keys(errMsgs).length > 0) {
            return errMsgs[Object.keys(errMsgs)[0]];
        }
        return undefined;
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.ngOnDestroy();
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        /** 如果存在则不新建，只需要修改里面的内容 **/
        if (!this.container) {
            this.create();
        }
        else {
            this.domHandler.findSingle(this.container, '.ui-tooltip-text').innerText = this.errorMessage;
        }
        /** @type {?} */
        var offset = this.domHandler.getOffset(this.in.nativeElement);
        /** @type {?} */
        var targetTop = offset.top;
        /** @type {?} */
        var targetLeft = offset.left;
        /** @type {?} */
        var left;
        /** @type {?} */
        var top;
        this.container.style.display = 'block';
        switch (this.tooltipPosition) {
            case 'right':
                left = targetLeft + this.domHandler.getOuterWidth(this.in.nativeElement);
                top = targetTop + (this.domHandler.getOuterHeight(this.in.nativeElement) - this.domHandler.getOuterHeight(this.container)) / 2;
                break;
            case 'left':
                left = targetLeft - this.domHandler.getOuterWidth(this.container);
                top = targetTop + (this.domHandler.getOuterHeight(this.in.nativeElement) - this.domHandler.getOuterHeight(this.container)) / 2;
                break;
            case 'top':
                left = targetLeft + (this.domHandler.getOuterWidth(this.in.nativeElement) - this.domHandler.getOuterWidth(this.container)) / 2;
                top = targetTop - this.domHandler.getOuterHeight(this.container);
                break;
            case 'bottom':
                left = targetLeft + (this.domHandler.getOuterWidth(this.in.nativeElement) - this.domHandler.getOuterWidth(this.container)) / 2;
                top = targetTop + this.domHandler.getOuterHeight(this.in.nativeElement);
                break;
        }
        this.container.style.left = left + 'px';
        this.container.style.top = top + 'px';
        this.container.style.zIndex = 999999; // different from PrimeNg
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.create = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var styleClass = 'ui-widget ui-tooltip ui-tooltip-' + this.tooltipPosition;
        this.container = document.createElement('div');
        if (this.tooltipStyleClass) {
            styleClass += ' ' + this.tooltipStyleClass;
        }
        this.container.className = styleClass;
        /** @type {?} */
        var tooltipArrow = document.createElement('div');
        tooltipArrow.className = 'ui-tooltip-arrow';
        this.container.appendChild(tooltipArrow);
        /** @type {?} */
        var tooltipText = document.createElement('div');
        tooltipText.className = 'ui-tooltip-text ui-shadow ui-corner-all';
        tooltipText.innerHTML = this.errorMessage;
        if (this.positionStyle) {
            this.container.style.position = this.positionStyle;
        }
        this.container.appendChild(tooltipText);
        document.body.appendChild(this.container);
    };
    /**
     * @return {?}
     */
    ValidateMessageTooltipComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.container && this.container.parentElement) {
            document.body.removeChild(this.container);
        }
        this.container = null;
    };
    ValidateMessageTooltipComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-tooltip',
                    template: "\n    <div #in style=\"display:inline-block;position:relative\">\n      <ng-content></ng-content>\n    </div>\n  ",
                    providers: [DomHandler]
                }] }
    ];
    /** @nocollapse */
    ValidateMessageTooltipComponent.ctorParameters = function () { return [
        { type: DomHandler },
        { type: ControlContainer, decorators: [{ type: Optional }] }
    ]; };
    ValidateMessageTooltipComponent.propDecorators = {
        tooltipPosition: [{ type: Input }],
        control: [{ type: Input }],
        controlName: [{ type: Input }],
        positionStyle: [{ type: Input }],
        tooltipStyleClass: [{ type: Input }],
        messages: [{ type: Input }],
        in: [{ type: ViewChild, args: ['in',] }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }],
        onFocusIn: [{ type: HostListener, args: ['focusin',] }],
        onFocusOut: [{ type: HostListener, args: ['focusout',] }],
        onKeyup: [{ type: HostListener, args: ['keyup',] }]
    };
    return ValidateMessageTooltipComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PNG_TREE_NODE_KEYS = {
    idKey: 'id',
    labelKey: 'label',
    parentKey: 'parent',
    childrenKey: 'children',
    leafKey: 'leaf',
    dataKey: 'data',
    expandedKey: 'expanded'
};
/** @type {?} */
var DEFAULT_PNG_TREE_PROPS = {
    style: { 'max-height.px': 500, 'max-width.px': 350, 'overflow': 'auto' },
    emptyMessage: '没有节点信息',
    $ext: {
        apiDataProps: {
            dataPath: 'items',
            size: 9999
        },
        dataItemProps: {
            idKey: 'id',
            parentKey: 'parent',
            labelKey: 'name',
            leafKey: 'leaf'
        },
        nodesFormat: 'plainArray',
        lazy: false,
        hasSearchBox: true,
        autoExpandLevel: 1,
        expandedIcon: 'fa fa-folder-open',
        collapsedIcon: 'fa fa-folder',
        icon: 'fa fa-leaf'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngTreeComponent = /** @class */ (function (_super) {
    __extends(PngTreeComponent, _super);
    function PngTreeComponent(cd) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.templateNames = {
            icon: 'icon',
            node: 'node'
        };
        _this.onEmptyNode = new EventEmitter();
        _this.onLazyLoad = new EventEmitter();
        _this.$defaultProps = DEFAULT_PNG_TREE_PROPS;
        _this.modelFormatter = _this.formatModel;
        _this.valueParser = _this.parseValue;
        return _this;
    }
    Object.defineProperty(PngTreeComponent.prototype, "selection", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selection;
        },
        set: /**
         * @param {?} selection
         * @return {?}
         */
        function (selection) {
            this._selection = selection;
            this.value = selection;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PngTreeComponent.prototype.onPropsInit = /**
     * @return {?}
     */
    function () {
        this.filtered = false;
        this.loading$ = HTTP_TAG_STATE$(this.$props.$id);
        if (this.$props.$ext.dataItems) {
            this.data$.next(this.$props.$ext.dataItems);
        }
        StatesUtils.create(this.$props.$id, {
            component: this
        }, true);
    };
    /**
     * @return {?}
     */
    PngTreeComponent.prototype.load = /**
     * @return {?}
     */
    function () {
        this.apiDataProps = __assign({}, this.apiDataProps);
        this.cd.markForCheck();
    };
    /**
     * @param {?} model
     * @return {?}
     */
    PngTreeComponent.prototype.formatModel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (model) {
            this.selectedNodeValues = model;
        }
        return model;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PngTreeComponent.prototype.parseValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        /** @type {?} */
        var selectedNodeValues;
        if (CommonsUtils.isArray(value)) {
            selectedNodeValues = CommonsUtils.flattenDeep(value).map(function (node) { return _this.getSelectedNodeValues(node); });
        }
        else if (CommonsUtils.isJson(value)) {
            selectedNodeValues = this.getSelectedNodeValues(value);
        }
        selectedNodeValues = CommonsUtils.flatten(selectedNodeValues);
        selectedNodeValues = CommonsUtils.unique(selectedNodeValues, this.$props.$ext.dataItemProps.idKey);
        selectedNodeValues = CommonsUtils.orderBy(selectedNodeValues, this.$props.$ext.dataItemProps.idKey, 'asc');
        if (this.$props && this.$props.$id) {
            StatesUtils.update(this.$props.$id, {
                selectedNodeValues: selectedNodeValues
            });
        }
        this.selectedNodeValues = selectedNodeValues;
        return selectedNodeValues;
    };
    /**
     * @return {?}
     */
    PngTreeComponent.prototype.expandAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.data$.value.forEach(function (node) {
            TreeUtils.expandNode(node, true, _this.$props.$ext);
        });
    };
    /**
     * @return {?}
     */
    PngTreeComponent.prototype.collapseAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.data$.value.forEach(function (node) {
            TreeUtils.expandNode(node, false, _this.$props.$ext);
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTreeComponent.prototype.filter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var data = this.applyFilter(event.target.value);
        this.data$.next(data);
        this.filtered = true;
        this.expandAll();
        //  this.cd.detectChanges();
    };
    /**
     * @param {?} filterValue
     * @return {?}
     */
    PngTreeComponent.prototype.applyFilter = /**
     * @param {?} filterValue
     * @return {?}
     */
    function (filterValue) {
        var _this = this;
        if (!filterValue) {
            this.clearFilter();
            return this.unFilteredValue;
        }
        else {
            filterValue = filterValue.toLowerCase();
            return TreeUtils.filter(this.unFilteredValue, function (node) {
                /** @type {?} */
                var py = node['$py'];
                if (!py) {
                    py = PinyinUtil.getFirstLetter(node.label);
                    node['$py'] = py;
                }
                /** @type {?} */
                var idKey = _this.$props.$ext.dataItemProps && _this.$props.$ext.dataItemProps.idKey;
                /** @type {?} */
                var sVal = ((node.data && node.data[idKey]) || '') + '';
                /** @type {?} */
                var sLab = node.label || '';
                if (/^\w+$/.test(filterValue)) {
                    return sLab.startsWith(filterValue) || sVal.startsWith(filterValue) || py.startsWith(filterValue);
                }
                else {
                    return RegUtils.test(sVal, filterValue) || RegUtils.test(py, filterValue);
                }
            });
        }
    };
    /**
     * @return {?}
     */
    PngTreeComponent.prototype.clearFilter = /**
     * @return {?}
     */
    function () {
        this.filterValue = '';
        this.data$.next(__spread(this.unFilteredValue));
        this.filtered = false;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    PngTreeComponent.prototype.getSelectedNodeValues = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var value = this.getSelectedNodeValue(node);
        return CommonsUtils.flattenDeep(value);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTreeComponent.prototype.onNodeExpand = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.expandedNode = event.node;
        if (!event.node.children && this.$props.$ext.lazy) {
            this.onLazyLoad.emit(this.getEventContext(event));
        }
        else {
            this.resolveNode(event.node);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTreeComponent.prototype.onNodeSelect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.selectedNode = event.node && event.node[PNG_TREE_NODE_KEYS.dataKey] || event.node;
        if (this.$props && this.$props.$id) {
            StatesUtils.update(this.$props.$id, {
                selectedNode: this.selectedNode
            });
        }
        this.updateTouch();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTreeComponent.prototype.onNodeUnSelect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.updateTouch();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTreeComponent.prototype.onTreeDataReady = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var treeNodes = this.createTreeNodes(event);
        this.initSelection(treeNodes);
        this.unFilteredValue = treeNodes;
        if (treeNodes.length > 0) {
            /** @type {?} */
            var level = this.$props.$ext.autoExpandLevel;
            /** @type {?} */
            var nodeId = void 0;
            if (this.expandedNode) {
                /** @type {?} */
                var node = this.expandedNode;
                nodeId = node['id'];
                while (node.parent) {
                    level++;
                    node = node.parent;
                }
            }
            TreeUtils.expandNode(treeNodes[0], true, this.$props.$ext, level, 1, nodeId);
        }
        else if (treeNodes.length === 0 || (treeNodes.length === 1 && !treeNodes['children'])) {
            this.onEmptyNode.emit();
        }
        if (this.$props.$ext.filter) {
            /** @type {?} */
            var filter$$1 = this.$props.$ext.filter;
            if (CommonsUtils.isString(filter$$1)) {
                treeNodes = this.applyFilter((/** @type {?} */ (filter$$1)));
            }
            else {
                treeNodes = filter$$1['method'](treeNodes);
            }
        }
        this.data$.next(treeNodes);
    };
    /**
     * @param {?} treeNodes
     * @return {?}
     */
    PngTreeComponent.prototype.initSelection = /**
     * @param {?} treeNodes
     * @return {?}
     */
    function (treeNodes) {
        var _this = this;
        if (this._selection) {
            this.tree.selection = this._selection;
            this.tree.propagateUp((/** @type {?} */ (this._selection)), true);
            return;
        }
        if (this.selectedNodeValues && treeNodes) {
            this._selection = [];
            /** @type {?} */
            var values = CommonsUtils.getArrayValue(this.selectedNodeValues);
            for (var i = 0; i < values.length; i++) {
                /** @type {?} */
                var found = TreeUtils.findNode(treeNodes, values[i], this.$props.$ext);
                if (found) {
                    ((/** @type {?} */ (this._selection))).push(found);
                }
            }
            this.tree.selection = this._selection;
            ((/** @type {?} */ (this._selection))).forEach(function (node) {
                _this.tree.propagateUp(node, true);
            });
        }
    };
    /**
     * @return {?}
     */
    PngTreeComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.$props && this.$props.$id) {
            StatesUtils.deleteState(this.$props.$id);
        }
        _super.prototype.ngOnDestroy.call(this);
    };
    /**
     * @private
     * @param {?} node
     * @param {?=} nodes
     * @return {?}
     */
    PngTreeComponent.prototype.getSelectedNodeValue = /**
     * @private
     * @param {?} node
     * @param {?=} nodes
     * @return {?}
     */
    function (node, nodes) {
        if (CommonsUtils.isEmpty(node)) {
            return undefined;
        }
        if (node['isVirtual']) {
            return undefined;
        }
        nodes = nodes || [];
        /** @type {?} */
        var data = node[PNG_TREE_NODE_KEYS.dataKey];
        if (CommonsUtils.isEmpty(data)) {
            return undefined;
        }
        /** @type {?} */
        var val;
        if (this.$props.$ext.dataItemProps && this.$props.$ext.dataItemProps.valueKey) {
            val = DataItemUtils.getItemValue(data, this.$props.$ext.dataItemProps.valueKey);
        }
        else {
            val = {};
            val[this.$props.$ext.dataItemProps.idKey] = data[this.$props.$ext.dataItemProps.idKey];
            val[(/** @type {?} */ (this.$props.$ext.dataItemProps.labelKey))] = data[(/** @type {?} */ (this.$props.$ext.dataItemProps.labelKey))];
            if (this.$props.$ext.dataItemProps.typeKey) {
                val[this.$props.$ext.dataItemProps.typeKey] = data[this.$props.$ext.dataItemProps.typeKey];
            }
        }
        nodes.push(val);
        if (node[PNG_TREE_NODE_KEYS.parentKey]) {
            this.getSelectedNodeValue(node[PNG_TREE_NODE_KEYS.parentKey], nodes);
        }
        return nodes;
    };
    /**
     * @private
     * @param {?} nodes
     * @return {?}
     */
    PngTreeComponent.prototype.createTreeNodes = /**
     * @private
     * @param {?} nodes
     * @return {?}
     */
    function (nodes) {
        if (!nodes) {
            return [];
        }
        /** @type {?} */
        var treeNodes = __spread(nodes);
        if (this.$props.$ext.nodesFormat === 'plainArray') {
            treeNodes = TreeUtils.transNodes(treeNodes, {
                src: this.$props.$ext.dataItemProps,
                node: PNG_TREE_NODE_KEYS
            }, this.$props.$ext.root, this.$props.$ext.lazy);
        }
        if (treeNodes[0]) {
            TreeUtils.initNode(treeNodes[0], this.$props.$ext);
        }
        /** @type {?} */
        var rootNode = {};
        if (this.$props.$ext.virtualRoot) {
            if (CommonsUtils.isString(this.$props.$ext.virtualRoot)) {
                rootNode.label = (/** @type {?} */ (this.$props.$ext.virtualRoot));
            }
            else {
                rootNode = (/** @type {?} */ (this.$props.$ext.virtualRoot));
            }
            rootNode.children = treeNodes;
            rootNode['isVirtual'] = true;
            return [rootNode];
        }
        else {
            return treeNodes;
        }
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    PngTreeComponent.prototype.resolveNode = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        if (node) {
            TreeUtils.initNode(node, this.$props.$ext);
            if (node.children) {
                node.children.forEach(function (child) { return TreeUtils.initNode(child, _this.$props.$ext); });
            }
        }
    };
    PngTreeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-tree',
                    template: "<div class=\"ui-g ui-fluid\">\n\n  <div *ngIf=\"$props.$ext.hasSearchBox\" class=\"ui-g-12\">\n     <span class=\"inner-addon\">\n       <i class=\"fa fa-search text-primary left\"></i>\n       <input (keyup)=\"filter($event)\" [(ngModel)]=\"filterValue\" pInputText placeholder=\"\u8F93\u5165\u4EE3\u7801\u6216\u540D\u79F0\u9996\u5B57\u6BCD\" title=\"\u641C\u7D22\u8282\u70B9\"/>\n       <i (click)=\"clearFilter()\" *ngIf=\"filtered\" class=\"fa fa-trash text-muted right\" title=\"\u6E05\u9664\u641C\u7D22\u5185\u5BB9\"></i>\n     </span>\n  </div>\n\n  <p-card class=\"w-100\" erAnimate=\"slideInLeft\">\n    <span class=\"pull-right\">\n          <i class=\"fa fa-arrow-circle-up mr-1\" (click)=\"collapseAll()\" title=\"\u6536\u8D77\u5168\u90E8\"></i>\n          <i (click)=\"expandAll()\" class=\"fa fa-arrow-circle-down mr-1\" title=\"\u5C55\u5F00\u5168\u90E8\"></i>\n          <i (click)=\"load()\" class=\"fa fa-refresh\" title=\"\u5237\u65B0\u6811\"></i>\n      </span>\n    <p-tree #pngTree\n            erPropsBind\n            [props]=\"$props\"\n            [context]=\"ctx\"\n            [erApiData]=\"apiDataProps\"\n            [value]=\"data$|async\"\n            [(selection)]=\"selection\"\n            [loading]=\"loading$ | async\"\n            (onDataReady)=\"onTreeDataReady($event)\"\n            (onNodeExpand)=\"onNodeExpand($event)\"\n            (onNodeSelect)=\"onNodeSelect($event)\"\n            (onNodeUnselect)=\"onNodeUnSelect($event)\"\n    >\n      <ng-template pTemplate=\"default\" let-node>\n        <ng-container *ngTemplateOutlet=\"template(templateNames.node,defaultNodeTpl);\n                                  context:{$implicit: node,props:$props}\"></ng-container>\n      </ng-template>\n\n      <ng-container *ngIf=\"template(templateNames.icon)\">\n        <ng-template let-node pTemplate=\"picture\">\n          <ng-container *ngTemplateOutlet=\"template(templateNames.icon);\n                                  context:{$implicit: node,props:$props}\"></ng-container>\n        </ng-template>\n      </ng-container>\n\n      <ng-template #defaultNodeTpl let-node let-props=\"props\">\n        <!--<input type=\"radio\" name=\"tree_radio\" *ngIf=\"props.selectionMode === 'radio' && !node['children']\"/>-->\n        <span [innerHTML]=\"node['label']\" [ngClass]=\"{'ui-state-highlight':node.matched}\"></span>\n      </ng-template>\n\n    </p-tree>\n  </p-card>\n\n</div>\n",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngTreeComponent; }),
                            multi: true
                        }],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["/deep/ li:focus{outline:green solid 1px!important}/deep/ .ui-state-highlight{background-color:#9acd32!important;color:inherit!important;font-weight:700}/deep/ .ui-treenode-content-selected .ui-state-highlight{background-color:transparent!important;font-size:1.1em!important;font-weight:700;color:red!important}"]
                }] }
    ];
    /** @nocollapse */
    PngTreeComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    PngTreeComponent.propDecorators = {
        tree: [{ type: ViewChild, args: ['pngTree',] }],
        onEmptyNode: [{ type: Output }],
        onLazyLoad: [{ type: Output }]
    };
    return PngTreeComponent;
}(DataAwareControlWrapperComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngTreeNavTableComponent = /** @class */ (function (_super) {
    __extends(PngTreeNavTableComponent, _super);
    function PngTreeNavTableComponent(cd, router, activatedRoute) {
        var _this = _super.call(this) || this;
        _this.cd = cd;
        _this.router = router;
        _this.activatedRoute = activatedRoute;
        _this.switchable = true;
        _this.hideTree = false;
        _this.$subscriptions = _this.router.events.subscribe(function (event) {
            if (event instanceof NavigationEnd) {
                _this.isFormOutlet = event.url.indexOf('(aux:') > 0;
                if (_this.isRestore) {
                    _this.isRestore = false;
                    _this.refresh();
                }
                _this.cd.markForCheck();
            }
        });
        return _this;
    }
    Object.defineProperty(PngTreeNavTableComponent.prototype, "isFormOutlet", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isFormOutlet;
        },
        set: /**
         * @param {?} formOutlet
         * @return {?}
         */
        function (formOutlet) {
            if (this.isFormOutlet !== formOutlet) {
                this._isFormOutlet = formOutlet;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PngTreeNavTableComponent.prototype.refresh = /**
     * @return {?}
     */
    function () {
        this.pngTable.load();
        if (this.pngTree && this.refreshTree) {
            this.refreshTree = false;
            this.pngTree.load();
        }
    };
    /**
     * @param {?} props
     * @return {?}
     */
    PngTreeNavTableComponent.prototype.beforeRoutePropsBind = /**
     * @param {?} props
     * @return {?}
     */
    function (props) {
        this.tree = undefined;
        this.table = undefined;
        this.switchable = true;
        this.hideTree = false;
        if (props.caption) {
            CommonsUtils.set(props, 'table.caption', props.caption);
        }
        return props;
    };
    /**
     * @return {?}
     */
    PngTreeNavTableComponent.prototype.afterRoutePropsBind = /**
     * @return {?}
     */
    function () {
        if (!this.tree) {
            this.switchable = false;
        }
        else {
            this.hideTree = false;
            this.switchable = true;
            this.tree.$id = IdUtils.getRandom();
            this.tree.$container = this;
            CommonsUtils.set(this.tree, '$ext.$container', this);
        }
        if (this.table) {
            this.table.$id = IdUtils.getRandom();
            this.table.$container = this;
            CommonsUtils.set(this.table, '$ext.$container', this);
        }
    };
    /**
     * @return {?}
     */
    PngTreeNavTableComponent.prototype.closeTree = /**
     * @return {?}
     */
    function () {
        this.hideTree = true;
    };
    /**
     * @return {?}
     */
    PngTreeNavTableComponent.prototype.back = /**
     * @return {?}
     */
    function () {
        this.isRestore = true;
        this.router.navigate(['./', { outlets: { aux: null } }], {
            relativeTo: this.activatedRoute
        });
    };
    PngTreeNavTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-tree-nav-table',
                    template: "\n    <div [hidden]=\"isFormOutlet\">\n      <er-fluid-container>\n        <er-left-right [hideLeft]=\"!tree || hideTree\" [switchable]=\"!!tree && switchable\">\n          <ng-template erTypedTemplate=\"left\">\n            <png-panel *ngIf=\"tree\" [icon]=\"tree.$ext?.captionIcon || 'fa fa-tree'\" [header]=\"tree.$ext?.caption || '\u7BA1\u7406\u6811'\">\n              <png-tree erPropsBind [props]=\"tree\" (onEmptyNode)=\"closeTree()\"></png-tree>\n            </png-panel>\n          </ng-template>\n          <ng-template erTypedTemplate=\"right\">\n            <div *ngIf=\"table\">\n              <div [@fadeIn]=\"true\">\n                <png-table erPropsBind [props]=\"table\"></png-table>\n              </div>\n            </div>\n          </ng-template>\n        </er-left-right>\n      </er-fluid-container>\n    </div>\n    <router-outlet name=\"aux\">\n      <ng-container *ngTemplateOutlet=\"goBack\"></ng-container>\n    </router-outlet>\n    <ng-container *ngTemplateOutlet=\"goBack\"></ng-container>\n    <ng-template #goBack>\n      <div *ngIf=\"isFormOutlet\">\n        <a (click)=\"back()\" class=\"btn btn-outline-primary\"\n           title=\"\u8FD4\u56DE\u5230\u6570\u636E\u6D4F\u89C8\"> <i class=\"fa fa-2x text-danger fa-sign-out fa-rotate-180\"></i> \u8FD4\u56DE</a>\n\n      </div>\n    </ng-template>\n  ",
                    animations: [
                        ANIMATIONS.zoomIn,
                        ANIMATIONS.fadeIn
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngTreeNavTableComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Router },
        { type: ActivatedRoute }
    ]; };
    PngTreeNavTableComponent.propDecorators = {
        tree: [{ type: Input }],
        table: [{ type: Input }],
        switchable: [{ type: Input }],
        hideTree: [{ type: Input }],
        pngTable: [{ type: ViewChild, args: [PngTableComponent,] }],
        pngTree: [{ type: ViewChild, args: [PngTreeComponent,] }]
    };
    return PngTreeNavTableComponent;
}(RouteBindComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngStepComponent = /** @class */ (function () {
    function PngStepComponent() {
        this.active = false;
    }
    PngStepComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-step',
                    template: "\n    <div *ngIf=\"active\" [ngClass]=\"styleClass\" [ngStyle]=\"style\" class=\"ui-widget-content ui-corner-all step-container\">\n      <ng-content></ng-content>\n    </div>\n  ",
                    styles: ['.step-container {padding: 45px 25px 45px 25px; margin-bottom: 20px;}']
                }] }
    ];
    PngStepComponent.propDecorators = {
        styleClass: [{ type: Input }],
        style: [{ type: Input }],
        label: [{ type: Input }]
    };
    return PngStepComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngWizardComponent = /** @class */ (function (_super) {
    __extends(PngWizardComponent, _super);
    function PngWizardComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.activeIndex = 0;
        _this.stepChange = new EventEmitter();
        _this.items = [];
        _this.templateNames = {
            header: 'header',
            footer: 'footer'
        };
        return _this;
    }
    /**
     * @return {?}
     */
    PngWizardComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngAfterContentInit.call(this);
        this.steps.toArray().forEach(function (step, index) {
            if (!step.styleClass) {
                step.styleClass = _this.stepStyleClass;
            }
            if (!step.style) {
                step.style = _this.style;
            }
            if (index === _this.activeIndex) {
                step.active = true;
            }
            _this.items[index] = {
                label: step.label,
                command: function (event) {
                    _this.steps.toArray().forEach(function (s) { return s.active = false; });
                    step.active = true;
                    _this.activeIndex = index;
                    _this.stepChange.emit(index);
                }
            };
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PngWizardComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this.steps) {
            return;
        }
        var _loop_1 = function (prop) {
            if (prop === 'activeIndex') {
                /** @type {?} */
                var curIndex_1 = changes[prop].currentValue;
                this_1.steps.toArray().forEach(function (step, index) {
                    /** @type {?} */
                    var selected = index === curIndex_1;
                    step.active = selected;
                });
                this_1.stepChange.emit(curIndex_1);
            }
        };
        var this_1 = this;
        for (var prop in changes) {
            _loop_1(prop);
        }
    };
    /**
     * @return {?}
     */
    PngWizardComponent.prototype.previous = /**
     * @return {?}
     */
    function () {
        this.activeIndex--;
        this.stepChange.emit(this.activeIndex);
        this.ngOnChanges({
            activeIndex: {
                currentValue: this.activeIndex,
                previousValue: this.activeIndex + 1,
                firstChange: false,
                isFirstChange: function () { return false; }
            }
        });
    };
    /**
     * @return {?}
     */
    PngWizardComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        this.activeIndex++;
        this.stepChange.emit(this.activeIndex);
        this.ngOnChanges({
            activeIndex: {
                currentValue: this.activeIndex,
                previousValue: this.activeIndex - 1,
                firstChange: false,
                isFirstChange: function () { return false; }
            }
        });
    };
    PngWizardComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-wizard',
                    template: "\n    <ng-container *ngIf=\"template(templateNames.header)\">\n      <ng-container *ngTemplateOutlet=\"template(templateNames.header)\"></ng-container>\n    </ng-container>\n    <p-steps [model]=\"items\" [(activeIndex)]=\"activeIndex\"\n             [ngClass]=\"styleClass\" [ngStyle]=\"style\" [readonly]=\"false\"></p-steps>\n    <ng-content></ng-content>\n    <button pButton type=\"button\" *ngIf=\"activeIndex > 0\" class=\"mr-2\"\n            (click)=\"previous()\" icon=\"fa fa-hand-o-left\" label=\"Previous\"></button>\n    <button pButton type=\"button\" *ngIf=\"activeIndex < items.length - 1\"\n            (click)=\"next()\" icon=\"fa fa-hand-o-right\" iconPos=\"right\" label=\"Next\"></button>\n    <ng-container *ngIf=\"template(templateNames.footer)\">\n      <ng-container *ngTemplateOutlet=\"template(templateNames.footer)\"></ng-container>\n    </ng-container>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host::ng-deep .ui-steps ul[role=tablist]{display:flex!important;justify-content:space-around!important}"]
                }] }
    ];
    PngWizardComponent.propDecorators = {
        activeIndex: [{ type: Input }],
        styleClass: [{ type: Input }],
        style: [{ type: Input }],
        stepStyleClass: [{ type: Input }],
        stepStyle: [{ type: Input }],
        stepChange: [{ type: Output }],
        steps: [{ type: ContentChildren, args: [PngStepComponent,] }]
    };
    return PngWizardComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PngComponents = [
    PngAutoCompleteComponent,
    PngButtonComponent,
    PngButtonsComponent,
    PngSearchBoxComponent,
    PngAlertComponent,
    PngAnnounceComponent,
    PngPopupDialogComponent,
    PngCheckBoxComponent,
    PngConfirmDialogComponent,
    PngOverlayPanelComponent,
    PngInputComponent,
    PngCalendarComponent,
    PngChartComponent,
    PngStepComponent,
    PngTreeComponent,
    PngTreeNavTableComponent,
    PngPanelComponent,
    PngSliderComponent,
    PngSelectComponent,
    PngRadioComponent,
    PngMultiSelectComponent,
    PngListBoxComponent,
    PngOptionItemComponent,
    PngRatingComponent,
    ValidateMessageTooltipComponent,
    PngTableComponent,
    PngWizardComponent,
    PngFileUploadComponent,
    PngImageComponent,
    PngSelectButtonComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var MenuOrientation = {
    STATIC: 0,
    OVERLAY: 1,
    SLIM: 2,
    HORIZONTAL: 3,
};
MenuOrientation[MenuOrientation.STATIC] = 'STATIC';
MenuOrientation[MenuOrientation.OVERLAY] = 'OVERLAY';
MenuOrientation[MenuOrientation.SLIM] = 'SLIM';
MenuOrientation[MenuOrientation.HORIZONTAL] = 'HORIZONTAL';
var PngAdminWorkSpaceComponent = /** @class */ (function (_super) {
    __extends(PngAdminWorkSpaceComponent, _super);
    function PngAdminWorkSpaceComponent(renderer, cd) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.cd = cd;
        _this.menuOrientation = MenuOrientation.STATIC;
        _this.darkMenu = true;
        _this.onInitMenu = new EventEmitter();
        _this.profileMode = 'inline';
        _this.rootMenuToggleStateName = '$rootMenuToggler';
        _this.templateNames = {
            topbar: 'topbar',
            header: 'header',
            main: 'main',
            footer: 'footer',
            profile: 'profile',
            settings: 'settings',
            messages: 'messages',
            notifications: 'notifications',
            search: 'search'
        };
        return _this;
    }
    /**
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.onInitMenu.emit();
        this.$subscriptions = StatesUtils.observe(StateNames.menu, this.rootMenuToggleStateName)
            .pipe(filter(function (state$$1) { return state$$1 !== undefined; }))
            .subscribe(function () { return _this._toggleMainMenu(); });
        this.appTitle = this.appTitle || ConfigUtils.getConfig().appTitle;
        this.appName = this.appName || ConfigUtils.getConfig().appName;
        this.appLogo = this.appLogo || ConfigUtils.getConfig().appLogo;
    };
    /**
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this.layoutMenuScrollerViewChild.moveBar();
        }, 100);
    };
    /**
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.onLayoutClick = /**
     * @return {?}
     */
    function () {
        if (!this.topbarItemClick) {
            this.activeTopbarItem = null;
            this.topbarMenuActive = false;
        }
        if (!this.menuClick) {
            if (this.isHorizontal() || this.isSlim()) {
                this.resetMenu = true;
            }
            if (this.overlayMenuActive || this.staticMenuMobileActive) {
                this.hideOverlayMenu();
            }
            this.menuHoverActive = false;
        }
        this.topbarItemClick = false;
        this.menuClick = false;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.onMenuClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        this.menuClick = true;
        this.resetMenu = false;
        if (!this.isHorizontal()) {
            setTimeout(function () {
                _this.layoutMenuScrollerViewChild.moveBar();
            }, 450);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.onTopbarMenuButtonClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.topbarItemClick = true;
        this.topbarMenuActive = !this.topbarMenuActive;
        this.hideOverlayMenu();
        event.preventDefault();
    };
    /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.onTopbarItemClick = /**
     * @param {?} event
     * @param {?} item
     * @return {?}
     */
    function (event, item) {
        this.topbarItemClick = true;
        if (this.activeTopbarItem === item) {
            this.activeTopbarItem = null;
        }
        else {
            this.activeTopbarItem = item;
        }
        event.preventDefault();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.onTopbarSubItemClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
    };
    /**
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.hideOverlayMenu = /**
     * @return {?}
     */
    function () {
        this.rotateMenuButton = false;
        this.overlayMenuActive = false;
        this.staticMenuMobileActive = false;
    };
    /**
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.isTablet = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var width = window.innerWidth;
        return width <= 1024 && width > 640;
    };
    /**
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.isDesktop = /**
     * @return {?}
     */
    function () {
        return window.innerWidth > 1024;
    };
    /**
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.isMobile = /**
     * @return {?}
     */
    function () {
        return window.innerWidth <= 640;
    };
    /**
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.isOverlay = /**
     * @return {?}
     */
    function () {
        return this.menuOrientation === MenuOrientation.OVERLAY;
    };
    /**
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.isHorizontal = /**
     * @return {?}
     */
    function () {
        return this.menuOrientation === MenuOrientation.HORIZONTAL;
    };
    /**
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.isSlim = /**
     * @return {?}
     */
    function () {
        return this.menuOrientation === MenuOrientation.SLIM;
    };
    /**
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.changeToStaticMenu = /**
     * @return {?}
     */
    function () {
        this.menuOrientation = MenuOrientation.STATIC;
    };
    /**
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.changeToOverlayMenu = /**
     * @return {?}
     */
    function () {
        this.menuOrientation = MenuOrientation.OVERLAY;
    };
    /**
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.changeToHorizontalMenu = /**
     * @return {?}
     */
    function () {
        this.menuOrientation = MenuOrientation.HORIZONTAL;
    };
    /**
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype.changeToSlimMenu = /**
     * @return {?}
     */
    function () {
        this.menuOrientation = MenuOrientation.SLIM;
    };
    /**
     * @private
     * @return {?}
     */
    PngAdminWorkSpaceComponent.prototype._toggleMainMenu = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var menu = StatesUtils.getValue(StateNames.rootMenu);
        this.menuOrientation = menu && menu.orientation;
        this.darkMenu = menu && menu.dark;
        this.menuClick = true;
        this.rotateMenuButton = !this.rotateMenuButton;
        this.topbarMenuActive = false;
        if (this.menuOrientation === MenuOrientation.OVERLAY) {
            this.overlayMenuActive = !this.overlayMenuActive;
        }
        else {
            if (this.isDesktop()) {
                this.staticMenuDesktopInactive = !this.staticMenuDesktopInactive;
            }
            else {
                this.staticMenuMobileActive = !this.staticMenuMobileActive;
            }
        }
        this.cd.detectChanges();
    };
    PngAdminWorkSpaceComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-admin-work-space',
                    template: "<div class=\"layout-wrapper\" (click)=\"onLayoutClick()\"\n     [ngClass]=\"{'menu-layout-static': !isOverlay(),\n                'menu-layout-overlay': isOverlay(),\n                'layout-menu-overlay-active': overlayMenuActive,\n                'menu-layout-horizontal': isHorizontal(),\n                'menu-layout-slim': isSlim(),\n                'layout-menu-static-inactive': staticMenuDesktopInactive,\n                'layout-menu-static-active': staticMenuMobileActive}\">\n\n  <png-ws-topbar></png-ws-topbar>\n\n  <div class=\"layout-menu-container\" [ngClass]=\"{'layout-menu-dark':darkMenu}\" (click)=\"onMenuClick($event)\">\n    <p-scrollPanel #layoutMenuScroller [style]=\"{height: '100%' }\">\n      <div class=\"menu-scroll-content\">\n        <png-ws-profile *ngIf=\"profileMode=='inline'&&!isHorizontal()\"></png-ws-profile>\n        <png-ws-main-menu [reset]=\"resetMenu\" [httpMenuTag]=\"httpMenuTag\"></png-ws-main-menu>\n      </div>\n    </p-scrollPanel>\n  </div>\n\n  <div class=\"layout-main\">\n    <ng-container *ngTemplateOutlet=\"template(templateNames.main)\"></ng-container>\n    <router-outlet></router-outlet>\n  </div>\n\n  <div class=\"layout-mask\"></div>\n\n  <png-ws-footer></png-ws-footer>\n\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngAdminWorkSpaceComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ChangeDetectorRef }
    ]; };
    PngAdminWorkSpaceComponent.propDecorators = {
        menuOrientation: [{ type: Input }],
        darkMenu: [{ type: Input }],
        appName: [{ type: Input }],
        appTitle: [{ type: Input }],
        appLogo: [{ type: Input }],
        httpMenuTag: [{ type: Input }],
        onInitMenu: [{ type: Output }],
        layoutMenuScrollerViewChild: [{ type: ViewChild, args: ['layoutMenuScroller',] }]
    };
    return PngAdminWorkSpaceComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PrimeNgComponentsModule = /** @class */ (function () {
    function PrimeNgComponentsModule() {
    }
    PrimeNgComponentsModule.decorators = [
        { type: NgModule, args: [{
                    exports: [
                        AutoCompleteModule,
                        AccordionModule,
                        BreadcrumbModule,
                        ConfirmDialogModule,
                        CardModule,
                        CalendarModule,
                        ChipsModule,
                        CheckboxModule,
                        ChartModule,
                        EditorModule,
                        InputTextModule,
                        InputTextareaModule,
                        FieldsetModule,
                        DialogModule,
                        ButtonModule,
                        FileUploadModule,
                        MessagesModule,
                        KeyFilterModule,
                        TableModule,
                        TabViewModule,
                        MultiSelectModule,
                        SliderModule,
                        DropdownModule,
                        RadioButtonModule,
                        PaginatorModule,
                        TooltipModule,
                        LightboxModule,
                        ListboxModule,
                        InputMaskModule,
                        InputSwitchModule,
                        CheckboxModule,
                        RadioButtonModule,
                        OverlayPanelModule,
                        OrganizationChartModule,
                        PanelModule,
                        RatingModule,
                        TreeModule,
                        SelectButtonModule,
                        SplitButtonModule,
                        SpinnerModule,
                        MenuModule,
                        ScrollPanelModule,
                        StepsModule,
                        ToastModule,
                        ToggleButtonModule
                    ]
                },] }
    ];
    return PrimeNgComponentsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngTableBodyCellComponent = /** @class */ (function (_super) {
    __extends(PngTableBodyCellComponent, _super);
    function PngTableBodyCellComponent(pngTable) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        return _this;
    }
    Object.defineProperty(PngTableBodyCellComponent.prototype, "width", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngTableBodyCellComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column.height;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} event
     * @return {?}
     */
    PngTableBodyCellComponent.prototype.cellContext = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        return {
            $event: event,
            $id: this.pngTable.$props.$id,
            column: this.column,
            row: this.row,
            rowIndex: this.rowIndex,
            pngTable: this.pngTable
        };
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableBodyCellComponent.prototype.onMouseEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.column.onMouseEnter) {
            this.column.onMouseEnter.call(this.pngTable, this.cellContext(event));
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableBodyCellComponent.prototype.onMouseOver = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.column.onMouseOver) {
            this.column.onMouseOver.call(this.pngTable, this.cellContext(event));
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableBodyCellComponent.prototype.onMouseOut = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.column.onMouseOut) {
            this.column.onMouseOut.call(this.pngTable, this.cellContext(event));
        }
    };
    PngTableBodyCellComponent.decorators = [
        { type: Component, args: [{
                    selector: '[png-table-body-cell]',
                    template: "\n    <ng-container *ngIf=\"customerTpl;else default\">\n      <ng-container *ngTemplateOutlet=\"customerTpl;context:cellContext\"></ng-container>\n    </ng-container>\n    <ng-template #default>\n      <png-table-body-cell-content\n        [customerTpl]=\"dataCellTpl\"\n        [column]=\"column\"\n        [row]=\"row\"\n        [rowIndex]=\"rowIndex\"\n      ></png-table-body-cell-content>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngTableBodyCellComponent.ctorParameters = function () { return [
        { type: PngTableComponent }
    ]; };
    PngTableBodyCellComponent.propDecorators = {
        column: [{ type: Input }],
        row: [{ type: Input }],
        rowIndex: [{ type: Input }],
        dataCellTpl: [{ type: Input }],
        width: [{ type: HostBinding, args: ['style.width',] }],
        height: [{ type: HostBinding, args: ['style.height',] }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
        onMouseOver: [{ type: HostListener, args: ['mouseover', ['$event'],] }],
        onMouseOut: [{ type: HostListener, args: ['mouseout', ['$event'],] }]
    };
    return PngTableBodyCellComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngTableBodyCellContentComponent = /** @class */ (function (_super) {
    __extends(PngTableBodyCellContentComponent, _super);
    function PngTableBodyCellContentComponent(pngTable, cell) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.cell = cell;
        _this.DATA_ATTR = DataAttr;
        _this.DATA_TYPE = DataType;
        _this.OVERLAY_TYPE = OverlayType;
        return _this;
    }
    Object.defineProperty(PngTableBodyCellContentComponent.prototype, "cellContent", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.column.dataAttr === DataAttr.BUTTONS) {
                /** @type {?} */
                var btns = this.column.cellContent;
                btns = CommonsUtils.getArrayValue(btns);
                btns = btns.filter(function (btn) { return !btn.show || btn.show === true || btn.show.method === true || (CommonsUtils.isFunction(btn.show.method) && (/** @type {?} */ ((btn.show.method).call(_this, _this.cellContext())))); });
                return btns;
            }
            /** @type {?} */
            var content = this.getValue(this.column.cellContent || this.row[this.column.key]);
            if (CommonsUtils.isEmpty(content) && this.column.defaultCellContent !== undefined) {
                content = this.column.defaultCellContent;
            }
            if (this.column.contentKey) {
                content = CommonsUtils.get(content, this.column.contentKey);
                if (CommonsUtils.isArray(content)) {
                    content = (/** @type {?} */ (content.join(',')));
                }
            }
            else if (this.column.format) {
                CommonsUtils.format(content, this.column.format);
            }
            else if (CommonsUtils.isFunction(this.column.formatter)) {
                content = ((/** @type {?} */ (this.column.formatter)))(content);
            }
            else if (this.column.formatter || CommonsUtils.isTemplateStr(content)) {
                content = CommonsUtils.templateStr(((/** @type {?} */ (this.column.formatter))) || content, this.row);
            }
            else if (CommonsUtils.isJson(content)) {
                content = DataFieldUtils.getFieldDisplayContent(content, this.column.dataField);
            }
            if (CommonsUtils.isString(content) && this.column.maxLength && content.length > this.column.maxLength) {
                content = content.substr(0, this.column.maxLength) + '...';
            }
            if (content === true) {
                return '是';
            }
            else if (content === false) {
                return '否';
            }
            return content;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngTableBodyCellContentComponent.prototype, "cellIcon", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getValue(this.column.cellIcon);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngTableBodyCellContentComponent.prototype, "toolTip", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var toolTip = this.getValue(this.column.toolTip);
            if (!toolTip && this.column.maxLength && this.row[this.column.key] && this.row[this.column.key].length > this.column.maxLength) {
                return this.row[this.column.key];
            }
            return toolTip;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngTableBodyCellContentComponent.prototype, "cellClass", {
        get: /**
         * @return {?}
         */
        function () {
            return CommonsUtils.getValue(this.column.cellStyleClass, this.cellContext());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngTableBodyCellContentComponent.prototype, "cellStyle", {
        get: /**
         * @return {?}
         */
        function () {
            return CommonsUtils.getValue(this.column.cellStyle, this.cellContext());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngTableBodyCellContentComponent.prototype, "routLink", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this.column.routLink) {
                return;
            }
            /** @type {?} */
            var routerLink = this.column.routLink;
            if (CommonsUtils.isString(routerLink)) {
                routerLink = [routerLink];
            }
            /** @type {?} */
            var routeParams;
            if (this.column.routParam) {
                if (CommonsUtils.isFunction(this.column.routParam)) {
                    routeParams = ((/** @type {?} */ (this.column.routParam))).call(this.pngTable, this.column, this.row) || [];
                }
                else if (CommonsUtils.isArray(this.column.routParam)) {
                    routeParams = ((/** @type {?} */ (this.column.routParam))).map(function (param) { return _this.row[param]; }) || [];
                }
                else if (CommonsUtils.isString(this.column.routParam)) {
                    routeParams = [this.row[(/** @type {?} */ (this.column.routParam))]] || [];
                }
                else if (this.pngTable.$props.dataKey) {
                    routeParams = [this.row[this.pngTable.$props.dataKey]] || [];
                }
            }
            if (routeParams) {
                routerLink = __spread((/** @type {?} */ (routerLink)), routeParams);
            }
            return routerLink;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngTableBodyCellContentComponent.prototype, "queryParam", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            var _a;
            if (!this.column.routQueryParams) {
                return;
            }
            if (CommonsUtils.isFunction(this.column.routQueryParams)) {
                return ((/** @type {?} */ (this.column.routQueryParams))).call(this.pngTable, this.column, this.row);
            }
            else if (CommonsUtils.isArray(this.column.routQueryParams)) {
                /** @type {?} */
                var params_1 = {};
                ((/** @type {?} */ (this.column.routQueryParams))).map(function (param) { return params_1[param] = _this.row[param]; });
                return params_1;
            }
            else if (CommonsUtils.isString(this.column.routQueryParams)) {
                return _a = {}, _a[(/** @type {?} */ (this.column.routQueryParams))] = this.row[(/** @type {?} */ (this.column.routQueryParams))], _a;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} icon
     * @return {?}
     */
    PngTableBodyCellContentComponent.prototype.iconClass = /**
     * @param {?} icon
     * @return {?}
     */
    function (icon) {
        if (icon && icon.trim().startsWith('fa-')) {
            return "fa " + icon;
        }
        return icon;
    };
    /**
     * @param {?} attr
     * @return {?}
     */
    PngTableBodyCellContentComponent.prototype.hasAttr = /**
     * @param {?} attr
     * @return {?}
     */
    function (attr) {
        return this.column.dataAttr === attr ||
            (CommonsUtils.isArray(this.column.dataAttr) && ((/** @type {?} */ (this.column.dataAttr))).indexOf(attr) >= 0);
    };
    /**
     * @param {?} overlay
     * @param {?} index
     * @param {?=} event
     * @return {?}
     */
    PngTableBodyCellContentComponent.prototype.overlayContext = /**
     * @param {?} overlay
     * @param {?} index
     * @param {?=} event
     * @return {?}
     */
    function (overlay, index, event) {
        return __assign({}, this.cellContext(event), { type: overlay.type, content: this.getValue(overlay.content), context: overlay.context, styleClass: this.getValue(overlay.styleClass), style: this.getValue(overlay.style), overlayStyleClass: this.getValue(overlay.overlayStyleClass), overlayStyle: this.getValue(overlay.overlayStyle), id: "overlay-cell-" + this.column.key + "-" + index });
    };
    /**
     * @param {?} content
     * @return {?}
     */
    PngTableBodyCellContentComponent.prototype.treeContent = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        if (CommonsUtils.isArray(content)) {
            return '共' + ((/** @type {?} */ (content))).length + '项';
        }
        else if (CommonsUtils.isJson(content)) {
            return '共' + Object.keys(content).length + '项';
        }
        else {
            return content;
        }
    };
    /**
     * @param {?} content
     * @param {?=} event
     * @return {?}
     */
    PngTableBodyCellContentComponent.prototype.overlayTreeContext = /**
     * @param {?} content
     * @param {?=} event
     * @return {?}
     */
    function (content, event) {
        return __assign({}, this.cellContext(event), { type: OverlayType.TREE, content: content });
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    PngTableBodyCellContentComponent.prototype.cellContext = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        return this.cell.cellContext(event);
    };
    /**
     * @return {?}
     */
    PngTableBodyCellContentComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.column.overlays) {
            ((/** @type {?} */ (this.column.overlays))).filter(function (overlay) { return overlay.type === OverlayType.MENU; })
                .forEach(function (overlay) {
                if (overlay.content['menuItem'].command) {
                    /** @type {?} */
                    var command_1 = overlay.content['menuItem'].command;
                    overlay.content['menuItem'].command = function (event) { return command_1.call(_this, _this.cellContext(event)); };
                }
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableBodyCellContentComponent.prototype.cellClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        if (this.column.onClick) {
            this.column.onClick.call(this.pngTable, this.cellContext(event));
        }
    };
    /**
     * @param {?} event
     * @param {?} tipText
     * @return {?}
     */
    PngTableBodyCellContentComponent.prototype.toggleTip = /**
     * @param {?} event
     * @param {?} tipText
     * @return {?}
     */
    function (event, tipText) {
        if (tipText) {
            this.pngTable.showOverlay((/** @type {?} */ ({
                $event: event,
                content: tipText,
                styleClass: 'alert alert-info',
                style: {
                    overflow: 'auto',
                    width: '300px',
                    height: '300px'
                }
            })));
        }
    };
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    PngTableBodyCellContentComponent.prototype.getValue = /**
     * @private
     * @param {?} target
     * @return {?}
     */
    function (target) {
        return CommonsUtils.getValue(target, this.cellContext()) || '';
    };
    PngTableBodyCellContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-table-body-cell-content',
                    template: "<ng-container *ngIf=\"customerTpl;else default\">\n  <ng-container *ngTemplateOutlet=\"customerTpl;context:cellContext()\"></ng-container>\n</ng-container>\n<ng-template #default>\n  <ng-container *ngIf=\"column.overlays\">\n    <ng-container *ngFor=\"let overlay of column.overlays; index as i\">\n      <ng-container [ngSwitch]=\"overlay.type\">\n        <ng-container *ngSwitchCase=\"OVERLAY_TYPE.CHART\">\n          <i [ngClass]=\"overlay.icon || 'fa fa-bar-chart text-primary'\" class=\"pull-right\"\n             title=\"\u663E\u793A\u56FE\u5F62\" (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"OVERLAY_TYPE.TABLE\">\n          <i [ngClass]=\"overlay.icon || 'fa fa-eye text-primary'\" class=\"pull-right\"\n             title=\"\u663E\u793A\u8868\u683C\" (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"OVERLAY_TYPE.PANEL\">\n          <i [ngClass]=\"overlay.icon || 'fa fa-eye text-primary'\" class=\"pull-right\"\n             title=\"\u663E\u793A\u66F4\u591A\u4FE1\u606F\" (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"OVERLAY_TYPE.MENU\">\n          <i [ngClass]=\"overlay.icon || 'fa fa-arrow-circle-down text-primary'\" class=\"pull-right\"\n             title=\"\u663E\u793A\u83DC\u5355\" (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"OVERLAY_TYPE.FRAME\">\n          <i [ngClass]=\"overlay.icon || 'fa fa-play text-primary'\"\n             title=\"\u663E\u793A\u66F4\u591A\u5185\u5BB9\" (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"OVERLAY_TYPE.COMPONENT\">\n          <i [ngClass]=\"overlay.icon || 'fa fa-eye text-primary'\"\n             title=\"\u663E\u793A\u66F4\u591A\u5185\u5BB9\" (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n  <ng-container [ngSwitch]=\"column.dataAttr\">\n    <ng-container *ngSwitchCase=\"DATA_ATTR.IMAGE\">\n      <png-image [imageStyleClass]=\"cellClass\"\n                 [imageStyle]=\"cellStyle\"\n                 size=\"small\"\n                 [fileId]=\"cellContent\"\n                 [showDescription]=\"false\"\n      >\n      </png-image>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.TAG\">\n        <span erTag [pTooltip]=\"toolTip\"\n              tooltipPosition=\"top\"\n              class=\"pull-right\"\n              [ngClass]=\"cellClass\"\n              [ngStyle]=\"cellStyle\">{{cellContent}}</span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.URL\">\n      <a [pTooltip]=\"toolTip\"\n         tooltipPosition=\"top\"\n         [href]=\"routLink\"\n         [ngClass]=\"cellClass\"\n         [ngStyle]=\"cellStyle\"\n         target=\"_blank\">{{cellContent}}</a>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.COLOR\">\n      <span [ngClass]=\"cellContent | lowercase\"></span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.TREE\">\n      <span class=\"pull-right\">\n        {{treeContent(cellContent)}} <i class=\"fa fa-tree blue\" title=\"\u67E5\u770B\u5185\u5BB9\"\n                                        (click)=\"pngTable.showOverlay(overlayTreeContext(cellContent,$event))\"></i>\n      </span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.ICON\">\n      <span class=\"pull-right\"><i [ngClass]=\"iconClass(cellContent)\"></i></span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.DATE\">\n      <span>{{cellContent | date: 'yyyy-MM-dd'}}</span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.TIME\">\n      <span>{{cellContent | date: 'HH:mm:ss'}}</span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.DATE_TIME\">\n      <span>{{cellContent | date: 'yyyy-MM-dd HH:mm:ss'}}</span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.UP_TO_NOW\">\n      <ng-container *ngIf=\"cellContent\">\n       <span erTag class=\"pull-right date-to-now\" [pTooltip]=\"cellContent\" tooltipPosition=\"top\">\n        {{cellContent | erUpToNow}}\n      </span>\n        <i class=\"fa fa-clock-o pull-right\"></i>\n      </ng-container>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.BADGE\">\n      <span [pTooltip]=\"toolTip\"\n            tooltipPosition=\"top\"\n            class='pull-right badge'\n            [ngClass]=\"cellClass\"\n            [ngStyle]=\"cellStyle\"\n            [innerHTML]=\"cellContent\"></span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.CODE\">\n      <span [pTooltip]=\"toolTip\"\n            tooltipPosition=\"top\"\n            class=\"pull-right data-code\"\n            [ngClass]=\"cellClass\"\n            [ngStyle]=\"cellStyle\"\n            [innerHTML]=\"cellContent\"></span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.PERCENT\">\n      <span [innerHTML]=\"cellContent|erPercent\"></span>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"DATA_ATTR.BUTTONS\">\n      <png-buttons [btns]=\"cellContent\" [context]=\"cellContext()\" [styleClass]=\"cellClass\"\n                   [style]=\"cellStyle\"></png-buttons>\n    </ng-container>\n    <ng-container *ngSwitchDefault>\n      <ng-container *ngIf=\"column.routLink || column.routParam\">\n        <a [pTooltip]=\"toolTip\" tooltipPosition=\"top\"\n           [ngClass]=\"cellClass\"\n           [ngStyle]=\"cellStyle\"\n           [routerLink]=\"routLink\" [queryParams]=\"queryParam\"\n           [innerHTML]=\"cellContent\"></a>\n      </ng-container>\n      <ng-container *ngIf=\"column.onClick\">\n        <a href=\"#\" [pTooltip]=\"toolTip\" tooltipPosition=\"top\"\n           [ngClass]=\"cellClass\"\n           [ngStyle]=\"cellStyle\"\n           (click)=\"cellClick($event)\"\n           [innerHTML]=\"cellContent\"></a>\n      </ng-container>\n      <ng-container *ngIf=\"!(column.routLink || column.routParam) && !column.onClick\">\n              <span [innerHTML]=\"cellContent\"\n                    [pTooltip]=\"toolTip\"\n                    tooltipPosition=\"top\"\n                    [ngClass]=\"cellClass\"\n                    [ngStyle]=\"cellStyle\"\n                    class=\"pull-right\"\n                    (click)=\"toggleTip($event, toolTip)\"\n              ></span>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</ng-template>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngTableBodyCellContentComponent.ctorParameters = function () { return [
        { type: PngTableComponent },
        { type: PngTableBodyCellComponent }
    ]; };
    PngTableBodyCellContentComponent.propDecorators = {
        column: [{ type: Input }],
        row: [{ type: Input }],
        rowIndex: [{ type: Input }],
        selectors: [{ type: ViewChildren, args: [SelectorDirective,] }]
    };
    return PngTableBodyCellContentComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngTableBodyRowComponent = /** @class */ (function (_super) {
    __extends(PngTableBodyRowComponent, _super);
    function PngTableBodyRowComponent(pngTable, cd) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.cd = cd;
        return _this;
    }
    Object.defineProperty(PngTableBodyRowComponent.prototype, "rowContext", {
        get: /**
         * @return {?}
         */
        function () {
            return {
                columns: this.columns,
                row: this.row,
                rowIndex: this.rowIndex,
                expanded: this.expanded,
                context: this.pngTable
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PngTableBodyRowComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.chk) {
            this.$subscriptions = this.chk.tableService.selectionSource$.subscribe(function () {
                _this.cd.detectChanges();
            });
        }
    };
    /**
     * @param {?} col
     * @return {?}
     */
    PngTableBodyRowComponent.prototype.colContext = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        return __assign({}, this.rowContext, col);
    };
    /**
     * @param {?} col
     * @return {?}
     */
    PngTableBodyRowComponent.prototype.getColStyleClass = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        return CommonsUtils.getValue(col.styleClass, this.colContext(col));
    };
    /**
     * @param {?} col
     * @return {?}
     */
    PngTableBodyRowComponent.prototype.getColStyle = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        return CommonsUtils.getValue(col.style, this.colContext(col));
    };
    PngTableBodyRowComponent.decorators = [
        { type: Component, args: [{
                    selector: '[png-table-body-row]',
                    template: "\n    <ng-container *ngIf=\"customerTpl;else default\">\n      <ng-container *ngTemplateOutlet=\"customerTpl;context:rowContext\"></ng-container>\n    </ng-container>\n    <ng-template #default>\n      <tr *ngIf=\"rowHeaderTpl\">\n        <ng-container *ngTemplateOutlet=\"rowHeaderTpl;context:rowContext\"></ng-container>\n      </tr>\n      <td *ngIf=\"pngTable.$props.$ext.rowExpandable\" class=\"col-expandable\">\n        <a href=\"#\" [pRowToggler]=\"row\">\n          <i [ngClass]=\"expanded ? 'pi pi-chevron-down' : 'pi pi-chevron-right'\"></i>\n        </a>\n      </td>\n      <td *ngIf=\"pngTable.$props.$ext.hasRowCheckbox\" class=\"col-checkbox\">\n        <p-tableCheckbox #chk [value]=\"row\"></p-tableCheckbox>\n      </td>\n      <td *ngIf=\"pngTable.$props.$ext.hasRowRadioButton\" class=\"col-radio\">\n        <p-tableRadioButton [value]=\"row\"></p-tableRadioButton>\n      </td>\n      <ng-container *ngFor=\"let col of columns\">\n        <td png-table-body-cell class=\"col-data col-data-{{col.key}}\"\n            [ngClass]=\"getColStyleClass(col)\"\n            [ngStyle]=\"getColStyle(col)\"\n            [customerTpl]=\"cellTpl\"\n            [column]=\"col\"\n            [row]=\"row\"\n            [rowIndex]=\"rowIndex\"\n            [dataCellTpl]=\"dataCellTpl\"\n        >\n        </td>\n      </ng-container>\n      <tr *ngIf=\"rowFooterTpl\">\n        <ng-container *ngTemplateOutlet=\"rowFooterTpl;context:rowContext\"></ng-container>\n      </tr>\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngTableBodyRowComponent.ctorParameters = function () { return [
        { type: PngTableComponent },
        { type: ChangeDetectorRef }
    ]; };
    PngTableBodyRowComponent.propDecorators = {
        columns: [{ type: Input }],
        row: [{ type: Input }],
        rowIndex: [{ type: Input }],
        expanded: [{ type: Input }],
        rowHeaderTpl: [{ type: Input }],
        rowFooterTpl: [{ type: Input }],
        cellTpl: [{ type: Input }],
        dataCellTpl: [{ type: Input }],
        chk: [{ type: ViewChild, args: ['chk',] }]
    };
    return PngTableBodyRowComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngTableCaptionComponent = /** @class */ (function (_super) {
    __extends(PngTableCaptionComponent, _super);
    function PngTableCaptionComponent(pngTable) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.onSimpleSearch = new EventEmitter();
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableCaptionComponent.prototype.search = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onSimpleSearch.emit(event);
    };
    /**
     * @return {?}
     */
    PngTableCaptionComponent.prototype.openPanel = /**
     * @return {?}
     */
    function () {
        StatesUtils.update(StateNames.popup, (/** @type {?} */ ((/** @type {?} */ ({
            header: '查询条件定义',
            content: this.searchBuilderPanel,
            visible: true,
            minWidth: 700,
            contentMaxHeight: 400
        })))));
    };
    /**
     * @return {?}
     */
    PngTableCaptionComponent.prototype.refresh = /**
     * @return {?}
     */
    function () {
        this.pngTable.load();
    };
    PngTableCaptionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-table-caption',
                    template: "\n    <ng-container *ngIf=\"customerTpl;else default\">\n      <ng-container *ngTemplateOutlet=\"customerTpl;context:{$implicit:pngTable}\"></ng-container>\n    </ng-container>\n    <ng-template #default>\n      <div>\n        <span class=\"pull-left table-caption\" [innerHTML]=\"caption|erSafeHtml\"></span>\n        <span class=\"pull-right d-inline\"><i class=\"fa fa-refresh text-primary\" title=\"\u5237\u65B0\u8868\u683C\" (click)=\"refresh()\"></i></span>\n      </div>\n      <div class=\"clearfix\"></div>\n      <div *ngIf=\"hasSearchBox || hasAddAction || hasSearchInput\">\n        <div class=\"d-flex align-items-start\">\n          <div class=\"pl-3 py-3\" *ngIf=\"hasAddAction\">\n            <png-button erPropsBind [props]=\"addButton\" [outputContext]=\"{pngTable: pngTable}\"></png-button>\n          </div>\n          <div class=\"ml-auto py-3\" *ngIf=\"hasSearchInput && !hasSearchBox\">\n            <png-search-box title=\"\u7EFC\u5408\u641C\u7D22\uFF0C\u8F93\u5165\u56DE\u8F66\u952E\u6267\u884C\" (onSearch)=\"search($event)\"></png-search-box>\n          </div>\n          <div class=\"ml-auto\" *ngIf=\"hasSearchBox\">\n            <button pButton icon=\"fa fa-search\" label=\"\u9AD8\u7EA7\u67E5\u8BE2\" (click)=\"openPanel()\"></button>\n            <ng-template #searchBuilderPanel>\n              <png-table-query-builder></png-table-query-builder>\n            </ng-template>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngTableCaptionComponent.ctorParameters = function () { return [
        { type: PngTableComponent }
    ]; };
    PngTableCaptionComponent.propDecorators = {
        caption: [{ type: Input }],
        hasAddAction: [{ type: Input }],
        hasSearchInput: [{ type: Input }],
        hasSearchBox: [{ type: Input }],
        addButton: [{ type: Input }],
        onSimpleSearch: [{ type: Output }],
        searchBuilderPanel: [{ type: ViewChild, args: ['searchBuilderPanel',] }]
    };
    return PngTableCaptionComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngTableColumnSelectorComponent = /** @class */ (function (_super) {
    __extends(PngTableColumnSelectorComponent, _super);
    function PngTableColumnSelectorComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onColumnsChange = new EventEmitter();
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableColumnSelectorComponent.prototype.changeColumns = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.value.forEach(function (column) { return column.hidden = false; });
        this.onColumnsChange.emit(event);
    };
    PngTableColumnSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-table-column-selector',
                    template: "\n\n    <p-multiSelect [style]=\"{height: '30px', minWidth: '150px'}\"\n                   [ngClass]=\"styleClass\"\n                   [ngStyle]=\"style\"\n                   [options]=\"optionColumns\"\n                   [(ngModel)]=\"columns\"\n                   optionLabel=\"label\"\n                   [selectedItemsLabel]=\"'\u5F53\u524D\u663E\u793A{0}('+optionColumns?.length+')\u4E2A\u5217'\"\n                   defaultLabel=\"\u9009\u62E9\u663E\u793A\u5B57\u6BB5\"\n                   (onChange)=\"changeColumns($event)\"\n    >\n    </p-multiSelect>\n\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    PngTableColumnSelectorComponent.propDecorators = {
        columns: [{ type: Input }],
        optionColumns: [{ type: Input }],
        styleClass: [{ type: Input }],
        style: [{ type: Input }],
        onColumnsChange: [{ type: Output }]
    };
    return PngTableColumnSelectorComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngTableExpandedRowComponent = /** @class */ (function (_super) {
    __extends(PngTableExpandedRowComponent, _super);
    function PngTableExpandedRowComponent(pngTable) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.customerContent = false;
        return _this;
    }
    Object.defineProperty(PngTableExpandedRowComponent.prototype, "dataColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this.columns.filter(function (column) { return column.isDataColumn !== false && !column.isActionColumn; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    PngTableExpandedRowComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.rowId) {
            if (this.pngTable.$props.$ext.onExpandRowContent) {
                this.customerContent = true;
                this.expandContent$ = this.pngTable.$props.$ext.onExpandRowContent.method(this.rowId);
            }
            else {
                this.expandContent$ = ApiUtils.getById(this.pngTable.$props.$ext.apiDataProps.apiEntry, this.rowId, {
                    tag: this.rowId,
                    payload: { 'fields': this.pngTable.$props.$ext.expandRowFields || this.pngTable.dataColumnNames }
                });
            }
        }
    };
    /**
     * @param {?} col
     * @param {?} rowData
     * @return {?}
     */
    PngTableExpandedRowComponent.prototype.content = /**
     * @param {?} col
     * @param {?} rowData
     * @return {?}
     */
    function (col, rowData) {
        if (!col.key) {
            return;
        }
        if (col.cellContent) {
            console.log('cellcontent');
            return col.cellContent({ row: rowData });
        }
        /** @type {?} */
        var c = rowData[col.key];
        if (CommonsUtils.isJson(c)) {
            /** @type {?} */
            var key = void 0;
            if (col.dataField) {
                key = DataFieldUtils.getDefaultFieldName(col.dataField);
            }
            if (key) {
                return CommonsUtils.get(c, key);
            }
            else {
                /** @type {?} */
                var trans_1 = {};
                Object.keys(c).forEach(function (sub) {
                    /** @type {?} */
                    var label = CommonsUtils.get(col, "dataField.fields." + sub + ".label");
                    if (label) {
                        trans_1[label] = c[sub];
                    }
                    else {
                        trans_1[sub] = c[sub];
                    }
                });
                c = trans_1;
            }
        }
        return CommonsUtils.getText(c);
    };
    PngTableExpandedRowComponent.decorators = [
        { type: Component, args: [{
                    selector: '[png-table-expanded-row]',
                    template: "\n    <ng-container *ngIf=\"customerTpl;else default\">\n      <ng-container *ngTemplateOutlet=\"customerTpl;context:{$implicit:rowId,context:pngTable}\"></ng-container>\n    </ng-container>\n    <ng-template #default>\n      <td colspan=\"100%\">\n        <p-card styleClass=\"ui-card-shadow w-100 ui-table-expanded-content\" >\n          <er-http-status [tag]=\"rowId\" erPosition></er-http-status>\n          <ng-container *ngIf=\"expandContent$|async as expandContent\">\n            <div class=\"row w-100 m-3\" style=\"font-size: 16px\">\n              <ng-container *ngIf=\"!customerContent\">\n                <ng-container *ngFor=\"let col of dataColumns\">\n                  <span class=\"col-2 my-3\"><b class=\"pull-right\" [innerHTML]=\"col.label\"></b></span>\n                  <ng-container *ngIf=\"col.expandViewContent;else defaultView\">\n                    <er-dyna-content [content]=\"col.expandViewContent\" [context]=\"{data: expandContent, col: col}\"></er-dyna-content>\n                  </ng-container>\n                  <ng-template #defaultView>\n                    <span class=\"col-4 my-3\">{{content(col, expandContent)}}</span>\n                  </ng-template>\n                </ng-container>\n              </ng-container>\n              <ng-container *ngIf=\"customerContent\">\n                <er-dyna-content [content]=\"expandContent\"></er-dyna-content>\n              </ng-container>\n            </div>\n          </ng-container>\n        </p-card>\n      </td>\n    </ng-template>\n\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngTableExpandedRowComponent.ctorParameters = function () { return [
        { type: PngTableComponent }
    ]; };
    PngTableExpandedRowComponent.propDecorators = {
        rowId: [{ type: Input }],
        columns: [{ type: Input }],
        styleClass: [{ type: Input }],
        style: [{ type: Input }]
    };
    return PngTableExpandedRowComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngTableFooterComponent = /** @class */ (function (_super) {
    __extends(PngTableFooterComponent, _super);
    function PngTableFooterComponent(pngTable) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        return _this;
    }
    PngTableFooterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tr[png-table-footer]',
                    template: "\n    <ng-container *ngIf=\"customerTpl;else default\">\n      <ng-container *ngTemplateOutlet=\"customerTpl; context:{columns:columns,context:pngTable}\"></ng-container>\n    </ng-container>\n    <ng-template #default></ng-template>\n  "
                }] }
    ];
    /** @nocollapse */
    PngTableFooterComponent.ctorParameters = function () { return [
        { type: PngTableComponent }
    ]; };
    PngTableFooterComponent.propDecorators = {
        columns: [{ type: Input }]
    };
    return PngTableFooterComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngTableHeaderColComponent = /** @class */ (function (_super) {
    __extends(PngTableHeaderColComponent, _super);
    function PngTableHeaderColComponent(pngTable, cd) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.cd = cd;
        _this.OVERLAY_TYPE = OverlayType;
        _this.onFilterBtnClick = new EventEmitter();
        _this.onAggsBtnClick = new EventEmitter();
        return _this;
    }
    Object.defineProperty(PngTableHeaderColComponent.prototype, "colClass", {
        get: /**
         * @return {?}
         */
        function () {
            if (CommonsUtils.isFunction(this.column.colClass)) {
                return ((/** @type {?} */ (this.column.colClass))).call(this.pngTable, this.column);
            }
            else {
                return (/** @type {?} */ (this.column.colClass)) || '';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngTableHeaderColComponent.prototype, "width", {
        get: /**
         * @return {?}
         */
        function () {
            return this.column.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngTableHeaderColComponent.prototype, "colStyle", {
        get: /**
         * @return {?}
         */
        function () {
            if (CommonsUtils.isFunction(this.column.colStyle)) {
                return ((/** @type {?} */ (this.column.colStyle))).call(this.pngTable, this.column);
            }
            else {
                return (/** @type {?} */ (this.column.colStyle)) || '';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PngTableHeaderColComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.column.headerOverlays) {
            ((/** @type {?} */ (this.column.headerOverlays))).filter(function (overlay) { return overlay.type === OverlayType.MENU; })
                .forEach(function (overlay) {
                if (overlay.content['menuItem'].command) {
                    /** @type {?} */
                    var command_1 = overlay.content['menuItem'].command;
                    overlay.content['menuItem'].command = function (event) { return command_1.call(_this, _this.headerContext(event)); };
                }
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableHeaderColComponent.prototype.filterClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onFilterBtnClick.emit({
            event: event,
            column: this.column
        });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableHeaderColComponent.prototype.aggsClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onAggsBtnClick.emit({
            $event: event,
            column: this.column
        });
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    PngTableHeaderColComponent.prototype.headerContext = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        return {
            $event: event,
            $id: this.pngTable.$props.$id,
            column: this.column,
            pngTable: this.pngTable
        };
    };
    /**
     * @param {?} overlay
     * @param {?} index
     * @param {?=} event
     * @return {?}
     */
    PngTableHeaderColComponent.prototype.overlayContext = /**
     * @param {?} overlay
     * @param {?} index
     * @param {?=} event
     * @return {?}
     */
    function (overlay, index, event) {
        return {
            $event: event,
            type: overlay.type,
            content: CommonsUtils.getValue(overlay.content, this.headerContext(event)),
            context: overlay.context,
            styleClass: CommonsUtils.getValue(overlay.styleClass, this.headerContext(event)),
            style: CommonsUtils.getValue(overlay.style, this.headerContext(event)),
            overlayStyleClass: CommonsUtils.getValue(overlay.overlayStyleClass, this.headerContext(event)),
            overlayStyle: CommonsUtils.getValue(overlay.overlayStyle, this.headerContext(event)),
            id: "overlay-header-" + this.column.key + "-" + index
        };
    };
    PngTableHeaderColComponent.decorators = [
        { type: Component, args: [{
                    selector: '[png-table-header-col]',
                    template: "\n    <span *ngIf=\"!column.sortable\" [innerHTML]=\"column.label|erSafeHtml\"></span>\n    <span *ngIf=\"column.sortable\" title=\"\u6392\u5E8F\" [pSortableColumn]=\"column.key\" [innerHTML]=\"column.label|erSafeHtml\"></span>\n    <p-sortIcon *ngIf=\"column.sortable\" [field]=\"column.key\"></p-sortIcon>\n    <span *ngIf=\"column.filterable\" class=\"pull-right\">\n              <i class=\"fa fa-filter\" title=\"\u8F93\u5165\u67E5\u8BE2\u5185\u5BB9\" [ngClass]=\"{'ui-state-highlight': column.filters && column.filters.length>0}\"\n                 (click)=\"filterClick($event)\"></i>\n            </span>\n    <span *ngIf=\"column.aggable\" class=\"pull-right\">\n              <i class=\"fa fa-sum\" title=\"\u9009\u62E9\u7EDF\u8BA1\u65B9\u6CD5\" [ngClass]=\"{'ui-state-highlight': column.aggProps && column.aggProps.length>0}\"\n                 (click)=\"aggsClick($event)\"></i>\n            </span>\n    <ng-container *ngIf=\"column.headerOverlays\">\n      <ng-container *ngFor=\"let overlay of column.headerOverlays; index as i\">\n        <ng-container [ngSwitch]=\"overlay.type\">\n          <ng-container *ngSwitchCase=\"OVERLAY_TYPE.CHART\">\n            <i [ngClass]=\"overlay.icon || 'fa fa-bar-chart text-primary'\" class=\"pull-right\"\n               (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"OVERLAY_TYPE.TABLE\">\n            <i [ngClass]=\"overlay.icon || 'fa fa-eye text-primary'\" class=\"pull-right\"\n               (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"OVERLAY_TYPE.PANEL\">\n            <i [ngClass]=\"overlay.icon || 'fa fa-eye text-primary'\" class=\"pull-right\"\n               (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"OVERLAY_TYPE.MENU\">\n            <i [ngClass]=\"overlay.icon || 'fa fa-arrow-circle-down text-primary'\" class=\"pull-right\"\n               (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"OVERLAY_TYPE.FRAME\">\n            <i [ngClass]=\"overlay.icon || 'fa fa-play text-primary'\"\n               (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"OVERLAY_TYPE.COMPONENT\">\n            <i [ngClass]=\"overlay.icon || 'fa fa-eye text-primary'\"\n               (click)=\"pngTable.showOverlay(overlayContext(overlay,i,$event))\"></i>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngTableHeaderColComponent.ctorParameters = function () { return [
        { type: PngTableComponent },
        { type: ChangeDetectorRef }
    ]; };
    PngTableHeaderColComponent.propDecorators = {
        column: [{ type: Input }],
        onFilterBtnClick: [{ type: Output }],
        onAggsBtnClick: [{ type: Output }],
        colClass: [{ type: HostBinding, args: ['class',] }],
        width: [{ type: HostBinding, args: ['style.width',] }],
        colStyle: [{ type: HostBinding, args: ['style',] }]
    };
    return PngTableHeaderColComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngTableHeaderComponent = /** @class */ (function (_super) {
    __extends(PngTableHeaderComponent, _super);
    function PngTableHeaderComponent(pngTable) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.onFiltersSet = new EventEmitter();
        _this.onAggKeysSet = new EventEmitter();
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableHeaderComponent.prototype.showFilterPanel = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.filterColumn = event.column;
        /** @type {?} */
        var filters = this.filterColumn.filters;
        if (filters && filters.length > 0) {
            this.queryValue = filters[0];
        }
        else {
            this.queryValue = undefined;
        }
        this.filterPanel.toggle(event.event);
    };
    /**
     * @return {?}
     */
    PngTableHeaderComponent.prototype.clearFilterColumn = /**
     * @return {?}
     */
    function () {
        this.filterColumn = undefined;
    };
    /**
     * @return {?}
     */
    PngTableHeaderComponent.prototype.clearAggColumn = /**
     * @return {?}
     */
    function () {
        this.aggColumn = undefined;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableHeaderComponent.prototype.showAggsPanel = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.availableAggs = [];
        this.aggColumn = event.column;
        /** @type {?} */
        var type = this.aggColumn.dataType || DataType.STRING;
        this.aggMethods = (this.aggColumn.aggProps || []).map(function (aggProp) { return aggProp.method; });
        Object.keys(AggMethodsProps).forEach(function (method) {
            if (!AggMethodsProps[method].dataTypes || (AggMethodsProps[method].dataTypes && AggMethodsProps[method].dataTypes.indexOf(type) >= 0)) {
                _this.availableAggs.push({
                    label: AggMethodsProps[method].label,
                    key: AggMethodsProps[method].key
                });
            }
        });
        this.aggPanel.toggle(event.$event);
    };
    /**
     * @return {?}
     */
    PngTableHeaderComponent.prototype.setAggs = /**
     * @return {?}
     */
    function () {
        this.onAggKeysSet.emit({ column: this.aggColumn, methods: this.aggMethods });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PngTableHeaderComponent.prototype.updateFilters = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.filterPanel.hide();
        this.onFiltersSet.emit(event);
    };
    PngTableHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: '[png-table-header]',
                    template: "\n    <ng-container *ngIf=\"customerTpl;else default\">\n      <ng-container *ngTemplateOutlet=\"customerTpl;context:{$implicit:columns,context:pngTable}\"></ng-container>\n    </ng-container>\n    <ng-template #default>\n      <th *ngIf=\"pngTable.$props.$ext.rowExpandable\" class=\"col-expandable\"></th>\n      <th *ngIf=\"pngTable.$props.$ext.hasRowCheckbox\" class=\"col-checkbox\" title=\"\u5168\u9009\">\n        <p-tableHeaderCheckbox></p-tableHeaderCheckbox>\n      </th>\n      <th *ngIf=\"pngTable.$props.$ext.hasRowRadioButton\" class=\"col-radio\"></th>\n      <th *ngFor=\"let column of columns\" pReorderableColumn pResizableColumn\n          png-table-header-col\n          [column]=\"column\"\n          (onFilterBtnClick)=\"showFilterPanel($event)\"\n          (onAggsBtnClick)=\"showAggsPanel($event)\"\n      >\n      </th>\n    </ng-template>\n    <div class=\"d-none\">\n      <p-overlayPanel #filterPanel appendTo=\"body\"\n                      [dismissable]=\"false\" (onHide)=\"clearFilterColumn()\"\n                      [showCloseIcon]=\"true\">\n        <ng-container *ngIf=\"filterColumn\">\n          <png-field-data-filter [column]=\"filterColumn\" [queryValue]=\"queryValue\"\n                                 (onFilterChange)=\"updateFilters($event)\"></png-field-data-filter>\n        </ng-container>\n      </p-overlayPanel>\n      <p-overlayPanel #aggPanel appendTo=\"body\"\n                      [dismissable]=\"true\" (onHide)=\"clearAggColumn()\"\n                      [showCloseIcon]=\"true\">\n        <div class=\"shadow\" style=\"width:150px;margin-bottom:10px\">\n          <h6>\u53EF\u9009\u7EDF\u8BA1\u65B9\u5F0F</h6>\n          <ng-container *ngFor=\"let agg of availableAggs\">\n            <div style=\"font-size: .8em\">\n              <p-checkbox name=\"aggs\" [value]=\"agg['key']\" [label]=\"agg['label']\"\n                          [(ngModel)]=\"aggMethods\" (onChange)=\"setAggs()\"></p-checkbox>\n            </div>\n          </ng-container>\n        </div>\n      </p-overlayPanel>\n    </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngTableHeaderComponent.ctorParameters = function () { return [
        { type: PngTableComponent }
    ]; };
    PngTableHeaderComponent.propDecorators = {
        columns: [{ type: Input }],
        onFiltersSet: [{ type: Output }],
        onAggKeysSet: [{ type: Output }],
        filterPanel: [{ type: ViewChild, args: ['filterPanel',] }],
        aggPanel: [{ type: ViewChild, args: ['aggPanel',] }]
    };
    return PngTableHeaderComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngTableFieldDataFilterComponent = /** @class */ (function (_super) {
    __extends(PngTableFieldDataFilterComponent, _super);
    function PngTableFieldDataFilterComponent(pngTable) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.onFilterChange = new EventEmitter();
        return _this;
    }
    Object.defineProperty(PngTableFieldDataFilterComponent.prototype, "column", {
        get: /**
         * @return {?}
         */
        function () {
            return this._column;
        },
        set: /**
         * @param {?} column
         * @return {?}
         */
        function (column) {
            if (!this.queryKey && column) {
                this.queryKey = DataFieldUtils.getDefaultFieldName(column.dataField) || column.key;
            }
            if (!this.queryDataType && column) {
                this.queryDataType = column.filterDataType || column.dataType;
            }
            if (!this.queryDataAttr && column && column.dataAttr) {
                this.queryDataAttr = CommonsUtils.getArrayValue(column.dataAttr)[0];
            }
            this._column = column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngTableFieldDataFilterComponent.prototype, "dataField", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dataField;
        },
        set: /**
         * @param {?} dataField
         * @return {?}
         */
        function (dataField) {
            if (!this.queryKey && dataField) {
                this.queryKey = DataFieldUtils.getDefaultFieldName(dataField);
            }
            if (!this.queryDataType && dataField) {
                this.queryDataType = dataField.dataType;
            }
            this._dataField = dataField;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PngTableFieldDataFilterComponent.prototype.onFilter = /**
     * @return {?}
     */
    function () {
        this.onFilterChange.emit({
            key: this.queryKey,
            column: this.column,
            value: this.queryValue
        });
    };
    /**
     * @return {?}
     */
    PngTableFieldDataFilterComponent.prototype.clearFilter = /**
     * @return {?}
     */
    function () {
        this.queryValue = undefined;
        this.onFilter();
    };
    PngTableFieldDataFilterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-field-data-filter',
                    template: "\n    <div class=\"d-flex justify-content-end align-items-end\">\n      <png-query-input [queryKey]=\"queryKey\" [queryDataType]=\"queryDataType\" [queryDataAttr]=\"queryDataAttr\"\n                       [(queryValue)]=\"queryValue\"></png-query-input>\n      <ng-container *ngIf=\"queryValue\">\n      <span class=\"ml-2\">\n       <p-button\n         type=\"button\"\n         icon=\"fa fa-search\"\n         label=\"\u67E5\u8BE2\"\n         (click)=\"onFilter()\"\n       ></p-button>\n    </span>\n        <span class=\"ml-2\">\n    <p-button\n      type=\"button\"\n      icon=\"fa fa-trash\"\n      label=\"\u6E05\u9664\"\n      (click)=\"clearFilter()\"\n    ></p-button>\n    </span>\n      </ng-container>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    PngTableFieldDataFilterComponent.ctorParameters = function () { return [
        { type: PngTableComponent }
    ]; };
    PngTableFieldDataFilterComponent.propDecorators = {
        queryKey: [{ type: Input }],
        queryDataType: [{ type: Input }],
        queryDataAttr: [{ type: Input }],
        queryValue: [{ type: Input }],
        onFilterChange: [{ type: Output }],
        column: [{ type: Input }],
        dataField: [{ type: Input }]
    };
    return PngTableFieldDataFilterComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngTableQueryBuilderComponent = /** @class */ (function (_super) {
    __extends(PngTableQueryBuilderComponent, _super);
    function PngTableQueryBuilderComponent(pngTable) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.qbConfig = {};
        _this.switches = [
            { label: '并且', value: 'and', icon: 'fa fa-fw fa-cc-paypal' },
            { label: '或者', value: 'or', icon: 'fa fa-fw fa-cc-visa' },
            { label: '非', value: 'not', icon: 'fa fa-fw fa-cc-mastercard' }
        ];
        return _this;
    }
    /**
     * @return {?}
     */
    PngTableQueryBuilderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.qbConfig.fields = this.pngTable.$props.columns
            .filter(function (column) { return column.dataField; })
            .map(function (column) { return column.dataField; });
        this.qbConfig.operators = function (field) { return Object.keys(EsQueryMethods).map(function (key) {
            return {
                label: EsQueryMethods[key].label,
                value: EsQueryMethods[key].key
            };
        }); };
    };
    PngTableQueryBuilderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-table-query-builder',
                    template: "\n    <er-query-builder [config]=\"qbConfig\">\n      <!--<ng-template erTypedTemplate=\"switchGroup\" let-qb=\"qb\">-->\n      <!--<p-selectButton [options]=\"switches\" [ngModel]=\"qb.value.condition\"></p-selectButton>-->\n      <!--</ng-template>-->\n      <!--<ng-template erTypedTemplate=\"buttonGroup\" let-qb=\"qb\">-->\n      <!--<p-button label=\"\u6761\u4EF6\" icon=\"fa fa-plus\" (onClick)=\"qb.addRule()\"></p-button>-->\n      <!--<p-button label=\"\u7EC4\" icon=\"fa fa-group\" (onClick)=\"qb.addRuleSet()\"></p-button>-->\n      <!--<ng-container *ngIf=\"!!parentRuleSet && qb.config.allowRuleSet\">-->\n      <!--<p-button icon=\"fa fa-minus\" (onClick)=\"qb.removeRuleSet()\"></p-button>-->\n      <!--</ng-container>-->\n      <!--</ng-template>-->\n      <ng-template erTypedTemplate=\"input\" let-rule let-qb=\"qb\">\n        <png-query-input [options]=\"pngTable.$props.$ext\"></png-query-input>\n      </ng-template>\n    </er-query-builder>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return PngTableQueryBuilderComponent; }),
                            multi: true
                        }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngTableQueryBuilderComponent.ctorParameters = function () { return [
        { type: PngTableComponent }
    ]; };
    return PngTableQueryBuilderComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngQueryInputComponent = /** @class */ (function (_super) {
    __extends(PngQueryInputComponent, _super);
    function PngQueryInputComponent(pngTable) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.DATA_TYPE = DataType;
        _this.DATA_ATTR = DataAttr;
        _this.options = {};
        _this.queryValueChange = new EventEmitter();
        _this.isTime = false;
        _this.autoCompleteProps$ = new BehaviorSubject(undefined);
        return _this;
    }
    Object.defineProperty(PngQueryInputComponent.prototype, "queryValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._queryValue;
        },
        set: /**
         * @param {?} queryValue
         * @return {?}
         */
        function (queryValue) {
            this._queryValue = queryValue;
            this.queryValueChange.emit(queryValue);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PngQueryInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.autoProps = (/** @type {?} */ ({
            inputStyle: { 'min-width': '200px' },
            appendTo: 'body',
            forceSelection: false,
            $ext: {
                apiDataProps: __assign({}, this.pngTable.getTableQuery(), { searchFields: this.queryKey, returnFields: this.queryKey, aggProps: { name: this.queryKey, field: this.queryKey }, dataPath: "aggs." + this.queryKey }),
                dataItemProps: {
                    showCounter: true,
                    dropDownOptionKey: DataItemUtils.ITEM_LABEL_KEY,
                    valueKey: DataItemUtils.ITEM_LABEL_KEY
                }
            }
        }));
        this.sliderProps = (/** @type {?} */ ({
            range: true,
            $ext: {
                apiDataProps: __assign({}, this.pngTable.getTableQuery(), { aggProps: [
                        { name: 'max', field: this.queryKey, method: AggMethods.MAX },
                        { name: 'min', field: this.queryKey, method: AggMethods.MIN }
                    ] })
            }
        }));
        if (this.queryDataType === DataType.DATE && this.queryDataAttr) {
            /** @type {?} */
            var attrs = CommonsUtils.getArrayValue(this.queryDataAttr);
            if (attrs.indexOf(DataAttr.DATE) >= 0) {
                this.isTime = false;
            }
            if (attrs.indexOf(DataAttr.TIME) >= 0) {
                this.isTime = true;
            }
        }
    };
    PngQueryInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-query-input',
                    template: "\n    <ng-container [ngSwitch]=\"queryDataType\">\n      <ng-container *ngSwitchCase=\"DATA_TYPE.NUMBER\">\n        <png-slider [(ngModel)]=\"queryValue\"\n                    erPropsBind\n                    [props]=\"sliderProps\"\n        >\n        </png-slider>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"DATA_TYPE.BOOLEAN\">\n        <p-inputSwitch [(ngModel)]=\"queryValue\">\n        </p-inputSwitch>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"DATA_TYPE.DATE\">\n        <ng-container *ngIf=\"!isTime\">\n          <png-calendar erPropsBind [(ngModel)]=\"queryValue\"\n                        [props]=\"{ selectionMode: 'range',placeholder:'\u8BF7\u9009\u62E9\u65E5\u671F'}\">\n          </png-calendar>\n        </ng-container>\n        <ng-container *ngIf=\"isTime\">\n          <png-calendar erPropsBind [(ngModel)]=\"queryValue\"\n                        [props]=\"{ timeOnly: true, selectionMode: 'range',placeholder:'\u8BF7\u9009\u62E9\u65F6\u95F4'}\"\n          >\n          </png-calendar>\n        </ng-container>\n      </ng-container>\n      <ng-container *ngSwitchDefault>\n        <png-auto-complete\n          [(ngModel)]=\"queryValue\"\n          erPropsBind\n          [props]=\"autoProps\"\n        >\n        </png-auto-complete>\n        <!--<input type=\"text\" pInputText [(ngModel)]=\"queryValue\" placeholder=\"\u8F93\u5165\u67E5\u8BE2\u6807\u51C6\">-->\n      </ng-container>\n    </ng-container>\n  ",
                    styles: ["/deep/ .ui-multiselect{min-width:150px}/deep/ .ui-multiselect-label-container label{margin:0!important}/deep/ .ui-slider{width:100px;margin:5px}"]
                }] }
    ];
    /** @nocollapse */
    PngQueryInputComponent.ctorParameters = function () { return [
        { type: PngTableComponent }
    ]; };
    PngQueryInputComponent.propDecorators = {
        queryKey: [{ type: Input }],
        queryDataType: [{ type: Input }],
        queryDataAttr: [{ type: Input }],
        options: [{ type: Input }],
        autoProps: [{ type: Input }],
        sliderProps: [{ type: Input }],
        queryValueChange: [{ type: Output }],
        queryValue: [{ type: Input }]
    };
    return PngQueryInputComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngTableSummaryComponent = /** @class */ (function (_super) {
    __extends(PngTableSummaryComponent, _super);
    function PngTableSummaryComponent(pngTable, cd) {
        var _this = _super.call(this) || this;
        _this.pngTable = pngTable;
        _this.cd = cd;
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    PngTableSummaryComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.aggValues) {
            if (changes.aggValues.currentValue) {
                this.colAggValues = {};
                Object.keys(changes.aggValues.currentValue)
                    .forEach(function (key) {
                    /** @type {?} */
                    var name = key;
                    if (key.indexOf('-') > 0) {
                        name = key.substr(0, key.indexOf('-'));
                    }
                    /** @type {?} */
                    var type = key.substr(key.indexOf('-') + 1);
                    /** @type {?} */
                    var values = _this.colAggValues[name];
                    if (!values) {
                        values = [];
                        _this.colAggValues[name] = values;
                    }
                    /** @type {?} */
                    var agg = {};
                    agg['type'] = AggMethodsProps[type] && AggMethodsProps[type].label;
                    if (CommonsUtils.isArray(_this.aggValues[key])) {
                        agg['values'] = _this.aggValues[key];
                    }
                    else {
                        agg['value'] = _this.aggValues[key];
                    }
                    values.push(agg);
                });
            }
            else {
                this.colAggValues = undefined;
            }
            this.cd.detectChanges();
        }
    };
    /**
     * @param {?} column
     * @return {?}
     */
    PngTableSummaryComponent.prototype.cellClass = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return CommonsUtils.getValue(column.aggCellClass, column);
    };
    /**
     * @param {?} column
     * @return {?}
     */
    PngTableSummaryComponent.prototype.cellStyle = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return CommonsUtils.getValue(column.aggCellStyle, column);
    };
    PngTableSummaryComponent.decorators = [
        { type: Component, args: [{
                    selector: '[png-table-summary]',
                    template: "\n    <ng-container *ngIf=\"customerTpl;else default\">\n      <ng-container *ngTemplateOutlet=\"customerTpl;context:{$implicit:aggValues,columns:columns,context:pngTable}\"></ng-container>\n    </ng-container>\n    <ng-template #default>\n      <th *ngIf=\"pngTable.$props.$ext.rowExpandable\" class=\"col-expandable col-summary\"></th>\n      <th *ngIf=\"pngTable.$props.$ext.hasRowCheckbox\" class=\"col-checkbox col-summary\"></th>\n      <th *ngIf=\"pngTable.$props.$ext.hasRowRadioButton\" class=\"col-radio col-summary\"></th>\n      <ng-container *ngIf=\"colAggValues\">\n        <th *ngFor=\"let col of columns\" [width]=\"col.width\" class=\"text-right col-summary col-summary-{{col.key}}\">\n          <ng-container *ngFor=\"let agg of colAggValues[col.key]\">\n            <ng-container *ngIf=\"agg.value\">\n              <div [ngClass]=\"cellClass(col)\" style=\"font-size: 0.8em\"\n                   [ngStyle]=\"cellStyle(col)\">{{agg.type}}: {{agg.value | floor: 2}}\n              </div>\n            </ng-container>\n            <ng-container *ngIf=\"agg.values\">\n              <div [ngClass]=\"cellClass(col)\" style=\"font-size: 0.8em\"\n                   [ngStyle]=\"cellStyle(col)\"> {{agg.type}}:\n              </div>\n              <ul>\n                <ng-container *ngFor=\"let data of agg.values\">\n                  <li class=\"border-bottom\"><span class=\"\">{{data.label}}:</span><span class=\"badge badge-pill btn-info\">{{data.value}}</span></li>\n                </ng-container>\n              </ul>\n            </ng-container>\n          </ng-container>\n        </th>\n      </ng-container>\n    </ng-template>\n\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PngTableSummaryComponent.ctorParameters = function () { return [
        { type: PngTableComponent },
        { type: ChangeDetectorRef }
    ]; };
    PngTableSummaryComponent.propDecorators = {
        columns: [{ type: Input }],
        aggValues: [{ type: Input }]
    };
    return PngTableSummaryComponent;
}(BaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PngTableSubComponents = [
    PngTableCaptionComponent,
    PngTableHeaderComponent,
    PngTableHeaderColComponent,
    PngTableFieldDataFilterComponent,
    PngTableBodyRowComponent,
    PngTableBodyCellContentComponent,
    PngTableBodyCellComponent,
    PngTableExpandedRowComponent,
    PngTableFooterComponent,
    PngTableSummaryComponent,
    PngTableColumnSelectorComponent,
    PngTableQueryBuilderComponent,
    PngQueryInputComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ErPrimeNgModule = /** @class */ (function () {
    function ErPrimeNgModule() {
    }
    ErPrimeNgModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        FormsModule,
                        ReactiveFormsModule,
                        ErCoreModule,
                        PrimeNgComponentsModule
                    ],
                    declarations: __spread(PngComponents, PngTableSubComponents),
                    exports: __spread([
                        PrimeNgComponentsModule
                    ], PngComponents),
                    entryComponents: PngComponents
                },] }
    ];
    return ErPrimeNgModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WorkSpaceFooterComponent = /** @class */ (function () {
    function WorkSpaceFooterComponent(ws) {
        this.ws = ws;
    }
    Object.defineProperty(WorkSpaceFooterComponent.prototype, "elapseTime$", {
        get: /**
         * @return {?}
         */
        function () {
            return StatesUtils.observe(StateNames.httpTimer)
                .pipe(distinctUntilChanged(), map(function (v) { return v && v['elapsed']; }));
        },
        enumerable: true,
        configurable: true
    });
    WorkSpaceFooterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-ws-footer',
                    template: "<div class=\"layout-footer\">\n  <span class=\"footer-text-left\">\n     <img [src]=\"ws.appLogo\"/>\n  </span>\n  <span class=\"footer-text-right\">\n    <span class=\"text-muted small\" *ngIf=\"elapseTime$|async as elapseTime\">\u7F51\u7EDC\u8BBF\u95EE\u8017\u65F6\uFF1A{{elapseTime}}\u6BEB\u79D2</span>\n  </span>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    WorkSpaceFooterComponent.ctorParameters = function () { return [
        { type: PngAdminWorkSpaceComponent }
    ]; };
    return WorkSpaceFooterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WorkSpaceTopBarComponent = /** @class */ (function () {
    function WorkSpaceTopBarComponent(ws) {
        this.ws = ws;
    }
    /**
     * @return {?}
     */
    WorkSpaceTopBarComponent.prototype.toggleMainMenu = /**
     * @return {?}
     */
    function () {
        StatesUtils.toggle(StateNames.menu, this.ws.rootMenuToggleStateName);
        event.preventDefault();
    };
    WorkSpaceTopBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-ws-topbar',
                    template: "<div class=\"topbar clearfix\">\n  <div class=\"topbar-left\">\n    <img [src]=\"ws.appLogo\" class=\"topbar-logo\"/>\n    <span class=\"topbar-title\">{{ws.appTitle}}</span>\n  </div>\n\n  <div class=\"topbar-right\">\n    <a id=\"menu-button\" href=\"#\" (click)=\"toggleMainMenu()\"\n       [ngClass]=\"{'menu-button-rotate': ws.rotateMenuButton}\">\n      <i class=\"fa fa-angle-left\"></i>\n    </a>\n\n    <a id=\"topbar-menu-button\" href=\"#\" (click)=\"ws.onTopbarMenuButtonClick($event)\">\n      <i class=\"fa fa-bars\"></i>\n    </a>\n\n    <span [innerHTML]=\"ws.appName|erSafeHtml\"></span>\n\n    <ul class=\"topbar-items fadeInDown\" [ngClass]=\"{'topbar-items-visible': ws.topbarMenuActive}\">\n      <!--<li #profile class=\"profile-item\" *ngIf=\"ws.profileMode==='top'||ws.isHorizontal()\"-->\n      <!--[ngClass]=\"{'active-top-menu':ws.activeTopbarItem === profile}\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarItemClick($event,profile)\">-->\n      <!--<img class=\"profile-image\" src=\"assets/layout/images/avatar.png\" />-->\n      <!--<span class=\"topbar-item-name\">Isabel Lopez</span>-->\n      <!--<span class=\"topbar-item-role\">Marketing</span>-->\n      <!--</a>-->\n      <!--<ul class=\"layout-menu fadeInDown\">-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-user\"></i>-->\n      <!--<span>Profile</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-user-secret\"></i>-->\n      <!--<span>Privacy</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-cog\"></i>-->\n      <!--<span>Settings</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-sign-out\"></i>-->\n      <!--<span>Logout</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--</ul>-->\n      <!--</li>-->\n      <!--<li #settings [ngClass]=\"{'active-top-menu':ws.activeTopbarItem === settings}\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarItemClick($event,settings)\">-->\n      <!--<i class=\"topbar-icon fa fa-fw fa-cog\"></i>-->\n      <!--<span class=\"topbar-item-name\">Settings</span>-->\n      <!--</a>-->\n      <!--<ul class=\"layout-menu fadeInDown\">-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-paint-brush\"></i>-->\n      <!--<span>Change Theme</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-star-o\"></i>-->\n      <!--<span>Favorites</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-lock\"></i>-->\n      <!--<span>Lock Screen</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-picture-o\"></i>-->\n      <!--<span>Wallpaper</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--</ul>-->\n      <!--</li>-->\n      <!--<li #messages [ngClass]=\"{'active-top-menu':ws.activeTopbarItem === messages}\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarItemClick($event,messages)\">-->\n      <!--<i class=\"topbar-icon animated swing fa fa-fw fa-envelope-o\"></i>-->\n      <!--<span class=\"topbar-badge animated rubberBand\">5</span>-->\n      <!--<span class=\"topbar-item-name\">Messages</span>-->\n      <!--</a>-->\n      <!--<ul class=\"layout-menu fadeInDown\">-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" class=\"topbar-message\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<img src=\"assets/layout/images/avatar1.png\" width=\"35\"/>-->\n      <!--<span>Give me a call</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" class=\"topbar-message\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<img src=\"assets/layout/images/avatar2.png\" width=\"35\"/>-->\n      <!--<span>Sales reports attached</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" class=\"topbar-message\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<img src=\"assets/layout/images/avatar3.png\" width=\"35\"/>-->\n      <!--<span>About your invoice</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" class=\"topbar-message\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<img src=\"assets/layout/images/avatar2.png\" width=\"35\"/>-->\n      <!--<span>Meeting today at 10pm</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" class=\"topbar-message\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<img src=\"assets/layout/images/avatar4.png\" width=\"35\"/>-->\n      <!--<span>Out of office</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--</ul>-->\n      <!--</li>-->\n      <!--<li #notifications [ngClass]=\"{'active-top-menu':ws.activeTopbarItem === notifications}\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarItemClick($event,notifications)\">-->\n      <!--<i class=\"topbar-icon fa fa-fw fa-bell-o\"></i>-->\n      <!--<span class=\"topbar-badge animated rubberBand\">4</span>-->\n      <!--<span class=\"topbar-item-name\">Notifications</span>-->\n      <!--</a>-->\n      <!--<ul class=\"layout-menu fadeInDown\">-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-tasks\"></i>-->\n      <!--<span>Pending tasks</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-calendar-check-o\"></i>-->\n      <!--<span>Meeting today at 3pm</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-download\"></i>-->\n      <!--<span>Download documents</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--<li role=\"menuitem\">-->\n      <!--<a href=\"#\" (click)=\"ws.onTopbarSubItemClick($event)\">-->\n      <!--<i class=\"fa fa-fw fa-plane\"></i>-->\n      <!--<span>Book flight</span>-->\n      <!--</a>-->\n      <!--</li>-->\n      <!--</ul>-->\n      <!--</li>-->\n      <li #search class=\"search-item\" [ngClass]=\"{'active-top-menu':ws.activeTopbarItem === search}\"\n          (click)=\"ws.onTopbarItemClick($event,search)\">\n        <div class=\"topbar-search\">\n          <input type=\"text\" style=\"border-radius: 15px\" placeholder=\"\u8BF7\u8F93\u5165\u641C\u7D22\u5173\u952E\u5B57\" />\n          <i class=\"fa fa-search\"></i>\n        </div>\n      </li>\n    </ul>\n  </div>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    WorkSpaceTopBarComponent.ctorParameters = function () { return [
        { type: PngAdminWorkSpaceComponent }
    ]; };
    return WorkSpaceTopBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WorkSpaceMainMenuComponent = /** @class */ (function () {
    function WorkSpaceMainMenuComponent(ws) {
        this.ws = ws;
        this.theme = 'blue';
        this.layout = 'blue';
        this.version = 'v4';
    }
    /**
     * @return {?}
     */
    WorkSpaceMainMenuComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.menus$ = StatesUtils.observe(StateNames.rootMenu)
            .pipe(map(function (menu) { return (menu && menu.menuItems) || []; }), distinctUntilChanged());
    };
    /**
     * @param {?} theme
     * @return {?}
     */
    WorkSpaceMainMenuComponent.prototype.changeTheme = /**
     * @param {?} theme
     * @return {?}
     */
    function (theme) {
        /** @type {?} */
        var themeLink = (/** @type {?} */ (document.getElementById('theme-css')));
        if (this.version === 'v3') {
            themeLink.href = 'assets/theme/theme-' + theme + '.css';
        }
        else {
            themeLink.href = 'assets/theme/theme-' + theme + '-v4' + '.css';
        }
        this.theme = theme;
    };
    /**
     * @param {?} layout
     * @param {?=} special
     * @return {?}
     */
    WorkSpaceMainMenuComponent.prototype.changeLayout = /**
     * @param {?} layout
     * @param {?=} special
     * @return {?}
     */
    function (layout, special) {
        /** @type {?} */
        var layoutLink = (/** @type {?} */ (document.getElementById('layout-css')));
        if (this.version === 'v3') {
            layoutLink.href = 'assets/layout/css/layout-' + layout + '.css';
        }
        else {
            layoutLink.href = 'assets/layout/css/layout-' + layout + '-v4' + '.css';
        }
        this.layout = layout;
        if (special) {
            this.ws.darkMenu = true;
        }
    };
    /**
     * @param {?} version
     * @return {?}
     */
    WorkSpaceMainMenuComponent.prototype.changeVersion = /**
     * @param {?} version
     * @return {?}
     */
    function (version) {
        /** @type {?} */
        var themeLink = (/** @type {?} */ (document.getElementById('theme-css')));
        /** @type {?} */
        var layoutLink = (/** @type {?} */ (document.getElementById('layout-css')));
        if (version === 'v3') {
            this.version = 'v3';
            themeLink.href = 'assets/theme/theme-' + this.theme + '.css';
            layoutLink.href = 'assets/layout/css/layout-' + this.layout + '.css';
        }
        else {
            themeLink.href = 'assets/theme/theme-' + this.theme + '-v4' + '.css';
            layoutLink.href = 'assets/layout/css/layout-' + this.layout + '-v4' + '.css';
            this.version = '-v4';
        }
    };
    WorkSpaceMainMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-ws-main-menu',
                    template: "\n    <ul png-ws-sub-menu\n        erAnimate=\"fadeInDown\"\n        class=\"layout-menu layout-main-menu clearfix\"\n        [erHttpState]=\"httpMenuTag\"\n        [item]=\"menus$|async\" [root]=\"true\"\n        [reset]=\"reset\"\n        [visible]=\"true\"\n        [parentActive]=\"true\"></ul>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    WorkSpaceMainMenuComponent.ctorParameters = function () { return [
        { type: PngAdminWorkSpaceComponent }
    ]; };
    WorkSpaceMainMenuComponent.propDecorators = {
        reset: [{ type: Input }],
        httpMenuTag: [{ type: Input }]
    };
    return WorkSpaceMainMenuComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WorkSpaceSubMenuComponent = /** @class */ (function () {
    function WorkSpaceSubMenuComponent(ws, wsMenu) {
        this.ws = ws;
        this.wsMenu = wsMenu;
    }
    Object.defineProperty(WorkSpaceSubMenuComponent.prototype, "reset", {
        get: /**
         * @return {?}
         */
        function () {
            return this._reset;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._reset = val;
            if (this._reset && (this.ws.isHorizontal() || this.ws.isSlim())) {
                this.activeIndex = null;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WorkSpaceSubMenuComponent.prototype, "parentActive", {
        get: /**
         * @return {?}
         */
        function () {
            return this._parentActive;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._parentActive = val;
            if (!this._parentActive) {
                this.activeIndex = null;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    WorkSpaceSubMenuComponent.prototype.itemClick = /**
     * @param {?} event
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    function (event, item, index) {
        var _this = this;
        if (this.root) {
            this.ws.menuHoverActive = !this.ws.menuHoverActive;
        }
        // avoid processing disabled items
        if (item.disabled) {
            event.preventDefault();
            return true;
        }
        // activate current item and deactivate active sibling if any
        this.activeIndex = (this.activeIndex === index) ? null : index;
        // execute command
        if (item.command) {
            item.command({ originalEvent: event, item: item, menu: this.wsMenu, ws: this.ws });
        }
        // prevent hash change
        if (item.items || (!item.url && !item.routerLink)) {
            setTimeout(function () {
                _this.ws.layoutMenuScrollerViewChild.moveBar();
            }, 450);
            event.preventDefault();
        }
        // hide menu
        if (!item.items) {
            if (this.ws.isHorizontal() || this.ws.isSlim()) {
                this.ws.resetMenu = true;
            }
            else {
                this.ws.resetMenu = false;
            }
            this.ws.overlayMenuActive = false;
            this.ws.staticMenuMobileActive = false;
            this.ws.menuHoverActive = !this.ws.menuHoverActive;
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    WorkSpaceSubMenuComponent.prototype.onMouseEnter = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.root && this.ws.menuHoverActive && (this.ws.isHorizontal() || this.ws.isSlim())
            && !this.ws.isMobile() && !this.ws.isTablet()) {
            this.activeIndex = index;
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    WorkSpaceSubMenuComponent.prototype.isActive = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.activeIndex === index;
    };
    WorkSpaceSubMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: '[png-ws-sub-menu]',
                    template: "<ng-template ngFor let-child let-i=\"index\" [ngForOf]=\"(root ? item : item.items)\">\n  <li [ngClass]=\"{'active-menuitem': isActive(i)}\" [class]=\"child.badgeStyleClass\"\n      *ngIf=\"child.visible === false ? false : true\">\n    <a [href]=\"child.url||'#'\" (click)=\"itemClick($event,child,i)\" (mouseenter)=\"onMouseEnter(i)\"\n       class=\"ripplelink\" *ngIf=\"!child.routerLink\"\n       [attr.tabindex]=\"!visible ? '-1' : null\" [attr.target]=\"child.target\">\n      <i [ngClass]=\"child.icon\"></i><span>{{child.label}}</span>\n      <i class=\"fa fa-fw fa-angle-down menuitem-toggle-icon\" *ngIf=\"child.items\"></i>\n      <span class=\"menuitem-badge\" *ngIf=\"child.badge\">{{child.badge}}</span>\n    </a>\n\n    <a (click)=\"itemClick($event,child,i)\" (mouseenter)=\"onMouseEnter(i)\" class=\"ripplelink\" *ngIf=\"child.routerLink\"\n       [routerLink]=\"child.routerLink\" routerLinkActive=\"active-menuitem-routerlink\"\n       [routerLinkActiveOptions]=\"{exact: true}\" [attr.tabindex]=\"!visible ? '-1' : null\" [attr.target]=\"child.target\">\n      <i [ngClass]=\"child.icon\"></i><span>{{child.label}}</span>\n      <i class=\"fa fa-fw fa-angle-down menuitem-toggle-icon\" *ngIf=\"child.items\"></i>\n      <span class=\"menuitem-badge\" *ngIf=\"child.badge\">{{child.badge}}</span>\n    </a>\n    <div class=\"layout-menu-tooltip\">\n      <div class=\"layout-menu-tooltip-arrow\"></div>\n      <div class=\"layout-menu-tooltip-text\">{{child.label}}</div>\n    </div>\n    <div class=\"submenu-arrow\" *ngIf=\"child.items\"></div>\n    <ul png-ws-sub-menu [item]=\"child\" *ngIf=\"child.items\" [visible]=\"isActive(i)\" [reset]=\"reset\"\n        [parentActive]=\"isActive(i)\"\n        [@children]=\"(ws.isSlim()||ws.isHorizontal())&&root ? isActive(i) ?\n                     'visible' : 'hidden' : isActive(i) ? 'visibleAnimated' : 'hiddenAnimated'\"></ul>\n  </li>\n</ng-template>",
                    animations: [
                        trigger('children', [
                            state('hiddenAnimated', style({
                                height: '0px'
                            })),
                            state('visibleAnimated', style({
                                height: '*'
                            })),
                            state('visible', style({
                                display: 'block'
                            })),
                            state('hidden', style({
                                display: 'none'
                            })),
                            transition('visibleAnimated => hiddenAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                            transition('hiddenAnimated => visibleAnimated', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
                        ])
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    WorkSpaceSubMenuComponent.ctorParameters = function () { return [
        { type: PngAdminWorkSpaceComponent },
        { type: WorkSpaceMainMenuComponent }
    ]; };
    WorkSpaceSubMenuComponent.propDecorators = {
        item: [{ type: Input }],
        root: [{ type: Input }],
        visible: [{ type: Input }],
        reset: [{ type: Input }],
        parentActive: [{ type: Input }]
    };
    return WorkSpaceSubMenuComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WorkSpaceProfileComponent = /** @class */ (function () {
    function WorkSpaceProfileComponent(ws) {
        this.ws = ws;
        this.profileRouter = ConfigUtils.getConfig().auth.profileRouter;
        this.changePwdRouter = ConfigUtils.getConfig().auth.changePwdRouter;
        this.avatar = 'assets/layout/images/avatar.png';
    }
    Object.defineProperty(WorkSpaceProfileComponent.prototype, "user", {
        get: /**
         * @return {?}
         */
        function () {
            return AuthUtils.getCurrentUser();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    WorkSpaceProfileComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.active = !this.active;
        event.preventDefault();
    };
    /**
     * @return {?}
     */
    WorkSpaceProfileComponent.prototype.logout = /**
     * @return {?}
     */
    function () {
        AuthUtils.logout();
    };
    /**
     * @return {?}
     */
    WorkSpaceProfileComponent.prototype.change = /**
     * @return {?}
     */
    function () {
        RouteUtils.nav(this.changePwdRouter);
    };
    WorkSpaceProfileComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-ws-profile',
                    template: "<div class=\"profile\" [ngClass]=\"{'profile-expanded':active}\">\n  <a href=\"#\" (click)=\"onClick($event)\">\n    <img class=\"profile-image\" [src]=\"user?.avatar || avatar\"/>\n    <span class=\"profile-name\">{{user?.fullName}}</span>\n    <i class=\"fa fa-fw fa-caret-down\"></i>\n    <span class=\"profile-role\">{{user?.mainRole}}</span>\n  </a>\n</div>\n\n<ul id=\"profile-menu\" class=\"layout-menu\" [@menu]=\"active ? 'visible' : 'hidden'\">\n  <li role=\"menuitem\">\n    <a href=\"#\" [routerLink]=\"profileRouter\" [attr.tabindex]=\"!active ? '-1' : null\">\n      <i class=\"fa fa-fw fa-user\"></i>\n      <span>\u4E2A\u4EBA\u4FE1\u606F</span>\n    </a>\n    <div class=\"layout-menu-tooltip\">\n      <div class=\"layout-menu-tooltip-arrow\"></div>\n      <div class=\"layout-menu-tooltip-text\"><a [routerLink]=\"profileRouter\">\u4E2A\u4EBA\u4FE1\u606F</a></div>\n    </div>\n  </li>\n  <li role=\"menuitem\">\n    <a href=\"#\" [routerLink]=\"changePwdRouter\" [attr.tabindex]=\"!active ? '-1' : null\">\n      <i class=\"fa fa-fw fa-user-secret\"></i>\n      <span>\u4FEE\u6539\u5BC6\u7801</span>\n    </a>\n    <div class=\"layout-menu-tooltip\">\n      <div class=\"layout-menu-tooltip-arrow\"></div>\n      <div class=\"layout-menu-tooltip-text\"><a [routerLink]=\"changePwdRouter\">\u4FEE\u6539\u5BC6\u7801</a></div>\n    </div>\n  </li>\n  <!--<li role=\"menuitem\">-->\n  <!--<a href=\"#\" [attr.tabindex]=\"!active ? '-1' : null\">-->\n  <!--<i class=\"fa fa-fw fa-cog\"></i>-->\n  <!--<span>\u4E2A\u6027\u8BBE\u7F6E</span>-->\n  <!--</a>-->\n  <!--<div class=\"layout-menu-tooltip\">-->\n  <!--<div class=\"layout-menu-tooltip-arrow\"></div>-->\n  <!--<div class=\"layout-menu-tooltip-text\">\u4E2A\u6027\u8BBE\u7F6E</div>-->\n  <!--</div>-->\n  <!--</li>-->\n  <li role=\"menuitem\">\n    <a href=\"#\" [attr.tabindex]=\"!active ? '-1' : null\">\n      <i class=\"fa fa-fw fa-sign-out\"></i>\n      <span (click)=\"logout()\">\u9000\u51FA\u767B\u5F55</span>\n    </a>\n    <div class=\"layout-menu-tooltip\">\n      <div class=\"layout-menu-tooltip-arrow\"></div>\n      <div class=\"layout-menu-tooltip-text\" (click)=\"logout()\">\u9000\u51FA\u767B\u5F55</div>\n    </div>\n  </li>\n</ul>\n",
                    animations: [
                        trigger('menu', [
                            state('hidden', style({
                                height: '0px'
                            })),
                            state('visible', style({
                                height: '*'
                            })),
                            transition('visible => hidden', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)')),
                            transition('hidden => visible', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))
                        ])
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    WorkSpaceProfileComponent.ctorParameters = function () { return [
        { type: PngAdminWorkSpaceComponent }
    ]; };
    return WorkSpaceProfileComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PngAdminWorkSpaceModule = /** @class */ (function () {
    function PngAdminWorkSpaceModule() {
    }
    PngAdminWorkSpaceModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        FormsModule,
                        ErCoreModule,
                        PrimeNgComponentsModule
                    ],
                    declarations: [
                        WorkSpaceFooterComponent,
                        WorkSpaceMainMenuComponent,
                        WorkSpaceSubMenuComponent,
                        WorkSpaceProfileComponent,
                        WorkSpaceTopBarComponent,
                        PngAdminWorkSpaceComponent
                    ],
                    exports: [
                        PngAdminWorkSpaceComponent
                    ]
                },] }
    ];
    return PngAdminWorkSpaceModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { PngAdminWorkSpaceComponent, PrimeNgComponentsModule, ErPrimeNgModule, PngAdminWorkSpaceModule, PngTableComponent, PngAutoCompleteComponent, PngConfirmDialogComponent, PngCalendarComponent, PngOverlayPanelComponent, PngPanelComponent, PngPopupDialogComponent, PngAlertComponent, PngAnnounceComponent, PngInputComponent, PngOptionItemComponent, PngSearchBoxComponent, ValidateMessageTooltipComponent, PngSliderComponent, PngTreeNavTableComponent, PngButtonComponent, PngButtonsComponent, PngCheckBoxComponent, PngImageComponent, PngSelectComponent, PngMultiSelectComponent, PngListBoxComponent, PngRadioComponent, PngRatingComponent, PngTreeComponent, PNG_TREE_NODE_KEYS, PngWizardComponent, PngStepComponent, PngChartComponent, PngFileUploadComponent, PngSelectButtonComponent, PngComponents, defaultPngColumnProps, defaultPngTableProps, defaultRowIndexColumn, defaultOrderedRowIndexColumn, defaultActionColumn, defaultAddButton, defaultViewButton, defaultEditButton, defaultDeleteButton, defaultAuditButton, defaultDownloadButton, defaultOverlayColumnProps, defaultOverlayTableProps, PngTableSubComponents as ɵa, PngTableBodyCellContentComponent as ɵg, PngTableBodyCellComponent as ɵh, PngTableBodyRowComponent as ɵf, PngTableCaptionComponent as ɵb, PngTableColumnSelectorComponent as ɵl, PngTableExpandedRowComponent as ɵi, PngTableFooterComponent as ɵj, PngTableHeaderColComponent as ɵd, PngTableHeaderComponent as ɵc, PngTableFieldDataFilterComponent as ɵe, PngTableQueryBuilderComponent as ɵm, PngQueryInputComponent as ɵn, PngTableSummaryComponent as ɵk, WorkSpaceFooterComponent as ɵo, WorkSpaceTopBarComponent as ɵs, WorkSpaceMainMenuComponent as ɵp, WorkSpaceSubMenuComponent as ɵq, WorkSpaceProfileComponent as ɵr };

//# sourceMappingURL=er-primeng.js.map