/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonsUtils } from '../comm';
var DataItemUtils = /** @class */ (function () {
    function DataItemUtils() {
    }
    /**
     * @param {?} items
     * @param {?} config
     * @return {?}
     */
    DataItemUtils.transItems = /**
     * @param {?} items
     * @param {?} config
     * @return {?}
     */
    function (items, config) {
        if (!config) {
            return items;
        }
        /** @type {?} */
        var _data = [];
        /** @type {?} */
        var groups = {};
        items.map(function (item) {
            _data.push(DataItemUtils.transItem(item, config));
        });
        if (config.groupKey) {
            _data.map(function (item) {
                /** @type {?} */
                var group = DataItemUtils.getItemLabel(item, config.groupKey || 'group');
                if (!groups[group]) {
                    groups[group] = [];
                }
                groups[group].push(item);
            });
            _data = [];
            Object.keys(groups).forEach(function (group) {
                _data.push({
                    label: group,
                    items: groups[group]
                });
            });
        }
        return _data;
    };
    /**
     * @param {?} item
     * @param {?} config
     * @return {?}
     */
    DataItemUtils.transItem = /**
     * @param {?} item
     * @param {?} config
     * @return {?}
     */
    function (item, config) {
        var _a;
        /** @type {?} */
        var _item = (_a = {},
            _a[DataItemUtils.ITEM_LABEL_KEY] = DataItemUtils.getItemLabel(item, config.labelKey || DataItemUtils.ITEM_LABEL_KEY),
            _a[DataItemUtils.ITEM_VALUE_KEY] = DataItemUtils.getItemValue(item, config.valueKey),
            _a[DataItemUtils.ITEM_DATA_KEY] = item,
            _a);
        return _item;
    };
    /**
     * @param {?} item
     * @param {?} valueKey
     * @return {?}
     */
    DataItemUtils.getItemValue = /**
     * @param {?} item
     * @param {?} valueKey
     * @return {?}
     */
    function (item, valueKey) {
        if (CommonsUtils.isString(item)) {
            return item;
        }
        if (CommonsUtils.isArray(item)) {
            return item.map(function (data) { return DataItemUtils.getItemValue(data, valueKey); });
        }
        else {
            if (typeof valueKey === 'function') {
                return valueKey(item);
            }
            else if (CommonsUtils.isArray(valueKey)) {
                /** @type {?} */
                var value_1 = {};
                valueKey.forEach(function (p) {
                    /** @type {?} */
                    var val = CommonsUtils.get(item, p);
                    if (val) {
                        value_1[p] = val;
                    }
                });
                return value_1;
            }
            return valueKey ? CommonsUtils.get(item, valueKey) : item;
        }
    };
    /**
     * @param {?} item
     * @param {?} label
     * @return {?}
     */
    DataItemUtils.getItemLabel = /**
     * @param {?} item
     * @param {?} label
     * @return {?}
     */
    function (item, label) {
        if (CommonsUtils.isFunction(label)) {
            return label(item);
        }
        else if (item) {
            if (CommonsUtils.isArray(label)) {
                /** @type {?} */
                var s_1 = [];
                ((/** @type {?} */ (label))).forEach(function (key) {
                    /** @type {?} */
                    var lb = DataItemUtils.getLabel(item, key);
                    if (lb) {
                        s_1.push(lb);
                    }
                });
                return s_1;
            }
            else {
                return DataItemUtils.getLabel(item, label);
            }
        }
    };
    /**
     * @param {?} item
     * @param {?} labelKey
     * @return {?}
     */
    DataItemUtils.getLabel = /**
     * @param {?} item
     * @param {?} labelKey
     * @return {?}
     */
    function (item, labelKey) {
        /** @type {?} */
        var aLabel = CommonsUtils.get(item, labelKey);
        if (aLabel) {
            return aLabel;
        }
        else if (item[DataItemUtils.ITEM_DATA_KEY]) {
            return CommonsUtils.get(item[DataItemUtils.ITEM_DATA_KEY], labelKey);
        }
        else {
            return item[Object.keys(item)[0]];
        }
    };
    DataItemUtils.ITEM_LABEL_KEY = 'label';
    DataItemUtils.ITEM_VALUE_KEY = 'value';
    DataItemUtils.ITEM_GROUP_KEY = 'group';
    DataItemUtils.ITEM_GROUP_ITEMS_KEY = 'items';
    DataItemUtils.ITEM_DATA_KEY = 'data';
    return DataItemUtils;
}());
export { DataItemUtils };
if (false) {
    /** @type {?} */
    DataItemUtils.ITEM_LABEL_KEY;
    /** @type {?} */
    DataItemUtils.ITEM_VALUE_KEY;
    /** @type {?} */
    DataItemUtils.ITEM_GROUP_KEY;
    /** @type {?} */
    DataItemUtils.ITEM_GROUP_ITEMS_KEY;
    /** @type {?} */
    DataItemUtils.ITEM_DATA_KEY;
}
//# sourceMappingURL=data:application/json;base64,