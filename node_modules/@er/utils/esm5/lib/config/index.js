/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ApiServerType, LogLevel, NotifyType } from '@er/types';
import { CommonsUtils } from '../comm';
/** @type {?} */
var DEFAULT_APP_CONFIG = {
    version: '0.0.1',
    stomp: {
        enabled: false,
        destination: '/message/push',
        headers: {},
        heartbeat_in: 0,
        // Typical value 0 - disabled
        heartbeat_out: 20000,
        // Typical value 20000 - every 20 seconds
        reconnect_delay: 5000,
        debug: false
    },
    auth: {
        storageKey: 'erCurrentUser',
        headerName: 'Authorization',
        authScheme: 'Bearer ',
        userTokenKey: 'userName',
        passwordKey: 'password',
        rememberMeKey: 'rememberMe',
        requiredUserProps: 'org',
        loginRouter: 'user/login',
        loginApiOptions: { serverType: ApiServerType.App },
        loginSuccessRouter: '/',
        logoutSuccessRouter: 'user/login'
    },
    alert: {},
    announce: {},
    notify: NotifyType.ALERT,
    onLoading: 'fa fa-cog fa-spin fa-3x indigo',
    enableLogger: true,
    dataFieldProps: {
        dataCode: {
            apiEntry: 'data_code',
            codeKey: 'code',
            nameKey: 'name',
            parentKey: 'parent',
            catKey: 'codeCat'
        }
    },
    wechat: {
        self_redirect: true,
        scope: 'snsapi_login',
        state: '',
        style: 'black',
        href: ''
    },
    log: {
        enableApp: true,
        enableRoute: false,
        level: LogLevel.DEBUG,
        httpPost: false,
        blackLList: ['PropsBindDirective']
    }
};
var ConfigUtils = /** @class */ (function () {
    function ConfigUtils() {
    }
    /**
     * @return {?}
     */
    ConfigUtils.getConfig = /**
     * @return {?}
     */
    function () {
        return ConfigUtils.moduleConfig || ConfigUtils.appConfig;
    };
    /**
     * @param {?} customer
     * @return {?}
     */
    ConfigUtils.configApp = /**
     * @param {?} customer
     * @return {?}
     */
    function (customer) {
        ConfigUtils.appConfig = CommonsUtils.merge({}, DEFAULT_APP_CONFIG, customer);
        return ConfigUtils.appConfig;
    };
    /**
     * @param {?} moduleConf
     * @param {?} url
     * @return {?}
     */
    ConfigUtils.configModule = /**
     * @param {?} moduleConf
     * @param {?} url
     * @return {?}
     */
    function (moduleConf, url) {
        /** @type {?} */
        var config = moduleConf;
        if (url && url === ConfigUtils.lastUrl) {
            config = CommonsUtils.merge(ConfigUtils.lastConfig, moduleConf);
        }
        else {
            ConfigUtils.lastUrl = url;
            ConfigUtils.lastConfig = moduleConf;
        }
        ConfigUtils.moduleConfig = CommonsUtils.merge({}, ConfigUtils.appConfig, config);
        return ConfigUtils.moduleConfig;
    };
    /**
     * @param {?} namePath
     * @param {?=} defaultValue
     * @return {?}
     */
    ConfigUtils.get = /**
     * @param {?} namePath
     * @param {?=} defaultValue
     * @return {?}
     */
    function (namePath, defaultValue) {
        return CommonsUtils.get(ConfigUtils.getConfig(), namePath, defaultValue);
    };
    ConfigUtils.lastUrl = undefined;
    ConfigUtils.lastConfig = {};
    ConfigUtils.appConfig = tslib_1.__assign({}, DEFAULT_APP_CONFIG);
    ConfigUtils.moduleConfig = undefined;
    return ConfigUtils;
}());
export { ConfigUtils };
if (false) {
    /** @type {?} */
    ConfigUtils.lastUrl;
    /** @type {?} */
    ConfigUtils.lastConfig;
    /** @type {?} */
    ConfigUtils.appConfig;
    /** @type {?} */
    ConfigUtils.moduleConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdXRpbHMvIiwic291cmNlcyI6WyJsaWIvY29uZmlnL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLGFBQWEsRUFBZSxRQUFRLEVBQUUsVUFBVSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQzNFLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxTQUFTLENBQUM7O0lBRS9CLGtCQUFrQixHQUFnQjtJQUN0QyxPQUFPLEVBQUUsT0FBTztJQUNoQixLQUFLLEVBQUU7UUFDTCxPQUFPLEVBQUUsS0FBSztRQUNkLFdBQVcsRUFBRSxlQUFlO1FBQzVCLE9BQU8sRUFBRSxFQUFFO1FBQ1gsWUFBWSxFQUFFLENBQUM7O1FBQ2YsYUFBYSxFQUFFLEtBQUs7O1FBQ3BCLGVBQWUsRUFBRSxJQUFJO1FBQ3JCLEtBQUssRUFBRSxLQUFLO0tBQ2I7SUFDRCxJQUFJLEVBQUU7UUFDSixVQUFVLEVBQUUsZUFBZTtRQUMzQixVQUFVLEVBQUUsZUFBZTtRQUMzQixVQUFVLEVBQUUsU0FBUztRQUNyQixZQUFZLEVBQUUsVUFBVTtRQUN4QixXQUFXLEVBQUUsVUFBVTtRQUN2QixhQUFhLEVBQUUsWUFBWTtRQUMzQixpQkFBaUIsRUFBRSxLQUFLO1FBQ3hCLFdBQVcsRUFBRSxZQUFZO1FBQ3pCLGVBQWUsRUFBRSxFQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsR0FBRyxFQUFDO1FBQ2hELGtCQUFrQixFQUFFLEdBQUc7UUFDdkIsbUJBQW1CLEVBQUUsWUFBWTtLQUNsQztJQUNELEtBQUssRUFBRSxFQUFFO0lBQ1QsUUFBUSxFQUFFLEVBQUU7SUFDWixNQUFNLEVBQUUsVUFBVSxDQUFDLEtBQUs7SUFDeEIsU0FBUyxFQUFFLGdDQUFnQztJQUMzQyxZQUFZLEVBQUUsSUFBSTtJQUNsQixjQUFjLEVBQUU7UUFDZCxRQUFRLEVBQUU7WUFDUixRQUFRLEVBQUUsV0FBVztZQUNyQixPQUFPLEVBQUUsTUFBTTtZQUNmLE9BQU8sRUFBRSxNQUFNO1lBQ2YsU0FBUyxFQUFFLFFBQVE7WUFDbkIsTUFBTSxFQUFFLFNBQVM7U0FDbEI7S0FDRjtJQUNELE1BQU0sRUFBRTtRQUNOLGFBQWEsRUFBRSxJQUFJO1FBQ25CLEtBQUssRUFBRSxjQUFjO1FBQ3JCLEtBQUssRUFBRSxFQUFFO1FBQ1QsS0FBSyxFQUFFLE9BQU87UUFDZCxJQUFJLEVBQUUsRUFBRTtLQUNUO0lBQ0QsR0FBRyxFQUFFO1FBQ0gsU0FBUyxFQUFFLElBQUk7UUFDZixXQUFXLEVBQUUsS0FBSztRQUNsQixLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUs7UUFDckIsUUFBUSxFQUFFLEtBQUs7UUFDZixVQUFVLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztLQUNuQztDQUNGO0FBRUQ7SUFBQTtJQW9DQSxDQUFDOzs7O0lBeEJRLHFCQUFTOzs7SUFBaEI7UUFDRSxPQUFPLFdBQVcsQ0FBQyxZQUFZLElBQUksV0FBVyxDQUFDLFNBQVMsQ0FBQztJQUMzRCxDQUFDOzs7OztJQUVNLHFCQUFTOzs7O0lBQWhCLFVBQWlCLFFBQTBCO1FBQ3pDLFdBQVcsQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDN0UsT0FBTyxXQUFXLENBQUMsU0FBUyxDQUFDO0lBQy9CLENBQUM7Ozs7OztJQUVNLHdCQUFZOzs7OztJQUFuQixVQUFvQixVQUE0QixFQUFFLEdBQVc7O1lBQ3ZELE1BQU0sR0FBRyxVQUFVO1FBQ3ZCLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxXQUFXLENBQUMsT0FBTyxFQUFFO1lBQ3RDLE1BQU0sR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDakU7YUFBTTtZQUNMLFdBQVcsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO1lBQzFCLFdBQVcsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1NBQ3JDO1FBQ0QsV0FBVyxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxXQUFXLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2pGLE9BQU8sV0FBVyxDQUFDLFlBQVksQ0FBQztJQUNsQyxDQUFDOzs7Ozs7SUFFTSxlQUFHOzs7OztJQUFWLFVBQVcsUUFBZ0IsRUFBRSxZQUFhO1FBQ3hDLE9BQU8sWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLEVBQUUsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFqQ00sbUJBQU8sR0FBRyxTQUFTLENBQUM7SUFFcEIsc0JBQVUsR0FBRyxFQUFFLENBQUM7SUFFaEIscUJBQVMsd0JBQ1gsa0JBQWtCLEVBQ3JCO0lBRUssd0JBQVksR0FBZ0IsU0FBUyxDQUFDO0lBMEIvQyxrQkFBQztDQUFBLEFBcENELElBb0NDO1NBcENZLFdBQVc7OztJQUV0QixvQkFBMkI7O0lBRTNCLHVCQUF1Qjs7SUFFdkIsc0JBRUU7O0lBRUYseUJBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBcGlTZXJ2ZXJUeXBlLCBDb25maWdNb2RlbCwgTG9nTGV2ZWwsIE5vdGlmeVR5cGV9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge0NvbW1vbnNVdGlsc30gZnJvbSAnLi4vY29tbSc7XG5cbmNvbnN0IERFRkFVTFRfQVBQX0NPTkZJRzogQ29uZmlnTW9kZWwgPSB7XG4gIHZlcnNpb246ICcwLjAuMScsXG4gIHN0b21wOiB7XG4gICAgZW5hYmxlZDogZmFsc2UsXG4gICAgZGVzdGluYXRpb246ICcvbWVzc2FnZS9wdXNoJyxcbiAgICBoZWFkZXJzOiB7fSxcbiAgICBoZWFydGJlYXRfaW46IDAsIC8vIFR5cGljYWwgdmFsdWUgMCAtIGRpc2FibGVkXG4gICAgaGVhcnRiZWF0X291dDogMjAwMDAsIC8vIFR5cGljYWwgdmFsdWUgMjAwMDAgLSBldmVyeSAyMCBzZWNvbmRzXG4gICAgcmVjb25uZWN0X2RlbGF5OiA1MDAwLFxuICAgIGRlYnVnOiBmYWxzZVxuICB9LFxuICBhdXRoOiB7XG4gICAgc3RvcmFnZUtleTogJ2VyQ3VycmVudFVzZXInLFxuICAgIGhlYWRlck5hbWU6ICdBdXRob3JpemF0aW9uJyxcbiAgICBhdXRoU2NoZW1lOiAnQmVhcmVyICcsXG4gICAgdXNlclRva2VuS2V5OiAndXNlck5hbWUnLFxuICAgIHBhc3N3b3JkS2V5OiAncGFzc3dvcmQnLFxuICAgIHJlbWVtYmVyTWVLZXk6ICdyZW1lbWJlck1lJyxcbiAgICByZXF1aXJlZFVzZXJQcm9wczogJ29yZycsXG4gICAgbG9naW5Sb3V0ZXI6ICd1c2VyL2xvZ2luJyxcbiAgICBsb2dpbkFwaU9wdGlvbnM6IHtzZXJ2ZXJUeXBlOiBBcGlTZXJ2ZXJUeXBlLkFwcH0sXG4gICAgbG9naW5TdWNjZXNzUm91dGVyOiAnLycsXG4gICAgbG9nb3V0U3VjY2Vzc1JvdXRlcjogJ3VzZXIvbG9naW4nXG4gIH0sXG4gIGFsZXJ0OiB7fSxcbiAgYW5ub3VuY2U6IHt9LFxuICBub3RpZnk6IE5vdGlmeVR5cGUuQUxFUlQsXG4gIG9uTG9hZGluZzogJ2ZhIGZhLWNvZyBmYS1zcGluIGZhLTN4IGluZGlnbycsXG4gIGVuYWJsZUxvZ2dlcjogdHJ1ZSxcbiAgZGF0YUZpZWxkUHJvcHM6IHtcbiAgICBkYXRhQ29kZToge1xuICAgICAgYXBpRW50cnk6ICdkYXRhX2NvZGUnLFxuICAgICAgY29kZUtleTogJ2NvZGUnLFxuICAgICAgbmFtZUtleTogJ25hbWUnLFxuICAgICAgcGFyZW50S2V5OiAncGFyZW50JyxcbiAgICAgIGNhdEtleTogJ2NvZGVDYXQnXG4gICAgfVxuICB9LFxuICB3ZWNoYXQ6IHtcbiAgICBzZWxmX3JlZGlyZWN0OiB0cnVlLFxuICAgIHNjb3BlOiAnc25zYXBpX2xvZ2luJyxcbiAgICBzdGF0ZTogJycsXG4gICAgc3R5bGU6ICdibGFjaycsXG4gICAgaHJlZjogJydcbiAgfSxcbiAgbG9nOiB7XG4gICAgZW5hYmxlQXBwOiB0cnVlLFxuICAgIGVuYWJsZVJvdXRlOiBmYWxzZSxcbiAgICBsZXZlbDogTG9nTGV2ZWwuREVCVUcsXG4gICAgaHR0cFBvc3Q6IGZhbHNlLFxuICAgIGJsYWNrTExpc3Q6IFsnUHJvcHNCaW5kRGlyZWN0aXZlJ11cbiAgfVxufTtcblxuZXhwb3J0IGNsYXNzIENvbmZpZ1V0aWxzIHtcblxuICBzdGF0aWMgbGFzdFVybCA9IHVuZGVmaW5lZDtcblxuICBzdGF0aWMgbGFzdENvbmZpZyA9IHt9O1xuXG4gIHN0YXRpYyBhcHBDb25maWc6IENvbmZpZ01vZGVsID0ge1xuICAgIC4uLkRFRkFVTFRfQVBQX0NPTkZJR1xuICB9O1xuXG4gIHN0YXRpYyBtb2R1bGVDb25maWc6IENvbmZpZ01vZGVsID0gdW5kZWZpbmVkO1xuXG4gIHN0YXRpYyBnZXRDb25maWcoKTogQ29uZmlnTW9kZWwge1xuICAgIHJldHVybiBDb25maWdVdGlscy5tb2R1bGVDb25maWcgfHwgQ29uZmlnVXRpbHMuYXBwQ29uZmlnO1xuICB9XG5cbiAgc3RhdGljIGNvbmZpZ0FwcChjdXN0b21lcjogQ29uZmlnTW9kZWwgfCB7fSk6IENvbmZpZ01vZGVsIHtcbiAgICBDb25maWdVdGlscy5hcHBDb25maWcgPSBDb21tb25zVXRpbHMubWVyZ2Uoe30sIERFRkFVTFRfQVBQX0NPTkZJRywgY3VzdG9tZXIpO1xuICAgIHJldHVybiBDb25maWdVdGlscy5hcHBDb25maWc7XG4gIH1cblxuICBzdGF0aWMgY29uZmlnTW9kdWxlKG1vZHVsZUNvbmY6IENvbmZpZ01vZGVsIHwge30sIHVybDogc3RyaW5nKTogQ29uZmlnTW9kZWwge1xuICAgIGxldCBjb25maWcgPSBtb2R1bGVDb25mO1xuICAgIGlmICh1cmwgJiYgdXJsID09PSBDb25maWdVdGlscy5sYXN0VXJsKSB7XG4gICAgICBjb25maWcgPSBDb21tb25zVXRpbHMubWVyZ2UoQ29uZmlnVXRpbHMubGFzdENvbmZpZywgbW9kdWxlQ29uZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIENvbmZpZ1V0aWxzLmxhc3RVcmwgPSB1cmw7XG4gICAgICBDb25maWdVdGlscy5sYXN0Q29uZmlnID0gbW9kdWxlQ29uZjtcbiAgICB9XG4gICAgQ29uZmlnVXRpbHMubW9kdWxlQ29uZmlnID0gQ29tbW9uc1V0aWxzLm1lcmdlKHt9LCBDb25maWdVdGlscy5hcHBDb25maWcsIGNvbmZpZyk7XG4gICAgcmV0dXJuIENvbmZpZ1V0aWxzLm1vZHVsZUNvbmZpZztcbiAgfVxuXG4gIHN0YXRpYyBnZXQobmFtZVBhdGg6IHN0cmluZywgZGVmYXVsdFZhbHVlPykge1xuICAgIHJldHVybiBDb21tb25zVXRpbHMuZ2V0KENvbmZpZ1V0aWxzLmdldENvbmZpZygpLCBuYW1lUGF0aCwgZGVmYXVsdFZhbHVlKTtcbiAgfVxufVxuIl19