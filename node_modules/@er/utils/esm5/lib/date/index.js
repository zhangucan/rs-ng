/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StateNames } from '@er/types';
import * as momentNs from 'moment';
import { CommonsUtils } from '../comm';
import { StatesUtils } from '../states';
/** @type {?} */
var moment = momentNs;
var DateUtils = /** @class */ (function () {
    function DateUtils() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    DateUtils.getMoment = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (moment.isMoment(data)) {
            return data;
        }
        /** @type {?} */
        var date = DateUtils.toDate(data);
        if (date) {
            return moment(data);
        }
        return null;
    };
    /**
     * @param {?} v
     * @return {?}
     */
    DateUtils.isDate = /**
     * @param {?} v
     * @return {?}
     */
    function (v) {
        return !!DateUtils.toDate(v);
    };
    /**
     * @param {?} v
     * @return {?}
     */
    DateUtils.toDate = /**
     * @param {?} v
     * @return {?}
     */
    function (v) {
        if (CommonsUtils.isString(v)) {
            /** @type {?} */
            var date = Date.parse(v);
            if (!isNaN(date)) {
                return new Date(date);
            }
        }
        else {
            if (v && typeof v.getMonth === 'function') {
                return v;
            }
        }
        return undefined;
    };
    /**
     * @param {?=} date
     * @param {?=} format
     * @return {?}
     */
    DateUtils.getFormattedDate = /**
     * @param {?=} date
     * @param {?=} format
     * @return {?}
     */
    function (date, format) {
        if (format === void 0) { format = 'YYYY-MM-DD'; }
        return DateUtils.getFormattedDateTime(format, date);
    };
    /**
     * @param {?=} date
     * @param {?=} format
     * @return {?}
     */
    DateUtils.getFormattedTime = /**
     * @param {?=} date
     * @param {?=} format
     * @return {?}
     */
    function (date, format) {
        if (format === void 0) { format = 'HH:mm:ss'; }
        return DateUtils.getFormattedDateTime(format, date);
    };
    /**
     * @param {?=} format
     * @param {?=} date
     * @return {?}
     */
    DateUtils.getFormattedDateTime = /**
     * @param {?=} format
     * @param {?=} date
     * @return {?}
     */
    function (format, date) {
        if (format === void 0) { format = 'YYYY-MM-DD HH:mm:ss'; }
        if (!date) {
            date = DateUtils.getDate();
        }
        else {
            date = DateUtils.toDate(date);
        }
        /** @type {?} */
        var momentData = DateUtils.getMoment(date);
        if (momentData) {
            return momentData.format(format);
        }
        return '';
    };
    /**
     * @return {?}
     */
    DateUtils.getDate = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var date;
        /** @type {?} */
        var dateState = StatesUtils.getValue(StateNames.serverTime);
        if (dateState) {
            date = dateState.date;
        }
        else {
            date = new Date();
        }
        return date;
    };
    /**
     * @return {?}
     */
    DateUtils.getStamp = /**
     * @return {?}
     */
    function () {
        return DateUtils.getDate().getTime();
    };
    /**
     * @param {?} present
     * @param {?=} due
     * @return {?}
     */
    DateUtils.getDateByNow = /**
     * @param {?} present
     * @param {?=} due
     * @return {?}
     */
    function (present, due) {
        if (!present) {
            return { seconds: 0, message: '' };
        }
        if (!DateUtils.isDate(present)) {
            try {
                present = new Date(present);
            }
            catch (e) {
                present = null;
            }
        }
        if (!present) {
            return { seconds: 0, message: '' };
        }
        /** @type {?} */
        var _due = due;
        if (!_due) {
            _due = new Date();
        }
        if (!DateUtils.isDate(_due)) {
            _due = new Date(_due);
        }
        /** @type {?} */
        var seconds = Math.round(Math.abs((_due.getTime() - present.getTime()) / 1000));
        /** @type {?} */
        var minutes = Math.round(Math.abs(seconds / 60));
        /** @type {?} */
        var hours = Math.round(Math.abs(minutes / 60));
        /** @type {?} */
        var days = Math.round(Math.abs(hours / 24));
        /** @type {?} */
        var months = Math.round(Math.abs(days / 30.416));
        /** @type {?} */
        var years = Math.round(Math.abs(days / 365));
        /** @type {?} */
        var message = '';
        if (seconds <= 10) {
            message = (_due > present) ? '刚刚' : '马上';
        }
        else if (seconds <= 30) {
            message = '30秒';
        }
        else if (seconds <= 90) {
            message = '1分钟';
        }
        else if (minutes <= 45) {
            message = minutes + '分钟';
        }
        else if (minutes <= 90) {
            message = '1小时';
        }
        else if (hours <= 22) {
            message = hours + '小时';
        }
        else if (hours <= 36) {
            message = '1天';
        }
        else if (days <= 25) {
            message = days + '天';
        }
        else if (days <= 45) {
            message = '1个月';
        }
        else if (days <= 345) {
            message = months + '月';
        }
        else if (days <= 545) {
            message = '1年';
        }
        else { // (days > 545)
            message = years + '年';
        }
        if (seconds > 10) {
            message += (_due > present) ? '前' : '后';
        }
        return {
            seconds: seconds,
            message: message
        };
    };
    /**
     * @param {?} seconds
     * @return {?}
     */
    DateUtils.getUpdateSeconds = /**
     * @param {?} seconds
     * @return {?}
     */
    function (seconds) {
        /** @type {?} */
        var min = 60;
        /** @type {?} */
        var hr = min * 60;
        /** @type {?} */
        var day = hr * 24;
        if (seconds < min) { // less than 1 min, update every 2 secs
            return 2;
        }
        else if (seconds < hr) { // less than an hour, update every 30 secs
            return 30;
        }
        else if (seconds < day) { // less then a day, update every 5 mins
            return 300;
        }
        else { // update every hour
            return 3600;
        }
    };
    /**
     * @param {?=} date
     * @return {?}
     */
    DateUtils.getYear = /**
     * @param {?=} date
     * @return {?}
     */
    function (date) {
        return (date || DateUtils.getDate()).getFullYear();
    };
    /**
     * @param {?=} date
     * @return {?}
     */
    DateUtils.getMonth = /**
     * @param {?=} date
     * @return {?}
     */
    function (date) {
        return (date || DateUtils.getDate()).getMonth() + 1;
    };
    /**
     * @param {?=} date
     * @return {?}
     */
    DateUtils.getDay = /**
     * @param {?=} date
     * @return {?}
     */
    function (date) {
        return (date || DateUtils.getDate()).getDate();
    };
    /**
     * @return {?}
     */
    DateUtils.getYesterday = /**
     * @return {?}
     */
    function () {
        return DateUtils.getDay(new Date(DateUtils.getDate().getTime() - 24 * 60 * 60 * 1000));
    };
    /**
     * @return {?}
     */
    DateUtils.getTomorrow = /**
     * @return {?}
     */
    function () {
        return DateUtils.getDay(new Date(DateUtils.getDate().getTime() + 24 * 60 * 60 * 1000));
    };
    /**
     * @return {?}
     */
    DateUtils.getLastMonth = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var month = DateUtils.getMonth() - 1;
        return month < 1 ? 12 : month;
    };
    /**
     * @return {?}
     */
    DateUtils.getNextMonth = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var month = DateUtils.getMonth() + 1;
        return month > 12 ? 1 : month;
    };
    return DateUtils;
}());
export { DateUtils };
//# sourceMappingURL=data:application/json;base64,