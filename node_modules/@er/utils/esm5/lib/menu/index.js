/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonsUtils } from '../comm';
var MenuUtils = /** @class */ (function () {
    function MenuUtils() {
    }
    /**
     * @param {?} menuItems
     * @param {?=} roles
     * @param {?=} permissions
     * @return {?}
     */
    MenuUtils.getUserMenuItems = /**
     * @param {?} menuItems
     * @param {?=} roles
     * @param {?=} permissions
     * @return {?}
     */
    function (menuItems, roles, permissions) {
        /** @type {?} */
        var filtered = [];
        permissions = CommonsUtils.getArrayValue(permissions);
        if (!roles || roles.length === 0) {
            roles = [];
        }
        if (!permissions || permissions.length === 0) {
            permissions = [];
        }
        if (roles.length === 0 && permissions.length === 0) {
            return menuItems;
        }
        if (menuItems && menuItems.length > 0) {
            menuItems.forEach(function (menuItem) {
                /** @type {?} */
                var item = menuItem;
                if (item.roles || item.permissions) {
                    if (item.roles && roles.length > 0) {
                        /** @type {?} */
                        var menuRoles = CommonsUtils.getArrayValue(item.roles);
                        /** @type {?} */
                        var matched = menuRoles.filter(function (menuRole) { return roles.indexOf(menuRole) >= 0; });
                        if (matched.length > 0) {
                            filtered.push(item);
                        }
                    }
                    if (filtered.indexOf(item) === -1 && item.permissions && permissions.length > 0) {
                        /** @type {?} */
                        var menuPermissions = CommonsUtils.getArrayValue(item.permissions);
                        /** @type {?} */
                        var matched = menuPermissions.filter(function (menuPermission) { return permissions.indexOf(menuPermission) >= 0; });
                        if (matched.length > 0) {
                            filtered.push(item);
                        }
                    }
                }
                else {
                    filtered.push(item);
                }
                if (item.items) {
                    /** @type {?} */
                    var subItems = MenuUtils.getUserMenuItems(item.items, permissions, roles);
                    if (subItems.length > 0) {
                        item.items = subItems;
                    }
                }
            });
            return filtered;
        }
    };
    /**
     * @param {?} menuItems
     * @return {?}
     */
    MenuUtils.transMenuItems = /**
     * @param {?} menuItems
     * @return {?}
     */
    function (menuItems) {
        /** @type {?} */
        var nodes;
        nodes = CommonsUtils.orderBy(menuItems, ['parent', 'code'], ['asc']);
        nodes.forEach(function (item) {
            /** @type {?} */
            var children = nodes.filter(function (item2) { return item2['parent'] && item2['parent'] === item['code']; });
            if (children.length > 0) {
                item['items'] = children;
            }
            if (item.icon && item.icon.startsWith('fa-')) {
                item.icon = 'fa ' + item.icon;
            }
        });
        return nodes = nodes.filter(function (node) { return !node['parent']; });
    };
    return MenuUtils;
}());
export { MenuUtils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdXRpbHMvIiwic291cmNlcyI6WyJsaWIvbWVudS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUVyQztJQUFBO0lBOERBLENBQUM7Ozs7Ozs7SUE1RFEsMEJBQWdCOzs7Ozs7SUFBdkIsVUFBd0IsU0FBcUIsRUFDckIsS0FBeUIsRUFDekIsV0FBK0I7O1lBQy9DLFFBQVEsR0FBRyxFQUFFO1FBQ25CLFdBQVcsR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDaEMsS0FBSyxHQUFHLEVBQUUsQ0FBQztTQUNaO1FBQ0QsSUFBSSxDQUFDLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1QyxXQUFXLEdBQUcsRUFBRSxDQUFDO1NBQ2xCO1FBQ0QsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNsRCxPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUNELElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3JDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBQSxRQUFROztvQkFDbEIsSUFBSSxHQUFHLFFBQVE7Z0JBQ3JCLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO29CQUNsQyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7OzRCQUM1QixTQUFTLEdBQUcsWUFBWSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDOzs0QkFDbEQsT0FBTyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBNUIsQ0FBNEIsQ0FBQzt3QkFDMUUsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs0QkFDdEIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzt5QkFDckI7cUJBQ0Y7b0JBQ0QsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7OzRCQUN6RSxlQUFlLEdBQUcsWUFBWSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDOzs0QkFDOUQsT0FBTyxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUMsVUFBQSxjQUFjLElBQUksT0FBQSxXQUFXLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBeEMsQ0FBd0MsQ0FBQzt3QkFDbEcsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs0QkFDdEIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzt5QkFDckI7cUJBQ0Y7aUJBQ0Y7cUJBQU07b0JBQ0wsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDckI7Z0JBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFOzt3QkFDUixRQUFRLEdBQUcsU0FBUyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQztvQkFDM0UsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTt3QkFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUM7cUJBQ3ZCO2lCQUNGO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtJQUNILENBQUM7Ozs7O0lBRU0sd0JBQWM7Ozs7SUFBckIsVUFBc0IsU0FBZTs7WUFDL0IsS0FBSztRQUNULEtBQUssR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDckUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7O2dCQUNWLFFBQVEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQW5ELENBQW1ELENBQUM7WUFDM0YsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLFFBQVEsQ0FBQzthQUMxQjtZQUNELElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDNUMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQzthQUMvQjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFmLENBQWUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFDSCxnQkFBQztBQUFELENBQUMsQUE5REQsSUE4REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01lbnVJdGVtfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb21tb25zVXRpbHN9IGZyb20gJy4uL2NvbW0nO1xuXG5leHBvcnQgY2xhc3MgTWVudVV0aWxzIHtcblxuICBzdGF0aWMgZ2V0VXNlck1lbnVJdGVtcyhtZW51SXRlbXM6IE1lbnVJdGVtW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGVzPzogc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zPzogc3RyaW5nIHwgc3RyaW5nW10pOiBNZW51SXRlbVtdIHtcbiAgICBjb25zdCBmaWx0ZXJlZCA9IFtdO1xuICAgIHBlcm1pc3Npb25zID0gQ29tbW9uc1V0aWxzLmdldEFycmF5VmFsdWUocGVybWlzc2lvbnMpO1xuICAgIGlmICghcm9sZXMgfHwgcm9sZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByb2xlcyA9IFtdO1xuICAgIH1cbiAgICBpZiAoIXBlcm1pc3Npb25zIHx8IHBlcm1pc3Npb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcGVybWlzc2lvbnMgPSBbXTtcbiAgICB9XG4gICAgaWYgKHJvbGVzLmxlbmd0aCA9PT0gMCAmJiBwZXJtaXNzaW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBtZW51SXRlbXM7XG4gICAgfVxuICAgIGlmIChtZW51SXRlbXMgJiYgbWVudUl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgIG1lbnVJdGVtcy5mb3JFYWNoKG1lbnVJdGVtID0+IHtcbiAgICAgICAgY29uc3QgaXRlbSA9IG1lbnVJdGVtO1xuICAgICAgICBpZiAoaXRlbS5yb2xlcyB8fCBpdGVtLnBlcm1pc3Npb25zKSB7XG4gICAgICAgICAgaWYgKGl0ZW0ucm9sZXMgJiYgcm9sZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgbWVudVJvbGVzID0gQ29tbW9uc1V0aWxzLmdldEFycmF5VmFsdWUoaXRlbS5yb2xlcyk7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVkID0gbWVudVJvbGVzLmZpbHRlcihtZW51Um9sZSA9PiByb2xlcy5pbmRleE9mKG1lbnVSb2xlKSA+PSAwKTtcbiAgICAgICAgICAgIGlmIChtYXRjaGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgZmlsdGVyZWQucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZpbHRlcmVkLmluZGV4T2YoaXRlbSkgPT09IC0xICYmIGl0ZW0ucGVybWlzc2lvbnMgJiYgcGVybWlzc2lvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgbWVudVBlcm1pc3Npb25zID0gQ29tbW9uc1V0aWxzLmdldEFycmF5VmFsdWUoaXRlbS5wZXJtaXNzaW9ucyk7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVkID0gbWVudVBlcm1pc3Npb25zLmZpbHRlcihtZW51UGVybWlzc2lvbiA9PiBwZXJtaXNzaW9ucy5pbmRleE9mKG1lbnVQZXJtaXNzaW9uKSA+PSAwKTtcbiAgICAgICAgICAgIGlmIChtYXRjaGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgZmlsdGVyZWQucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlsdGVyZWQucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXRlbS5pdGVtcykge1xuICAgICAgICAgIGNvbnN0IHN1Ykl0ZW1zID0gTWVudVV0aWxzLmdldFVzZXJNZW51SXRlbXMoaXRlbS5pdGVtcywgcGVybWlzc2lvbnMsIHJvbGVzKTtcbiAgICAgICAgICBpZiAoc3ViSXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaXRlbS5pdGVtcyA9IHN1Ykl0ZW1zO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmlsdGVyZWQ7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHRyYW5zTWVudUl0ZW1zKG1lbnVJdGVtczoge31bXSkge1xuICAgIGxldCBub2RlcztcbiAgICBub2RlcyA9IENvbW1vbnNVdGlscy5vcmRlckJ5KG1lbnVJdGVtcywgWydwYXJlbnQnLCAnY29kZSddLCBbJ2FzYyddKTtcbiAgICBub2Rlcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBub2Rlcy5maWx0ZXIoaXRlbTIgPT4gaXRlbTJbJ3BhcmVudCddICYmIGl0ZW0yWydwYXJlbnQnXSA9PT0gaXRlbVsnY29kZSddKTtcbiAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGl0ZW1bJ2l0ZW1zJ10gPSBjaGlsZHJlbjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtLmljb24gJiYgaXRlbS5pY29uLnN0YXJ0c1dpdGgoJ2ZhLScpKSB7XG4gICAgICAgIGl0ZW0uaWNvbiA9ICdmYSAnICsgaXRlbS5pY29uO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBub2RlcyA9IG5vZGVzLmZpbHRlcihub2RlID0+ICFub2RlWydwYXJlbnQnXSk7XG4gIH1cbn1cbiJdfQ==