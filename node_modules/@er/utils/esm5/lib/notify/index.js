/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NotifyLevel, StateNames } from '@er/types';
import { CommonsUtils } from '../comm';
import { StatesUtils } from '../states';
var NotifyUtils = /** @class */ (function () {
    function NotifyUtils() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    NotifyUtils.info = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var notify = CommonsUtils.getObjWhenStr(options, 'message');
        StatesUtils.create(StateNames.notify, notify);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    NotifyUtils.error = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var notify = CommonsUtils.getObjWhenStr(options, 'message');
        StatesUtils.create(StateNames.notify, (/** @type {?} */ (tslib_1.__assign({}, notify, { level: NotifyLevel.ERROR }))));
    };
    /**
     * @param {?} options
     * @return {?}
     */
    NotifyUtils.success = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var notify = CommonsUtils.getObjWhenStr(options, 'message');
        StatesUtils.create(StateNames.notify, (/** @type {?} */ (tslib_1.__assign({}, notify, { level: NotifyLevel.SUCCESS }))));
    };
    /**
     * @param {?} options
     * @return {?}
     */
    NotifyUtils.warn = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var notify = CommonsUtils.getObjWhenStr(options, 'message');
        StatesUtils.create(StateNames.notify, (/** @type {?} */ (tslib_1.__assign({}, notify, { level: NotifyLevel.WARN }))));
    };
    return NotifyUtils;
}());
export { NotifyUtils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdXRpbHMvIiwic291cmNlcyI6WyJsaWIvbm90aWZ5L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFdBQVcsRUFBYyxVQUFVLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDOUQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUNyQyxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRXRDO0lBQUE7SUErQkEsQ0FBQzs7Ozs7SUE3QlEsZ0JBQUk7Ozs7SUFBWCxVQUFZLE9BQTRCOztZQUNoQyxNQUFNLEdBQUcsWUFBWSxDQUFDLGFBQWEsQ0FBYSxPQUFPLEVBQUUsU0FBUyxDQUFDO1FBQ3pFLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7OztJQUVNLGlCQUFLOzs7O0lBQVosVUFBYSxPQUE0Qjs7WUFDakMsTUFBTSxHQUFHLFlBQVksQ0FBQyxhQUFhLENBQWEsT0FBTyxFQUFFLFNBQVMsQ0FBQztRQUN6RSxXQUFXLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsd0NBQ2pDLE1BQU0sSUFDVCxLQUFLLEVBQUUsV0FBVyxDQUFDLEtBQUssS0FDekIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFTSxtQkFBTzs7OztJQUFkLFVBQWUsT0FBNEI7O1lBQ25DLE1BQU0sR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFhLE9BQU8sRUFBRSxTQUFTLENBQUM7UUFDekUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLHdDQUNqQyxNQUFNLElBQ1QsS0FBSyxFQUFFLFdBQVcsQ0FBQyxPQUFPLEtBQzNCLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRU0sZ0JBQUk7Ozs7SUFBWCxVQUFZLE9BQTRCOztZQUNoQyxNQUFNLEdBQUcsWUFBWSxDQUFDLGFBQWEsQ0FBYSxPQUFPLEVBQUUsU0FBUyxDQUFDO1FBQ3pFLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSx3Q0FDakMsTUFBTSxJQUNULEtBQUssRUFBRSxXQUFXLENBQUMsSUFBSSxLQUN4QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUgsa0JBQUM7QUFBRCxDQUFDLEFBL0JELElBK0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtOb3RpZnlMZXZlbCwgTm90aWZ5UHJvcCwgU3RhdGVOYW1lc30gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICcuLi9jb21tJztcbmltcG9ydCB7U3RhdGVzVXRpbHN9IGZyb20gJy4uL3N0YXRlcyc7XG5cbmV4cG9ydCBjbGFzcyBOb3RpZnlVdGlscyB7XG5cbiAgc3RhdGljIGluZm8ob3B0aW9uczogc3RyaW5nIHwgTm90aWZ5UHJvcCkge1xuICAgIGNvbnN0IG5vdGlmeSA9IENvbW1vbnNVdGlscy5nZXRPYmpXaGVuU3RyPE5vdGlmeVByb3A+KG9wdGlvbnMsICdtZXNzYWdlJyk7XG4gICAgU3RhdGVzVXRpbHMuY3JlYXRlKFN0YXRlTmFtZXMubm90aWZ5LCBub3RpZnkpO1xuICB9XG5cbiAgc3RhdGljIGVycm9yKG9wdGlvbnM6IHN0cmluZyB8IE5vdGlmeVByb3ApIHtcbiAgICBjb25zdCBub3RpZnkgPSBDb21tb25zVXRpbHMuZ2V0T2JqV2hlblN0cjxOb3RpZnlQcm9wPihvcHRpb25zLCAnbWVzc2FnZScpO1xuICAgIFN0YXRlc1V0aWxzLmNyZWF0ZShTdGF0ZU5hbWVzLm5vdGlmeSwgPE5vdGlmeVByb3A+e1xuICAgICAgLi4ubm90aWZ5LFxuICAgICAgbGV2ZWw6IE5vdGlmeUxldmVsLkVSUk9SXG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgc3VjY2VzcyhvcHRpb25zOiBzdHJpbmcgfCBOb3RpZnlQcm9wKSB7XG4gICAgY29uc3Qgbm90aWZ5ID0gQ29tbW9uc1V0aWxzLmdldE9ialdoZW5TdHI8Tm90aWZ5UHJvcD4ob3B0aW9ucywgJ21lc3NhZ2UnKTtcbiAgICBTdGF0ZXNVdGlscy5jcmVhdGUoU3RhdGVOYW1lcy5ub3RpZnksIDxOb3RpZnlQcm9wPntcbiAgICAgIC4uLm5vdGlmeSxcbiAgICAgIGxldmVsOiBOb3RpZnlMZXZlbC5TVUNDRVNTXG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgd2FybihvcHRpb25zOiBzdHJpbmcgfCBOb3RpZnlQcm9wKSB7XG4gICAgY29uc3Qgbm90aWZ5ID0gQ29tbW9uc1V0aWxzLmdldE9ialdoZW5TdHI8Tm90aWZ5UHJvcD4ob3B0aW9ucywgJ21lc3NhZ2UnKTtcbiAgICBTdGF0ZXNVdGlscy5jcmVhdGUoU3RhdGVOYW1lcy5ub3RpZnksIDxOb3RpZnlQcm9wPntcbiAgICAgIC4uLm5vdGlmeSxcbiAgICAgIGxldmVsOiBOb3RpZnlMZXZlbC5XQVJOXG4gICAgfSk7XG4gIH1cblxufVxuIl19