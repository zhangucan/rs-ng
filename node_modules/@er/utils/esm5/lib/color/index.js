/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { UI_COLORS } from '@er/types';
import { CommonsUtils } from '../comm';
/** @type {?} */
var UI_COLORS_COUNT = -1;
var ColorUtils = /** @class */ (function () {
    function ColorUtils() {
    }
    /**
     * @return {?}
     */
    ColorUtils.getColorsCount = /**
     * @return {?}
     */
    function () {
        if (UI_COLORS_COUNT === -1) {
            UI_COLORS_COUNT = Object.keys(UI_COLORS).length;
        }
        return UI_COLORS_COUNT;
    };
    /**
     * @param {?=} by
     * @param {?=} offset
     * @return {?}
     */
    ColorUtils.getColor = /**
     * @param {?=} by
     * @param {?=} offset
     * @return {?}
     */
    function (by, offset) {
        if (offset === void 0) { offset = 0; }
        /** @type {?} */
        var colorIndex;
        if (!by) {
            by = CommonsUtils.getRandomNumber(ColorUtils.getColorsCount());
        }
        if (CommonsUtils.isString(by)) {
            colorIndex = (((/** @type {?} */ (by))).charCodeAt(0) + ((/** @type {?} */ (by))).charCodeAt(((/** @type {?} */ (by))).length - 1) + ((/** @type {?} */ (by))).length + offset) % ColorUtils.getColorsCount();
        }
        else {
            colorIndex = by;
        }
        /** @type {?} */
        var matched = 'pink';
        Object.keys(UI_COLORS).some(function (color, index) {
            if (index === colorIndex) {
                matched = UI_COLORS[color];
                return true;
            }
            else {
                return false;
            }
        });
        return matched;
    };
    return ColorUtils;
}());
export { ColorUtils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdXRpbHMvIiwic291cmNlcyI6WyJsaWIvY29sb3IvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDcEMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFNBQVMsQ0FBQzs7SUFFakMsZUFBZSxHQUFHLENBQUMsQ0FBQztBQUV4QjtJQUFBO0lBOEJBLENBQUM7Ozs7SUE1QlEseUJBQWM7OztJQUFyQjtRQUNFLElBQUksZUFBZSxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQzFCLGVBQWUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztTQUNqRDtRQUNELE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7Ozs7OztJQUVNLG1CQUFROzs7OztJQUFmLFVBQWdCLEVBQW9CLEVBQUUsTUFBVTtRQUFWLHVCQUFBLEVBQUEsVUFBVTs7WUFDMUMsVUFBVTtRQUNkLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDUCxFQUFFLEdBQUcsWUFBWSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztTQUNoRTtRQUNELElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUM3QixVQUFVLEdBQUcsQ0FBQyxDQUFDLG1CQUFBLEVBQUUsRUFBVSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsbUJBQUEsRUFBRSxFQUFVLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxtQkFBQSxFQUFFLEVBQVUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLG1CQUFBLEVBQUUsRUFBVSxDQUFDLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUNuSzthQUFNO1lBQ0wsVUFBVSxHQUFHLEVBQUUsQ0FBQztTQUNqQjs7WUFDRyxPQUFPLEdBQUcsTUFBTTtRQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLEtBQUssRUFBRSxLQUFLO1lBQ3ZDLElBQUksS0FBSyxLQUFLLFVBQVUsRUFBRTtnQkFDeEIsT0FBTyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDM0IsT0FBTyxJQUFJLENBQUM7YUFDYjtpQkFBTTtnQkFDTCxPQUFPLEtBQUssQ0FBQzthQUNkO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBQ0gsaUJBQUM7QUFBRCxDQUFDLEFBOUJELElBOEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtVSV9DT0xPUlN9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge0NvbW1vbnNVdGlsc30gZnJvbSAnLi4vY29tbSc7XG5cbmxldCBVSV9DT0xPUlNfQ09VTlQgPSAtMTtcblxuZXhwb3J0IGNsYXNzIENvbG9yVXRpbHMge1xuXG4gIHN0YXRpYyBnZXRDb2xvcnNDb3VudCgpIHtcbiAgICBpZiAoVUlfQ09MT1JTX0NPVU5UID09PSAtMSkge1xuICAgICAgVUlfQ09MT1JTX0NPVU5UID0gT2JqZWN0LmtleXMoVUlfQ09MT1JTKS5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiBVSV9DT0xPUlNfQ09VTlQ7XG4gIH1cblxuICBzdGF0aWMgZ2V0Q29sb3IoYnk/OiBzdHJpbmcgfCBudW1iZXIsIG9mZnNldCA9IDApOiBzdHJpbmcge1xuICAgIGxldCBjb2xvckluZGV4O1xuICAgIGlmICghYnkpIHtcbiAgICAgIGJ5ID0gQ29tbW9uc1V0aWxzLmdldFJhbmRvbU51bWJlcihDb2xvclV0aWxzLmdldENvbG9yc0NvdW50KCkpO1xuICAgIH1cbiAgICBpZiAoQ29tbW9uc1V0aWxzLmlzU3RyaW5nKGJ5KSkge1xuICAgICAgY29sb3JJbmRleCA9ICgoYnkgYXMgc3RyaW5nKS5jaGFyQ29kZUF0KDApICsgKGJ5IGFzIHN0cmluZykuY2hhckNvZGVBdCgoYnkgYXMgc3RyaW5nKS5sZW5ndGggLSAxKSArIChieSBhcyBzdHJpbmcpLmxlbmd0aCArIG9mZnNldCkgJSBDb2xvclV0aWxzLmdldENvbG9yc0NvdW50KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbG9ySW5kZXggPSBieTtcbiAgICB9XG4gICAgbGV0IG1hdGNoZWQgPSAncGluayc7XG4gICAgT2JqZWN0LmtleXMoVUlfQ09MT1JTKS5zb21lKChjb2xvciwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChpbmRleCA9PT0gY29sb3JJbmRleCkge1xuICAgICAgICBtYXRjaGVkID0gVUlfQ09MT1JTW2NvbG9yXTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hdGNoZWQ7XG4gIH1cbn1cbiJdfQ==