/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BehaviorSubject } from 'rxjs';
import { CommonsUtils } from '../comm';
/** @type {?} */
var APP_STORE = new BehaviorSubject({});
var StatesUtils = /** @class */ (function () {
    function StatesUtils() {
    }
    /**
     * @return {?}
     */
    StatesUtils.getStore = /**
     * @return {?}
     */
    function () {
        return APP_STORE;
    };
    /**
     * @param {?} path
     * @param {?=} value
     * @param {?=} preserved
     * @return {?}
     */
    StatesUtils.create = /**
     * @param {?} path
     * @param {?=} value
     * @param {?=} preserved
     * @return {?}
     */
    function (path, value, preserved) {
        /** @type {?} */
        var storeItem = StatesUtils.getStoreItem(path, true);
        storeItem.state.next(value);
        if (preserved) {
            storeItem.preserved = preserved;
        }
        return storeItem.state;
    };
    /**
     * @param {?} path
     * @param {?=} createWhenAbsent
     * @return {?}
     */
    StatesUtils.get = /**
     * @param {?} path
     * @param {?=} createWhenAbsent
     * @return {?}
     */
    function (path, createWhenAbsent) {
        /** @type {?} */
        var storeItem = StatesUtils.getStoreItem(path, createWhenAbsent);
        if (storeItem) {
            return storeItem.state;
        }
        else {
            return undefined;
        }
    };
    /**
     * @param {...?} path
     * @return {?}
     */
    StatesUtils.observe = /**
     * @param {...?} path
     * @return {?}
     */
    function () {
        var path = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            path[_i] = arguments[_i];
        }
        return StatesUtils.get(path, true);
    };
    /**
     * @param {...?} path
     * @return {?}
     */
    StatesUtils.toggle = /**
     * @param {...?} path
     * @return {?}
     */
    function () {
        var path = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            path[_i] = arguments[_i];
        }
        /** @type {?} */
        var state = StatesUtils.get(path);
        state.next(!!!state.value);
        return state;
    };
    /**
     * @param {?} path
     * @return {?}
     */
    StatesUtils.inc = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var state = StatesUtils.get(path, true);
        /** @type {?} */
        var newValue = 0;
        if (state.value) {
            newValue = state.value + 1;
        }
        state.next(newValue);
        return state;
    };
    /**
     * @param {?} path
     * @return {?}
     */
    StatesUtils.dec = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var state = StatesUtils.get(path, true);
        /** @type {?} */
        var newValue = 0;
        if (state.value) {
            newValue = state.value - 1;
        }
        state.next(newValue);
        return state;
    };
    /**
     * @param {?} path
     * @param {?} offset
     * @return {?}
     */
    StatesUtils.add = /**
     * @param {?} path
     * @param {?} offset
     * @return {?}
     */
    function (path, offset) {
        /** @type {?} */
        var state = StatesUtils.get(path, true);
        /** @type {?} */
        var newValue = 0;
        if (state.value) {
            newValue = state.value + offset;
        }
        state.next(newValue);
        return state;
    };
    /**
     * used to clear some state properties
     */
    /**
     * used to clear some state properties
     * @param {?} path
     * @param {?} final
     * @return {?}
     */
    StatesUtils.set = /**
     * used to clear some state properties
     * @param {?} path
     * @param {?} final
     * @return {?}
     */
    function (path, final) {
        /** @type {?} */
        var state = StatesUtils.get(path, true);
        if (!state.value) {
            return StatesUtils.create(path, final);
        }
        else {
            state.next(final);
            return state;
        }
    };
    /**
     * @param {?} path
     * @param {?} key
     * @return {?}
     */
    StatesUtils.delete = /**
     * @param {?} path
     * @param {?} key
     * @return {?}
     */
    function (path, key) {
        /** @type {?} */
        var state = StatesUtils.get(path);
        if (state.value) {
            state.next(CommonsUtils.unset(state.value, key));
        }
    };
    /**
     * used to update state properties when patch has no undefined values
     */
    /**
     * used to update state properties when patch has no undefined values
     * @param {?} path
     * @param {?} patch
     * @return {?}
     */
    StatesUtils.update = /**
     * used to update state properties when patch has no undefined values
     * @param {?} path
     * @param {?} patch
     * @return {?}
     */
    function (path, patch) {
        /** @type {?} */
        var state = StatesUtils.get(path, true);
        if (!state.value) {
            return StatesUtils.create(path, patch);
        }
        else {
            state.next(CommonsUtils.merge({}, state.value, patch));
            return state;
        }
    };
    /**
     * @param {...?} path
     * @return {?}
     */
    StatesUtils.getValue = /**
     * @param {...?} path
     * @return {?}
     */
    function () {
        var path = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            path[_i] = arguments[_i];
        }
        /** @type {?} */
        var state = StatesUtils.get(path);
        return state ? tslib_1.__assign({}, state.value) : undefined;
    };
    /**
     * @param {...?} path
     * @return {?}
     */
    StatesUtils.deleteState = /**
     * @param {...?} path
     * @return {?}
     */
    function () {
        var path = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            path[_i] = arguments[_i];
        }
        /** @type {?} */
        var state = StatesUtils.get(path);
        CommonsUtils.unset(APP_STORE.value, CommonsUtils.flatPath(path));
        if (state) {
            state.next(undefined);
            state.complete();
        }
        APP_STORE.next(APP_STORE.value);
    };
    /**
     * @private
     * @param {?} path
     * @param {?=} createWhenAbsent
     * @return {?}
     */
    StatesUtils.getStoreItem = /**
     * @private
     * @param {?} path
     * @param {?=} createWhenAbsent
     * @return {?}
     */
    function (path, createWhenAbsent) {
        /** @type {?} */
        var key = CommonsUtils.flatPath(path);
        /** @type {?} */
        var storeItem = CommonsUtils.get(APP_STORE.value, key);
        if (!storeItem && createWhenAbsent) {
            storeItem = {
                state: new BehaviorSubject(undefined),
                createdAt: new Date().getMilliseconds()
            };
            /** @type {?} */
            var value = CommonsUtils.set(APP_STORE.value, key, storeItem);
            APP_STORE.next(value);
        }
        return storeItem;
    };
    return StatesUtils;
}());
export { StatesUtils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdXRpbHMvIiwic291cmNlcyI6WyJsaWIvc3RhdGVzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNyQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sU0FBUyxDQUFDOztJQUUvQixTQUFTLEdBQTJCLElBQUksZUFBZSxDQUFDLEVBQUUsQ0FBQztBQUVqRTtJQUFBO0lBNkhBLENBQUM7Ozs7SUEzSFEsb0JBQVE7OztJQUFmO1FBQ0UsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQzs7Ozs7OztJQUVNLGtCQUFNOzs7Ozs7SUFBYixVQUFjLElBQXVCLEVBQUUsS0FBVSxFQUFFLFNBQW1COztZQUM5RCxTQUFTLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO1FBQ3RELFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVCLElBQUksU0FBUyxFQUFFO1lBQ2IsU0FBUyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7U0FDakM7UUFDRCxPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUM7SUFDekIsQ0FBQzs7Ozs7O0lBRU0sZUFBRzs7Ozs7SUFBVixVQUFXLElBQXVCLEVBQUUsZ0JBQTBCOztZQUN0RCxTQUFTLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUM7UUFDbEUsSUFBSSxTQUFTLEVBQUU7WUFDYixPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUM7U0FDeEI7YUFBTTtZQUNMLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQzs7Ozs7SUFFTSxtQkFBTzs7OztJQUFkO1FBQWUsY0FBaUI7YUFBakIsVUFBaUIsRUFBakIscUJBQWlCLEVBQWpCLElBQWlCO1lBQWpCLHlCQUFpQjs7UUFDOUIsT0FBTyxXQUFXLENB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QUssRUFBRSxHQUFHLENBQUM7UUFDakUsSUFBSSxDQUFDLFNBQVMsSUFBSSxnQkFBZ0IsRUFBRTtZQUNsQyxTQUFTLEdBQUc7Z0JBQ1YsS0FBSyxFQUFFLElBQUksZUFBZSxDQUFDLFNBQVMsQ0FBQztnQkFDckMsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsZUFBZSxFQUFFO2FBQ3hDLENBQUM7O2dCQUNJLEtBQUssR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLFNBQVMsQ0FBQztZQUMvRCxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FBQyxBQTdIRCxJQTZIQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3RhdGUsIFN0b3JlLCBTdG9yZUl0ZW19IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0NvbW1vbnNVdGlsc30gZnJvbSAnLi4vY29tbSc7XG5cbmNvbnN0IEFQUF9TVE9SRTogQmVoYXZpb3JTdWJqZWN0PFN0b3JlPiA9IG5ldyBCZWhhdmlvclN1YmplY3Qoe30pO1xuXG5leHBvcnQgY2xhc3MgU3RhdGVzVXRpbHMge1xuXG4gIHN0YXRpYyBnZXRTdG9yZSgpOiBCZWhhdmlvclN1YmplY3Q8U3RvcmU+IHtcbiAgICByZXR1cm4gQVBQX1NUT1JFO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZShwYXRoOiBzdHJpbmcgfCBzdHJpbmdbXSwgdmFsdWU/OiB7fSwgcHJlc2VydmVkPzogYm9vbGVhbik6IFN0YXRlIHtcbiAgICBjb25zdCBzdG9yZUl0ZW0gPSBTdGF0ZXNVdGlscy5nZXRTdG9yZUl0ZW0ocGF0aCwgdHJ1ZSk7XG4gICAgc3RvcmVJdGVtLnN0YXRlLm5leHQodmFsdWUpO1xuICAgIGlmIChwcmVzZXJ2ZWQpIHtcbiAgICAgIHN0b3JlSXRlbS5wcmVzZXJ2ZWQgPSBwcmVzZXJ2ZWQ7XG4gICAgfVxuICAgIHJldHVybiBzdG9yZUl0ZW0uc3RhdGU7XG4gIH1cblxuICBzdGF0aWMgZ2V0KHBhdGg6IHN0cmluZyB8IHN0cmluZ1tdLCBjcmVhdGVXaGVuQWJzZW50PzogYm9vbGVhbik6IEJlaGF2aW9yU3ViamVjdDxhbnk+IHtcbiAgICBjb25zdCBzdG9yZUl0ZW0gPSBTdGF0ZXNVdGlscy5nZXRTdG9yZUl0ZW0ocGF0aCwgY3JlYXRlV2hlbkFic2VudCk7XG4gICAgaWYgKHN0b3JlSXRlbSkge1xuICAgICAgcmV0dXJuIHN0b3JlSXRlbS5zdGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgb2JzZXJ2ZSguLi5wYXRoOiBzdHJpbmdbXSk6IEJlaGF2aW9yU3ViamVjdDxhbnk+IHtcbiAgICByZXR1cm4gU3RhdGVzVXRpbHMuZ2V0KHBhdGgsIHRydWUpO1xuICB9XG5cbiAgc3RhdGljIHRvZ2dsZSguLi5wYXRoOiBzdHJpbmdbXSk6IFN0YXRlIHtcbiAgICBjb25zdCBzdGF0ZSA9IFN0YXRlc1V0aWxzLmdldChwYXRoKTtcbiAgICBzdGF0ZS5uZXh0KCEhIXN0YXRlLnZhbHVlKTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBzdGF0aWMgaW5jKHBhdGg6IHN0cmluZyB8IHN0cmluZ1tdKTogU3RhdGUge1xuICAgIGNvbnN0IHN0YXRlID0gU3RhdGVzVXRpbHMuZ2V0KHBhdGgsIHRydWUpO1xuICAgIGxldCBuZXdWYWx1ZSA9IDA7XG4gICAgaWYgKHN0YXRlLnZhbHVlKSB7XG4gICAgICBuZXdWYWx1ZSA9IHN0YXRlLnZhbHVlICsgMTtcbiAgICB9XG4gICAgc3RhdGUubmV4dChuZXdWYWx1ZSk7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgc3RhdGljIGRlYyhwYXRoOiBzdHJpbmcgfCBzdHJpbmdbXSk6IFN0YXRlIHtcbiAgICBjb25zdCBzdGF0ZSA9IFN0YXRlc1V0aWxzLmdldChwYXRoLCB0cnVlKTtcbiAgICBsZXQgbmV3VmFsdWUgPSAwO1xuICAgIGlmIChzdGF0ZS52YWx1ZSkge1xuICAgICAgbmV3VmFsdWUgPSBzdGF0ZS52YWx1ZSAtIDE7XG4gICAgfVxuICAgIHN0YXRlLm5leHQobmV3VmFsdWUpO1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIHN0YXRpYyBhZGQocGF0aDogc3RyaW5nIHwgc3RyaW5nW10sIG9mZnNldDogbnVtYmVyKTogU3RhdGUge1xuICAgIGNvbnN0IHN0YXRlID0gU3RhdGVzVXRpbHMuZ2V0KHBhdGgsIHRydWUpO1xuICAgIGxldCBuZXdWYWx1ZSA9IDA7XG4gICAgaWYgKHN0YXRlLnZhbHVlKSB7XG4gICAgICBuZXdWYWx1ZSA9IHN0YXRlLnZhbHVlICsgb2Zmc2V0O1xuICAgIH1cbiAgICBzdGF0ZS5uZXh0KG5ld1ZhbHVlKTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICAvKipcbiAgICogdXNlZCB0byBjbGVhciBzb21lIHN0YXRlIHByb3BlcnRpZXNcbiAgICovXG4gIHN0YXRpYyBzZXQocGF0aDogc3RyaW5nIHwgc3RyaW5nW10sIGZpbmFsOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KTogU3RhdGUge1xuICAgIGNvbnN0IHN0YXRlID0gU3RhdGVzVXRpbHMuZ2V0KHBhdGgsIHRydWUpO1xuICAgIGlmICghc3RhdGUudmFsdWUpIHtcbiAgICAgIHJldHVybiBTdGF0ZXNVdGlscy5jcmVhdGUocGF0aCwgZmluYWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5uZXh0KGZpbmFsKTtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZGVsZXRlKHBhdGg6IHN0cmluZyB8IHN0cmluZ1tdLCBrZXk6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgY29uc3Qgc3RhdGUgPSBTdGF0ZXNVdGlscy5nZXQocGF0aCk7XG4gICAgaWYgKHN0YXRlLnZhbHVlKSB7XG4gICAgICBzdGF0ZS5uZXh0KENvbW1vbnNVdGlscy51bnNldChzdGF0ZS52YWx1ZSwga2V5KSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHVzZWQgdG8gdXBkYXRlIHN0YXRlIHByb3BlcnRpZXMgd2hlbiBwYXRjaCBoYXMgbm8gdW5kZWZpbmVkIHZhbHVlc1xuICAgKi9cbiAgc3RhdGljIHVwZGF0ZShwYXRoOiBzdHJpbmcgfCBzdHJpbmdbXSwgcGF0Y2g6IHsgW2tleTogc3RyaW5nXTogYW55IH0pOiBTdGF0ZSB7XG4gICAgY29uc3Qgc3RhdGUgPSBTdGF0ZXNVdGlscy5nZXQocGF0aCwgdHJ1ZSk7XG4gICAgaWYgKCFzdGF0ZS52YWx1ZSkge1xuICAgICAgcmV0dXJuIFN0YXRlc1V0aWxzLmNyZWF0ZShwYXRoLCBwYXRjaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLm5leHQoQ29tbW9uc1V0aWxzLm1lcmdlKHt9LCBzdGF0ZS52YWx1ZSwgcGF0Y2gpKTtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0VmFsdWUoLi4ucGF0aDogc3RyaW5nW10pOiBhbnkge1xuICAgIGNvbnN0IHN0YXRlID0gU3RhdGVzVXRpbHMuZ2V0KHBhdGgpO1xuICAgIHJldHVybiBzdGF0ZSA/IHsuLi5zdGF0ZS52YWx1ZX0gOiB1bmRlZmluZWQ7XG4gIH1cblxuICBzdGF0aWMgZGVsZXRlU3RhdGUoLi4ucGF0aDogc3RyaW5nW10pIHtcbiAgICBjb25zdCBzdGF0ZSA9IFN0YXRlc1V0aWxzLmdldChwYXRoKTtcbiAgICBDb21tb25zVXRpbHMudW5zZXQoQVBQX1NUT1JFLnZhbHVlLCBDb21tb25zVXRpbHMuZmxhdFBhdGgocGF0aCkpO1xuICAgIGlmIChzdGF0ZSkge1xuICAgICAgc3RhdGUubmV4dCh1bmRlZmluZWQpO1xuICAgICAgc3RhdGUuY29tcGxldGUoKTtcbiAgICB9XG4gICAgQVBQX1NUT1JFLm5leHQoQVBQX1NUT1JFLnZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGdldFN0b3JlSXRlbShwYXRoOiBzdHJpbmcgfCBzdHJpbmdbXSwgY3JlYXRlV2hlbkFic2VudD86IGJvb2xlYW4pOiBTdG9yZUl0ZW0ge1xuICAgIGNvbnN0IGtleSA9IENvbW1vbnNVdGlscy5mbGF0UGF0aChwYXRoKTtcbiAgICBsZXQgc3RvcmVJdGVtOiBTdG9yZUl0ZW0gPSBDb21tb25zVXRpbHMuZ2V0KEFQUF9TVE9SRS52YWx1ZSwga2V5KTtcbiAgICBpZiAoIXN0b3JlSXRlbSAmJiBjcmVhdGVXaGVuQWJzZW50KSB7XG4gICAgICBzdG9yZUl0ZW0gPSB7XG4gICAgICAgIHN0YXRlOiBuZXcgQmVoYXZpb3JTdWJqZWN0KHVuZGVmaW5lZCksXG4gICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS5nZXRNaWxsaXNlY29uZHMoKVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHZhbHVlID0gQ29tbW9uc1V0aWxzLnNldChBUFBfU1RPUkUudmFsdWUsIGtleSwgc3RvcmVJdGVtKTtcbiAgICAgIEFQUF9TVE9SRS5uZXh0KHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0b3JlSXRlbTtcbiAgfVxufVxuXG4iXX0=