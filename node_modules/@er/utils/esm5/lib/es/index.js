/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { AggInterval, AggIntervalProps, AggMethods, AggMethodsProps, DEFAULT_ES_QUERY_CONDITION, DEFAULT_QUERY_CONDITION, ES_QUERY_OPERATORS, Order } from '@er/types';
import * as esb from 'elastic-builder';
import { RequestBodySearch } from 'elastic-builder';
import { CommonsUtils } from '../comm';
import { DialogUtils } from '../dialog';
var EsUtils = /** @class */ (function () {
    function EsUtils() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    EsUtils.parseEsbObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (!obj) {
            return obj;
        }
        if (CommonsUtils.isArray(obj)) {
            return obj.forEach(function (o) { return EsUtils.parseEsbObject(o); });
        }
        else {
            if (CommonsUtils.isFunction(obj['toJSON'])) {
                return obj['toJSON']();
            }
            else {
                return obj;
            }
        }
    };
    /**
     * @param {?} key
     * @param {?} aggMethods
     * @return {?}
     */
    EsUtils.getFieldAggs = /**
     * @param {?} key
     * @param {?} aggMethods
     * @return {?}
     */
    function (key, aggMethods) {
        if (aggMethods) {
            /** @type {?} */
            var aggs_1 = {};
            aggMethods.forEach(function (method) {
                switch (method) {
                    case AggMethodsProps.avg.key:
                        aggs_1 = CommonsUtils.merge(aggs_1, esb.avgAggregation(key + "-" + method, key).toJSON());
                        break;
                    case AggMethodsProps.distinct.key:
                        aggs_1 = CommonsUtils.merge(aggs_1, esb.cardinalityAggregation(key + "-" + method, key).toJSON());
                        break;
                    case AggMethodsProps.max.key:
                        aggs_1 = CommonsUtils.merge(aggs_1, esb.maxAggregation(key + "-" + method, key).toJSON());
                        break;
                    case AggMethodsProps.min.key:
                        aggs_1 = CommonsUtils.merge(aggs_1, esb.minAggregation(key + "-" + method, key).toJSON());
                        break;
                    case AggMethodsProps.sum.key:
                        aggs_1 = CommonsUtils.merge(aggs_1, esb.sumAggregation(key + "-" + method, key).toJSON());
                        break;
                    case AggMethodsProps.count.key:
                        aggs_1 = CommonsUtils.merge(aggs_1, esb.valueCountAggregation(key + "-" + method, key).toJSON());
                        break;
                    default:
                        aggs_1 = CommonsUtils.merge(aggs_1, esb.valueCountAggregation(key + "-" + method, key).toJSON());
                }
            });
            return aggs_1;
        }
        else {
            return undefined;
        }
    };
    /**
     * @param {?} query
     * @return {?}
     */
    EsUtils.resolveQuery = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        /** @type {?} */
        var must = [];
        /** @type {?} */
        var should = [];
        /** @type {?} */
        var not = [];
        if (query) {
            if (CommonsUtils.isArray(query)) {
                must = must.concat(query);
            }
            else if (CommonsUtils.isJson(query)) {
                if (query.hasOwnProperty('$and')) {
                    /** @type {?} */
                    var and = query['$and'];
                    if (CommonsUtils.isArray(and)) {
                        must = must.concat(and);
                    }
                    else {
                        must.push(and);
                    }
                }
                if (query.hasOwnProperty('$or')) {
                    /** @type {?} */
                    var or = query['$or'];
                    if (CommonsUtils.isArray(or)) {
                        should = should.concat(or);
                    }
                    else {
                        should.push(or);
                    }
                }
                if (query.hasOwnProperty('$not')) {
                    /** @type {?} */
                    var but = query['$not'];
                    if (CommonsUtils.isArray(but)) {
                        not = not.concat(but);
                    }
                    else {
                        not.push(but);
                    }
                }
            }
            else {
                must.push(query);
            }
        }
        return {
            must: CommonsUtils.compact(must),
            should: CommonsUtils.compact(should),
            not: CommonsUtils.compact(not)
        };
    };
    /**
     * @param {?} options
     * @return {?}
     */
    EsUtils.resolveSearchFields = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var searchFields = CommonsUtils.getArrayValue(options.searchFields);
        if (CommonsUtils.isEmpty(searchFields)) {
            DialogUtils.error('数据错误', '没有定义查询字段');
            throw new Error('not found search fields');
        }
        /** @type {?} */
        var qs = [];
        searchFields.filter(function (field) { return !!field; }).forEach(function (field) {
            if (options.withPy) {
                if (options.withWildcard) {
                    qs.push(esb.wildcardQuery(field + ".py", "*" + options.queryValue + "*"));
                }
                else {
                    qs.push(esb.prefixQuery(field + ".py", options.queryValue));
                }
            }
            if (options.withZh) {
                qs.push(esb.wildcardQuery(field + ".zh", "*" + options.queryValue + "*"));
            }
            if (options.withTerm) {
                qs.push(esb.termQuery(field, options.queryValue));
            }
            if (options.withPrefix) {
                qs.push(esb.prefixQuery(field, options.queryValue));
            }
            if (options.withWildcard) {
                qs.push(esb.wildcardQuery(field, "*" + options.queryValue + "*"));
            }
            if (qs.length === 0) {
                qs.push(esb.matchQuery(field, options.queryValue));
            }
        });
        return qs;
    };
    /**
     * @param {?} options
     * @return {?}
     */
    EsUtils.buildQueryBody = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var query = esb.requestBodySearch();
        /** @type {?} */
        var boolQuery = esb.boolQuery();
        /** @type {?} */
        var queries = EsUtils.resolveQuery(options.query);
        if (options.queryValue) {
            /** @type {?} */
            var qs = EsUtils.resolveSearchFields(options);
            if (qs.length === 1) {
                queries.must.push(qs[0]);
            }
            else {
                queries.should = queries.should.concat(qs);
            }
        }
        if (queries.must.length > 0) {
            boolQuery.must(queries.must);
        }
        if (queries.should.length > 0) {
            boolQuery.should(queries.should).minimumShouldMatch(1);
        }
        if (queries.not.length > 0) {
            boolQuery.mustNot(queries.not);
        }
        query.query(boolQuery);
        if (!CommonsUtils.isEmpty(options.filter)) {
            boolQuery.filter(options.filter);
        }
        if (!(options.returnFields && options.returnFields.length === 0)) {
            /** @type {?} */
            var returnFields = options.returnFields || options.searchFields;
            query.source(returnFields);
        }
        if (options.sort) {
            /** @type {?} */
            var sorts_1 = EsUtils.resolveSort(options.sort);
            /** @type {?} */
            var esSorts_1 = [];
            Object.keys(sorts_1).forEach(function (key) {
                esSorts_1.push(esb.sort(key, sorts_1[key] || Order.ASC).unmappedType('string'));
            });
            query.sorts(esSorts_1);
        }
        if (options.aggProps) {
            /** @type {?} */
            var aggs = EsUtils.parseAggProps(options.aggProps);
            if (aggs.length > 0) {
                ((/** @type {?} */ (query))).aggs(aggs);
                ((/** @type {?} */ (query))).size(options.size || 0);
            }
        }
        if (options.from) {
            query.from(options.from);
        }
        if (options.size) {
            query.size(options.size);
        }
        return query;
    };
    /**
     * @param {?} aggProps
     * @return {?}
     */
    EsUtils.parseAggProps = /**
     * @param {?} aggProps
     * @return {?}
     */
    function (aggProps) {
        /** @type {?} */
        var props = CommonsUtils.getArrayValue(aggProps);
        /** @type {?} */
        var aggs = [];
        /** @type {?} */
        var agg;
        props.forEach(function (item) {
            /** @type {?} */
            var aggProp = item;
            if (CommonsUtils.isString(aggProp)) {
                aggProp = { field: item };
            }
            /** @type {?} */
            var aggName = aggProp.name || aggProp.field + "-" + (aggProp.method || 'terms');
            if (aggProp.aggs) {
                aggProp.method = AggMethods.CUSTOMER;
            }
            switch (aggProp.method) {
                case AggMethods.AVG:
                    agg = esb.avgAggregation(aggName, aggProp.field).missing('0');
                    break;
                case AggMethods.MIN:
                    agg = esb.minAggregation(aggName, aggProp.field);
                    break;
                case AggMethods.MAX:
                    agg = esb.maxAggregation(aggName, aggProp.field);
                    break;
                case AggMethods.SUM:
                    agg = esb.sumAggregation(aggName, aggProp.field).missing('0');
                    break;
                case AggMethods.DISTINCT:
                    agg = esb.cardinalityAggregation(aggName, aggProp.field);
                    break;
                case AggMethods.HISTOGRAM:
                    agg = esb.histogramAggregation(aggName, aggProp.field);
                    if (aggProp.format) {
                        ((/** @type {?} */ (agg))).interval(aggProp.interval);
                    }
                    ((/** @type {?} */ (agg))).minDocCount(aggProp.minCount || 1);
                    if (aggProp.format) {
                        ((/** @type {?} */ (agg))).format(aggProp.format);
                    }
                    if (aggProp.missing) {
                        ((/** @type {?} */ (agg))).missing(aggProp.missing);
                    }
                    break;
                case AggMethods.DATE_HISTOGRAM:
                    agg = esb.dateHistogramAggregation(aggName, aggProp.field);
                    if (aggProp.interval) {
                        ((/** @type {?} */ (agg))).interval(aggProp.interval);
                    }
                    /** @type {?} */
                    var interval = aggProp.interval || AggInterval.DAY;
                    /** @type {?} */
                    var intervalProp = AggIntervalProps[interval];
                    ((/** @type {?} */ (agg))).interval(interval);
                    ((/** @type {?} */ (agg))).minDocCount(aggProp.minCount || 1);
                    /** @type {?} */
                    var format = aggProp.format || (intervalProp && intervalProp.format);
                    if (format) {
                        ((/** @type {?} */ (agg))).format(format);
                    }
                    if (aggProp.missing) {
                        ((/** @type {?} */ (agg))).missing(aggProp.missing);
                    }
                    break;
                case AggMethods.CUSTOMER:
                    agg = CommonsUtils.getValue(aggProp.aggs, aggProp);
                    break;
                case AggMethods.COUNT:
                    agg = esb.valueCountAggregation(aggName, aggProp.field);
                    break;
                default:
                    agg = esb.termsAggregation(aggName, aggProp.field).size(aggProp.size || 10);
                    break;
            }
            aggs.push(agg);
        });
        return aggs;
    };
    /**
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    EsUtils.resolveRequestBody = /**
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    function (body, options) {
        if (!body || typeof body === 'string') {
            return body || {};
        }
        if (body instanceof RequestBodySearch) {
            return CommonsUtils.merge({}, body.toJSON() || {}, options.payload || {}, options.body || options.params || {});
        }
        /** @type {?} */
        var _body = tslib_1.__assign({}, body);
        if (!CommonsUtils.isEmpty(_body.sort)) {
            /** @type {?} */
            var sorts_2 = EsUtils.resolveSort(_body.sort);
            /** @type {?} */
            var esSorts_2 = [];
            Object.keys(sorts_2).forEach(function (key) {
                var _a;
                esSorts_2.push((_a = {}, _a[key] = { order: sorts_2[key] || Order.ASC, 'unmapped_type': 'string' }, _a));
            });
            _body.sort = esSorts_2;
        }
        if (_body.size && _body.page) {
            _body.from = _body.page * _body.size;
        }
        if (_body.from && _body.to) {
            _body.size = _body.to - _body.from;
        }
        delete _body.to;
        delete _body.page;
        if (!CommonsUtils.isEmpty(_body.query) ||
            !CommonsUtils.isEmpty(_body.filter)) {
            /** @type {?} */
            var esQuery_1 = {};
            if (!CommonsUtils.isEmpty(_body.query)) {
                if (CommonsUtils.isArray(_body.query)) {
                    _body.query['$and'] = _body.query;
                }
                else {
                    _body.query = EsUtils.parseEsbObject(_body.query);
                }
                /** @type {?} */
                var queryBody_1 = _body.query;
                if (Object.keys(queryBody_1).length > 0) {
                    Object.keys(queryBody_1).forEach(function (key) {
                        var _a, _b;
                        if (key === '$and') {
                            /** @type {?} */
                            var must = EsUtils.queryResolver(queryBody_1, '$and');
                            if (must) {
                                esQuery_1['must'] = must;
                            }
                        }
                        else if (key === '$or') {
                            /** @type {?} */
                            var should = EsUtils.queryResolver(queryBody_1, '$or');
                            if (should) {
                                esQuery_1['should'] = should;
                            }
                        }
                        else if (key === '$not') {
                            /** @type {?} */
                            var must_not = EsUtils.queryResolver(queryBody_1, '$not');
                            if (must_not) {
                                esQuery_1['must_not'] = must_not;
                            }
                        }
                        else if (queryBody_1[key]) {
                            if (esQuery_1['must']) {
                                esQuery_1['must'].push((_a = {}, _a[key] = queryBody_1[key], _a));
                            }
                            else {
                                esQuery_1['must'] = [(_b = {}, _b[key] = queryBody_1[key], _b)];
                            }
                        }
                    });
                    esQuery_1 = tslib_1.__assign({}, esQuery_1);
                }
                if (esQuery_1['should'] && !esQuery_1['minimum_should_match']) {
                    esQuery_1['minimum_should_match'] = 1;
                }
            }
            if (!CommonsUtils.isEmpty(_body.filter)) {
                /** @type {?} */
                var filterBody_1 = tslib_1.__assign({}, _body.filter);
                esQuery_1['filter'] = [];
                if (Object.keys(filterBody_1).length > 0) {
                    Object.keys(filterBody_1).forEach(function (key) {
                        var _a;
                        if (filterBody_1[key]) {
                            esQuery_1['filter'].push((_a = {}, _a[key] = filterBody_1[key], _a));
                        }
                    });
                }
                if (esQuery_1['filter'].length === 0) {
                    delete esQuery_1['filter'];
                }
            }
            if (Object.keys(esQuery_1).length > 0) {
                _body.query = { bool: esQuery_1 };
            }
        }
        if (!CommonsUtils.isEmpty(_body.aggs)) {
            /** @type {?} */
            var aggs = EsUtils.parseAggProps(_body.aggs);
            if (aggs.length > 0) {
                _body.aggs = esb.requestBodySearch().aggs(aggs).toJSON()['aggs'];
            }
        }
        Object.keys(_body).forEach(function (k) {
            if (CommonsUtils.isEmpty(_body[k])) {
                delete _body[k];
            }
        });
        return _body;
    };
    /**
     * @param {?} sort
     * @return {?}
     */
    EsUtils.resolveSort = /**
     * @param {?} sort
     * @return {?}
     */
    function (sort) {
        /** @type {?} */
        var sorts = {};
        if (CommonsUtils.isString(sort)) {
            sorts[(/** @type {?} */ (sort))] = Order.ASC;
        }
        else if (CommonsUtils.isArray(sort)) {
            ((/** @type {?} */ (sort))).forEach(function (s) {
                if (CommonsUtils.isString(s)) {
                    if (!sorts[s]) {
                        sorts[s] = Order.ASC;
                    }
                }
                else {
                    sorts = tslib_1.__assign({}, sorts, (/** @type {?} */ (s)));
                }
            });
        }
        else {
            sorts = (/** @type {?} */ (sort));
        }
        return sorts;
    };
    /**
     * @param {?} qs
     * @return {?}
     */
    EsUtils.getMsearchBody = /**
     * @param {?} qs
     * @return {?}
     */
    function (qs) {
        /** @type {?} */
        var body = qs.map(function (q) { return JSON.stringify(q); });
        return body.join('\n') + '\n';
    };
    /**
     * @param {?} ruleSet
     * @return {?}
     */
    EsUtils.buildQueryRuleSet = /**
     * @param {?} ruleSet
     * @return {?}
     */
    function (ruleSet) {
        ruleSet = (!ruleSet) ? {} : ruleSet;
        return (function parse(data) {
            if (!data['condition']) {
                data['condition'] = DEFAULT_ES_QUERY_CONDITION || DEFAULT_QUERY_CONDITION;
            }
            if (['AND', 'OR'].indexOf(data['condition'].toUpperCase()) === -1) {
                throw new Error('不识别的ElasticSearch bool query 关系(AND,OR) "{0}"'
                    .replace('{0}', data['condition']));
            }
            if (!data['rules']) {
                return {};
            }
            /** @type {?} */
            var parts = {};
            parts['add'] = function (k, v) {
                if (this.hasOwnProperty(k)) {
                    this[k].push(v);
                }
                else {
                    this[k] = [v];
                }
            };
            data['rules'].forEach(function (rule) {
                var _this = this;
                /** @type {?} */
                var get_value = function (aRule) {
                    if (aRule.data && aRule.data.transform) {
                        return aRule.data.transform.call(_this, aRule.value);
                    }
                    else {
                        return aRule.value;
                    }
                };
                /** @type {?} */
                var make_query = function (aRule) {
                    /** @type {?} */
                    var operator = ES_QUERY_OPERATORS[aRule.operator];
                    if (operator === undefined) {
                        throw new Error('不识别的查询操作符 "{0}"'
                            .replace('{0}', aRule.operator));
                    }
                    /** @type {?} */
                    var part = {};
                    if (operator.inputs !== 0) {
                        /** @type {?} */
                        var keyVal = {};
                        /** @type {?} */
                        var valueMapper = operator.getValue;
                        if (valueMapper) {
                            keyVal[aRule.field] = valueMapper(get_value(aRule));
                        }
                        else {
                            keyVal[aRule.field] = get_value(aRule);
                        }
                        part[operator.operator] = keyVal;
                    }
                    if (aRule.operator === 'is_null') {
                        part = { exists: { field: aRule.field } };
                    }
                    if (data['condition'] === 'NOT') {
                        return { 'bool': { 'must_not': [part] } };
                    }
                    else {
                        return part;
                    }
                };
                /** @type {?} */
                var clause;
                if (data['condition'] === 'AND') {
                    clause = 'must';
                }
                if (data['condition'] === 'NOT') {
                    clause = 'must_not';
                }
                if (data['condition'] === 'OR') {
                    clause = 'should';
                }
                if (rule['rules'] && rule['rules'].length > 0) {
                    parts['add'](clause, parse(rule));
                }
                else {
                    parts['add'](clause, make_query(rule));
                }
            });
            delete parts['add'];
            return { 'bool': parts };
        }(ruleSet));
    };
    /**
     * @param {?} aggs
     * @return {?}
     */
    EsUtils.resolveAggs = /**
     * @param {?} aggs
     * @return {?}
     */
    function (aggs) {
        /** @type {?} */
        var resolved = {};
        Object.keys(aggs).forEach(function (key) {
            /** @type {?} */
            var agg = aggs[key];
            resolved[key] = {};
            Object.keys(agg).forEach(function (k) {
                if (k === 'buckets') {
                    resolved[key] = EsUtils.resolveBuckets(agg[k]);
                }
                else if (k === 'value') {
                    resolved[key] = agg[k];
                }
                else {
                    // console.debug('esUtils', 'discard agg key:' + k);
                    // resolved[key][k] = agg[key];
                }
            });
        });
        return resolved;
    };
    /**
     * @param {?} buckets
     * @return {?}
     */
    EsUtils.resolveBuckets = /**
     * @param {?} buckets
     * @return {?}
     */
    function (buckets) {
        /** @type {?} */
        var resolved = buckets.map(function (bucket) { return EsUtils.resolveBucket(bucket); });
        return resolved;
    };
    /**
     * @param {?} bucket
     * @return {?}
     */
    EsUtils.resolveBucket = /**
     * @param {?} bucket
     * @return {?}
     */
    function (bucket) {
        /** @type {?} */
        var resolved = {};
        Object.keys(bucket).forEach(function (key) {
            var _a;
            if (key === 'key') {
                resolved['label'] = bucket['key'];
            }
            else if (key === 'doc_count') {
                resolved['value'] = bucket['doc_count'];
            }
            else {
                if (CommonsUtils.isJson(bucket[key])) {
                    resolved = tslib_1.__assign({}, resolved, EsUtils.resolveAggs((_a = {}, _a[key] = bucket[key], _a)));
                }
                else {
                    resolved[key] = bucket[key];
                }
            }
        });
        return resolved;
    };
    /**
     * @private
     * @param {?} queryBody
     * @param {?} key
     * @return {?}
     */
    EsUtils.queryResolver = /**
     * @private
     * @param {?} queryBody
     * @param {?} key
     * @return {?}
     */
    function (queryBody, key) {
        if (queryBody[key]) {
            /** @type {?} */
            var _qs = queryBody[key].filter(function (q) { return !CommonsUtils.isEmpty(q); });
            if (_qs.length > 0) {
                _qs = _qs.map(function (q) { return EsUtils.parseEsbObject(q); });
            }
            return (_qs.length > 0) ? _qs : undefined;
        }
    };
    return EsUtils;
}());
export { EsUtils };
//# sourceMappingURL=data:application/json;base64,