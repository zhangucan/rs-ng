/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { VarType } from '@er/types';
import * as _ from 'lodash';
import { CacheUtils } from '../cache';
var CommonsUtils = /** @class */ (function () {
    function CommonsUtils() {
    }
    /**
     * @return {?}
     */
    CommonsUtils.lodash = /**
     * @return {?}
     */
    function () {
        return _;
    };
    /**
     * @return {?}
     */
    CommonsUtils.getSeq = /**
     * @return {?}
     */
    function () {
        return CacheUtils.getSeq();
    };
    /**
     * @param {?=} max
     * @param {?=} min
     * @return {?}
     */
    CommonsUtils.getRandomNumber = /**
     * @param {?=} max
     * @param {?=} min
     * @return {?}
     */
    function (max, min) {
        if (max === void 0) { max = 10; }
        /** @type {?} */
        var result = Math.floor(Math.random() * (max + 1) + (min || 0));
        return result;
    };
    /**
     * @template T
     * @param {?} src
     * @param {?} key
     * @return {?}
     */
    CommonsUtils.getObjWhenStr = /**
     * @template T
     * @param {?} src
     * @param {?} key
     * @return {?}
     */
    function (src, key) {
        var _a;
        /** @type {?} */
        var result = (typeof src === 'string') ? (/** @type {?} */ (_a = {}, _a[key] = src, _a)) : src;
        return result;
    };
    /**
     * @param {?} object
     * @return {?}
     */
    CommonsUtils.getVarType = /**
     * @param {?} object
     * @return {?}
     */
    function (object) {
        /** @type {?} */
        var type = VarType.UNKNOWN;
        if (object === null) {
            type = VarType.NULL;
        }
        else if (object === undefined) {
            type = VarType.UNDEFINED;
        }
        else if (object === true || object === false) {
            type = VarType.BOOLEAN;
        }
        if (type !== VarType.UNKNOWN) {
            return type;
        }
        /** @type {?} */
        var objectType = typeof object;
        if (objectType === 'string') {
            // if (DateUtils.isDate(object)) {
            //   return VarType.DATE;
            // }
            type = VarType.STRING;
        }
        else if (objectType === 'number') {
            type = VarType.NUMBER;
        }
        else if (objectType === 'function') {
            type = VarType.FUNCTION;
        }
        if (object.constructor === [].constructor) {
            type = VarType.ARRAY;
        }
        else if (object.constructor === {}.constructor) {
            type = VarType.JSON;
        }
        return type;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CommonsUtils.isNullOrUndefined = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value === undefined || value === null;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.isString = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return CommonsUtils.getVarType(obj) === VarType.STRING;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.isBoolean = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return CommonsUtils.getVarType(obj) === VarType.BOOLEAN;
    };
    /**
     * @param {?} s
     * @return {?}
     */
    CommonsUtils.isEmptyString = /**
     * @param {?} s
     * @return {?}
     */
    function (s) {
        return !s || CommonsUtils.isString(s) && s.trim().length === 0;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.isArray = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return CommonsUtils.getVarType(obj) === VarType.ARRAY;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.isNumber = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return CommonsUtils.getVarType(obj) === VarType.NUMBER;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.isJson = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return CommonsUtils.getVarType(obj) === VarType.JSON;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.isFunction = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return CommonsUtils.getVarType(obj) === VarType.FUNCTION;
    };
    /**
     * @param {?} str
     * @return {?}
     */
    CommonsUtils.isUrl = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
        return regexp.test(str);
    };
    /**
     * @param {?} str
     * @return {?}
     */
    CommonsUtils.isInteger = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return !CommonsUtils.isNullOrUndefined(str) && /^\d+$/.test(str);
    };
    /**
     * @param {?} value
     * @param {?} other
     * @return {?}
     */
    CommonsUtils.isEqual = /**
     * @param {?} value
     * @param {?} other
     * @return {?}
     */
    function (value, other) {
        return _.isEqual(value, other);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.copy = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return _.cloneDeep(obj);
    };
    /**
     * @param {?} obj1
     * @param {...?} obj2
     * @return {?}
     */
    CommonsUtils.merge = /**
     * @param {?} obj1
     * @param {...?} obj2
     * @return {?}
     */
    function (obj1) {
        var obj2 = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            obj2[_i - 1] = arguments[_i];
        }
        return _.merge.apply(null, tslib_1.__spread([obj1], obj2));
    };
    /**
     * @param {?} obj
     * @param {?} predicate
     * @return {?}
     */
    CommonsUtils.pickBy = /**
     * @param {?} obj
     * @param {?} predicate
     * @return {?}
     */
    function (obj, predicate) {
        return _.pickBy(obj, predicate);
    };
    /**
     * @param {?} obj
     * @param {?} keys
     * @return {?}
     */
    CommonsUtils.pick = /**
     * @param {?} obj
     * @param {?} keys
     * @return {?}
     */
    function (obj, keys) {
        return _.pick(obj, keys);
    };
    /**
     * @param {?} obj1
     * @param {...?} obj2
     * @return {?}
     */
    CommonsUtils.defaults = /**
     * @param {?} obj1
     * @param {...?} obj2
     * @return {?}
     */
    function (obj1) {
        var obj2 = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            obj2[_i - 1] = arguments[_i];
        }
        return _.defaultsDeep.apply(undefined, tslib_1.__spread([obj1], obj2));
    };
    /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    CommonsUtils.equals = /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    function (obj1, obj2) {
        return _.isEqual(obj1, obj2);
    };
    /**
     * @param {?} obj
     * @param {?} path
     * @param {?} value
     * @return {?}
     */
    CommonsUtils.set = /**
     * @param {?} obj
     * @param {?} path
     * @param {?} value
     * @return {?}
     */
    function (obj, path, value) {
        return _.set(obj, path, value);
    };
    /**
     * @param {?} obj
     * @param {?} path
     * @param {?=} defaultValue
     * @return {?}
     */
    CommonsUtils.get = /**
     * @param {?} obj
     * @param {?} path
     * @param {?=} defaultValue
     * @return {?}
     */
    function (obj, path, defaultValue) {
        return _.get(obj, path, defaultValue);
    };
    /**
     * @param {?} obj
     * @param {?} source
     * @return {?}
     */
    CommonsUtils.extend = /**
     * @param {?} obj
     * @param {?} source
     * @return {?}
     */
    function (obj, source) {
        return _.extend(obj, source);
    };
    /**
     * @param {?} collection
     * @return {?}
     */
    CommonsUtils.compact = /**
     * @param {?} collection
     * @return {?}
     */
    function (collection) {
        return _.compact(collection);
    };
    /**
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */
    CommonsUtils.omit = /**
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */
    function (obj, path) {
        return _.omit(obj, path);
    };
    /**
     * @param {?} obj
     * @param {?} predicate
     * @return {?}
     */
    CommonsUtils.omitBy = /**
     * @param {?} obj
     * @param {?} predicate
     * @return {?}
     */
    function (obj, predicate) {
        return _.omitBy(obj, predicate);
    };
    /**
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */
    CommonsUtils.unset = /**
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */
    function (obj, path) {
        return _.unset(obj, path);
    };
    /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    CommonsUtils.find = /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    function (collection, predicate) {
        return _.find(collection, predicate);
    };
    /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    CommonsUtils.findIndex = /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    function (collection, predicate) {
        return _.findIndex(collection, predicate);
    };
    /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    CommonsUtils.remove = /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    function (collection, predicate) {
        return _.remove(collection, predicate);
    };
    /**
     * @param {?} obj
     * @param {?} iteratee
     * @return {?}
     */
    CommonsUtils.forOwn = /**
     * @param {?} obj
     * @param {?} iteratee
     * @return {?}
     */
    function (obj, iteratee) {
        return _.forOwn(obj, iteratee);
    };
    /**
     * @param {?} obj
     * @param {?} iteratee
     * @return {?}
     */
    CommonsUtils.map = /**
     * @param {?} obj
     * @param {?} iteratee
     * @return {?}
     */
    function (obj, iteratee) {
        return _.map(obj, iteratee);
    };
    /**
     * @param {?} obj
     * @param {?} by
     * @return {?}
     */
    CommonsUtils.unique = /**
     * @param {?} obj
     * @param {?} by
     * @return {?}
     */
    function (obj, by) {
        return _.uniqBy(obj, by);
    };
    /**
     * @param {?} obj
     * @param {?} iteratees
     * @param {?=} orders
     * @return {?}
     */
    CommonsUtils.orderBy = /**
     * @param {?} obj
     * @param {?} iteratees
     * @param {?=} orders
     * @return {?}
     */
    function (obj, iteratees, orders) {
        return _.orderBy(obj, iteratees, orders);
    };
    /**
     * @param {...?} obj
     * @return {?}
     */
    CommonsUtils.union = /**
     * @param {...?} obj
     * @return {?}
     */
    function () {
        var obj = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            obj[_i] = arguments[_i];
        }
        return _.union(obj);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.flatten = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return _.flatten(obj);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.flattenDeep = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return _.flattenDeep(obj);
    };
    /**
     * @param {?} src
     * @param {?} format
     * @return {?}
     */
    CommonsUtils.format = /**
     * @param {?} src
     * @param {?} format
     * @return {?}
     */
    function (src, format) {
        return src;
    };
    /**
     * @param {?} o1
     * @param {?} o2
     * @return {?}
     */
    CommonsUtils.jsonConcat = /**
     * @param {?} o1
     * @param {?} o2
     * @return {?}
     */
    function (o1, o2) {
        for (var key in o2) {
            o1[key] = o2[key];
        }
        return o1;
    };
    /**
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    CommonsUtils.escape = /**
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    function (obj, key) {
        var _a = key, deletedItem = obj[_a], rest = tslib_1.__rest(obj, [typeof _a === "symbol" ? _a : _a + ""]);
        return rest;
    };
    /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    CommonsUtils.filter = /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    function (collection, predicate) {
        return _.filter(collection, predicate);
    };
    /**
     * @param {?} obj
     * @param {?} predicate
     * @return {?}
     */
    CommonsUtils.where = /**
     * @param {?} obj
     * @param {?} predicate
     * @return {?}
     */
    function (obj, predicate) {
        if (Object.keys(predicate).every(function (key) { return obj && obj[key] === predicate[key]; })) {
            return obj;
        }
        else {
            return null;
        }
    };
    /**
     * @param {?} s
     * @return {?}
     */
    CommonsUtils.capitalize = /**
     * @param {?} s
     * @return {?}
     */
    function (s) {
        if (s) {
            return s.charAt(0).toUpperCase() + s.slice(1);
        }
        else {
            return s;
        }
    };
    /**
     * @param {?} s
     * @param {?} vars
     * @return {?}
     */
    CommonsUtils.templateStr = /**
     * @param {?} s
     * @param {?} vars
     * @return {?}
     */
    function (s, vars) {
        /** @type {?} */
        var compiled = _.template(s);
        return compiled(vars);
    };
    /**
     * @param {?} s
     * @return {?}
     */
    CommonsUtils.isTemplateStr = /**
     * @param {?} s
     * @return {?}
     */
    function (s) {
        /** @type {?} */
        var isMatch = /.*\${.*}.*/.test(s) || /.*<%=(.*)%>.*/.test(s);
        return isMatch;
    };
    /**
     * @template T
     * @param {?} item
     * @param {?=} keyName
     * @return {?}
     */
    CommonsUtils.getArray = /**
     * @template T
     * @param {?} item
     * @param {?=} keyName
     * @return {?}
     */
    function (item, keyName) {
        var _a;
        /** @type {?} */
        var items = [];
        if (item) {
            if (CommonsUtils.isArray(item)) {
                return (/** @type {?} */ (item));
            }
            else if (CommonsUtils.isJson(item)) {
                for (var key in item) {
                    if (key) {
                        /** @type {?} */
                        var c = item[key];
                        if (keyName) {
                            c = tslib_1.__assign((_a = {}, _a[keyName] = key, _a), c);
                        }
                        items.push(c);
                    }
                }
            }
            else {
                items.push(item);
            }
        }
        return items;
    };
    /**
     * @param {?} obj
     * @param {...?} keys
     * @return {?}
     */
    CommonsUtils.removeKeys = /**
     * @param {?} obj
     * @param {...?} keys
     * @return {?}
     */
    function (obj) {
        var keys = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            keys[_i - 1] = arguments[_i];
        }
        /** @type {?} */
        var o = obj;
        while (keys.length > 0) {
            o = CommonsUtils.set(o, keys, undefined);
            CommonsUtils.unset(o, keys);
            keys.pop();
            /** @type {?} */
            var v = CommonsUtils.get(o, keys);
            if (!CommonsUtils.isEmpty(v)) {
                break;
            }
        }
        return o;
    };
    /**
     * @param {?} value
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    CommonsUtils.extract = /**
     * @param {?} value
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    function (value, from, to) {
        /** @type {?} */
        var target;
        if (value && (from !== to)) {
            if (to >= value.length) {
                target = to - value.length;
                while ((target--) + 1) {
                    value.push(undefined);
                }
            }
            value.splice(to, 0, value.splice(from, 1)[0]);
        }
    };
    /**
     * @param {?} srcArray
     * @param {?} item
     * @param {?=} index
     * @return {?}
     */
    CommonsUtils.addItem = /**
     * @param {?} srcArray
     * @param {?} item
     * @param {?=} index
     * @return {?}
     */
    function (srcArray, item, index) {
        /** @type {?} */
        var toAdd = item;
        if (!CommonsUtils.isArray(item)) {
            toAdd = [item];
        }
        if (index) {
            return [].concat(srcArray.slice(0, index), toAdd, srcArray.slice(index));
        }
        else {
            return [].concat(srcArray, toAdd);
        }
    };
    /**
     * @param {?} a
     * @param {?} index
     * @return {?}
     */
    CommonsUtils.removeByIndex = /**
     * @param {?} a
     * @param {?} index
     * @return {?}
     */
    function (a, index) {
        return [].concat(a.slice(0, index), a.slice(index + 1));
    };
    /**
     * @template T
     * @param {?} a
     * @param {?} index
     * @param {?} element
     * @return {?}
     */
    CommonsUtils.replace = /**
     * @template T
     * @param {?} a
     * @param {?} index
     * @param {?} element
     * @return {?}
     */
    function (a, index, element) {
        return [].concat(a.slice(0, index), element, a.slice(index + 1));
    };
    /**
     * @template T
     * @param {?} a
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    CommonsUtils.move = /**
     * @template T
     * @param {?} a
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    function (a, from, to) {
        /** @type {?} */
        var element = a[from];
        /** @type {?} */
        var forward = from < to;
        /** @type {?} */
        var head = a.slice(0, forward ? from : to);
        /** @type {?} */
        var mid = a.slice(forward ? from + 1 : to, forward ? to + 1 : from);
        /** @type {?} */
        var tail = a.slice(forward ? to + 1 : from + 1);
        return forward ?
            [].concat(head, mid, element, tail) :
            [].concat(head, element, mid, tail);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CommonsUtils.restoreFn = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if ((typeof value === 'string') && value.toLocaleLowerCase().trim().indexOf('function') === 0) {
            return new Function('return ' + value.replace(/_this/g, 'this')
                .replace(/__assign/g, 'Object.assign'))();
        }
        else {
            return value;
        }
    };
    /**
     * 排除key为k，value为v 的数据项
     */
    /**
     * 排除key为k，value为v 的数据项
     * @param {?} src
     * @param {?} k
     * @param {?} v
     * @return {?}
     */
    CommonsUtils.exclude = /**
     * 排除key为k，value为v 的数据项
     * @param {?} src
     * @param {?} k
     * @param {?} v
     * @return {?}
     */
    function (src, k, v) {
        /** @type {?} */
        var result = Object.keys(src).reduce(function (acc, key) {
            var _a;
            return (src[key][k] === v ? acc : tslib_1.__assign({}, acc, (_a = {}, _a[key] = src[key], _a)));
        }, {});
        return result;
    };
    /**
     * 替换src中的 {k,o} 元素 为 {k,v}
     */
    /**
     * 替换src中的 {k,o} 元素 为 {k,v}
     * @param {?} src
     * @param {?} k
     * @param {?} o
     * @param {?} v
     * @return {?}
     */
    CommonsUtils.replaceObj = /**
     * 替换src中的 {k,o} 元素 为 {k,v}
     * @param {?} src
     * @param {?} k
     * @param {?} o
     * @param {?} v
     * @return {?}
     */
    function (src, k, o, v) {
        var _a, _b;
        /** @type {?} */
        var index = _.find(src, (_a = {}, _a[k] = o, _a));
        return tslib_1.__spread(src.slice(0, index), [
            tslib_1.__assign({}, src[index], (_b = {}, _b[k] = v, _b))
        ], src.slice(index + 1));
    };
    /**
     * 合并 {} 和 []
     */
    /**
     * 合并 {} 和 []
     * @param {?} src1
     * @param {?} src2
     * @param {?} k
     * @return {?}
     */
    CommonsUtils.concat = /**
     * 合并 {} 和 []
     * @param {?} src1
     * @param {?} src2
     * @param {?} k
     * @return {?}
     */
    function (src1, src2, k) {
        return tslib_1.__assign({}, src1, src2.reduce(function (acc, item) {
            var _a;
            return (tslib_1.__assign({}, acc, (_a = {}, _a[item[k]] = item, _a)));
        }, {}));
    };
    /**
     * @param {?} json
     * @return {?}
     */
    CommonsUtils.restoreJsonFn = /**
     * @param {?} json
     * @return {?}
     */
    function (json) {
        /** @type {?} */
        var jsonStr;
        if (typeof json === 'string') {
            jsonStr = json;
        }
        else {
            jsonStr = CommonsUtils.stringify(json);
        }
        return JSON.parse(jsonStr, function (key, value) { return CommonsUtils.restoreFn(value); });
    };
    /**
     * @param {?} json
     * @return {?}
     */
    CommonsUtils.stringify = /**
     * @param {?} json
     * @return {?}
     */
    function (json) {
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        function replacer(key, value) {
            if (typeof value === 'function') {
                return value.toString();
            }
            else {
                return value;
            }
        }
        return JSON.stringify(json, replacer);
    };
    /**
     * @param {?} str
     * @return {?}
     */
    CommonsUtils.hash = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var hash = 0;
        for (var i = 0; i < str.length; i++) {
            /** @type {?} */
            var character = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + character;
            hash = hash & hash; // Convert to 32bit integer
        }
        return hash;
    };
    /**
     * 根据options定义，转换src
     *  options:{
     *    src-key: tar-key | {key:tar-key,options:{}} | Function
     *  }
     */
    /**
     * 根据options定义，转换src
     *  options:{
     *    src-key: tar-key | {key:tar-key,options:{}} | Function
     *  }
     * @param {?} src
     * @param {?} options
     * @return {?}
     */
    CommonsUtils.adaptObject = /**
     * 根据options定义，转换src
     *  options:{
     *    src-key: tar-key | {key:tar-key,options:{}} | Function
     *  }
     * @param {?} src
     * @param {?} options
     * @return {?}
     */
    function (src, options) {
        if (CommonsUtils.isArray(src)) {
            return CommonsUtils.adaptArray(src, options);
        }
        else {
            return CommonsUtils.adaptJson(src, options);
        }
    };
    /**
     * @param {?} src
     * @param {?} options
     * @return {?}
     */
    CommonsUtils.adaptJson = /**
     * @param {?} src
     * @param {?} options
     * @return {?}
     */
    function (src, options) {
        /** @type {?} */
        var result = {};
        Object.keys(options).forEach(function (key) {
            /** @type {?} */
            var srcValue = CommonsUtils.get(src, key);
            if (srcValue) {
                if (CommonsUtils.isArray(srcValue)) {
                    /** @type {?} */
                    var tarKey = null;
                    if (CommonsUtils.isString(options[key])) {
                        tarKey = options[key];
                    }
                    else {
                        tarKey = options[key]['key'];
                    }
                    CommonsUtils.set(result, tarKey, CommonsUtils.adaptArray(srcValue, options[key]['options'] || options));
                }
                else if (CommonsUtils.isJson(srcValue)) {
                    CommonsUtils.set(result, options[key], CommonsUtils.adaptJson(srcValue, options[key]['options'] || {}));
                }
                else {
                    if (CommonsUtils.isString(options[key])) {
                        CommonsUtils.set(result, options[key], srcValue);
                    }
                    else if (CommonsUtils.isFunction(options[key])) {
                        CommonsUtils.set(result, options[key], options[key].apply(undefined, src, options));
                    }
                }
            }
        });
        return result;
    };
    /**
     * @param {?} src
     * @param {?} options
     * @return {?}
     */
    CommonsUtils.adaptArray = /**
     * @param {?} src
     * @param {?} options
     * @return {?}
     */
    function (src, options) {
        /** @type {?} */
        var result = [];
        src.forEach(function (item) {
            result.push(CommonsUtils.adaptObject(item, options));
        });
        return result;
    };
    /**
     * @param {?} dateString
     * @return {?}
     */
    CommonsUtils.getAge = /**
     * @param {?} dateString
     * @return {?}
     */
    function (dateString) {
        /** @type {?} */
        var today = new Date();
        /** @type {?} */
        var birthDate = new Date(dateString);
        /** @type {?} */
        var age = today.getFullYear() - birthDate.getFullYear();
        /** @type {?} */
        var m = today.getMonth() - birthDate.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
            age--;
        }
        return age;
    };
    /**
     * @param {?} target
     * @return {?}
     */
    CommonsUtils.toDate = /**
     * @param {?} target
     * @return {?}
     */
    function (target) {
        if (target instanceof Date) {
            return target;
        }
        if (CommonsUtils.isString(target)) {
            /** @type {?} */
            var dateNumber = Date.parse(target);
            return !isNaN(dateNumber) ? new Date(dateNumber) : null;
        }
        return null;
    };
    /**
     * @param {?} tar
     * @param {?=} date
     * @return {?}
     */
    CommonsUtils.isBefore = /**
     * @param {?} tar
     * @param {?=} date
     * @return {?}
     */
    function (tar, date) {
        if (date === void 0) { date = new Date(); }
        /** @type {?} */
        var src = CommonsUtils.toDate(date);
        /** @type {?} */
        var original = CommonsUtils.toDate(tar);
        return !!(original && src && original < src);
    };
    /**
     * @param {?} tar
     * @param {?=} date
     * @return {?}
     */
    CommonsUtils.isAfter = /**
     * @param {?} tar
     * @param {?=} date
     * @return {?}
     */
    function (tar, date) {
        if (date === void 0) { date = new Date(); }
        /** @type {?} */
        var src = CommonsUtils.toDate(date);
        /** @type {?} */
        var original = CommonsUtils.toDate(tar);
        return !!(original && src && original > src);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.toString = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        switch (CommonsUtils.getVarType(obj)) {
            case VarType.NULL:
            case VarType.UNDEFINED:
                return '';
            case VarType.ARRAY: {
                /** @type {?} */
                var a_1 = [];
                obj.forEach(function (o) { return a_1.push(CommonsUtils.toString(o)); });
                return "[" + a_1.join(',') + "]";
            }
            case VarType.JSON:
                return CommonsUtils.stringify(obj);
            default:
                return obj.toString();
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.isEmpty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        switch (CommonsUtils.getVarType(obj)) {
            case VarType.NULL:
            case VarType.UNDEFINED:
                return true;
            case VarType.STRING:
                return obj.length === 0;
            case VarType.ARRAY:
                return ((/** @type {?} */ (obj))).length === 0;
            case VarType.JSON:
                return Object.keys(obj).length === 0;
            default:
                return obj.toString().length === 0;
        }
    };
    /**
     * @param {?} attributes
     * @param {?} keys
     * @return {?}
     */
    CommonsUtils.convertToBoolean = /**
     * @param {?} attributes
     * @param {?} keys
     * @return {?}
     */
    function (attributes, keys) {
        /** @type {?} */
        var l_attributes = tslib_1.__assign({}, attributes);
        if (keys && keys.length > 0) {
            keys.forEach(function (key) {
                if (l_attributes.hasOwnProperty(key) && l_attributes[key] === '') {
                    l_attributes[key] = true;
                }
            });
        }
        return l_attributes;
    };
    /**
     * @param {?} path
     * @return {?}
     */
    CommonsUtils.flatPath = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        if (CommonsUtils.isArray(path)) {
            return ((/** @type {?} */ (path))).join('-').replace('.', '-');
        }
        return ((/** @type {?} */ (path))).replace('.', '-');
    };
    /**
     * @param {?} arr
     * @param {?=} seperator
     * @return {?}
     */
    CommonsUtils.join = /**
     * @param {?} arr
     * @param {?=} seperator
     * @return {?}
     */
    function (arr, seperator) {
        /** @type {?} */
        var joiner = seperator || ',';
        if (!arr) {
            return '';
        }
        if (!CommonsUtils.isArray(arr)) {
            return arr;
        }
        switch (arr.length) {
            case 0:
                return '';
            case 1:
                return arr[0];
            default:
                return arr.join(joiner);
        }
    };
    /**
     * @param {?} obj
     * @param {...?} predicates
     * @return {?}
     */
    CommonsUtils.deepFind = /**
     * @param {?} obj
     * @param {...?} predicates
     * @return {?}
     */
    function (obj) {
        var predicates = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            predicates[_i - 1] = arguments[_i];
        }
        /** @type {?} */
        var _find = function (o) {
            if (o instanceof Array) {
                ((/** @type {?} */ (o))).forEach(function (i) { return _find(i); });
            }
            else {
                for (var prop in o) {
                    if (o[prop] instanceof Array) {
                        _find(o[prop]);
                    }
                }
                predicates.some(function (predicate) {
                    /** @type {?} */
                    var found = CommonsUtils.where(o, predicate);
                    if (found !== null) {
                        foundResults.push(o);
                    }
                    return found !== null;
                });
            }
        };
        /** @type {?} */
        var foundResults = [];
        _find(obj);
        return foundResults;
    };
    /**
     * @param {?} milliseconds
     * @return {?}
     */
    CommonsUtils.sleep = /**
     * @param {?} milliseconds
     * @return {?}
     */
    function (milliseconds) {
        /** @type {?} */
        var start = new Date().getTime();
        for (var i = 0; i < 1e7; i++) {
            if ((new Date().getTime() - start) > milliseconds) {
                break;
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CommonsUtils.getArrayValue = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (!data) {
            return data;
        }
        if (CommonsUtils.isArray(data)) {
            return data;
        }
        else if (CommonsUtils.isString(data)) {
            return ((/** @type {?} */ (data))).split(',');
        }
        else {
            return [data];
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CommonsUtils.getText = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (CommonsUtils.isArray(data)) {
            return ((/** @type {?} */ (data))).map(function (v) { return CommonsUtils.getText(v); }).join(',');
        }
        else if (CommonsUtils.isJson(data)) {
            return JSON.stringify(data);
        }
        else if (CommonsUtils.isBoolean(data)) {
            return data ? '是' : '否';
        }
        else {
            return data;
        }
    };
    /**
     * @param {?} exp
     * @param {...?} context
     * @return {?}
     */
    CommonsUtils.getValue = /**
     * @param {?} exp
     * @param {...?} context
     * @return {?}
     */
    function (exp) {
        var context = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            context[_i - 1] = arguments[_i];
        }
        /** @type {?} */
        var fn = exp && (exp['method'] || exp);
        if (CommonsUtils.isFunction(fn)) {
            return (/** @type {?} */ (fn.apply(undefined, context)));
        }
        if (CommonsUtils.isString(exp) && exp.startsWith('@')) {
            return CommonsUtils.get(context && context[0], exp.substr(1));
        }
        return exp;
    };
    /**
     * @param {?} obj
     * @param {?} prop
     * @param {?} defaultValue
     * @return {?}
     */
    CommonsUtils.defineHiddenProp = /**
     * @param {?} obj
     * @param {?} prop
     * @param {?} defaultValue
     * @return {?}
     */
    function (obj, prop, defaultValue) {
        Object.defineProperty(obj, prop, { enumerable: false, writable: true, configurable: true });
        obj[prop] = defaultValue;
    };
    /**
     * @param {?} str
     * @param {?} size
     * @return {?}
     */
    CommonsUtils.splitBySize = /**
     * @param {?} str
     * @param {?} size
     * @return {?}
     */
    function (str, size) {
        /** @type {?} */
        var results = [];
        /** @type {?} */
        var i = size;
        while (i <= str.length) {
            results.push(str.substr(0, i));
            i += size;
        }
        return results;
    };
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    CommonsUtils.resolveUrl = /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    function (url, params) {
        if (params === void 0) { params = {}; }
        /** @type {?} */
        var _url = Object.keys(params)
            .reduce(function (acc, key) { return acc.replace(":" + key, params[key]); }, url);
        return _url;
    };
    return CommonsUtils;
}());
export { CommonsUtils };
//# sourceMappingURL=data:application/json;base64,