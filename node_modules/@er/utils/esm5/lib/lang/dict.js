/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ObjectUtils } from './objects';
/**
 * @record
 * @template V
 */
export function Dict() { }
/**
 * @template V
 * @return {?}
 */
export function createDict() {
    return Object.create(null);
}
/**
 * @template V
 * @param {?} dict
 * @return {?}
 */
export function copyDict(dict) {
    return Object.assign(createDict(), dict);
}
/**
 * @param {?} dict
 * @param {?} key
 * @return {?}
 */
export function hasKey(dict, key) {
    return Object.prototype.hasOwnProperty.call(dict, key.toString());
}
/**
 * @template T, R
 * @param {?} dict
 * @param {?} map
 * @return {?}
 */
export function mapValues(dict, map) {
    var e_1, _a;
    /** @type {?} */
    var ret = createDict();
    /** @type {?} */
    var changed = false;
    try {
        for (var _b = tslib_1.__values(Object.keys(dict)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            ret[key] = map(dict[key]);
            if ((/** @type {?} */ (ret[key])) !== dict[key]) {
                changed = true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return changed ? ret : (/** @type {?} */ (dict));
}
/**
 * @template V
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
export function union(target, source) {
    return ObjectUtils.patch(target, source);
}
/**
 * @template V
 * @param {?} dict
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
export function setKey(dict, key, value) {
    if (dict[key] === value) {
        return dict;
    }
    /** @type {?} */
    var ret = copyDict(dict);
    ret[key] = value;
    return ret;
}
/**
 * @template V
 * @param {?} dict
 * @param {...?} keys
 * @return {?}
 */
export function removeKey(dict) {
    var keys = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        keys[_i - 1] = arguments[_i];
    }
    var e_2, _a;
    /** @type {?} */
    var ret = copyDict(dict);
    /** @type {?} */
    var changed = false;
    try {
        for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
            var key = keys_1_1.value;
            if (hasKey(ret, key.toString())) {
                changed = true;
                delete ret[key];
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return changed ? ret : dict;
}
/**
 * @template V
 * @param {?} keys
 * @param {?} values
 * @return {?}
 */
export function fromKeys(keys, values) {
    var e_3, _a;
    /** @type {?} */
    var ret = createDict();
    /** @type {?} */
    var isFunction = typeof values === 'function';
    try {
        for (var keys_2 = tslib_1.__values(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
            var key = keys_2_1.value;
            ret[key] = isFunction ? ((/** @type {?} */ (values)))(key) : values;
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (keys_2_1 && !keys_2_1.done && (_a = keys_2.return)) _a.call(keys_2);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGljdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci91dGlscy8iLCJzb3VyY2VzIjpbImxpYi9sYW5nL2RpY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDOzs7OztBQUd0QywwQkFFQzs7Ozs7QUFFRCxNQUFNLFVBQVUsVUFBVTtJQUN4QixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDN0IsQ0FBQzs7Ozs7O0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBSSxJQUFhO0lBQ3ZDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM5QyxDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsTUFBTSxDQUFDLElBQWUsRUFBRSxHQUFRO0lBQzlDLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNwRSxDQUFDOzs7Ozs7O0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBTyxJQUFhLEVBQ2IsR0FBb0I7OztRQUM1QyxHQUFHLEdBQUcsVUFBVSxFQUFLOztRQUV2QixPQUFPLEdBQUcsS0FBSzs7UUFFbkIsS0FBa0IsSUFBQSxLQUFBLGlCQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUEsZ0JBQUEsNEJBQUU7WUFBaEMsSUFBTSxHQUFHLFdBQUE7WUFDWixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzFCLElBQUksbUJBQUEsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFPLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNqQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2FBQ2hCO1NBQ0Y7Ozs7Ozs7OztJQUVELE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLG1CQUFBLElBQUksRUFBTyxDQUFDO0FBQ3JDLENBQUM7Ozs7Ozs7QUFHRCxNQUFNLFVBQVUsS0FBSyxDQUFJLE1BQWUsRUFBRSxNQUFlO0lBQ3ZELE9BQU8sV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDM0MsQ0FBQzs7Ozs7Ozs7QUFHRCxNQUFNLFVBQVUsTUFBTSxDQUFJLElBQWEsRUFBRSxHQUFRLEVBQUUsS0FBUTtJQUN6RCxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLEVBQUU7UUFDdkIsT0FBTyxJQUFJLENBQUM7S0FDYjs7UUFFSyxHQUFHLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztJQUUxQixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBRWpCLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQzs7Ozs7OztBQUVELE1BQU0sVUFBVSxTQUFTLENBQUksSUFBYTtJQUFFLGNBQWM7U0FBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1FBQWQsNkJBQWM7Ozs7UUFDbEQsR0FBRyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7O1FBRXRCLE9BQU8sR0FBRyxLQUFLOztRQUVuQixLQUFrQixJQUFBLFNBQUEsaUJBQUEsSUFBSSxDQUFBLDBCQUFBLDRDQUFFO1lBQW5CLElBQU0sR0FBRyxpQkFBQTtZQUNaLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRTtnQkFDL0IsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDZixPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNqQjtTQUNGOzs7Ozs7Ozs7SUFFRCxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDOUIsQ0FBQzs7Ozs7OztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUksSUFBVyxFQUNYLE1BQTZCOzs7UUFDakQsR0FBRyxHQUFHLFVBQVUsRUFBSzs7UUFFckIsVUFBVSxHQUFHLE9BQU8sTUFBTSxLQUFLLFVBQVU7O1FBRS9DLEtBQWtCLElBQUEsU0FBQSxpQkFBQSxJQUFJLENBQUEsMEJBQUEsNENBQUU7WUFBbkIsSUFBTSxHQUFHLGlCQUFBO1lBQ1osR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBQSxNQUFNLEVBQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7U0FDdkQ7Ozs7Ozs7OztJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T2JqZWN0VXRpbHN9IGZyb20gJy4vb2JqZWN0cyc7XG5cblxuZXhwb3J0IGludGVyZmFjZSBEaWN0PFY+IHtcbiAgW2tleTogc3RyaW5nXTogVjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURpY3Q8Vj4oKTogRGljdDxWPiB7XG4gIHJldHVybiBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weURpY3Q8Vj4oZGljdDogRGljdDxWPik6IERpY3Q8Vj4ge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihjcmVhdGVEaWN0PFY+KCksIGRpY3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzS2V5KGRpY3Q6IERpY3Q8YW55Piwga2V5OiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkaWN0LCBrZXkudG9TdHJpbmcoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXBWYWx1ZXM8VCwgUj4oZGljdDogRGljdDxUPixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiAodmFsdWU6IFQpID0+IFIpOiBEaWN0PFI+IHtcbiAgY29uc3QgcmV0ID0gY3JlYXRlRGljdDxSPigpO1xuXG4gIGxldCBjaGFuZ2VkID0gZmFsc2U7XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoZGljdCkpIHtcbiAgICByZXRba2V5XSA9IG1hcChkaWN0W2tleV0pO1xuICAgIGlmIChyZXRba2V5XSBhcyBhbnkgIT09IGRpY3Rba2V5XSkge1xuICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNoYW5nZWQgPyByZXQgOiBkaWN0IGFzIGFueTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gdW5pb248Vj4odGFyZ2V0OiBEaWN0PFY+LCBzb3VyY2U6IERpY3Q8Vj4pOiBEaWN0PFY+IHtcbiAgcmV0dXJuIE9iamVjdFV0aWxzLnBhdGNoKHRhcmdldCwgc291cmNlKTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gc2V0S2V5PFY+KGRpY3Q6IERpY3Q8Vj4sIGtleTogYW55LCB2YWx1ZTogVik6IERpY3Q8Vj4ge1xuICBpZiAoZGljdFtrZXldID09PSB2YWx1ZSkge1xuICAgIHJldHVybiBkaWN0O1xuICB9XG5cbiAgY29uc3QgcmV0ID0gY29weURpY3QoZGljdCk7XG5cbiAgcmV0W2tleV0gPSB2YWx1ZTtcblxuICByZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlS2V5PFY+KGRpY3Q6IERpY3Q8Vj4sIC4uLmtleXM6IGFueVtdKTogRGljdDxWPiB7XG4gIGNvbnN0IHJldCA9IGNvcHlEaWN0KGRpY3QpO1xuXG4gIGxldCBjaGFuZ2VkID0gZmFsc2U7XG5cbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgIGlmIChoYXNLZXkocmV0LCBrZXkudG9TdHJpbmcoKSkpIHtcbiAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgZGVsZXRlIHJldFtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjaGFuZ2VkID8gcmV0IDogZGljdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21LZXlzPFY+KGtleXM6IGFueVtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogViB8ICgoa2V5OiBhbnkpID0+IFYpKTogRGljdDxWPiB7XG4gIGNvbnN0IHJldCA9IGNyZWF0ZURpY3Q8Vj4oKTtcblxuICBjb25zdCBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbHVlcyA9PT0gJ2Z1bmN0aW9uJztcblxuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgcmV0W2tleV0gPSBpc0Z1bmN0aW9uID8gKHZhbHVlcyBhcyBhbnkpKGtleSkgOiB2YWx1ZXM7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuIl19