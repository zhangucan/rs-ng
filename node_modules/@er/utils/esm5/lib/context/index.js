/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { StateNames } from '@er/types';
import { CommonsUtils } from '../comm';
import { DateUtils } from '../date';
import { StatesUtils } from '../states';
var ContextUtils = /** @class */ (function () {
    function ContextUtils() {
    }
    /**
     * @param {?=} date
     * @return {?}
     */
    ContextUtils.context = /**
     * @param {?=} date
     * @return {?}
     */
    function (date) {
        return tslib_1.__assign({ now: DateUtils.getFormattedDateTime(), today: DateUtils.getFormattedDate(), year: DateUtils.getYear(date), lastYear: DateUtils.getYear(date) - 1, month: DateUtils.getMonth(date), lastMonth: DateUtils.getLastMonth(), day: DateUtils.getDay(date), yesterday: DateUtils.getYesterday() }, (/** @type {?} */ (StatesUtils.getValue(StateNames.user))) || {});
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ContextUtils.get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return ContextUtils.context()[key] || '';
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ContextUtils.resolveVariables = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var resolved;
        if (CommonsUtils.isJson(data)) {
            resolved = ContextUtils.resolveJson(data);
        }
        else if (CommonsUtils.isArray(data)) {
            resolved = ContextUtils.resolveArray(data);
        }
        else if (CommonsUtils.isString(data)) {
            resolved = ContextUtils.resolveValue(data);
        }
        else {
            resolved = data;
        }
        return resolved;
    };
    /**
     * @private
     * @param {?} template
     * @return {?}
     */
    ContextUtils.resolveValue = /**
     * @private
     * @param {?} template
     * @return {?}
     */
    function (template) {
        /** @type {?} */
        var resolved = template;
        if (CommonsUtils.isTemplateStr(template)) {
            resolved = CommonsUtils.templateStr(template, ContextUtils.context());
        }
        return resolved;
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    ContextUtils.resolveJson = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var resolved = {};
        for (var prop in data) {
            if (data[prop] !== undefined) {
                if (CommonsUtils.isJson(data[prop])) {
                    resolved[prop] = ContextUtils.resolveJson(data[prop]);
                }
                else if (CommonsUtils.isArray(data[prop])) {
                    resolved[prop] = ContextUtils.resolveArray(data[prop]);
                }
                else if (CommonsUtils.isString(data[prop])) {
                    resolved[prop] = ContextUtils.resolveValue(data[prop]);
                }
                else {
                    resolved[prop] = data[prop];
                }
            }
        }
        return resolved;
    };
    /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    ContextUtils.resolveArray = /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    function (arr) {
        /** @type {?} */
        var resolved = [];
        arr.forEach(function (a) { return resolved.push(ContextUtils.resolveVariables(a)); });
        return resolved;
    };
    return ContextUtils;
}());
export { ContextUtils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdXRpbHMvIiwic291cmNlcyI6WyJsaWIvY29udGV4dC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQU8sTUFBTSxXQUFXLENBQUM7QUFDM0MsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUNyQyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQ2xDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFdEM7SUFBQTtJQWlFQSxDQUFDOzs7OztJQS9EUSxvQkFBTzs7OztJQUFkLFVBQWUsSUFBSztRQUNsQiwwQkFDRSxHQUFHLEVBQUUsU0FBUyxDQUFDLG9CQUFvQixFQUFFLEVBQ3JDLEtBQUssRUFBRSxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsRUFDbkMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQzdCLFFBQVEsRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFDckMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQy9CLFNBQVMsRUFBRSxTQUFTLENBQUMsWUFBWSxFQUFFLEVBQ25DLEdBQUcsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUMzQixTQUFTLEVBQUUsU0FBUyxDQUFDLFlBQVksRUFBRSxJQUNoQyxtQkFBTSxXQUFXLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBQSxJQUFJLEVBQUUsRUFDcEQ7SUFDSixDQUFDOzs7OztJQUVNLGdCQUFHOzs7O0lBQVYsVUFBVyxHQUFHO1FBQ1osT0FBTyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNDLENBQUM7Ozs7O0lBRU0sNkJBQWdCOzs7O0lBQXZCLFVBQXdCLElBQUk7O1lBQ3RCLFFBQVE7UUFDWixJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDN0IsUUFBUSxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0M7YUFBTSxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDckMsUUFBUSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUM7YUFBTSxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEMsUUFBUSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUM7YUFBTTtZQUNMLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDakI7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDOzs7Ozs7SUFFYyx5QkFBWTs7Ozs7SUFBM0IsVUFBNEIsUUFBZ0I7O1lBQ3RDLFFBQVEsR0FBRyxRQUFRO1FBQ3ZCLElBQUksWUFBWSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN4QyxRQUFRLEdBQUcsWUFBWSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDdkU7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDOzs7Ozs7SUFFYyx3QkFBVzs7Ozs7SUFBMUIsVUFBMkIsSUFBUTs7WUFDM0IsUUFBUSxHQUFHLEVBQUU7UUFDbkIsS0FBSyxJQUFNLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDdkIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO2dCQUM1QixJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7b0JBQ25DLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2lCQUN2RDtxQkFBTSxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7b0JBQzNDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2lCQUN4RDtxQkFBTSxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7b0JBQzVDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2lCQUN4RDtxQkFBTTtvQkFDTCxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUM3QjthQUNGO1NBQ0Y7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDOzs7Ozs7SUFFYyx5QkFBWTs7Ozs7SUFBM0IsVUFBNEIsR0FBVTs7WUFDOUIsUUFBUSxHQUFHLEVBQUU7UUFDbkIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQS9DLENBQStDLENBQUMsQ0FBQztRQUNsRSxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBQ0gsbUJBQUM7QUFBRCxDQUFDLEFBakVELElBaUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdGF0ZU5hbWVzLCBVc2VyfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb21tb25zVXRpbHN9IGZyb20gJy4uL2NvbW0nO1xuaW1wb3J0IHtEYXRlVXRpbHN9IGZyb20gJy4uL2RhdGUnO1xuaW1wb3J0IHtTdGF0ZXNVdGlsc30gZnJvbSAnLi4vc3RhdGVzJztcblxuZXhwb3J0IGNsYXNzIENvbnRleHRVdGlscyB7XG5cbiAgc3RhdGljIGNvbnRleHQoZGF0ZT8pOiB7fSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5vdzogRGF0ZVV0aWxzLmdldEZvcm1hdHRlZERhdGVUaW1lKCksXG4gICAgICB0b2RheTogRGF0ZVV0aWxzLmdldEZvcm1hdHRlZERhdGUoKSxcbiAgICAgIHllYXI6IERhdGVVdGlscy5nZXRZZWFyKGRhdGUpLFxuICAgICAgbGFzdFllYXI6IERhdGVVdGlscy5nZXRZZWFyKGRhdGUpIC0gMSxcbiAgICAgIG1vbnRoOiBEYXRlVXRpbHMuZ2V0TW9udGgoZGF0ZSksXG4gICAgICBsYXN0TW9udGg6IERhdGVVdGlscy5nZXRMYXN0TW9udGgoKSxcbiAgICAgIGRheTogRGF0ZVV0aWxzLmdldERheShkYXRlKSxcbiAgICAgIHllc3RlcmRheTogRGF0ZVV0aWxzLmdldFllc3RlcmRheSgpLFxuICAgICAgLi4uPFVzZXI+U3RhdGVzVXRpbHMuZ2V0VmFsdWUoU3RhdGVOYW1lcy51c2VyKSB8fCB7fVxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0KGtleSkge1xuICAgIHJldHVybiBDb250ZXh0VXRpbHMuY29udGV4dCgpW2tleV0gfHwgJyc7XG4gIH1cblxuICBzdGF0aWMgcmVzb2x2ZVZhcmlhYmxlcyhkYXRhKSB7XG4gICAgbGV0IHJlc29sdmVkO1xuICAgIGlmIChDb21tb25zVXRpbHMuaXNKc29uKGRhdGEpKSB7XG4gICAgICByZXNvbHZlZCA9IENvbnRleHRVdGlscy5yZXNvbHZlSnNvbihkYXRhKTtcbiAgICB9IGVsc2UgaWYgKENvbW1vbnNVdGlscy5pc0FycmF5KGRhdGEpKSB7XG4gICAgICByZXNvbHZlZCA9IENvbnRleHRVdGlscy5yZXNvbHZlQXJyYXkoZGF0YSk7XG4gICAgfSBlbHNlIGlmIChDb21tb25zVXRpbHMuaXNTdHJpbmcoZGF0YSkpIHtcbiAgICAgIHJlc29sdmVkID0gQ29udGV4dFV0aWxzLnJlc29sdmVWYWx1ZShkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzb2x2ZWQgPSBkYXRhO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyByZXNvbHZlVmFsdWUodGVtcGxhdGU6IHN0cmluZykge1xuICAgIGxldCByZXNvbHZlZCA9IHRlbXBsYXRlO1xuICAgIGlmIChDb21tb25zVXRpbHMuaXNUZW1wbGF0ZVN0cih0ZW1wbGF0ZSkpIHtcbiAgICAgIHJlc29sdmVkID0gQ29tbW9uc1V0aWxzLnRlbXBsYXRlU3RyKHRlbXBsYXRlLCBDb250ZXh0VXRpbHMuY29udGV4dCgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc29sdmVkO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcmVzb2x2ZUpzb24oZGF0YToge30pIHtcbiAgICBjb25zdCByZXNvbHZlZCA9IHt9O1xuICAgIGZvciAoY29uc3QgcHJvcCBpbiBkYXRhKSB7XG4gICAgICBpZiAoZGF0YVtwcm9wXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChDb21tb25zVXRpbHMuaXNKc29uKGRhdGFbcHJvcF0pKSB7XG4gICAgICAgICAgcmVzb2x2ZWRbcHJvcF0gPSBDb250ZXh0VXRpbHMucmVzb2x2ZUpzb24oZGF0YVtwcm9wXSk7XG4gICAgICAgIH0gZWxzZSBpZiAoQ29tbW9uc1V0aWxzLmlzQXJyYXkoZGF0YVtwcm9wXSkpIHtcbiAgICAgICAgICByZXNvbHZlZFtwcm9wXSA9IENvbnRleHRVdGlscy5yZXNvbHZlQXJyYXkoZGF0YVtwcm9wXSk7XG4gICAgICAgIH0gZWxzZSBpZiAoQ29tbW9uc1V0aWxzLmlzU3RyaW5nKGRhdGFbcHJvcF0pKSB7XG4gICAgICAgICAgcmVzb2x2ZWRbcHJvcF0gPSBDb250ZXh0VXRpbHMucmVzb2x2ZVZhbHVlKGRhdGFbcHJvcF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmVkW3Byb3BdID0gZGF0YVtwcm9wXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyByZXNvbHZlQXJyYXkoYXJyOiBhbnlbXSkge1xuICAgIGNvbnN0IHJlc29sdmVkID0gW107XG4gICAgYXJyLmZvckVhY2goYSA9PiByZXNvbHZlZC5wdXNoKENvbnRleHRVdGlscy5yZXNvbHZlVmFyaWFibGVzKGEpKSk7XG4gICAgcmV0dXJuIHJlc29sdmVkO1xuICB9XG59XG4iXX0=