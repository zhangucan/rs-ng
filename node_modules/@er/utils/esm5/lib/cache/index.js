/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CacheUtils = /** @class */ (function () {
    function CacheUtils() {
    }
    /**
     * @return {?}
     */
    CacheUtils.getSeq = /**
     * @return {?}
     */
    function () {
        return ++CacheUtils.seq;
    };
    /**
     * @return {?}
     */
    CacheUtils.getModuleId = /**
     * @return {?}
     */
    function () {
        return ++CacheUtils.moduleId;
    };
    /**
     * @template T
     * @param {?} type
     * @param {?} key
     * @return {?}
     */
    CacheUtils.get = /**
     * @template T
     * @param {?} type
     * @param {?} key
     * @return {?}
     */
    function (type, key) {
        /** @type {?} */
        var typeCache = CacheUtils.getTypeCache(type);
        if (!typeCache) {
            return null;
        }
        return typeCache.get(key);
    };
    /**
     * @template T
     * @param {?} type
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    CacheUtils.put = /**
     * @template T
     * @param {?} type
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    function (type, key, data) {
        /** @type {?} */
        var typeCache = CacheUtils.getTypeCache(type);
        if (!typeCache) {
            typeCache = new Map();
            CacheUtils.cache.set(type, typeCache);
        }
        typeCache.set(key, data);
    };
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    CacheUtils.getTypeCache = /**
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return CacheUtils.cache.get(type);
    };
    CacheUtils.cache = new Map();
    CacheUtils.seq = 0;
    CacheUtils.moduleId = 0;
    return CacheUtils;
}());
export { CacheUtils };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CacheUtils.cache;
    /**
     * @type {?}
     * @private
     */
    CacheUtils.seq;
    /**
     * @type {?}
     * @private
     */
    CacheUtils.moduleId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdXRpbHMvIiwic291cmNlcyI6WyJsaWIvY2FjaGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0lBQUE7SUFvQ0EsQ0FBQzs7OztJQTVCUSxpQkFBTTs7O0lBQWI7UUFDRSxPQUFPLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQztJQUMxQixDQUFDOzs7O0lBRU0sc0JBQVc7OztJQUFsQjtRQUNFLE9BQU8sRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDO0lBQy9CLENBQUM7Ozs7Ozs7SUFFTSxjQUFHOzs7Ozs7SUFBVixVQUFvQixJQUFZLEVBQUUsR0FBUTs7WUFDbEMsU0FBUyxHQUFxQixVQUFVLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztRQUNqRSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDOzs7Ozs7OztJQUVNLGNBQUc7Ozs7Ozs7SUFBVixVQUFvQixJQUFZLEVBQUUsR0FBUSxFQUFFLElBQU87O1lBQzdDLFNBQVMsR0FBRyxVQUFVLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztRQUM3QyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsU0FBUyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7WUFDdEIsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3ZDO1FBQ0QsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7Ozs7O0lBRWMsdUJBQVk7Ozs7O0lBQTNCLFVBQTRCLElBQVk7UUFDdEMsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBakNjLGdCQUFLLEdBQStCLElBQUksR0FBRyxFQUFFLENBQUM7SUFFOUMsY0FBRyxHQUFHLENBQUMsQ0FBQztJQUVSLG1CQUFRLEdBQUcsQ0FBQyxDQUFDO0lBOEI5QixpQkFBQztDQUFBLEFBcENELElBb0NDO1NBcENZLFVBQVU7Ozs7OztJQUVyQixpQkFBNkQ7Ozs7O0lBRTdELGVBQXVCOzs7OztJQUV2QixvQkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQ2FjaGVVdGlscyB7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgY2FjaGU6IE1hcDxzdHJpbmcsIE1hcDxhbnksIGFueT4+ID0gbmV3IE1hcCgpO1xuXG4gIHByaXZhdGUgc3RhdGljIHNlcSA9IDA7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgbW9kdWxlSWQgPSAwO1xuXG4gIHN0YXRpYyBnZXRTZXEoKSB7XG4gICAgcmV0dXJuICsrQ2FjaGVVdGlscy5zZXE7XG4gIH1cblxuICBzdGF0aWMgZ2V0TW9kdWxlSWQoKSB7XG4gICAgcmV0dXJuICsrQ2FjaGVVdGlscy5tb2R1bGVJZDtcbiAgfVxuXG4gIHN0YXRpYyBnZXQ8VCA9IGFueT4odHlwZTogc3RyaW5nLCBrZXk6IGFueSk6IFQge1xuICAgIGNvbnN0IHR5cGVDYWNoZTogTWFwPHN0cmluZywgYW55PiA9IENhY2hlVXRpbHMuZ2V0VHlwZUNhY2hlKHR5cGUpO1xuICAgIGlmICghdHlwZUNhY2hlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVDYWNoZS5nZXQoa2V5KTtcbiAgfVxuXG4gIHN0YXRpYyBwdXQ8VCA9IGFueT4odHlwZTogc3RyaW5nLCBrZXk6IGFueSwgZGF0YTogVCkge1xuICAgIGxldCB0eXBlQ2FjaGUgPSBDYWNoZVV0aWxzLmdldFR5cGVDYWNoZSh0eXBlKTtcbiAgICBpZiAoIXR5cGVDYWNoZSkge1xuICAgICAgdHlwZUNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgQ2FjaGVVdGlscy5jYWNoZS5zZXQodHlwZSwgdHlwZUNhY2hlKTtcbiAgICB9XG4gICAgdHlwZUNhY2hlLnNldChrZXksIGRhdGEpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgZ2V0VHlwZUNhY2hlKHR5cGU6IHN0cmluZyk6IE1hcDxhbnksIGFueT4ge1xuICAgIHJldHVybiBDYWNoZVV0aWxzLmNhY2hlLmdldCh0eXBlKTtcbiAgfVxufVxuIl19