/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DEFAULT_TREE_NODE_KEYS } from '@er/types';
import { CommonsUtils } from '../comm';
import { DataItemUtils } from '../data-item';
import { StatesUtils } from '../states';
var TreeUtils = /** @class */ (function () {
    function TreeUtils() {
    }
    /**
     * @param {?} dataItems
     * @param {?} keyMap
     * @param {?=} root
     * @param {?=} lazy
     * @return {?}
     */
    TreeUtils.transNodes = /**
     * @param {?} dataItems
     * @param {?} keyMap
     * @param {?=} root
     * @param {?=} lazy
     * @return {?}
     */
    function (dataItems, keyMap, root, lazy) {
        /** @type {?} */
        var treeKeys = Object.keys(keyMap.node).map(function (key) { return keyMap.node[key]; });
        /** @type {?} */
        var nodes;
        /** @type {?} */
        var rootNode;
        if (keyMap.src.levelIdLength) {
            nodes = CommonsUtils.orderBy(dataItems, [keyMap.src.orderKey || keyMap.src.idKey], ['asc']);
            nodes = nodes.map(function (item) {
                if (item[keyMap.src.idKey]) {
                    /** @type {?} */
                    var parentId = item[keyMap.src.idKey].substr(0, item[keyMap.src.idKey].length - keyMap.src.levelIdLength);
                    if (parentId && parentId !== item[keyMap.src.idKey]) {
                        item[keyMap.src.parentKey] = parentId;
                    }
                    if (!item[keyMap.node.dataKey]) {
                        item[keyMap.node.dataKey] = tslib_1.__assign({}, item);
                    }
                    item[keyMap.node.idKey] = item[keyMap.src.idKey];
                    item = CommonsUtils.pick(item, treeKeys);
                    return item;
                }
            });
        }
        else if (keyMap.src.parentKey) {
            nodes = CommonsUtils.orderBy(dataItems, [keyMap.src.parentKey, keyMap.src.idKey], ['asc']);
            nodes = nodes.map(function (item) {
                if (!item[keyMap.node.dataKey]) {
                    item[keyMap.node.dataKey] = tslib_1.__assign({}, item);
                }
                item[keyMap.node.idKey] = item[keyMap.src.idKey];
                item = CommonsUtils.pick(item, treeKeys);
                return item;
            });
        }
        nodes.forEach(function (item) {
            item[keyMap.node.dataKey] = item[keyMap.node.dataKey] || tslib_1.__assign({}, item);
            /** @type {?} */
            var children = nodes.filter(function (item2) {
                return item2 && item2[keyMap.src.parentKey] && item2[keyMap.src.parentKey] === item['data'][keyMap.src.idKey];
            });
            if (children.length > 0) {
                item[keyMap.node.childrenKey] = children;
            }
            item[keyMap.node.labelKey] = DataItemUtils.getItemLabel(item, keyMap.src.labelKey);
            if (item[keyMap.src.parentKey]) {
                item[keyMap.node.parentKey] = item[keyMap.src.parentKey];
            }
            if (lazy) {
                item[keyMap.node.leafKey] = false;
            }
            if (root && CommonsUtils.isString(root) && root === item[keyMap.src.idKey]) {
                rootNode = [item];
            }
        });
        if (root && CommonsUtils.isJson(root)) {
            root['children'] = nodes;
            return [root];
        }
        else {
            return nodes = rootNode ? rootNode : nodes.filter(function (node) { return !node[keyMap.node.parentKey]; });
        }
    };
    /**
     * @param {?} treeNodes
     * @param {?} value
     * @param {?} props
     * @return {?}
     */
    TreeUtils.findNode = /**
     * @param {?} treeNodes
     * @param {?} value
     * @param {?} props
     * @return {?}
     */
    function (treeNodes, value, props) {
        /** @type {?} */
        var found;
        if (treeNodes) {
            for (var i = 0; i < treeNodes.length; i++) {
                if (value[props.dataItemProps.idKey] === treeNodes[i][DEFAULT_TREE_NODE_KEYS.dataKey][props.dataItemProps.idKey]) {
                    found = treeNodes[i];
                    break;
                }
                if (treeNodes[i].hasOwnProperty(DEFAULT_TREE_NODE_KEYS.childrenKey)) {
                    /** @type {?} */
                    var children = treeNodes[i][DEFAULT_TREE_NODE_KEYS.childrenKey];
                    found = TreeUtils.findNode(children, value, props);
                    if (found) {
                        break;
                    }
                }
            }
        }
        return found;
    };
    /**
     * @param {?} nodes
     * @param {?} predicate
     * @return {?}
     */
    TreeUtils.filter = /**
     * @param {?} nodes
     * @param {?} predicate
     * @return {?}
     */
    function (nodes, predicate) {
        /** @type {?} */
        var result = !nodes ? null : nodes.reduce(function (list, node) {
            /** @type {?} */
            var clone = null;
            if (predicate(node)) {
                // if the object matches the filter, clone it as it is
                clone = CommonsUtils.copy(tslib_1.__assign({}, node, { matched: true }));
            }
            else if (node.children != null) {
                // if the object has childrens, filter the list of children
                /** @type {?} */
                var children = TreeUtils.filter(node.children, predicate);
                if (children.length > 0) {
                    // if any of the children matches, clone the parent object, overwrite
                    // the children list with the filtered list
                    clone = Object.assign({}, node, { children: children });
                }
            }
            if (clone) {
                list.push(clone);
            }
            return list;
        }, []);
        return result;
    };
    /**
     * @param {?} node
     * @param {?} isExpand
     * @param {?=} props
     * @param {?=} toExpandLevel
     * @param {?=} currentLevel
     * @param {?=} id
     * @return {?}
     */
    TreeUtils.expandNode = /**
     * @param {?} node
     * @param {?} isExpand
     * @param {?=} props
     * @param {?=} toExpandLevel
     * @param {?=} currentLevel
     * @param {?=} id
     * @return {?}
     */
    function (node, isExpand, props, toExpandLevel, currentLevel, id) {
        if (props === void 0) { props = {}; }
        if (toExpandLevel === void 0) { toExpandLevel = 100; }
        if (currentLevel === void 0) { currentLevel = 1; }
        if (!node) {
            return;
        }
        if (toExpandLevel >= currentLevel) {
            if (id && (currentLevel === toExpandLevel)) {
                node.expanded = node['id'] === id;
            }
            else if (!id || (id && currentLevel < toExpandLevel)) {
                node.expanded = isExpand;
            }
            TreeUtils.initNode(node, props);
            currentLevel++;
            if (node.children) {
                node.children.forEach(function (childNode) {
                    TreeUtils.initNode(childNode, props);
                    if (toExpandLevel >= currentLevel) {
                        TreeUtils.expandNode(childNode, isExpand, props, toExpandLevel, currentLevel, id);
                    }
                });
            }
        }
    };
    /**
     * @param {?} node
     * @param {?=} props
     * @return {?}
     */
    TreeUtils.initNode = /**
     * @param {?} node
     * @param {?=} props
     * @return {?}
     */
    function (node, props) {
        if (props === void 0) { props = {}; }
        if (!node._inited) {
            ['expandedIcon', 'collapsedIcon'].forEach(function (iconType) { return TreeUtils.initIcon(node, iconType, props); });
            if (props['selectable']) {
                node.selectable = CommonsUtils.getValue(props['selectable'], node);
            }
            node = tslib_1.__assign({}, node, { '_inited': true });
        }
    };
    /**
     * @param {?} node
     * @param {?} iconType
     * @param {?} props
     * @return {?}
     */
    TreeUtils.initIcon = /**
     * @param {?} node
     * @param {?} iconType
     * @param {?} props
     * @return {?}
     */
    function (node, iconType, props) {
        if (!props) {
            node[iconType] = TreeUtils.DEFAULT_NODE_PROPS[iconType];
        }
        else if (props[iconType] && props[iconType].method) {
            node[iconType] = ((/** @type {?} */ (props[iconType].method)))(node);
        }
        else {
            node[iconType] = props[iconType] || TreeUtils.DEFAULT_NODE_PROPS[iconType];
        }
    };
    /**
     * @param {?} siblingId
     * @return {?}
     */
    TreeUtils.getSelectedTreeState = /**
     * @param {?} siblingId
     * @return {?}
     */
    function (siblingId) {
        if (!siblingId) {
            return null;
        }
        /** @type {?} */
        var sibling = siblingId && StatesUtils.getValue(siblingId);
        if (sibling && sibling.component) {
            /** @type {?} */
            var treeId = CommonsUtils.get(sibling.component, '$props.$ext.$container.tree.$id');
            /** @type {?} */
            var treeState = StatesUtils.getValue(treeId);
            return treeState;
        }
    };
    /**
     * @param {?} siblingId
     * @return {?}
     */
    TreeUtils.getSelectedNode = /**
     * @param {?} siblingId
     * @return {?}
     */
    function (siblingId) {
        /** @type {?} */
        var treeState = TreeUtils.getSelectedTreeState(siblingId);
        return treeState && treeState['selectedNode'];
    };
    /**
     * @param {?} siblingId
     * @return {?}
     */
    TreeUtils.getSelectedNodeValue = /**
     * @param {?} siblingId
     * @return {?}
     */
    function (siblingId) {
        /** @type {?} */
        var treeState = TreeUtils.getSelectedTreeState(siblingId);
        return treeState && treeState['selectedNodeValue'];
    };
    TreeUtils.DEFAULT_NODE_PROPS = {
        lazy: false,
        autoExpandLevel: 0,
        expandedIcon: 'fa fa-folder-open',
        collapsedIcon: 'fa fa-folder',
        icon: 'fa fa-leaf'
    };
    return TreeUtils;
}());
export { TreeUtils };
if (false) {
    /** @type {?} */
    TreeUtils.DEFAULT_NODE_PROPS;
}
//# sourceMappingURL=data:application/json;base64,