/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { fromEvent, of } from 'rxjs';
import { map } from 'rxjs/operators';
var ImageUtil = /** @class */ (function () {
    function ImageUtil() {
    }
    /**
     * @param {?} file
     * @return {?}
     */
    ImageUtil.getBase64 = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        if (typeof file === 'string' && file.startsWith('data:')) {
            return of(file);
        }
        else {
            /** @type {?} */
            var reader = new FileReader();
            /** @type {?} */
            var fileContent$ = fromEvent(reader, 'load')
                .pipe(map(function (e) {
                console.log(e.target['result']);
                return e.target['result'];
            }));
            // (<File>file).type
            reader.readAsDataURL((/** @type {?} */ (file)));
            return fileContent$;
        }
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ImageUtil.upload = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
    };
    return ImageUtil;
}());
export { ImageUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdXRpbHMvIiwic291cmNlcyI6WyJsaWIvaW1hZ2UvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQWMsRUFBRSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQy9DLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVuQztJQUFBO0lBdUJBLENBQUM7Ozs7O0lBckJRLG1CQUFTOzs7O0lBQWhCLFVBQWlCLElBQW1CO1FBQ2xDLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDeEQsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakI7YUFBTTs7Z0JBQ0MsTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFOztnQkFDekIsWUFBWSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO2lCQUMzQyxJQUFJLENBQ0gsR0FBRyxDQUFDLFVBQUMsQ0FBUTtnQkFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDaEMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzVCLENBQUMsQ0FBQyxDQUNIO1lBQ0gsb0JBQW9CO1lBQ3BCLE1BQU0sQ0FBQyxhQUFhLENBQUMsbUJBQUEsSUFBSSxFQUFRLENBQUMsQ0FBQztZQUNuQyxPQUFPLFlBQVksQ0FBQztTQUNyQjtJQUNILENBQUM7Ozs7O0lBRU0sZ0JBQU07Ozs7SUFBYixVQUFjLElBQUk7SUFFbEIsQ0FBQztJQUNILGdCQUFDO0FBQUQsQ0FBQyxBQXZCRCxJQXVCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZnJvbUV2ZW50LCBPYnNlcnZhYmxlLCBvZn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgY2xhc3MgSW1hZ2VVdGlsIHtcblxuICBzdGF0aWMgZ2V0QmFzZTY0KGZpbGU6IEZpbGUgfCBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIGlmICh0eXBlb2YgZmlsZSA9PT0gJ3N0cmluZycgJiYgZmlsZS5zdGFydHNXaXRoKCdkYXRhOicpKSB7XG4gICAgICByZXR1cm4gb2YoZmlsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICBjb25zdCBmaWxlQ29udGVudCQgPSBmcm9tRXZlbnQocmVhZGVyLCAnbG9hZCcpXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIG1hcCgoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUudGFyZ2V0WydyZXN1bHQnXSk7XG4gICAgICAgICAgICByZXR1cm4gZS50YXJnZXRbJ3Jlc3VsdCddO1xuICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAvLyAoPEZpbGU+ZmlsZSkudHlwZVxuICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSBhcyBGaWxlKTtcbiAgICAgIHJldHVybiBmaWxlQ29udGVudCQ7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHVwbG9hZChmaWxlKSB7XG5cbiAgfVxufVxuIl19