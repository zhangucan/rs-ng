/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { RegPatterns } from '@er/types';
import { CommonsUtils } from '../comm';
var RegUtils = /** @class */ (function () {
    function RegUtils() {
    }
    /**
     * @param {?} regexStr
     * @return {?}
     */
    RegUtils.escapeRegexp = /**
     * @param {?} regexStr
     * @return {?}
     */
    function (regexStr) {
        /** @type {?} */
        var result = regexStr.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
        return result;
    };
    /**
     * @param {?} pattern
     * @return {?}
     */
    RegUtils.getRegexps = /**
     * @param {?} pattern
     * @return {?}
     */
    function (pattern) {
        var e_1, _a;
        if (!pattern) {
            return [];
        }
        /** @type {?} */
        var exps = [];
        /** @type {?} */
        var patterns = [];
        if (CommonsUtils.isString(pattern)) {
            patterns.push(pattern);
        }
        else {
            patterns.concat(pattern);
        }
        try {
            for (var patterns_1 = tslib_1.__values(patterns), patterns_1_1 = patterns_1.next(); !patterns_1_1.done; patterns_1_1 = patterns_1.next()) {
                var p = patterns_1_1.value;
                if (p) {
                    if (p.indexOf(',') > 0) {
                        exps.concat(RegUtils.getRegexps(p.split(',')));
                    }
                    else {
                        exps.push(RegUtils.getRegexp(p));
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (patterns_1_1 && !patterns_1_1.done && (_a = patterns_1.return)) _a.call(patterns_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return exps;
    };
    /**
     * @param {?} src
     * @param {?} pattern
     * @return {?}
     */
    RegUtils.test = /**
     * @param {?} src
     * @param {?} pattern
     * @return {?}
     */
    function (src, pattern) {
        /** @type {?} */
        var regex;
        if (typeof pattern === 'string') {
            regex = new RegExp(pattern);
        }
        else {
            regex = pattern;
        }
        if (regex instanceof RegExp) {
            return regex.test(src);
        }
        else if (regex && Array.isArray(regex)) {
            return regex.every(function (item) {
                return RegUtils.test(src, item);
            });
        }
        else if (regex && Array.isArray(regex.and)) {
            return regex.and.every(function (item) {
                return RegUtils.test(src, item);
            });
        }
        else if (regex && Array.isArray(regex.or)) {
            return regex.or.some(function (item) {
                return RegUtils.test(src, item);
            });
        }
        else if (regex && regex.not) {
            return !RegUtils.test(src, regex.not);
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} string
     * @param {?} regex
     * @return {?}
     */
    RegUtils.exec = /**
     * @param {?} string
     * @param {?} regex
     * @return {?}
     */
    function (string, regex) {
        /** @type {?} */
        var self = this;
        if (typeof regex === 'string') {
            regex = new RegExp(regex);
        }
        if (regex instanceof RegExp) {
            return regex.exec(string);
        }
        else if (regex && Array.isArray(regex)) {
            return regex.reduce(function (res, item) {
                return (!!res) ? res : self.exec(string, item);
            }, null);
        }
        else {
            return null;
        }
    };
    /**
     * @private
     * @param {?} pattern
     * @return {?}
     */
    RegUtils.getRegexp = /**
     * @private
     * @param {?} pattern
     * @return {?}
     */
    function (pattern) {
        /** @type {?} */
        var exp = null;
        if (!pattern) {
            return null;
        }
        if (CommonsUtils.isString(pattern)) {
            if (pattern === 'letter') {
                exp = RegPatterns.letter;
            }
            else if (pattern === 'digit') {
                exp = RegPatterns.digit;
            }
            else if (pattern === 'character') {
                exp = RegPatterns.character;
            }
            else if (pattern === 'integer') {
                exp = RegPatterns.integer;
            }
            else if (pattern === 'numeric') {
                exp = RegPatterns.numeric;
            }
            else {
                exp = new RegExp((/** @type {?} */ (pattern)));
            }
        }
        else {
            exp = (/** @type {?} */ (pattern));
        }
        return exp;
    };
    return RegUtils;
}());
export { RegUtils };
//# sourceMappingURL=data:application/json;base64,