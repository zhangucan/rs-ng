/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ReadAs } from '@er/types';
import { fromEvent } from 'rxjs';
import { first, map } from 'rxjs/operators';
var FileUtils = /** @class */ (function () {
    function FileUtils() {
    }
    /**
     * @param {?} file
     * @param {?=} readAs
     * @return {?}
     */
    FileUtils.readFile = /**
     * @param {?} file
     * @param {?=} readAs
     * @return {?}
     */
    function (file, readAs) {
        /** @type {?} */
        var reader = new FileReader();
        /** @type {?} */
        var fileReader$ = fromEvent(reader, 'load').pipe(map(function (e) { return e.target.result; }), first());
        switch (readAs || ReadAs.BINARY) {
            case ReadAs.ARRAY:
                reader.readAsArrayBuffer(file);
                break;
            case ReadAs.BINARY:
                reader.readAsBinaryString(file);
                break;
            case ReadAs.URL:
                reader.readAsDataURL(file);
                break;
            case ReadAs.TEXT:
                reader.readAsText(file);
                break;
        }
        return fileReader$;
    };
    return FileUtils;
}());
export { FileUtils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdXRpbHMvIiwic291cmNlcyI6WyJsaWIvZmlsZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNqQyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBQyxLQUFLLEVBQUUsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUM7SUFBQTtJQXdCQSxDQUFDOzs7Ozs7SUF0QlEsa0JBQVE7Ozs7O0lBQWYsVUFBZ0IsSUFBUyxFQUFFLE1BQWU7O1lBQ2xDLE1BQU0sR0FBZSxJQUFJLFVBQVUsRUFBRTs7WUFDckMsV0FBVyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUM5QyxHQUFHLENBQUMsVUFBQyxDQUFNLElBQUssT0FBQSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBZixDQUFlLENBQUMsRUFDaEMsS0FBSyxFQUFFLENBQ1I7UUFDSCxRQUFRLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQy9CLEtBQUssTUFBTSxDQUFDLEtBQUs7Z0JBQ2YsTUFBTSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMvQixNQUFNO1lBQ1IsS0FBSyxNQUFNLENBQUMsTUFBTTtnQkFDaEIsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoQyxNQUFNO1lBQ1IsS0FBSyxNQUFNLENBQUMsR0FBRztnQkFDYixNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMzQixNQUFNO1lBQ1IsS0FBSyxNQUFNLENBQUMsSUFBSTtnQkFDZCxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN4QixNQUFNO1NBQ1Q7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBQ0gsZ0JBQUM7QUFBRCxDQUFDLEFBeEJELElBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSZWFkQXN9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge2Zyb21FdmVudH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZpcnN0LCBtYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGNsYXNzIEZpbGVVdGlscyB7XG5cbiAgc3RhdGljIHJlYWRGaWxlKGZpbGU6IGFueSwgcmVhZEFzPzogUmVhZEFzKSB7XG4gICAgY29uc3QgcmVhZGVyOiBGaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBjb25zdCBmaWxlUmVhZGVyJCA9IGZyb21FdmVudChyZWFkZXIsICdsb2FkJykucGlwZShcbiAgICAgICAgbWFwKChlOiBhbnkpID0+IGUudGFyZ2V0LnJlc3VsdCksXG4gICAgICAgIGZpcnN0KClcbiAgICAgICk7XG4gICAgc3dpdGNoIChyZWFkQXMgfHwgUmVhZEFzLkJJTkFSWSkge1xuICAgICAgY2FzZSBSZWFkQXMuQVJSQVk6XG4gICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihmaWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFJlYWRBcy5CSU5BUlk6XG4gICAgICAgIHJlYWRlci5yZWFkQXNCaW5hcnlTdHJpbmcoZmlsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBSZWFkQXMuVVJMOlxuICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFJlYWRBcy5URVhUOlxuICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBmaWxlUmVhZGVyJDtcbiAgfVxufVxuIl19