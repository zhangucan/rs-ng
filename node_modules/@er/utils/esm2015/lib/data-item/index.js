/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonsUtils } from '../comm';
export class DataItemUtils {
    /**
     * @param {?} items
     * @param {?} config
     * @return {?}
     */
    static transItems(items, config) {
        if (!config) {
            return items;
        }
        /** @type {?} */
        let _data = [];
        /** @type {?} */
        const groups = {};
        items.map((item) => {
            _data.push(DataItemUtils.transItem(item, config));
        });
        if (config.groupKey) {
            _data.map(item => {
                /** @type {?} */
                const group = DataItemUtils.getItemLabel(item, config.groupKey || 'group');
                if (!groups[group]) {
                    groups[group] = [];
                }
                groups[group].push(item);
            });
            _data = [];
            Object.keys(groups).forEach(group => {
                _data.push({
                    label: group,
                    items: groups[group]
                });
            });
        }
        return _data;
    }
    /**
     * @param {?} item
     * @param {?} config
     * @return {?}
     */
    static transItem(item, config) {
        /** @type {?} */
        const _item = {
            [DataItemUtils.ITEM_LABEL_KEY]: DataItemUtils.getItemLabel(item, config.labelKey || DataItemUtils.ITEM_LABEL_KEY),
            [DataItemUtils.ITEM_VALUE_KEY]: DataItemUtils.getItemValue(item, config.valueKey),
            [DataItemUtils.ITEM_DATA_KEY]: item
        };
        return _item;
    }
    /**
     * @param {?} item
     * @param {?} valueKey
     * @return {?}
     */
    static getItemValue(item, valueKey) {
        if (CommonsUtils.isString(item)) {
            return item;
        }
        if (CommonsUtils.isArray(item)) {
            return item.map(data => DataItemUtils.getItemValue(data, valueKey));
        }
        else {
            if (typeof valueKey === 'function') {
                return valueKey(item);
            }
            else if (CommonsUtils.isArray(valueKey)) {
                /** @type {?} */
                const value = {};
                valueKey.forEach(p => {
                    /** @type {?} */
                    const val = CommonsUtils.get(item, p);
                    if (val) {
                        value[p] = val;
                    }
                });
                return value;
            }
            return valueKey ? CommonsUtils.get(item, valueKey) : item;
        }
    }
    /**
     * @param {?} item
     * @param {?} label
     * @return {?}
     */
    static getItemLabel(item, label) {
        if (CommonsUtils.isFunction(label)) {
            return label(item);
        }
        else if (item) {
            if (CommonsUtils.isArray(label)) {
                /** @type {?} */
                const s = [];
                ((/** @type {?} */ (label))).forEach(key => {
                    /** @type {?} */
                    const lb = DataItemUtils.getLabel(item, key);
                    if (lb) {
                        s.push(lb);
                    }
                });
                return s;
            }
            else {
                return DataItemUtils.getLabel(item, label);
            }
        }
    }
    /**
     * @param {?} item
     * @param {?} labelKey
     * @return {?}
     */
    static getLabel(item, labelKey) {
        /** @type {?} */
        const aLabel = CommonsUtils.get(item, labelKey);
        if (aLabel) {
            return aLabel;
        }
        else if (item[DataItemUtils.ITEM_DATA_KEY]) {
            return CommonsUtils.get(item[DataItemUtils.ITEM_DATA_KEY], labelKey);
        }
        else {
            return item[Object.keys(item)[0]];
        }
    }
}
DataItemUtils.ITEM_LABEL_KEY = 'label';
DataItemUtils.ITEM_VALUE_KEY = 'value';
DataItemUtils.ITEM_GROUP_KEY = 'group';
DataItemUtils.ITEM_GROUP_ITEMS_KEY = 'items';
DataItemUtils.ITEM_DATA_KEY = 'data';
if (false) {
    /** @type {?} */
    DataItemUtils.ITEM_LABEL_KEY;
    /** @type {?} */
    DataItemUtils.ITEM_VALUE_KEY;
    /** @type {?} */
    DataItemUtils.ITEM_GROUP_KEY;
    /** @type {?} */
    DataItemUtils.ITEM_GROUP_ITEMS_KEY;
    /** @type {?} */
    DataItemUtils.ITEM_DATA_KEY;
}
//# sourceMappingURL=data:application/json;base64,