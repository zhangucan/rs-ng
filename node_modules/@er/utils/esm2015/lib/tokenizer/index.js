/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class TokenizerUtils {
    /**
     * @param {?} str
     * @param {?} format
     * @return {?}
     */
    static extract(str, format) {
        if (str === format) {
            return new ExtractionResult(true);
        }
        /** @type {?} */
        const formatTokens = new FormatStringTokenizer().Tokenize(format);
        if (!formatTokens) {
            return new ExtractionResult(str === '');
        }
        /** @type {?} */
        const result = new ExtractionResult(true);
        for (let i = 0; i < formatTokens.length; i++) {
            /** @type {?} */
            const currentToken = formatTokens[i];
            /** @type {?} */
            const previousToken = i > 0 ? formatTokens[i - 1] : null;
            if (currentToken.Type === FormatStringTokenType.ConstantText) {
                if (i === 0) {
                    if (str.indexOf(currentToken.Text) !== 0) {
                        result.isMatch = false;
                        return result;
                    }
                    str = str.substr(currentToken.Text.length, str.length - currentToken.Text.length);
                }
                else {
                    /** @type {?} */
                    const matchIndex = str.indexOf(currentToken.Text);
                    if (matchIndex < 0) {
                        result.isMatch = false;
                        return result;
                    }
                    result.matches.push({ name: previousToken.Text, value: str.substr(0, matchIndex) });
                    str = str.substring(0, matchIndex + currentToken.Text.length);
                }
            }
        }
        /** @type {?} */
        const lastToken = formatTokens[formatTokens.length - 1];
        if (lastToken.Type === FormatStringTokenType.DynamicValue) {
            result.matches.push({ name: lastToken.Text, value: str });
        }
        return result;
    }
    /**
     * @param {?} str
     * @param {?} format
     * @return {?}
     */
    static matches(str, format) {
        /** @type {?} */
        const result = TokenizerUtils.extract(str, format);
        if (!result.isMatch) {
            return [];
        }
        /** @type {?} */
        const values = [];
        for (let i = 0; i < result.matches.length; i++) {
            values.push(result.matches[i].value);
        }
        return values;
    }
}
export class ExtractionResult {
    /**
     * @param {?} isMatch
     */
    constructor(isMatch) {
        this.isMatch = isMatch;
        this.matches = [];
    }
}
if (false) {
    /** @type {?} */
    ExtractionResult.prototype.isMatch;
    /** @type {?} */
    ExtractionResult.prototype.matches;
}
/** @enum {number} */
const FormatStringTokenType = {
    ConstantText: 0,
    DynamicValue: 1,
};
export { FormatStringTokenType };
FormatStringTokenType[FormatStringTokenType.ConstantText] = 'ConstantText';
FormatStringTokenType[FormatStringTokenType.DynamicValue] = 'DynamicValue';
export class FormatStringToken {
    /**
     * @param {?} text
     * @param {?} type
     */
    constructor(text, type) {
        this.Text = text;
        this.Type = type;
    }
}
if (false) {
    /** @type {?} */
    FormatStringToken.prototype.Text;
    /** @type {?} */
    FormatStringToken.prototype.Type;
}
export class FormatStringTokenizer {
    /**
     * @param {?} format
     * @param {?=} includeBracketsForDynamicValues
     * @return {?}
     */
    Tokenize(format, includeBracketsForDynamicValues = false) {
        /** @type {?} */
        const tokens = [];
        /** @type {?} */
        let currentText = '';
        /** @type {?} */
        let inDynamicValue = false;
        for (let i = 0; i < format.length; i++) {
            /** @type {?} */
            const c = format[i];
            switch (c) {
                case '{':
                    if (inDynamicValue) {
                        throw new Error('Incorrect syntax at char ' + i + '! format string can not contain agg dynamic value expression!');
                    }
                    inDynamicValue = true;
                    if (currentText.length > 0) {
                        tokens.push(new FormatStringToken(currentText, FormatStringTokenType.ConstantText));
                        currentText = '';
                    }
                    break;
                case '}':
                    if (!inDynamicValue) {
                        throw new Error(('Incorrect syntax at char ' + i + '! These is no opening brackets for the closing bracket }.'));
                    }
                    inDynamicValue = false;
                    if (currentText.length <= 0) {
                        throw new Error(('Incorrect syntax at char ' + i + '! Brackets does not containt any chars.'));
                    }
                    /** @type {?} */
                    let dynamicValue = currentText;
                    if (includeBracketsForDynamicValues) {
                        dynamicValue = '{' + dynamicValue + '}';
                    }
                    tokens.push(new FormatStringToken(dynamicValue, FormatStringTokenType.DynamicValue));
                    currentText = '';
                    break;
                default:
                    currentText += c;
                    break;
            }
        }
        if (inDynamicValue) {
            throw new Error(('There is no closing } char for an opened { char.'));
        }
        if (currentText.length > 0) {
            tokens.push(new FormatStringToken(currentText, FormatStringTokenType.ConstantText));
        }
        return tokens;
    }
}
//# sourceMappingURL=data:application/json;base64,