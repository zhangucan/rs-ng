/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChartType } from '@er/types';
import { ColorUtils } from '../color';
import { CommonsUtils } from '../comm';
import { DataItemUtils } from '../data-item';
export class ChartUtils {
    /**
     * @param {?} rawData
     * @param {?} chartOptions
     * @param {?=} dimensionsIndex
     * @return {?}
     */
    static buildChartData(rawData, chartOptions, dimensionsIndex = 0) {
        /** @type {?} */
        const type = chartOptions.type;
        /** @type {?} */
        let data = rawData;
        /** @type {?} */
        const dimension = chartOptions.dimension || {};
        if (dimension.dataSrcPath) {
            data = CommonsUtils.get(rawData, dimension.dataSrcPath);
        }
        /** @type {?} */
        const dataItemProps = dimension.dataItemProps || chartOptions.dataItemProps;
        /** @type {?} */
        const label = dimension.title || '';
        switch (type || ChartType.BAR) {
            case ChartType.BAR:
                data = ChartUtils.buildBarChart(data, dataItemProps, label, dimensionsIndex);
                break;
            case ChartType.LINE:
                data = ChartUtils.buildLineChart(data, dataItemProps, label, dimensionsIndex);
                break;
            case ChartType.PIE:
                data = ChartUtils.buildPieChart(data, dataItemProps, label, dimensionsIndex);
                break;
            case ChartType.AREA:
                data = ChartUtils.buildAreaChart(data, dataItemProps, label, dimensionsIndex);
                break;
            case ChartType.RADAR:
                data = ChartUtils.buildRadarChart(data, dataItemProps, label, dimensionsIndex);
                break;
            case ChartType.DOUGHNUT:
                data = ChartUtils.buildPieChart(data, dataItemProps, label, dimensionsIndex);
                break;
        }
        return data;
    }
    /**
     * @param {?} dataItems
     * @param {?} config
     * @param {?=} label
     * @param {?=} colorIndex
     * @return {?}
     */
    static buildBarChart(dataItems, config, label = '', colorIndex = 0) {
        /** @type {?} */
        const _data = DataItemUtils.transItems(dataItems, config);
        /** @type {?} */
        const labels = [];
        /** @type {?} */
        const datasets = [];
        /** @type {?} */
        const data = [];
        /** @type {?} */
        const backgroundColor = [];
        /** @type {?} */
        const hoverBackgroundColor = [];
        /** @type {?} */
        const items = _data;
        items.forEach(item => {
            if (item['group']) {
                datasets.push({
                    label: items[''].label,
                    data: items[''].items,
                    backgroundColor: ColorUtils.getColor(items[''].label)
                });
                labels.push('');
            }
            else {
                /** @type {?} */
                const lb = item['key_as_string'] || item['label'];
                labels.push(lb);
                data.push(item['value']);
                backgroundColor.push(ColorUtils.getColor(lb, colorIndex));
                hoverBackgroundColor.push(ColorUtils.getColor(lb, colorIndex + 10));
            }
        });
        datasets.push({
            label: label,
            backgroundColor,
            hoverBackgroundColor,
            data
        });
        return {
            labels,
            datasets
        };
    }
    /**
     * @param {?} dataItems
     * @param {?} config
     * @param {?=} label
     * @param {?=} colorIndex
     * @return {?}
     */
    static buildPieChart(dataItems, config, label = '', colorIndex = 0) {
        /** @type {?} */
        const _data = DataItemUtils.transItems(dataItems, config);
        /** @type {?} */
        const labels = [];
        /** @type {?} */
        const datasets = [];
        /** @type {?} */
        const data = [];
        /** @type {?} */
        const backgroundColor = [];
        /** @type {?} */
        const hoverBackgroundColor = [];
        /** @type {?} */
        const items = _data;
        items.forEach(item => {
            if (item['group']) {
                datasets.push({
                    label: items[''].label,
                    data: items[''].items,
                    backgroundColor: ColorUtils.getColor(items[''].label)
                });
                labels.push('');
            }
            else {
                /** @type {?} */
                const lb = item['key_as_string'] || item['label'];
                labels.push(lb);
                data.push(item['value']);
                backgroundColor.push(ColorUtils.getColor(lb, colorIndex));
                hoverBackgroundColor.push(ColorUtils.getColor(lb, colorIndex + 10));
            }
        });
        datasets.push({
            label: label || '',
            backgroundColor,
            hoverBackgroundColor,
            data
        });
        return {
            labels,
            datasets
        };
    }
    /**
     * @param {?} dataItems
     * @param {?} config
     * @param {?=} label
     * @param {?=} colorIndex
     * @return {?}
     */
    static buildAreaChart(dataItems, config, label = '', colorIndex = 0) {
        /** @type {?} */
        const _data = DataItemUtils.transItems(dataItems, config);
        /** @type {?} */
        const labels = [];
        /** @type {?} */
        const datasets = [];
        /** @type {?} */
        const backgroundColor = [];
        /** @type {?} */
        const data = [];
        /** @type {?} */
        const items = _data;
        items.forEach(item => {
            if (item['group']) {
                datasets.push({
                    label: items[''].label,
                    data: items[''].items,
                    backgroundColor: ColorUtils.getColor(items[''].label)
                });
                labels.push('');
            }
            else {
                /** @type {?} */
                const lb = item['key_as_string'] || item['label'];
                labels.push(lb);
                data.push(item['value']);
                backgroundColor.push(ColorUtils.getColor(lb, colorIndex));
            }
        });
        datasets.push({
            label: label || '',
            data,
            backgroundColor
        });
        return {
            labels,
            datasets
        };
    }
    /**
     * @param {?} dataItems
     * @param {?} config
     * @param {?=} label
     * @param {?=} colorIndex
     * @return {?}
     */
    static buildLineChart(dataItems, config, label = '', colorIndex = 0) {
        /** @type {?} */
        const _data = DataItemUtils.transItems(dataItems, config);
        /** @type {?} */
        const labels = [];
        /** @type {?} */
        const datasets = [];
        /** @type {?} */
        const data = [];
        /** @type {?} */
        const items = _data;
        items.forEach(item => {
            if (item['group']) {
                datasets.push({
                    label: items[''].label,
                    data: items[''].items,
                    backgroundColor: ColorUtils.getColor(items[''].label)
                });
                labels.push('');
            }
            else {
                /** @type {?} */
                const lb = item['key_as_string'] || item['label'];
                labels.push(lb);
                data.push(item['value']);
            }
        });
        datasets.push({
            label: label || '',
            data,
            fill: false,
            borderColor: ColorUtils.getColor(colorIndex)
        });
        return {
            labels,
            datasets
        };
    }
    /**
     * @param {?} dataItems
     * @param {?} config
     * @param {?=} label
     * @param {?=} colorIndex
     * @return {?}
     */
    static buildRadarChart(dataItems, config, label = '', colorIndex = 0) {
        /** @type {?} */
        const _data = DataItemUtils.transItems(dataItems, config);
        /** @type {?} */
        const labels = [];
        /** @type {?} */
        const datasets = [];
        /** @type {?} */
        const backgroundColor = [];
        /** @type {?} */
        const borderColor = [];
        /** @type {?} */
        const pointBackgroundColor = [];
        /** @type {?} */
        const pointHoverBorderColor = [];
        /** @type {?} */
        const data = [];
        /** @type {?} */
        const items = _data;
        items.forEach(item => {
            if (item['group']) {
                datasets.push({
                    label: items[''].label,
                    data: items[''].items,
                    backgroundColor: ColorUtils.getColor(items[''].label)
                });
                labels.push('');
            }
            else {
                /** @type {?} */
                const lb = item['key_as_string'] || item['label'];
                labels.push(lb);
                data.push(item['value']);
                backgroundColor.push(ColorUtils.getColor(lb, colorIndex));
                borderColor.push(ColorUtils.getColor(lb, colorIndex + 5));
                pointBackgroundColor.push(ColorUtils.getColor(lb, colorIndex + 5));
                pointHoverBorderColor.push(ColorUtils.getColor(lb, colorIndex + 5));
            }
        });
        datasets.push({
            label: label || '',
            data,
            backgroundColor,
            borderColor,
            pointBackgroundColor,
            pointHoverBorderColor,
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff'
        });
        return {
            labels,
            datasets
        };
    }
}
//# sourceMappingURL=data:application/json;base64,