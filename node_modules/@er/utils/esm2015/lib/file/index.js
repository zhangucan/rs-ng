/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ReadAs } from '@er/types';
import { fromEvent } from 'rxjs';
import { first, map } from 'rxjs/operators';
export class FileUtils {
    /**
     * @param {?} file
     * @param {?=} readAs
     * @return {?}
     */
    static readFile(file, readAs) {
        /** @type {?} */
        const reader = new FileReader();
        /** @type {?} */
        const fileReader$ = fromEvent(reader, 'load').pipe(map((e) => e.target.result), first());
        switch (readAs || ReadAs.BINARY) {
            case ReadAs.ARRAY:
                reader.readAsArrayBuffer(file);
                break;
            case ReadAs.BINARY:
                reader.readAsBinaryString(file);
                break;
            case ReadAs.URL:
                reader.readAsDataURL(file);
                break;
            case ReadAs.TEXT:
                reader.readAsText(file);
                break;
        }
        return fileReader$;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdXRpbHMvIiwic291cmNlcyI6WyJsaWIvZmlsZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNqQyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBQyxLQUFLLEVBQUUsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFMUMsTUFBTSxPQUFPLFNBQVM7Ozs7OztJQUVwQixNQUFNLENBQUMsUUFBUSxDQUFDLElBQVMsRUFBRSxNQUFlOztjQUNsQyxNQUFNLEdBQWUsSUFBSSxVQUFVLEVBQUU7O2NBQ3JDLFdBQVcsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FDOUMsR0FBRyxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUNoQyxLQUFLLEVBQUUsQ0FDUjtRQUNILFFBQVEsTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDL0IsS0FBSyxNQUFNLENBQUMsS0FBSztnQkFDZixNQUFNLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQy9CLE1BQU07WUFDUixLQUFLLE1BQU0sQ0FBQyxNQUFNO2dCQUNoQixNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2hDLE1BQU07WUFDUixLQUFLLE1BQU0sQ0FBQyxHQUFHO2dCQUNiLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzNCLE1BQU07WUFDUixLQUFLLE1BQU0sQ0FBQyxJQUFJO2dCQUNkLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3hCLE1BQU07U0FDVDtRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UmVhZEFzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtmcm9tRXZlbnR9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmaXJzdCwgbWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBjbGFzcyBGaWxlVXRpbHMge1xuXG4gIHN0YXRpYyByZWFkRmlsZShmaWxlOiBhbnksIHJlYWRBcz86IFJlYWRBcykge1xuICAgIGNvbnN0IHJlYWRlcjogRmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgY29uc3QgZmlsZVJlYWRlciQgPSBmcm9tRXZlbnQocmVhZGVyLCAnbG9hZCcpLnBpcGUoXG4gICAgICAgIG1hcCgoZTogYW55KSA9PiBlLnRhcmdldC5yZXN1bHQpLFxuICAgICAgICBmaXJzdCgpXG4gICAgICApO1xuICAgIHN3aXRjaCAocmVhZEFzIHx8IFJlYWRBcy5CSU5BUlkpIHtcbiAgICAgIGNhc2UgUmVhZEFzLkFSUkFZOlxuICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBSZWFkQXMuQklOQVJZOlxuICAgICAgICByZWFkZXIucmVhZEFzQmluYXJ5U3RyaW5nKGZpbGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUmVhZEFzLlVSTDpcbiAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBSZWFkQXMuVEVYVDpcbiAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gZmlsZVJlYWRlciQ7XG4gIH1cbn1cbiJdfQ==