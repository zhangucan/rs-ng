/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StateNames } from '@er/types';
import * as momentNs from 'moment';
import { CommonsUtils } from '../comm';
import { StatesUtils } from '../states';
/** @type {?} */
const moment = momentNs;
export class DateUtils {
    /**
     * @param {?} data
     * @return {?}
     */
    static getMoment(data) {
        if (moment.isMoment(data)) {
            return data;
        }
        /** @type {?} */
        const date = DateUtils.toDate(data);
        if (date) {
            return moment(data);
        }
        return null;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    static isDate(v) {
        return !!DateUtils.toDate(v);
    }
    /**
     * @param {?} v
     * @return {?}
     */
    static toDate(v) {
        if (CommonsUtils.isString(v)) {
            /** @type {?} */
            const date = Date.parse(v);
            if (!isNaN(date)) {
                return new Date(date);
            }
        }
        else {
            if (v && typeof v.getMonth === 'function') {
                return v;
            }
        }
        return undefined;
    }
    /**
     * @param {?=} date
     * @param {?=} format
     * @return {?}
     */
    static getFormattedDate(date, format = 'YYYY-MM-DD') {
        return DateUtils.getFormattedDateTime(format, date);
    }
    /**
     * @param {?=} date
     * @param {?=} format
     * @return {?}
     */
    static getFormattedTime(date, format = 'HH:mm:ss') {
        return DateUtils.getFormattedDateTime(format, date);
    }
    /**
     * @param {?=} format
     * @param {?=} date
     * @return {?}
     */
    static getFormattedDateTime(format = 'YYYY-MM-DD HH:mm:ss', date) {
        if (!date) {
            date = DateUtils.getDate();
        }
        else {
            date = DateUtils.toDate(date);
        }
        /** @type {?} */
        const momentData = DateUtils.getMoment(date);
        if (momentData) {
            return momentData.format(format);
        }
        return '';
    }
    /**
     * @return {?}
     */
    static getDate() {
        /** @type {?} */
        let date;
        /** @type {?} */
        const dateState = StatesUtils.getValue(StateNames.serverTime);
        if (dateState) {
            date = dateState.date;
        }
        else {
            date = new Date();
        }
        return date;
    }
    /**
     * @return {?}
     */
    static getStamp() {
        return DateUtils.getDate().getTime();
    }
    /**
     * @param {?} present
     * @param {?=} due
     * @return {?}
     */
    static getDateByNow(present, due) {
        if (!present) {
            return { seconds: 0, message: '' };
        }
        if (!DateUtils.isDate(present)) {
            try {
                present = new Date(present);
            }
            catch (e) {
                present = null;
            }
        }
        if (!present) {
            return { seconds: 0, message: '' };
        }
        /** @type {?} */
        let _due = due;
        if (!_due) {
            _due = new Date();
        }
        if (!DateUtils.isDate(_due)) {
            _due = new Date(_due);
        }
        /** @type {?} */
        const seconds = Math.round(Math.abs((_due.getTime() - present.getTime()) / 1000));
        /** @type {?} */
        const minutes = Math.round(Math.abs(seconds / 60));
        /** @type {?} */
        const hours = Math.round(Math.abs(minutes / 60));
        /** @type {?} */
        const days = Math.round(Math.abs(hours / 24));
        /** @type {?} */
        const months = Math.round(Math.abs(days / 30.416));
        /** @type {?} */
        const years = Math.round(Math.abs(days / 365));
        /** @type {?} */
        let message = '';
        if (seconds <= 10) {
            message = (_due > present) ? '刚刚' : '马上';
        }
        else if (seconds <= 30) {
            message = '30秒';
        }
        else if (seconds <= 90) {
            message = '1分钟';
        }
        else if (minutes <= 45) {
            message = minutes + '分钟';
        }
        else if (minutes <= 90) {
            message = '1小时';
        }
        else if (hours <= 22) {
            message = hours + '小时';
        }
        else if (hours <= 36) {
            message = '1天';
        }
        else if (days <= 25) {
            message = days + '天';
        }
        else if (days <= 45) {
            message = '1个月';
        }
        else if (days <= 345) {
            message = months + '月';
        }
        else if (days <= 545) {
            message = '1年';
        }
        else { // (days > 545)
            message = years + '年';
        }
        if (seconds > 10) {
            message += (_due > present) ? '前' : '后';
        }
        return {
            seconds,
            message
        };
    }
    /**
     * @param {?} seconds
     * @return {?}
     */
    static getUpdateSeconds(seconds) {
        /** @type {?} */
        const min = 60;
        /** @type {?} */
        const hr = min * 60;
        /** @type {?} */
        const day = hr * 24;
        if (seconds < min) { // less than 1 min, update every 2 secs
            return 2;
        }
        else if (seconds < hr) { // less than an hour, update every 30 secs
            return 30;
        }
        else if (seconds < day) { // less then a day, update every 5 mins
            return 300;
        }
        else { // update every hour
            return 3600;
        }
    }
    /**
     * @param {?=} date
     * @return {?}
     */
    static getYear(date) {
        return (date || DateUtils.getDate()).getFullYear();
    }
    /**
     * @param {?=} date
     * @return {?}
     */
    static getMonth(date) {
        return (date || DateUtils.getDate()).getMonth() + 1;
    }
    /**
     * @param {?=} date
     * @return {?}
     */
    static getDay(date) {
        return (date || DateUtils.getDate()).getDate();
    }
    /**
     * @return {?}
     */
    static getYesterday() {
        return DateUtils.getDay(new Date(DateUtils.getDate().getTime() - 24 * 60 * 60 * 1000));
    }
    /**
     * @return {?}
     */
    static getTomorrow() {
        return DateUtils.getDay(new Date(DateUtils.getDate().getTime() + 24 * 60 * 60 * 1000));
    }
    /**
     * @return {?}
     */
    static getLastMonth() {
        /** @type {?} */
        const month = DateUtils.getMonth() - 1;
        return month < 1 ? 12 : month;
    }
    /**
     * @return {?}
     */
    static getNextMonth() {
        /** @type {?} */
        const month = DateUtils.getMonth() + 1;
        return month > 12 ? 1 : month;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdXRpbHMvIiwic291cmNlcyI6WyJsaWIvZGF0ZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUNyQyxPQUFPLEtBQUssUUFBUSxNQUFNLFFBQVEsQ0FBQztBQUNuQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7O01BRWhDLE1BQU0sR0FBRyxRQUFRO0FBRXZCLE1BQU0sT0FBTyxTQUFTOzs7OztJQUVwQixNQUFNLENBQUMsU0FBUyxDQUFDLElBQUk7UUFDbkIsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7O2NBQ0ssSUFBSSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ25DLElBQUksSUFBSSxFQUFFO1lBQ1IsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDckI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2IsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNiLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTs7a0JBQ3RCLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNoQixPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3ZCO1NBQ0Y7YUFBTTtZQUNMLElB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QUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNoQyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N0YXRlTmFtZXN9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQgKiBhcyBtb21lbnROcyBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHtDb21tb25zVXRpbHN9IGZyb20gJy4uL2NvbW0nO1xuaW1wb3J0IHtTdGF0ZXNVdGlsc30gZnJvbSAnLi4vc3RhdGVzJztcblxuY29uc3QgbW9tZW50ID0gbW9tZW50TnM7XG5cbmV4cG9ydCBjbGFzcyBEYXRlVXRpbHMge1xuXG4gIHN0YXRpYyBnZXRNb21lbnQoZGF0YSk6IG1vbWVudE5zLk1vbWVudCB7XG4gICAgaWYgKG1vbWVudC5pc01vbWVudChkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGNvbnN0IGRhdGUgPSBEYXRlVXRpbHMudG9EYXRlKGRhdGEpO1xuICAgIGlmIChkYXRlKSB7XG4gICAgICByZXR1cm4gbW9tZW50KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBpc0RhdGUodikge1xuICAgIHJldHVybiAhIURhdGVVdGlscy50b0RhdGUodik7XG4gIH1cblxuICBzdGF0aWMgdG9EYXRlKHYpIHtcbiAgICBpZiAoQ29tbW9uc1V0aWxzLmlzU3RyaW5nKHYpKSB7XG4gICAgICBjb25zdCBkYXRlID0gRGF0ZS5wYXJzZSh2KTtcbiAgICAgIGlmICghaXNOYU4oZGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodiAmJiB0eXBlb2Ygdi5nZXRNb250aCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRGb3JtYXR0ZWREYXRlKGRhdGU/LCBmb3JtYXQgPSAnWVlZWS1NTS1ERCcpIHtcbiAgICByZXR1cm4gRGF0ZVV0aWxzLmdldEZvcm1hdHRlZERhdGVUaW1lKGZvcm1hdCwgZGF0ZSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0Rm9ybWF0dGVkVGltZShkYXRlPywgZm9ybWF0ID0gJ0hIOm1tOnNzJykge1xuICAgIHJldHVybiBEYXRlVXRpbHMuZ2V0Rm9ybWF0dGVkRGF0ZVRpbWUoZm9ybWF0LCBkYXRlKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRGb3JtYXR0ZWREYXRlVGltZShmb3JtYXQgPSAnWVlZWS1NTS1ERCBISDptbTpzcycsIGRhdGU/KSB7XG4gICAgaWYgKCFkYXRlKSB7XG4gICAgICBkYXRlID0gRGF0ZVV0aWxzLmdldERhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0ZSA9IERhdGVVdGlscy50b0RhdGUoZGF0ZSk7XG4gICAgfVxuICAgIGNvbnN0IG1vbWVudERhdGEgPSBEYXRlVXRpbHMuZ2V0TW9tZW50KGRhdGUpO1xuICAgIGlmIChtb21lbnREYXRhKSB7XG4gICAgICByZXR1cm4gbW9tZW50RGF0YS5mb3JtYXQoZm9ybWF0KTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgc3RhdGljIGdldERhdGUoKSB7XG4gICAgbGV0IGRhdGU7XG4gICAgY29uc3QgZGF0ZVN0YXRlID0gU3RhdGVzVXRpbHMuZ2V0VmFsdWUoU3RhdGVOYW1lcy5zZXJ2ZXJUaW1lKTtcbiAgICBpZiAoZGF0ZVN0YXRlKSB7XG4gICAgICBkYXRlID0gZGF0ZVN0YXRlLmRhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRTdGFtcCgpIHtcbiAgICByZXR1cm4gRGF0ZVV0aWxzLmdldERhdGUoKS5nZXRUaW1lKCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0RGF0ZUJ5Tm93KHByZXNlbnQsIGR1ZT8pOiB7IHNlY29uZHM6IG51bWJlciwgbWVzc2FnZTogc3RyaW5nIH0ge1xuICAgIGlmICghcHJlc2VudCkge1xuICAgICAgcmV0dXJuIHtzZWNvbmRzOiAwLCBtZXNzYWdlOiAnJ307XG4gICAgfVxuICAgIGlmICghRGF0ZVV0aWxzLmlzRGF0ZShwcmVzZW50KSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcHJlc2VudCA9IG5ldyBEYXRlKHByZXNlbnQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBwcmVzZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFwcmVzZW50KSB7XG4gICAgICByZXR1cm4ge3NlY29uZHM6IDAsIG1lc3NhZ2U6ICcnfTtcbiAgICB9XG4gICAgbGV0IF9kdWUgPSBkdWU7XG4gICAgaWYgKCFfZHVlKSB7XG4gICAgICBfZHVlID0gbmV3IERhdGUoKTtcbiAgICB9XG4gICAgaWYgKCFEYXRlVXRpbHMuaXNEYXRlKF9kdWUpKSB7XG4gICAgICBfZHVlID0gbmV3IERhdGUoX2R1ZSk7XG4gICAgfVxuICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLnJvdW5kKE1hdGguYWJzKChfZHVlLmdldFRpbWUoKSAtIHByZXNlbnQuZ2V0VGltZSgpKSAvIDEwMDApKTtcbiAgICBjb25zdCBtaW51dGVzID0gTWF0aC5yb3VuZChNYXRoLmFicyhzZWNvbmRzIC8gNjApKTtcbiAgICBjb25zdCBob3VycyA9IE1hdGgucm91bmQoTWF0aC5hYnMobWludXRlcyAvIDYwKSk7XG4gICAgY29uc3QgZGF5cyA9IE1hdGgucm91bmQoTWF0aC5hYnMoaG91cnMgLyAyNCkpO1xuICAgIGNvbnN0IG1vbnRocyA9IE1hdGgucm91bmQoTWF0aC5hYnMoZGF5cyAvIDMwLjQxNikpO1xuICAgIGNvbnN0IHllYXJzID0gTWF0aC5yb3VuZChNYXRoLmFicyhkYXlzIC8gMzY1KSk7XG4gICAgbGV0IG1lc3NhZ2UgPSAnJztcbiAgICBpZiAoc2Vjb25kcyA8PSAxMCkge1xuICAgICAgbWVzc2FnZSA9IChfZHVlID4gcHJlc2VudCkgPyAn5Yia5YiaJyA6ICfpqazkuIonO1xuICAgIH0gZWxzZSBpZiAoc2Vjb25kcyA8PSAzMCkge1xuICAgICAgbWVzc2FnZSA9ICczMOenkic7XG4gICAgfSBlbHNlIGlmIChzZWNvbmRzIDw9IDkwKSB7XG4gICAgICBtZXNzYWdlID0gJzHliIbpkp8nO1xuICAgIH0gZWxzZSBpZiAobWludXRlcyA8PSA0NSkge1xuICAgICAgbWVzc2FnZSA9IG1pbnV0ZXMgKyAn5YiG6ZKfJztcbiAgICB9IGVsc2UgaWYgKG1pbnV0ZXMgPD0gOTApIHtcbiAgICAgIG1lc3NhZ2UgPSAnMeWwj+aXtic7XG4gICAgfSBlbHNlIGlmIChob3VycyA8PSAyMikge1xuICAgICAgbWVzc2FnZSA9IGhvdXJzICsgJ+Wwj+aXtic7XG4gICAgfSBlbHNlIGlmIChob3VycyA8PSAzNikge1xuICAgICAgbWVzc2FnZSA9ICcx5aSpJztcbiAgICB9IGVsc2UgaWYgKGRheXMgPD0gMjUpIHtcbiAgICAgIG1lc3NhZ2UgPSBkYXlzICsgJ+WkqSc7XG4gICAgfSBlbHNlIGlmIChkYXlzIDw9IDQ1KSB7XG4gICAgICBtZXNzYWdlID0gJzHkuKrmnIgnO1xuICAgIH0gZWxzZSBpZiAoZGF5cyA8PSAzNDUpIHtcbiAgICAgIG1lc3NhZ2UgPSBtb250aHMgKyAn5pyIJztcbiAgICB9IGVsc2UgaWYgKGRheXMgPD0gNTQ1KSB7XG4gICAgICBtZXNzYWdlID0gJzHlubQnO1xuICAgIH0gZWxzZSB7IC8vIChkYXlzID4gNTQ1KVxuICAgICAgbWVzc2FnZSA9IHllYXJzICsgJ+W5tCc7XG4gICAgfVxuICAgIGlmIChzZWNvbmRzID4gMTApIHtcbiAgICAgIG1lc3NhZ2UgKz0gKF9kdWUgPiBwcmVzZW50KSA/ICfliY0nIDogJ+WQjic7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzZWNvbmRzLFxuICAgICAgbWVzc2FnZVxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0VXBkYXRlU2Vjb25kcyhzZWNvbmRzOiBudW1iZXIpIHtcbiAgICBjb25zdCBtaW4gPSA2MDtcbiAgICBjb25zdCBociA9IG1pbiAqIDYwO1xuICAgIGNvbnN0IGRheSA9IGhyICogMjQ7XG4gICAgaWYgKHNlY29uZHMgPCBtaW4pIHsgLy8gbGVzcyB0aGFuIDEgbWluLCB1cGRhdGUgZXZlcnkgMiBzZWNzXG4gICAgICByZXR1cm4gMjtcbiAgICB9IGVsc2UgaWYgKHNlY29uZHMgPCBocikgeyAvLyBsZXNzIHRoYW4gYW4gaG91ciwgdXBkYXRlIGV2ZXJ5IDMwIHNlY3NcbiAgICAgIHJldHVybiAzMDtcbiAgICB9IGVsc2UgaWYgKHNlY29uZHMgPCBkYXkpIHsgLy8gbGVzcyB0aGVuIGEgZGF5LCB1cGRhdGUgZXZlcnkgNSBtaW5zXG4gICAgICByZXR1cm4gMzAwO1xuICAgIH0gZWxzZSB7IC8vIHVwZGF0ZSBldmVyeSBob3VyXG4gICAgICByZXR1cm4gMzYwMDtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0WWVhcihkYXRlPzogRGF0ZSkge1xuICAgIHJldHVybiAoZGF0ZSB8fCBEYXRlVXRpbHMuZ2V0RGF0ZSgpKS5nZXRGdWxsWWVhcigpO1xuICB9XG5cbiAgc3RhdGljIGdldE1vbnRoKGRhdGU/OiBEYXRlKSB7XG4gICAgcmV0dXJuIChkYXRlIHx8IERhdGVVdGlscy5nZXREYXRlKCkpLmdldE1vbnRoKCkgKyAxO1xuICB9XG5cbiAgc3RhdGljIGdldERheShkYXRlPzogRGF0ZSkge1xuICAgIHJldHVybiAoZGF0ZSB8fCBEYXRlVXRpbHMuZ2V0RGF0ZSgpKS5nZXREYXRlKCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0WWVzdGVyZGF5KCkge1xuICAgIHJldHVybiBEYXRlVXRpbHMuZ2V0RGF5KG5ldyBEYXRlKERhdGVVdGlscy5nZXREYXRlKCkuZ2V0VGltZSgpIC0gMjQgKiA2MCAqIDYwICogMTAwMCkpO1xuICB9XG5cbiAgc3RhdGljIGdldFRvbW9ycm93KCkge1xuICAgIHJldHVybiBEYXRlVXRpbHMuZ2V0RGF5KG5ldyBEYXRlKERhdGVVdGlscy5nZXREYXRlKCkuZ2V0VGltZSgpICsgMjQgKiA2MCAqIDYwICogMTAwMCkpO1xuICB9XG5cbiAgc3RhdGljIGdldExhc3RNb250aCgpIHtcbiAgICBjb25zdCBtb250aCA9IERhdGVVdGlscy5nZXRNb250aCgpIC0gMTtcbiAgICByZXR1cm4gbW9udGggPCAxID8gMTIgOiBtb250aDtcbiAgfVxuXG4gIHN0YXRpYyBnZXROZXh0TW9udGgoKSB7XG4gICAgY29uc3QgbW9udGggPSBEYXRlVXRpbHMuZ2V0TW9udGgoKSArIDE7XG4gICAgcmV0dXJuIG1vbnRoID4gMTIgPyAxIDogbW9udGg7XG4gIH1cbn1cbiJdfQ==