/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StateNames } from '@er/types';
import { CommonsUtils } from '../comm';
import { DateUtils } from '../date';
import { StatesUtils } from '../states';
export class ContextUtils {
    /**
     * @param {?=} date
     * @return {?}
     */
    static context(date) {
        return Object.assign({ now: DateUtils.getFormattedDateTime(), today: DateUtils.getFormattedDate(), year: DateUtils.getYear(date), lastYear: DateUtils.getYear(date) - 1, month: DateUtils.getMonth(date), lastMonth: DateUtils.getLastMonth(), day: DateUtils.getDay(date), yesterday: DateUtils.getYesterday() }, (/** @type {?} */ (StatesUtils.getValue(StateNames.user))) || {});
    }
    /**
     * @param {?} key
     * @return {?}
     */
    static get(key) {
        return ContextUtils.context()[key] || '';
    }
    /**
     * @param {?} data
     * @return {?}
     */
    static resolveVariables(data) {
        /** @type {?} */
        let resolved;
        if (CommonsUtils.isJson(data)) {
            resolved = ContextUtils.resolveJson(data);
        }
        else if (CommonsUtils.isArray(data)) {
            resolved = ContextUtils.resolveArray(data);
        }
        else if (CommonsUtils.isString(data)) {
            resolved = ContextUtils.resolveValue(data);
        }
        else {
            resolved = data;
        }
        return resolved;
    }
    /**
     * @private
     * @param {?} template
     * @return {?}
     */
    static resolveValue(template) {
        /** @type {?} */
        let resolved = template;
        if (CommonsUtils.isTemplateStr(template)) {
            resolved = CommonsUtils.templateStr(template, ContextUtils.context());
        }
        return resolved;
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    static resolveJson(data) {
        /** @type {?} */
        const resolved = {};
        for (const prop in data) {
            if (data[prop] !== undefined) {
                if (CommonsUtils.isJson(data[prop])) {
                    resolved[prop] = ContextUtils.resolveJson(data[prop]);
                }
                else if (CommonsUtils.isArray(data[prop])) {
                    resolved[prop] = ContextUtils.resolveArray(data[prop]);
                }
                else if (CommonsUtils.isString(data[prop])) {
                    resolved[prop] = ContextUtils.resolveValue(data[prop]);
                }
                else {
                    resolved[prop] = data[prop];
                }
            }
        }
        return resolved;
    }
    /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    static resolveArray(arr) {
        /** @type {?} */
        const resolved = [];
        arr.forEach(a => resolved.push(ContextUtils.resolveVariables(a)));
        return resolved;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdXRpbHMvIiwic291cmNlcyI6WyJsaWIvY29udGV4dC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBTyxNQUFNLFdBQVcsQ0FBQztBQUMzQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFDbEMsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUV0QyxNQUFNLE9BQU8sWUFBWTs7Ozs7SUFFdkIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFLO1FBQ2xCLHVCQUNFLEdBQUcsRUFBRSxTQUFTLENBQUMsb0JBQW9CLEVBQUUsRUFDckMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUNuQyxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFDN0IsUUFBUSxFQUFFLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUNyQyxLQUFLLEVBQUUsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFDL0IsU0FBUyxFQUFFLFNBQVMsQ0FBQyxZQUFZLEVBQUUsRUFDbkMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQzNCLFNBQVMsRUFBRSxTQUFTLENBQUMsWUFBWSxFQUFFLElBQ2hDLG1CQUFNLFdBQVcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFBLElBQUksRUFBRSxFQUNwRDtJQUNKLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHO1FBQ1osT0FBTyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNDLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUk7O1lBQ3RCLFFBQVE7UUFDWixJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDN0IsUUFBUSxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0M7YUFBTSxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDckMsUUFBUSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUM7YUFBTSxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEMsUUFBUSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUM7YUFBTTtZQUNMLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDakI7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDOzs7Ozs7SUFFTyxNQUFNLENBQUMsWUFBWSxDQUFDLFFBQWdCOztZQUN0QyxRQUFRLEdBQUcsUUFBUTtRQUN2QixJQUFJLFlBQVksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDeEMsUUFBUSxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZFO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQzs7Ozs7O0lBRU8sTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFROztjQUMzQixRQUFRLEdBQUcsRUFBRTtRQUNuQixLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksRUFBRTtZQUN2QixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQzVCLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtvQkFDbkMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7aUJBQ3ZEO3FCQUFNLElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtvQkFDM0MsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7aUJBQ3hEO3FCQUFNLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtvQkFDNUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7aUJBQ3hEO3FCQUFNO29CQUNMLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzdCO2FBQ0Y7U0FDRjtRQUNELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7Ozs7OztJQUVPLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBVTs7Y0FDOUIsUUFBUSxHQUFHLEVBQUU7UUFDbkIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRSxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N0YXRlTmFtZXMsIFVzZXJ9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge0NvbW1vbnNVdGlsc30gZnJvbSAnLi4vY29tbSc7XG5pbXBvcnQge0RhdGVVdGlsc30gZnJvbSAnLi4vZGF0ZSc7XG5pbXBvcnQge1N0YXRlc1V0aWxzfSBmcm9tICcuLi9zdGF0ZXMnO1xuXG5leHBvcnQgY2xhc3MgQ29udGV4dFV0aWxzIHtcblxuICBzdGF0aWMgY29udGV4dChkYXRlPyk6IHt9IHtcbiAgICByZXR1cm4ge1xuICAgICAgbm93OiBEYXRlVXRpbHMuZ2V0Rm9ybWF0dGVkRGF0ZVRpbWUoKSxcbiAgICAgIHRvZGF5OiBEYXRlVXRpbHMuZ2V0Rm9ybWF0dGVkRGF0ZSgpLFxuICAgICAgeWVhcjogRGF0ZVV0aWxzLmdldFllYXIoZGF0ZSksXG4gICAgICBsYXN0WWVhcjogRGF0ZVV0aWxzLmdldFllYXIoZGF0ZSkgLSAxLFxuICAgICAgbW9udGg6IERhdGVVdGlscy5nZXRNb250aChkYXRlKSxcbiAgICAgIGxhc3RNb250aDogRGF0ZVV0aWxzLmdldExhc3RNb250aCgpLFxuICAgICAgZGF5OiBEYXRlVXRpbHMuZ2V0RGF5KGRhdGUpLFxuICAgICAgeWVzdGVyZGF5OiBEYXRlVXRpbHMuZ2V0WWVzdGVyZGF5KCksXG4gICAgICAuLi48VXNlcj5TdGF0ZXNVdGlscy5nZXRWYWx1ZShTdGF0ZU5hbWVzLnVzZXIpIHx8IHt9XG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQoa2V5KSB7XG4gICAgcmV0dXJuIENvbnRleHRVdGlscy5jb250ZXh0KClba2V5XSB8fCAnJztcbiAgfVxuXG4gIHN0YXRpYyByZXNvbHZlVmFyaWFibGVzKGRhdGEpIHtcbiAgICBsZXQgcmVzb2x2ZWQ7XG4gICAgaWYgKENvbW1vbnNVdGlscy5pc0pzb24oZGF0YSkpIHtcbiAgICAgIHJlc29sdmVkID0gQ29udGV4dFV0aWxzLnJlc29sdmVKc29uKGRhdGEpO1xuICAgIH0gZWxzZSBpZiAoQ29tbW9uc1V0aWxzLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgIHJlc29sdmVkID0gQ29udGV4dFV0aWxzLnJlc29sdmVBcnJheShkYXRhKTtcbiAgICB9IGVsc2UgaWYgKENvbW1vbnNVdGlscy5pc1N0cmluZyhkYXRhKSkge1xuICAgICAgcmVzb2x2ZWQgPSBDb250ZXh0VXRpbHMucmVzb2x2ZVZhbHVlKGRhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNvbHZlZCA9IGRhdGE7XG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlZDtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHJlc29sdmVWYWx1ZSh0ZW1wbGF0ZTogc3RyaW5nKSB7XG4gICAgbGV0IHJlc29sdmVkID0gdGVtcGxhdGU7XG4gICAgaWYgKENvbW1vbnNVdGlscy5pc1RlbXBsYXRlU3RyKHRlbXBsYXRlKSkge1xuICAgICAgcmVzb2x2ZWQgPSBDb21tb25zVXRpbHMudGVtcGxhdGVTdHIodGVtcGxhdGUsIENvbnRleHRVdGlscy5jb250ZXh0KCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyByZXNvbHZlSnNvbihkYXRhOiB7fSkge1xuICAgIGNvbnN0IHJlc29sdmVkID0ge307XG4gICAgZm9yIChjb25zdCBwcm9wIGluIGRhdGEpIHtcbiAgICAgIGlmIChkYXRhW3Byb3BdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKENvbW1vbnNVdGlscy5pc0pzb24oZGF0YVtwcm9wXSkpIHtcbiAgICAgICAgICByZXNvbHZlZFtwcm9wXSA9IENvbnRleHRVdGlscy5yZXNvbHZlSnNvbihkYXRhW3Byb3BdKTtcbiAgICAgICAgfSBlbHNlIGlmIChDb21tb25zVXRpbHMuaXNBcnJheShkYXRhW3Byb3BdKSkge1xuICAgICAgICAgIHJlc29sdmVkW3Byb3BdID0gQ29udGV4dFV0aWxzLnJlc29sdmVBcnJheShkYXRhW3Byb3BdKTtcbiAgICAgICAgfSBlbHNlIGlmIChDb21tb25zVXRpbHMuaXNTdHJpbmcoZGF0YVtwcm9wXSkpIHtcbiAgICAgICAgICByZXNvbHZlZFtwcm9wXSA9IENvbnRleHRVdGlscy5yZXNvbHZlVmFsdWUoZGF0YVtwcm9wXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZWRbcHJvcF0gPSBkYXRhW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlZDtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHJlc29sdmVBcnJheShhcnI6IGFueVtdKSB7XG4gICAgY29uc3QgcmVzb2x2ZWQgPSBbXTtcbiAgICBhcnIuZm9yRWFjaChhID0+IHJlc29sdmVkLnB1c2goQ29udGV4dFV0aWxzLnJlc29sdmVWYXJpYWJsZXMoYSkpKTtcbiAgICByZXR1cm4gcmVzb2x2ZWQ7XG4gIH1cbn1cbiJdfQ==