/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BehaviorSubject } from 'rxjs';
import { CommonsUtils } from '../comm';
/** @type {?} */
const APP_STORE = new BehaviorSubject({});
export class StatesUtils {
    /**
     * @return {?}
     */
    static getStore() {
        return APP_STORE;
    }
    /**
     * @param {?} path
     * @param {?=} value
     * @param {?=} preserved
     * @return {?}
     */
    static create(path, value, preserved) {
        /** @type {?} */
        const storeItem = StatesUtils.getStoreItem(path, true);
        storeItem.state.next(value);
        if (preserved) {
            storeItem.preserved = preserved;
        }
        return storeItem.state;
    }
    /**
     * @param {?} path
     * @param {?=} createWhenAbsent
     * @return {?}
     */
    static get(path, createWhenAbsent) {
        /** @type {?} */
        const storeItem = StatesUtils.getStoreItem(path, createWhenAbsent);
        if (storeItem) {
            return storeItem.state;
        }
        else {
            return undefined;
        }
    }
    /**
     * @param {...?} path
     * @return {?}
     */
    static observe(...path) {
        return StatesUtils.get(path, true);
    }
    /**
     * @param {...?} path
     * @return {?}
     */
    static toggle(...path) {
        /** @type {?} */
        const state = StatesUtils.get(path);
        state.next(!!!state.value);
        return state;
    }
    /**
     * @param {?} path
     * @return {?}
     */
    static inc(path) {
        /** @type {?} */
        const state = StatesUtils.get(path, true);
        /** @type {?} */
        let newValue = 0;
        if (state.value) {
            newValue = state.value + 1;
        }
        state.next(newValue);
        return state;
    }
    /**
     * @param {?} path
     * @return {?}
     */
    static dec(path) {
        /** @type {?} */
        const state = StatesUtils.get(path, true);
        /** @type {?} */
        let newValue = 0;
        if (state.value) {
            newValue = state.value - 1;
        }
        state.next(newValue);
        return state;
    }
    /**
     * @param {?} path
     * @param {?} offset
     * @return {?}
     */
    static add(path, offset) {
        /** @type {?} */
        const state = StatesUtils.get(path, true);
        /** @type {?} */
        let newValue = 0;
        if (state.value) {
            newValue = state.value + offset;
        }
        state.next(newValue);
        return state;
    }
    /**
     * used to clear some state properties
     * @param {?} path
     * @param {?} final
     * @return {?}
     */
    static set(path, final) {
        /** @type {?} */
        const state = StatesUtils.get(path, true);
        if (!state.value) {
            return StatesUtils.create(path, final);
        }
        else {
            state.next(final);
            return state;
        }
    }
    /**
     * @param {?} path
     * @param {?} key
     * @return {?}
     */
    static delete(path, key) {
        /** @type {?} */
        const state = StatesUtils.get(path);
        if (state.value) {
            state.next(CommonsUtils.unset(state.value, key));
        }
    }
    /**
     * used to update state properties when patch has no undefined values
     * @param {?} path
     * @param {?} patch
     * @return {?}
     */
    static update(path, patch) {
        /** @type {?} */
        const state = StatesUtils.get(path, true);
        if (!state.value) {
            return StatesUtils.create(path, patch);
        }
        else {
            state.next(CommonsUtils.merge({}, state.value, patch));
            return state;
        }
    }
    /**
     * @param {...?} path
     * @return {?}
     */
    static getValue(...path) {
        /** @type {?} */
        const state = StatesUtils.get(path);
        return state ? Object.assign({}, state.value) : undefined;
    }
    /**
     * @param {...?} path
     * @return {?}
     */
    static deleteState(...path) {
        /** @type {?} */
        const state = StatesUtils.get(path);
        CommonsUtils.unset(APP_STORE.value, CommonsUtils.flatPath(path));
        if (state) {
            state.next(undefined);
            state.complete();
        }
        APP_STORE.next(APP_STORE.value);
    }
    /**
     * @private
     * @param {?} path
     * @param {?=} createWhenAbsent
     * @return {?}
     */
    static getStoreItem(path, createWhenAbsent) {
        /** @type {?} */
        const key = CommonsUtils.flatPath(path);
        /** @type {?} */
        let storeItem = CommonsUtils.get(APP_STORE.value, key);
        if (!storeItem && createWhenAbsent) {
            storeItem = {
                state: new BehaviorSubject(undefined),
                createdAt: new Date().getMilliseconds()
            };
            /** @type {?} */
            const value = CommonsUtils.set(APP_STORE.value, key, storeItem);
            APP_STORE.next(value);
        }
        return storeItem;
    }
}
//# sourceMappingURL=data:application/json;base64,