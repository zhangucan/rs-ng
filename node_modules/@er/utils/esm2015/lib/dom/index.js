/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class DomUtils {
    constructor() {
        this.calculatedScrollbarWidth = null;
    }
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    static addClass(element, className) {
        if (element.classList) {
            element.classList.add(className);
        }
        else {
            element.className += ' ' + className;
        }
    }
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    static addClasses(element, className) {
        /** @type {?} */
        const styles = className.split(' ');
        for (let i = 0; i < styles.length; i++) {
            DomUtils.addClass(element, styles[i]);
        }
    }
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    static removeClass(element, className) {
        if (element.classList) {
            element.classList.remove(className);
        }
        else {
            element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
        }
    }
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    static hasClass(element, className) {
        if (element.classList) {
            return element.classList.contains(className);
        }
        else {
            return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
        }
    }
    /**
     * @param {?} element
     * @return {?}
     */
    static siblings(element) {
        /** @type {?} */
        const children = element.parentNode.children.filter(child => child !== element);
        return children;
    }
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    static find(element, selector) {
        return element.querySelectorAll(selector);
    }
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    static findSingle(element, selector) {
        return element.querySelector(selector);
    }
    /**
     * @param {?} element
     * @return {?}
     */
    static index(element) {
        /** @type {?} */
        const children = element.parentNode.childNodes;
        /** @type {?} */
        let num = 0;
        for (let i = 0; i < children.length; i++) {
            if (children[i] == element)
                return num;
            if (children[i].nodeType == 1)
                num++;
        }
        return -1;
    }
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    static relativePosition(element, target) {
        /** @type {?} */
        const elementDimensions = element.offsetParent ? {
            width: element.offsetWidth,
            height: element.offsetHeight
        } : this.getHiddenElementDimensions(element);
        /** @type {?} */
        const targetHeight = target.offsetHeight;
        /** @type {?} */
        const targetWidth = target.offsetWidth;
        /** @type {?} */
        const targetOffset = target.getBoundingClientRect();
        /** @type {?} */
        const windowScrollTop = this.getWindowScrollTop();
        /** @type {?} */
        const viewport = this.getViewport();
        /** @type {?} */
        let top;
        /** @type {?} */
        let left;
        if ((targetOffset.top + targetHeight + elementDimensions.height) > viewport.height) {
            top = -1 * (elementDimensions.height);
            if (targetOffset.top + top < 0) {
                top = 0;
            }
        }
        else {
            top = targetHeight;
        }
        if ((targetOffset.left + elementDimensions.width) > viewport.width) {
            left = targetWidth - elementDimensions.width;
        }
        else {
            left = 0;
        }
        element.style.top = top + 'px';
        element.style.left = left + 'px';
    }
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    static absolutePosition(element, target) {
        /** @type {?} */
        const elementDimensions = element.offsetParent ? {
            width: element.offsetWidth,
            height: element.offsetHeight
        } : this.getHiddenElementDimensions(element);
        /** @type {?} */
        const elementOuterHeight = elementDimensions.height;
        /** @type {?} */
        const elementOuterWidth = elementDimensions.width;
        /** @type {?} */
        const targetOuterHeight = target.offsetHeight;
        /** @type {?} */
        const targetOuterWidth = target.offsetWidth;
        /** @type {?} */
        const targetOffset = target.getBoundingClientRect();
        /** @type {?} */
        const windowScrollTop = this.getWindowScrollTop();
        /** @type {?} */
        const windowScrollLeft = this.getWindowScrollLeft();
        /** @type {?} */
        const viewport = this.getViewport();
        /** @type {?} */
        let top;
        /** @type {?} */
        let left;
        if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {
            top = targetOffset.top + windowScrollTop - elementOuterHeight;
            if (top < 0) {
                top = 0 + windowScrollTop;
            }
        }
        else {
            top = targetOuterHeight + targetOffset.top + windowScrollTop;
        }
        if (targetOffset.left + targetOuterWidth + elementOuterWidth > viewport.width) {
            left = targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth;
        }
        else {
            left = targetOffset.left + windowScrollLeft;
        }
        element.style.top = top + 'px';
        element.style.left = left + 'px';
    }
    /**
     * @param {?} element
     * @return {?}
     */
    static getHiddenElementOuterHeight(element) {
        element.style.visibility = 'hidden';
        element.style.display = 'block';
        /** @type {?} */
        const elementHeight = element.offsetHeight;
        element.style.display = 'none';
        element.style.visibility = 'visible';
        return elementHeight;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    static getHiddenElementOuterWidth(element) {
        element.style.visibility = 'hidden';
        element.style.display = 'block';
        /** @type {?} */
        const elementWidth = element.offsetWidth;
        element.style.display = 'none';
        element.style.visibility = 'visible';
        return elementWidth;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    static getHiddenElementDimensions(element) {
        /** @type {?} */
        const dimensions = {};
        element.style.visibility = 'hidden';
        element.style.display = 'block';
        dimensions.width = element.offsetWidth;
        dimensions.height = element.offsetHeight;
        element.style.display = 'none';
        element.style.visibility = 'visible';
        return dimensions;
    }
    /**
     * @param {?} container
     * @param {?} item
     * @return {?}
     */
    static scrollInView(container, item) {
        /** @type {?} */
        const borderTopValue = getComputedStyle(container).getPropertyValue('borderTopWidth');
        /** @type {?} */
        const borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;
        /** @type {?} */
        const paddingTopValue = getComputedStyle(container).getPropertyValue('paddingTop');
        /** @type {?} */
        const paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;
        /** @type {?} */
        const containerRect = container.getBoundingClientRect();
        /** @type {?} */
        const itemRect = item.getBoundingClientRect();
        /** @type {?} */
        const offset = (itemRect.top + document.body.scrollTop) - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;
        /** @type {?} */
        const scroll = container.scrollTop;
        /** @type {?} */
        const elementHeight = container.clientHeight;
        /** @type {?} */
        const itemHeight = this.getOuterHeight(item);
        if (offset < 0) {
            container.scrollTop = scroll + offset;
        }
        else if ((offset + itemHeight) > elementHeight) {
            container.scrollTop = scroll + offset - elementHeight + itemHeight;
        }
    }
    /**
     * @param {?} element
     * @param {?} duration
     * @return {?}
     */
    static fadeIn(element, duration) {
        element.style.opacity = 0;
        /** @type {?} */
        let last = +new Date();
        /** @type {?} */
        let opacity = 0;
        /** @type {?} */
        const tick = function () {
            opacity = +element.style.opacity.replace(',', '.') + (new Date().getTime() - last) / duration;
            element.style.opacity = opacity;
            last = +new Date();
            if (+opacity < 1) {
                (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);
            }
        };
        tick();
    }
    /**
     * @param {?} element
     * @param {?} ms
     * @return {?}
     */
    static fadeOut(element, ms) {
        /** @type {?} */
        let opacity = 1;
        /** @type {?} */
        const interval = 50;
        /** @type {?} */
        const duration = ms;
        /** @type {?} */
        const gap = interval / duration;
        /**
         * @return {?}
         */
        function intervalCallback() {
            opacity = opacity - gap;
            if (opacity <= 0) {
                opacity = 0;
                clearInterval(fading);
            }
            element.style.opacity = opacity;
        }
        /** @type {?} */
        const fading = setInterval(intervalCallback, interval);
    }
    /**
     * @return {?}
     */
    static getWindowScrollTop() {
        /** @type {?} */
        const doc = document.documentElement;
        return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
    }
    /**
     * @return {?}
     */
    static getWindowScrollLeft() {
        /** @type {?} */
        const doc = document.documentElement;
        return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
    }
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    static matches(element, selector) {
        /** @type {?} */
        const p = Element.prototype;
        /** @type {?} */
        const f = p['matches'] || p.webkitMatchesSelector || function (s) {
            return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
        };
        return f.call(element, selector);
    }
    /**
     * @param {?} el
     * @param {?=} margin
     * @return {?}
     */
    static getOuterWidth(el, margin) {
        /** @type {?} */
        let width = el.offsetWidth;
        if (margin) {
            /** @type {?} */
            const style = getComputedStyle(el);
            width += parseFloat(style.marginLeft) + parseFloat(style.marginRight);
        }
        return width;
    }
    /**
     * @param {?} el
     * @return {?}
     */
    static getHorizontalPadding(el) {
        /** @type {?} */
        const style = getComputedStyle(el);
        return parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
    }
    /**
     * @param {?} el
     * @return {?}
     */
    static getHorizontalMargin(el) {
        /** @type {?} */
        const style = getComputedStyle(el);
        return parseFloat(style.marginLeft) + parseFloat(style.marginRight);
    }
    /**
     * @param {?} el
     * @return {?}
     */
    static innerWidth(el) {
        /** @type {?} */
        let width = el.offsetWidth;
        /** @type {?} */
        const style = getComputedStyle(el);
        width += parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
        return width;
    }
    /**
     * @param {?} el
     * @return {?}
     */
    static width(el) {
        /** @type {?} */
        let width = el.offsetWidth;
        /** @type {?} */
        const style = getComputedStyle(el);
        width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
        return width;
    }
    /**
     * @param {?} el
     * @return {?}
     */
    static getInnerHeight(el) {
        /** @type {?} */
        let height = el.offsetHeight;
        /** @type {?} */
        const style = getComputedStyle(el);
        height += parseFloat(style.paddingTop) + parseFloat(style.paddingBottom);
        return height;
    }
    /**
     * @param {?} el
     * @param {?=} margin
     * @return {?}
     */
    static getOuterHeight(el, margin) {
        /** @type {?} */
        let height = el.offsetHeight;
        if (margin) {
            /** @type {?} */
            const style = getComputedStyle(el);
            height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);
        }
        return height;
    }
    /**
     * @param {?} el
     * @return {?}
     */
    static getHeight(el) {
        /** @type {?} */
        let height = el.offsetHeight;
        /** @type {?} */
        const style = getComputedStyle(el);
        height -= parseFloat(style.paddingTop) + parseFloat(style.paddingBottom) + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);
        return height;
    }
    /**
     * @param {?} el
     * @return {?}
     */
    static getWidth(el) {
        /** @type {?} */
        let width = el.offsetWidth;
        /** @type {?} */
        const style = getComputedStyle(el);
        width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight) + parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth);
        return width;
    }
    /**
     * @return {?}
     */
    static getViewport() {
        /** @type {?} */
        const win = window;
        /** @type {?} */
        const d = document;
        /** @type {?} */
        const e = d.documentElement;
        /** @type {?} */
        const g = d.getElementsByTagName('body')[0];
        /** @type {?} */
        const w = win.innerWidth || e.clientWidth || g.clientWidth;
        /** @type {?} */
        const h = win.innerHeight || e.clientHeight || g.clientHeight;
        return { width: w, height: h };
    }
    /**
     * @param {?} el
     * @return {?}
     */
    static getOffset(el) {
        /** @type {?} */
        const rect = el.getBoundingClientRect();
        return {
            top: rect.top + document.body.scrollTop,
            left: rect.left + document.body.scrollLeft
        };
    }
    /**
     * @return {?}
     */
    static getUserAgent() {
        return navigator.userAgent;
    }
    /**
     * @return {?}
     */
    static resolveUserAgent() {
        /** @type {?} */
        const ua = navigator.userAgent.toLowerCase();
        /** @type {?} */
        const match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
            /(webkit)[ \/]([\w.]+)/.exec(ua) ||
            /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
            /(msie) ([\w.]+)/.exec(ua) ||
            ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
            [];
        return {
            browser: match[1] || '',
            version: match[2] || '0'
        };
    }
    /**
     * @param {?} tag
     * @param {?=} classNames
     * @return {?}
     */
    static createElement(tag, classNames) {
        /** @type {?} */
        const element = document.createElement(tag);
        if (classNames) {
            DomUtils.addClasses(element, classNames);
        }
        return element;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    static remove(element) {
        element.parentElement.removeChild(element);
    }
    /**
     * @param {?} element
     * @return {?}
     */
    static removeHost(element) {
        /** @type {?} */
        const nativeElement = element;
        /** @type {?} */
        const parentElement = nativeElement.parentElement;
        while (nativeElement.firstChild) {
            parentElement.insertBefore(nativeElement.firstChild, nativeElement);
        }
        parentElement.removeChild(nativeElement);
    }
    /**
     * @return {?}
     */
    isIE() {
        /** @type {?} */
        const ua = window.navigator.userAgent;
        /** @type {?} */
        const msie = ua.indexOf('MSIE ');
        if (msie > 0) {
            // IE 10 or older => return version number
            return true;
        }
        /** @type {?} */
        const trident = ua.indexOf('Trident/');
        if (trident > 0) {
            // IE 11 => return version number
            /** @type {?} */
            const rv = ua.indexOf('rv:');
            return true;
        }
        /** @type {?} */
        const edge = ua.indexOf('Edge/');
        if (edge > 0) {
            // Edge (IE 12+) => return version number
            return true;
        }
        // other browser
        return false;
    }
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    appendChild(element, target) {
        if (this.isElement(target)) {
            target.appendChild(element);
        }
        else if (target.el && target.el.nativeElement) {
            target.el.nativeElement.appendChild(element);
        }
        else {
            throw new Error('Cannot append ' + target + ' to ' + element);
        }
    }
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    removeChild(element, target) {
        if (this.isElement(target)) {
            target.removeChild(element);
        }
        else if (target.el && target.el.nativeElement) {
            target.el.nativeElement.removeChild(element);
        }
        else {
            throw new Error('Cannot remove ' + element + ' from ' + target);
        }
    }
    /**
     * @param {?} element
     * @param {?} methodName
     * @param {?=} args
     * @return {?}
     */
    invokeElementMethod(element, methodName, args) {
        ((/** @type {?} */ (element)))[methodName].apply(element, args);
    }
    /**
     * @return {?}
     */
    clearSelection() {
        if (window.getSelection) {
            if (window.getSelection().empty) {
                window.getSelection().empty();
            }
            else if (window.getSelection().removeAllRanges && window.getSelection().rangeCount > 0 && window.getSelection().getRangeAt(0).getClientRects().length > 0) {
                window.getSelection().removeAllRanges();
            }
        }
        else if (document['selection'] && document['selection'].empty) {
            try {
                document['selection'].empty();
            }
            catch (error) {
                //ignore IE bug
            }
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    isElement(obj) {
        return (typeof HTMLElement === 'object' ? obj instanceof HTMLElement :
            obj && typeof obj === 'object' && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === 'string');
    }
    /**
     * @return {?}
     */
    getBrowser() {
        if (!this.browser) {
            /** @type {?} */
            const matched = DomUtils.resolveUserAgent();
            this.browser = {};
            if (matched.browser) {
                this.browser[matched.browser] = true;
                this.browser['version'] = matched.version;
            }
            if (this.browser['chrome']) {
                this.browser['webkit'] = true;
            }
            else if (this.browser['webkit']) {
                this.browser['safari'] = true;
            }
        }
        return this.browser;
    }
    /**
     * @return {?}
     */
    calculateScrollbarWidth() {
        if (this.calculatedScrollbarWidth !== null) {
            return this.calculatedScrollbarWidth;
        }
        /** @type {?} */
        const scrollDiv = document.createElement('div');
        scrollDiv.className = 'ui-scrollbar-measure';
        document.body.appendChild(scrollDiv);
        /** @type {?} */
        const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        this.calculatedScrollbarWidth = scrollbarWidth;
        return scrollbarWidth;
    }
}
DomUtils.zindex = 1000;
if (false) {
    /** @type {?} */
    DomUtils.zindex;
    /**
     * @type {?}
     * @private
     */
    DomUtils.prototype.calculatedScrollbarWidth;
    /**
     * @type {?}
     * @private
     */
    DomUtils.prototype.browser;
}
//# sourceMappingURL=data:application/json;base64,