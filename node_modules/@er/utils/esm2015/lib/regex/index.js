/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { RegPatterns } from '@er/types';
import { CommonsUtils } from '../comm';
export class RegUtils {
    /**
     * @param {?} regexStr
     * @return {?}
     */
    static escapeRegexp(regexStr) {
        /** @type {?} */
        const result = regexStr.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
        return result;
    }
    /**
     * @param {?} pattern
     * @return {?}
     */
    static getRegexps(pattern) {
        if (!pattern) {
            return [];
        }
        /** @type {?} */
        const exps = [];
        /** @type {?} */
        const patterns = [];
        if (CommonsUtils.isString(pattern)) {
            patterns.push(pattern);
        }
        else {
            patterns.concat(pattern);
        }
        for (const p of patterns) {
            if (p) {
                if (p.indexOf(',') > 0) {
                    exps.concat(RegUtils.getRegexps(p.split(',')));
                }
                else {
                    exps.push(RegUtils.getRegexp(p));
                }
            }
        }
        return exps;
    }
    /**
     * @param {?} src
     * @param {?} pattern
     * @return {?}
     */
    static test(src, pattern) {
        /** @type {?} */
        let regex;
        if (typeof pattern === 'string') {
            regex = new RegExp(pattern);
        }
        else {
            regex = pattern;
        }
        if (regex instanceof RegExp) {
            return regex.test(src);
        }
        else if (regex && Array.isArray(regex)) {
            return regex.every((item) => {
                return RegUtils.test(src, item);
            });
        }
        else if (regex && Array.isArray(regex.and)) {
            return regex.and.every((item) => {
                return RegUtils.test(src, item);
            });
        }
        else if (regex && Array.isArray(regex.or)) {
            return regex.or.some((item) => {
                return RegUtils.test(src, item);
            });
        }
        else if (regex && regex.not) {
            return !RegUtils.test(src, regex.not);
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} string
     * @param {?} regex
     * @return {?}
     */
    static exec(string, regex) {
        /** @type {?} */
        const self = this;
        if (typeof regex === 'string') {
            regex = new RegExp(regex);
        }
        if (regex instanceof RegExp) {
            return regex.exec(string);
        }
        else if (regex && Array.isArray(regex)) {
            return regex.reduce(function (res, item) {
                return (!!res) ? res : self.exec(string, item);
            }, null);
        }
        else {
            return null;
        }
    }
    /**
     * @private
     * @param {?} pattern
     * @return {?}
     */
    static getRegexp(pattern) {
        /** @type {?} */
        let exp = null;
        if (!pattern) {
            return null;
        }
        if (CommonsUtils.isString(pattern)) {
            if (pattern === 'letter') {
                exp = RegPatterns.letter;
            }
            else if (pattern === 'digit') {
                exp = RegPatterns.digit;
            }
            else if (pattern === 'character') {
                exp = RegPatterns.character;
            }
            else if (pattern === 'integer') {
                exp = RegPatterns.integer;
            }
            else if (pattern === 'numeric') {
                exp = RegPatterns.numeric;
            }
            else {
                exp = new RegExp((/** @type {?} */ (pattern)));
            }
        }
        else {
            exp = (/** @type {?} */ (pattern));
        }
        return exp;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdXRpbHMvIiwic291cmNlcyI6WyJsaWIvcmVnZXgvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUVyQyxNQUFNLE9BQU8sUUFBUTs7Ozs7SUFFbkIsTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFnQjs7Y0FDNUIsTUFBTSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLEVBQUUsTUFBTSxDQUFDO1FBQ2pFLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUE4QztRQUM5RCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osT0FBTyxFQUFFLENBQUM7U0FDWDs7Y0FDSyxJQUFJLEdBQUcsRUFBRTs7Y0FDVCxRQUFRLEdBQUcsRUFBRTtRQUNuQixJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbEMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN4QjthQUFNO1lBQ0wsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMxQjtRQUNELEtBQUssTUFBTSxDQUFDLElBQUksUUFBUSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxFQUFFO2dCQUNMLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDaEQ7cUJBQU07b0JBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFD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O2dCQUN4QixHQUFHLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQzthQUMxQjtpQkFBTSxJQUFJLE9BQU8sS0FBSyxPQUFPLEVBQUU7Z0JBQzlCLEdBQUcsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDO2FBQ3pCO2lCQUFNLElBQUksT0FBTyxLQUFLLFdBQVcsRUFBRTtnQkFDbEMsR0FBRyxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUM7YUFDN0I7aUJBQU0sSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO2dCQUNoQyxHQUFHLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQzthQUMzQjtpQkFBTSxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7Z0JBQ2hDLEdBQUcsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDO2FBQzNCO2lCQUFNO2dCQUNMLEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxtQkFBQSxPQUFPLEVBQVUsQ0FBQyxDQUFDO2FBQ3JDO1NBQ0Y7YUFBTTtZQUNMLEdBQUcsR0FBRyxtQkFBQSxPQUFPLEVBQVUsQ0FBQztTQUN6QjtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSZWdQYXR0ZXJuc30gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICcuLi9jb21tJztcblxuZXhwb3J0IGNsYXNzIFJlZ1V0aWxzIHtcblxuICBzdGF0aWMgZXNjYXBlUmVnZXhwKHJlZ2V4U3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHJlc3VsdCA9IHJlZ2V4U3RyLnJlcGxhY2UoLyhbLj8qK14kW1xcXVxcXFwoKXt9fC1dKS9nLCAnXFxcXCQxJyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRSZWdleHBzKHBhdHRlcm46IHN0cmluZyB8IHN0cmluZ1tdIHwgUmVnRXhwIHwgUmVnRXhwW10pOiBSZWdFeHBbXSB7XG4gICAgaWYgKCFwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IGV4cHMgPSBbXTtcbiAgICBjb25zdCBwYXR0ZXJucyA9IFtdO1xuICAgIGlmIChDb21tb25zVXRpbHMuaXNTdHJpbmcocGF0dGVybikpIHtcbiAgICAgIHBhdHRlcm5zLnB1c2gocGF0dGVybik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdHRlcm5zLmNvbmNhdChwYXR0ZXJuKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBwIG9mIHBhdHRlcm5zKSB7XG4gICAgICBpZiAocCkge1xuICAgICAgICBpZiAocC5pbmRleE9mKCcsJykgPiAwKSB7XG4gICAgICAgICAgZXhwcy5jb25jYXQoUmVnVXRpbHMuZ2V0UmVnZXhwcyhwLnNwbGl0KCcsJykpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBleHBzLnB1c2goUmVnVXRpbHMuZ2V0UmVnZXhwKHApKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXhwcztcbiAgfVxuXG4gIHN0YXRpYyB0ZXN0KHNyYzogc3RyaW5nLCBwYXR0ZXJuOiBzdHJpbmcgfCBSZWdFeHAgfCBzdHJpbmdbXSB8IFJlZ0V4cFtdIHwgeyBhZG4/OiBhbnlbXSwgb3I/OiBhbnlbXSwgbm90PzogYW55W10gfSk6IGFueSB7XG4gICAgbGV0IHJlZ2V4O1xuICAgIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cChwYXR0ZXJuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVnZXggPSBwYXR0ZXJuO1xuICAgIH1cbiAgICBpZiAocmVnZXggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJldHVybiByZWdleC50ZXN0KHNyYyk7XG4gICAgfSBlbHNlIGlmIChyZWdleCAmJiBBcnJheS5pc0FycmF5KHJlZ2V4KSkge1xuICAgICAgcmV0dXJuIHJlZ2V4LmV2ZXJ5KChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgcmV0dXJuIFJlZ1V0aWxzLnRlc3Qoc3JjLCBpdGVtKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocmVnZXggJiYgQXJyYXkuaXNBcnJheShyZWdleC5hbmQpKSB7XG4gICAgICByZXR1cm4gcmVnZXguYW5kLmV2ZXJ5KChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgcmV0dXJuIFJlZ1V0aWxzLnRlc3Qoc3JjLCBpdGVtKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocmVnZXggJiYgQXJyYXkuaXNBcnJheShyZWdleC5vcikpIHtcbiAgICAgIHJldHVybiByZWdleC5vci5zb21lKChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgcmV0dXJuIFJlZ1V0aWxzLnRlc3Qoc3JjLCBpdGVtKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocmVnZXggJiYgcmVnZXgubm90KSB7XG4gICAgICByZXR1cm4gIVJlZ1V0aWxzLnRlc3Qoc3JjLCByZWdleC5ub3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGV4ZWMoc3RyaW5nOiBzdHJpbmcsIHJlZ2V4OiBhbnkpOiBhbnkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgcmVnZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICByZWdleCA9IG5ldyBSZWdFeHAocmVnZXgpO1xuICAgIH1cblxuICAgIGlmIChyZWdleCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcmV0dXJuIHJlZ2V4LmV4ZWMoc3RyaW5nKTtcbiAgICB9IGVsc2UgaWYgKHJlZ2V4ICYmIEFycmF5LmlzQXJyYXkocmVnZXgpKSB7XG4gICAgICByZXR1cm4gcmVnZXgucmVkdWNlKGZ1bmN0aW9uIChyZXM6IGFueSwgaXRlbTogYW55KSB7XG4gICAgICAgIHJldHVybiAoISFyZXMpID8gcmVzIDogc2VsZi5leGVjKHN0cmluZywgaXRlbSk7XG4gICAgICB9LCBudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgZ2V0UmVnZXhwKHBhdHRlcm46IHN0cmluZyB8IFJlZ0V4cCk6IFJlZ0V4cCB7XG4gICAgbGV0IGV4cDogUmVnRXhwID0gbnVsbDtcbiAgICBpZiAoIXBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoQ29tbW9uc1V0aWxzLmlzU3RyaW5nKHBhdHRlcm4pKSB7XG4gICAgICBpZiAocGF0dGVybiA9PT0gJ2xldHRlcicpIHtcbiAgICAgICAgZXhwID0gUmVnUGF0dGVybnMubGV0dGVyO1xuICAgICAgfSBlbHNlIGlmIChwYXR0ZXJuID09PSAnZGlnaXQnKSB7XG4gICAgICAgIGV4cCA9IFJlZ1BhdHRlcm5zLmRpZ2l0O1xuICAgICAgfSBlbHNlIGlmIChwYXR0ZXJuID09PSAnY2hhcmFjdGVyJykge1xuICAgICAgICBleHAgPSBSZWdQYXR0ZXJucy5jaGFyYWN0ZXI7XG4gICAgICB9IGVsc2UgaWYgKHBhdHRlcm4gPT09ICdpbnRlZ2VyJykge1xuICAgICAgICBleHAgPSBSZWdQYXR0ZXJucy5pbnRlZ2VyO1xuICAgICAgfSBlbHNlIGlmIChwYXR0ZXJuID09PSAnbnVtZXJpYycpIHtcbiAgICAgICAgZXhwID0gUmVnUGF0dGVybnMubnVtZXJpYztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4cCA9IG5ldyBSZWdFeHAocGF0dGVybiBhcyBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBleHAgPSBwYXR0ZXJuIGFzIFJlZ0V4cDtcbiAgICB9XG4gICAgcmV0dXJuIGV4cDtcbiAgfVxufVxuIl19