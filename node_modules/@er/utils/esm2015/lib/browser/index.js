/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Devices } from '@er/types';
import { RegUtils } from '../regex';
/** @type {?} */
const bowser = require('bowser');
/**
 * @record
 */
export function BrowserSupport() { }
if (false) {
    /** @type {?|undefined} */
    BrowserSupport.prototype.version;
    /** @type {?|undefined} */
    BrowserSupport.prototype.features;
}
export class BrowserOsUtils {
    /**
     * @return {?}
     */
    static isMobile() {
        /** @type {?} */
        const result = [
            Devices.DEVICES.ANDROID,
            Devices.DEVICES.IPHONE,
            Devices.DEVICES.I_POD,
            Devices.DEVICES.BLACKBERRY,
            Devices.DEVICES.FIREFOX_OS,
            Devices.DEVICES.WINDOWS_PHONE,
            Devices.DEVICES.VITA
        ].some((item) => {
            return BrowserOsUtils.device_info.device === item;
        });
        return result;
    }
    /**
     * @return {?}
     */
    static isTablet() {
        /** @type {?} */
        const result = [
            Devices.DEVICES.I_PAD,
            Devices.DEVICES.FIREFOX_OS
        ].some((item) => {
            return BrowserOsUtils.device_info.device === item;
        });
        return result;
    }
    /**
     * @return {?}
     */
    static isDesktop() {
        /** @type {?} */
        const result = [
            Devices.DEVICES.PS4,
            Devices.DEVICES.CHROME_BOOK,
            Devices.DEVICES.UNKNOWN
        ].some((item) => {
            return BrowserOsUtils.device_info.device === item;
        });
        return result;
    }
    /**
     * @return {?}
     */
    static getDeviceInfo() {
        if (BrowserOsUtils.device_info) {
            return BrowserOsUtils.device_info;
        }
        if (window && window.navigator) {
            BrowserOsUtils.ua = window.navigator.userAgent;
        }
        BrowserOsUtils.userAgent = BrowserOsUtils.ua;
        /** @type {?} */
        const mappings = [
            { const: 'OS', prop: 'os' },
            { const: 'BROWSERS', prop: 'browser' },
            { const: 'DEVICES', prop: 'device' },
            { const: 'OS_VERSIONS', prop: 'os_version' }
        ];
        mappings.forEach((mapping) => {
            BrowserOsUtils[mapping.prop] = Object.keys(Devices[mapping.const]).reduce((obj, item) => {
                obj[Devices[mapping.const][item]] = RegUtils.test(BrowserOsUtils.ua, Devices[`${mapping.const}_RE`][item]);
                return obj;
            }, {});
        });
        mappings.forEach((mapping) => {
            BrowserOsUtils[mapping.prop] = Object.keys(Devices[mapping.const])
                .map((key) => {
                return Devices[mapping.const][key];
            }).reduce((previousValue, currentValue) => {
                return (previousValue === Devices[mapping.const].UNKNOWN && BrowserOsUtils[mapping.prop][currentValue])
                    ? currentValue : previousValue;
            }, Devices[mapping.const].UNKNOWN);
        });
        BrowserOsUtils.browser_version = '0';
        if (BrowserOsUtils.browser !== Devices.BROWSERS.UNKNOWN) {
            /** @type {?} */
            const re = Devices.BROWSER_VERSIONS_RE[BrowserOsUtils.browser];
            /** @type {?} */
            const res = RegUtils.exec(BrowserOsUtils.ua, re);
            if (!!res) {
                BrowserOsUtils.browser_version = res[1];
            }
        }
        BrowserOsUtils.device_info = {
            userAgent: BrowserOsUtils.userAgent,
            os: BrowserOsUtils.os,
            browser: BrowserOsUtils.browser,
            device: BrowserOsUtils.device,
            os_version: BrowserOsUtils.os_version,
            browser_version: BrowserOsUtils.browser_version
        };
        return BrowserOsUtils.device_info;
    }
    /**
     * @return {?}
     */
    static checkBrowser() {
        if (BrowserOsUtils.isBrowserVersionValid()) {
            /** @type {?} */
            const features = BrowserOsUtils.isBrowserFeaturesValid();
            return {
                version: true,
                features
            };
        }
        return {
            version: false
        };
    }
    /**
     * @private
     * @return {?}
     */
    static isBrowserVersionValid() {
        /** @type {?} */
        const browser = bowser.getParser(window.navigator.userAgent);
        return browser.satisfies({
            windows: {
                'internet explorer': '>10'
            },
            macos: {
                safari: '>10.1'
            },
            chrome: '>20.1.1432',
            firefox: '>31',
            opera: '>22'
        });
    }
    /**
     * @private
     * @return {?}
     */
    static isBrowserFeaturesValid() {
        /** @type {?} */
        let supported = true;
        for (const feature in Modernizr) {
            if (Modernizr.hasOwnProperty(feature) &&
                typeof Modernizr[feature] === 'boolean' && Modernizr[feature] === false) {
                supported = false;
                break;
            }
        }
        return supported;
    }
}
BrowserOsUtils.ua = '';
BrowserOsUtils.userAgent = '';
BrowserOsUtils.os = '';
BrowserOsUtils.browser = '';
BrowserOsUtils.device = '';
BrowserOsUtils.os_version = '';
BrowserOsUtils.browser_version = '';
BrowserOsUtils.device_info = undefined;
if (false) {
    /** @type {?} */
    BrowserOsUtils.ua;
    /** @type {?} */
    BrowserOsUtils.userAgent;
    /** @type {?} */
    BrowserOsUtils.os;
    /** @type {?} */
    BrowserOsUtils.browser;
    /** @type {?} */
    BrowserOsUtils.device;
    /** @type {?} */
    BrowserOsUtils.os_version;
    /** @type {?} */
    BrowserOsUtils.browser_version;
    /** @type {?} */
    BrowserOsUtils.device_info;
}
//# sourceMappingURL=data:application/json;base64,