/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonsUtils } from '../comm';
export class MenuUtils {
    /**
     * @param {?} menuItems
     * @param {?=} roles
     * @param {?=} permissions
     * @return {?}
     */
    static getUserMenuItems(menuItems, roles, permissions) {
        /** @type {?} */
        const filtered = [];
        permissions = CommonsUtils.getArrayValue(permissions);
        if (!roles || roles.length === 0) {
            roles = [];
        }
        if (!permissions || permissions.length === 0) {
            permissions = [];
        }
        if (roles.length === 0 && permissions.length === 0) {
            return menuItems;
        }
        if (menuItems && menuItems.length > 0) {
            menuItems.forEach(menuItem => {
                /** @type {?} */
                const item = menuItem;
                if (item.roles || item.permissions) {
                    if (item.roles && roles.length > 0) {
                        /** @type {?} */
                        const menuRoles = CommonsUtils.getArrayValue(item.roles);
                        /** @type {?} */
                        const matched = menuRoles.filter(menuRole => roles.indexOf(menuRole) >= 0);
                        if (matched.length > 0) {
                            filtered.push(item);
                        }
                    }
                    if (filtered.indexOf(item) === -1 && item.permissions && permissions.length > 0) {
                        /** @type {?} */
                        const menuPermissions = CommonsUtils.getArrayValue(item.permissions);
                        /** @type {?} */
                        const matched = menuPermissions.filter(menuPermission => permissions.indexOf(menuPermission) >= 0);
                        if (matched.length > 0) {
                            filtered.push(item);
                        }
                    }
                }
                else {
                    filtered.push(item);
                }
                if (item.items) {
                    /** @type {?} */
                    const subItems = MenuUtils.getUserMenuItems(item.items, permissions, roles);
                    if (subItems.length > 0) {
                        item.items = subItems;
                    }
                }
            });
            return filtered;
        }
    }
    /**
     * @param {?} menuItems
     * @return {?}
     */
    static transMenuItems(menuItems) {
        /** @type {?} */
        let nodes;
        nodes = CommonsUtils.orderBy(menuItems, ['parent', 'code'], ['asc']);
        nodes.forEach(item => {
            /** @type {?} */
            const children = nodes.filter(item2 => item2['parent'] && item2['parent'] === item['code']);
            if (children.length > 0) {
                item['items'] = children;
            }
            if (item.icon && item.icon.startsWith('fa-')) {
                item.icon = 'fa ' + item.icon;
            }
        });
        return nodes = nodes.filter(node => !node['parent']);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdXRpbHMvIiwic291cmNlcyI6WyJsaWIvbWVudS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUVyQyxNQUFNLE9BQU8sU0FBUzs7Ozs7OztJQUVwQixNQUFNLENBQUMsZ0JBQWdCLENBQUMsU0FBcUIsRUFDckIsS0FBeUIsRUFDekIsV0FBK0I7O2NBQy9DLFFBQVEsR0FBRyxFQUFFO1FBQ25CLFdBQVcsR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDaEMsS0FBSyxHQUFHLEVBQUUsQ0FBQztTQUNaO1FBQ0QsSUFBSSxDQUFDLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1QyxXQUFXLEdBQUcsRUFBRSxDQUFDO1NBQ2xCO1FBQ0QsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNsRCxPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUNELElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3JDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7O3NCQUNyQixJQUFJLEdBQUcsUUFBUTtnQkFDckIsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7b0JBQ2xDLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7OEJBQzVCLFNBQVMsR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7OzhCQUNsRCxPQUFPLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUMxRSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOzRCQUN0QixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3lCQUNyQjtxQkFDRjtvQkFDRCxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7OEJBQ3pFLGVBQWUsR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7OzhCQUM5RCxPQUFPLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNsRyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOzRCQUN0QixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3lCQUNyQjtxQkFDRjtpQkFDRjtxQkFBTTtvQkFDTCxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNyQjtnQkFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7OzBCQUNSLFFBQVEsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsS0FBSyxDQUFDO29CQUMzRSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO3dCQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztxQkFDdkI7aUJBQ0Y7WUFDSCxDQUFDLENBQUMsQ0FBQztZQUNILE9BQU8sUUFBUSxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQWU7O1lBQy9CLEtBQUs7UUFDVCxLQUFLLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7O2tCQUNiLFFBQVEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDM0YsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLFFBQVEsQ0FBQzthQUMxQjtZQUNELElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDNUMsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQzthQUMvQjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDdkQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtNZW51SXRlbX0gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICcuLi9jb21tJztcblxuZXhwb3J0IGNsYXNzIE1lbnVVdGlscyB7XG5cbiAgc3RhdGljIGdldFVzZXJNZW51SXRlbXMobWVudUl0ZW1zOiBNZW51SXRlbVtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlcz86IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJtaXNzaW9ucz86IHN0cmluZyB8IHN0cmluZ1tdKTogTWVudUl0ZW1bXSB7XG4gICAgY29uc3QgZmlsdGVyZWQgPSBbXTtcbiAgICBwZXJtaXNzaW9ucyA9IENvbW1vbnNVdGlscy5nZXRBcnJheVZhbHVlKHBlcm1pc3Npb25zKTtcbiAgICBpZiAoIXJvbGVzIHx8IHJvbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcm9sZXMgPSBbXTtcbiAgICB9XG4gICAgaWYgKCFwZXJtaXNzaW9ucyB8fCBwZXJtaXNzaW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHBlcm1pc3Npb25zID0gW107XG4gICAgfVxuICAgIGlmIChyb2xlcy5sZW5ndGggPT09IDAgJiYgcGVybWlzc2lvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gbWVudUl0ZW1zO1xuICAgIH1cbiAgICBpZiAobWVudUl0ZW1zICYmIG1lbnVJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICBtZW51SXRlbXMuZm9yRWFjaChtZW51SXRlbSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBtZW51SXRlbTtcbiAgICAgICAgaWYgKGl0ZW0ucm9sZXMgfHwgaXRlbS5wZXJtaXNzaW9ucykge1xuICAgICAgICAgIGlmIChpdGVtLnJvbGVzICYmIHJvbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG1lbnVSb2xlcyA9IENvbW1vbnNVdGlscy5nZXRBcnJheVZhbHVlKGl0ZW0ucm9sZXMpO1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hlZCA9IG1lbnVSb2xlcy5maWx0ZXIobWVudVJvbGUgPT4gcm9sZXMuaW5kZXhPZihtZW51Um9sZSkgPj0gMCk7XG4gICAgICAgICAgICBpZiAobWF0Y2hlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGZpbHRlcmVkLnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmaWx0ZXJlZC5pbmRleE9mKGl0ZW0pID09PSAtMSAmJiBpdGVtLnBlcm1pc3Npb25zICYmIHBlcm1pc3Npb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG1lbnVQZXJtaXNzaW9ucyA9IENvbW1vbnNVdGlscy5nZXRBcnJheVZhbHVlKGl0ZW0ucGVybWlzc2lvbnMpO1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hlZCA9IG1lbnVQZXJtaXNzaW9ucy5maWx0ZXIobWVudVBlcm1pc3Npb24gPT4gcGVybWlzc2lvbnMuaW5kZXhPZihtZW51UGVybWlzc2lvbikgPj0gMCk7XG4gICAgICAgICAgICBpZiAobWF0Y2hlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGZpbHRlcmVkLnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpbHRlcmVkLnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0uaXRlbXMpIHtcbiAgICAgICAgICBjb25zdCBzdWJJdGVtcyA9IE1lbnVVdGlscy5nZXRVc2VyTWVudUl0ZW1zKGl0ZW0uaXRlbXMsIHBlcm1pc3Npb25zLCByb2xlcyk7XG4gICAgICAgICAgaWYgKHN1Ykl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGl0ZW0uaXRlbXMgPSBzdWJJdGVtcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZpbHRlcmVkO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyB0cmFuc01lbnVJdGVtcyhtZW51SXRlbXM6IHt9W10pIHtcbiAgICBsZXQgbm9kZXM7XG4gICAgbm9kZXMgPSBDb21tb25zVXRpbHMub3JkZXJCeShtZW51SXRlbXMsIFsncGFyZW50JywgJ2NvZGUnXSwgWydhc2MnXSk7XG4gICAgbm9kZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gbm9kZXMuZmlsdGVyKGl0ZW0yID0+IGl0ZW0yWydwYXJlbnQnXSAmJiBpdGVtMlsncGFyZW50J10gPT09IGl0ZW1bJ2NvZGUnXSk7XG4gICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICBpdGVtWydpdGVtcyddID0gY2hpbGRyZW47XG4gICAgICB9XG4gICAgICBpZiAoaXRlbS5pY29uICYmIGl0ZW0uaWNvbi5zdGFydHNXaXRoKCdmYS0nKSkge1xuICAgICAgICBpdGVtLmljb24gPSAnZmEgJyArIGl0ZW0uaWNvbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbm9kZXMgPSBub2Rlcy5maWx0ZXIobm9kZSA9PiAhbm9kZVsncGFyZW50J10pO1xuICB9XG59XG4iXX0=