/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { VarType } from '@er/types';
import * as _ from 'lodash';
import { CacheUtils } from '../cache';
export class CommonsUtils {
    /**
     * @return {?}
     */
    static lodash() {
        return _;
    }
    /**
     * @return {?}
     */
    static getSeq() {
        return CacheUtils.getSeq();
    }
    /**
     * @param {?=} max
     * @param {?=} min
     * @return {?}
     */
    static getRandomNumber(max = 10, min) {
        /** @type {?} */
        const result = Math.floor(Math.random() * (max + 1) + (min || 0));
        return result;
    }
    /**
     * @template T
     * @param {?} src
     * @param {?} key
     * @return {?}
     */
    static getObjWhenStr(src, key) {
        /** @type {?} */
        const result = (typeof src === 'string') ? (/** @type {?} */ ({ [key]: src })) : src;
        return result;
    }
    /**
     * @param {?} object
     * @return {?}
     */
    static getVarType(object) {
        /** @type {?} */
        let type = VarType.UNKNOWN;
        if (object === null) {
            type = VarType.NULL;
        }
        else if (object === undefined) {
            type = VarType.UNDEFINED;
        }
        else if (object === true || object === false) {
            type = VarType.BOOLEAN;
        }
        if (type !== VarType.UNKNOWN) {
            return type;
        }
        /** @type {?} */
        const objectType = typeof object;
        if (objectType === 'string') {
            // if (DateUtils.isDate(object)) {
            //   return VarType.DATE;
            // }
            type = VarType.STRING;
        }
        else if (objectType === 'number') {
            type = VarType.NUMBER;
        }
        else if (objectType === 'function') {
            type = VarType.FUNCTION;
        }
        if (object.constructor === [].constructor) {
            type = VarType.ARRAY;
        }
        else if (object.constructor === {}.constructor) {
            type = VarType.JSON;
        }
        return type;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isNullOrUndefined(value) {
        return value === undefined || value === null;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    static isString(obj) {
        return CommonsUtils.getVarType(obj) === VarType.STRING;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    static isBoolean(obj) {
        return CommonsUtils.getVarType(obj) === VarType.BOOLEAN;
    }
    /**
     * @param {?} s
     * @return {?}
     */
    static isEmptyString(s) {
        return !s || CommonsUtils.isString(s) && s.trim().length === 0;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    static isArray(obj) {
        return CommonsUtils.getVarType(obj) === VarType.ARRAY;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    static isNumber(obj) {
        return CommonsUtils.getVarType(obj) === VarType.NUMBER;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    static isJson(obj) {
        return CommonsUtils.getVarType(obj) === VarType.JSON;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    static isFunction(obj) {
        return CommonsUtils.getVarType(obj) === VarType.FUNCTION;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    static isUrl(str) {
        /** @type {?} */
        const regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
        return regexp.test(str);
    }
    /**
     * @param {?} str
     * @return {?}
     */
    static isInteger(str) {
        return !CommonsUtils.isNullOrUndefined(str) && /^\d+$/.test(str);
    }
    /**
     * @param {?} value
     * @param {?} other
     * @return {?}
     */
    static isEqual(value, other) {
        return _.isEqual(value, other);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    static copy(obj) {
        return _.cloneDeep(obj);
    }
    /**
     * @param {?} obj1
     * @param {...?} obj2
     * @return {?}
     */
    static merge(obj1, ...obj2) {
        return _.merge.apply(null, [obj1, ...obj2]);
    }
    /**
     * @param {?} obj
     * @param {?} predicate
     * @return {?}
     */
    static pickBy(obj, predicate) {
        return _.pickBy(obj, predicate);
    }
    /**
     * @param {?} obj
     * @param {?} keys
     * @return {?}
     */
    static pick(obj, keys) {
        return _.pick(obj, keys);
    }
    /**
     * @param {?} obj1
     * @param {...?} obj2
     * @return {?}
     */
    static defaults(obj1, ...obj2) {
        return _.defaultsDeep.apply(undefined, [obj1, ...obj2]);
    }
    /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    static equals(obj1, obj2) {
        return _.isEqual(obj1, obj2);
    }
    /**
     * @param {?} obj
     * @param {?} path
     * @param {?} value
     * @return {?}
     */
    static set(obj, path, value) {
        return _.set(obj, path, value);
    }
    /**
     * @param {?} obj
     * @param {?} path
     * @param {?=} defaultValue
     * @return {?}
     */
    static get(obj, path, defaultValue) {
        return _.get(obj, path, defaultValue);
    }
    /**
     * @param {?} obj
     * @param {?} source
     * @return {?}
     */
    static extend(obj, source) {
        return _.extend(obj, source);
    }
    /**
     * @param {?} collection
     * @return {?}
     */
    static compact(collection) {
        return _.compact(collection);
    }
    /**
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */
    static omit(obj, path) {
        return _.omit(obj, path);
    }
    /**
     * @param {?} obj
     * @param {?} predicate
     * @return {?}
     */
    static omitBy(obj, predicate) {
        return _.omitBy(obj, predicate);
    }
    /**
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */
    static unset(obj, path) {
        return _.unset(obj, path);
    }
    /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    static find(collection, predicate) {
        return _.find(collection, predicate);
    }
    /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    static findIndex(collection, predicate) {
        return _.findIndex(collection, predicate);
    }
    /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    static remove(collection, predicate) {
        return _.remove(collection, predicate);
    }
    /**
     * @param {?} obj
     * @param {?} iteratee
     * @return {?}
     */
    static forOwn(obj, iteratee) {
        return _.forOwn(obj, iteratee);
    }
    /**
     * @param {?} obj
     * @param {?} iteratee
     * @return {?}
     */
    static map(obj, iteratee) {
        return _.map(obj, iteratee);
    }
    /**
     * @param {?} obj
     * @param {?} by
     * @return {?}
     */
    static unique(obj, by) {
        return _.uniqBy(obj, by);
    }
    /**
     * @param {?} obj
     * @param {?} iteratees
     * @param {?=} orders
     * @return {?}
     */
    static orderBy(obj, iteratees, orders) {
        return _.orderBy(obj, iteratees, orders);
    }
    /**
     * @param {...?} obj
     * @return {?}
     */
    static union(...obj) {
        return _.union(obj);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    static flatten(obj) {
        return _.flatten(obj);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    static flattenDeep(obj) {
        return _.flattenDeep(obj);
    }
    /**
     * @param {?} src
     * @param {?} format
     * @return {?}
     */
    static format(src, format) {
        return src;
    }
    /**
     * @param {?} o1
     * @param {?} o2
     * @return {?}
     */
    static jsonConcat(o1, o2) {
        for (const key in o2) {
            o1[key] = o2[key];
        }
        return o1;
    }
    /**
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    static escape(obj, key) {
        const _a = key, deletedItem = obj[_a], rest = tslib_1.__rest(obj, [typeof _a === "symbol" ? _a : _a + ""]);
        return rest;
    }
    /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    static filter(collection, predicate) {
        return _.filter(collection, predicate);
    }
    /**
     * @param {?} obj
     * @param {?} predicate
     * @return {?}
     */
    static where(obj, predicate) {
        if (Object.keys(predicate).every(key => obj && obj[key] === predicate[key])) {
            return obj;
        }
        else {
            return null;
        }
    }
    /**
     * @param {?} s
     * @return {?}
     */
    static capitalize(s) {
        if (s) {
            return s.charAt(0).toUpperCase() + s.slice(1);
        }
        else {
            return s;
        }
    }
    /**
     * @param {?} s
     * @param {?} vars
     * @return {?}
     */
    static templateStr(s, vars) {
        /** @type {?} */
        const compiled = _.template(s);
        return compiled(vars);
    }
    /**
     * @param {?} s
     * @return {?}
     */
    static isTemplateStr(s) {
        /** @type {?} */
        const isMatch = /.*\${.*}.*/.test(s) || /.*<%=(.*)%>.*/.test(s);
        return isMatch;
    }
    /**
     * @template T
     * @param {?} item
     * @param {?=} keyName
     * @return {?}
     */
    static getArray(item, keyName) {
        /** @type {?} */
        const items = [];
        if (item) {
            if (CommonsUtils.isArray(item)) {
                return (/** @type {?} */ (item));
            }
            else if (CommonsUtils.isJson(item)) {
                for (const key in item) {
                    if (key) {
                        /** @type {?} */
                        let c = item[key];
                        if (keyName) {
                            c = Object.assign({ [keyName]: key }, c);
                        }
                        items.push(c);
                    }
                }
            }
            else {
                items.push(item);
            }
        }
        return items;
    }
    /**
     * @param {?} obj
     * @param {...?} keys
     * @return {?}
     */
    static removeKeys(obj, ...keys) {
        /** @type {?} */
        let o = obj;
        while (keys.length > 0) {
            o = CommonsUtils.set(o, keys, undefined);
            CommonsUtils.unset(o, keys);
            keys.pop();
            /** @type {?} */
            const v = CommonsUtils.get(o, keys);
            if (!CommonsUtils.isEmpty(v)) {
                break;
            }
        }
        return o;
    }
    /**
     * @param {?} value
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    static extract(value, from, to) {
        /** @type {?} */
        let target;
        if (value && (from !== to)) {
            if (to >= value.length) {
                target = to - value.length;
                while ((target--) + 1) {
                    value.push(undefined);
                }
            }
            value.splice(to, 0, value.splice(from, 1)[0]);
        }
    }
    /**
     * @param {?} srcArray
     * @param {?} item
     * @param {?=} index
     * @return {?}
     */
    static addItem(srcArray, item, index) {
        /** @type {?} */
        let toAdd = item;
        if (!CommonsUtils.isArray(item)) {
            toAdd = [item];
        }
        if (index) {
            return [].concat(srcArray.slice(0, index), toAdd, srcArray.slice(index));
        }
        else {
            return [].concat(srcArray, toAdd);
        }
    }
    /**
     * @param {?} a
     * @param {?} index
     * @return {?}
     */
    static removeByIndex(a, index) {
        return [].concat(a.slice(0, index), a.slice(index + 1));
    }
    /**
     * @template T
     * @param {?} a
     * @param {?} index
     * @param {?} element
     * @return {?}
     */
    static replace(a, index, element) {
        return [].concat(a.slice(0, index), element, a.slice(index + 1));
    }
    /**
     * @template T
     * @param {?} a
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    static move(a, from, to) {
        /** @type {?} */
        const element = a[from];
        /** @type {?} */
        const forward = from < to;
        /** @type {?} */
        const head = a.slice(0, forward ? from : to);
        /** @type {?} */
        const mid = a.slice(forward ? from + 1 : to, forward ? to + 1 : from);
        /** @type {?} */
        const tail = a.slice(forward ? to + 1 : from + 1);
        return forward ?
            [].concat(head, mid, element, tail) :
            [].concat(head, element, mid, tail);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static restoreFn(value) {
        if ((typeof value === 'string') && value.toLocaleLowerCase().trim().indexOf('function') === 0) {
            return new Function('return ' + value.replace(/_this/g, 'this')
                .replace(/__assign/g, 'Object.assign'))();
        }
        else {
            return value;
        }
    }
    /**
     * 排除key为k，value为v 的数据项
     * @param {?} src
     * @param {?} k
     * @param {?} v
     * @return {?}
     */
    static exclude(src, k, v) {
        /** @type {?} */
        const result = Object.keys(src).reduce((acc, key) => (src[key][k] === v ? acc : Object.assign({}, acc, { [key]: src[key] })), {});
        return result;
    }
    /**
     * 替换src中的 {k,o} 元素 为 {k,v}
     * @param {?} src
     * @param {?} k
     * @param {?} o
     * @param {?} v
     * @return {?}
     */
    static replaceObj(src, k, o, v) {
        /** @type {?} */
        const index = _.find(src, { [k]: o });
        return [
            ...src.slice(0, index),
            Object.assign({}, src[index], { [k]: v }),
            ...src.slice(index + 1)
        ];
    }
    /**
     * 合并 {} 和 []
     * @param {?} src1
     * @param {?} src2
     * @param {?} k
     * @return {?}
     */
    static concat(src1, src2, k) {
        return Object.assign({}, src1, src2.reduce((acc, item) => (Object.assign({}, acc, { [item[k]]: item })), {}));
    }
    /**
     * @param {?} json
     * @return {?}
     */
    static restoreJsonFn(json) {
        /** @type {?} */
        let jsonStr;
        if (typeof json === 'string') {
            jsonStr = json;
        }
        else {
            jsonStr = CommonsUtils.stringify(json);
        }
        return JSON.parse(jsonStr, (key, value) => CommonsUtils.restoreFn(value));
    }
    /**
     * @param {?} json
     * @return {?}
     */
    static stringify(json) {
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        function replacer(key, value) {
            if (typeof value === 'function') {
                return value.toString();
            }
            else {
                return value;
            }
        }
        return JSON.stringify(json, replacer);
    }
    /**
     * @param {?} str
     * @return {?}
     */
    static hash(str) {
        /** @type {?} */
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            /** @type {?} */
            const character = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + character;
            hash = hash & hash; // Convert to 32bit integer
        }
        return hash;
    }
    /**
     * 根据options定义，转换src
     *  options:{
     *    src-key: tar-key | {key:tar-key,options:{}} | Function
     *  }
     * @param {?} src
     * @param {?} options
     * @return {?}
     */
    static adaptObject(src, options) {
        if (CommonsUtils.isArray(src)) {
            return CommonsUtils.adaptArray(src, options);
        }
        else {
            return CommonsUtils.adaptJson(src, options);
        }
    }
    /**
     * @param {?} src
     * @param {?} options
     * @return {?}
     */
    static adaptJson(src, options) {
        /** @type {?} */
        const result = {};
        Object.keys(options).forEach((key) => {
            /** @type {?} */
            const srcValue = CommonsUtils.get(src, key);
            if (srcValue) {
                if (CommonsUtils.isArray(srcValue)) {
                    /** @type {?} */
                    let tarKey = null;
                    if (CommonsUtils.isString(options[key])) {
                        tarKey = options[key];
                    }
                    else {
                        tarKey = options[key]['key'];
                    }
                    CommonsUtils.set(result, tarKey, CommonsUtils.adaptArray(srcValue, options[key]['options'] || options));
                }
                else if (CommonsUtils.isJson(srcValue)) {
                    CommonsUtils.set(result, options[key], CommonsUtils.adaptJson(srcValue, options[key]['options'] || {}));
                }
                else {
                    if (CommonsUtils.isString(options[key])) {
                        CommonsUtils.set(result, options[key], srcValue);
                    }
                    else if (CommonsUtils.isFunction(options[key])) {
                        CommonsUtils.set(result, options[key], options[key].apply(undefined, src, options));
                    }
                }
            }
        });
        return result;
    }
    /**
     * @param {?} src
     * @param {?} options
     * @return {?}
     */
    static adaptArray(src, options) {
        /** @type {?} */
        const result = [];
        src.forEach(item => {
            result.push(CommonsUtils.adaptObject(item, options));
        });
        return result;
    }
    /**
     * @param {?} dateString
     * @return {?}
     */
    static getAge(dateString) {
        /** @type {?} */
        const today = new Date();
        /** @type {?} */
        const birthDate = new Date(dateString);
        /** @type {?} */
        let age = today.getFullYear() - birthDate.getFullYear();
        /** @type {?} */
        const m = today.getMonth() - birthDate.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
            age--;
        }
        return age;
    }
    /**
     * @param {?} target
     * @return {?}
     */
    static toDate(target) {
        if (target instanceof Date) {
            return target;
        }
        if (CommonsUtils.isString(target)) {
            /** @type {?} */
            const dateNumber = Date.parse(target);
            return !isNaN(dateNumber) ? new Date(dateNumber) : null;
        }
        return null;
    }
    /**
     * @param {?} tar
     * @param {?=} date
     * @return {?}
     */
    static isBefore(tar, date = new Date()) {
        /** @type {?} */
        const src = CommonsUtils.toDate(date);
        /** @type {?} */
        const original = CommonsUtils.toDate(tar);
        return !!(original && src && original < src);
    }
    /**
     * @param {?} tar
     * @param {?=} date
     * @return {?}
     */
    static isAfter(tar, date = new Date()) {
        /** @type {?} */
        const src = CommonsUtils.toDate(date);
        /** @type {?} */
        const original = CommonsUtils.toDate(tar);
        return !!(original && src && original > src);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    static toString(obj) {
        switch (CommonsUtils.getVarType(obj)) {
            case VarType.NULL:
            case VarType.UNDEFINED:
                return '';
            case VarType.ARRAY: {
                /** @type {?} */
                const a = [];
                obj.forEach(o => a.push(CommonsUtils.toString(o)));
                return `[${a.join(',')}]`;
            }
            case VarType.JSON:
                return CommonsUtils.stringify(obj);
            default:
                return obj.toString();
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    static isEmpty(obj) {
        switch (CommonsUtils.getVarType(obj)) {
            case VarType.NULL:
            case VarType.UNDEFINED:
                return true;
            case VarType.STRING:
                return obj.length === 0;
            case VarType.ARRAY:
                return ((/** @type {?} */ (obj))).length === 0;
            case VarType.JSON:
                return Object.keys(obj).length === 0;
            default:
                return obj.toString().length === 0;
        }
    }
    /**
     * @param {?} attributes
     * @param {?} keys
     * @return {?}
     */
    static convertToBoolean(attributes, keys) {
        /** @type {?} */
        const l_attributes = Object.assign({}, attributes);
        if (keys && keys.length > 0) {
            keys.forEach(key => {
                if (l_attributes.hasOwnProperty(key) && l_attributes[key] === '') {
                    l_attributes[key] = true;
                }
            });
        }
        return l_attributes;
    }
    /**
     * @param {?} path
     * @return {?}
     */
    static flatPath(path) {
        if (CommonsUtils.isArray(path)) {
            return ((/** @type {?} */ (path))).join('-').replace('.', '-');
        }
        return ((/** @type {?} */ (path))).replace('.', '-');
    }
    /**
     * @param {?} arr
     * @param {?=} seperator
     * @return {?}
     */
    static join(arr, seperator) {
        /** @type {?} */
        const joiner = seperator || ',';
        if (!arr) {
            return '';
        }
        if (!CommonsUtils.isArray(arr)) {
            return arr;
        }
        switch (arr.length) {
            case 0:
                return '';
            case 1:
                return arr[0];
            default:
                return arr.join(joiner);
        }
    }
    /**
     * @param {?} obj
     * @param {...?} predicates
     * @return {?}
     */
    static deepFind(obj, ...predicates) {
        /** @type {?} */
        const _find = (o) => {
            if (o instanceof Array) {
                ((/** @type {?} */ (o))).forEach(i => _find(i));
            }
            else {
                for (const prop in o) {
                    if (o[prop] instanceof Array) {
                        _find(o[prop]);
                    }
                }
                predicates.some((predicate) => {
                    /** @type {?} */
                    const found = CommonsUtils.where(o, predicate);
                    if (found !== null) {
                        foundResults.push(o);
                    }
                    return found !== null;
                });
            }
        };
        /** @type {?} */
        const foundResults = [];
        _find(obj);
        return foundResults;
    }
    /**
     * @param {?} milliseconds
     * @return {?}
     */
    static sleep(milliseconds) {
        /** @type {?} */
        const start = new Date().getTime();
        for (let i = 0; i < 1e7; i++) {
            if ((new Date().getTime() - start) > milliseconds) {
                break;
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    static getArrayValue(data) {
        if (!data) {
            return data;
        }
        if (CommonsUtils.isArray(data)) {
            return data;
        }
        else if (CommonsUtils.isString(data)) {
            return ((/** @type {?} */ (data))).split(',');
        }
        else {
            return [data];
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    static getText(data) {
        if (CommonsUtils.isArray(data)) {
            return ((/** @type {?} */ (data))).map(v => CommonsUtils.getText(v)).join(',');
        }
        else if (CommonsUtils.isJson(data)) {
            return JSON.stringify(data);
        }
        else if (CommonsUtils.isBoolean(data)) {
            return data ? '是' : '否';
        }
        else {
            return data;
        }
    }
    /**
     * @param {?} exp
     * @param {...?} context
     * @return {?}
     */
    static getValue(exp, ...context) {
        /** @type {?} */
        const fn = exp && (exp['method'] || exp);
        if (CommonsUtils.isFunction(fn)) {
            return (/** @type {?} */ (fn.apply(undefined, context)));
        }
        if (CommonsUtils.isString(exp) && exp.startsWith('@')) {
            return CommonsUtils.get(context && context[0], exp.substr(1));
        }
        return exp;
    }
    /**
     * @param {?} obj
     * @param {?} prop
     * @param {?} defaultValue
     * @return {?}
     */
    static defineHiddenProp(obj, prop, defaultValue) {
        Object.defineProperty(obj, prop, { enumerable: false, writable: true, configurable: true });
        obj[prop] = defaultValue;
    }
    /**
     * @param {?} str
     * @param {?} size
     * @return {?}
     */
    static splitBySize(str, size) {
        /** @type {?} */
        const results = [];
        /** @type {?} */
        let i = size;
        while (i <= str.length) {
            results.push(str.substr(0, i));
            i += size;
        }
        return results;
    }
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    static resolveUrl(url, params = {}) {
        /** @type {?} */
        const _url = Object.keys(params)
            .reduce((acc, key) => acc.replace(`:${key}`, params[key]), url);
        return _url;
    }
}
//# sourceMappingURL=data:application/json;base64,