/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DEFAULT_TREE_NODE_KEYS } from '@er/types';
import { CommonsUtils } from '../comm';
import { DataItemUtils } from '../data-item';
import { StatesUtils } from '../states';
export class TreeUtils {
    /**
     * @param {?} dataItems
     * @param {?} keyMap
     * @param {?=} root
     * @param {?=} lazy
     * @return {?}
     */
    static transNodes(dataItems, keyMap, root, lazy) {
        /** @type {?} */
        const treeKeys = Object.keys(keyMap.node).map(key => keyMap.node[key]);
        /** @type {?} */
        let nodes;
        /** @type {?} */
        let rootNode;
        if (keyMap.src.levelIdLength) {
            nodes = CommonsUtils.orderBy(dataItems, [keyMap.src.orderKey || keyMap.src.idKey], ['asc']);
            nodes = nodes.map(item => {
                if (item[keyMap.src.idKey]) {
                    /** @type {?} */
                    const parentId = item[keyMap.src.idKey].substr(0, item[keyMap.src.idKey].length - keyMap.src.levelIdLength);
                    if (parentId && parentId !== item[keyMap.src.idKey]) {
                        item[keyMap.src.parentKey] = parentId;
                    }
                    if (!item[keyMap.node.dataKey]) {
                        item[keyMap.node.dataKey] = Object.assign({}, item);
                    }
                    item[keyMap.node.idKey] = item[keyMap.src.idKey];
                    item = CommonsUtils.pick(item, treeKeys);
                    return item;
                }
            });
        }
        else if (keyMap.src.parentKey) {
            nodes = CommonsUtils.orderBy(dataItems, [keyMap.src.parentKey, keyMap.src.idKey], ['asc']);
            nodes = nodes.map(item => {
                if (!item[keyMap.node.dataKey]) {
                    item[keyMap.node.dataKey] = Object.assign({}, item);
                }
                item[keyMap.node.idKey] = item[keyMap.src.idKey];
                item = CommonsUtils.pick(item, treeKeys);
                return item;
            });
        }
        nodes.forEach(item => {
            item[keyMap.node.dataKey] = item[keyMap.node.dataKey] || Object.assign({}, item);
            /** @type {?} */
            const children = nodes.filter(item2 => item2 && item2[keyMap.src.parentKey] && item2[keyMap.src.parentKey] === item['data'][keyMap.src.idKey]);
            if (children.length > 0) {
                item[keyMap.node.childrenKey] = children;
            }
            item[keyMap.node.labelKey] = DataItemUtils.getItemLabel(item, keyMap.src.labelKey);
            if (item[keyMap.src.parentKey]) {
                item[keyMap.node.parentKey] = item[keyMap.src.parentKey];
            }
            if (lazy) {
                item[keyMap.node.leafKey] = false;
            }
            if (root && CommonsUtils.isString(root) && root === item[keyMap.src.idKey]) {
                rootNode = [item];
            }
        });
        if (root && CommonsUtils.isJson(root)) {
            root['children'] = nodes;
            return [root];
        }
        else {
            return nodes = rootNode ? rootNode : nodes.filter(node => !node[keyMap.node.parentKey]);
        }
    }
    /**
     * @param {?} treeNodes
     * @param {?} value
     * @param {?} props
     * @return {?}
     */
    static findNode(treeNodes, value, props) {
        /** @type {?} */
        let found;
        if (treeNodes) {
            for (let i = 0; i < treeNodes.length; i++) {
                if (value[props.dataItemProps.idKey] === treeNodes[i][DEFAULT_TREE_NODE_KEYS.dataKey][props.dataItemProps.idKey]) {
                    found = treeNodes[i];
                    break;
                }
                if (treeNodes[i].hasOwnProperty(DEFAULT_TREE_NODE_KEYS.childrenKey)) {
                    /** @type {?} */
                    const children = treeNodes[i][DEFAULT_TREE_NODE_KEYS.childrenKey];
                    found = TreeUtils.findNode(children, value, props);
                    if (found) {
                        break;
                    }
                }
            }
        }
        return found;
    }
    /**
     * @param {?} nodes
     * @param {?} predicate
     * @return {?}
     */
    static filter(nodes, predicate) {
        /** @type {?} */
        const result = !nodes ? null : nodes.reduce((list, node) => {
            /** @type {?} */
            let clone = null;
            if (predicate(node)) {
                // if the object matches the filter, clone it as it is
                clone = CommonsUtils.copy(Object.assign({}, node, { matched: true }));
            }
            else if (node.children != null) {
                // if the object has childrens, filter the list of children
                /** @type {?} */
                const children = TreeUtils.filter(node.children, predicate);
                if (children.length > 0) {
                    // if any of the children matches, clone the parent object, overwrite
                    // the children list with the filtered list
                    clone = Object.assign({}, node, { children: children });
                }
            }
            if (clone) {
                list.push(clone);
            }
            return list;
        }, []);
        return result;
    }
    /**
     * @param {?} node
     * @param {?} isExpand
     * @param {?=} props
     * @param {?=} toExpandLevel
     * @param {?=} currentLevel
     * @param {?=} id
     * @return {?}
     */
    static expandNode(node, isExpand, props = {}, toExpandLevel = 100, currentLevel = 1, id) {
        if (!node) {
            return;
        }
        if (toExpandLevel >= currentLevel) {
            if (id && (currentLevel === toExpandLevel)) {
                node.expanded = node['id'] === id;
            }
            else if (!id || (id && currentLevel < toExpandLevel)) {
                node.expanded = isExpand;
            }
            TreeUtils.initNode(node, props);
            currentLevel++;
            if (node.children) {
                node.children.forEach(childNode => {
                    TreeUtils.initNode(childNode, props);
                    if (toExpandLevel >= currentLevel) {
                        TreeUtils.expandNode(childNode, isExpand, props, toExpandLevel, currentLevel, id);
                    }
                });
            }
        }
    }
    /**
     * @param {?} node
     * @param {?=} props
     * @return {?}
     */
    static initNode(node, props = {}) {
        if (!node._inited) {
            ['expandedIcon', 'collapsedIcon'].forEach(iconType => TreeUtils.initIcon(node, iconType, props));
            if (props['selectable']) {
                node.selectable = CommonsUtils.getValue(props['selectable'], node);
            }
            node = Object.assign({}, node, { '_inited': true });
        }
    }
    /**
     * @param {?} node
     * @param {?} iconType
     * @param {?} props
     * @return {?}
     */
    static initIcon(node, iconType, props) {
        if (!props) {
            node[iconType] = TreeUtils.DEFAULT_NODE_PROPS[iconType];
        }
        else if (props[iconType] && props[iconType].method) {
            node[iconType] = ((/** @type {?} */ (props[iconType].method)))(node);
        }
        else {
            node[iconType] = props[iconType] || TreeUtils.DEFAULT_NODE_PROPS[iconType];
        }
    }
    /**
     * @param {?} siblingId
     * @return {?}
     */
    static getSelectedTreeState(siblingId) {
        if (!siblingId) {
            return null;
        }
        /** @type {?} */
        const sibling = siblingId && StatesUtils.getValue(siblingId);
        if (sibling && sibling.component) {
            /** @type {?} */
            const treeId = CommonsUtils.get(sibling.component, '$props.$ext.$container.tree.$id');
            /** @type {?} */
            const treeState = StatesUtils.getValue(treeId);
            return treeState;
        }
    }
    /**
     * @param {?} siblingId
     * @return {?}
     */
    static getSelectedNode(siblingId) {
        /** @type {?} */
        const treeState = TreeUtils.getSelectedTreeState(siblingId);
        return treeState && treeState['selectedNode'];
    }
    /**
     * @param {?} siblingId
     * @return {?}
     */
    static getSelectedNodeValue(siblingId) {
        /** @type {?} */
        const treeState = TreeUtils.getSelectedTreeState(siblingId);
        return treeState && treeState['selectedNodeValue'];
    }
}
TreeUtils.DEFAULT_NODE_PROPS = {
    lazy: false,
    autoExpandLevel: 0,
    expandedIcon: 'fa fa-folder-open',
    collapsedIcon: 'fa fa-folder',
    icon: 'fa fa-leaf'
};
if (false) {
    /** @type {?} */
    TreeUtils.DEFAULT_NODE_PROPS;
}
//# sourceMappingURL=data:application/json;base64,