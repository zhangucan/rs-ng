/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class UrlUtils {
    /**
     * @return {?}
     */
    static getQueryParameters() {
        return UrlUtils.getQueryParametersUsingParameters(document.location.search);
    }
    /**
     * @param {?} search
     * @return {?}
     */
    static getQueryParametersUsingParameters(search) {
        /** @type {?} */
        const r = search.replace(/(^\?)/, '').split('&').map(function (n) { return n = n.split('='), this[n[0]] = n[1], this; }.bind({}))[0];
        return r;
    }
    /**
     * @return {?}
     */
    static getInitialUrlParameters() {
        /** @type {?} */
        const questionMarkIndex = UrlUtils.initialUrl.indexOf('?');
        if (questionMarkIndex >= 0) {
            return UrlUtils.initialUrl.substr(questionMarkIndex, UrlUtils.initialUrl.length - questionMarkIndex);
        }
        return '';
    }
    /**
     * @return {?}
     */
    static getReturnUrl() {
        /** @type {?} */
        const queryStringObj = UrlUtils.getQueryParametersUsingParameters(UrlUtils.getInitialUrlParameters());
        if (queryStringObj.returnUrl) {
            return decodeURIComponent(queryStringObj.returnUrl);
        }
        return null;
    }
    /**
     * @return {?}
     */
    static getSingleSignIn() {
        /** @type {?} */
        const queryStringObj = UrlUtils.getQueryParametersUsingParameters(UrlUtils.getInitialUrlParameters());
        if (queryStringObj.ss) {
            return queryStringObj.ss;
        }
        return false;
    }
}
/**
 * The URL requested, before initial routing.
 */
UrlUtils.initialUrl = location.href;
if (false) {
    /**
     * The URL requested, before initial routing.
     * @type {?}
     */
    UrlUtils.initialUrl;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdXRpbHMvIiwic291cmNlcyI6WyJsaWIvdXJsL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNLE9BQU8sUUFBUTs7OztJQU1uQixNQUFNLENBQUMsa0JBQWtCO1FBQ3ZCLE9BQU8sUUFBUSxDQUFDLGlDQUFpQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUUsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsaUNBQWlDLENBQUMsTUFBYzs7Y0FDL0MsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEksT0FBTyxDQUFDLENBQUM7SUFDWCxDQUFDOzs7O0lBRUQsTUFBTSxDQUFDLHVCQUF1Qjs7Y0FDdEIsaUJBQWlCLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQzFELElBQUksaUJBQWlCLElBQUksQ0FBQyxFQUFFO1lBQzFCLE9BQU8sUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsaUJBQWlCLENBQUMsQ0FBQztTQUN0RztRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQzs7OztJQUVELE1BQU0sQ0FBQyxZQUFZOztjQUNYLGNBQWMsR0FBRyxRQUFRLENBQUMsaUNBQWlDLENBQUMsUUFBUSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDckcsSUFBSSxjQUFjLENBQUMsU0FBUyxFQUFFO1lBQzVCLE9BQU8sa0JBQWtCLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3JEO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7O0lBRUQsTUFBTSxDQUFDLGVBQWU7O2NBQ2QsY0FBYyxHQUFHLFFBQVEsQ0FBQyxpQ0FBaUMsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUNyRyxJQUFJLGNBQWMsQ0FBQyxFQUFFLEVBQUU7WUFDckIsT0FBTyxjQUFjLENBQUMsRUFBRSxDQUFDO1NBQzFCO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7OztBQXBDZSxtQkFBVSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7Ozs7OztJQUEzQyxvQkFBMkMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVXJsVXRpbHMge1xuICAvKipcbiAgICogVGhlIFVSTCByZXF1ZXN0ZWQsIGJlZm9yZSBpbml0aWFsIHJvdXRpbmcuXG4gICAqL1xuICBzdGF0aWMgcmVhZG9ubHkgaW5pdGlhbFVybCA9IGxvY2F0aW9uLmhyZWY7XG5cbiAgc3RhdGljIGdldFF1ZXJ5UGFyYW1ldGVycygpOiBhbnkge1xuICAgIHJldHVybiBVcmxVdGlscy5nZXRRdWVyeVBhcmFtZXRlcnNVc2luZ1BhcmFtZXRlcnMoZG9jdW1lbnQubG9jYXRpb24uc2VhcmNoKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRRdWVyeVBhcmFtZXRlcnNVc2luZ1BhcmFtZXRlcnMoc2VhcmNoOiBzdHJpbmcpOiBhbnkge1xuICAgIGNvbnN0IHIgPSBzZWFyY2gucmVwbGFjZSgvKF5cXD8pLywgJycpLnNwbGl0KCcmJykubWFwKGZ1bmN0aW9uIChuKSB7IHJldHVybiBuID0gbi5zcGxpdCgnPScpLCB0aGlzW25bMF1dID0gblsxXSwgdGhpczsgfS5iaW5kKHt9KSlbMF07XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBzdGF0aWMgZ2V0SW5pdGlhbFVybFBhcmFtZXRlcnMoKTogYW55IHtcbiAgICBjb25zdCBxdWVzdGlvbk1hcmtJbmRleCA9IFVybFV0aWxzLmluaXRpYWxVcmwuaW5kZXhPZignPycpO1xuICAgIGlmIChxdWVzdGlvbk1hcmtJbmRleCA+PSAwKSB7XG4gICAgICByZXR1cm4gVXJsVXRpbHMuaW5pdGlhbFVybC5zdWJzdHIocXVlc3Rpb25NYXJrSW5kZXgsIFVybFV0aWxzLmluaXRpYWxVcmwubGVuZ3RoIC0gcXVlc3Rpb25NYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHN0YXRpYyBnZXRSZXR1cm5VcmwoKTogc3RyaW5nIHtcbiAgICBjb25zdCBxdWVyeVN0cmluZ09iaiA9IFVybFV0aWxzLmdldFF1ZXJ5UGFyYW1ldGVyc1VzaW5nUGFyYW1ldGVycyhVcmxVdGlscy5nZXRJbml0aWFsVXJsUGFyYW1ldGVycygpKTtcbiAgICBpZiAocXVlcnlTdHJpbmdPYmoucmV0dXJuVXJsKSB7XG4gICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHF1ZXJ5U3RyaW5nT2JqLnJldHVyblVybCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzdGF0aWMgZ2V0U2luZ2xlU2lnbkluKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHF1ZXJ5U3RyaW5nT2JqID0gVXJsVXRpbHMuZ2V0UXVlcnlQYXJhbWV0ZXJzVXNpbmdQYXJhbWV0ZXJzKFVybFV0aWxzLmdldEluaXRpYWxVcmxQYXJhbWV0ZXJzKCkpO1xuICAgIGlmIChxdWVyeVN0cmluZ09iai5zcykge1xuICAgICAgcmV0dXJuIHF1ZXJ5U3RyaW5nT2JqLnNzO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl19