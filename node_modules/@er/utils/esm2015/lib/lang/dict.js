/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ObjectUtils } from './objects';
/**
 * @record
 * @template V
 */
export function Dict() { }
/**
 * @template V
 * @return {?}
 */
export function createDict() {
    return Object.create(null);
}
/**
 * @template V
 * @param {?} dict
 * @return {?}
 */
export function copyDict(dict) {
    return Object.assign(createDict(), dict);
}
/**
 * @param {?} dict
 * @param {?} key
 * @return {?}
 */
export function hasKey(dict, key) {
    return Object.prototype.hasOwnProperty.call(dict, key.toString());
}
/**
 * @template T, R
 * @param {?} dict
 * @param {?} map
 * @return {?}
 */
export function mapValues(dict, map) {
    /** @type {?} */
    const ret = createDict();
    /** @type {?} */
    let changed = false;
    for (const key of Object.keys(dict)) {
        ret[key] = map(dict[key]);
        if ((/** @type {?} */ (ret[key])) !== dict[key]) {
            changed = true;
        }
    }
    return changed ? ret : (/** @type {?} */ (dict));
}
/**
 * @template V
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
export function union(target, source) {
    return ObjectUtils.patch(target, source);
}
/**
 * @template V
 * @param {?} dict
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
export function setKey(dict, key, value) {
    if (dict[key] === value) {
        return dict;
    }
    /** @type {?} */
    const ret = copyDict(dict);
    ret[key] = value;
    return ret;
}
/**
 * @template V
 * @param {?} dict
 * @param {...?} keys
 * @return {?}
 */
export function removeKey(dict, ...keys) {
    /** @type {?} */
    const ret = copyDict(dict);
    /** @type {?} */
    let changed = false;
    for (const key of keys) {
        if (hasKey(ret, key.toString())) {
            changed = true;
            delete ret[key];
        }
    }
    return changed ? ret : dict;
}
/**
 * @template V
 * @param {?} keys
 * @param {?} values
 * @return {?}
 */
export function fromKeys(keys, values) {
    /** @type {?} */
    const ret = createDict();
    /** @type {?} */
    const isFunction = typeof values === 'function';
    for (const key of keys) {
        ret[key] = isFunction ? ((/** @type {?} */ (values)))(key) : values;
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGljdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci91dGlscy8iLCJzb3VyY2VzIjpbImxpYi9sYW5nL2RpY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7Ozs7O0FBR3RDLDBCQUVDOzs7OztBQUVELE1BQU0sVUFBVSxVQUFVO0lBQ3hCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QixDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFJLElBQWE7SUFDdkMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzlDLENBQUM7Ozs7OztBQUVELE1BQU0sVUFBVSxNQUFNLENBQUMsSUFBZSxFQUFFLEdBQVE7SUFDOUMsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQ3BFLENBQUM7Ozs7Ozs7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFPLElBQWEsRUFDYixHQUFvQjs7VUFDNUMsR0FBRyxHQUFHLFVBQVUsRUFBSzs7UUFFdkIsT0FBTyxHQUFHLEtBQUs7SUFFbkIsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ25DLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDMUIsSUFBSSxtQkFBQSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQU8sS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDakMsT0FBTyxHQUFHLElBQUksQ0FBQztTQUNoQjtLQUNGO0lBRUQsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsbUJBQUEsSUFBSSxFQUFPLENBQUM7QUFDckMsQ0FBQzs7Ozs7OztBQUdELE1BQU0sVUFBVSxLQUFLLENBQUksTUFBZSxFQUFFLE1BQWU7SUFDdkQsT0FBTyxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMzQyxDQUFDOzs7Ozs7OztBQUdELE1BQU0sVUFBVSxNQUFNLENBQUksSUFBYSxFQUFFLEdBQVEsRUFBRSxLQUFRO0lBQ3pELElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEtBQUssRUFBRTtRQUN2QixPQUFPLElBQUksQ0FBQztLQUNiOztVQUVLLEdBQUcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO0lBRTFCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7SUFFakIsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDOzs7Ozs7O0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBSSxJQUFhLEVBQUUsR0FBRyxJQUFXOztVQUNsRCxHQUFHLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQzs7UUFFdEIsT0FBTyxHQUFHLEtBQUs7SUFFbkIsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDdEIsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFO1lBQy9CLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFDZixPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNqQjtLQUNGO0lBRUQsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQzlCLENBQUM7Ozs7Ozs7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFJLElBQVcsRUFDWCxNQUE2Qjs7VUFDakQsR0FBRyxHQUFHLFVBQVUsRUFBSzs7VUFFckIsVUFBVSxHQUFHLE9BQU8sTUFBTSxLQUFLLFVBQVU7SUFFL0MsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDdEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBQSxNQUFNLEVBQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7S0FDdkQ7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge09iamVjdFV0aWxzfSBmcm9tICcuL29iamVjdHMnO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgRGljdDxWPiB7XG4gIFtrZXk6IHN0cmluZ106IFY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaWN0PFY+KCk6IERpY3Q8Vj4ge1xuICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHlEaWN0PFY+KGRpY3Q6IERpY3Q8Vj4pOiBEaWN0PFY+IHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oY3JlYXRlRGljdDxWPigpLCBkaWN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0tleShkaWN0OiBEaWN0PGFueT4sIGtleTogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZGljdCwga2V5LnRvU3RyaW5nKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwVmFsdWVzPFQsIFI+KGRpY3Q6IERpY3Q8VD4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogKHZhbHVlOiBUKSA9PiBSKTogRGljdDxSPiB7XG4gIGNvbnN0IHJldCA9IGNyZWF0ZURpY3Q8Uj4oKTtcblxuICBsZXQgY2hhbmdlZCA9IGZhbHNlO1xuXG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGRpY3QpKSB7XG4gICAgcmV0W2tleV0gPSBtYXAoZGljdFtrZXldKTtcbiAgICBpZiAocmV0W2tleV0gYXMgYW55ICE9PSBkaWN0W2tleV0pIHtcbiAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjaGFuZ2VkID8gcmV0IDogZGljdCBhcyBhbnk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHVuaW9uPFY+KHRhcmdldDogRGljdDxWPiwgc291cmNlOiBEaWN0PFY+KTogRGljdDxWPiB7XG4gIHJldHVybiBPYmplY3RVdGlscy5wYXRjaCh0YXJnZXQsIHNvdXJjZSk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEtleTxWPihkaWN0OiBEaWN0PFY+LCBrZXk6IGFueSwgdmFsdWU6IFYpOiBEaWN0PFY+IHtcbiAgaWYgKGRpY3Rba2V5XSA9PT0gdmFsdWUpIHtcbiAgICByZXR1cm4gZGljdDtcbiAgfVxuXG4gIGNvbnN0IHJldCA9IGNvcHlEaWN0KGRpY3QpO1xuXG4gIHJldFtrZXldID0gdmFsdWU7XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUtleTxWPihkaWN0OiBEaWN0PFY+LCAuLi5rZXlzOiBhbnlbXSk6IERpY3Q8Vj4ge1xuICBjb25zdCByZXQgPSBjb3B5RGljdChkaWN0KTtcblxuICBsZXQgY2hhbmdlZCA9IGZhbHNlO1xuXG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBpZiAoaGFzS2V5KHJldCwga2V5LnRvU3RyaW5nKCkpKSB7XG4gICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIGRlbGV0ZSByZXRba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2hhbmdlZCA/IHJldCA6IGRpY3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tS2V5czxWPihrZXlzOiBhbnlbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFYgfCAoKGtleTogYW55KSA9PiBWKSk6IERpY3Q8Vj4ge1xuICBjb25zdCByZXQgPSBjcmVhdGVEaWN0PFY+KCk7XG5cbiAgY29uc3QgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWx1ZXMgPT09ICdmdW5jdGlvbic7XG5cbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgIHJldFtrZXldID0gaXNGdW5jdGlvbiA/ICh2YWx1ZXMgYXMgYW55KShrZXkpIDogdmFsdWVzO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cbiJdfQ==