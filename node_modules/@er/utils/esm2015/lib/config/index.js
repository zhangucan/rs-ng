/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ApiServerType, LogLevel, NotifyType } from '@er/types';
import { CommonsUtils } from '../comm';
/** @type {?} */
const DEFAULT_APP_CONFIG = {
    version: '0.0.1',
    stomp: {
        enabled: false,
        destination: '/message/push',
        headers: {},
        heartbeat_in: 0,
        // Typical value 0 - disabled
        heartbeat_out: 20000,
        // Typical value 20000 - every 20 seconds
        reconnect_delay: 5000,
        debug: false
    },
    auth: {
        storageKey: 'erCurrentUser',
        headerName: 'Authorization',
        authScheme: 'Bearer ',
        userTokenKey: 'userName',
        passwordKey: 'password',
        rememberMeKey: 'rememberMe',
        requiredUserProps: 'org',
        loginRouter: 'user/login',
        loginApiOptions: { serverType: ApiServerType.App },
        loginSuccessRouter: '/',
        logoutSuccessRouter: 'user/login'
    },
    alert: {},
    announce: {},
    notify: NotifyType.ALERT,
    onLoading: 'fa fa-cog fa-spin fa-3x indigo',
    enableLogger: true,
    dataFieldProps: {
        dataCode: {
            apiEntry: 'data_code',
            codeKey: 'code',
            nameKey: 'name',
            parentKey: 'parent',
            catKey: 'codeCat'
        }
    },
    wechat: {
        self_redirect: true,
        scope: 'snsapi_login',
        state: '',
        style: 'black',
        href: ''
    },
    log: {
        enableApp: true,
        enableRoute: false,
        level: LogLevel.DEBUG,
        httpPost: false,
        blackLList: ['PropsBindDirective']
    }
};
export class ConfigUtils {
    /**
     * @return {?}
     */
    static getConfig() {
        return ConfigUtils.moduleConfig || ConfigUtils.appConfig;
    }
    /**
     * @param {?} customer
     * @return {?}
     */
    static configApp(customer) {
        ConfigUtils.appConfig = CommonsUtils.merge({}, DEFAULT_APP_CONFIG, customer);
        return ConfigUtils.appConfig;
    }
    /**
     * @param {?} moduleConf
     * @param {?} url
     * @return {?}
     */
    static configModule(moduleConf, url) {
        /** @type {?} */
        let config = moduleConf;
        if (url && url === ConfigUtils.lastUrl) {
            config = CommonsUtils.merge(ConfigUtils.lastConfig, moduleConf);
        }
        else {
            ConfigUtils.lastUrl = url;
            ConfigUtils.lastConfig = moduleConf;
        }
        ConfigUtils.moduleConfig = CommonsUtils.merge({}, ConfigUtils.appConfig, config);
        return ConfigUtils.moduleConfig;
    }
    /**
     * @param {?} namePath
     * @param {?=} defaultValue
     * @return {?}
     */
    static get(namePath, defaultValue) {
        return CommonsUtils.get(ConfigUtils.getConfig(), namePath, defaultValue);
    }
}
ConfigUtils.lastUrl = undefined;
ConfigUtils.lastConfig = {};
ConfigUtils.appConfig = Object.assign({}, DEFAULT_APP_CONFIG);
ConfigUtils.moduleConfig = undefined;
if (false) {
    /** @type {?} */
    ConfigUtils.lastUrl;
    /** @type {?} */
    ConfigUtils.lastConfig;
    /** @type {?} */
    ConfigUtils.appConfig;
    /** @type {?} */
    ConfigUtils.moduleConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdXRpbHMvIiwic291cmNlcyI6WyJsaWIvY29uZmlnL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsYUFBYSxFQUFlLFFBQVEsRUFBRSxVQUFVLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDM0UsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFNBQVMsQ0FBQzs7TUFFL0Isa0JBQWtCLEdBQWdCO0lBQ3RDLE9BQU8sRUFBRSxPQUFPO0lBQ2hCLEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxLQUFLO1FBQ2QsV0FBVyxFQUFFLGVBQWU7UUFDNUIsT0FBTyxFQUFFLEVBQUU7UUFDWCxZQUFZLEVBQUUsQ0FBQzs7UUFDZixhQUFhLEVBQUUsS0FBSzs7UUFDcEIsZUFBZSxFQUFFLElBQUk7UUFDckIsS0FBSyxFQUFFLEtBQUs7S0FDYjtJQUNELElBQUksRUFBRTtRQUNKLFVBQVUsRUFBRSxlQUFlO1FBQzNCLFVBQVUsRUFBRSxlQUFlO1FBQzNCLFVBQVUsRUFBRSxTQUFTO1FBQ3JCLFlBQVksRUFBRSxVQUFVO1FBQ3hCLFdBQVcsRUFBRSxVQUFVO1FBQ3ZCLGFBQWEsRUFBRSxZQUFZO1FBQzNCLGlCQUFpQixFQUFFLEtBQUs7UUFDeEIsV0FBVyxFQUFFLFlBQVk7UUFDekIsZUFBZSxFQUFFLEVBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxHQUFHLEVBQUM7UUFDaEQsa0JBQWtCLEVBQUUsR0FBRztRQUN2QixtQkFBbUIsRUFBRSxZQUFZO0tBQ2xDO0lBQ0QsS0FBSyxFQUFFLEVBQUU7SUFDVCxRQUFRLEVBQUUsRUFBRTtJQUNaLE1BQU0sRUFBRSxVQUFVLENBQUMsS0FBSztJQUN4QixTQUFTLEVBQUUsZ0NBQWdDO0lBQzNDLFlBQVksRUFBRSxJQUFJO0lBQ2xCLGNBQWMsRUFBRTtRQUNkLFFBQVEsRUFBRTtZQUNSLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLE9BQU8sRUFBRSxNQUFNO1lBQ2YsT0FBTyxFQUFFLE1BQU07WUFDZixTQUFTLEVBQUUsUUFBUTtZQUNuQixNQUFNLEVBQUUsU0FBUztTQUNsQjtLQUNGO0lBQ0QsTUFBTSxFQUFFO1FBQ04sYUFBYSxFQUFFLElBQUk7UUFDbkIsS0FBSyxFQUFFLGNBQWM7UUFDckIsS0FBSyxFQUFFLEVBQUU7UUFDVCxLQUFLLEVBQUUsT0FBTztRQUNkLElBQUksRUFBRSxFQUFFO0tBQ1Q7SUFDRCxHQUFHLEVBQUU7UUFDSCxTQUFTLEVBQUUsSUFBSTtRQUNmLFdBQVcsRUFBRSxLQUFLO1FBQ2xCLEtBQUssRUFBRSxRQUFRLENBQUMsS0FBSztRQUNyQixRQUFRLEVBQUUsS0FBSztRQUNmLFVBQVUsRUFBRSxDQUFDLG9CQUFvQixDQUFDO0tBQ25DO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sV0FBVzs7OztJQVl0QixNQUFNLENBQUMsU0FBUztRQUNkLE9BQU8sV0FBVyxDQUFDLFlBQVksSUFBSSxXQUFXLENBQUMsU0FBUyxDQUFDO0lBQzNELENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUEwQjtRQUN6QyxXQUFXLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLGtCQUFrQixFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzdFLE9BQU8sV0FBVyxDQUFDLFNBQVMsQ0FBQztJQUMvQixDQUFDOzs7Ozs7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLFVBQTRCLEVBQUUsR0FBVzs7WUFDdkQsTUFBTSxHQUFHLFVBQVU7UUFDdkIsSUFBSSxHQUFHLElBQUksR0FBRyxLQUFLLFdBQVcsQ0FBQyxPQUFPLEVBQUU7WUFDdEMsTUFBTSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNqRTthQUFNO1lBQ0wsV0FBVyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7WUFDMUIsV0FBVyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7U0FDckM7UUFDRCxXQUFXLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLFdBQVcsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDakYsT0FBTyxXQUFXLENBQUMsWUFBWSxDQUFDO0lBQ2xDLENBQUM7Ozs7OztJQUVELE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBZ0IsRUFBRSxZQUFhO1FBQ3hDLE9BQU8sWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLEVBQUUsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzNFLENBQUM7O0FBakNNLG1CQUFPLEdBQUcsU0FBUyxDQUFDO0FBRXBCLHNCQUFVLEdBQUcsRUFBRSxDQUFDO0FBRWhCLHFCQUFTLHFCQUNYLGtCQUFrQixFQUNyQjtBQUVLLHdCQUFZLEdBQWdCLFNBQVMsQ0FBQzs7O0lBUjdDLG9CQUEyQjs7SUFFM0IsdUJBQXVCOztJQUV2QixzQkFFRTs7SUFFRix5QkFBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FwaVNlcnZlclR5cGUsIENvbmZpZ01vZGVsLCBMb2dMZXZlbCwgTm90aWZ5VHlwZX0gZnJvbSAnQGVyL3R5cGVzJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICcuLi9jb21tJztcblxuY29uc3QgREVGQVVMVF9BUFBfQ09ORklHOiBDb25maWdNb2RlbCA9IHtcbiAgdmVyc2lvbjogJzAuMC4xJyxcbiAgc3RvbXA6IHtcbiAgICBlbmFibGVkOiBmYWxzZSxcbiAgICBkZXN0aW5hdGlvbjogJy9tZXNzYWdlL3B1c2gnLFxuICAgIGhlYWRlcnM6IHt9LFxuICAgIGhlYXJ0YmVhdF9pbjogMCwgLy8gVHlwaWNhbCB2YWx1ZSAwIC0gZGlzYWJsZWRcbiAgICBoZWFydGJlYXRfb3V0OiAyMDAwMCwgLy8gVHlwaWNhbCB2YWx1ZSAyMDAwMCAtIGV2ZXJ5IDIwIHNlY29uZHNcbiAgICByZWNvbm5lY3RfZGVsYXk6IDUwMDAsXG4gICAgZGVidWc6IGZhbHNlXG4gIH0sXG4gIGF1dGg6IHtcbiAgICBzdG9yYWdlS2V5OiAnZXJDdXJyZW50VXNlcicsXG4gICAgaGVhZGVyTmFtZTogJ0F1dGhvcml6YXRpb24nLFxuICAgIGF1dGhTY2hlbWU6ICdCZWFyZXIgJyxcbiAgICB1c2VyVG9rZW5LZXk6ICd1c2VyTmFtZScsXG4gICAgcGFzc3dvcmRLZXk6ICdwYXNzd29yZCcsXG4gICAgcmVtZW1iZXJNZUtleTogJ3JlbWVtYmVyTWUnLFxuICAgIHJlcXVpcmVkVXNlclByb3BzOiAnb3JnJyxcbiAgICBsb2dpblJvdXRlcjogJ3VzZXIvbG9naW4nLFxuICAgIGxvZ2luQXBpT3B0aW9uczoge3NlcnZlclR5cGU6IEFwaVNlcnZlclR5cGUuQXBwfSxcbiAgICBsb2dpblN1Y2Nlc3NSb3V0ZXI6ICcvJyxcbiAgICBsb2dvdXRTdWNjZXNzUm91dGVyOiAndXNlci9sb2dpbidcbiAgfSxcbiAgYWxlcnQ6IHt9LFxuICBhbm5vdW5jZToge30sXG4gIG5vdGlmeTogTm90aWZ5VHlwZS5BTEVSVCxcbiAgb25Mb2FkaW5nOiAnZmEgZmEtY29nIGZhLXNwaW4gZmEtM3ggaW5kaWdvJyxcbiAgZW5hYmxlTG9nZ2VyOiB0cnVlLFxuICBkYXRhRmllbGRQcm9wczoge1xuICAgIGRhdGFDb2RlOiB7XG4gICAgICBhcGlFbnRyeTogJ2RhdGFfY29kZScsXG4gICAgICBjb2RlS2V5OiAnY29kZScsXG4gICAgICBuYW1lS2V5OiAnbmFtZScsXG4gICAgICBwYXJlbnRLZXk6ICdwYXJlbnQnLFxuICAgICAgY2F0S2V5OiAnY29kZUNhdCdcbiAgICB9XG4gIH0sXG4gIHdlY2hhdDoge1xuICAgIHNlbGZfcmVkaXJlY3Q6IHRydWUsXG4gICAgc2NvcGU6ICdzbnNhcGlfbG9naW4nLFxuICAgIHN0YXRlOiAnJyxcbiAgICBzdHlsZTogJ2JsYWNrJyxcbiAgICBocmVmOiAnJ1xuICB9LFxuICBsb2c6IHtcbiAgICBlbmFibGVBcHA6IHRydWUsXG4gICAgZW5hYmxlUm91dGU6IGZhbHNlLFxuICAgIGxldmVsOiBMb2dMZXZlbC5ERUJVRyxcbiAgICBodHRwUG9zdDogZmFsc2UsXG4gICAgYmxhY2tMTGlzdDogWydQcm9wc0JpbmREaXJlY3RpdmUnXVxuICB9XG59O1xuXG5leHBvcnQgY2xhc3MgQ29uZmlnVXRpbHMge1xuXG4gIHN0YXRpYyBsYXN0VXJsID0gdW5kZWZpbmVkO1xuXG4gIHN0YXRpYyBsYXN0Q29uZmlnID0ge307XG5cbiAgc3RhdGljIGFwcENvbmZpZzogQ29uZmlnTW9kZWwgPSB7XG4gICAgLi4uREVGQVVMVF9BUFBfQ09ORklHXG4gIH07XG5cbiAgc3RhdGljIG1vZHVsZUNvbmZpZzogQ29uZmlnTW9kZWwgPSB1bmRlZmluZWQ7XG5cbiAgc3RhdGljIGdldENvbmZpZygpOiBDb25maWdNb2RlbCB7XG4gICAgcmV0dXJuIENvbmZpZ1V0aWxzLm1vZHVsZUNvbmZpZyB8fCBDb25maWdVdGlscy5hcHBDb25maWc7XG4gIH1cblxuICBzdGF0aWMgY29uZmlnQXBwKGN1c3RvbWVyOiBDb25maWdNb2RlbCB8IHt9KTogQ29uZmlnTW9kZWwge1xuICAgIENvbmZpZ1V0aWxzLmFwcENvbmZpZyA9IENvbW1vbnNVdGlscy5tZXJnZSh7fSwgREVGQVVMVF9BUFBfQ09ORklHLCBjdXN0b21lcik7XG4gICAgcmV0dXJuIENvbmZpZ1V0aWxzLmFwcENvbmZpZztcbiAgfVxuXG4gIHN0YXRpYyBjb25maWdNb2R1bGUobW9kdWxlQ29uZjogQ29uZmlnTW9kZWwgfCB7fSwgdXJsOiBzdHJpbmcpOiBDb25maWdNb2RlbCB7XG4gICAgbGV0IGNvbmZpZyA9IG1vZHVsZUNvbmY7XG4gICAgaWYgKHVybCAmJiB1cmwgPT09IENvbmZpZ1V0aWxzLmxhc3RVcmwpIHtcbiAgICAgIGNvbmZpZyA9IENvbW1vbnNVdGlscy5tZXJnZShDb25maWdVdGlscy5sYXN0Q29uZmlnLCBtb2R1bGVDb25mKTtcbiAgICB9IGVsc2Uge1xuICAgICAgQ29uZmlnVXRpbHMubGFzdFVybCA9IHVybDtcbiAgICAgIENvbmZpZ1V0aWxzLmxhc3RDb25maWcgPSBtb2R1bGVDb25mO1xuICAgIH1cbiAgICBDb25maWdVdGlscy5tb2R1bGVDb25maWcgPSBDb21tb25zVXRpbHMubWVyZ2Uoe30sIENvbmZpZ1V0aWxzLmFwcENvbmZpZywgY29uZmlnKTtcbiAgICByZXR1cm4gQ29uZmlnVXRpbHMubW9kdWxlQ29uZmlnO1xuICB9XG5cbiAgc3RhdGljIGdldChuYW1lUGF0aDogc3RyaW5nLCBkZWZhdWx0VmFsdWU/KSB7XG4gICAgcmV0dXJuIENvbW1vbnNVdGlscy5nZXQoQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCksIG5hbWVQYXRoLCBkZWZhdWx0VmFsdWUpO1xuICB9XG59XG4iXX0=