import * as momentNs from 'moment';
import { FormGroup } from '@angular/forms';
import pinyinlite from 'pinyinlite/index_full';
import { from, of, throwError, BehaviorSubject, fromEvent } from 'rxjs';
import * as _ from 'lodash';
import { range, isEqual, cloneDeep, merge, pickBy, pick, defaultsDeep, set, get, extend, compact, omit, omitBy, unset, find, findIndex, remove, forOwn, map, uniqBy, orderBy, union, flatten, flattenDeep, filter, template } from 'lodash';
import { catchError, map as map$1, first, filter as filter$1, delay, retryWhen, scan } from 'rxjs/operators';
import { __assign, __values, __spread, __rest } from 'tslib';
import { VarType, RegPatterns, Devices, UI_COLORS, ChartType, StateNames, ReadAs, ApiServerType, LogLevel, NotifyType, DEFAULT_TREE_NODE_KEYS, NotifyLevel, AggInterval, AggIntervalProps, AggMethods, AggMethodsProps, DEFAULT_ES_QUERY_CONDITION, DEFAULT_QUERY_CONDITION, ES_QUERY_OPERATORS, Order } from '@er/types';
import { avgAggregation, cardinalityAggregation, maxAggregation, minAggregation, sumAggregation, valueCountAggregation, wildcardQuery, prefixQuery, termQuery, matchQuery, requestBodySearch, boolQuery, sort, histogramAggregation, dateHistogramAggregation, termsAggregation, RequestBodySearch } from 'elastic-builder';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var Utils = {
// common: CommonsUtils,
// context: ContextUtils,
// config: ConfigUtils,
// object: ObjectUtils,
// states: StatesUtils,
// reg: RegUtils,
// tree: TreeUtils,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CacheUtils = /** @class */ (function () {
    function CacheUtils() {
    }
    /**
     * @return {?}
     */
    CacheUtils.getSeq = /**
     * @return {?}
     */
    function () {
        return ++CacheUtils.seq;
    };
    /**
     * @return {?}
     */
    CacheUtils.getModuleId = /**
     * @return {?}
     */
    function () {
        return ++CacheUtils.moduleId;
    };
    /**
     * @template T
     * @param {?} type
     * @param {?} key
     * @return {?}
     */
    CacheUtils.get = /**
     * @template T
     * @param {?} type
     * @param {?} key
     * @return {?}
     */
    function (type, key) {
        /** @type {?} */
        var typeCache = CacheUtils.getTypeCache(type);
        if (!typeCache) {
            return null;
        }
        return typeCache.get(key);
    };
    /**
     * @template T
     * @param {?} type
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    CacheUtils.put = /**
     * @template T
     * @param {?} type
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    function (type, key, data) {
        /** @type {?} */
        var typeCache = CacheUtils.getTypeCache(type);
        if (!typeCache) {
            typeCache = new Map();
            CacheUtils.cache.set(type, typeCache);
        }
        typeCache.set(key, data);
    };
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    CacheUtils.getTypeCache = /**
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return CacheUtils.cache.get(type);
    };
    CacheUtils.cache = new Map();
    CacheUtils.seq = 0;
    CacheUtils.moduleId = 0;
    return CacheUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommonsUtils = /** @class */ (function () {
    function CommonsUtils() {
    }
    /**
     * @return {?}
     */
    CommonsUtils.lodash = /**
     * @return {?}
     */
    function () {
        return _;
    };
    /**
     * @return {?}
     */
    CommonsUtils.getSeq = /**
     * @return {?}
     */
    function () {
        return CacheUtils.getSeq();
    };
    /**
     * @param {?=} max
     * @param {?=} min
     * @return {?}
     */
    CommonsUtils.getRandomNumber = /**
     * @param {?=} max
     * @param {?=} min
     * @return {?}
     */
    function (max, min) {
        if (max === void 0) { max = 10; }
        /** @type {?} */
        var result = Math.floor(Math.random() * (max + 1) + (min || 0));
        return result;
    };
    /**
     * @template T
     * @param {?} src
     * @param {?} key
     * @return {?}
     */
    CommonsUtils.getObjWhenStr = /**
     * @template T
     * @param {?} src
     * @param {?} key
     * @return {?}
     */
    function (src, key) {
        var _a;
        /** @type {?} */
        var result = (typeof src === 'string') ? (/** @type {?} */ (_a = {}, _a[key] = src, _a)) : src;
        return result;
    };
    /**
     * @param {?} object
     * @return {?}
     */
    CommonsUtils.getVarType = /**
     * @param {?} object
     * @return {?}
     */
    function (object) {
        /** @type {?} */
        var type = VarType.UNKNOWN;
        if (object === null) {
            type = VarType.NULL;
        }
        else if (object === undefined) {
            type = VarType.UNDEFINED;
        }
        else if (object === true || object === false) {
            type = VarType.BOOLEAN;
        }
        if (type !== VarType.UNKNOWN) {
            return type;
        }
        /** @type {?} */
        var objectType = typeof object;
        if (objectType === 'string') {
            // if (DateUtils.isDate(object)) {
            //   return VarType.DATE;
            // }
            type = VarType.STRING;
        }
        else if (objectType === 'number') {
            type = VarType.NUMBER;
        }
        else if (objectType === 'function') {
            type = VarType.FUNCTION;
        }
        if (object.constructor === [].constructor) {
            type = VarType.ARRAY;
        }
        else if (object.constructor === {}.constructor) {
            type = VarType.JSON;
        }
        return type;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CommonsUtils.isNullOrUndefined = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value === undefined || value === null;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.isString = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return CommonsUtils.getVarType(obj) === VarType.STRING;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.isBoolean = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return CommonsUtils.getVarType(obj) === VarType.BOOLEAN;
    };
    /**
     * @param {?} s
     * @return {?}
     */
    CommonsUtils.isEmptyString = /**
     * @param {?} s
     * @return {?}
     */
    function (s) {
        return !s || CommonsUtils.isString(s) && s.trim().length === 0;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.isArray = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return CommonsUtils.getVarType(obj) === VarType.ARRAY;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.isNumber = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return CommonsUtils.getVarType(obj) === VarType.NUMBER;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.isJson = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return CommonsUtils.getVarType(obj) === VarType.JSON;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.isFunction = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return CommonsUtils.getVarType(obj) === VarType.FUNCTION;
    };
    /**
     * @param {?} str
     * @return {?}
     */
    CommonsUtils.isUrl = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
        return regexp.test(str);
    };
    /**
     * @param {?} str
     * @return {?}
     */
    CommonsUtils.isInteger = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return !CommonsUtils.isNullOrUndefined(str) && /^\d+$/.test(str);
    };
    /**
     * @param {?} value
     * @param {?} other
     * @return {?}
     */
    CommonsUtils.isEqual = /**
     * @param {?} value
     * @param {?} other
     * @return {?}
     */
    function (value, other) {
        return isEqual(value, other);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.copy = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return cloneDeep(obj);
    };
    /**
     * @param {?} obj1
     * @param {...?} obj2
     * @return {?}
     */
    CommonsUtils.merge = /**
     * @param {?} obj1
     * @param {...?} obj2
     * @return {?}
     */
    function (obj1) {
        var obj2 = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            obj2[_i - 1] = arguments[_i];
        }
        return merge.apply(null, __spread([obj1], obj2));
    };
    /**
     * @param {?} obj
     * @param {?} predicate
     * @return {?}
     */
    CommonsUtils.pickBy = /**
     * @param {?} obj
     * @param {?} predicate
     * @return {?}
     */
    function (obj, predicate) {
        return pickBy(obj, predicate);
    };
    /**
     * @param {?} obj
     * @param {?} keys
     * @return {?}
     */
    CommonsUtils.pick = /**
     * @param {?} obj
     * @param {?} keys
     * @return {?}
     */
    function (obj, keys) {
        return pick(obj, keys);
    };
    /**
     * @param {?} obj1
     * @param {...?} obj2
     * @return {?}
     */
    CommonsUtils.defaults = /**
     * @param {?} obj1
     * @param {...?} obj2
     * @return {?}
     */
    function (obj1) {
        var obj2 = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            obj2[_i - 1] = arguments[_i];
        }
        return defaultsDeep.apply(undefined, __spread([obj1], obj2));
    };
    /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    CommonsUtils.equals = /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    function (obj1, obj2) {
        return isEqual(obj1, obj2);
    };
    /**
     * @param {?} obj
     * @param {?} path
     * @param {?} value
     * @return {?}
     */
    CommonsUtils.set = /**
     * @param {?} obj
     * @param {?} path
     * @param {?} value
     * @return {?}
     */
    function (obj, path, value) {
        return set(obj, path, value);
    };
    /**
     * @param {?} obj
     * @param {?} path
     * @param {?=} defaultValue
     * @return {?}
     */
    CommonsUtils.get = /**
     * @param {?} obj
     * @param {?} path
     * @param {?=} defaultValue
     * @return {?}
     */
    function (obj, path, defaultValue) {
        return get(obj, path, defaultValue);
    };
    /**
     * @param {?} obj
     * @param {?} source
     * @return {?}
     */
    CommonsUtils.extend = /**
     * @param {?} obj
     * @param {?} source
     * @return {?}
     */
    function (obj, source) {
        return extend(obj, source);
    };
    /**
     * @param {?} collection
     * @return {?}
     */
    CommonsUtils.compact = /**
     * @param {?} collection
     * @return {?}
     */
    function (collection) {
        return compact(collection);
    };
    /**
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */
    CommonsUtils.omit = /**
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */
    function (obj, path) {
        return omit(obj, path);
    };
    /**
     * @param {?} obj
     * @param {?} predicate
     * @return {?}
     */
    CommonsUtils.omitBy = /**
     * @param {?} obj
     * @param {?} predicate
     * @return {?}
     */
    function (obj, predicate) {
        return omitBy(obj, predicate);
    };
    /**
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */
    CommonsUtils.unset = /**
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */
    function (obj, path) {
        return unset(obj, path);
    };
    /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    CommonsUtils.find = /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    function (collection, predicate) {
        return find(collection, predicate);
    };
    /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    CommonsUtils.findIndex = /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    function (collection, predicate) {
        return findIndex(collection, predicate);
    };
    /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    CommonsUtils.remove = /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    function (collection, predicate) {
        return remove(collection, predicate);
    };
    /**
     * @param {?} obj
     * @param {?} iteratee
     * @return {?}
     */
    CommonsUtils.forOwn = /**
     * @param {?} obj
     * @param {?} iteratee
     * @return {?}
     */
    function (obj, iteratee) {
        return forOwn(obj, iteratee);
    };
    /**
     * @param {?} obj
     * @param {?} iteratee
     * @return {?}
     */
    CommonsUtils.map = /**
     * @param {?} obj
     * @param {?} iteratee
     * @return {?}
     */
    function (obj, iteratee) {
        return map(obj, iteratee);
    };
    /**
     * @param {?} obj
     * @param {?} by
     * @return {?}
     */
    CommonsUtils.unique = /**
     * @param {?} obj
     * @param {?} by
     * @return {?}
     */
    function (obj, by) {
        return uniqBy(obj, by);
    };
    /**
     * @param {?} obj
     * @param {?} iteratees
     * @param {?=} orders
     * @return {?}
     */
    CommonsUtils.orderBy = /**
     * @param {?} obj
     * @param {?} iteratees
     * @param {?=} orders
     * @return {?}
     */
    function (obj, iteratees, orders) {
        return orderBy(obj, iteratees, orders);
    };
    /**
     * @param {...?} obj
     * @return {?}
     */
    CommonsUtils.union = /**
     * @param {...?} obj
     * @return {?}
     */
    function () {
        var obj = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            obj[_i] = arguments[_i];
        }
        return union(obj);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.flatten = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return flatten(obj);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.flattenDeep = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return flattenDeep(obj);
    };
    /**
     * @param {?} src
     * @param {?} format
     * @return {?}
     */
    CommonsUtils.format = /**
     * @param {?} src
     * @param {?} format
     * @return {?}
     */
    function (src, format) {
        return src;
    };
    /**
     * @param {?} o1
     * @param {?} o2
     * @return {?}
     */
    CommonsUtils.jsonConcat = /**
     * @param {?} o1
     * @param {?} o2
     * @return {?}
     */
    function (o1, o2) {
        for (var key in o2) {
            o1[key] = o2[key];
        }
        return o1;
    };
    /**
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    CommonsUtils.escape = /**
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    function (obj, key) {
        var _a = key, deletedItem = obj[_a], rest = __rest(obj, [typeof _a === "symbol" ? _a : _a + ""]);
        return rest;
    };
    /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    CommonsUtils.filter = /**
     * @param {?} collection
     * @param {?} predicate
     * @return {?}
     */
    function (collection, predicate) {
        return filter(collection, predicate);
    };
    /**
     * @param {?} obj
     * @param {?} predicate
     * @return {?}
     */
    CommonsUtils.where = /**
     * @param {?} obj
     * @param {?} predicate
     * @return {?}
     */
    function (obj, predicate) {
        if (Object.keys(predicate).every(function (key) { return obj && obj[key] === predicate[key]; })) {
            return obj;
        }
        else {
            return null;
        }
    };
    /**
     * @param {?} s
     * @return {?}
     */
    CommonsUtils.capitalize = /**
     * @param {?} s
     * @return {?}
     */
    function (s) {
        if (s) {
            return s.charAt(0).toUpperCase() + s.slice(1);
        }
        else {
            return s;
        }
    };
    /**
     * @param {?} s
     * @param {?} vars
     * @return {?}
     */
    CommonsUtils.templateStr = /**
     * @param {?} s
     * @param {?} vars
     * @return {?}
     */
    function (s, vars) {
        /** @type {?} */
        var compiled = template(s);
        return compiled(vars);
    };
    /**
     * @param {?} s
     * @return {?}
     */
    CommonsUtils.isTemplateStr = /**
     * @param {?} s
     * @return {?}
     */
    function (s) {
        /** @type {?} */
        var isMatch = /.*\${.*}.*/.test(s) || /.*<%=(.*)%>.*/.test(s);
        return isMatch;
    };
    /**
     * @template T
     * @param {?} item
     * @param {?=} keyName
     * @return {?}
     */
    CommonsUtils.getArray = /**
     * @template T
     * @param {?} item
     * @param {?=} keyName
     * @return {?}
     */
    function (item, keyName) {
        var _a;
        /** @type {?} */
        var items = [];
        if (item) {
            if (CommonsUtils.isArray(item)) {
                return (/** @type {?} */ (item));
            }
            else if (CommonsUtils.isJson(item)) {
                for (var key in item) {
                    if (key) {
                        /** @type {?} */
                        var c = item[key];
                        if (keyName) {
                            c = __assign((_a = {}, _a[keyName] = key, _a), c);
                        }
                        items.push(c);
                    }
                }
            }
            else {
                items.push(item);
            }
        }
        return items;
    };
    /**
     * @param {?} obj
     * @param {...?} keys
     * @return {?}
     */
    CommonsUtils.removeKeys = /**
     * @param {?} obj
     * @param {...?} keys
     * @return {?}
     */
    function (obj) {
        var keys = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            keys[_i - 1] = arguments[_i];
        }
        /** @type {?} */
        var o = obj;
        while (keys.length > 0) {
            o = CommonsUtils.set(o, keys, undefined);
            CommonsUtils.unset(o, keys);
            keys.pop();
            /** @type {?} */
            var v = CommonsUtils.get(o, keys);
            if (!CommonsUtils.isEmpty(v)) {
                break;
            }
        }
        return o;
    };
    /**
     * @param {?} value
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    CommonsUtils.extract = /**
     * @param {?} value
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    function (value, from$$1, to) {
        /** @type {?} */
        var target;
        if (value && (from$$1 !== to)) {
            if (to >= value.length) {
                target = to - value.length;
                while ((target--) + 1) {
                    value.push(undefined);
                }
            }
            value.splice(to, 0, value.splice(from$$1, 1)[0]);
        }
    };
    /**
     * @param {?} srcArray
     * @param {?} item
     * @param {?=} index
     * @return {?}
     */
    CommonsUtils.addItem = /**
     * @param {?} srcArray
     * @param {?} item
     * @param {?=} index
     * @return {?}
     */
    function (srcArray, item, index) {
        /** @type {?} */
        var toAdd = item;
        if (!CommonsUtils.isArray(item)) {
            toAdd = [item];
        }
        if (index) {
            return [].concat(srcArray.slice(0, index), toAdd, srcArray.slice(index));
        }
        else {
            return [].concat(srcArray, toAdd);
        }
    };
    /**
     * @param {?} a
     * @param {?} index
     * @return {?}
     */
    CommonsUtils.removeByIndex = /**
     * @param {?} a
     * @param {?} index
     * @return {?}
     */
    function (a, index) {
        return [].concat(a.slice(0, index), a.slice(index + 1));
    };
    /**
     * @template T
     * @param {?} a
     * @param {?} index
     * @param {?} element
     * @return {?}
     */
    CommonsUtils.replace = /**
     * @template T
     * @param {?} a
     * @param {?} index
     * @param {?} element
     * @return {?}
     */
    function (a, index, element) {
        return [].concat(a.slice(0, index), element, a.slice(index + 1));
    };
    /**
     * @template T
     * @param {?} a
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    CommonsUtils.move = /**
     * @template T
     * @param {?} a
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    function (a, from$$1, to) {
        /** @type {?} */
        var element = a[from$$1];
        /** @type {?} */
        var forward = from$$1 < to;
        /** @type {?} */
        var head = a.slice(0, forward ? from$$1 : to);
        /** @type {?} */
        var mid = a.slice(forward ? from$$1 + 1 : to, forward ? to + 1 : from$$1);
        /** @type {?} */
        var tail = a.slice(forward ? to + 1 : from$$1 + 1);
        return forward ?
            [].concat(head, mid, element, tail) :
            [].concat(head, element, mid, tail);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CommonsUtils.restoreFn = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if ((typeof value === 'string') && value.toLocaleLowerCase().trim().indexOf('function') === 0) {
            return new Function('return ' + value.replace(/_this/g, 'this')
                .replace(/__assign/g, 'Object.assign'))();
        }
        else {
            return value;
        }
    };
    /**
     * 排除key为k，value为v 的数据项
     */
    /**
     * 排除key为k，value为v 的数据项
     * @param {?} src
     * @param {?} k
     * @param {?} v
     * @return {?}
     */
    CommonsUtils.exclude = /**
     * 排除key为k，value为v 的数据项
     * @param {?} src
     * @param {?} k
     * @param {?} v
     * @return {?}
     */
    function (src, k, v) {
        /** @type {?} */
        var result = Object.keys(src).reduce(function (acc, key) {
            var _a;
            return (src[key][k] === v ? acc : __assign({}, acc, (_a = {}, _a[key] = src[key], _a)));
        }, {});
        return result;
    };
    /**
     * 替换src中的 {k,o} 元素 为 {k,v}
     */
    /**
     * 替换src中的 {k,o} 元素 为 {k,v}
     * @param {?} src
     * @param {?} k
     * @param {?} o
     * @param {?} v
     * @return {?}
     */
    CommonsUtils.replaceObj = /**
     * 替换src中的 {k,o} 元素 为 {k,v}
     * @param {?} src
     * @param {?} k
     * @param {?} o
     * @param {?} v
     * @return {?}
     */
    function (src, k, o, v) {
        var _a, _b;
        /** @type {?} */
        var index = find(src, (_a = {}, _a[k] = o, _a));
        return __spread(src.slice(0, index), [
            __assign({}, src[index], (_b = {}, _b[k] = v, _b))
        ], src.slice(index + 1));
    };
    /**
     * 合并 {} 和 []
     */
    /**
     * 合并 {} 和 []
     * @param {?} src1
     * @param {?} src2
     * @param {?} k
     * @return {?}
     */
    CommonsUtils.concat = /**
     * 合并 {} 和 []
     * @param {?} src1
     * @param {?} src2
     * @param {?} k
     * @return {?}
     */
    function (src1, src2, k) {
        return __assign({}, src1, src2.reduce(function (acc, item) {
            var _a;
            return (__assign({}, acc, (_a = {}, _a[item[k]] = item, _a)));
        }, {}));
    };
    /**
     * @param {?} json
     * @return {?}
     */
    CommonsUtils.restoreJsonFn = /**
     * @param {?} json
     * @return {?}
     */
    function (json) {
        /** @type {?} */
        var jsonStr;
        if (typeof json === 'string') {
            jsonStr = json;
        }
        else {
            jsonStr = CommonsUtils.stringify(json);
        }
        return JSON.parse(jsonStr, function (key, value) { return CommonsUtils.restoreFn(value); });
    };
    /**
     * @param {?} json
     * @return {?}
     */
    CommonsUtils.stringify = /**
     * @param {?} json
     * @return {?}
     */
    function (json) {
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        function replacer(key, value) {
            if (typeof value === 'function') {
                return value.toString();
            }
            else {
                return value;
            }
        }
        return JSON.stringify(json, replacer);
    };
    /**
     * @param {?} str
     * @return {?}
     */
    CommonsUtils.hash = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var hash = 0;
        for (var i = 0; i < str.length; i++) {
            /** @type {?} */
            var character = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + character;
            hash = hash & hash; // Convert to 32bit integer
        }
        return hash;
    };
    /**
     * 根据options定义，转换src
     *  options:{
     *    src-key: tar-key | {key:tar-key,options:{}} | Function
     *  }
     */
    /**
     * 根据options定义，转换src
     *  options:{
     *    src-key: tar-key | {key:tar-key,options:{}} | Function
     *  }
     * @param {?} src
     * @param {?} options
     * @return {?}
     */
    CommonsUtils.adaptObject = /**
     * 根据options定义，转换src
     *  options:{
     *    src-key: tar-key | {key:tar-key,options:{}} | Function
     *  }
     * @param {?} src
     * @param {?} options
     * @return {?}
     */
    function (src, options) {
        if (CommonsUtils.isArray(src)) {
            return CommonsUtils.adaptArray(src, options);
        }
        else {
            return CommonsUtils.adaptJson(src, options);
        }
    };
    /**
     * @param {?} src
     * @param {?} options
     * @return {?}
     */
    CommonsUtils.adaptJson = /**
     * @param {?} src
     * @param {?} options
     * @return {?}
     */
    function (src, options) {
        /** @type {?} */
        var result = {};
        Object.keys(options).forEach(function (key) {
            /** @type {?} */
            var srcValue = CommonsUtils.get(src, key);
            if (srcValue) {
                if (CommonsUtils.isArray(srcValue)) {
                    /** @type {?} */
                    var tarKey = null;
                    if (CommonsUtils.isString(options[key])) {
                        tarKey = options[key];
                    }
                    else {
                        tarKey = options[key]['key'];
                    }
                    CommonsUtils.set(result, tarKey, CommonsUtils.adaptArray(srcValue, options[key]['options'] || options));
                }
                else if (CommonsUtils.isJson(srcValue)) {
                    CommonsUtils.set(result, options[key], CommonsUtils.adaptJson(srcValue, options[key]['options'] || {}));
                }
                else {
                    if (CommonsUtils.isString(options[key])) {
                        CommonsUtils.set(result, options[key], srcValue);
                    }
                    else if (CommonsUtils.isFunction(options[key])) {
                        CommonsUtils.set(result, options[key], options[key].apply(undefined, src, options));
                    }
                }
            }
        });
        return result;
    };
    /**
     * @param {?} src
     * @param {?} options
     * @return {?}
     */
    CommonsUtils.adaptArray = /**
     * @param {?} src
     * @param {?} options
     * @return {?}
     */
    function (src, options) {
        /** @type {?} */
        var result = [];
        src.forEach(function (item) {
            result.push(CommonsUtils.adaptObject(item, options));
        });
        return result;
    };
    /**
     * @param {?} dateString
     * @return {?}
     */
    CommonsUtils.getAge = /**
     * @param {?} dateString
     * @return {?}
     */
    function (dateString) {
        /** @type {?} */
        var today = new Date();
        /** @type {?} */
        var birthDate = new Date(dateString);
        /** @type {?} */
        var age = today.getFullYear() - birthDate.getFullYear();
        /** @type {?} */
        var m = today.getMonth() - birthDate.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
            age--;
        }
        return age;
    };
    /**
     * @param {?} target
     * @return {?}
     */
    CommonsUtils.toDate = /**
     * @param {?} target
     * @return {?}
     */
    function (target) {
        if (target instanceof Date) {
            return target;
        }
        if (CommonsUtils.isString(target)) {
            /** @type {?} */
            var dateNumber = Date.parse(target);
            return !isNaN(dateNumber) ? new Date(dateNumber) : null;
        }
        return null;
    };
    /**
     * @param {?} tar
     * @param {?=} date
     * @return {?}
     */
    CommonsUtils.isBefore = /**
     * @param {?} tar
     * @param {?=} date
     * @return {?}
     */
    function (tar, date) {
        if (date === void 0) { date = new Date(); }
        /** @type {?} */
        var src = CommonsUtils.toDate(date);
        /** @type {?} */
        var original = CommonsUtils.toDate(tar);
        return !!(original && src && original < src);
    };
    /**
     * @param {?} tar
     * @param {?=} date
     * @return {?}
     */
    CommonsUtils.isAfter = /**
     * @param {?} tar
     * @param {?=} date
     * @return {?}
     */
    function (tar, date) {
        if (date === void 0) { date = new Date(); }
        /** @type {?} */
        var src = CommonsUtils.toDate(date);
        /** @type {?} */
        var original = CommonsUtils.toDate(tar);
        return !!(original && src && original > src);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.toString = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        switch (CommonsUtils.getVarType(obj)) {
            case VarType.NULL:
            case VarType.UNDEFINED:
                return '';
            case VarType.ARRAY: {
                /** @type {?} */
                var a_1 = [];
                obj.forEach(function (o) { return a_1.push(CommonsUtils.toString(o)); });
                return "[" + a_1.join(',') + "]";
            }
            case VarType.JSON:
                return CommonsUtils.stringify(obj);
            default:
                return obj.toString();
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CommonsUtils.isEmpty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        switch (CommonsUtils.getVarType(obj)) {
            case VarType.NULL:
            case VarType.UNDEFINED:
                return true;
            case VarType.STRING:
                return obj.length === 0;
            case VarType.ARRAY:
                return ((/** @type {?} */ (obj))).length === 0;
            case VarType.JSON:
                return Object.keys(obj).length === 0;
            default:
                return obj.toString().length === 0;
        }
    };
    /**
     * @param {?} attributes
     * @param {?} keys
     * @return {?}
     */
    CommonsUtils.convertToBoolean = /**
     * @param {?} attributes
     * @param {?} keys
     * @return {?}
     */
    function (attributes, keys) {
        /** @type {?} */
        var l_attributes = __assign({}, attributes);
        if (keys && keys.length > 0) {
            keys.forEach(function (key) {
                if (l_attributes.hasOwnProperty(key) && l_attributes[key] === '') {
                    l_attributes[key] = true;
                }
            });
        }
        return l_attributes;
    };
    /**
     * @param {?} path
     * @return {?}
     */
    CommonsUtils.flatPath = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        if (CommonsUtils.isArray(path)) {
            return ((/** @type {?} */ (path))).join('-').replace('.', '-');
        }
        return ((/** @type {?} */ (path))).replace('.', '-');
    };
    /**
     * @param {?} arr
     * @param {?=} seperator
     * @return {?}
     */
    CommonsUtils.join = /**
     * @param {?} arr
     * @param {?=} seperator
     * @return {?}
     */
    function (arr, seperator) {
        /** @type {?} */
        var joiner = seperator || ',';
        if (!arr) {
            return '';
        }
        if (!CommonsUtils.isArray(arr)) {
            return arr;
        }
        switch (arr.length) {
            case 0:
                return '';
            case 1:
                return arr[0];
            default:
                return arr.join(joiner);
        }
    };
    /**
     * @param {?} obj
     * @param {...?} predicates
     * @return {?}
     */
    CommonsUtils.deepFind = /**
     * @param {?} obj
     * @param {...?} predicates
     * @return {?}
     */
    function (obj) {
        var predicates = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            predicates[_i - 1] = arguments[_i];
        }
        /** @type {?} */
        var _find = function (o) {
            if (o instanceof Array) {
                ((/** @type {?} */ (o))).forEach(function (i) { return _find(i); });
            }
            else {
                for (var prop in o) {
                    if (o[prop] instanceof Array) {
                        _find(o[prop]);
                    }
                }
                predicates.some(function (predicate) {
                    /** @type {?} */
                    var found = CommonsUtils.where(o, predicate);
                    if (found !== null) {
                        foundResults.push(o);
                    }
                    return found !== null;
                });
            }
        };
        /** @type {?} */
        var foundResults = [];
        _find(obj);
        return foundResults;
    };
    /**
     * @param {?} milliseconds
     * @return {?}
     */
    CommonsUtils.sleep = /**
     * @param {?} milliseconds
     * @return {?}
     */
    function (milliseconds) {
        /** @type {?} */
        var start = new Date().getTime();
        for (var i = 0; i < 1e7; i++) {
            if ((new Date().getTime() - start) > milliseconds) {
                break;
            }
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CommonsUtils.getArrayValue = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (!data) {
            return data;
        }
        if (CommonsUtils.isArray(data)) {
            return data;
        }
        else if (CommonsUtils.isString(data)) {
            return ((/** @type {?} */ (data))).split(',');
        }
        else {
            return [data];
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CommonsUtils.getText = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (CommonsUtils.isArray(data)) {
            return ((/** @type {?} */ (data))).map(function (v) { return CommonsUtils.getText(v); }).join(',');
        }
        else if (CommonsUtils.isJson(data)) {
            return JSON.stringify(data);
        }
        else if (CommonsUtils.isBoolean(data)) {
            return data ? '是' : '否';
        }
        else {
            return data;
        }
    };
    /**
     * @param {?} exp
     * @param {...?} context
     * @return {?}
     */
    CommonsUtils.getValue = /**
     * @param {?} exp
     * @param {...?} context
     * @return {?}
     */
    function (exp) {
        var context = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            context[_i - 1] = arguments[_i];
        }
        /** @type {?} */
        var fn = exp && (exp['method'] || exp);
        if (CommonsUtils.isFunction(fn)) {
            return (/** @type {?} */ (fn.apply(undefined, context)));
        }
        if (CommonsUtils.isString(exp) && exp.startsWith('@')) {
            return CommonsUtils.get(context && context[0], exp.substr(1));
        }
        return exp;
    };
    /**
     * @param {?} obj
     * @param {?} prop
     * @param {?} defaultValue
     * @return {?}
     */
    CommonsUtils.defineHiddenProp = /**
     * @param {?} obj
     * @param {?} prop
     * @param {?} defaultValue
     * @return {?}
     */
    function (obj, prop, defaultValue) {
        Object.defineProperty(obj, prop, { enumerable: false, writable: true, configurable: true });
        obj[prop] = defaultValue;
    };
    /**
     * @param {?} str
     * @param {?} size
     * @return {?}
     */
    CommonsUtils.splitBySize = /**
     * @param {?} str
     * @param {?} size
     * @return {?}
     */
    function (str, size) {
        /** @type {?} */
        var results = [];
        /** @type {?} */
        var i = size;
        while (i <= str.length) {
            results.push(str.substr(0, i));
            i += size;
        }
        return results;
    };
    /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    CommonsUtils.resolveUrl = /**
     * @param {?} url
     * @param {?=} params
     * @return {?}
     */
    function (url, params) {
        if (params === void 0) { params = {}; }
        /** @type {?} */
        var _url = Object.keys(params)
            .reduce(function (acc, key) { return acc.replace(":" + key, params[key]); }, url);
        return _url;
    };
    return CommonsUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RegUtils = /** @class */ (function () {
    function RegUtils() {
    }
    /**
     * @param {?} regexStr
     * @return {?}
     */
    RegUtils.escapeRegexp = /**
     * @param {?} regexStr
     * @return {?}
     */
    function (regexStr) {
        /** @type {?} */
        var result = regexStr.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
        return result;
    };
    /**
     * @param {?} pattern
     * @return {?}
     */
    RegUtils.getRegexps = /**
     * @param {?} pattern
     * @return {?}
     */
    function (pattern) {
        var e_1, _a;
        if (!pattern) {
            return [];
        }
        /** @type {?} */
        var exps = [];
        /** @type {?} */
        var patterns = [];
        if (CommonsUtils.isString(pattern)) {
            patterns.push(pattern);
        }
        try {
            for (var patterns_1 = __values(patterns), patterns_1_1 = patterns_1.next(); !patterns_1_1.done; patterns_1_1 = patterns_1.next()) {
                var p = patterns_1_1.value;
                if (p) {
                    if (p.indexOf(',') > 0) {
                        exps.concat(RegUtils.getRegexps(p.split(',')));
                    }
                    else {
                        exps.push(RegUtils.getRegexp(p));
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (patterns_1_1 && !patterns_1_1.done && (_a = patterns_1.return)) _a.call(patterns_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return exps;
    };
    /**
     * @param {?} src
     * @param {?} pattern
     * @return {?}
     */
    RegUtils.test = /**
     * @param {?} src
     * @param {?} pattern
     * @return {?}
     */
    function (src, pattern) {
        /** @type {?} */
        var regex;
        if (typeof pattern === 'string') {
            regex = new RegExp(pattern);
        }
        else {
            regex = pattern;
        }
        if (regex instanceof RegExp) {
            return regex.test(src);
        }
        else if (regex && Array.isArray(regex)) {
            return regex.every(function (item) {
                return RegUtils.test(src, item);
            });
        }
        else if (regex && Array.isArray(regex.and)) {
            return regex.and.every(function (item) {
                return RegUtils.test(src, item);
            });
        }
        else if (regex && Array.isArray(regex.or)) {
            return regex.or.some(function (item) {
                return RegUtils.test(src, item);
            });
        }
        else if (regex && regex.not) {
            return !RegUtils.test(src, regex.not);
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} string
     * @param {?} regex
     * @return {?}
     */
    RegUtils.exec = /**
     * @param {?} string
     * @param {?} regex
     * @return {?}
     */
    function (string, regex) {
        /** @type {?} */
        var self = this;
        if (typeof regex === 'string') {
            regex = new RegExp(regex);
        }
        if (regex instanceof RegExp) {
            return regex.exec(string);
        }
        else if (regex && Array.isArray(regex)) {
            return regex.reduce(function (res, item) {
                return (!!res) ? res : self.exec(string, item);
            }, null);
        }
        else {
            return null;
        }
    };
    /**
     * @private
     * @param {?} pattern
     * @return {?}
     */
    RegUtils.getRegexp = /**
     * @private
     * @param {?} pattern
     * @return {?}
     */
    function (pattern) {
        /** @type {?} */
        var exp = null;
        if (!pattern) {
            return null;
        }
        if (CommonsUtils.isString(pattern)) {
            if (pattern === 'letter') {
                exp = RegPatterns.letter;
            }
            else if (pattern === 'digit') {
                exp = RegPatterns.digit;
            }
            else if (pattern === 'character') {
                exp = RegPatterns.character;
            }
            else if (pattern === 'integer') {
                exp = RegPatterns.integer;
            }
            else if (pattern === 'numeric') {
                exp = RegPatterns.numeric;
            }
            else {
                exp = new RegExp((/** @type {?} */ (pattern)));
            }
        }
        else {
            exp = (/** @type {?} */ (pattern));
        }
        return exp;
    };
    return RegUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var bowser = require('bowser');
var BrowserOsUtils = /** @class */ (function () {
    function BrowserOsUtils() {
    }
    /**
     * @return {?}
     */
    BrowserOsUtils.isMobile = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = [
            Devices.DEVICES.ANDROID,
            Devices.DEVICES.IPHONE,
            Devices.DEVICES.I_POD,
            Devices.DEVICES.BLACKBERRY,
            Devices.DEVICES.FIREFOX_OS,
            Devices.DEVICES.WINDOWS_PHONE,
            Devices.DEVICES.VITA
        ].some(function (item) {
            return BrowserOsUtils.device_info.device === item;
        });
        return result;
    };
    /**
     * @return {?}
     */
    BrowserOsUtils.isTablet = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = [
            Devices.DEVICES.I_PAD,
            Devices.DEVICES.FIREFOX_OS
        ].some(function (item) {
            return BrowserOsUtils.device_info.device === item;
        });
        return result;
    };
    /**
     * @return {?}
     */
    BrowserOsUtils.isDesktop = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = [
            Devices.DEVICES.PS4,
            Devices.DEVICES.CHROME_BOOK,
            Devices.DEVICES.UNKNOWN
        ].some(function (item) {
            return BrowserOsUtils.device_info.device === item;
        });
        return result;
    };
    /**
     * @return {?}
     */
    BrowserOsUtils.getDeviceInfo = /**
     * @return {?}
     */
    function () {
        if (BrowserOsUtils.device_info) {
            return BrowserOsUtils.device_info;
        }
        if (window && window.navigator) {
            BrowserOsUtils.ua = window.navigator.userAgent;
        }
        BrowserOsUtils.userAgent = BrowserOsUtils.ua;
        /** @type {?} */
        var mappings = [
            { const: 'OS', prop: 'os' },
            { const: 'BROWSERS', prop: 'browser' },
            { const: 'DEVICES', prop: 'device' },
            { const: 'OS_VERSIONS', prop: 'os_version' }
        ];
        mappings.forEach(function (mapping) {
            BrowserOsUtils[mapping.prop] = Object.keys(Devices[mapping.const]).reduce(function (obj, item) {
                obj[Devices[mapping.const][item]] = RegUtils.test(BrowserOsUtils.ua, Devices[mapping.const + "_RE"][item]);
                return obj;
            }, {});
        });
        mappings.forEach(function (mapping) {
            BrowserOsUtils[mapping.prop] = Object.keys(Devices[mapping.const])
                .map(function (key) {
                return Devices[mapping.const][key];
            }).reduce(function (previousValue, currentValue) {
                return (previousValue === Devices[mapping.const].UNKNOWN && BrowserOsUtils[mapping.prop][currentValue])
                    ? currentValue : previousValue;
            }, Devices[mapping.const].UNKNOWN);
        });
        BrowserOsUtils.browser_version = '0';
        if (BrowserOsUtils.browser !== Devices.BROWSERS.UNKNOWN) {
            /** @type {?} */
            var re = Devices.BROWSER_VERSIONS_RE[BrowserOsUtils.browser];
            /** @type {?} */
            var res = RegUtils.exec(BrowserOsUtils.ua, re);
            if (!!res) {
                BrowserOsUtils.browser_version = res[1];
            }
        }
        BrowserOsUtils.device_info = {
            userAgent: BrowserOsUtils.userAgent,
            os: BrowserOsUtils.os,
            browser: BrowserOsUtils.browser,
            device: BrowserOsUtils.device,
            os_version: BrowserOsUtils.os_version,
            browser_version: BrowserOsUtils.browser_version
        };
        return BrowserOsUtils.device_info;
    };
    /**
     * @return {?}
     */
    BrowserOsUtils.checkBrowser = /**
     * @return {?}
     */
    function () {
        if (BrowserOsUtils.isBrowserVersionValid()) {
            /** @type {?} */
            var features = BrowserOsUtils.isBrowserFeaturesValid();
            return {
                version: true,
                features: features
            };
        }
        return {
            version: false
        };
    };
    /**
     * @private
     * @return {?}
     */
    BrowserOsUtils.isBrowserVersionValid = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var browser = bowser.getParser(window.navigator.userAgent);
        return browser.satisfies({
            windows: {
                'internet explorer': '>10'
            },
            macos: {
                safari: '>10.1'
            },
            chrome: '>20.1.1432',
            firefox: '>31',
            opera: '>22'
        });
    };
    /**
     * @private
     * @return {?}
     */
    BrowserOsUtils.isBrowserFeaturesValid = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var supported = true;
        for (var feature in Modernizr) {
            if (Modernizr.hasOwnProperty(feature) &&
                typeof Modernizr[feature] === 'boolean' && Modernizr[feature] === false) {
                supported = false;
                break;
            }
        }
        return supported;
    };
    BrowserOsUtils.ua = '';
    BrowserOsUtils.userAgent = '';
    BrowserOsUtils.os = '';
    BrowserOsUtils.browser = '';
    BrowserOsUtils.device = '';
    BrowserOsUtils.os_version = '';
    BrowserOsUtils.browser_version = '';
    BrowserOsUtils.device_info = undefined;
    return BrowserOsUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var UI_COLORS_COUNT = -1;
var ColorUtils = /** @class */ (function () {
    function ColorUtils() {
    }
    /**
     * @return {?}
     */
    ColorUtils.getColorsCount = /**
     * @return {?}
     */
    function () {
        if (UI_COLORS_COUNT === -1) {
            UI_COLORS_COUNT = Object.keys(UI_COLORS).length;
        }
        return UI_COLORS_COUNT;
    };
    /**
     * @param {?=} by
     * @param {?=} offset
     * @return {?}
     */
    ColorUtils.getColor = /**
     * @param {?=} by
     * @param {?=} offset
     * @return {?}
     */
    function (by, offset) {
        if (offset === void 0) { offset = 0; }
        /** @type {?} */
        var colorIndex;
        if (!by) {
            by = CommonsUtils.getRandomNumber(ColorUtils.getColorsCount());
        }
        if (CommonsUtils.isString(by)) {
            colorIndex = (((/** @type {?} */ (by))).charCodeAt(0) + ((/** @type {?} */ (by))).charCodeAt(((/** @type {?} */ (by))).length - 1) + ((/** @type {?} */ (by))).length + offset) % ColorUtils.getColorsCount();
        }
        else {
            colorIndex = by;
        }
        /** @type {?} */
        var matched = 'pink';
        Object.keys(UI_COLORS).some(function (color, index) {
            if (index === colorIndex) {
                matched = UI_COLORS[color];
                return true;
            }
            else {
                return false;
            }
        });
        return matched;
    };
    return ColorUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DataItemUtils = /** @class */ (function () {
    function DataItemUtils() {
    }
    /**
     * @param {?} items
     * @param {?} config
     * @return {?}
     */
    DataItemUtils.transItems = /**
     * @param {?} items
     * @param {?} config
     * @return {?}
     */
    function (items, config) {
        if (!config) {
            return items;
        }
        /** @type {?} */
        var _data = [];
        /** @type {?} */
        var groups = {};
        items.map(function (item) {
            _data.push(DataItemUtils.transItem(item, config));
        });
        if (config.groupKey) {
            _data.map(function (item) {
                /** @type {?} */
                var group = DataItemUtils.getItemLabel(item, config.groupKey || 'group');
                if (!groups[group]) {
                    groups[group] = [];
                }
                groups[group].push(item);
            });
            _data = [];
            Object.keys(groups).forEach(function (group) {
                _data.push({
                    label: group,
                    items: groups[group]
                });
            });
        }
        return _data;
    };
    /**
     * @param {?} item
     * @param {?} config
     * @return {?}
     */
    DataItemUtils.transItem = /**
     * @param {?} item
     * @param {?} config
     * @return {?}
     */
    function (item, config) {
        var _a;
        /** @type {?} */
        var _item = (_a = {},
            _a[DataItemUtils.ITEM_LABEL_KEY] = DataItemUtils.getItemLabel(item, config.labelKey || DataItemUtils.ITEM_LABEL_KEY),
            _a[DataItemUtils.ITEM_VALUE_KEY] = DataItemUtils.getItemValue(item, config.valueKey),
            _a[DataItemUtils.ITEM_DATA_KEY] = item,
            _a);
        return _item;
    };
    /**
     * @param {?} item
     * @param {?} valueKey
     * @return {?}
     */
    DataItemUtils.getItemValue = /**
     * @param {?} item
     * @param {?} valueKey
     * @return {?}
     */
    function (item, valueKey) {
        if (CommonsUtils.isString(item)) {
            return item;
        }
        if (CommonsUtils.isArray(item)) {
            return item.map(function (data) { return DataItemUtils.getItemValue(data, valueKey); });
        }
        else {
            if (typeof valueKey === 'function') {
                return valueKey(item);
            }
            else if (CommonsUtils.isArray(valueKey)) {
                /** @type {?} */
                var value_1 = {};
                valueKey.forEach(function (p) {
                    /** @type {?} */
                    var val = CommonsUtils.get(item, p);
                    if (val) {
                        value_1[p] = val;
                    }
                });
                return value_1;
            }
            return valueKey ? CommonsUtils.get(item, valueKey) : item;
        }
    };
    /**
     * @param {?} item
     * @param {?} label
     * @return {?}
     */
    DataItemUtils.getItemLabel = /**
     * @param {?} item
     * @param {?} label
     * @return {?}
     */
    function (item, label) {
        if (CommonsUtils.isFunction(label)) {
            return label(item);
        }
        else if (item) {
            if (CommonsUtils.isArray(label)) {
                /** @type {?} */
                var s_1 = [];
                ((/** @type {?} */ (label))).forEach(function (key) {
                    /** @type {?} */
                    var lb = DataItemUtils.getLabel(item, key);
                    if (lb) {
                        s_1.push(lb);
                    }
                });
                return s_1;
            }
            else {
                return DataItemUtils.getLabel(item, label);
            }
        }
    };
    /**
     * @param {?} item
     * @param {?} labelKey
     * @return {?}
     */
    DataItemUtils.getLabel = /**
     * @param {?} item
     * @param {?} labelKey
     * @return {?}
     */
    function (item, labelKey) {
        /** @type {?} */
        var aLabel = CommonsUtils.get(item, labelKey);
        if (aLabel) {
            return aLabel;
        }
        else if (item[DataItemUtils.ITEM_DATA_KEY]) {
            return CommonsUtils.get(item[DataItemUtils.ITEM_DATA_KEY], labelKey);
        }
        else {
            return item[Object.keys(item)[0]];
        }
    };
    DataItemUtils.ITEM_LABEL_KEY = 'label';
    DataItemUtils.ITEM_VALUE_KEY = 'value';
    DataItemUtils.ITEM_GROUP_KEY = 'group';
    DataItemUtils.ITEM_GROUP_ITEMS_KEY = 'items';
    DataItemUtils.ITEM_DATA_KEY = 'data';
    return DataItemUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ChartUtils = /** @class */ (function () {
    function ChartUtils() {
    }
    /**
     * @param {?} rawData
     * @param {?} chartOptions
     * @param {?=} dimensionsIndex
     * @return {?}
     */
    ChartUtils.buildChartData = /**
     * @param {?} rawData
     * @param {?} chartOptions
     * @param {?=} dimensionsIndex
     * @return {?}
     */
    function (rawData, chartOptions, dimensionsIndex) {
        if (dimensionsIndex === void 0) { dimensionsIndex = 0; }
        /** @type {?} */
        var type = chartOptions.type;
        /** @type {?} */
        var data = rawData;
        /** @type {?} */
        var dimension = chartOptions.dimension || {};
        if (dimension.dataSrcPath) {
            data = CommonsUtils.get(rawData, dimension.dataSrcPath);
        }
        /** @type {?} */
        var dataItemProps = dimension.dataItemProps || chartOptions.dataItemProps;
        /** @type {?} */
        var label = dimension.title || '';
        switch (type || ChartType.BAR) {
            case ChartType.BAR:
                data = ChartUtils.buildBarChart(data, dataItemProps, label, dimensionsIndex);
                break;
            case ChartType.LINE:
                data = ChartUtils.buildLineChart(data, dataItemProps, label, dimensionsIndex);
                break;
            case ChartType.PIE:
                data = ChartUtils.buildPieChart(data, dataItemProps, label, dimensionsIndex);
                break;
            case ChartType.AREA:
                data = ChartUtils.buildAreaChart(data, dataItemProps, label, dimensionsIndex);
                break;
            case ChartType.RADAR:
                data = ChartUtils.buildRadarChart(data, dataItemProps, label, dimensionsIndex);
                break;
            case ChartType.DOUGHNUT:
                data = ChartUtils.buildPieChart(data, dataItemProps, label, dimensionsIndex);
                break;
        }
        return data;
    };
    /**
     * @param {?} dataItems
     * @param {?} config
     * @param {?=} label
     * @param {?=} colorIndex
     * @return {?}
     */
    ChartUtils.buildBarChart = /**
     * @param {?} dataItems
     * @param {?} config
     * @param {?=} label
     * @param {?=} colorIndex
     * @return {?}
     */
    function (dataItems, config, label, colorIndex) {
        if (label === void 0) { label = ''; }
        if (colorIndex === void 0) { colorIndex = 0; }
        /** @type {?} */
        var _data = DataItemUtils.transItems(dataItems, config);
        /** @type {?} */
        var labels = [];
        /** @type {?} */
        var datasets = [];
        /** @type {?} */
        var data = [];
        /** @type {?} */
        var backgroundColor = [];
        /** @type {?} */
        var hoverBackgroundColor = [];
        /** @type {?} */
        var items = _data;
        items.forEach(function (item) {
            if (item['group']) {
                datasets.push({
                    label: items[''].label,
                    data: items[''].items,
                    backgroundColor: ColorUtils.getColor(items[''].label)
                });
                labels.push('');
            }
            else {
                /** @type {?} */
                var lb = item['key_as_string'] || item['label'];
                labels.push(lb);
                data.push(item['value']);
                backgroundColor.push(ColorUtils.getColor(lb, colorIndex));
                hoverBackgroundColor.push(ColorUtils.getColor(lb, colorIndex + 10));
            }
        });
        datasets.push({
            label: label,
            backgroundColor: backgroundColor,
            hoverBackgroundColor: hoverBackgroundColor,
            data: data
        });
        return {
            labels: labels,
            datasets: datasets
        };
    };
    /**
     * @param {?} dataItems
     * @param {?} config
     * @param {?=} label
     * @param {?=} colorIndex
     * @return {?}
     */
    ChartUtils.buildPieChart = /**
     * @param {?} dataItems
     * @param {?} config
     * @param {?=} label
     * @param {?=} colorIndex
     * @return {?}
     */
    function (dataItems, config, label, colorIndex) {
        if (label === void 0) { label = ''; }
        if (colorIndex === void 0) { colorIndex = 0; }
        /** @type {?} */
        var _data = DataItemUtils.transItems(dataItems, config);
        /** @type {?} */
        var labels = [];
        /** @type {?} */
        var datasets = [];
        /** @type {?} */
        var data = [];
        /** @type {?} */
        var backgroundColor = [];
        /** @type {?} */
        var hoverBackgroundColor = [];
        /** @type {?} */
        var items = _data;
        items.forEach(function (item) {
            if (item['group']) {
                datasets.push({
                    label: items[''].label,
                    data: items[''].items,
                    backgroundColor: ColorUtils.getColor(items[''].label)
                });
                labels.push('');
            }
            else {
                /** @type {?} */
                var lb = item['key_as_string'] || item['label'];
                labels.push(lb);
                data.push(item['value']);
                backgroundColor.push(ColorUtils.getColor(lb, colorIndex));
                hoverBackgroundColor.push(ColorUtils.getColor(lb, colorIndex + 10));
            }
        });
        datasets.push({
            label: label || '',
            backgroundColor: backgroundColor,
            hoverBackgroundColor: hoverBackgroundColor,
            data: data
        });
        return {
            labels: labels,
            datasets: datasets
        };
    };
    /**
     * @param {?} dataItems
     * @param {?} config
     * @param {?=} label
     * @param {?=} colorIndex
     * @return {?}
     */
    ChartUtils.buildAreaChart = /**
     * @param {?} dataItems
     * @param {?} config
     * @param {?=} label
     * @param {?=} colorIndex
     * @return {?}
     */
    function (dataItems, config, label, colorIndex) {
        if (label === void 0) { label = ''; }
        if (colorIndex === void 0) { colorIndex = 0; }
        /** @type {?} */
        var _data = DataItemUtils.transItems(dataItems, config);
        /** @type {?} */
        var labels = [];
        /** @type {?} */
        var datasets = [];
        /** @type {?} */
        var backgroundColor = [];
        /** @type {?} */
        var data = [];
        /** @type {?} */
        var items = _data;
        items.forEach(function (item) {
            if (item['group']) {
                datasets.push({
                    label: items[''].label,
                    data: items[''].items,
                    backgroundColor: ColorUtils.getColor(items[''].label)
                });
                labels.push('');
            }
            else {
                /** @type {?} */
                var lb = item['key_as_string'] || item['label'];
                labels.push(lb);
                data.push(item['value']);
                backgroundColor.push(ColorUtils.getColor(lb, colorIndex));
            }
        });
        datasets.push({
            label: label || '',
            data: data,
            backgroundColor: backgroundColor
        });
        return {
            labels: labels,
            datasets: datasets
        };
    };
    /**
     * @param {?} dataItems
     * @param {?} config
     * @param {?=} label
     * @param {?=} colorIndex
     * @return {?}
     */
    ChartUtils.buildLineChart = /**
     * @param {?} dataItems
     * @param {?} config
     * @param {?=} label
     * @param {?=} colorIndex
     * @return {?}
     */
    function (dataItems, config, label, colorIndex) {
        if (label === void 0) { label = ''; }
        if (colorIndex === void 0) { colorIndex = 0; }
        /** @type {?} */
        var _data = DataItemUtils.transItems(dataItems, config);
        /** @type {?} */
        var labels = [];
        /** @type {?} */
        var datasets = [];
        /** @type {?} */
        var data = [];
        /** @type {?} */
        var items = _data;
        items.forEach(function (item) {
            if (item['group']) {
                datasets.push({
                    label: items[''].label,
                    data: items[''].items,
                    backgroundColor: ColorUtils.getColor(items[''].label)
                });
                labels.push('');
            }
            else {
                /** @type {?} */
                var lb = item['key_as_string'] || item['label'];
                labels.push(lb);
                data.push(item['value']);
            }
        });
        datasets.push({
            label: label || '',
            data: data,
            fill: false,
            borderColor: ColorUtils.getColor(colorIndex)
        });
        return {
            labels: labels,
            datasets: datasets
        };
    };
    /**
     * @param {?} dataItems
     * @param {?} config
     * @param {?=} label
     * @param {?=} colorIndex
     * @return {?}
     */
    ChartUtils.buildRadarChart = /**
     * @param {?} dataItems
     * @param {?} config
     * @param {?=} label
     * @param {?=} colorIndex
     * @return {?}
     */
    function (dataItems, config, label, colorIndex) {
        if (label === void 0) { label = ''; }
        if (colorIndex === void 0) { colorIndex = 0; }
        /** @type {?} */
        var _data = DataItemUtils.transItems(dataItems, config);
        /** @type {?} */
        var labels = [];
        /** @type {?} */
        var datasets = [];
        /** @type {?} */
        var backgroundColor = [];
        /** @type {?} */
        var borderColor = [];
        /** @type {?} */
        var pointBackgroundColor = [];
        /** @type {?} */
        var pointHoverBorderColor = [];
        /** @type {?} */
        var data = [];
        /** @type {?} */
        var items = _data;
        items.forEach(function (item) {
            if (item['group']) {
                datasets.push({
                    label: items[''].label,
                    data: items[''].items,
                    backgroundColor: ColorUtils.getColor(items[''].label)
                });
                labels.push('');
            }
            else {
                /** @type {?} */
                var lb = item['key_as_string'] || item['label'];
                labels.push(lb);
                data.push(item['value']);
                backgroundColor.push(ColorUtils.getColor(lb, colorIndex));
                borderColor.push(ColorUtils.getColor(lb, colorIndex + 5));
                pointBackgroundColor.push(ColorUtils.getColor(lb, colorIndex + 5));
                pointHoverBorderColor.push(ColorUtils.getColor(lb, colorIndex + 5));
            }
        });
        datasets.push({
            label: label || '',
            data: data,
            backgroundColor: backgroundColor,
            borderColor: borderColor,
            pointBackgroundColor: pointBackgroundColor,
            pointHoverBorderColor: pointHoverBorderColor,
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff'
        });
        return {
            labels: labels,
            datasets: datasets
        };
    };
    return ChartUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CopierUtils = /** @class */ (function () {
    function CopierUtils() {
    }
    /** Copy the text value to the clipboard. */
    /**
     * Copy the text value to the clipboard.
     * @param {?} text
     * @return {?}
     */
    CopierUtils.prototype.copyText = /**
     * Copy the text value to the clipboard.
     * @param {?} text
     * @return {?}
     */
    function (text) {
        this.createTextareaAndSelect(text);
        /** @type {?} */
        var copySuccessful = document.execCommand('copy');
        this.removeFake();
        return copySuccessful;
    };
    /**
     * Creates a hidden textarea element, sets its value from `text` property,
     * and makes a selection on it.
     */
    /**
     * Creates a hidden textarea element, sets its value from `text` property,
     * and makes a selection on it.
     * @private
     * @param {?} text
     * @return {?}
     */
    CopierUtils.prototype.createTextareaAndSelect = /**
     * Creates a hidden textarea element, sets its value from `text` property,
     * and makes a selection on it.
     * @private
     * @param {?} text
     * @return {?}
     */
    function (text) {
        // Create a fake element to hold the contents to copy
        this.textarea = document.createElement('textarea');
        // Prevent zooming on iOS
        this.textarea.style.fontSize = '12pt';
        // Hide the element
        this.textarea.style.setProperty('display', 'none');
        // Move element to the same position vertically
        /** @type {?} */
        var yPosition = window.pageYOffset || document.documentElement.scrollTop;
        this.textarea.style.top = yPosition + 'px';
        this.textarea.setAttribute('readonly', '');
        this.textarea.value = text;
        document.body.appendChild(this.textarea);
        this.textarea.select();
        this.textarea.setSelectionRange(0, this.textarea.value.length);
    };
    /** Remove the text area from the DOM. */
    /**
     * Remove the text area from the DOM.
     * @private
     * @return {?}
     */
    CopierUtils.prototype.removeFake = /**
     * Remove the text area from the DOM.
     * @private
     * @return {?}
     */
    function () {
        if (this.textarea) {
            document.body.removeChild(this.textarea);
            this.textarea = null;
        }
    };
    return CopierUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DevicesUtils = /** @class */ (function () {
    function DevicesUtils() {
    }
    /**
     * @return {?}
     */
    DevicesUtils.getMediaDevices = /**
     * @return {?}
     */
    function () {
        if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
            console.error('Can\'t enumerate devices, method not supported.');
        }
        return from(navigator.mediaDevices.enumerateDevices())
            .pipe(map$1(function (devices) {
            var e_1, _a;
            /** @type {?} */
            var mediaDevices = [];
            try {
                for (var devices_1 = __values(devices), devices_1_1 = devices_1.next(); !devices_1_1.done; devices_1_1 = devices_1.next()) {
                    var deviceI = devices_1_1.value;
                    console.log(deviceI);
                    /** @type {?} */
                    var device = {};
                    for (var key in deviceI) {
                        if (key) {
                            device[key] = deviceI[key];
                        }
                    }
                    if (!device.deviceId) {
                        device.deviceId = ((/** @type {?} */ (device))).id;
                    }
                    if (!device.label) {
                        device.label = 'device (no-permission)';
                    }
                    mediaDevices.push(device);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (devices_1_1 && !devices_1_1.done && (_a = devices_1.return)) _a.call(devices_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return mediaDevices;
        }));
    };
    /**
     * @return {?}
     */
    DevicesUtils.getVideoDevices = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var videos = DevicesUtils.getMediaDevices().pipe(map$1(function (devices) { return devices.filter(function (device) { return device.kind === 'videoinput'; }); }));
        return videos;
    };
    /**
     * @return {?}
     */
    DevicesUtils.getAudioDevices = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var audios = DevicesUtils.getMediaDevices().pipe(map$1(function (devices) { return devices.filter(function (device) { return device.kind === 'audioinput'; }); }));
        return audios;
    };
    /**
     * @return {?}
     */
    DevicesUtils.playBeepSound = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var snd = new Audio('data:audio/wav;base64,//uQRAAAAWMSLwUIYAAsYkXgoQwAEaYLWfkWgAI0wWs/ItAAAGDgYtAgAyN+QWaAAihwMWm4G8QQRDiMcCBcH3Cc+CDv/7xA4Tvh9Rz/y8QADBwMWgQAZG/ILNAARQ4GLTcDeIIIhxGOBAuD7hOfBB3/94gcJ3w+o5/5eIAIAAAVwWgQAVQ2ORaIQwEMAJiDg95G4nQL7mQVWI6GwRcfsZAcsKkJvxgxEjzFUgfHoSQ9Qq7KNwqHwuB13MA4a1q/DmBrHgPcmjiGoh//EwC5nGPEmS4RcfkVKOhJf+WOgoxJclFz3kgn//dBA+ya1GhurNn8zb//9NNutNuhz31f////9vt///z+IdAEAAAK4LQIAKobHItEIYCGAExBwe8jcToF9zIKrEdDYIuP2MgOWFSE34wYiR5iqQPj0JIeoVdlG4VD4XA67mAcNa1fhzA1jwHuTRxDUQ//iYBczjHiTJcIuPyKlHQkv/LHQUYkuSi57yQT//uggfZNajQ3Vmz+Zt//+mm3Wm3Q576v////+32///5/EOgAAADVghQAAAAA//uQZAUAB1WI0PZugAAAAAoQwAAAEk3nRd2qAAAAACiDgAAAAAAABCqEEQRLCgwpBGMlJkIz8jKhGvj4k6jzRnqasNKIeoh5gI7BJaC1A1AoNBjJgbyApVS4IDlZgDU5WUAxEKDNmmALHzZp0Fkz1FMTmGFl1FMEyodIavcCAUHDWrKAIA4aa2oCgILEBupZgHvAhEBcZ6joQBxS76AgccrFlczBvKLC0QI2cBoCFvfTDAo7eoOQInqDPBtvrDEZBNYN5xwNwxQRfw8ZQ5wQVLvO8OYU+mHvFLlDh05Mdg7BT6YrRPpCBznMB2r//xKJjyyOh+cImr2/4doscwD6neZjuZR4AgAABYAAAABy1xcdQtxYBYYZdifkUDgzzXaXn98Z0oi9ILU5mBjFANmRwlVJ3/6jYDAmxaiDG3/6xjQQCCKkRb/6kg/wW+kSJ5//rLobkLSiKmqP/0ikJuDaSaSf/6JiLYLEYnW/+kXg1WRVJL/9EmQ1YZIsv/6Qzwy5qk7/+tEU0nkls3/zIUMPKNX/6yZLf+kFgAfgGyLFAUwY//uQZAUABcd5UiNPVXAAAApAAAAAE0VZQKw9ISAAACgAAAAAVQIygIElVrFkBS+Jhi+EAuu+lKAkYUEIsmEAEoMeDmCETMvfSHTGkF5RWH7kz/ESHWPAq/kcCRhqBtMdokPdM7vil7RG98A2sc7zO6ZvTdM7pmOUAZTnJW+NXxqmd41dqJ6mLTXxrPpnV8avaIf5SvL7pndPvPpndJR9Kuu8fePvuiuhorgWjp7Mf/PRjxcFCPDkW31srioCExivv9lcwKEaHsf/7ow2Fl1T/9RkXgEhYElAoCLFtMArxwivDJJ+bR1HTKJdlEoTELCIqgEwVGSQ+hIm0NbK8WXcTEI0UPoa2NbG4y2K00JEWbZavJXkYaqo9CRHS55FcZTjKEk3NKoCYUnSQ0rWxrZbFKbKIhOKPZe1cJKzZSaQrIyULHDZmV5K4xySsDRKWOruanGtjLJXFEmwaIbDLX0hIPBUQPVFVkQkDoUNfSoDgQGKPekoxeGzA4DUvnn4bxzcZrtJyipKfPNy5w+9lnXwgqsiyHNeSVpemw4bWb9psYeq//uQZBoABQt4yMVxYAIAAAkQoAAAHvYpL5m6AAgAACXDAAAAD59jblTirQe9upFsmZbpMudy7Lz1X1DYsxOOSWpfPqNX2WqktK0DMvuGwlbNj44TleLPQ+Gsfb+GOWOKJoIrWb3cIMeeON6lz2umTqMXV8Mj30yWPpjoSa9ujK8SyeJP5y5mOW1D6hvLepeveEAEDo0mgCRClOEgANv3B9a6fikgUSu/DmAMATrGx7nng5p5iimPNZsfQLYB2sDLIkzRKZOHGAaUyDcpFBSLG9MCQALgAIgQs2YunOszLSAyQYPVC2YdGGeHD2dTdJk1pAHGAWDjnkcLKFymS3RQZTInzySoBwMG0QueC3gMsCEYxUqlrcxK6k1LQQcsmyYeQPdC2YfuGPASCBkcVMQQqpVJshui1tkXQJQV0OXGAZMXSOEEBRirXbVRQW7ugq7IM7rPWSZyDlM3IuNEkxzCOJ0ny2ThNkyRai1b6ev//3dzNGzNb//4uAvHT5sURcZCFcuKLhOFs8mLAAEAt4UWAAIABAAAAAB4qbHo0tIjVkUU//uQZAwABfSFz3ZqQAAAAAngwAAAE1HjMp2qAAAAACZDgAAAD5UkTE1UgZEUExqYynN1qZvqIOREEFmBcJQkwdxiFtw0qEOkGYfRDifBui9MQg4QAHAqWtAWHoCxu1Yf4VfWLPIM2mHDFsbQEVGwyqQoQcwnfHeIkNt9YnkiaS1oizycqJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=');
        snd.play();
    };
    /**
     * @param {?} constrains
     * @param {?} deviceId
     * @return {?}
     */
    DevicesUtils.getMediaStream = /**
     * @param {?} constrains
     * @param {?} deviceId
     * @return {?}
     */
    function (constrains, deviceId) {
        if (!navigator.mediaDevices) {
            throwError('Can\'t get user media, this is not supported.');
        }
        /** @type {?} */
        var video = deviceId === undefined
            ? { facingMode: { exact: 'environment' } }
            : { deviceId: { exact: deviceId } };
        constrains.video = video;
        return from(navigator.mediaDevices.getUserMedia(constrains))
            .pipe(map$1(function (stream) { return stream; }), catchError(function (err) { return throwError(err); }));
    };
    /**
     * @param {?} mediaStream
     * @return {?}
     */
    DevicesUtils.stopMedia = /**
     * @param {?} mediaStream
     * @return {?}
     */
    function (mediaStream) {
        if (mediaStream && mediaStream.getTracks) {
            mediaStream.getTracks()
                .forEach(function (track) { return track.stop(); });
        }
    };
    /**
     * @param {?} videoEle
     * @param {?} canvasEle
     * @return {?}
     */
    DevicesUtils.takeImage = /**
     * @param {?} videoEle
     * @param {?} canvasEle
     * @return {?}
     */
    function (videoEle, canvasEle) {
        /** @type {?} */
        var dimensions = {};
        if (videoEle.videoWidth) {
            dimensions['width'] = videoEle.videoWidth;
            dimensions['height'] = videoEle.videoHeight;
        }
        canvasEle.width = dimensions['width'];
        canvasEle.height = dimensions['height'];
        canvasEle.getContext('2d').drawImage(videoEle, 0, 0);
        /** @type {?} */
        var mimeType = 'image/jpeg';
        /** @type {?} */
        var dataUrl = canvasEle.toDataURL(mimeType);
        return of({ dataUrl: dataUrl, mimeType: mimeType });
    };
    return DevicesUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var APP_STORE = new BehaviorSubject({});
var StatesUtils = /** @class */ (function () {
    function StatesUtils() {
    }
    /**
     * @return {?}
     */
    StatesUtils.getStore = /**
     * @return {?}
     */
    function () {
        return APP_STORE;
    };
    /**
     * @param {?} path
     * @param {?=} value
     * @param {?=} preserved
     * @return {?}
     */
    StatesUtils.create = /**
     * @param {?} path
     * @param {?=} value
     * @param {?=} preserved
     * @return {?}
     */
    function (path, value, preserved) {
        /** @type {?} */
        var storeItem = StatesUtils.getStoreItem(path, true);
        storeItem.state.next(value);
        if (preserved) {
            storeItem.preserved = preserved;
        }
        return storeItem.state;
    };
    /**
     * @param {?} path
     * @param {?=} createWhenAbsent
     * @return {?}
     */
    StatesUtils.get = /**
     * @param {?} path
     * @param {?=} createWhenAbsent
     * @return {?}
     */
    function (path, createWhenAbsent) {
        /** @type {?} */
        var storeItem = StatesUtils.getStoreItem(path, createWhenAbsent);
        if (storeItem) {
            return storeItem.state;
        }
        else {
            return undefined;
        }
    };
    /**
     * @param {...?} path
     * @return {?}
     */
    StatesUtils.observe = /**
     * @param {...?} path
     * @return {?}
     */
    function () {
        var path = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            path[_i] = arguments[_i];
        }
        return StatesUtils.get(path, true);
    };
    /**
     * @param {...?} path
     * @return {?}
     */
    StatesUtils.toggle = /**
     * @param {...?} path
     * @return {?}
     */
    function () {
        var path = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            path[_i] = arguments[_i];
        }
        /** @type {?} */
        var state = StatesUtils.get(path);
        state.next(!!!state.value);
        return state;
    };
    /**
     * @param {?} path
     * @return {?}
     */
    StatesUtils.inc = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var state = StatesUtils.get(path, true);
        /** @type {?} */
        var newValue = 0;
        if (state.value) {
            newValue = state.value + 1;
        }
        state.next(newValue);
        return state;
    };
    /**
     * @param {?} path
     * @return {?}
     */
    StatesUtils.dec = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var state = StatesUtils.get(path, true);
        /** @type {?} */
        var newValue = 0;
        if (state.value) {
            newValue = state.value - 1;
        }
        state.next(newValue);
        return state;
    };
    /**
     * @param {?} path
     * @param {?} offset
     * @return {?}
     */
    StatesUtils.add = /**
     * @param {?} path
     * @param {?} offset
     * @return {?}
     */
    function (path, offset) {
        /** @type {?} */
        var state = StatesUtils.get(path, true);
        /** @type {?} */
        var newValue = 0;
        if (state.value) {
            newValue = state.value + offset;
        }
        state.next(newValue);
        return state;
    };
    /**
     * used to clear some state properties
     */
    /**
     * used to clear some state properties
     * @param {?} path
     * @param {?} final
     * @return {?}
     */
    StatesUtils.set = /**
     * used to clear some state properties
     * @param {?} path
     * @param {?} final
     * @return {?}
     */
    function (path, final) {
        /** @type {?} */
        var state = StatesUtils.get(path, true);
        if (!state.value) {
            return StatesUtils.create(path, final);
        }
        else {
            state.next(final);
            return state;
        }
    };
    /**
     * @param {?} path
     * @param {?} key
     * @return {?}
     */
    StatesUtils.delete = /**
     * @param {?} path
     * @param {?} key
     * @return {?}
     */
    function (path, key) {
        /** @type {?} */
        var state = StatesUtils.get(path);
        if (state.value) {
            state.next(CommonsUtils.unset(state.value, key));
        }
    };
    /**
     * used to update state properties when patch has no undefined values
     */
    /**
     * used to update state properties when patch has no undefined values
     * @param {?} path
     * @param {?} patch
     * @return {?}
     */
    StatesUtils.update = /**
     * used to update state properties when patch has no undefined values
     * @param {?} path
     * @param {?} patch
     * @return {?}
     */
    function (path, patch) {
        /** @type {?} */
        var state = StatesUtils.get(path, true);
        if (!state.value) {
            return StatesUtils.create(path, patch);
        }
        else {
            state.next(CommonsUtils.merge({}, state.value, patch));
            return state;
        }
    };
    /**
     * @param {...?} path
     * @return {?}
     */
    StatesUtils.getValue = /**
     * @param {...?} path
     * @return {?}
     */
    function () {
        var path = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            path[_i] = arguments[_i];
        }
        /** @type {?} */
        var state = StatesUtils.get(path);
        return state ? __assign({}, state.value) : undefined;
    };
    /**
     * @param {...?} path
     * @return {?}
     */
    StatesUtils.deleteState = /**
     * @param {...?} path
     * @return {?}
     */
    function () {
        var path = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            path[_i] = arguments[_i];
        }
        /** @type {?} */
        var state = StatesUtils.get(path);
        CommonsUtils.unset(APP_STORE.value, CommonsUtils.flatPath(path));
        if (state) {
            state.next(undefined);
            state.complete();
        }
        APP_STORE.next(APP_STORE.value);
    };
    /**
     * @private
     * @param {?} path
     * @param {?=} createWhenAbsent
     * @return {?}
     */
    StatesUtils.getStoreItem = /**
     * @private
     * @param {?} path
     * @param {?=} createWhenAbsent
     * @return {?}
     */
    function (path, createWhenAbsent) {
        /** @type {?} */
        var key = CommonsUtils.flatPath(path);
        /** @type {?} */
        var storeItem = CommonsUtils.get(APP_STORE.value, key);
        if (!storeItem && createWhenAbsent) {
            storeItem = {
                state: new BehaviorSubject(undefined),
                createdAt: new Date().getMilliseconds()
            };
            /** @type {?} */
            var value = CommonsUtils.set(APP_STORE.value, key, storeItem);
            APP_STORE.next(value);
        }
        return storeItem;
    };
    return StatesUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment = momentNs;
var DateUtils = /** @class */ (function () {
    function DateUtils() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    DateUtils.getMoment = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (moment.isMoment(data)) {
            return data;
        }
        /** @type {?} */
        var date = DateUtils.toDate(data);
        if (date) {
            return moment(data);
        }
        return null;
    };
    /**
     * @param {?} v
     * @return {?}
     */
    DateUtils.isDate = /**
     * @param {?} v
     * @return {?}
     */
    function (v) {
        return !!DateUtils.toDate(v);
    };
    /**
     * @param {?} v
     * @return {?}
     */
    DateUtils.toDate = /**
     * @param {?} v
     * @return {?}
     */
    function (v) {
        if (CommonsUtils.isString(v)) {
            /** @type {?} */
            var date = Date.parse(v);
            if (!isNaN(date)) {
                return new Date(date);
            }
        }
        else {
            if (v && typeof v.getMonth === 'function') {
                return v;
            }
        }
        return undefined;
    };
    /**
     * @param {?=} date
     * @param {?=} format
     * @return {?}
     */
    DateUtils.getFormattedDate = /**
     * @param {?=} date
     * @param {?=} format
     * @return {?}
     */
    function (date, format) {
        if (format === void 0) { format = 'YYYY-MM-DD'; }
        return DateUtils.getFormattedDateTime(format, date);
    };
    /**
     * @param {?=} date
     * @param {?=} format
     * @return {?}
     */
    DateUtils.getFormattedTime = /**
     * @param {?=} date
     * @param {?=} format
     * @return {?}
     */
    function (date, format) {
        if (format === void 0) { format = 'HH:mm:ss'; }
        return DateUtils.getFormattedDateTime(format, date);
    };
    /**
     * @param {?=} format
     * @param {?=} date
     * @return {?}
     */
    DateUtils.getFormattedDateTime = /**
     * @param {?=} format
     * @param {?=} date
     * @return {?}
     */
    function (format, date) {
        if (format === void 0) { format = 'YYYY-MM-DD HH:mm:ss'; }
        if (!date) {
            date = DateUtils.getDate();
        }
        else {
            date = DateUtils.toDate(date);
        }
        /** @type {?} */
        var momentData = DateUtils.getMoment(date);
        if (momentData) {
            return momentData.format(format);
        }
        return '';
    };
    /**
     * @return {?}
     */
    DateUtils.getDate = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var date;
        /** @type {?} */
        var dateState = StatesUtils.getValue(StateNames.serverTime);
        if (dateState) {
            date = dateState.date;
        }
        else {
            date = new Date();
        }
        return date;
    };
    /**
     * @return {?}
     */
    DateUtils.getStamp = /**
     * @return {?}
     */
    function () {
        return DateUtils.getDate().getTime();
    };
    /**
     * @param {?} present
     * @param {?=} due
     * @return {?}
     */
    DateUtils.getDateByNow = /**
     * @param {?} present
     * @param {?=} due
     * @return {?}
     */
    function (present, due) {
        if (!present) {
            return { seconds: 0, message: '' };
        }
        if (!DateUtils.isDate(present)) {
            try {
                present = new Date(present);
            }
            catch (e) {
                present = null;
            }
        }
        if (!present) {
            return { seconds: 0, message: '' };
        }
        /** @type {?} */
        var _due = due;
        if (!_due) {
            _due = new Date();
        }
        if (!DateUtils.isDate(_due)) {
            _due = new Date(_due);
        }
        /** @type {?} */
        var seconds = Math.round(Math.abs((_due.getTime() - present.getTime()) / 1000));
        /** @type {?} */
        var minutes = Math.round(Math.abs(seconds / 60));
        /** @type {?} */
        var hours = Math.round(Math.abs(minutes / 60));
        /** @type {?} */
        var days = Math.round(Math.abs(hours / 24));
        /** @type {?} */
        var months = Math.round(Math.abs(days / 30.416));
        /** @type {?} */
        var years = Math.round(Math.abs(days / 365));
        /** @type {?} */
        var message = '';
        if (seconds <= 10) {
            message = (_due > present) ? '刚刚' : '马上';
        }
        else if (seconds <= 30) {
            message = '30秒';
        }
        else if (seconds <= 90) {
            message = '1分钟';
        }
        else if (minutes <= 45) {
            message = minutes + '分钟';
        }
        else if (minutes <= 90) {
            message = '1小时';
        }
        else if (hours <= 22) {
            message = hours + '小时';
        }
        else if (hours <= 36) {
            message = '1天';
        }
        else if (days <= 25) {
            message = days + '天';
        }
        else if (days <= 45) {
            message = '1个月';
        }
        else if (days <= 345) {
            message = months + '月';
        }
        else if (days <= 545) {
            message = '1年';
        }
        else { // (days > 545)
            message = years + '年';
        }
        if (seconds > 10) {
            message += (_due > present) ? '前' : '后';
        }
        return {
            seconds: seconds,
            message: message
        };
    };
    /**
     * @param {?} seconds
     * @return {?}
     */
    DateUtils.getUpdateSeconds = /**
     * @param {?} seconds
     * @return {?}
     */
    function (seconds) {
        /** @type {?} */
        var min = 60;
        /** @type {?} */
        var hr = min * 60;
        /** @type {?} */
        var day = hr * 24;
        if (seconds < min) { // less than 1 min, update every 2 secs
            return 2;
        }
        else if (seconds < hr) { // less than an hour, update every 30 secs
            return 30;
        }
        else if (seconds < day) { // less then a day, update every 5 mins
            return 300;
        }
        else { // update every hour
            return 3600;
        }
    };
    /**
     * @param {?=} date
     * @return {?}
     */
    DateUtils.getYear = /**
     * @param {?=} date
     * @return {?}
     */
    function (date) {
        return (date || DateUtils.getDate()).getFullYear();
    };
    /**
     * @param {?=} date
     * @return {?}
     */
    DateUtils.getMonth = /**
     * @param {?=} date
     * @return {?}
     */
    function (date) {
        return (date || DateUtils.getDate()).getMonth() + 1;
    };
    /**
     * @param {?=} date
     * @return {?}
     */
    DateUtils.getDay = /**
     * @param {?=} date
     * @return {?}
     */
    function (date) {
        return (date || DateUtils.getDate()).getDate();
    };
    /**
     * @return {?}
     */
    DateUtils.getYesterday = /**
     * @return {?}
     */
    function () {
        return DateUtils.getDay(new Date(DateUtils.getDate().getTime() - 24 * 60 * 60 * 1000));
    };
    /**
     * @return {?}
     */
    DateUtils.getTomorrow = /**
     * @return {?}
     */
    function () {
        return DateUtils.getDay(new Date(DateUtils.getDate().getTime() + 24 * 60 * 60 * 1000));
    };
    /**
     * @return {?}
     */
    DateUtils.getLastMonth = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var month = DateUtils.getMonth() - 1;
        return month < 1 ? 12 : month;
    };
    /**
     * @return {?}
     */
    DateUtils.getNextMonth = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var month = DateUtils.getMonth() + 1;
        return month > 12 ? 1 : month;
    };
    return DateUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DataEntityUtils = /** @class */ (function () {
    function DataEntityUtils() {
    }
    /**
     * @param {?} entity
     * @param {?} data
     * @param {...?} keys
     * @return {?}
     */
    DataEntityUtils.getEntityData = /**
     * @param {?} entity
     * @param {?} data
     * @param {...?} keys
     * @return {?}
     */
    function (entity, data) {
        var keys = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            keys[_i - 2] = arguments[_i];
        }
        /** @type {?} */
        var keysData = {};
        if (keys && keys.length > 0) {
            keys.forEach(function (key) {
                keysData[entity.fields[key].label || key] = data[key];
            });
        }
        else {
            Object.keys(data).filter(function (key) { return ['_index', '_type', 'id'].indexOf(key) === -1; })
                .forEach(function (key) {
                keysData[entity.fields[key] && entity.fields[key].label || key] = data[key];
            });
        }
        return keysData;
    };
    /**
     * @param {?} entity
     * @return {?}
     */
    DataEntityUtils.getDataEntityDefaultFieldName = /**
     * @param {?} entity
     * @return {?}
     */
    function (entity) {
        if (entity.defaultField) {
            return entity.fields[entity.defaultField] && entity.fields[entity.defaultField].key;
        }
    };
    return DataEntityUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ObjectUtils = /** @class */ (function () {
    function ObjectUtils() {
    }
    /**
     * @template T
     * @param {?} target
     * @param {?} value
     * @return {?}
     */
    ObjectUtils.patch = /**
     * @template T
     * @param {?} target
     * @param {?} value
     * @return {?}
     */
    function (target, value) {
        /** @type {?} */
        var hasChanged = false;
        for (var key in value) {
            if (!Object.prototype.hasOwnProperty.call(value, key))
                continue;
            if (value[key] !== ((/** @type {?} */ (target)))[key]) {
                hasChanged = true;
                break;
            }
        }
        return !hasChanged ? target : Object.assign({}, target, value);
    };
    return ObjectUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template V
 * @return {?}
 */
function createDict() {
    return Object.create(null);
}
/**
 * @template V
 * @param {?} dict
 * @return {?}
 */
function copyDict(dict) {
    return Object.assign(createDict(), dict);
}
/**
 * @param {?} dict
 * @param {?} key
 * @return {?}
 */
function hasKey(dict, key) {
    return Object.prototype.hasOwnProperty.call(dict, key.toString());
}
/**
 * @template T, R
 * @param {?} dict
 * @param {?} map
 * @return {?}
 */
function mapValues(dict, map$$1) {
    var e_1, _a;
    /** @type {?} */
    var ret = createDict();
    /** @type {?} */
    var changed = false;
    try {
        for (var _b = __values(Object.keys(dict)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            ret[key] = map$$1(dict[key]);
            if ((/** @type {?} */ (ret[key])) !== dict[key]) {
                changed = true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return changed ? ret : (/** @type {?} */ (dict));
}
/**
 * @template V
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
function union$1(target, source) {
    return ObjectUtils.patch(target, source);
}
/**
 * @template V
 * @param {?} dict
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
function setKey(dict, key, value) {
    if (dict[key] === value) {
        return dict;
    }
    /** @type {?} */
    var ret = copyDict(dict);
    ret[key] = value;
    return ret;
}
/**
 * @template V
 * @param {?} dict
 * @param {...?} keys
 * @return {?}
 */
function removeKey(dict) {
    var keys = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        keys[_i - 1] = arguments[_i];
    }
    var e_2, _a;
    /** @type {?} */
    var ret = copyDict(dict);
    /** @type {?} */
    var changed = false;
    try {
        for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
            var key = keys_1_1.value;
            if (hasKey(ret, key.toString())) {
                changed = true;
                delete ret[key];
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return changed ? ret : dict;
}
/**
 * @template V
 * @param {?} keys
 * @param {?} values
 * @return {?}
 */
function fromKeys(keys, values) {
    var e_3, _a;
    /** @type {?} */
    var ret = createDict();
    /** @type {?} */
    var isFunction = typeof values === 'function';
    try {
        for (var keys_2 = __values(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
            var key = keys_2_1.value;
            ret[key] = isFunction ? ((/** @type {?} */ (values)))(key) : values;
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (keys_2_1 && !keys_2_1.done && (_a = keys_2.return)) _a.call(keys_2);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return ret;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FileUtils = /** @class */ (function () {
    function FileUtils() {
    }
    /**
     * @param {?} file
     * @param {?=} readAs
     * @return {?}
     */
    FileUtils.readFile = /**
     * @param {?} file
     * @param {?=} readAs
     * @return {?}
     */
    function (file, readAs) {
        /** @type {?} */
        var reader = new FileReader();
        /** @type {?} */
        var fileReader$ = fromEvent(reader, 'load').pipe(map$1(function (e) { return e.target.result; }), first());
        switch (readAs || ReadAs.BINARY) {
            case ReadAs.ARRAY:
                reader.readAsArrayBuffer(file);
                break;
            case ReadAs.BINARY:
                reader.readAsBinaryString(file);
                break;
            case ReadAs.URL:
                reader.readAsDataURL(file);
                break;
            case ReadAs.TEXT:
                reader.readAsText(file);
                break;
        }
        return fileReader$;
    };
    return FileUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IdCardUtils = /** @class */ (function () {
    function IdCardUtils() {
    }
    /**
     * @param {?} idCardNo
     * @return {?}
     */
    IdCardUtils.test = /**
     * @param {?} idCardNo
     * @return {?}
     */
    function (idCardNo) {
        /** @type {?} */
        var format = /^(([1][1-5])|([2][1-3])|([3][1-7])|([4][1-6])|([5][0-4])|([6][1-5])|([7][1])|([8][1-2]))\d{4}(([1][9]\d{2})|([2]\d{3}))(([0][1-9])|([1][0-2]))(([0][1-9])|([1-2][0-9])|([3][0-1]))\d{3}[0-9xX]$/;
        if (!format.test(idCardNo)) {
            return { status: false, 'msg': '身份证号码不合规' };
        }
        /** @type {?} */
        var year = idCardNo.substr(6, 4);
        /** @type {?} */
        var month = idCardNo.substr(10, 2);
        /** @type {?} */
        var date = idCardNo.substr(12, 2);
        /** @type {?} */
        var time = Date.parse(month + '-' + date + '-' + year);
        /** @type {?} */
        var now_time = Date.parse(DateUtils.getDate());
        /** @type {?} */
        var dates = (new Date(year, month, 0)).getDate();
        if (time > now_time || date > dates) {
            return { status: false, msg: '出生日期不合规' };
        }
        /** @type {?} */
        var c = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);
        /** @type {?} */
        var b = new Array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2');
        /** @type {?} */
        var id_array = idCardNo.split('');
        /** @type {?} */
        var sum = 0;
        for (var k = 0; k < 17; k++) {
            sum += parseInt(id_array[k]) * c[k];
        }
        if (id_array[17].toUpperCase() !== b[sum % 11].toUpperCase()) {
            return { status: false, msg: '身份证校验码不合规' };
        }
        return { status: true };
    };
    /**
     * @param {?} idCardNo
     * @return {?}
     */
    IdCardUtils.parse = /**
     * @param {?} idCardNo
     * @return {?}
     */
    function (idCardNo) {
        if (!IdCardUtils.test(idCardNo).status) {
            return {};
        }
        /** @type {?} */
        var res = {};
        /** @type {?} */
        var idxSexStart = idCardNo.length === 15 ? 14 : 16;
        /** @type {?} */
        var birthYearSpan = idCardNo.length === 15 ? 2 : 4;
        /** @type {?} */
        var idxSex = 1 - idCardNo.substr(idxSexStart, 1) % 2;
        res.gender = (idxSex === 1 ? '女' : '男');
        /** @type {?} */
        var year = (birthYearSpan === 2 ? '19' : '') + idCardNo.substr(6, birthYearSpan);
        /** @type {?} */
        var month = idCardNo.substr(6 + birthYearSpan, 2);
        /** @type {?} */
        var day = idCardNo.substr(8 + birthYearSpan, 2);
        res.birthday = year + '-' + month + '-' + day;
        /** @type {?} */
        var d = DateUtils.getDate();
        /** @type {?} */
        var monthFloor = ((d.getMonth() + 1) < parseInt(month, 10) || (d.getMonth() + 1) === parseInt(month, 10) && d.getDate() < parseInt(day, 10)) ? 1 : 0;
        res.age = d.getFullYear() - parseInt(year, 10) - monthFloor;
        return res;
    };
    return IdCardUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormUtils = /** @class */ (function () {
    function FormUtils() {
    }
    /**
     * @param {?} form
     * @param {...?} path
     * @return {?}
     */
    FormUtils.getFormControl = /**
     * @param {?} form
     * @param {...?} path
     * @return {?}
     */
    function (form) {
        var path = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            path[_i - 1] = arguments[_i];
        }
        /** @type {?} */
        var _form = form;
        /** @type {?} */
        var control = null;
        if (path.length > 0) {
            path.forEach(function (p) {
                control = _form.controls[p];
                if (control instanceof FormGroup) {
                    _form = control;
                }
            });
        }
        return (/** @type {?} */ (control));
    };
    /**
     * @param {?} control
     * @param {?} value
     * @return {?}
     */
    FormUtils.setValue = /**
     * @param {?} control
     * @param {?} value
     * @return {?}
     */
    function (control, value) {
        control.setValue(value, {
            emitEvent: false,
            emitModelToViewChange: false,
            emitViewToModelChange: false
        });
    };
    return FormUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ContextUtils = /** @class */ (function () {
    function ContextUtils() {
    }
    /**
     * @param {?=} date
     * @return {?}
     */
    ContextUtils.context = /**
     * @param {?=} date
     * @return {?}
     */
    function (date) {
        return __assign({ now: DateUtils.getFormattedDateTime(), today: DateUtils.getFormattedDate(), year: DateUtils.getYear(date), lastYear: DateUtils.getYear(date) - 1, month: DateUtils.getMonth(date), lastMonth: DateUtils.getLastMonth(), day: DateUtils.getDay(date), yesterday: DateUtils.getYesterday() }, (/** @type {?} */ (StatesUtils.getValue(StateNames.user))) || {});
    };
    /**
     * @param {?} key
     * @return {?}
     */
    ContextUtils.get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return ContextUtils.context()[key] || '';
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ContextUtils.resolveVariables = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var resolved;
        if (CommonsUtils.isJson(data)) {
            resolved = ContextUtils.resolveJson(data);
        }
        else if (CommonsUtils.isArray(data)) {
            resolved = ContextUtils.resolveArray(data);
        }
        else if (CommonsUtils.isString(data)) {
            resolved = ContextUtils.resolveValue(data);
        }
        else {
            resolved = data;
        }
        return resolved;
    };
    /**
     * @private
     * @param {?} template
     * @return {?}
     */
    ContextUtils.resolveValue = /**
     * @private
     * @param {?} template
     * @return {?}
     */
    function (template$$1) {
        /** @type {?} */
        var resolved = template$$1;
        if (CommonsUtils.isTemplateStr(template$$1)) {
            resolved = CommonsUtils.templateStr(template$$1, ContextUtils.context());
        }
        return resolved;
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    ContextUtils.resolveJson = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var resolved = {};
        for (var prop in data) {
            if (data[prop] !== undefined) {
                if (CommonsUtils.isJson(data[prop])) {
                    resolved[prop] = ContextUtils.resolveJson(data[prop]);
                }
                else if (CommonsUtils.isArray(data[prop])) {
                    resolved[prop] = ContextUtils.resolveArray(data[prop]);
                }
                else if (CommonsUtils.isString(data[prop])) {
                    resolved[prop] = ContextUtils.resolveValue(data[prop]);
                }
                else {
                    resolved[prop] = data[prop];
                }
            }
        }
        return resolved;
    };
    /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    ContextUtils.resolveArray = /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    function (arr) {
        /** @type {?} */
        var resolved = [];
        arr.forEach(function (a) { return resolved.push(ContextUtils.resolveVariables(a)); });
        return resolved;
    };
    return ContextUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_APP_CONFIG = {
    version: '0.0.1',
    stomp: {
        enabled: false,
        destination: '/message/push',
        headers: {},
        heartbeat_in: 0,
        // Typical value 0 - disabled
        heartbeat_out: 20000,
        // Typical value 20000 - every 20 seconds
        reconnect_delay: 5000,
        debug: false
    },
    auth: {
        storageKey: 'erCurrentUser',
        headerName: 'Authorization',
        authScheme: 'Bearer ',
        userTokenKey: 'userName',
        passwordKey: 'password',
        rememberMeKey: 'rememberMe',
        requiredUserProps: 'org',
        loginRouter: 'user/login',
        loginApiOptions: { serverType: ApiServerType.App },
        loginSuccessRouter: '/',
        logoutSuccessRouter: 'user/login'
    },
    alert: {},
    announce: {},
    notify: NotifyType.ALERT,
    onLoading: 'fa fa-cog fa-spin fa-3x indigo',
    enableLogger: true,
    dataFieldProps: {
        dataCode: {
            apiEntry: 'data_code',
            codeKey: 'code',
            nameKey: 'name',
            parentKey: 'parent',
            catKey: 'codeCat'
        }
    },
    wechat: {
        self_redirect: true,
        scope: 'snsapi_login',
        state: '',
        style: 'black',
        href: ''
    },
    log: {
        enableApp: true,
        enableRoute: false,
        level: LogLevel.DEBUG,
        httpPost: false,
        blackLList: ['PropsBindDirective']
    }
};
var ConfigUtils = /** @class */ (function () {
    function ConfigUtils() {
    }
    /**
     * @return {?}
     */
    ConfigUtils.getConfig = /**
     * @return {?}
     */
    function () {
        return ConfigUtils.moduleConfig || ConfigUtils.appConfig;
    };
    /**
     * @param {?} customer
     * @return {?}
     */
    ConfigUtils.configApp = /**
     * @param {?} customer
     * @return {?}
     */
    function (customer) {
        ConfigUtils.appConfig = CommonsUtils.merge({}, DEFAULT_APP_CONFIG, customer);
        return ConfigUtils.appConfig;
    };
    /**
     * @param {?} moduleConf
     * @param {?} url
     * @return {?}
     */
    ConfigUtils.configModule = /**
     * @param {?} moduleConf
     * @param {?} url
     * @return {?}
     */
    function (moduleConf, url) {
        /** @type {?} */
        var config = moduleConf;
        if (url && url === ConfigUtils.lastUrl) {
            config = CommonsUtils.merge(ConfigUtils.lastConfig, moduleConf);
        }
        else {
            ConfigUtils.lastUrl = url;
            ConfigUtils.lastConfig = moduleConf;
        }
        ConfigUtils.moduleConfig = CommonsUtils.merge({}, ConfigUtils.appConfig, config);
        return ConfigUtils.moduleConfig;
    };
    /**
     * @param {?} namePath
     * @param {?=} defaultValue
     * @return {?}
     */
    ConfigUtils.get = /**
     * @param {?} namePath
     * @param {?=} defaultValue
     * @return {?}
     */
    function (namePath, defaultValue) {
        return CommonsUtils.get(ConfigUtils.getConfig(), namePath, defaultValue);
    };
    ConfigUtils.lastUrl = undefined;
    ConfigUtils.lastConfig = {};
    ConfigUtils.appConfig = __assign({}, DEFAULT_APP_CONFIG);
    ConfigUtils.moduleConfig = undefined;
    return ConfigUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DialogUtils = /** @class */ (function () {
    function DialogUtils() {
    }
    /**
     * @param {?=} header
     * @param {?=} content
     * @param {?=} options
     * @return {?}
     */
    DialogUtils.confirm = /**
     * @param {?=} header
     * @param {?=} content
     * @param {?=} options
     * @return {?}
     */
    function (header, content, options) {
        /** @type {?} */
        var state = StatesUtils.create(StateNames.confirm, __assign({ header: header,
            content: content }, options, { open: true }));
        return state.pipe(filter$1(function (stateValue) { return stateValue && !stateValue.open; }), map$1(function (_a) {
            var accept = _a.accept;
            return accept === true;
        }));
    };
    /**
     * @param {?} header
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    DialogUtils.error = /**
     * @param {?} header
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    function (header, content, options) {
        /** @type {?} */
        var html = "\n                 <div class=\"d-flex align-items-center\">\n                  <i class=\"fa fa-exclamation-circle fa-2x text-danger mr-2\"></i>\n                  <span style=\"font-size: 1.2em\">" + content + "</span>\n                </div>                 \n    ";
        return DialogUtils.popup(header, html, __assign({}, options || {}, { maximizable: false }));
    };
    /**
     * @param {?} header
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    DialogUtils.info = /**
     * @param {?} header
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    function (header, content, options) {
        /** @type {?} */
        var html = "\n                 <div class=\"d-flex align-items-center\">\n                  <i class=\"fa fa-info-circle fa-2x text-primary mr-2\"></i>\n                  <span style=\"font-size: 1.2em\">" + content + "</span>\n                </div>                 \n    ";
        return DialogUtils.popup(header, html, __assign({}, options || {}, { maximizable: false, minWidth: 200, closeLabel: '确定' }));
    };
    /**
     * @private
     * @param {?=} header
     * @param {?=} content
     * @param {?=} options
     * @return {?}
     */
    DialogUtils.popup = /**
     * @private
     * @param {?=} header
     * @param {?=} content
     * @param {?=} options
     * @return {?}
     */
    function (header, content, options) {
        /** @type {?} */
        var state = StatesUtils.create(StateNames.popup, __assign({ header: header,
            content: content }, options, { maximizable: false, visible: true }));
        return state;
    };
    return DialogUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MenuUtils = /** @class */ (function () {
    function MenuUtils() {
    }
    /**
     * @param {?} menuItems
     * @param {?=} roles
     * @param {?=} permissions
     * @return {?}
     */
    MenuUtils.getUserMenuItems = /**
     * @param {?} menuItems
     * @param {?=} roles
     * @param {?=} permissions
     * @return {?}
     */
    function (menuItems, roles, permissions) {
        /** @type {?} */
        var filtered = [];
        permissions = CommonsUtils.getArrayValue(permissions);
        if (!roles || roles.length === 0) {
            roles = [];
        }
        if (!permissions || permissions.length === 0) {
            permissions = [];
        }
        if (roles.length === 0 && permissions.length === 0) {
            return menuItems;
        }
        if (menuItems && menuItems.length > 0) {
            menuItems.forEach(function (menuItem) {
                /** @type {?} */
                var item = menuItem;
                if (item.roles || item.permissions) {
                    if (item.roles && roles.length > 0) {
                        /** @type {?} */
                        var menuRoles = CommonsUtils.getArrayValue(item.roles);
                        /** @type {?} */
                        var matched = menuRoles.filter(function (menuRole) { return roles.indexOf(menuRole) >= 0; });
                        if (matched.length > 0) {
                            filtered.push(item);
                        }
                    }
                    if (filtered.indexOf(item) === -1 && item.permissions && permissions.length > 0) {
                        /** @type {?} */
                        var menuPermissions = CommonsUtils.getArrayValue(item.permissions);
                        /** @type {?} */
                        var matched = menuPermissions.filter(function (menuPermission) { return permissions.indexOf(menuPermission) >= 0; });
                        if (matched.length > 0) {
                            filtered.push(item);
                        }
                    }
                }
                else {
                    filtered.push(item);
                }
                if (item.items) {
                    /** @type {?} */
                    var subItems = MenuUtils.getUserMenuItems(item.items, permissions, roles);
                    if (subItems.length > 0) {
                        item.items = subItems;
                    }
                }
            });
            return filtered;
        }
    };
    /**
     * @param {?} menuItems
     * @return {?}
     */
    MenuUtils.transMenuItems = /**
     * @param {?} menuItems
     * @return {?}
     */
    function (menuItems) {
        /** @type {?} */
        var nodes;
        nodes = CommonsUtils.orderBy(menuItems, ['parent', 'code'], ['asc']);
        nodes.forEach(function (item) {
            /** @type {?} */
            var children = nodes.filter(function (item2) { return item2['parent'] && item2['parent'] === item['code']; });
            if (children.length > 0) {
                item['items'] = children;
            }
            if (item.icon && item.icon.startsWith('fa-')) {
                item.icon = 'fa ' + item.icon;
            }
        });
        return nodes = nodes.filter(function (node) { return !node['parent']; });
    };
    return MenuUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DomUtils = /** @class */ (function () {
    function DomUtils() {
        this.calculatedScrollbarWidth = null;
    }
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    DomUtils.addClass = /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function (element, className) {
        if (element.classList) {
            element.classList.add(className);
        }
        else {
            element.className += ' ' + className;
        }
    };
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    DomUtils.addClasses = /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function (element, className) {
        /** @type {?} */
        var styles = className.split(' ');
        for (var i = 0; i < styles.length; i++) {
            DomUtils.addClass(element, styles[i]);
        }
    };
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    DomUtils.removeClass = /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function (element, className) {
        if (element.classList) {
            element.classList.remove(className);
        }
        else {
            element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
        }
    };
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    DomUtils.hasClass = /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function (element, className) {
        if (element.classList) {
            return element.classList.contains(className);
        }
        else {
            return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
        }
    };
    /**
     * @param {?} element
     * @return {?}
     */
    DomUtils.siblings = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var children = element.parentNode.children.filter(function (child) { return child !== element; });
        return children;
    };
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    DomUtils.find = /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    function (element, selector) {
        return element.querySelectorAll(selector);
    };
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    DomUtils.findSingle = /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    function (element, selector) {
        return element.querySelector(selector);
    };
    /**
     * @param {?} element
     * @return {?}
     */
    DomUtils.index = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var children = element.parentNode.childNodes;
        /** @type {?} */
        var num = 0;
        for (var i = 0; i < children.length; i++) {
            if (children[i] == element)
                return num;
            if (children[i].nodeType == 1)
                num++;
        }
        return -1;
    };
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    DomUtils.relativePosition = /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    function (element, target) {
        /** @type {?} */
        var elementDimensions = element.offsetParent ? {
            width: element.offsetWidth,
            height: element.offsetHeight
        } : this.getHiddenElementDimensions(element);
        /** @type {?} */
        var targetHeight = target.offsetHeight;
        /** @type {?} */
        var targetWidth = target.offsetWidth;
        /** @type {?} */
        var targetOffset = target.getBoundingClientRect();
        /** @type {?} */
        var windowScrollTop = this.getWindowScrollTop();
        /** @type {?} */
        var viewport = this.getViewport();
        /** @type {?} */
        var top;
        /** @type {?} */
        var left;
        if ((targetOffset.top + targetHeight + elementDimensions.height) > viewport.height) {
            top = -1 * (elementDimensions.height);
            if (targetOffset.top + top < 0) {
                top = 0;
            }
        }
        else {
            top = targetHeight;
        }
        if ((targetOffset.left + elementDimensions.width) > viewport.width) {
            left = targetWidth - elementDimensions.width;
        }
        else {
            left = 0;
        }
        element.style.top = top + 'px';
        element.style.left = left + 'px';
    };
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    DomUtils.absolutePosition = /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    function (element, target) {
        /** @type {?} */
        var elementDimensions = element.offsetParent ? {
            width: element.offsetWidth,
            height: element.offsetHeight
        } : this.getHiddenElementDimensions(element);
        /** @type {?} */
        var elementOuterHeight = elementDimensions.height;
        /** @type {?} */
        var elementOuterWidth = elementDimensions.width;
        /** @type {?} */
        var targetOuterHeight = target.offsetHeight;
        /** @type {?} */
        var targetOuterWidth = target.offsetWidth;
        /** @type {?} */
        var targetOffset = target.getBoundingClientRect();
        /** @type {?} */
        var windowScrollTop = this.getWindowScrollTop();
        /** @type {?} */
        var windowScrollLeft = this.getWindowScrollLeft();
        /** @type {?} */
        var viewport = this.getViewport();
        /** @type {?} */
        var top;
        /** @type {?} */
        var left;
        if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {
            top = targetOffset.top + windowScrollTop - elementOuterHeight;
            if (top < 0) {
                top = 0 + windowScrollTop;
            }
        }
        else {
            top = targetOuterHeight + targetOffset.top + windowScrollTop;
        }
        if (targetOffset.left + targetOuterWidth + elementOuterWidth > viewport.width) {
            left = targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth;
        }
        else {
            left = targetOffset.left + windowScrollLeft;
        }
        element.style.top = top + 'px';
        element.style.left = left + 'px';
    };
    /**
     * @param {?} element
     * @return {?}
     */
    DomUtils.getHiddenElementOuterHeight = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        element.style.visibility = 'hidden';
        element.style.display = 'block';
        /** @type {?} */
        var elementHeight = element.offsetHeight;
        element.style.display = 'none';
        element.style.visibility = 'visible';
        return elementHeight;
    };
    /**
     * @param {?} element
     * @return {?}
     */
    DomUtils.getHiddenElementOuterWidth = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        element.style.visibility = 'hidden';
        element.style.display = 'block';
        /** @type {?} */
        var elementWidth = element.offsetWidth;
        element.style.display = 'none';
        element.style.visibility = 'visible';
        return elementWidth;
    };
    /**
     * @param {?} element
     * @return {?}
     */
    DomUtils.getHiddenElementDimensions = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var dimensions = {};
        element.style.visibility = 'hidden';
        element.style.display = 'block';
        dimensions.width = element.offsetWidth;
        dimensions.height = element.offsetHeight;
        element.style.display = 'none';
        element.style.visibility = 'visible';
        return dimensions;
    };
    /**
     * @param {?} container
     * @param {?} item
     * @return {?}
     */
    DomUtils.scrollInView = /**
     * @param {?} container
     * @param {?} item
     * @return {?}
     */
    function (container, item) {
        /** @type {?} */
        var borderTopValue = getComputedStyle(container).getPropertyValue('borderTopWidth');
        /** @type {?} */
        var borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;
        /** @type {?} */
        var paddingTopValue = getComputedStyle(container).getPropertyValue('paddingTop');
        /** @type {?} */
        var paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;
        /** @type {?} */
        var containerRect = container.getBoundingClientRect();
        /** @type {?} */
        var itemRect = item.getBoundingClientRect();
        /** @type {?} */
        var offset = (itemRect.top + document.body.scrollTop) - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;
        /** @type {?} */
        var scroll = container.scrollTop;
        /** @type {?} */
        var elementHeight = container.clientHeight;
        /** @type {?} */
        var itemHeight = this.getOuterHeight(item);
        if (offset < 0) {
            container.scrollTop = scroll + offset;
        }
        else if ((offset + itemHeight) > elementHeight) {
            container.scrollTop = scroll + offset - elementHeight + itemHeight;
        }
    };
    /**
     * @param {?} element
     * @param {?} duration
     * @return {?}
     */
    DomUtils.fadeIn = /**
     * @param {?} element
     * @param {?} duration
     * @return {?}
     */
    function (element, duration) {
        element.style.opacity = 0;
        /** @type {?} */
        var last = +new Date();
        /** @type {?} */
        var opacity = 0;
        /** @type {?} */
        var tick = function () {
            opacity = +element.style.opacity.replace(',', '.') + (new Date().getTime() - last) / duration;
            element.style.opacity = opacity;
            last = +new Date();
            if (+opacity < 1) {
                (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);
            }
        };
        tick();
    };
    /**
     * @param {?} element
     * @param {?} ms
     * @return {?}
     */
    DomUtils.fadeOut = /**
     * @param {?} element
     * @param {?} ms
     * @return {?}
     */
    function (element, ms) {
        /** @type {?} */
        var opacity = 1;
        /** @type {?} */
        var interval = 50;
        /** @type {?} */
        var duration = ms;
        /** @type {?} */
        var gap = interval / duration;
        /**
         * @return {?}
         */
        function intervalCallback() {
            opacity = opacity - gap;
            if (opacity <= 0) {
                opacity = 0;
                clearInterval(fading);
            }
            element.style.opacity = opacity;
        }
        /** @type {?} */
        var fading = setInterval(intervalCallback, interval);
    };
    /**
     * @return {?}
     */
    DomUtils.getWindowScrollTop = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var doc = document.documentElement;
        return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
    };
    /**
     * @return {?}
     */
    DomUtils.getWindowScrollLeft = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var doc = document.documentElement;
        return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
    };
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    DomUtils.matches = /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    function (element, selector) {
        /** @type {?} */
        var p = Element.prototype;
        /** @type {?} */
        var f = p['matches'] || p.webkitMatchesSelector || function (s) {
            return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
        };
        return f.call(element, selector);
    };
    /**
     * @param {?} el
     * @param {?=} margin
     * @return {?}
     */
    DomUtils.getOuterWidth = /**
     * @param {?} el
     * @param {?=} margin
     * @return {?}
     */
    function (el, margin) {
        /** @type {?} */
        var width = el.offsetWidth;
        if (margin) {
            /** @type {?} */
            var style = getComputedStyle(el);
            width += parseFloat(style.marginLeft) + parseFloat(style.marginRight);
        }
        return width;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DomUtils.getHorizontalPadding = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        /** @type {?} */
        var style = getComputedStyle(el);
        return parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DomUtils.getHorizontalMargin = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        /** @type {?} */
        var style = getComputedStyle(el);
        return parseFloat(style.marginLeft) + parseFloat(style.marginRight);
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DomUtils.innerWidth = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        /** @type {?} */
        var width = el.offsetWidth;
        /** @type {?} */
        var style = getComputedStyle(el);
        width += parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
        return width;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DomUtils.width = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        /** @type {?} */
        var width = el.offsetWidth;
        /** @type {?} */
        var style = getComputedStyle(el);
        width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
        return width;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DomUtils.getInnerHeight = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        /** @type {?} */
        var height = el.offsetHeight;
        /** @type {?} */
        var style = getComputedStyle(el);
        height += parseFloat(style.paddingTop) + parseFloat(style.paddingBottom);
        return height;
    };
    /**
     * @param {?} el
     * @param {?=} margin
     * @return {?}
     */
    DomUtils.getOuterHeight = /**
     * @param {?} el
     * @param {?=} margin
     * @return {?}
     */
    function (el, margin) {
        /** @type {?} */
        var height = el.offsetHeight;
        if (margin) {
            /** @type {?} */
            var style = getComputedStyle(el);
            height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);
        }
        return height;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DomUtils.getHeight = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        /** @type {?} */
        var height = el.offsetHeight;
        /** @type {?} */
        var style = getComputedStyle(el);
        height -= parseFloat(style.paddingTop) + parseFloat(style.paddingBottom) + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);
        return height;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DomUtils.getWidth = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        /** @type {?} */
        var width = el.offsetWidth;
        /** @type {?} */
        var style = getComputedStyle(el);
        width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight) + parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth);
        return width;
    };
    /**
     * @return {?}
     */
    DomUtils.getViewport = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var win = window;
        /** @type {?} */
        var d = document;
        /** @type {?} */
        var e = d.documentElement;
        /** @type {?} */
        var g = d.getElementsByTagName('body')[0];
        /** @type {?} */
        var w = win.innerWidth || e.clientWidth || g.clientWidth;
        /** @type {?} */
        var h = win.innerHeight || e.clientHeight || g.clientHeight;
        return { width: w, height: h };
    };
    /**
     * @param {?} el
     * @return {?}
     */
    DomUtils.getOffset = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        /** @type {?} */
        var rect = el.getBoundingClientRect();
        return {
            top: rect.top + document.body.scrollTop,
            left: rect.left + document.body.scrollLeft
        };
    };
    /**
     * @return {?}
     */
    DomUtils.getUserAgent = /**
     * @return {?}
     */
    function () {
        return navigator.userAgent;
    };
    /**
     * @return {?}
     */
    DomUtils.resolveUserAgent = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ua = navigator.userAgent.toLowerCase();
        /** @type {?} */
        var match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
            /(webkit)[ \/]([\w.]+)/.exec(ua) ||
            /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
            /(msie) ([\w.]+)/.exec(ua) ||
            ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
            [];
        return {
            browser: match[1] || '',
            version: match[2] || '0'
        };
    };
    /**
     * @param {?} tag
     * @param {?=} classNames
     * @return {?}
     */
    DomUtils.createElement = /**
     * @param {?} tag
     * @param {?=} classNames
     * @return {?}
     */
    function (tag, classNames) {
        /** @type {?} */
        var element = document.createElement(tag);
        if (classNames) {
            DomUtils.addClasses(element, classNames);
        }
        return element;
    };
    /**
     * @param {?} element
     * @return {?}
     */
    DomUtils.remove = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        element.parentElement.removeChild(element);
    };
    /**
     * @param {?} element
     * @return {?}
     */
    DomUtils.removeHost = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var nativeElement = element;
        /** @type {?} */
        var parentElement = nativeElement.parentElement;
        while (nativeElement.firstChild) {
            parentElement.insertBefore(nativeElement.firstChild, nativeElement);
        }
        parentElement.removeChild(nativeElement);
    };
    /**
     * @return {?}
     */
    DomUtils.prototype.isIE = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ua = window.navigator.userAgent;
        /** @type {?} */
        var msie = ua.indexOf('MSIE ');
        if (msie > 0) {
            // IE 10 or older => return version number
            return true;
        }
        /** @type {?} */
        var trident = ua.indexOf('Trident/');
        if (trident > 0) {
            // IE 11 => return version number
            /** @type {?} */
            var rv = ua.indexOf('rv:');
            return true;
        }
        /** @type {?} */
        var edge = ua.indexOf('Edge/');
        if (edge > 0) {
            // Edge (IE 12+) => return version number
            return true;
        }
        // other browser
        return false;
    };
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    DomUtils.prototype.appendChild = /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    function (element, target) {
        if (this.isElement(target)) {
            target.appendChild(element);
        }
        else if (target.el && target.el.nativeElement) {
            target.el.nativeElement.appendChild(element);
        }
        else {
            throw new Error('Cannot append ' + target + ' to ' + element);
        }
    };
    /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    DomUtils.prototype.removeChild = /**
     * @param {?} element
     * @param {?} target
     * @return {?}
     */
    function (element, target) {
        if (this.isElement(target)) {
            target.removeChild(element);
        }
        else if (target.el && target.el.nativeElement) {
            target.el.nativeElement.removeChild(element);
        }
        else {
            throw new Error('Cannot remove ' + element + ' from ' + target);
        }
    };
    /**
     * @param {?} element
     * @param {?} methodName
     * @param {?=} args
     * @return {?}
     */
    DomUtils.prototype.invokeElementMethod = /**
     * @param {?} element
     * @param {?} methodName
     * @param {?=} args
     * @return {?}
     */
    function (element, methodName, args) {
        ((/** @type {?} */ (element)))[methodName].apply(element, args);
    };
    /**
     * @return {?}
     */
    DomUtils.prototype.clearSelection = /**
     * @return {?}
     */
    function () {
        if (window.getSelection) {
            if (window.getSelection().empty) {
                window.getSelection().empty();
            }
            else if (window.getSelection().removeAllRanges && window.getSelection().rangeCount > 0 && window.getSelection().getRangeAt(0).getClientRects().length > 0) {
                window.getSelection().removeAllRanges();
            }
        }
        else if (document['selection'] && document['selection'].empty) {
            try {
                document['selection'].empty();
            }
            catch (error) {
                //ignore IE bug
            }
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    DomUtils.prototype.isElement = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return (typeof HTMLElement === 'object' ? obj instanceof HTMLElement :
            obj && typeof obj === 'object' && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === 'string');
    };
    /**
     * @return {?}
     */
    DomUtils.prototype.getBrowser = /**
     * @return {?}
     */
    function () {
        if (!this.browser) {
            /** @type {?} */
            var matched = DomUtils.resolveUserAgent();
            this.browser = {};
            if (matched.browser) {
                this.browser[matched.browser] = true;
                this.browser['version'] = matched.version;
            }
            if (this.browser['chrome']) {
                this.browser['webkit'] = true;
            }
            else if (this.browser['webkit']) {
                this.browser['safari'] = true;
            }
        }
        return this.browser;
    };
    /**
     * @return {?}
     */
    DomUtils.prototype.calculateScrollbarWidth = /**
     * @return {?}
     */
    function () {
        if (this.calculatedScrollbarWidth !== null) {
            return this.calculatedScrollbarWidth;
        }
        /** @type {?} */
        var scrollDiv = document.createElement('div');
        scrollDiv.className = 'ui-scrollbar-measure';
        document.body.appendChild(scrollDiv);
        /** @type {?} */
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        this.calculatedScrollbarWidth = scrollbarWidth;
        return scrollbarWidth;
    };
    DomUtils.zindex = 1000;
    return DomUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EncodeUtils = /** @class */ (function () {
    function EncodeUtils() {
    }
    // credits for decoder goes to https://github.com/atk
    // credits for decoder goes to https://github.com/atk
    /**
     * @param {?} str
     * @return {?}
     */
    EncodeUtils.base64decode = 
    // credits for decoder goes to https://github.com/atk
    /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        /** @type {?} */
        var output = '';
        str = String(str).replace(/=+$/, '');
        if (str.length % 4 === 1) {
            throw new Error('\'atob\' failed: The string to be decoded is not correctly encoded.');
        }
        for (
        // initialize result and counters
        var bc = 0, bs = void 0, buffer = void 0, idx = 0; 
        // get next character
        (buffer = str.charAt(idx++)); 
        // character found in table? initialize bit storage and add its ascii value;
        ~buffer &&
            ((bs = bc % 4 ? bs * 64 + buffer : buffer),
                // and if not first of each 4 characters,
                // convert the first 8 bits to one ascii character
                bc++ % 4)
            ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))
            : 0) {
            // try to find character in table (0-63, not found => -1)
            buffer = chars.indexOf(buffer);
        }
        return output;
    };
    /**
     * @param {?} str
     * @return {?}
     */
    EncodeUtils.base64DecodeUnicode = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var decoded = decodeURIComponent(Array.prototype.map
            .call(EncodeUtils.base64decode(str), function (c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        })
            .join(''));
        return decoded;
    };
    return EncodeUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JwtUtils = /** @class */ (function () {
    function JwtUtils() {
    }
    /**
     * @param {?} str
     * @return {?}
     */
    JwtUtils.urlBase64Decode = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var output = str.replace(/-/g, '+').replace(/_/g, '/');
        switch (output.length % 4) {
            case 0: {
                break;
            }
            case 2: {
                output += '==';
                break;
            }
            case 3: {
                output += '=';
                break;
            }
            default: {
                throw new Error('Illegal base64url string!');
            }
        }
        return EncodeUtils.base64decode(output);
    };
    /**
     * @param {?} token
     * @return {?}
     */
    JwtUtils.decodeToken = /**
     * @param {?} token
     * @return {?}
     */
    function (token) {
        if (token === null) {
            return null;
        }
        /** @type {?} */
        var parts = token.split('.');
        if (parts.length !== 3) {
            throw new Error('The inspected token doesn\'t appear to be a JWT. Check to make sure it has three parts and see https://jwt.io for more.');
        }
        /** @type {?} */
        var decoded = JwtUtils.urlBase64Decode(parts[1]);
        if (!decoded) {
            throw new Error('Cannot decode the token.');
        }
        return JSON.parse(decoded);
    };
    /**
     * @param {?} token
     * @return {?}
     */
    JwtUtils.getTokenExpirationDate = /**
     * @param {?} token
     * @return {?}
     */
    function (token) {
        /** @type {?} */
        var decoded;
        decoded = this.decodeToken(token);
        if (!decoded.hasOwnProperty('exp')) {
            return null;
        }
        /** @type {?} */
        var date = new Date(0);
        date.setUTCSeconds(decoded.exp);
        return date;
    };
    /**
     * @param {?} token
     * @param {?=} offsetSeconds
     * @return {?}
     */
    JwtUtils.isValid = /**
     * @param {?} token
     * @param {?=} offsetSeconds
     * @return {?}
     */
    function (token, offsetSeconds) {
        if (token === null || token === '')
            return false;
        /** @type {?} */
        var date = JwtUtils.getTokenExpirationDate(token);
        offsetSeconds = offsetSeconds || 0;
        if (date === null) {
            return false;
        }
        return date.valueOf() > (new Date().valueOf() + offsetSeconds * 1000);
    };
    return JwtUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IdUtils = /** @class */ (function () {
    function IdUtils() {
    }
    /**
     * @return {?}
     */
    IdUtils.getRandom = /**
     * @return {?}
     */
    function () {
        return Math.floor(Math.random() * 10000000000) + '';
    };
    /**
     * @return {?}
     */
    IdUtils.getUUID = /**
     * @return {?}
     */
    function () {
        if (typeof (window) !== 'undefined' &&
            typeof (window.crypto) !== 'undefined' &&
            typeof (window.crypto.getRandomValues) !== 'undefined') {
            /** @type {?} */
            var buf = new Uint16Array(8);
            window.crypto.getRandomValues(buf);
            return (IdUtils._pad4(buf[0]) + IdUtils._pad4(buf[1])
                + '-' + IdUtils._pad4(buf[2])
                + '-' + IdUtils._pad4(buf[3])
                + '-' + IdUtils._pad4(buf[4])
                + '-' + IdUtils._pad4(buf[5]) + IdUtils._pad4(buf[6]) + IdUtils._pad4(buf[7]));
        }
        else {
            return IdUtils._random4() + IdUtils._random4()
                + '-' + IdUtils._random4()
                + '-' + IdUtils._random4()
                + '-' + IdUtils._random4()
                + '-' + IdUtils._random4() + IdUtils._random4() + IdUtils._random4();
        }
    };
    /**
     * @private
     * @param {?} num
     * @return {?}
     */
    IdUtils._pad4 = /**
     * @private
     * @param {?} num
     * @return {?}
     */
    function (num) {
        /** @type {?} */
        var ret = num.toString(16);
        while (ret.length < 4) {
            ret = '0' + ret;
        }
        return ret;
    };
    /**
     * @private
     * @return {?}
     */
    IdUtils._random4 = /**
     * @private
     * @return {?}
     */
    function () {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    };
    return IdUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PinyinUtil = /** @class */ (function () {
    function PinyinUtil() {
    }
    /**
     * 获取汉字的拼音首字母
     * @param str 汉字字符串，如果遇到非汉字则原样返回
     */
    /**
     * 获取汉字的拼音首字母
     * @param {?} str 汉字字符串，如果遇到非汉字则原样返回
     * @return {?}
     */
    PinyinUtil.getFirstLetter = /**
     * 获取汉字的拼音首字母
     * @param {?} str 汉字字符串，如果遇到非汉字则原样返回
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var pys = pinyinlite(str);
        /** @type {?} */
        var fpy = pys.map(function (py) { return py[0] && py[0].substr(0, 1); });
        return fpy.join('').toLowerCase();
    };
    /**
     * @param {?} str
     * @return {?}
     */
    PinyinUtil.getPinYin = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var pys = pinyinlite(str);
        /** @type {?} */
        var fpy = pys.map(function (py) { return py[0] ? py[0] : ''; });
        return fpy.join('').toLowerCase();
    };
    return PinyinUtil;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ImageUtil = /** @class */ (function () {
    function ImageUtil() {
    }
    /**
     * @param {?} file
     * @return {?}
     */
    ImageUtil.getBase64 = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        if (typeof file === 'string' && file.startsWith('data:')) {
            return of(file);
        }
        else {
            /** @type {?} */
            var reader = new FileReader();
            /** @type {?} */
            var fileContent$ = fromEvent(reader, 'load')
                .pipe(map$1(function (e) {
                console.log(e.target['result']);
                return e.target['result'];
            }));
            // (<File>file).type
            reader.readAsDataURL((/** @type {?} */ (file)));
            return fileContent$;
        }
    };
    /**
     * @param {?} file
     * @return {?}
     */
    ImageUtil.upload = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
    };
    return ImageUtil;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PagerUtil = /** @class */ (function () {
    function PagerUtil() {
    }
    /**
     * @param {?} totalItems
     * @param {?=} currentPage
     * @param {?=} pageSize
     * @return {?}
     */
    PagerUtil.getPagerModel = /**
     * @param {?} totalItems
     * @param {?=} currentPage
     * @param {?=} pageSize
     * @return {?}
     */
    function (totalItems, currentPage, pageSize) {
        if (currentPage === void 0) { currentPage = 1; }
        if (pageSize === void 0) { pageSize = 10; }
        /** @type {?} */
        var totalPages = Math.ceil(totalItems / pageSize);
        /** @type {?} */
        var startPage;
        /** @type {?} */
        var endPage;
        if (totalPages <= 10) {
            startPage = 1;
            endPage = totalPages;
        }
        else {
            if (currentPage <= 6) {
                startPage = 1;
                endPage = 10;
            }
            else if (currentPage + 4 >= totalPages) {
                startPage = totalPages - 9;
                endPage = totalPages;
            }
            else {
                startPage = currentPage - 5;
                endPage = currentPage + 4;
            }
        }
        /** @type {?} */
        var startIndex = (currentPage - 1) * pageSize;
        /** @type {?} */
        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);
        /** @type {?} */
        var pages = range(startPage, endPage + 1);
        return {
            totalItems: totalItems,
            currentPage: currentPage,
            pageSize: pageSize,
            totalPages: totalPages,
            startPage: startPage,
            endPage: endPage,
            startIndex: startIndex,
            endIndex: endIndex,
            pages: pages
        };
    };
    return PagerUtil;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TreeUtils = /** @class */ (function () {
    function TreeUtils() {
    }
    /**
     * @param {?} dataItems
     * @param {?} keyMap
     * @param {?=} root
     * @param {?=} lazy
     * @return {?}
     */
    TreeUtils.transNodes = /**
     * @param {?} dataItems
     * @param {?} keyMap
     * @param {?=} root
     * @param {?=} lazy
     * @return {?}
     */
    function (dataItems, keyMap, root, lazy) {
        /** @type {?} */
        var treeKeys = Object.keys(keyMap.node).map(function (key) { return keyMap.node[key]; });
        /** @type {?} */
        var nodes;
        /** @type {?} */
        var rootNode;
        if (keyMap.src.levelIdLength) {
            nodes = CommonsUtils.orderBy(dataItems, [keyMap.src.orderKey || keyMap.src.idKey], ['asc']);
            nodes = nodes.map(function (item) {
                if (item[keyMap.src.idKey]) {
                    /** @type {?} */
                    var parentId = item[keyMap.src.idKey].substr(0, item[keyMap.src.idKey].length - keyMap.src.levelIdLength);
                    if (parentId && parentId !== item[keyMap.src.idKey]) {
                        item[keyMap.src.parentKey] = parentId;
                    }
                    if (!item[keyMap.node.dataKey]) {
                        item[keyMap.node.dataKey] = __assign({}, item);
                    }
                    item[keyMap.node.idKey] = item[keyMap.src.idKey];
                    item = CommonsUtils.pick(item, treeKeys);
                    return item;
                }
            });
        }
        else if (keyMap.src.parentKey) {
            nodes = CommonsUtils.orderBy(dataItems, [keyMap.src.parentKey, keyMap.src.idKey], ['asc']);
            nodes = nodes.map(function (item) {
                if (!item[keyMap.node.dataKey]) {
                    item[keyMap.node.dataKey] = __assign({}, item);
                }
                item[keyMap.node.idKey] = item[keyMap.src.idKey];
                item = CommonsUtils.pick(item, treeKeys);
                return item;
            });
        }
        nodes.forEach(function (item) {
            item[keyMap.node.dataKey] = item[keyMap.node.dataKey] || __assign({}, item);
            /** @type {?} */
            var children = nodes.filter(function (item2) {
                return item2 && item2[keyMap.src.parentKey] && item2[keyMap.src.parentKey] === item['data'][keyMap.src.idKey];
            });
            if (children.length > 0) {
                item[keyMap.node.childrenKey] = children;
            }
            item[keyMap.node.labelKey] = DataItemUtils.getItemLabel(item, keyMap.src.labelKey);
            if (item[keyMap.src.parentKey]) {
                item[keyMap.node.parentKey] = item[keyMap.src.parentKey];
            }
            if (lazy) {
                item[keyMap.node.leafKey] = false;
            }
            if (root && CommonsUtils.isString(root) && root === item[keyMap.src.idKey]) {
                rootNode = [item];
            }
        });
        if (root && CommonsUtils.isJson(root)) {
            root['children'] = nodes;
            return [root];
        }
        else {
            return nodes = rootNode ? rootNode : nodes.filter(function (node) { return !node[keyMap.node.parentKey]; });
        }
    };
    /**
     * @param {?} treeNodes
     * @param {?} value
     * @param {?} props
     * @return {?}
     */
    TreeUtils.findNode = /**
     * @param {?} treeNodes
     * @param {?} value
     * @param {?} props
     * @return {?}
     */
    function (treeNodes, value, props) {
        /** @type {?} */
        var found;
        if (treeNodes) {
            for (var i = 0; i < treeNodes.length; i++) {
                if (value[props.dataItemProps.idKey] === treeNodes[i][DEFAULT_TREE_NODE_KEYS.dataKey][props.dataItemProps.idKey]) {
                    found = treeNodes[i];
                    break;
                }
                if (treeNodes[i].hasOwnProperty(DEFAULT_TREE_NODE_KEYS.childrenKey)) {
                    /** @type {?} */
                    var children = treeNodes[i][DEFAULT_TREE_NODE_KEYS.childrenKey];
                    found = TreeUtils.findNode(children, value, props);
                    if (found) {
                        break;
                    }
                }
            }
        }
        return found;
    };
    /**
     * @param {?} nodes
     * @param {?} predicate
     * @return {?}
     */
    TreeUtils.filter = /**
     * @param {?} nodes
     * @param {?} predicate
     * @return {?}
     */
    function (nodes, predicate) {
        /** @type {?} */
        var result = !nodes ? null : nodes.reduce(function (list, node) {
            /** @type {?} */
            var clone = null;
            if (predicate(node)) {
                // if the object matches the filter, clone it as it is
                clone = CommonsUtils.copy(__assign({}, node, { matched: true }));
            }
            else if (node.children != null) {
                // if the object has childrens, filter the list of children
                /** @type {?} */
                var children = TreeUtils.filter(node.children, predicate);
                if (children.length > 0) {
                    // if any of the children matches, clone the parent object, overwrite
                    // the children list with the filtered list
                    clone = Object.assign({}, node, { children: children });
                }
            }
            if (clone) {
                list.push(clone);
            }
            return list;
        }, []);
        return result;
    };
    /**
     * @param {?} node
     * @param {?} isExpand
     * @param {?=} props
     * @param {?=} toExpandLevel
     * @param {?=} currentLevel
     * @param {?=} id
     * @return {?}
     */
    TreeUtils.expandNode = /**
     * @param {?} node
     * @param {?} isExpand
     * @param {?=} props
     * @param {?=} toExpandLevel
     * @param {?=} currentLevel
     * @param {?=} id
     * @return {?}
     */
    function (node, isExpand, props, toExpandLevel, currentLevel, id) {
        if (props === void 0) { props = {}; }
        if (toExpandLevel === void 0) { toExpandLevel = 100; }
        if (currentLevel === void 0) { currentLevel = 1; }
        if (!node) {
            return;
        }
        if (toExpandLevel >= currentLevel) {
            if (id && (currentLevel === toExpandLevel)) {
                node.expanded = node['id'] === id;
            }
            else if (!id || (id && currentLevel < toExpandLevel)) {
                node.expanded = isExpand;
            }
            TreeUtils.initNode(node, props);
            currentLevel++;
            if (node.children) {
                node.children.forEach(function (childNode) {
                    TreeUtils.initNode(childNode, props);
                    if (toExpandLevel >= currentLevel) {
                        TreeUtils.expandNode(childNode, isExpand, props, toExpandLevel, currentLevel, id);
                    }
                });
            }
        }
    };
    /**
     * @param {?} node
     * @param {?=} props
     * @return {?}
     */
    TreeUtils.initNode = /**
     * @param {?} node
     * @param {?=} props
     * @return {?}
     */
    function (node, props) {
        if (props === void 0) { props = {}; }
        if (!node._inited) {
            ['expandedIcon', 'collapsedIcon'].forEach(function (iconType) { return TreeUtils.initIcon(node, iconType, props); });
            if (props['selectable']) {
                node.selectable = CommonsUtils.getValue(props['selectable'], node);
            }
            node = __assign({}, node, { '_inited': true });
        }
    };
    /**
     * @param {?} node
     * @param {?} iconType
     * @param {?} props
     * @return {?}
     */
    TreeUtils.initIcon = /**
     * @param {?} node
     * @param {?} iconType
     * @param {?} props
     * @return {?}
     */
    function (node, iconType, props) {
        if (!props) {
            node[iconType] = TreeUtils.DEFAULT_NODE_PROPS[iconType];
        }
        else if (props[iconType] && props[iconType].method) {
            node[iconType] = ((/** @type {?} */ (props[iconType].method)))(node);
        }
        else {
            node[iconType] = props[iconType] || TreeUtils.DEFAULT_NODE_PROPS[iconType];
        }
    };
    /**
     * @param {?} siblingId
     * @return {?}
     */
    TreeUtils.getSelectedTreeState = /**
     * @param {?} siblingId
     * @return {?}
     */
    function (siblingId) {
        if (!siblingId) {
            return null;
        }
        /** @type {?} */
        var sibling = siblingId && StatesUtils.getValue(siblingId);
        if (sibling && sibling.component) {
            /** @type {?} */
            var treeId = CommonsUtils.get(sibling.component, '$props.$ext.$container.tree.$id');
            /** @type {?} */
            var treeState = StatesUtils.getValue(treeId);
            return treeState;
        }
    };
    /**
     * @param {?} siblingId
     * @return {?}
     */
    TreeUtils.getSelectedNode = /**
     * @param {?} siblingId
     * @return {?}
     */
    function (siblingId) {
        /** @type {?} */
        var treeState = TreeUtils.getSelectedTreeState(siblingId);
        return treeState && treeState['selectedNode'];
    };
    /**
     * @param {?} siblingId
     * @return {?}
     */
    TreeUtils.getSelectedNodeValue = /**
     * @param {?} siblingId
     * @return {?}
     */
    function (siblingId) {
        /** @type {?} */
        var treeState = TreeUtils.getSelectedTreeState(siblingId);
        return treeState && treeState['selectedNodeValue'];
    };
    TreeUtils.DEFAULT_NODE_PROPS = {
        lazy: false,
        autoExpandLevel: 0,
        expandedIcon: 'fa fa-folder-open',
        collapsedIcon: 'fa fa-folder',
        icon: 'fa fa-leaf'
    };
    return TreeUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AnnounceUtils = /** @class */ (function () {
    function AnnounceUtils() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    AnnounceUtils.info = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var notify = CommonsUtils.getObjWhenStr(options, 'message');
        StatesUtils.create(StateNames.notify, __assign({}, notify, { type: NotifyType.ANNOUNCE }));
    };
    /**
     * @param {?} options
     * @return {?}
     */
    AnnounceUtils.error = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var notify = CommonsUtils.getObjWhenStr(options, 'message');
        StatesUtils.create(StateNames.notify, (/** @type {?} */ (__assign({}, notify, { level: NotifyLevel.ERROR, type: NotifyType.ANNOUNCE }))));
    };
    /**
     * @param {?} options
     * @return {?}
     */
    AnnounceUtils.success = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var notify = CommonsUtils.getObjWhenStr(options, 'message');
        StatesUtils.create(StateNames.notify, (/** @type {?} */ (__assign({}, notify, { level: NotifyLevel.SUCCESS, type: NotifyType.ANNOUNCE }))));
    };
    /**
     * @param {?} options
     * @return {?}
     */
    AnnounceUtils.warn = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var notify = CommonsUtils.getObjWhenStr(options, 'message');
        StatesUtils.create(StateNames.notify, (/** @type {?} */ (__assign({}, notify, { level: NotifyLevel.WARN, type: NotifyType.ANNOUNCE }))));
    };
    return AnnounceUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NotifyUtils = /** @class */ (function () {
    function NotifyUtils() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    NotifyUtils.info = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var notify = CommonsUtils.getObjWhenStr(options, 'message');
        StatesUtils.create(StateNames.notify, notify);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    NotifyUtils.error = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var notify = CommonsUtils.getObjWhenStr(options, 'message');
        StatesUtils.create(StateNames.notify, (/** @type {?} */ (__assign({}, notify, { level: NotifyLevel.ERROR }))));
    };
    /**
     * @param {?} options
     * @return {?}
     */
    NotifyUtils.success = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var notify = CommonsUtils.getObjWhenStr(options, 'message');
        StatesUtils.create(StateNames.notify, (/** @type {?} */ (__assign({}, notify, { level: NotifyLevel.SUCCESS }))));
    };
    /**
     * @param {?} options
     * @return {?}
     */
    NotifyUtils.warn = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var notify = CommonsUtils.getObjWhenStr(options, 'message');
        StatesUtils.create(StateNames.notify, (/** @type {?} */ (__assign({}, notify, { level: NotifyLevel.WARN }))));
    };
    return NotifyUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RxUtils = /** @class */ (function () {
    function RxUtils() {
    }
    /**
     * @template T
     * @param {?} count
     * @param {?} wait
     * @return {?}
     */
    RxUtils.retry = /**
     * @template T
     * @param {?} count
     * @param {?} wait
     * @return {?}
     */
    function (count, wait) {
        /** @type {?} */
        var tap = retryWhen(function (errors) { return errors.pipe(scan(function (acc, error) {
            if (acc >= count || -1) {
                throw error;
            }
            return acc + 1;
        }, 0), delay(wait)); });
        return tap;
    };
    return RxUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UrlUtils = /** @class */ (function () {
    function UrlUtils() {
    }
    /**
     * @return {?}
     */
    UrlUtils.getQueryParameters = /**
     * @return {?}
     */
    function () {
        return UrlUtils.getQueryParametersUsingParameters(document.location.search);
    };
    /**
     * @param {?} search
     * @return {?}
     */
    UrlUtils.getQueryParametersUsingParameters = /**
     * @param {?} search
     * @return {?}
     */
    function (search) {
        /** @type {?} */
        var r = search.replace(/(^\?)/, '').split('&').map(function (n) { return n = n.split('='), this[n[0]] = n[1], this; }.bind({}))[0];
        return r;
    };
    /**
     * @return {?}
     */
    UrlUtils.getInitialUrlParameters = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var questionMarkIndex = UrlUtils.initialUrl.indexOf('?');
        if (questionMarkIndex >= 0) {
            return UrlUtils.initialUrl.substr(questionMarkIndex, UrlUtils.initialUrl.length - questionMarkIndex);
        }
        return '';
    };
    /**
     * @return {?}
     */
    UrlUtils.getReturnUrl = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var queryStringObj = UrlUtils.getQueryParametersUsingParameters(UrlUtils.getInitialUrlParameters());
        if (queryStringObj.returnUrl) {
            return decodeURIComponent(queryStringObj.returnUrl);
        }
        return null;
    };
    /**
     * @return {?}
     */
    UrlUtils.getSingleSignIn = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var queryStringObj = UrlUtils.getQueryParametersUsingParameters(UrlUtils.getInitialUrlParameters());
        if (queryStringObj.ss) {
            return queryStringObj.ss;
        }
        return false;
    };
    /**
     * The URL requested, before initial routing.
     */
    UrlUtils.initialUrl = location.href;
    return UrlUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TokenizerUtils = /** @class */ (function () {
    function TokenizerUtils() {
    }
    /**
     * @param {?} str
     * @param {?} format
     * @return {?}
     */
    TokenizerUtils.extract = /**
     * @param {?} str
     * @param {?} format
     * @return {?}
     */
    function (str, format) {
        if (str === format) {
            return new ExtractionResult(true);
        }
        /** @type {?} */
        var formatTokens = new FormatStringTokenizer().Tokenize(format);
        if (!formatTokens) {
            return new ExtractionResult(str === '');
        }
        /** @type {?} */
        var result = new ExtractionResult(true);
        for (var i = 0; i < formatTokens.length; i++) {
            /** @type {?} */
            var currentToken = formatTokens[i];
            /** @type {?} */
            var previousToken = i > 0 ? formatTokens[i - 1] : null;
            if (currentToken.Type === FormatStringTokenType.ConstantText) {
                if (i === 0) {
                    if (str.indexOf(currentToken.Text) !== 0) {
                        result.isMatch = false;
                        return result;
                    }
                    str = str.substr(currentToken.Text.length, str.length - currentToken.Text.length);
                }
                else {
                    /** @type {?} */
                    var matchIndex = str.indexOf(currentToken.Text);
                    if (matchIndex < 0) {
                        result.isMatch = false;
                        return result;
                    }
                    result.matches.push({ name: previousToken.Text, value: str.substr(0, matchIndex) });
                    str = str.substring(0, matchIndex + currentToken.Text.length);
                }
            }
        }
        /** @type {?} */
        var lastToken = formatTokens[formatTokens.length - 1];
        if (lastToken.Type === FormatStringTokenType.DynamicValue) {
            result.matches.push({ name: lastToken.Text, value: str });
        }
        return result;
    };
    /**
     * @param {?} str
     * @param {?} format
     * @return {?}
     */
    TokenizerUtils.matches = /**
     * @param {?} str
     * @param {?} format
     * @return {?}
     */
    function (str, format) {
        /** @type {?} */
        var result = TokenizerUtils.extract(str, format);
        if (!result.isMatch) {
            return [];
        }
        /** @type {?} */
        var values = [];
        for (var i = 0; i < result.matches.length; i++) {
            values.push(result.matches[i].value);
        }
        return values;
    };
    return TokenizerUtils;
}());
var ExtractionResult = /** @class */ (function () {
    function ExtractionResult(isMatch) {
        this.isMatch = isMatch;
        this.matches = [];
    }
    return ExtractionResult;
}());
/** @enum {number} */
var FormatStringTokenType = {
    ConstantText: 0,
    DynamicValue: 1,
};
FormatStringTokenType[FormatStringTokenType.ConstantText] = 'ConstantText';
FormatStringTokenType[FormatStringTokenType.DynamicValue] = 'DynamicValue';
var FormatStringToken = /** @class */ (function () {
    function FormatStringToken(text, type) {
        this.Text = text;
        this.Type = type;
    }
    return FormatStringToken;
}());
var FormatStringTokenizer = /** @class */ (function () {
    function FormatStringTokenizer() {
    }
    /**
     * @param {?} format
     * @param {?=} includeBracketsForDynamicValues
     * @return {?}
     */
    FormatStringTokenizer.prototype.Tokenize = /**
     * @param {?} format
     * @param {?=} includeBracketsForDynamicValues
     * @return {?}
     */
    function (format, includeBracketsForDynamicValues) {
        if (includeBracketsForDynamicValues === void 0) { includeBracketsForDynamicValues = false; }
        /** @type {?} */
        var tokens = [];
        /** @type {?} */
        var currentText = '';
        /** @type {?} */
        var inDynamicValue = false;
        for (var i = 0; i < format.length; i++) {
            /** @type {?} */
            var c = format[i];
            switch (c) {
                case '{':
                    if (inDynamicValue) {
                        throw new Error('Incorrect syntax at char ' + i + '! format string can not contain agg dynamic value expression!');
                    }
                    inDynamicValue = true;
                    if (currentText.length > 0) {
                        tokens.push(new FormatStringToken(currentText, FormatStringTokenType.ConstantText));
                        currentText = '';
                    }
                    break;
                case '}':
                    if (!inDynamicValue) {
                        throw new Error(('Incorrect syntax at char ' + i + '! These is no opening brackets for the closing bracket }.'));
                    }
                    inDynamicValue = false;
                    if (currentText.length <= 0) {
                        throw new Error(('Incorrect syntax at char ' + i + '! Brackets does not containt any chars.'));
                    }
                    /** @type {?} */
                    var dynamicValue = currentText;
                    if (includeBracketsForDynamicValues) {
                        dynamicValue = '{' + dynamicValue + '}';
                    }
                    tokens.push(new FormatStringToken(dynamicValue, FormatStringTokenType.DynamicValue));
                    currentText = '';
                    break;
                default:
                    currentText += c;
                    break;
            }
        }
        if (inDynamicValue) {
            throw new Error(('There is no closing } char for an opened { char.'));
        }
        if (currentText.length > 0) {
            tokens.push(new FormatStringToken(currentText, FormatStringTokenType.ConstantText));
        }
        return tokens;
    };
    return FormatStringTokenizer;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} _num
 * @return {?}
 */
function numToText(_num) {
    /** @type {?} */
    var units = ['', '万', '亿'];
    /** @type {?} */
    var _units = ['千', '百', '十', ''];
    /** @type {?} */
    var zero2Nine = ['零', '一', '二', '三', '四', '五', '六', '七', '八', '九'];
    /** @type {?} */
    var num = _num.toString().split('').reverse().join('');
    /** @type {?} */
    var unitsLen = units.length;
    /** @type {?} */
    var numLen = num.length;
    if (numLen > unitsLen * 4) {
        return '请不要传入过大的数字';
    }
    /** @type {?} */
    var str = '';
    for (var i = 0; i < numLen / 4; i++) {
        /** @type {?} */
        var __num = num.slice(i * 4, i * 4 + 4).split('').reverse().join('');
        if (__num === '0000') {
            continue;
        }
        /** @type {?} */
        var __str = '';
        for (var j = 0; j < __num.length; j++) {
            /** @type {?} */
            var currentNum = zero2Nine[parseInt(__num[j], 10)];
            /** @type {?} */
            var currentUnit = _units[j + 4 - __num.length];
            if (currentNum === '零' && currentUnit === '') {
                continue;
            }
            else {
                __str += currentNum + currentUnit;
            }
        }
        str = __str + units[i] + str;
    }
    return str.replace(/零[\D]/g, '@').replace(/[@]+/g, '@').replace(/@$/, '').replace(/@([万亿]+)/, '$1').replace(/@/g, '零');
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EsUtils = /** @class */ (function () {
    function EsUtils() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    EsUtils.parseEsbObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (!obj) {
            return obj;
        }
        if (CommonsUtils.isArray(obj)) {
            return obj.forEach(function (o) { return EsUtils.parseEsbObject(o); });
        }
        else {
            if (CommonsUtils.isFunction(obj['toJSON'])) {
                return obj['toJSON']();
            }
            else {
                return obj;
            }
        }
    };
    /**
     * @param {?} key
     * @param {?} aggMethods
     * @return {?}
     */
    EsUtils.getFieldAggs = /**
     * @param {?} key
     * @param {?} aggMethods
     * @return {?}
     */
    function (key, aggMethods) {
        if (aggMethods) {
            /** @type {?} */
            var aggs_1 = {};
            aggMethods.forEach(function (method) {
                switch (method) {
                    case AggMethodsProps.avg.key:
                        aggs_1 = CommonsUtils.merge(aggs_1, avgAggregation(key + "-" + method, key).toJSON());
                        break;
                    case AggMethodsProps.distinct.key:
                        aggs_1 = CommonsUtils.merge(aggs_1, cardinalityAggregation(key + "-" + method, key).toJSON());
                        break;
                    case AggMethodsProps.max.key:
                        aggs_1 = CommonsUtils.merge(aggs_1, maxAggregation(key + "-" + method, key).toJSON());
                        break;
                    case AggMethodsProps.min.key:
                        aggs_1 = CommonsUtils.merge(aggs_1, minAggregation(key + "-" + method, key).toJSON());
                        break;
                    case AggMethodsProps.sum.key:
                        aggs_1 = CommonsUtils.merge(aggs_1, sumAggregation(key + "-" + method, key).toJSON());
                        break;
                    case AggMethodsProps.count.key:
                        aggs_1 = CommonsUtils.merge(aggs_1, valueCountAggregation(key + "-" + method, key).toJSON());
                        break;
                    default:
                        aggs_1 = CommonsUtils.merge(aggs_1, valueCountAggregation(key + "-" + method, key).toJSON());
                }
            });
            return aggs_1;
        }
        else {
            return undefined;
        }
    };
    /**
     * @param {?} query
     * @return {?}
     */
    EsUtils.resolveQuery = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        /** @type {?} */
        var must = [];
        /** @type {?} */
        var should = [];
        /** @type {?} */
        var not = [];
        if (query) {
            if (CommonsUtils.isArray(query)) {
                must = must.concat(query);
            }
            else if (CommonsUtils.isJson(query)) {
                if (query.hasOwnProperty('$and')) {
                    /** @type {?} */
                    var and = query['$and'];
                    if (CommonsUtils.isArray(and)) {
                        must = must.concat(and);
                    }
                    else {
                        must.push(and);
                    }
                }
                if (query.hasOwnProperty('$or')) {
                    /** @type {?} */
                    var or = query['$or'];
                    if (CommonsUtils.isArray(or)) {
                        should = should.concat(or);
                    }
                    else {
                        should.push(or);
                    }
                }
                if (query.hasOwnProperty('$not')) {
                    /** @type {?} */
                    var but = query['$not'];
                    if (CommonsUtils.isArray(but)) {
                        not = not.concat(but);
                    }
                    else {
                        not.push(but);
                    }
                }
            }
            else {
                must.push(query);
            }
        }
        return {
            must: CommonsUtils.compact(must),
            should: CommonsUtils.compact(should),
            not: CommonsUtils.compact(not)
        };
    };
    /**
     * @param {?} options
     * @return {?}
     */
    EsUtils.resolveSearchFields = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var searchFields = CommonsUtils.getArrayValue(options.searchFields);
        if (CommonsUtils.isEmpty(searchFields)) {
            DialogUtils.error('数据错误', '没有定义查询字段');
            throw new Error('not found search fields');
        }
        /** @type {?} */
        var qs = [];
        searchFields.filter(function (field) { return !!field; }).forEach(function (field) {
            if (options.withPy) {
                if (options.withWildcard) {
                    qs.push(wildcardQuery(field + ".py", "*" + options.queryValue + "*"));
                }
                else {
                    qs.push(prefixQuery(field + ".py", options.queryValue));
                }
            }
            if (options.withZh) {
                qs.push(wildcardQuery(field + ".zh", "*" + options.queryValue + "*"));
            }
            if (options.withTerm) {
                qs.push(termQuery(field, options.queryValue));
            }
            if (options.withPrefix) {
                qs.push(prefixQuery(field, options.queryValue));
            }
            if (options.withWildcard) {
                qs.push(wildcardQuery(field, "*" + options.queryValue + "*"));
            }
            if (qs.length === 0) {
                qs.push(matchQuery(field, options.queryValue));
            }
        });
        return qs;
    };
    /**
     * @param {?} options
     * @return {?}
     */
    EsUtils.buildQueryBody = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var query = requestBodySearch();
        /** @type {?} */
        var boolQuery$$1 = boolQuery();
        /** @type {?} */
        var queries = EsUtils.resolveQuery(options.query);
        if (options.queryValue) {
            /** @type {?} */
            var qs = EsUtils.resolveSearchFields(options);
            if (qs.length === 1) {
                queries.must.push(qs[0]);
            }
            else {
                queries.should = queries.should.concat(qs);
            }
        }
        if (queries.must.length > 0) {
            boolQuery$$1.must(queries.must);
        }
        if (queries.should.length > 0) {
            boolQuery$$1.should(queries.should).minimumShouldMatch(1);
        }
        if (queries.not.length > 0) {
            boolQuery$$1.mustNot(queries.not);
        }
        query.query(boolQuery$$1);
        if (!CommonsUtils.isEmpty(options.filter)) {
            boolQuery$$1.filter(options.filter);
        }
        if (!(options.returnFields && options.returnFields.length === 0)) {
            /** @type {?} */
            var returnFields = options.returnFields || options.searchFields;
            query.source(returnFields);
        }
        if (options.sort) {
            /** @type {?} */
            var sorts_1 = EsUtils.resolveSort(options.sort);
            /** @type {?} */
            var esSorts_1 = [];
            Object.keys(sorts_1).forEach(function (key) {
                esSorts_1.push(sort(key, sorts_1[key] || Order.ASC).unmappedType('string'));
            });
            query.sorts(esSorts_1);
        }
        if (options.aggProps) {
            /** @type {?} */
            var aggs = EsUtils.parseAggProps(options.aggProps);
            if (aggs.length > 0) {
                ((/** @type {?} */ (query))).aggs(aggs);
                ((/** @type {?} */ (query))).size(options.size || 0);
            }
        }
        if (options.from) {
            query.from(options.from);
        }
        if (options.size) {
            query.size(options.size);
        }
        return query;
    };
    /**
     * @param {?} aggProps
     * @return {?}
     */
    EsUtils.parseAggProps = /**
     * @param {?} aggProps
     * @return {?}
     */
    function (aggProps) {
        /** @type {?} */
        var props = CommonsUtils.getArrayValue(aggProps);
        /** @type {?} */
        var aggs = [];
        /** @type {?} */
        var agg;
        props.forEach(function (item) {
            /** @type {?} */
            var aggProp = item;
            if (CommonsUtils.isString(aggProp)) {
                aggProp = { field: item };
            }
            /** @type {?} */
            var aggName = aggProp.name || aggProp.field + "-" + (aggProp.method || 'terms');
            if (aggProp.aggs) {
                aggProp.method = AggMethods.CUSTOMER;
            }
            switch (aggProp.method) {
                case AggMethods.AVG:
                    agg = avgAggregation(aggName, aggProp.field).missing('0');
                    break;
                case AggMethods.MIN:
                    agg = minAggregation(aggName, aggProp.field);
                    break;
                case AggMethods.MAX:
                    agg = maxAggregation(aggName, aggProp.field);
                    break;
                case AggMethods.SUM:
                    agg = sumAggregation(aggName, aggProp.field).missing('0');
                    break;
                case AggMethods.DISTINCT:
                    agg = cardinalityAggregation(aggName, aggProp.field);
                    break;
                case AggMethods.HISTOGRAM:
                    agg = histogramAggregation(aggName, aggProp.field);
                    if (aggProp.format) {
                        ((/** @type {?} */ (agg))).interval(aggProp.interval);
                    }
                    ((/** @type {?} */ (agg))).minDocCount(aggProp.minCount || 1);
                    if (aggProp.format) {
                        ((/** @type {?} */ (agg))).format(aggProp.format);
                    }
                    if (aggProp.missing) {
                        ((/** @type {?} */ (agg))).missing(aggProp.missing);
                    }
                    break;
                case AggMethods.DATE_HISTOGRAM:
                    agg = dateHistogramAggregation(aggName, aggProp.field);
                    if (aggProp.interval) {
                        ((/** @type {?} */ (agg))).interval(aggProp.interval);
                    }
                    /** @type {?} */
                    var interval = aggProp.interval || AggInterval.DAY;
                    /** @type {?} */
                    var intervalProp = AggIntervalProps[interval];
                    ((/** @type {?} */ (agg))).interval(interval);
                    ((/** @type {?} */ (agg))).minDocCount(aggProp.minCount || 1);
                    /** @type {?} */
                    var format = aggProp.format || (intervalProp && intervalProp.format);
                    if (format) {
                        ((/** @type {?} */ (agg))).format(format);
                    }
                    if (aggProp.missing) {
                        ((/** @type {?} */ (agg))).missing(aggProp.missing);
                    }
                    break;
                case AggMethods.CUSTOMER:
                    agg = CommonsUtils.getValue(aggProp.aggs, aggProp);
                    break;
                case AggMethods.COUNT:
                    agg = valueCountAggregation(aggName, aggProp.field);
                    break;
                default:
                    agg = termsAggregation(aggName, aggProp.field).size(aggProp.size || 10);
                    break;
            }
            aggs.push(agg);
        });
        return aggs;
    };
    /**
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    EsUtils.resolveRequestBody = /**
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    function (body, options) {
        if (!body || typeof body === 'string') {
            return body || {};
        }
        if (body instanceof RequestBodySearch) {
            return CommonsUtils.merge({}, body.toJSON() || {}, options.payload || {}, options.body || options.params || {});
        }
        /** @type {?} */
        var _body = __assign({}, body);
        if (!CommonsUtils.isEmpty(_body.sort)) {
            /** @type {?} */
            var sorts_2 = EsUtils.resolveSort(_body.sort);
            /** @type {?} */
            var esSorts_2 = [];
            Object.keys(sorts_2).forEach(function (key) {
                var _a;
                esSorts_2.push((_a = {}, _a[key] = { order: sorts_2[key] || Order.ASC, 'unmapped_type': 'string' }, _a));
            });
            _body.sort = esSorts_2;
        }
        if (_body.size && _body.page) {
            _body.from = _body.page * _body.size;
        }
        if (_body.from && _body.to) {
            _body.size = _body.to - _body.from;
        }
        delete _body.to;
        delete _body.page;
        if (!CommonsUtils.isEmpty(_body.query) ||
            !CommonsUtils.isEmpty(_body.filter)) {
            /** @type {?} */
            var esQuery_1 = {};
            if (!CommonsUtils.isEmpty(_body.query)) {
                if (CommonsUtils.isArray(_body.query)) {
                    _body.query['$and'] = _body.query;
                }
                else {
                    _body.query = EsUtils.parseEsbObject(_body.query);
                }
                /** @type {?} */
                var queryBody_1 = _body.query;
                if (Object.keys(queryBody_1).length > 0) {
                    Object.keys(queryBody_1).forEach(function (key) {
                        var _a, _b;
                        if (key === '$and') {
                            /** @type {?} */
                            var must = EsUtils.queryResolver(queryBody_1, '$and');
                            if (must) {
                                esQuery_1['must'] = must;
                            }
                        }
                        else if (key === '$or') {
                            /** @type {?} */
                            var should = EsUtils.queryResolver(queryBody_1, '$or');
                            if (should) {
                                esQuery_1['should'] = should;
                            }
                        }
                        else if (key === '$not') {
                            /** @type {?} */
                            var must_not = EsUtils.queryResolver(queryBody_1, '$not');
                            if (must_not) {
                                esQuery_1['must_not'] = must_not;
                            }
                        }
                        else if (queryBody_1[key]) {
                            if (esQuery_1['must']) {
                                esQuery_1['must'].push((_a = {}, _a[key] = queryBody_1[key], _a));
                            }
                            else {
                                esQuery_1['must'] = [(_b = {}, _b[key] = queryBody_1[key], _b)];
                            }
                        }
                    });
                    esQuery_1 = __assign({}, esQuery_1);
                }
                if (esQuery_1['should'] && !esQuery_1['minimum_should_match']) {
                    esQuery_1['minimum_should_match'] = 1;
                }
            }
            if (!CommonsUtils.isEmpty(_body.filter)) {
                /** @type {?} */
                var filterBody_1 = __assign({}, _body.filter);
                esQuery_1['filter'] = [];
                if (Object.keys(filterBody_1).length > 0) {
                    Object.keys(filterBody_1).forEach(function (key) {
                        var _a;
                        if (filterBody_1[key]) {
                            esQuery_1['filter'].push((_a = {}, _a[key] = filterBody_1[key], _a));
                        }
                    });
                }
                if (esQuery_1['filter'].length === 0) {
                    delete esQuery_1['filter'];
                }
            }
            if (Object.keys(esQuery_1).length > 0) {
                _body.query = { bool: esQuery_1 };
            }
        }
        if (!CommonsUtils.isEmpty(_body.aggs)) {
            /** @type {?} */
            var aggs = EsUtils.parseAggProps(_body.aggs);
            if (aggs.length > 0) {
                _body.aggs = requestBodySearch().aggs(aggs).toJSON()['aggs'];
            }
        }
        Object.keys(_body).forEach(function (k) {
            if (CommonsUtils.isEmpty(_body[k])) {
                delete _body[k];
            }
        });
        return _body;
    };
    /**
     * @param {?} sort
     * @return {?}
     */
    EsUtils.resolveSort = /**
     * @param {?} sort
     * @return {?}
     */
    function (sort$$1) {
        /** @type {?} */
        var sorts = {};
        if (CommonsUtils.isString(sort$$1)) {
            sorts[(/** @type {?} */ (sort$$1))] = Order.ASC;
        }
        else if (CommonsUtils.isArray(sort$$1)) {
            ((/** @type {?} */ (sort$$1))).forEach(function (s) {
                if (CommonsUtils.isString(s)) {
                    if (!sorts[s]) {
                        sorts[s] = Order.ASC;
                    }
                }
                else {
                    sorts = __assign({}, sorts, (/** @type {?} */ (s)));
                }
            });
        }
        else {
            sorts = (/** @type {?} */ (sort$$1));
        }
        return sorts;
    };
    /**
     * @param {?} qs
     * @return {?}
     */
    EsUtils.getMsearchBody = /**
     * @param {?} qs
     * @return {?}
     */
    function (qs) {
        /** @type {?} */
        var body = qs.map(function (q) { return JSON.stringify(q); });
        return body.join('\n') + '\n';
    };
    /**
     * @param {?} ruleSet
     * @return {?}
     */
    EsUtils.buildQueryRuleSet = /**
     * @param {?} ruleSet
     * @return {?}
     */
    function (ruleSet) {
        ruleSet = (!ruleSet) ? {} : ruleSet;
        return (function parse(data) {
            if (!data['condition']) {
                data['condition'] = DEFAULT_ES_QUERY_CONDITION || DEFAULT_QUERY_CONDITION;
            }
            if (['AND', 'OR'].indexOf(data['condition'].toUpperCase()) === -1) {
                throw new Error('不识别的ElasticSearch bool query 关系(AND,OR) "{0}"'
                    .replace('{0}', data['condition']));
            }
            if (!data['rules']) {
                return {};
            }
            /** @type {?} */
            var parts = {};
            parts['add'] = function (k, v) {
                if (this.hasOwnProperty(k)) {
                    this[k].push(v);
                }
                else {
                    this[k] = [v];
                }
            };
            data['rules'].forEach(function (rule) {
                var _this = this;
                /** @type {?} */
                var get_value = function (aRule) {
                    if (aRule.data && aRule.data.transform) {
                        return aRule.data.transform.call(_this, aRule.value);
                    }
                    else {
                        return aRule.value;
                    }
                };
                /** @type {?} */
                var make_query = function (aRule) {
                    /** @type {?} */
                    var operator = ES_QUERY_OPERATORS[aRule.operator];
                    if (operator === undefined) {
                        throw new Error('不识别的查询操作符 "{0}"'
                            .replace('{0}', aRule.operator));
                    }
                    /** @type {?} */
                    var part = {};
                    if (operator.inputs !== 0) {
                        /** @type {?} */
                        var keyVal = {};
                        /** @type {?} */
                        var valueMapper = operator.getValue;
                        if (valueMapper) {
                            keyVal[aRule.field] = valueMapper(get_value(aRule));
                        }
                        else {
                            keyVal[aRule.field] = get_value(aRule);
                        }
                        part[operator.operator] = keyVal;
                    }
                    if (aRule.operator === 'is_null') {
                        part = { exists: { field: aRule.field } };
                    }
                    if (data['condition'] === 'NOT') {
                        return { 'bool': { 'must_not': [part] } };
                    }
                    else {
                        return part;
                    }
                };
                /** @type {?} */
                var clause;
                if (data['condition'] === 'AND') {
                    clause = 'must';
                }
                if (data['condition'] === 'NOT') {
                    clause = 'must_not';
                }
                if (data['condition'] === 'OR') {
                    clause = 'should';
                }
                if (rule['rules'] && rule['rules'].length > 0) {
                    parts['add'](clause, parse(rule));
                }
                else {
                    parts['add'](clause, make_query(rule));
                }
            });
            delete parts['add'];
            return { 'bool': parts };
        }(ruleSet));
    };
    /**
     * @param {?} aggs
     * @return {?}
     */
    EsUtils.resolveAggs = /**
     * @param {?} aggs
     * @return {?}
     */
    function (aggs) {
        /** @type {?} */
        var resolved = {};
        Object.keys(aggs).forEach(function (key) {
            /** @type {?} */
            var agg = aggs[key];
            resolved[key] = {};
            Object.keys(agg).forEach(function (k) {
                if (k === 'buckets') {
                    resolved[key] = EsUtils.resolveBuckets(agg[k]);
                }
                else if (k === 'value') {
                    resolved[key] = agg[k];
                }
            });
        });
        return resolved;
    };
    /**
     * @param {?} buckets
     * @return {?}
     */
    EsUtils.resolveBuckets = /**
     * @param {?} buckets
     * @return {?}
     */
    function (buckets) {
        /** @type {?} */
        var resolved = buckets.map(function (bucket) { return EsUtils.resolveBucket(bucket); });
        return resolved;
    };
    /**
     * @param {?} bucket
     * @return {?}
     */
    EsUtils.resolveBucket = /**
     * @param {?} bucket
     * @return {?}
     */
    function (bucket) {
        /** @type {?} */
        var resolved = {};
        Object.keys(bucket).forEach(function (key) {
            var _a;
            if (key === 'key') {
                resolved['label'] = bucket['key'];
            }
            else if (key === 'doc_count') {
                resolved['value'] = bucket['doc_count'];
            }
            else {
                if (CommonsUtils.isJson(bucket[key])) {
                    resolved = __assign({}, resolved, EsUtils.resolveAggs((_a = {}, _a[key] = bucket[key], _a)));
                }
                else {
                    resolved[key] = bucket[key];
                }
            }
        });
        return resolved;
    };
    /**
     * @private
     * @param {?} queryBody
     * @param {?} key
     * @return {?}
     */
    EsUtils.queryResolver = /**
     * @private
     * @param {?} queryBody
     * @param {?} key
     * @return {?}
     */
    function (queryBody, key) {
        if (queryBody[key]) {
            /** @type {?} */
            var _qs = queryBody[key].filter(function (q) { return !CommonsUtils.isEmpty(q); });
            if (_qs.length > 0) {
                _qs = _qs.map(function (q) { return EsUtils.parseEsbObject(q); });
            }
            return (_qs.length > 0) ? _qs : undefined;
        }
    };
    return EsUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { Utils, BrowserOsUtils, ChartUtils, ColorUtils, CopierUtils, DevicesUtils, DateUtils, DataEntityUtils, ObjectUtils, createDict, copyDict, hasKey, mapValues, union$1 as union, setKey, removeKey, fromKeys, FileUtils, IdCardUtils, FormUtils, ContextUtils, DataItemUtils, CacheUtils, ConfigUtils, DialogUtils, CommonsUtils, StatesUtils, MenuUtils, DomUtils, EncodeUtils, JwtUtils, IdUtils, PinyinUtil, RegUtils, ImageUtil, PagerUtil, TreeUtils, AnnounceUtils, NotifyUtils, RxUtils, UrlUtils, TokenizerUtils, ExtractionResult, FormatStringTokenType, FormatStringToken, FormatStringTokenizer, numToText, EsUtils };

//# sourceMappingURL=er-utils.js.map