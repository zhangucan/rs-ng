import { VarType } from '@er/types';
import * as _ from 'lodash';
export declare class CommonsUtils {
    static lodash(): typeof _;
    static getSeq(): number;
    static getRandomNumber(max?: number, min?: number): number;
    static getObjWhenStr<T extends {
        [key: string]: any;
    }>(src: string | T, key: keyof T): T;
    static getVarType(object: any): VarType;
    static isNullOrUndefined(value: any): boolean;
    static isString(obj: any): boolean;
    static isBoolean(obj: any): boolean;
    static isEmptyString(s: any): boolean;
    static isArray(obj: any): boolean;
    static isNumber(obj: any): boolean;
    static isJson(obj: any): boolean;
    static isFunction(obj: any): boolean;
    static isUrl(str: any): boolean;
    static isInteger(str: string): boolean;
    static isEqual(value: any, other: any): boolean;
    static copy(obj: any): any;
    static merge(obj1: any, ...obj2: any[]): any;
    static pickBy(obj: any, predicate: any): _.Dictionary<{}>;
    static pick(obj: any, keys: any): Pick<any, any>;
    static defaults(obj1: any, ...obj2: any[]): any;
    static equals(obj1: any, obj2: any): boolean;
    static set(obj: {
        [key: string]: any;
    }, path: string | string[], value: any): {
        [key: string]: any;
    };
    static get(obj: any, path: string | string[], defaultValue?: any): any;
    static extend(obj: any, source: any): any;
    static compact(collection: any[]): any[];
    static omit(obj: {
        [key: string]: any;
    }, path: string): {
        [key: string]: any;
    };
    static omitBy(obj: {
        [key: string]: any;
    }, predicate: ((v: any) => boolean)): _.Dictionary<any>;
    static unset(obj: {
        [key: string]: any;
    }, path: string | string[]): boolean;
    static find(collection: any, predicate: any): {};
    static findIndex(collection: any, predicate: any): number;
    static remove(collection: any, predicate: any): any[];
    static forOwn(obj: any, iteratee: (value: any, key: any, o: any) => any): any;
    static map(obj: any[], iteratee: (value: any, index: any, list: any) => any): any[];
    static unique(obj: any[], by: any): any[];
    static orderBy(obj: any[], iteratees: any, orders?: any): any[];
    static union(...obj: any[][]): any[][];
    static flatten(obj: any): {}[];
    static flattenDeep(obj: any): {}[];
    static format(src: any, format: any): any;
    static jsonConcat(o1: any, o2: any): any;
    static escape(obj: {}, key: string): {};
    static filter(collection: any, predicate: any): any[];
    static where(obj: {}, predicate: {}): {};
    static capitalize(s: any): any;
    static templateStr(s: string, vars: {}): string;
    static isTemplateStr(s: string): boolean;
    static getArray<T = any>(item: {
        [key: string]: T;
    } | T[], keyName?: string): T[];
    static removeKeys(obj: {}, ...keys: string[]): {};
    static extract(value: any[], from: number, to: number): void;
    static addItem(srcArray: any[], item: any, index?: number): any[];
    static removeByIndex(a: any[], index: number): any[];
    static replace<T>(a: T[], index: number, element: T): T[];
    static move<T>(a: T[], from: number, to: number): T[];
    static restoreFn(value: any): any;
    /**
     * 排除key为k，value为v 的数据项
     */
    static exclude(src: {}, k: string, v: any): {};
    /**
     * 替换src中的 {k,o} 元素 为 {k,v}
     */
    static replaceObj(src: any[], k: string, o: any, v: any): any[];
    /**
     * 合并 {} 和 []
     */
    static concat(src1: {}, src2: {}[], k: string): {};
    static restoreJsonFn(json: string | {}): any;
    static stringify(json: {}): string;
    static hash(str: any): number;
    /**
     * 根据options定义，转换src
     *  options:{
     *    src-key: tar-key | {key:tar-key,options:{}} | Function
     *  }
     */
    static adaptObject(src: any, options: {}): {};
    static adaptJson(src: any, options: any): {};
    static adaptArray(src: any, options: any): any[];
    static getAge(dateString: any): number;
    static toDate(target: string | Date): Date;
    static isBefore(tar: any, date?: string | Date): boolean;
    static isAfter(tar: any, date?: string | Date): boolean;
    static toString(obj: any): any;
    static isEmpty(obj: any): boolean;
    static convertToBoolean(attributes: {}, keys: string[]): {};
    static flatPath(path: string | string[]): string;
    static join(arr: any, seperator?: any): any;
    static deepFind(obj: any, ...predicates: any[]): any[];
    static sleep(milliseconds: any): void;
    static getArrayValue(data: any): any[];
    static getText(data: any): any;
    static getValue(exp: any, ...context: any[]): any;
    static defineHiddenProp(obj: any, prop: any, defaultValue: any): void;
    static splitBySize(str: any, size: any): any[];
    static resolveUrl(url: string, params?: {
        [key: string]: string;
    }): string;
}
