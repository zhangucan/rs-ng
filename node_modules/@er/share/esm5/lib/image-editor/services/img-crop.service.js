/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { forwardRef, Inject, Injectable } from '@angular/core';
import { Ng2ImgMaxService } from 'ng2-img-max';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "ng2-img-max/dist/src/ng2-img-max.service";
var ImgCropService = /** @class */ (function () {
    function ImgCropService(ng2ImgMaxService) {
        this.ng2ImgMaxService = ng2ImgMaxService;
    }
    /**
     * @param {?} file
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} startX
     * @param {?=} startY
     * @return {?}
     */
    ImgCropService.prototype.cropImage = /**
     * @param {?} file
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} startX
     * @param {?=} startY
     * @return {?}
     */
    function (file, toWidth, toHeight, startX, startY) {
        var _this = this;
        if (startX === void 0) { startX = 0; }
        if (startY === void 0) { startY = 0; }
        /** @type {?} */
        var croppedImageSubject = new Subject();
        if (file.type !== 'image/jpeg' && file.type !== 'image/png') {
            // END OF CROPPING
            setTimeout(function () {
                croppedImageSubject.error({
                    croppedFile: file,
                    reason: 'File provided is neither of type jpg nor of type png.',
                    error: 'INVALID_EXTENSION'
                });
            }, 0);
            return croppedImageSubject.asObservable();
        }
        /** @type {?} */
        var cvs = document.createElement('canvas');
        /** @type {?} */
        var ctx = cvs.getContext('2d');
        /** @type {?} */
        var img = new Image();
        img.onload = function () {
            _this.ng2ImgMaxService.getEXIFOrientedImage(img).then(function (orientedImg) {
                window.URL.revokeObjectURL(img.src);
                cvs.width = toWidth;
                cvs.height = toHeight;
                ctx.drawImage(orientedImg, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);
                /** @type {?} */
                var imageData = ctx.getImageData(0, 0, orientedImg.width, orientedImg.height);
                /** @type {?} */
                var useAlpha = true;
                if (file.type === 'image/jpeg' || (file.type === 'image/png' && !_this.isImgUsingAlpha(imageData))) {
                    // image without alpha
                    useAlpha = false;
                    ctx = cvs.getContext('2d', { 'alpha': false });
                    ctx.drawImage(orientedImg, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);
                }
                cvs.toBlob(function (blob) {
                    /** @type {?} */
                    var newFile = _this.generateResultFile(blob, file.name, file.type, new Date().getTime());
                    // END OF CROPPING
                    croppedImageSubject.next(newFile);
                }, useAlpha ? 'image/png' : 'image/jpeg');
            });
        };
        img.src = window.URL.createObjectURL(file);
        return croppedImageSubject.asObservable();
    };
    /**
     * @private
     * @param {?} imageData
     * @return {?}
     */
    ImgCropService.prototype.isImgUsingAlpha = /**
     * @private
     * @param {?} imageData
     * @return {?}
     */
    function (imageData) {
        for (var i = 0; i < imageData.data.length; i += 4) {
            if (imageData.data[i + 3] !== 255) {
                return true;
            }
        }
        return false;
    };
    /**
     * @private
     * @param {?} blob
     * @param {?} name
     * @param {?} type
     * @param {?} lastModified
     * @return {?}
     */
    ImgCropService.prototype.generateResultFile = /**
     * @private
     * @param {?} blob
     * @param {?} name
     * @param {?} type
     * @param {?} lastModified
     * @return {?}
     */
    function (blob, name, type, lastModified) {
        /** @type {?} */
        var resultFile = new Blob([blob], { type: type });
        return this.blobToFile(resultFile, name, lastModified);
    };
    /**
     * @private
     * @param {?} blob
     * @param {?} name
     * @param {?} lastModified
     * @return {?}
     */
    ImgCropService.prototype.blobToFile = /**
     * @private
     * @param {?} blob
     * @param {?} name
     * @param {?} lastModified
     * @return {?}
     */
    function (blob, name, lastModified) {
        /** @type {?} */
        var file = blob;
        file.name = name;
        file.lastModified = lastModified;
        // Cast to a File() type
        return (/** @type {?} */ (file));
    };
    ImgCropService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    ImgCropService.ctorParameters = function () { return [
        { type: Ng2ImgMaxService, decorators: [{ type: Inject, args: [forwardRef(function () { return Ng2ImgMaxService; }),] }] }
    ]; };
    /** @nocollapse */ ImgCropService.ngInjectableDef = i0.defineInjectable({ factory: function ImgCropService_Factory() { return new ImgCropService(i0.inject(i1.Ng2ImgMaxService)); }, token: ImgCropService, providedIn: "root" });
    return ImgCropService;
}());
export { ImgCropService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ImgCropService.prototype.ng2ImgMaxService;
}
//# sourceMappingURL=data:application/json;base64,