/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { forwardRef, Inject, Injectable } from '@angular/core';
import { Ng2ImgMaxService } from 'ng2-img-max';
import { Subject } from 'rxjs';
import { ImgCropService } from './img-crop.service';
import * as i0 from "@angular/core";
import * as i1 from "ng2-img-max/dist/src/ng2-img-max.service";
import * as i2 from "./img-crop.service";
var ImgResizeExactService = /** @class */ (function () {
    function ImgResizeExactService(ng2ImgMaxService, imgCropService) {
        this.ng2ImgMaxService = ng2ImgMaxService;
        this.imgCropService = imgCropService;
    }
    /**
     * @param {?} file
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} fillColor
     * @return {?}
     */
    ImgResizeExactService.prototype.resizeExactFill = /**
     * @param {?} file
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} fillColor
     * @return {?}
     */
    function (file, toWidth, toHeight, fillColor) {
        var _this = this;
        /** @type {?} */
        var resizedImageSubject = new Subject();
        if (file.type !== 'image/jpeg' && file.type !== 'image/png') {
            setTimeout(function () {
                resizedImageSubject.error({
                    resizedFile: file,
                    reason: 'File provided is neither of type jpg nor of type png.',
                    error: 'INVALID_EXTENSION'
                });
            }, 0);
            return resizedImageSubject.asObservable();
        }
        /** @type {?} */
        var img = new Image();
        img.onload = function () {
            _this.ng2ImgMaxService.getEXIFOrientedImage(img).then(function (orientedImg) {
                window.URL.revokeObjectURL(img.src);
                /** @type {?} */
                var imgRatio = orientedImg.width / orientedImg.height;
                /** @type {?} */
                var resizedRatio = toWidth / toHeight;
                /* ratio > 1 means width > height */
                /* setting one parameter of ng2ImgMaxService very high will ensure that the resizing will fit the other provided parameter */
                /** @type {?} */
                var resizeHeight = 100000;
                /** @type {?} */
                var resizeWidth = 100000;
                if (imgRatio > resizedRatio) {
                    /* the original height is smaller than the resized height as in ratio, therefore we have to resize to width, then fill to the height */
                    resizeWidth = toWidth;
                }
                else if (imgRatio <= resizedRatio) {
                    /* the original height is bigger than the resized height as in ratio, therefore we can resize to height, then fill to the width */
                    resizeHeight = toHeight;
                }
                _this.ng2ImgMaxService.resize([file], resizeWidth, resizeHeight).subscribe(function (resizeResult) {
                    /* To fill the image based on the center, we calculate where the img needs to be positioned to be centered*/
                    /** @type {?} */
                    var startX = 0;
                    /** @type {?} */
                    var startY = 0;
                    /* one side is already resized exactly to the desired size, now fill the other side */
                    if (resizeWidth === 100000) {
                        /* resized to height -> as we fill to the width, we have to set startX */
                        /** @type {?} */
                        var newImgWidth = orientedImg.width / (orientedImg.height / toHeight);
                        startX = (newImgWidth - toWidth) / 2;
                    }
                    else if (resizeHeight === 100000) {
                        /* resized to width -> as we fill to the height, we have to set startY */
                        /** @type {?} */
                        var newImgHeight = orientedImg.height / (orientedImg.width / toWidth);
                        startY = (newImgHeight - toHeight) / 2;
                    }
                    /** @type {?} */
                    var img = new Image();
                    /** @type {?} */
                    var cvs = document.createElement('canvas');
                    /** @type {?} */
                    var ctx = cvs.getContext('2d');
                    img.onload = function () {
                        cvs.width = toWidth;
                        cvs.height = toHeight;
                        if (fillColor) {
                            ctx.fillStyle = fillColor;
                            ctx.fillRect(0, 0, toWidth, toHeight);
                        }
                        ctx.drawImage(img, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);
                        /** @type {?} */
                        var imageData = ctx.getImageData(0, 0, toWidth, toHeight);
                        /** @type {?} */
                        var useAlpha = true;
                        if (file.type === 'image/jpeg' || (file.type === 'image/png' && !_this.isImgUsingAlpha(imageData))) {
                            // image without alpha
                            useAlpha = false;
                            ctx = cvs.getContext('2d', { 'alpha': false });
                            if (fillColor) {
                                ctx.fillStyle = fillColor;
                                ctx.fillRect(0, 0, toWidth, toHeight);
                            }
                            ctx.drawImage(img, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);
                        }
                        cvs.toBlob(function (blob) {
                            window.URL.revokeObjectURL(img.src);
                            /** @type {?} */
                            var newFile = _this.generateResultFile(blob, file.name, file.type, new Date().getTime());
                            // END OF CROPPING
                            resizedImageSubject.next(newFile);
                        }, useAlpha ? 'image/png' : 'image/jpeg');
                    };
                    img.src = window.URL.createObjectURL(resizeResult);
                }, function (error) {
                    // something went wrong
                    resizedImageSubject.error(error);
                });
            });
        };
        img.src = window.URL.createObjectURL(file);
        return resizedImageSubject.asObservable();
    };
    /**
     * @param {?} file
     * @param {?} toWidth
     * @param {?} toHeight
     * @return {?}
     */
    ImgResizeExactService.prototype.resizeExactCrop = /**
     * @param {?} file
     * @param {?} toWidth
     * @param {?} toHeight
     * @return {?}
     */
    function (file, toWidth, toHeight) {
        var _this = this;
        /** @type {?} */
        var resizedImageSubject = new Subject();
        if (file.type !== 'image/jpeg' && file.type !== 'image/png') {
            setTimeout(function () {
                resizedImageSubject.error({
                    resizedFile: file,
                    reason: 'File provided is neither of type jpg nor of type png.',
                    error: 'INVALID_EXTENSION'
                });
            }, 0);
            return resizedImageSubject.asObservable();
        }
        /** @type {?} */
        var img = new Image();
        img.onload = function () {
            _this.ng2ImgMaxService.getEXIFOrientedImage(img).then(function (orientedImg) {
                window.URL.revokeObjectURL(img.src);
                /** @type {?} */
                var imgRatio = orientedImg.width / orientedImg.height;
                /** @type {?} */
                var resizedRatio = toWidth / toHeight;
                /* ratio > 1 means width > height */
                /* setting one parameter of ng2ImgMaxService very high will ensure that the resizing will fit the other provided parameter */
                /** @type {?} */
                var resizeHeight = 100000;
                /** @type {?} */
                var resizeWidth = 100000;
                /* To crop the image based on the center, so we will keep the most important part of the image, we calculate to crop from where to where */
                /** @type {?} */
                var startX = 0;
                /** @type {?} */
                var startY = 0;
                if (imgRatio > resizedRatio) {
                    /* the original height is smaller than the resized height as in ratio, therefore we have to resize to height, then crop to the width */
                    resizeHeight = toHeight;
                }
                else if (imgRatio <= resizedRatio) {
                    /* the original height is bigger than the resized height as in ratio, therefore we can resize to width, then crop to the height */
                    resizeWidth = toWidth;
                }
                _this.ng2ImgMaxService.resize([file], resizeWidth, resizeHeight).subscribe(function (resizeResult) {
                    /* one side is already resized exactly to the desired size, now crop the other side */
                    if (resizeWidth === 100000) {
                        /* resized to height -> as we crop to the width, we have to set startX */
                        /** @type {?} */
                        var newImgWidth = orientedImg.width / (orientedImg.height / toHeight);
                        startX = (newImgWidth - toWidth) / 2;
                    }
                    else if (resizeHeight === 100000) {
                        /* resized to width -> as we crop to the height, we have to set startY */
                        /** @type {?} */
                        var newImgHeight = orientedImg.height / (orientedImg.width / toWidth);
                        startY = (newImgHeight - toHeight) / 2;
                    }
                    _this.imgCropService.cropImage(resizeResult, toWidth, toHeight, startX, startY).subscribe(function (cropResult) {
                        // all good, result is a file
                        resizedImageSubject.next(cropResult);
                    }, function (error) {
                        // something went wrong
                        resizedImageSubject.error(error);
                    });
                }, function (error) {
                    // something went wrong
                    resizedImageSubject.error(error);
                });
            });
        };
        img.src = window.URL.createObjectURL(file);
        return resizedImageSubject.asObservable();
    };
    /**
     * @private
     * @param {?} imageData
     * @return {?}
     */
    ImgResizeExactService.prototype.isImgUsingAlpha = /**
     * @private
     * @param {?} imageData
     * @return {?}
     */
    function (imageData) {
        for (var i = 0; i < imageData.data.length; i += 4) {
            if (imageData.data[i + 3] !== 255) {
                return true;
            }
        }
        return false;
    };
    /**
     * @private
     * @param {?} blob
     * @param {?} name
     * @param {?} type
     * @param {?} lastModified
     * @return {?}
     */
    ImgResizeExactService.prototype.generateResultFile = /**
     * @private
     * @param {?} blob
     * @param {?} name
     * @param {?} type
     * @param {?} lastModified
     * @return {?}
     */
    function (blob, name, type, lastModified) {
        /** @type {?} */
        var resultFile = new Blob([blob], { type: type });
        return this.blobToFile(resultFile, name, lastModified);
    };
    /**
     * @private
     * @param {?} blob
     * @param {?} name
     * @param {?} lastModified
     * @return {?}
     */
    ImgResizeExactService.prototype.blobToFile = /**
     * @private
     * @param {?} blob
     * @param {?} name
     * @param {?} lastModified
     * @return {?}
     */
    function (blob, name, lastModified) {
        /** @type {?} */
        var file = blob;
        file.name = name;
        file.lastModified = lastModified;
        // Cast to a File() type
        return (/** @type {?} */ (file));
    };
    ImgResizeExactService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    ImgResizeExactService.ctorParameters = function () { return [
        { type: Ng2ImgMaxService, decorators: [{ type: Inject, args: [forwardRef(function () { return Ng2ImgMaxService; }),] }] },
        { type: ImgCropService, decorators: [{ type: Inject, args: [forwardRef(function () { return ImgCropService; }),] }] }
    ]; };
    /** @nocollapse */ ImgResizeExactService.ngInjectableDef = i0.defineInjectable({ factory: function ImgResizeExactService_Factory() { return new ImgResizeExactService(i0.inject(i1.Ng2ImgMaxService), i0.inject(i2.ImgCropService)); }, token: ImgResizeExactService, providedIn: "root" });
    return ImgResizeExactService;
}());
export { ImgResizeExactService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ImgResizeExactService.prototype.ng2ImgMaxService;
    /**
     * @type {?}
     * @private
     */
    ImgResizeExactService.prototype.imgCropService;
}
//# sourceMappingURL=data:application/json;base64,