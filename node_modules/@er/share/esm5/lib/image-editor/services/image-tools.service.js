/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { forwardRef, Inject, Injectable } from '@angular/core';
import { Ng2ImgMaxService } from 'ng2-img-max';
import { Subject } from 'rxjs';
import { ImgCropService } from './img-crop.service';
import { ImgResizeExactService } from './img-resize-exact.service';
import * as i0 from "@angular/core";
import * as i1 from "./img-resize-exact.service";
import * as i2 from "ng2-img-max/dist/src/ng2-img-max.service";
import * as i3 from "./img-crop.service";
var ImageToolsService = /** @class */ (function () {
    function ImageToolsService(imgResizeExactService, ng2ImgMaxService, imgCropService) {
        this.imgResizeExactService = imgResizeExactService;
        this.ng2ImgMaxService = ng2ImgMaxService;
        this.imgCropService = imgCropService;
    }
    /**
     * @param {?} files
     * @param {?} maxSizeInMB
     * @param {?=} ignoreAlpha
     * @param {?=} logExecutionTime
     * @return {?}
     */
    ImageToolsService.prototype.compress = /**
     * @param {?} files
     * @param {?} maxSizeInMB
     * @param {?=} ignoreAlpha
     * @param {?=} logExecutionTime
     * @return {?}
     */
    function (files, maxSizeInMB, ignoreAlpha, logExecutionTime) {
        if (ignoreAlpha === void 0) { ignoreAlpha = false; }
        if (logExecutionTime === void 0) { logExecutionTime = false; }
        return this.ng2ImgMaxService.compress(files, maxSizeInMB, ignoreAlpha, logExecutionTime);
    };
    /**
     * @param {?} files
     * @param {?} maxWidth
     * @param {?} maxHeight
     * @param {?=} logExecutionTime
     * @return {?}
     */
    ImageToolsService.prototype.resize = /**
     * @param {?} files
     * @param {?} maxWidth
     * @param {?} maxHeight
     * @param {?=} logExecutionTime
     * @return {?}
     */
    function (files, maxWidth, maxHeight, logExecutionTime) {
        if (logExecutionTime === void 0) { logExecutionTime = false; }
        return this.ng2ImgMaxService.resize(files, maxWidth, maxHeight, logExecutionTime);
    };
    /**
     * @param {?} files
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} startX
     * @param {?=} startY
     * @return {?}
     */
    ImageToolsService.prototype.crop = /**
     * @param {?} files
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} startX
     * @param {?=} startY
     * @return {?}
     */
    function (files, toWidth, toHeight, startX, startY) {
        var _this = this;
        if (startX === void 0) { startX = 0; }
        if (startY === void 0) { startY = 0; }
        /** @type {?} */
        var croppedFileSubject = new Subject();
        files.forEach(function (file) {
            _this.cropImage(file, toWidth, toHeight, startX, startY).subscribe(function (value) {
                croppedFileSubject.next(value);
            }, function (error) {
                croppedFileSubject.error(error);
            });
        });
        return croppedFileSubject.asObservable();
    };
    /**
     * @param {?} files
     * @param {?} toWidth
     * @param {?} toHeight
     * @return {?}
     */
    ImageToolsService.prototype.resizeExactCrop = /**
     * @param {?} files
     * @param {?} toWidth
     * @param {?} toHeight
     * @return {?}
     */
    function (files, toWidth, toHeight) {
        var _this = this;
        /** @type {?} */
        var resizedFileSubject = new Subject();
        files.forEach(function (file) {
            _this.resizeExactCropImage(file, toWidth, toHeight).subscribe(function (value) {
                resizedFileSubject.next(value);
            }, function (error) {
                resizedFileSubject.error(error);
            });
        });
        return resizedFileSubject.asObservable();
    };
    /**
     * @param {?} files
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} fillColor
     * @return {?}
     */
    ImageToolsService.prototype.resizeExactFill = /**
     * @param {?} files
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} fillColor
     * @return {?}
     */
    function (files, toWidth, toHeight, fillColor) {
        var _this = this;
        /** @type {?} */
        var resizedFileSubject = new Subject();
        files.forEach(function (file) {
            _this.resizeExactFillImage(file, toWidth, toHeight, fillColor).subscribe(function (value) {
                resizedFileSubject.next(value);
            }, function (error) {
                resizedFileSubject.error(error);
            });
        });
        return resizedFileSubject.asObservable();
    };
    /**
     * @param {?} file
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} fillColor
     * @return {?}
     */
    ImageToolsService.prototype.resizeExactFillImage = /**
     * @param {?} file
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} fillColor
     * @return {?}
     */
    function (file, toWidth, toHeight, fillColor) {
        return this.imgResizeExactService.resizeExactFill(file, toWidth, toHeight, fillColor);
    };
    /**
     * @param {?} file
     * @param {?} toWidth
     * @param {?} toHeight
     * @return {?}
     */
    ImageToolsService.prototype.resizeExactCropImage = /**
     * @param {?} file
     * @param {?} toWidth
     * @param {?} toHeight
     * @return {?}
     */
    function (file, toWidth, toHeight) {
        return this.imgResizeExactService.resizeExactCrop(file, toWidth, toHeight);
    };
    /**
     * @param {?} file
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} startX
     * @param {?=} startY
     * @return {?}
     */
    ImageToolsService.prototype.cropImage = /**
     * @param {?} file
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} startX
     * @param {?=} startY
     * @return {?}
     */
    function (file, toWidth, toHeight, startX, startY) {
        if (startX === void 0) { startX = 0; }
        if (startY === void 0) { startY = 0; }
        return this.imgCropService.cropImage(file, toWidth, toHeight, startX, startY);
    };
    /**
     * @param {?} file
     * @param {?} maxSizeInMB
     * @param {?=} ignoreAlpha
     * @param {?=} logExecutionTime
     * @return {?}
     */
    ImageToolsService.prototype.compressImage = /**
     * @param {?} file
     * @param {?} maxSizeInMB
     * @param {?=} ignoreAlpha
     * @param {?=} logExecutionTime
     * @return {?}
     */
    function (file, maxSizeInMB, ignoreAlpha, logExecutionTime) {
        if (ignoreAlpha === void 0) { ignoreAlpha = false; }
        if (logExecutionTime === void 0) { logExecutionTime = false; }
        return this.ng2ImgMaxService.compressImage(file, maxSizeInMB, ignoreAlpha, logExecutionTime);
    };
    /**
     * @param {?} file
     * @param {?} maxWidth
     * @param {?} maxHeight
     * @param {?=} logExecutionTime
     * @return {?}
     */
    ImageToolsService.prototype.resizeImage = /**
     * @param {?} file
     * @param {?} maxWidth
     * @param {?} maxHeight
     * @param {?=} logExecutionTime
     * @return {?}
     */
    function (file, maxWidth, maxHeight, logExecutionTime) {
        if (logExecutionTime === void 0) { logExecutionTime = false; }
        return this.ng2ImgMaxService.resizeImage(file, maxWidth, maxHeight, logExecutionTime);
    };
    /**
     * @param {?} image
     * @return {?}
     */
    ImageToolsService.prototype.getEXIFOrientedImage = /**
     * @param {?} image
     * @return {?}
     */
    function (image) {
        return this.ng2ImgMaxService.getEXIFOrientedImage(image);
    };
    ImageToolsService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    ImageToolsService.ctorParameters = function () { return [
        { type: ImgResizeExactService, decorators: [{ type: Inject, args: [forwardRef(function () { return ImgResizeExactService; }),] }] },
        { type: Ng2ImgMaxService, decorators: [{ type: Inject, args: [forwardRef(function () { return Ng2ImgMaxService; }),] }] },
        { type: ImgCropService, decorators: [{ type: Inject, args: [forwardRef(function () { return ImgCropService; }),] }] }
    ]; };
    /** @nocollapse */ ImageToolsService.ngInjectableDef = i0.defineInjectable({ factory: function ImageToolsService_Factory() { return new ImageToolsService(i0.inject(i1.ImgResizeExactService), i0.inject(i2.Ng2ImgMaxService), i0.inject(i3.ImgCropService)); }, token: ImageToolsService, providedIn: "root" });
    return ImageToolsService;
}());
export { ImageToolsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ImageToolsService.prototype.imgResizeExactService;
    /**
     * @type {?}
     * @private
     */
    ImageToolsService.prototype.ng2ImgMaxService;
    /**
     * @type {?}
     * @private
     */
    ImageToolsService.prototype.imgCropService;
}
//# sourceMappingURL=data:application/json;base64,