{"version":3,"file":"er-share.js.map","sources":["ng://@er/share/lib/image-editor/component.ts","ng://@er/share/lib/image-editor/services/img-crop.service.ts","ng://@er/share/lib/image-editor/services/img-resize-exact.service.ts","ng://@er/share/lib/image-editor/services/image-tools.service.ts","ng://@er/share/lib/image-editor/module.ts"],"sourcesContent":["import {Component} from '@angular/core';\n\n@Component({\n  selector: 'er-image-editor',\n  template: ``\n})\nexport class ImageEditorComponent {\n\n}\n","import {forwardRef, Inject, Injectable} from '@angular/core';\nimport {Ng2ImgMaxService} from 'ng2-img-max';\nimport {Observable, Subject} from 'rxjs';\n\n@Injectable(\n  {providedIn: 'root'}\n)\nexport class ImgCropService {\n  constructor(@Inject(forwardRef(() => Ng2ImgMaxService)) private ng2ImgMaxService: Ng2ImgMaxService) {\n  }\n\n  public cropImage(file: File, toWidth: number, toHeight: number, startX: number = 0, startY: number = 0): Observable<any> {\n    const croppedImageSubject: Subject<any> = new Subject<any>();\n    if (file.type !== 'image/jpeg' && file.type !== 'image/png') {\n      // END OF CROPPING\n      setTimeout(() => {\n        croppedImageSubject.error({\n          croppedFile: file,\n          reason: 'File provided is neither of type jpg nor of type png.',\n          error: 'INVALID_EXTENSION'\n        });\n      }, 0);\n      return croppedImageSubject.asObservable();\n    }\n    const cvs = document.createElement('canvas');\n    let ctx = cvs.getContext('2d');\n    const img = new Image();\n    img.onload = () => {\n      this.ng2ImgMaxService.getEXIFOrientedImage(img).then(orientedImg => {\n        window.URL.revokeObjectURL(img.src);\n        cvs.width = toWidth;\n        cvs.height = toHeight;\n        ctx.drawImage(orientedImg, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);\n        const imageData = ctx.getImageData(0, 0, orientedImg.width, orientedImg.height);\n        let useAlpha = true;\n        if (file.type === 'image/jpeg' || (file.type === 'image/png' && !this.isImgUsingAlpha(imageData))) {\n          // image without alpha\n          useAlpha = false;\n          ctx = cvs.getContext('2d', {'alpha': false});\n          ctx.drawImage(orientedImg, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);\n        }\n        cvs.toBlob((blob) => {\n          const newFile: File = this.generateResultFile(blob, file.name, file.type, new Date().getTime());\n          // END OF CROPPING\n          croppedImageSubject.next(newFile);\n        }, useAlpha ? 'image/png' : 'image/jpeg');\n      });\n    };\n    img.src = window.URL.createObjectURL(file);\n    return croppedImageSubject.asObservable();\n  }\n\n  private isImgUsingAlpha(imageData): boolean {\n    for (let i = 0; i < imageData.data.length; i += 4) {\n      if (imageData.data[i + 3] !== 255) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private generateResultFile(blob: Blob, name: string, type: string, lastModified: number): File {\n    const resultFile = new Blob([blob], {type: type});\n    return this.blobToFile(resultFile, name, lastModified);\n  }\n\n  private blobToFile(blob: Blob, name: string, lastModified: number): File {\n    const file: any = blob;\n    file.name = name;\n    file.lastModified = lastModified;\n\n    // Cast to a File() type\n    return <File> file;\n  }\n}\n","import {forwardRef, Inject, Injectable} from '@angular/core';\nimport {Ng2ImgMaxService} from 'ng2-img-max';\nimport {Observable, Subject} from 'rxjs';\nimport {ImgCropService} from './img-crop.service';\n\n@Injectable(\n  {providedIn: 'root'}\n)\nexport class ImgResizeExactService {\n  constructor(@Inject(forwardRef(() => Ng2ImgMaxService)) private ng2ImgMaxService: Ng2ImgMaxService,\n              @Inject(forwardRef(() => ImgCropService)) private imgCropService: ImgCropService) {\n  }\n\n  public resizeExactFill(file: File, toWidth: number, toHeight: number, fillColor?: string): Observable<any> {\n    const resizedImageSubject: Subject<any> = new Subject<any>();\n    if (file.type !== 'image/jpeg' && file.type !== 'image/png') {\n      setTimeout(() => {\n        resizedImageSubject.error({\n          resizedFile: file,\n          reason: 'File provided is neither of type jpg nor of type png.',\n          error: 'INVALID_EXTENSION'\n        });\n      }, 0);\n      return resizedImageSubject.asObservable();\n    }\n    const img = new Image();\n    img.onload = () => {\n      this.ng2ImgMaxService.getEXIFOrientedImage(img).then(orientedImg => {\n        window.URL.revokeObjectURL(img.src);\n        const imgRatio = orientedImg.width / orientedImg.height;\n        const resizedRatio = toWidth / toHeight;\n        /* ratio > 1 means width > height */\n\n        /* setting one parameter of ng2ImgMaxService very high will ensure that the resizing will fit the other provided parameter */\n        let resizeHeight = 100000;\n        let resizeWidth = 100000;\n\n        if (imgRatio > resizedRatio) {\n          /* the original height is smaller than the resized height as in ratio, therefore we have to resize to width, then fill to the height */\n          resizeWidth = toWidth;\n        } else if (imgRatio <= resizedRatio) {\n          /* the original height is bigger than the resized height as in ratio, therefore we can resize to height, then fill to the width */\n          resizeHeight = toHeight;\n        }\n\n        this.ng2ImgMaxService.resize([file], resizeWidth, resizeHeight).subscribe((resizeResult) => {\n\n          /* To fill the image based on the center, we calculate where the img needs to be positioned to be centered*/\n          let startX = 0;\n          let startY = 0;\n\n          /* one side is already resized exactly to the desired size, now fill the other side */\n          if (resizeWidth === 100000) {\n            /* resized to height -> as we fill to the width, we have to set startX */\n            const newImgWidth = orientedImg.width / (orientedImg.height / toHeight);\n            startX = (newImgWidth - toWidth) / 2;\n          } else if (resizeHeight === 100000) {\n            /* resized to width -> as we fill to the height, we have to set startY */\n            const newImgHeight = orientedImg.height / (orientedImg.width / toWidth);\n            startY = (newImgHeight - toHeight) / 2;\n          }\n\n          const img = new Image();\n          const cvs = document.createElement('canvas');\n          let ctx = cvs.getContext('2d');\n          img.onload = () => {\n            cvs.width = toWidth;\n            cvs.height = toHeight;\n            if (fillColor) {\n              ctx.fillStyle = fillColor;\n              ctx.fillRect(0, 0, toWidth, toHeight);\n            }\n            ctx.drawImage(img, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);\n            const imageData = ctx.getImageData(0, 0, toWidth, toHeight);\n            let useAlpha = true;\n            if (file.type === 'image/jpeg' || (file.type === 'image/png' && !this.isImgUsingAlpha(imageData))) {\n              // image without alpha\n              useAlpha = false;\n              ctx = cvs.getContext('2d', {'alpha': false});\n              if (fillColor) {\n                ctx.fillStyle = fillColor;\n                ctx.fillRect(0, 0, toWidth, toHeight);\n              }\n              ctx.drawImage(img, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);\n            }\n            cvs.toBlob((blob) => {\n              window.URL.revokeObjectURL(img.src);\n              const newFile: File = this.generateResultFile(blob, file.name, file.type, new Date().getTime());\n              // END OF CROPPING\n              resizedImageSubject.next(newFile);\n            }, useAlpha ? 'image/png' : 'image/jpeg');\n          };\n          img.src = window.URL.createObjectURL(resizeResult);\n        }, error => {\n          // something went wrong\n          resizedImageSubject.error(error);\n        });\n      });\n    };\n    img.src = window.URL.createObjectURL(file);\n    return resizedImageSubject.asObservable();\n  }\n\n  public resizeExactCrop(file: File, toWidth: number, toHeight: number): Observable<any> {\n    const resizedImageSubject: Subject<any> = new Subject<any>();\n    if (file.type !== 'image/jpeg' && file.type !== 'image/png') {\n      setTimeout(() => {\n        resizedImageSubject.error({\n          resizedFile: file,\n          reason: 'File provided is neither of type jpg nor of type png.',\n          error: 'INVALID_EXTENSION'\n        });\n      }, 0);\n      return resizedImageSubject.asObservable();\n    }\n    const img = new Image();\n    img.onload = () => {\n      this.ng2ImgMaxService.getEXIFOrientedImage(img).then(orientedImg => {\n        window.URL.revokeObjectURL(img.src);\n        const imgRatio = orientedImg.width / orientedImg.height;\n        const resizedRatio = toWidth / toHeight;\n        /* ratio > 1 means width > height */\n\n        /* setting one parameter of ng2ImgMaxService very high will ensure that the resizing will fit the other provided parameter */\n        let resizeHeight = 100000;\n        let resizeWidth = 100000;\n\n        /* To crop the image based on the center, so we will keep the most important part of the image, we calculate to crop from where to where */\n        let startX = 0;\n        let startY = 0;\n\n        if (imgRatio > resizedRatio) {\n          /* the original height is smaller than the resized height as in ratio, therefore we have to resize to height, then crop to the width */\n          resizeHeight = toHeight;\n        } else if (imgRatio <= resizedRatio) {\n          /* the original height is bigger than the resized height as in ratio, therefore we can resize to width, then crop to the height */\n          resizeWidth = toWidth;\n        }\n\n        this.ng2ImgMaxService.resize([file], resizeWidth, resizeHeight).subscribe((resizeResult) => {\n          /* one side is already resized exactly to the desired size, now crop the other side */\n          if (resizeWidth === 100000) {\n            /* resized to height -> as we crop to the width, we have to set startX */\n            const newImgWidth = orientedImg.width / (orientedImg.height / toHeight);\n            startX = (newImgWidth - toWidth) / 2;\n          } else if (resizeHeight === 100000) {\n            /* resized to width -> as we crop to the height, we have to set startY */\n            const newImgHeight = orientedImg.height / (orientedImg.width / toWidth);\n            startY = (newImgHeight - toHeight) / 2;\n          }\n          this.imgCropService.cropImage(resizeResult, toWidth, toHeight, startX, startY).subscribe((cropResult) => {\n            // all good, result is a file\n            resizedImageSubject.next(cropResult);\n          }, error => {\n            // something went wrong\n            resizedImageSubject.error(error);\n          });\n        }, error => {\n          // something went wrong\n          resizedImageSubject.error(error);\n        });\n      });\n    };\n    img.src = window.URL.createObjectURL(file);\n    return resizedImageSubject.asObservable();\n  }\n\n  private isImgUsingAlpha(imageData): boolean {\n    for (let i = 0; i < imageData.data.length; i += 4) {\n      if (imageData.data[i + 3] !== 255) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private generateResultFile(blob: Blob, name: string, type: string, lastModified: number): File {\n    const resultFile = new Blob([blob], {type: type});\n    return this.blobToFile(resultFile, name, lastModified);\n  }\n\n  private blobToFile(blob: Blob, name: string, lastModified: number): File {\n    const file: any = blob;\n    file.name = name;\n    file.lastModified = lastModified;\n\n    // Cast to a File() type\n    return <File> file;\n  }\n}\n","import {forwardRef, Inject, Injectable} from '@angular/core';\nimport {Ng2ImgMaxService} from 'ng2-img-max';\nimport {Observable, Subject} from 'rxjs';\nimport {ImgCropService} from './img-crop.service';\nimport {ImgResizeExactService} from './img-resize-exact.service';\n\n@Injectable(\n  {providedIn: 'root'}\n)\nexport class ImageToolsService {\n  constructor(@Inject(forwardRef(() => ImgResizeExactService)) private imgResizeExactService: ImgResizeExactService,\n              @Inject(forwardRef(() => Ng2ImgMaxService)) private ng2ImgMaxService: Ng2ImgMaxService,\n              @Inject(forwardRef(() => ImgCropService)) private imgCropService: ImgCropService) {\n  }\n\n  public compress(files: File[], maxSizeInMB: number, ignoreAlpha: boolean = false, logExecutionTime: boolean = false): Observable<any> {\n    return this.ng2ImgMaxService.compress(files, maxSizeInMB, ignoreAlpha, logExecutionTime);\n  }\n\n  public resize(files: File[], maxWidth: number, maxHeight: number, logExecutionTime: boolean = false): Observable<any> {\n    return this.ng2ImgMaxService.resize(files, maxWidth, maxHeight, logExecutionTime);\n  }\n\n  public crop(files: File[], toWidth: number, toHeight: number, startX: number = 0, startY: number = 0): Observable<any> {\n    const croppedFileSubject: Subject<any> = new Subject<any>();\n    files.forEach((file) => {\n      this.cropImage(file, toWidth, toHeight, startX, startY).subscribe((value) => {\n        croppedFileSubject.next(value);\n      }, error => {\n        croppedFileSubject.error(error);\n      });\n    });\n    return croppedFileSubject.asObservable();\n  }\n\n  public resizeExactCrop(files: File[], toWidth: number, toHeight: number): Observable<any> {\n    const resizedFileSubject: Subject<any> = new Subject<any>();\n    files.forEach((file) => {\n      this.resizeExactCropImage(file, toWidth, toHeight).subscribe((value) => {\n        resizedFileSubject.next(value);\n      }, error => {\n        resizedFileSubject.error(error);\n      });\n    });\n    return resizedFileSubject.asObservable();\n  }\n\n  public resizeExactFill(files: File[], toWidth: number, toHeight: number, fillColor?: string): Observable<any> {\n    const resizedFileSubject: Subject<any> = new Subject<any>();\n    files.forEach((file) => {\n      this.resizeExactFillImage(file, toWidth, toHeight, fillColor).subscribe((value) => {\n        resizedFileSubject.next(value);\n      }, error => {\n        resizedFileSubject.error(error);\n      });\n    });\n    return resizedFileSubject.asObservable();\n  }\n\n  public resizeExactFillImage(file: File, toWidth: number, toHeight: number, fillColor?: string): Observable<any> {\n    return this.imgResizeExactService.resizeExactFill(file, toWidth, toHeight, fillColor);\n  }\n\n  public resizeExactCropImage(file: File, toWidth: number, toHeight: number): Observable<any> {\n    return this.imgResizeExactService.resizeExactCrop(file, toWidth, toHeight);\n  }\n\n  public cropImage(file: File, toWidth: number, toHeight: number, startX: number = 0, startY: number = 0): Observable<any> {\n    return this.imgCropService.cropImage(file, toWidth, toHeight, startX, startY);\n  }\n\n  public compressImage(file: File, maxSizeInMB: number, ignoreAlpha: boolean = false, logExecutionTime: boolean = false): Observable<any> {\n    return this.ng2ImgMaxService.compressImage(file, maxSizeInMB, ignoreAlpha, logExecutionTime);\n  }\n\n  public resizeImage(file: File, maxWidth: number, maxHeight: number, logExecutionTime: boolean = false): Observable<any> {\n    return this.ng2ImgMaxService.resizeImage(file, maxWidth, maxHeight, logExecutionTime);\n  }\n\n  public getEXIFOrientedImage(image: HTMLImageElement): Promise<HTMLImageElement> {\n    return this.ng2ImgMaxService.getEXIFOrientedImage(image);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {ErCoreModule} from '@er/core';\n\nimport {Ng2ImgMaxModule, Ng2ImgMaxService} from 'ng2-img-max';\nimport {ImageEditorComponent} from './component';\nimport {ImageToolsService} from './services/image-tools.service';\nimport {ImgCropService} from './services/img-crop.service';\nimport {ImgResizeExactService} from './services/img-resize-exact.service';\n\nexport {ImageToolsService} from './services/image-tools.service';\nexport {ImgCropService} from './services/img-crop.service';\nexport {ImgResizeExactService} from './services/img-resize-exact.service';\n\n@NgModule({\n  imports: [\n    ErCoreModule,\n    Ng2ImgMaxModule\n  ],\n  declarations: [\n    ImageEditorComponent\n  ],\n  providers: [\n    {provide: ImgResizeExactService, useClass: ImgResizeExactService},\n    {provide: ImgCropService, useClass: ImgCropService},\n    {provide: ImageToolsService, useClass: ImageToolsService},\n    {provide: Ng2ImgMaxService, useClass: Ng2ImgMaxService}\n  ],\n  exports: [\n    ImageEditorComponent\n  ]\n})\nexport class ErImageEditorModule {\n\n}\n"],"names":[],"mappings":"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"}
