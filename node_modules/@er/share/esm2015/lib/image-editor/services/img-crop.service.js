/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { forwardRef, Inject, Injectable } from '@angular/core';
import { Ng2ImgMaxService } from 'ng2-img-max';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "ng2-img-max/dist/src/ng2-img-max.service";
export class ImgCropService {
    /**
     * @param {?} ng2ImgMaxService
     */
    constructor(ng2ImgMaxService) {
        this.ng2ImgMaxService = ng2ImgMaxService;
    }
    /**
     * @param {?} file
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} startX
     * @param {?=} startY
     * @return {?}
     */
    cropImage(file, toWidth, toHeight, startX = 0, startY = 0) {
        /** @type {?} */
        const croppedImageSubject = new Subject();
        if (file.type !== 'image/jpeg' && file.type !== 'image/png') {
            // END OF CROPPING
            setTimeout(() => {
                croppedImageSubject.error({
                    croppedFile: file,
                    reason: 'File provided is neither of type jpg nor of type png.',
                    error: 'INVALID_EXTENSION'
                });
            }, 0);
            return croppedImageSubject.asObservable();
        }
        /** @type {?} */
        const cvs = document.createElement('canvas');
        /** @type {?} */
        let ctx = cvs.getContext('2d');
        /** @type {?} */
        const img = new Image();
        img.onload = () => {
            this.ng2ImgMaxService.getEXIFOrientedImage(img).then(orientedImg => {
                window.URL.revokeObjectURL(img.src);
                cvs.width = toWidth;
                cvs.height = toHeight;
                ctx.drawImage(orientedImg, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);
                /** @type {?} */
                const imageData = ctx.getImageData(0, 0, orientedImg.width, orientedImg.height);
                /** @type {?} */
                let useAlpha = true;
                if (file.type === 'image/jpeg' || (file.type === 'image/png' && !this.isImgUsingAlpha(imageData))) {
                    // image without alpha
                    useAlpha = false;
                    ctx = cvs.getContext('2d', { 'alpha': false });
                    ctx.drawImage(orientedImg, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);
                }
                cvs.toBlob((blob) => {
                    /** @type {?} */
                    const newFile = this.generateResultFile(blob, file.name, file.type, new Date().getTime());
                    // END OF CROPPING
                    croppedImageSubject.next(newFile);
                }, useAlpha ? 'image/png' : 'image/jpeg');
            });
        };
        img.src = window.URL.createObjectURL(file);
        return croppedImageSubject.asObservable();
    }
    /**
     * @private
     * @param {?} imageData
     * @return {?}
     */
    isImgUsingAlpha(imageData) {
        for (let i = 0; i < imageData.data.length; i += 4) {
            if (imageData.data[i + 3] !== 255) {
                return true;
            }
        }
        return false;
    }
    /**
     * @private
     * @param {?} blob
     * @param {?} name
     * @param {?} type
     * @param {?} lastModified
     * @return {?}
     */
    generateResultFile(blob, name, type, lastModified) {
        /** @type {?} */
        const resultFile = new Blob([blob], { type: type });
        return this.blobToFile(resultFile, name, lastModified);
    }
    /**
     * @private
     * @param {?} blob
     * @param {?} name
     * @param {?} lastModified
     * @return {?}
     */
    blobToFile(blob, name, lastModified) {
        /** @type {?} */
        const file = blob;
        file.name = name;
        file.lastModified = lastModified;
        // Cast to a File() type
        return (/** @type {?} */ (file));
    }
}
ImgCropService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ImgCropService.ctorParameters = () => [
    { type: Ng2ImgMaxService, decorators: [{ type: Inject, args: [forwardRef(() => Ng2ImgMaxService),] }] }
];
/** @nocollapse */ ImgCropService.ngInjectableDef = i0.defineInjectable({ factory: function ImgCropService_Factory() { return new ImgCropService(i0.inject(i1.Ng2ImgMaxService)); }, token: ImgCropService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ImgCropService.prototype.ng2ImgMaxService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1nLWNyb3Auc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9zaGFyZS8iLCJzb3VyY2VzIjpbImxpYi9pbWFnZS1lZGl0b3Ivc2VydmljZXMvaW1nLWNyb3Auc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUM3QyxPQUFPLEVBQWEsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDOzs7QUFLekMsTUFBTSxPQUFPLGNBQWM7Ozs7SUFDekIsWUFBZ0UsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7SUFDbEcsQ0FBQzs7Ozs7Ozs7O0lBRU0sU0FBUyxDQUFDLElBQVUsRUFBRSxPQUFlLEVBQUUsUUFBZ0IsRUFBRSxTQUFpQixDQUFDLEVBQUUsU0FBaUIsQ0FBQzs7Y0FDOUYsbUJBQW1CLEdBQWlCLElBQUksT0FBTyxFQUFPO1FBQzVELElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxZQUFZLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7WUFDM0Qsa0JBQWtCO1lBQ2xCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsbUJBQW1CLENBQUMsS0FBSyxDQUFDO29CQUN4QixXQUFXLEVBQUUsSUFBSTtvQkFDakIsTUFBTSxFQUFFLHVEQUF1RDtvQkFDL0QsS0FBSyxFQUFFLG1CQUFtQjtpQkFDM0IsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ04sT0FBTyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUMzQzs7Y0FDSyxHQUFHLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7O1lBQ3hDLEdBQUcsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQzs7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QVksQ0FBQyxDQUFDO0lBQ3pELENBQUM7Ozs7Ozs7O0lBRU8sVUFBVSxDQUFDLElBQVUsRUFBRSxJQUFZLEVBQUUsWUFBb0I7O2NBQ3pELElBQUksR0FBUSxJQUFJO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRWpDLHdCQUF3QjtRQUN4QixPQUFPLG1CQUFPLElBQUksRUFBQSxDQUFDO0lBQ3JCLENBQUM7OztZQXJFRixVQUFVLFNBQ1QsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDOzs7O1lBSmQsZ0JBQWdCLHVCQU9ULE1BQU0sU0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7Ozs7Ozs7O0lBQTFDLDBDQUFzRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Zm9yd2FyZFJlZiwgSW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TmcySW1nTWF4U2VydmljZX0gZnJvbSAnbmcyLWltZy1tYXgnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoXG4gIHtwcm92aWRlZEluOiAncm9vdCd9XG4pXG5leHBvcnQgY2xhc3MgSW1nQ3JvcFNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gTmcySW1nTWF4U2VydmljZSkpIHByaXZhdGUgbmcySW1nTWF4U2VydmljZTogTmcySW1nTWF4U2VydmljZSkge1xuICB9XG5cbiAgcHVibGljIGNyb3BJbWFnZShmaWxlOiBGaWxlLCB0b1dpZHRoOiBudW1iZXIsIHRvSGVpZ2h0OiBudW1iZXIsIHN0YXJ0WDogbnVtYmVyID0gMCwgc3RhcnRZOiBudW1iZXIgPSAwKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCBjcm9wcGVkSW1hZ2VTdWJqZWN0OiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gICAgaWYgKGZpbGUudHlwZSAhPT0gJ2ltYWdlL2pwZWcnICYmIGZpbGUudHlwZSAhPT0gJ2ltYWdlL3BuZycpIHtcbiAgICAgIC8vIEVORCBPRiBDUk9QUElOR1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNyb3BwZWRJbWFnZVN1YmplY3QuZXJyb3Ioe1xuICAgICAgICAgIGNyb3BwZWRGaWxlOiBmaWxlLFxuICAgICAgICAgIHJlYXNvbjogJ0ZpbGUgcHJvdmlkZWQgaXMgbmVpdGhlciBvZiB0eXBlIGpwZyBub3Igb2YgdHlwZSBwbmcuJyxcbiAgICAgICAgICBlcnJvcjogJ0lOVkFMSURfRVhURU5TSU9OJ1xuICAgICAgICB9KTtcbiAgICAgIH0sIDApO1xuICAgICAgcmV0dXJuIGNyb3BwZWRJbWFnZVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuICAgIGNvbnN0IGN2cyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGxldCBjdHggPSBjdnMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgdGhpcy5uZzJJbWdNYXhTZXJ2aWNlLmdldEVYSUZPcmllbnRlZEltYWdlKGltZykudGhlbihvcmllbnRlZEltZyA9PiB7XG4gICAgICAgIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKGltZy5zcmMpO1xuICAgICAgICBjdnMud2lkdGggPSB0b1dpZHRoO1xuICAgICAgICBjdnMuaGVpZ2h0ID0gdG9IZWlnaHQ7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2Uob3JpZW50ZWRJbWcsIHN0YXJ0WCwgc3RhcnRZLCB0b1dpZHRoLCB0b0hlaWdodCwgMCwgMCwgdG9XaWR0aCwgdG9IZWlnaHQpO1xuICAgICAgICBjb25zdCBpbWFnZURhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIG9yaWVudGVkSW1nLndpZHRoLCBvcmllbnRlZEltZy5oZWlnaHQpO1xuICAgICAgICBsZXQgdXNlQWxwaGEgPSB0cnVlO1xuICAgICAgICBpZiAoZmlsZS50eXBlID09PSAnaW1hZ2UvanBlZycgfHwgKGZpbGUudHlwZSA9PT0gJ2ltYWdlL3BuZycgJiYgIXRoaXMuaXNJbWdVc2luZ0FscGhhKGltYWdlRGF0YSkpKSB7XG4gICAgICAgICAgLy8gaW1hZ2Ugd2l0aG91dCBhbHBoYVxuICAgICAgICAgIHVzZUFscGhhID0gZmFsc2U7XG4gICAgICAgICAgY3R4ID0gY3ZzLmdldENvbnRleHQoJzJkJywgeydhbHBoYSc6IGZhbHNlfSk7XG4gICAgICAgICAgY3R4LmRyYXdJbWFnZShvcmllbnRlZEltZywgc3RhcnRYLCBzdGFydFksIHRvV2lkdGgsIHRvSGVpZ2h0LCAwLCAwLCB0b1dpZHRoLCB0b0hlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgY3ZzLnRvQmxvYigoYmxvYikgPT4ge1xuICAgICAgICAgIGNvbnN0IG5ld0ZpbGU6IEZpbGUgPSB0aGlzLmdlbmVyYXRlUmVzdWx0RmlsZShibG9iLCBmaWxlLm5hbWUsIGZpbGUudHlwZSwgbmV3IERhdGUoKS5nZXRUaW1lKCkpO1xuICAgICAgICAgIC8vIEVORCBPRiBDUk9QUElOR1xuICAgICAgICAgIGNyb3BwZWRJbWFnZVN1YmplY3QubmV4dChuZXdGaWxlKTtcbiAgICAgICAgfSwgdXNlQWxwaGEgPyAnaW1hZ2UvcG5nJyA6ICdpbWFnZS9qcGVnJyk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGltZy5zcmMgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKTtcbiAgICByZXR1cm4gY3JvcHBlZEltYWdlU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNJbWdVc2luZ0FscGhhKGltYWdlRGF0YSk6IGJvb2xlYW4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW1hZ2VEYXRhLmRhdGEubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgIGlmIChpbWFnZURhdGEuZGF0YVtpICsgM10gIT09IDI1NSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVJlc3VsdEZpbGUoYmxvYjogQmxvYiwgbmFtZTogc3RyaW5nLCB0eXBlOiBzdHJpbmcsIGxhc3RNb2RpZmllZDogbnVtYmVyKTogRmlsZSB7XG4gICAgY29uc3QgcmVzdWx0RmlsZSA9IG5ldyBCbG9iKFtibG9iXSwge3R5cGU6IHR5cGV9KTtcbiAgICByZXR1cm4gdGhpcy5ibG9iVG9GaWxlKHJlc3VsdEZpbGUsIG5hbWUsIGxhc3RNb2RpZmllZCk7XG4gIH1cblxuICBwcml2YXRlIGJsb2JUb0ZpbGUoYmxvYjogQmxvYiwgbmFtZTogc3RyaW5nLCBsYXN0TW9kaWZpZWQ6IG51bWJlcik6IEZpbGUge1xuICAgIGNvbnN0IGZpbGU6IGFueSA9IGJsb2I7XG4gICAgZmlsZS5uYW1lID0gbmFtZTtcbiAgICBmaWxlLmxhc3RNb2RpZmllZCA9IGxhc3RNb2RpZmllZDtcblxuICAgIC8vIENhc3QgdG8gYSBGaWxlKCkgdHlwZVxuICAgIHJldHVybiA8RmlsZT4gZmlsZTtcbiAgfVxufVxuIl19