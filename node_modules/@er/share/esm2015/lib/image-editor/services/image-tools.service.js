/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { forwardRef, Inject, Injectable } from '@angular/core';
import { Ng2ImgMaxService } from 'ng2-img-max';
import { Subject } from 'rxjs';
import { ImgCropService } from './img-crop.service';
import { ImgResizeExactService } from './img-resize-exact.service';
import * as i0 from "@angular/core";
import * as i1 from "./img-resize-exact.service";
import * as i2 from "ng2-img-max/dist/src/ng2-img-max.service";
import * as i3 from "./img-crop.service";
export class ImageToolsService {
    /**
     * @param {?} imgResizeExactService
     * @param {?} ng2ImgMaxService
     * @param {?} imgCropService
     */
    constructor(imgResizeExactService, ng2ImgMaxService, imgCropService) {
        this.imgResizeExactService = imgResizeExactService;
        this.ng2ImgMaxService = ng2ImgMaxService;
        this.imgCropService = imgCropService;
    }
    /**
     * @param {?} files
     * @param {?} maxSizeInMB
     * @param {?=} ignoreAlpha
     * @param {?=} logExecutionTime
     * @return {?}
     */
    compress(files, maxSizeInMB, ignoreAlpha = false, logExecutionTime = false) {
        return this.ng2ImgMaxService.compress(files, maxSizeInMB, ignoreAlpha, logExecutionTime);
    }
    /**
     * @param {?} files
     * @param {?} maxWidth
     * @param {?} maxHeight
     * @param {?=} logExecutionTime
     * @return {?}
     */
    resize(files, maxWidth, maxHeight, logExecutionTime = false) {
        return this.ng2ImgMaxService.resize(files, maxWidth, maxHeight, logExecutionTime);
    }
    /**
     * @param {?} files
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} startX
     * @param {?=} startY
     * @return {?}
     */
    crop(files, toWidth, toHeight, startX = 0, startY = 0) {
        /** @type {?} */
        const croppedFileSubject = new Subject();
        files.forEach((file) => {
            this.cropImage(file, toWidth, toHeight, startX, startY).subscribe((value) => {
                croppedFileSubject.next(value);
            }, error => {
                croppedFileSubject.error(error);
            });
        });
        return croppedFileSubject.asObservable();
    }
    /**
     * @param {?} files
     * @param {?} toWidth
     * @param {?} toHeight
     * @return {?}
     */
    resizeExactCrop(files, toWidth, toHeight) {
        /** @type {?} */
        const resizedFileSubject = new Subject();
        files.forEach((file) => {
            this.resizeExactCropImage(file, toWidth, toHeight).subscribe((value) => {
                resizedFileSubject.next(value);
            }, error => {
                resizedFileSubject.error(error);
            });
        });
        return resizedFileSubject.asObservable();
    }
    /**
     * @param {?} files
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} fillColor
     * @return {?}
     */
    resizeExactFill(files, toWidth, toHeight, fillColor) {
        /** @type {?} */
        const resizedFileSubject = new Subject();
        files.forEach((file) => {
            this.resizeExactFillImage(file, toWidth, toHeight, fillColor).subscribe((value) => {
                resizedFileSubject.next(value);
            }, error => {
                resizedFileSubject.error(error);
            });
        });
        return resizedFileSubject.asObservable();
    }
    /**
     * @param {?} file
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} fillColor
     * @return {?}
     */
    resizeExactFillImage(file, toWidth, toHeight, fillColor) {
        return this.imgResizeExactService.resizeExactFill(file, toWidth, toHeight, fillColor);
    }
    /**
     * @param {?} file
     * @param {?} toWidth
     * @param {?} toHeight
     * @return {?}
     */
    resizeExactCropImage(file, toWidth, toHeight) {
        return this.imgResizeExactService.resizeExactCrop(file, toWidth, toHeight);
    }
    /**
     * @param {?} file
     * @param {?} toWidth
     * @param {?} toHeight
     * @param {?=} startX
     * @param {?=} startY
     * @return {?}
     */
    cropImage(file, toWidth, toHeight, startX = 0, startY = 0) {
        return this.imgCropService.cropImage(file, toWidth, toHeight, startX, startY);
    }
    /**
     * @param {?} file
     * @param {?} maxSizeInMB
     * @param {?=} ignoreAlpha
     * @param {?=} logExecutionTime
     * @return {?}
     */
    compressImage(file, maxSizeInMB, ignoreAlpha = false, logExecutionTime = false) {
        return this.ng2ImgMaxService.compressImage(file, maxSizeInMB, ignoreAlpha, logExecutionTime);
    }
    /**
     * @param {?} file
     * @param {?} maxWidth
     * @param {?} maxHeight
     * @param {?=} logExecutionTime
     * @return {?}
     */
    resizeImage(file, maxWidth, maxHeight, logExecutionTime = false) {
        return this.ng2ImgMaxService.resizeImage(file, maxWidth, maxHeight, logExecutionTime);
    }
    /**
     * @param {?} image
     * @return {?}
     */
    getEXIFOrientedImage(image) {
        return this.ng2ImgMaxService.getEXIFOrientedImage(image);
    }
}
ImageToolsService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ImageToolsService.ctorParameters = () => [
    { type: ImgResizeExactService, decorators: [{ type: Inject, args: [forwardRef(() => ImgResizeExactService),] }] },
    { type: Ng2ImgMaxService, decorators: [{ type: Inject, args: [forwardRef(() => Ng2ImgMaxService),] }] },
    { type: ImgCropService, decorators: [{ type: Inject, args: [forwardRef(() => ImgCropService),] }] }
];
/** @nocollapse */ ImageToolsService.ngInjectableDef = i0.defineInjectable({ factory: function ImageToolsService_Factory() { return new ImageToolsService(i0.inject(i1.ImgResizeExactService), i0.inject(i2.Ng2ImgMaxService), i0.inject(i3.ImgCropService)); }, token: ImageToolsService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ImageToolsService.prototype.imgResizeExactService;
    /**
     * @type {?}
     * @private
     */
    ImageToolsService.prototype.ng2ImgMaxService;
    /**
     * @type {?}
     * @private
     */
    ImageToolsService.prototype.imgCropService;
}
//# sourceMappingURL=data:application/json;base64,