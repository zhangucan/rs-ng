{"version":3,"file":"er-share.umd.js.map","sources":["ng://@er/share/lib/image-editor/component.ts","ng://@er/share/lib/image-editor/services/img-crop.service.ts","ng://@er/share/lib/image-editor/services/img-resize-exact.service.ts","ng://@er/share/lib/image-editor/services/image-tools.service.ts","ng://@er/share/lib/image-editor/module.ts"],"sourcesContent":["import {Component} from '@angular/core';\n\n@Component({\n  selector: 'er-image-editor',\n  template: ``\n})\nexport class ImageEditorComponent {\n\n}\n","import {forwardRef, Inject, Injectable} from '@angular/core';\nimport {Ng2ImgMaxService} from 'ng2-img-max';\nimport {Observable, Subject} from 'rxjs';\n\n@Injectable(\n  {providedIn: 'root'}\n)\nexport class ImgCropService {\n  constructor(@Inject(forwardRef(() => Ng2ImgMaxService)) private ng2ImgMaxService: Ng2ImgMaxService) {\n  }\n\n  public cropImage(file: File, toWidth: number, toHeight: number, startX: number = 0, startY: number = 0): Observable<any> {\n    const croppedImageSubject: Subject<any> = new Subject<any>();\n    if (file.type !== 'image/jpeg' && file.type !== 'image/png') {\n      // END OF CROPPING\n      setTimeout(() => {\n        croppedImageSubject.error({\n          croppedFile: file,\n          reason: 'File provided is neither of type jpg nor of type png.',\n          error: 'INVALID_EXTENSION'\n        });\n      }, 0);\n      return croppedImageSubject.asObservable();\n    }\n    const cvs = document.createElement('canvas');\n    let ctx = cvs.getContext('2d');\n    const img = new Image();\n    img.onload = () => {\n      this.ng2ImgMaxService.getEXIFOrientedImage(img).then(orientedImg => {\n        window.URL.revokeObjectURL(img.src);\n        cvs.width = toWidth;\n        cvs.height = toHeight;\n        ctx.drawImage(orientedImg, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);\n        const imageData = ctx.getImageData(0, 0, orientedImg.width, orientedImg.height);\n        let useAlpha = true;\n        if (file.type === 'image/jpeg' || (file.type === 'image/png' && !this.isImgUsingAlpha(imageData))) {\n          // image without alpha\n          useAlpha = false;\n          ctx = cvs.getContext('2d', {'alpha': false});\n          ctx.drawImage(orientedImg, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);\n        }\n        cvs.toBlob((blob) => {\n          const newFile: File = this.generateResultFile(blob, file.name, file.type, new Date().getTime());\n          // END OF CROPPING\n          croppedImageSubject.next(newFile);\n        }, useAlpha ? 'image/png' : 'image/jpeg');\n      });\n    };\n    img.src = window.URL.createObjectURL(file);\n    return croppedImageSubject.asObservable();\n  }\n\n  private isImgUsingAlpha(imageData): boolean {\n    for (let i = 0; i < imageData.data.length; i += 4) {\n      if (imageData.data[i + 3] !== 255) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private generateResultFile(blob: Blob, name: string, type: string, lastModified: number): File {\n    const resultFile = new Blob([blob], {type: type});\n    return this.blobToFile(resultFile, name, lastModified);\n  }\n\n  private blobToFile(blob: Blob, name: string, lastModified: number): File {\n    const file: any = blob;\n    file.name = name;\n    file.lastModified = lastModified;\n\n    // Cast to a File() type\n    return <File> file;\n  }\n}\n","import {forwardRef, Inject, Injectable} from '@angular/core';\nimport {Ng2ImgMaxService} from 'ng2-img-max';\nimport {Observable, Subject} from 'rxjs';\nimport {ImgCropService} from './img-crop.service';\n\n@Injectable(\n  {providedIn: 'root'}\n)\nexport class ImgResizeExactService {\n  constructor(@Inject(forwardRef(() => Ng2ImgMaxService)) private ng2ImgMaxService: Ng2ImgMaxService,\n              @Inject(forwardRef(() => ImgCropService)) private imgCropService: ImgCropService) {\n  }\n\n  public resizeExactFill(file: File, toWidth: number, toHeight: number, fillColor?: string): Observable<any> {\n    const resizedImageSubject: Subject<any> = new Subject<any>();\n    if (file.type !== 'image/jpeg' && file.type !== 'image/png') {\n      setTimeout(() => {\n        resizedImageSubject.error({\n          resizedFile: file,\n          reason: 'File provided is neither of type jpg nor of type png.',\n          error: 'INVALID_EXTENSION'\n        });\n      }, 0);\n      return resizedImageSubject.asObservable();\n    }\n    const img = new Image();\n    img.onload = () => {\n      this.ng2ImgMaxService.getEXIFOrientedImage(img).then(orientedImg => {\n        window.URL.revokeObjectURL(img.src);\n        const imgRatio = orientedImg.width / orientedImg.height;\n        const resizedRatio = toWidth / toHeight;\n        /* ratio > 1 means width > height */\n\n        /* setting one parameter of ng2ImgMaxService very high will ensure that the resizing will fit the other provided parameter */\n        let resizeHeight = 100000;\n        let resizeWidth = 100000;\n\n        if (imgRatio > resizedRatio) {\n          /* the original height is smaller than the resized height as in ratio, therefore we have to resize to width, then fill to the height */\n          resizeWidth = toWidth;\n        } else if (imgRatio <= resizedRatio) {\n          /* the original height is bigger than the resized height as in ratio, therefore we can resize to height, then fill to the width */\n          resizeHeight = toHeight;\n        }\n\n        this.ng2ImgMaxService.resize([file], resizeWidth, resizeHeight).subscribe((resizeResult) => {\n\n          /* To fill the image based on the center, we calculate where the img needs to be positioned to be centered*/\n          let startX = 0;\n          let startY = 0;\n\n          /* one side is already resized exactly to the desired size, now fill the other side */\n          if (resizeWidth === 100000) {\n            /* resized to height -> as we fill to the width, we have to set startX */\n            const newImgWidth = orientedImg.width / (orientedImg.height / toHeight);\n            startX = (newImgWidth - toWidth) / 2;\n          } else if (resizeHeight === 100000) {\n            /* resized to width -> as we fill to the height, we have to set startY */\n            const newImgHeight = orientedImg.height / (orientedImg.width / toWidth);\n            startY = (newImgHeight - toHeight) / 2;\n          }\n\n          const img = new Image();\n          const cvs = document.createElement('canvas');\n          let ctx = cvs.getContext('2d');\n          img.onload = () => {\n            cvs.width = toWidth;\n            cvs.height = toHeight;\n            if (fillColor) {\n              ctx.fillStyle = fillColor;\n              ctx.fillRect(0, 0, toWidth, toHeight);\n            }\n            ctx.drawImage(img, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);\n            const imageData = ctx.getImageData(0, 0, toWidth, toHeight);\n            let useAlpha = true;\n            if (file.type === 'image/jpeg' || (file.type === 'image/png' && !this.isImgUsingAlpha(imageData))) {\n              // image without alpha\n              useAlpha = false;\n              ctx = cvs.getContext('2d', {'alpha': false});\n              if (fillColor) {\n                ctx.fillStyle = fillColor;\n                ctx.fillRect(0, 0, toWidth, toHeight);\n              }\n              ctx.drawImage(img, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);\n            }\n            cvs.toBlob((blob) => {\n              window.URL.revokeObjectURL(img.src);\n              const newFile: File = this.generateResultFile(blob, file.name, file.type, new Date().getTime());\n              // END OF CROPPING\n              resizedImageSubject.next(newFile);\n            }, useAlpha ? 'image/png' : 'image/jpeg');\n          };\n          img.src = window.URL.createObjectURL(resizeResult);\n        }, error => {\n          // something went wrong\n          resizedImageSubject.error(error);\n        });\n      });\n    };\n    img.src = window.URL.createObjectURL(file);\n    return resizedImageSubject.asObservable();\n  }\n\n  public resizeExactCrop(file: File, toWidth: number, toHeight: number): Observable<any> {\n    const resizedImageSubject: Subject<any> = new Subject<any>();\n    if (file.type !== 'image/jpeg' && file.type !== 'image/png') {\n      setTimeout(() => {\n        resizedImageSubject.error({\n          resizedFile: file,\n          reason: 'File provided is neither of type jpg nor of type png.',\n          error: 'INVALID_EXTENSION'\n        });\n      }, 0);\n      return resizedImageSubject.asObservable();\n    }\n    const img = new Image();\n    img.onload = () => {\n      this.ng2ImgMaxService.getEXIFOrientedImage(img).then(orientedImg => {\n        window.URL.revokeObjectURL(img.src);\n        const imgRatio = orientedImg.width / orientedImg.height;\n        const resizedRatio = toWidth / toHeight;\n        /* ratio > 1 means width > height */\n\n        /* setting one parameter of ng2ImgMaxService very high will ensure that the resizing will fit the other provided parameter */\n        let resizeHeight = 100000;\n        let resizeWidth = 100000;\n\n        /* To crop the image based on the center, so we will keep the most important part of the image, we calculate to crop from where to where */\n        let startX = 0;\n        let startY = 0;\n\n        if (imgRatio > resizedRatio) {\n          /* the original height is smaller than the resized height as in ratio, therefore we have to resize to height, then crop to the width */\n          resizeHeight = toHeight;\n        } else if (imgRatio <= resizedRatio) {\n          /* the original height is bigger than the resized height as in ratio, therefore we can resize to width, then crop to the height */\n          resizeWidth = toWidth;\n        }\n\n        this.ng2ImgMaxService.resize([file], resizeWidth, resizeHeight).subscribe((resizeResult) => {\n          /* one side is already resized exactly to the desired size, now crop the other side */\n          if (resizeWidth === 100000) {\n            /* resized to height -> as we crop to the width, we have to set startX */\n            const newImgWidth = orientedImg.width / (orientedImg.height / toHeight);\n            startX = (newImgWidth - toWidth) / 2;\n          } else if (resizeHeight === 100000) {\n            /* resized to width -> as we crop to the height, we have to set startY */\n            const newImgHeight = orientedImg.height / (orientedImg.width / toWidth);\n            startY = (newImgHeight - toHeight) / 2;\n          }\n          this.imgCropService.cropImage(resizeResult, toWidth, toHeight, startX, startY).subscribe((cropResult) => {\n            // all good, result is a file\n            resizedImageSubject.next(cropResult);\n          }, error => {\n            // something went wrong\n            resizedImageSubject.error(error);\n          });\n        }, error => {\n          // something went wrong\n          resizedImageSubject.error(error);\n        });\n      });\n    };\n    img.src = window.URL.createObjectURL(file);\n    return resizedImageSubject.asObservable();\n  }\n\n  private isImgUsingAlpha(imageData): boolean {\n    for (let i = 0; i < imageData.data.length; i += 4) {\n      if (imageData.data[i + 3] !== 255) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private generateResultFile(blob: Blob, name: string, type: string, lastModified: number): File {\n    const resultFile = new Blob([blob], {type: type});\n    return this.blobToFile(resultFile, name, lastModified);\n  }\n\n  private blobToFile(blob: Blob, name: string, lastModified: number): File {\n    const file: any = blob;\n    file.name = name;\n    file.lastModified = lastModified;\n\n    // Cast to a File() type\n    return <File> file;\n  }\n}\n","import {forwardRef, Inject, Injectable} from '@angular/core';\nimport {Ng2ImgMaxService} from 'ng2-img-max';\nimport {Observable, Subject} from 'rxjs';\nimport {ImgCropService} from './img-crop.service';\nimport {ImgResizeExactService} from './img-resize-exact.service';\n\n@Injectable(\n  {providedIn: 'root'}\n)\nexport class ImageToolsService {\n  constructor(@Inject(forwardRef(() => ImgResizeExactService)) private imgResizeExactService: ImgResizeExactService,\n              @Inject(forwardRef(() => Ng2ImgMaxService)) private ng2ImgMaxService: Ng2ImgMaxService,\n              @Inject(forwardRef(() => ImgCropService)) private imgCropService: ImgCropService) {\n  }\n\n  public compress(files: File[], maxSizeInMB: number, ignoreAlpha: boolean = false, logExecutionTime: boolean = false): Observable<any> {\n    return this.ng2ImgMaxService.compress(files, maxSizeInMB, ignoreAlpha, logExecutionTime);\n  }\n\n  public resize(files: File[], maxWidth: number, maxHeight: number, logExecutionTime: boolean = false): Observable<any> {\n    return this.ng2ImgMaxService.resize(files, maxWidth, maxHeight, logExecutionTime);\n  }\n\n  public crop(files: File[], toWidth: number, toHeight: number, startX: number = 0, startY: number = 0): Observable<any> {\n    const croppedFileSubject: Subject<any> = new Subject<any>();\n    files.forEach((file) => {\n      this.cropImage(file, toWidth, toHeight, startX, startY).subscribe((value) => {\n        croppedFileSubject.next(value);\n      }, error => {\n        croppedFileSubject.error(error);\n      });\n    });\n    return croppedFileSubject.asObservable();\n  }\n\n  public resizeExactCrop(files: File[], toWidth: number, toHeight: number): Observable<any> {\n    const resizedFileSubject: Subject<any> = new Subject<any>();\n    files.forEach((file) => {\n      this.resizeExactCropImage(file, toWidth, toHeight).subscribe((value) => {\n        resizedFileSubject.next(value);\n      }, error => {\n        resizedFileSubject.error(error);\n      });\n    });\n    return resizedFileSubject.asObservable();\n  }\n\n  public resizeExactFill(files: File[], toWidth: number, toHeight: number, fillColor?: string): Observable<any> {\n    const resizedFileSubject: Subject<any> = new Subject<any>();\n    files.forEach((file) => {\n      this.resizeExactFillImage(file, toWidth, toHeight, fillColor).subscribe((value) => {\n        resizedFileSubject.next(value);\n      }, error => {\n        resizedFileSubject.error(error);\n      });\n    });\n    return resizedFileSubject.asObservable();\n  }\n\n  public resizeExactFillImage(file: File, toWidth: number, toHeight: number, fillColor?: string): Observable<any> {\n    return this.imgResizeExactService.resizeExactFill(file, toWidth, toHeight, fillColor);\n  }\n\n  public resizeExactCropImage(file: File, toWidth: number, toHeight: number): Observable<any> {\n    return this.imgResizeExactService.resizeExactCrop(file, toWidth, toHeight);\n  }\n\n  public cropImage(file: File, toWidth: number, toHeight: number, startX: number = 0, startY: number = 0): Observable<any> {\n    return this.imgCropService.cropImage(file, toWidth, toHeight, startX, startY);\n  }\n\n  public compressImage(file: File, maxSizeInMB: number, ignoreAlpha: boolean = false, logExecutionTime: boolean = false): Observable<any> {\n    return this.ng2ImgMaxService.compressImage(file, maxSizeInMB, ignoreAlpha, logExecutionTime);\n  }\n\n  public resizeImage(file: File, maxWidth: number, maxHeight: number, logExecutionTime: boolean = false): Observable<any> {\n    return this.ng2ImgMaxService.resizeImage(file, maxWidth, maxHeight, logExecutionTime);\n  }\n\n  public getEXIFOrientedImage(image: HTMLImageElement): Promise<HTMLImageElement> {\n    return this.ng2ImgMaxService.getEXIFOrientedImage(image);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {ErCoreModule} from '@er/core';\n\nimport {Ng2ImgMaxModule, Ng2ImgMaxService} from 'ng2-img-max';\nimport {ImageEditorComponent} from './component';\nimport {ImageToolsService} from './services/image-tools.service';\nimport {ImgCropService} from './services/img-crop.service';\nimport {ImgResizeExactService} from './services/img-resize-exact.service';\n\nexport {ImageToolsService} from './services/image-tools.service';\nexport {ImgCropService} from './services/img-crop.service';\nexport {ImgResizeExactService} from './services/img-resize-exact.service';\n\n@NgModule({\n  imports: [\n    ErCoreModule,\n    Ng2ImgMaxModule\n  ],\n  declarations: [\n    ImageEditorComponent\n  ],\n  providers: [\n    {provide: ImgResizeExactService, useClass: ImgResizeExactService},\n    {provide: ImgCropService, useClass: ImgCropService},\n    {provide: ImageToolsService, useClass: ImageToolsService},\n    {provide: Ng2ImgMaxService, useClass: Ng2ImgMaxService}\n  ],\n  exports: [\n    ImageEditorComponent\n  ]\n})\nexport class ErImageEditorModule {\n\n}\n"],"names":["Component","Subject","Injectable","Ng2ImgMaxService","Inject","forwardRef","NgModule","ErCoreModule","Ng2ImgMaxModule"],"mappings":"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"}
