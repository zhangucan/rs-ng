{"version":3,"sources":["ng://@er/share/lib/image-editor/component.ts","ng://@er/share/lib/image-editor/services/img-crop.service.ts","ng://@er/share/lib/image-editor/services/img-resize-exact.service.ts","ng://@er/share/lib/image-editor/services/image-tools.service.ts","ng://@er/share/lib/image-editor/module.ts"],"names":["ImageEditorComponent","Component","args","selector","template","ImgCropService","ng2ImgMaxService","this","prototype","cropImage","file","toWidth","toHeight","startX","startY","_this","croppedImageSubject","Subject","type","setTimeout","error","croppedFile","reason","asObservable","cvs","document","createElement","ctx","getContext","img","Image","onload","getEXIFOrientedImage","then","orientedImg","window","URL","revokeObjectURL","src","width","height","drawImage","imageData","getImageData","useAlpha","isImgUsingAlpha","alpha","toBlob","blob","newFile","generateResultFile","name","Date","getTime","next","createObjectURL","i","data","length","lastModified","resultFile","Blob","blobToFile","Injectable","providedIn","Ng2ImgMaxService","decorators","Inject","forwardRef","ImgResizeExactService","imgCropService","resizeExactFill","fillColor","resizedImageSubject","resizedFile","imgRatio","resizedRatio","resizeHeight","resizeWidth","resize","subscribe","resizeResult","newImgWidth","newImgHeight","fillStyle","fillRect","resizeExactCrop","cropResult","ImageToolsService","imgResizeExactService","compress","files","maxSizeInMB","ignoreAlpha","logExecutionTime","maxWidth","maxHeight","crop","croppedFileSubject","forEach","value","resizedFileSubject","resizeExactCropImage","resizeExactFillImage","compressImage","resizeImage","image","ErImageEditorModule","NgModule","imports","ErCoreModule","Ng2ImgMaxModule","declarations","providers","provide","useClass","exports"],"mappings":"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","sourcesContent":["import {Component} from '@angular/core';\n\n@Component({\n  selector: 'er-image-editor',\n  template: ``\n})\nexport class ImageEditorComponent {\n\n}\n","import {forwardRef, Inject, Injectable} from '@angular/core';\nimport {Ng2ImgMaxService} from 'ng2-img-max';\nimport {Observable, Subject} from 'rxjs';\n\n@Injectable(\n  {providedIn: 'root'}\n)\nexport class ImgCropService {\n  constructor(@Inject(forwardRef(() => Ng2ImgMaxService)) private ng2ImgMaxService: Ng2ImgMaxService) {\n  }\n\n  public cropImage(file: File, toWidth: number, toHeight: number, startX: number = 0, startY: number = 0): Observable<any> {\n    const croppedImageSubject: Subject<any> = new Subject<any>();\n    if (file.type !== 'image/jpeg' && file.type !== 'image/png') {\n      // END OF CROPPING\n      setTimeout(() => {\n        croppedImageSubject.error({\n          croppedFile: file,\n          reason: 'File provided is neither of type jpg nor of type png.',\n          error: 'INVALID_EXTENSION'\n        });\n      }, 0);\n      return croppedImageSubject.asObservable();\n    }\n    const cvs = document.createElement('canvas');\n    let ctx = cvs.getContext('2d');\n    const img = new Image();\n    img.onload = () => {\n      this.ng2ImgMaxService.getEXIFOrientedImage(img).then(orientedImg => {\n        window.URL.revokeObjectURL(img.src);\n        cvs.width = toWidth;\n        cvs.height = toHeight;\n        ctx.drawImage(orientedImg, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);\n        const imageData = ctx.getImageData(0, 0, orientedImg.width, orientedImg.height);\n        let useAlpha = true;\n        if (file.type === 'image/jpeg' || (file.type === 'image/png' && !this.isImgUsingAlpha(imageData))) {\n          // image without alpha\n          useAlpha = false;\n          ctx = cvs.getContext('2d', {'alpha': false});\n          ctx.drawImage(orientedImg, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);\n        }\n        cvs.toBlob((blob) => {\n          const newFile: File = this.generateResultFile(blob, file.name, file.type, new Date().getTime());\n          // END OF CROPPING\n          croppedImageSubject.next(newFile);\n        }, useAlpha ? 'image/png' : 'image/jpeg');\n      });\n    };\n    img.src = window.URL.createObjectURL(file);\n    return croppedImageSubject.asObservable();\n  }\n\n  private isImgUsingAlpha(imageData): boolean {\n    for (let i = 0; i < imageData.data.length; i += 4) {\n      if (imageData.data[i + 3] !== 255) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private generateResultFile(blob: Blob, name: string, type: string, lastModified: number): File {\n    const resultFile = new Blob([blob], {type: type});\n    return this.blobToFile(resultFile, name, lastModified);\n  }\n\n  private blobToFile(blob: Blob, name: string, lastModified: number): File {\n    const file: any = blob;\n    file.name = name;\n    file.lastModified = lastModified;\n\n    // Cast to a File() type\n    return <File> file;\n  }\n}\n","import {forwardRef, Inject, Injectable} from '@angular/core';\nimport {Ng2ImgMaxService} from 'ng2-img-max';\nimport {Observable, Subject} from 'rxjs';\nimport {ImgCropService} from './img-crop.service';\n\n@Injectable(\n  {providedIn: 'root'}\n)\nexport class ImgResizeExactService {\n  constructor(@Inject(forwardRef(() => Ng2ImgMaxService)) private ng2ImgMaxService: Ng2ImgMaxService,\n              @Inject(forwardRef(() => ImgCropService)) private imgCropService: ImgCropService) {\n  }\n\n  public resizeExactFill(file: File, toWidth: number, toHeight: number, fillColor?: string): Observable<any> {\n    const resizedImageSubject: Subject<any> = new Subject<any>();\n    if (file.type !== 'image/jpeg' && file.type !== 'image/png') {\n      setTimeout(() => {\n        resizedImageSubject.error({\n          resizedFile: file,\n          reason: 'File provided is neither of type jpg nor of type png.',\n          error: 'INVALID_EXTENSION'\n        });\n      }, 0);\n      return resizedImageSubject.asObservable();\n    }\n    const img = new Image();\n    img.onload = () => {\n      this.ng2ImgMaxService.getEXIFOrientedImage(img).then(orientedImg => {\n        window.URL.revokeObjectURL(img.src);\n        const imgRatio = orientedImg.width / orientedImg.height;\n        const resizedRatio = toWidth / toHeight;\n        /* ratio > 1 means width > height */\n\n        /* setting one parameter of ng2ImgMaxService very high will ensure that the resizing will fit the other provided parameter */\n        let resizeHeight = 100000;\n        let resizeWidth = 100000;\n\n        if (imgRatio > resizedRatio) {\n          /* the original height is smaller than the resized height as in ratio, therefore we have to resize to width, then fill to the height */\n          resizeWidth = toWidth;\n        } else if (imgRatio <= resizedRatio) {\n          /* the original height is bigger than the resized height as in ratio, therefore we can resize to height, then fill to the width */\n          resizeHeight = toHeight;\n        }\n\n        this.ng2ImgMaxService.resize([file], resizeWidth, resizeHeight).subscribe((resizeResult) => {\n\n          /* To fill the image based on the center, we calculate where the img needs to be positioned to be centered*/\n          let startX = 0;\n          let startY = 0;\n\n          /* one side is already resized exactly to the desired size, now fill the other side */\n          if (resizeWidth === 100000) {\n            /* resized to height -> as we fill to the width, we have to set startX */\n            const newImgWidth = orientedImg.width / (orientedImg.height / toHeight);\n            startX = (newImgWidth - toWidth) / 2;\n          } else if (resizeHeight === 100000) {\n            /* resized to width -> as we fill to the height, we have to set startY */\n            const newImgHeight = orientedImg.height / (orientedImg.width / toWidth);\n            startY = (newImgHeight - toHeight) / 2;\n          }\n\n          const img = new Image();\n          const cvs = document.createElement('canvas');\n          let ctx = cvs.getContext('2d');\n          img.onload = () => {\n            cvs.width = toWidth;\n            cvs.height = toHeight;\n            if (fillColor) {\n              ctx.fillStyle = fillColor;\n              ctx.fillRect(0, 0, toWidth, toHeight);\n            }\n            ctx.drawImage(img, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);\n            const imageData = ctx.getImageData(0, 0, toWidth, toHeight);\n            let useAlpha = true;\n            if (file.type === 'image/jpeg' || (file.type === 'image/png' && !this.isImgUsingAlpha(imageData))) {\n              // image without alpha\n              useAlpha = false;\n              ctx = cvs.getContext('2d', {'alpha': false});\n              if (fillColor) {\n                ctx.fillStyle = fillColor;\n                ctx.fillRect(0, 0, toWidth, toHeight);\n              }\n              ctx.drawImage(img, startX, startY, toWidth, toHeight, 0, 0, toWidth, toHeight);\n            }\n            cvs.toBlob((blob) => {\n              window.URL.revokeObjectURL(img.src);\n              const newFile: File = this.generateResultFile(blob, file.name, file.type, new Date().getTime());\n              // END OF CROPPING\n              resizedImageSubject.next(newFile);\n            }, useAlpha ? 'image/png' : 'image/jpeg');\n          };\n          img.src = window.URL.createObjectURL(resizeResult);\n        }, error => {\n          // something went wrong\n          resizedImageSubject.error(error);\n        });\n      });\n    };\n    img.src = window.URL.createObjectURL(file);\n    return resizedImageSubject.asObservable();\n  }\n\n  public resizeExactCrop(file: File, toWidth: number, toHeight: number): Observable<any> {\n    const resizedImageSubject: Subject<any> = new Subject<any>();\n    if (file.type !== 'image/jpeg' && file.type !== 'image/png') {\n      setTimeout(() => {\n        resizedImageSubject.error({\n          resizedFile: file,\n          reason: 'File provided is neither of type jpg nor of type png.',\n          error: 'INVALID_EXTENSION'\n        });\n      }, 0);\n      return resizedImageSubject.asObservable();\n    }\n    const img = new Image();\n    img.onload = () => {\n      this.ng2ImgMaxService.getEXIFOrientedImage(img).then(orientedImg => {\n        window.URL.revokeObjectURL(img.src);\n        const imgRatio = orientedImg.width / orientedImg.height;\n        const resizedRatio = toWidth / toHeight;\n        /* ratio > 1 means width > height */\n\n        /* setting one parameter of ng2ImgMaxService very high will ensure that the resizing will fit the other provided parameter */\n        let resizeHeight = 100000;\n        let resizeWidth = 100000;\n\n        /* To crop the image based on the center, so we will keep the most important part of the image, we calculate to crop from where to where */\n        let startX = 0;\n        let startY = 0;\n\n        if (imgRatio > resizedRatio) {\n          /* the original height is smaller than the resized height as in ratio, therefore we have to resize to height, then crop to the width */\n          resizeHeight = toHeight;\n        } else if (imgRatio <= resizedRatio) {\n          /* the original height is bigger than the resized height as in ratio, therefore we can resize to width, then crop to the height */\n          resizeWidth = toWidth;\n        }\n\n        this.ng2ImgMaxService.resize([file], resizeWidth, resizeHeight).subscribe((resizeResult) => {\n          /* one side is already resized exactly to the desired size, now crop the other side */\n          if (resizeWidth === 100000) {\n            /* resized to height -> as we crop to the width, we have to set startX */\n            const newImgWidth = orientedImg.width / (orientedImg.height / toHeight);\n            startX = (newImgWidth - toWidth) / 2;\n          } else if (resizeHeight === 100000) {\n            /* resized to width -> as we crop to the height, we have to set startY */\n            const newImgHeight = orientedImg.height / (orientedImg.width / toWidth);\n            startY = (newImgHeight - toHeight) / 2;\n          }\n          this.imgCropService.cropImage(resizeResult, toWidth, toHeight, startX, startY).subscribe((cropResult) => {\n            // all good, result is a file\n            resizedImageSubject.next(cropResult);\n          }, error => {\n            // something went wrong\n            resizedImageSubject.error(error);\n          });\n        }, error => {\n          // something went wrong\n          resizedImageSubject.error(error);\n        });\n      });\n    };\n    img.src = window.URL.createObjectURL(file);\n    return resizedImageSubject.asObservable();\n  }\n\n  private isImgUsingAlpha(imageData): boolean {\n    for (let i = 0; i < imageData.data.length; i += 4) {\n      if (imageData.data[i + 3] !== 255) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private generateResultFile(blob: Blob, name: string, type: string, lastModified: number): File {\n    const resultFile = new Blob([blob], {type: type});\n    return this.blobToFile(resultFile, name, lastModified);\n  }\n\n  private blobToFile(blob: Blob, name: string, lastModified: number): File {\n    const file: any = blob;\n    file.name = name;\n    file.lastModified = lastModified;\n\n    // Cast to a File() type\n    return <File> file;\n  }\n}\n","import {forwardRef, Inject, Injectable} from '@angular/core';\nimport {Ng2ImgMaxService} from 'ng2-img-max';\nimport {Observable, Subject} from 'rxjs';\nimport {ImgCropService} from './img-crop.service';\nimport {ImgResizeExactService} from './img-resize-exact.service';\n\n@Injectable(\n  {providedIn: 'root'}\n)\nexport class ImageToolsService {\n  constructor(@Inject(forwardRef(() => ImgResizeExactService)) private imgResizeExactService: ImgResizeExactService,\n              @Inject(forwardRef(() => Ng2ImgMaxService)) private ng2ImgMaxService: Ng2ImgMaxService,\n              @Inject(forwardRef(() => ImgCropService)) private imgCropService: ImgCropService) {\n  }\n\n  public compress(files: File[], maxSizeInMB: number, ignoreAlpha: boolean = false, logExecutionTime: boolean = false): Observable<any> {\n    return this.ng2ImgMaxService.compress(files, maxSizeInMB, ignoreAlpha, logExecutionTime);\n  }\n\n  public resize(files: File[], maxWidth: number, maxHeight: number, logExecutionTime: boolean = false): Observable<any> {\n    return this.ng2ImgMaxService.resize(files, maxWidth, maxHeight, logExecutionTime);\n  }\n\n  public crop(files: File[], toWidth: number, toHeight: number, startX: number = 0, startY: number = 0): Observable<any> {\n    const croppedFileSubject: Subject<any> = new Subject<any>();\n    files.forEach((file) => {\n      this.cropImage(file, toWidth, toHeight, startX, startY).subscribe((value) => {\n        croppedFileSubject.next(value);\n      }, error => {\n        croppedFileSubject.error(error);\n      });\n    });\n    return croppedFileSubject.asObservable();\n  }\n\n  public resizeExactCrop(files: File[], toWidth: number, toHeight: number): Observable<any> {\n    const resizedFileSubject: Subject<any> = new Subject<any>();\n    files.forEach((file) => {\n      this.resizeExactCropImage(file, toWidth, toHeight).subscribe((value) => {\n        resizedFileSubject.next(value);\n      }, error => {\n        resizedFileSubject.error(error);\n      });\n    });\n    return resizedFileSubject.asObservable();\n  }\n\n  public resizeExactFill(files: File[], toWidth: number, toHeight: number, fillColor?: string): Observable<any> {\n    const resizedFileSubject: Subject<any> = new Subject<any>();\n    files.forEach((file) => {\n      this.resizeExactFillImage(file, toWidth, toHeight, fillColor).subscribe((value) => {\n        resizedFileSubject.next(value);\n      }, error => {\n        resizedFileSubject.error(error);\n      });\n    });\n    return resizedFileSubject.asObservable();\n  }\n\n  public resizeExactFillImage(file: File, toWidth: number, toHeight: number, fillColor?: string): Observable<any> {\n    return this.imgResizeExactService.resizeExactFill(file, toWidth, toHeight, fillColor);\n  }\n\n  public resizeExactCropImage(file: File, toWidth: number, toHeight: number): Observable<any> {\n    return this.imgResizeExactService.resizeExactCrop(file, toWidth, toHeight);\n  }\n\n  public cropImage(file: File, toWidth: number, toHeight: number, startX: number = 0, startY: number = 0): Observable<any> {\n    return this.imgCropService.cropImage(file, toWidth, toHeight, startX, startY);\n  }\n\n  public compressImage(file: File, maxSizeInMB: number, ignoreAlpha: boolean = false, logExecutionTime: boolean = false): Observable<any> {\n    return this.ng2ImgMaxService.compressImage(file, maxSizeInMB, ignoreAlpha, logExecutionTime);\n  }\n\n  public resizeImage(file: File, maxWidth: number, maxHeight: number, logExecutionTime: boolean = false): Observable<any> {\n    return this.ng2ImgMaxService.resizeImage(file, maxWidth, maxHeight, logExecutionTime);\n  }\n\n  public getEXIFOrientedImage(image: HTMLImageElement): Promise<HTMLImageElement> {\n    return this.ng2ImgMaxService.getEXIFOrientedImage(image);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {ErCoreModule} from '@er/core';\n\nimport {Ng2ImgMaxModule, Ng2ImgMaxService} from 'ng2-img-max';\nimport {ImageEditorComponent} from './component';\nimport {ImageToolsService} from './services/image-tools.service';\nimport {ImgCropService} from './services/img-crop.service';\nimport {ImgResizeExactService} from './services/img-resize-exact.service';\n\nexport {ImageToolsService} from './services/image-tools.service';\nexport {ImgCropService} from './services/img-crop.service';\nexport {ImgResizeExactService} from './services/img-resize-exact.service';\n\n@NgModule({\n  imports: [\n    ErCoreModule,\n    Ng2ImgMaxModule\n  ],\n  declarations: [\n    ImageEditorComponent\n  ],\n  providers: [\n    {provide: ImgResizeExactService, useClass: ImgResizeExactService},\n    {provide: ImgCropService, useClass: ImgCropService},\n    {provide: ImageToolsService, useClass: ImageToolsService},\n    {provide: Ng2ImgMaxService, useClass: Ng2ImgMaxService}\n  ],\n  exports: [\n    ImageEditorComponent\n  ]\n})\nexport class ErImageEditorModule {\n\n}\n"]}