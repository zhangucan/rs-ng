/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Validators } from '@angular/forms';
import { RegPatterns } from '@er/types';
import { CommonsUtils, IdCardUtils, RegUtils } from '@er/utils';
import { CustomValidators } from 'ng2-validation';
import { dateAfterValidator } from './after/validator';
import { ageValidator } from './age-range/validator';
import { dateBeforeValidator } from './before/validator';
import { dateBetweenValidator } from './between/validator';
import { conditionValidator } from './condition/validator';
import { dateFormatValidator } from './date-format/validator';
import { equalToValidator } from './equal-to/validator';
import { matchValidator } from './match/validator';
import { notEqualToValidator } from './not-equal-to/validator';
import { passwordValidationMessage, passwordValidator } from './password/validator';
var NgValidators = /** @class */ (function () {
    function NgValidators() {
    }
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.letter = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.letter) ? null : { letter: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.character = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.character) ? null : { character: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.ascii = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.ascii) ? null : { ascii: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.chinese = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.chinese) ? null : { chinese: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.digit = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.digit) ? null : { digit: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.integer = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.integer) ? null : { integer: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.numeric = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.numeric) ? null : { numeric: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.phone = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.phone) ? null : { phone: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.idCard = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        /** @type {?} */
        var validation = IdCardUtils.test(value);
        return validation.status ? null : { idCard: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.ip = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.ip) ? null : { ip: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.halfWidth = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.halfWidth) ? null : { halfWidth: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.fullWidth = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.fullWidth) ? null : { fullWidth: true };
    };
    /**
     * @param {?} pattern
     * @return {?}
     */
    NgValidators.match = /**
     * @param {?} pattern
     * @return {?}
     */
    function (pattern) {
        return matchValidator(pattern);
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    NgValidators.password = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return passwordValidator(options);
    };
    /**
     * @param {?} before
     * @return {?}
     */
    NgValidators.before = /**
     * @param {?} before
     * @return {?}
     */
    function (before) {
        return dateBeforeValidator(before);
    };
    /**
     * @param {?} after
     * @return {?}
     */
    NgValidators.after = /**
     * @param {?} after
     * @return {?}
     */
    function (after) {
        return dateAfterValidator(after);
    };
    /**
     * @param {?} before
     * @param {?} after
     * @return {?}
     */
    NgValidators.between = /**
     * @param {?} before
     * @param {?} after
     * @return {?}
     */
    function (before, after) {
        return dateBetweenValidator(before, after);
    };
    /**
     * @param {?=} formatPattern
     * @return {?}
     */
    NgValidators.dateFormat = /**
     * @param {?=} formatPattern
     * @return {?}
     */
    function (formatPattern) {
        return dateFormatValidator(formatPattern);
    };
    /**
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    NgValidators.age = /**
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    function (min, max) {
        if (min === void 0) { min = 0; }
        if (max === void 0) { max = 0; }
        return ageValidator(min, max);
    };
    /**
     * @param {?} conditionFn
     * @return {?}
     */
    NgValidators.condition = /**
     * @param {?} conditionFn
     * @return {?}
     */
    function (conditionFn) {
        return conditionValidator(conditionFn);
    };
    /**
     * @param {?} controlName
     * @return {?}
     */
    NgValidators.equalTo = /**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return equalToValidator(controlName);
    };
    /**
     * @param {?} controlName
     * @return {?}
     */
    NgValidators.notEqualTo = /**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return notEqualToValidator(controlName);
    };
    /**
     * @param {?} minlength
     * @return {?}
     */
    NgValidators.minLength = /**
     * @param {?} minlength
     * @return {?}
     */
    function (minlength) {
        return Validators.minLength(minlength);
    };
    /**
     * @param {?} maxlength
     * @return {?}
     */
    NgValidators.maxLength = /**
     * @param {?} maxlength
     * @return {?}
     */
    function (maxlength) {
        return Validators.maxLength(maxlength);
    };
    /**
     * @param {?} minValue
     * @return {?}
     */
    NgValidators.min = /**
     * @param {?} minValue
     * @return {?}
     */
    function (minValue) {
        return Validators.min(minValue);
    };
    /**
     * @param {?} maxValue
     * @return {?}
     */
    NgValidators.max = /**
     * @param {?} maxValue
     * @return {?}
     */
    function (maxValue) {
        return Validators.max(maxValue);
    };
    /**
     * @param {?} reg
     * @return {?}
     */
    NgValidators.pattern = /**
     * @param {?} reg
     * @return {?}
     */
    function (reg) {
        return Validators.pattern(reg);
    };
    /**
     * @param {?} minLength
     * @param {?} maxLength
     * @return {?}
     */
    NgValidators.rangeLength = /**
     * @param {?} minLength
     * @param {?} maxLength
     * @return {?}
     */
    function (minLength, maxLength) {
        return CustomValidators.rangeLength([minLength, maxLength]);
    };
    /**
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    NgValidators.range = /**
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    function (min, max) {
        return CustomValidators.range([min, max]);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgValidators.gt = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return CustomValidators.gt(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgValidators.gte = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return CustomValidators.gte(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgValidators.lt = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return CustomValidators.lt(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgValidators.lte = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return CustomValidators.lte(value);
    };
    /**
     * @param {?} minDate
     * @return {?}
     */
    NgValidators.minDate = /**
     * @param {?} minDate
     * @return {?}
     */
    function (minDate) {
        return CustomValidators.minDate(minDate);
    };
    /**
     * @param {?} maxDate
     * @return {?}
     */
    NgValidators.maxDate = /**
     * @param {?} maxDate
     * @return {?}
     */
    function (maxDate) {
        return CustomValidators.maxDate(maxDate);
    };
    /**
     * @param {?} s
     * @return {?}
     */
    NgValidators.equal = /**
     * @param {?} s
     * @return {?}
     */
    function (s) {
        return CustomValidators.equal(s);
    };
    /**
     * @param {?} s
     * @return {?}
     */
    NgValidators.notEqual = /**
     * @param {?} s
     * @return {?}
     */
    function (s) {
        return CustomValidators.notEqual(s);
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.equalTo2 = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return CustomValidators.equalTo(control);
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.notEqualTo2 = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return CustomValidators.notEqualTo(control);
    };
    NgValidators.required = Validators.required;
    NgValidators.accept = Validators.requiredTrue;
    NgValidators.email = CustomValidators.email;
    NgValidators.url = CustomValidators.url;
    NgValidators.date = CustomValidators.date;
    NgValidators.json = CustomValidators.json;
    NgValidators.base64 = CustomValidators.base64;
    NgValidators.creditCard = CustomValidators.creditCard;
    return NgValidators;
}());
export { NgValidators };
if (false) {
    /** @type {?} */
    NgValidators.required;
    /** @type {?} */
    NgValidators.accept;
    /** @type {?} */
    NgValidators.email;
    /** @type {?} */
    NgValidators.url;
    /** @type {?} */
    NgValidators.date;
    /** @type {?} */
    NgValidators.json;
    /** @type {?} */
    NgValidators.base64;
    /** @type {?} */
    NgValidators.creditCard;
}
var NgValidateMessages = /** @class */ (function () {
    function NgValidateMessages() {
    }
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.maxlength = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u957F\u5EA6\u4E0D\u80FD\u5927\u4E8E<strong>" + error.requiredLength + "</strong>\u4E2A\u5B57";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.minlength = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u957F\u5EA6\u4E0D\u80FD\u5C11\u4E8E<strong>" + error.requiredLength + "</strong>\u4E2A\u5B57";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.min = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u4E0D\u80FD\u5C0F\u4E8E<strong>" + error.min + "</strong>";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.max = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u4E0D\u80FD\u5927\u4E8E<strong>" + error.max + "</strong>";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.age = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u5E74\u9F84\u5FC5\u987B\u4ECB\u4E8E " + error.min + " " + error.max;
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.password = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return passwordValidationMessage(error);
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.dateBefore = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u65E5\u671F\u5FC5\u987B\u5728 " + error.before + "\u4E4B\u524D";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.dateAfter = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u65E5\u671F\u5FC5\u987B\u5728 " + error.after + "\u4E4B\u540E";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.dataBetween = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u65E5\u671F\u5FC5\u987B\u5728 " + error.before + "\u548C" + error.after + "\u4E4B\u95F4";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.rangeLength = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u957F\u5EA6\u5FC5\u987B\u5927\u4E8E<strong>" + error.max + "</strong>";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.gt = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u5FC5\u987B\u5927\u4E8E<strong>" + error.max + "</strong>";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.lt = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u4E0D\u80FD\u5927\u4E8E<strong>" + error.lt + "</strong>";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.lte = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u4E0D\u80FD\u5927\u4E8E<strong>" + error.lte + "</strong>";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.range = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u4E0D\u80FD\u5927\u4E8E<strong>" + error.lte + "</strong>";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.minDate = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u65E5\u671F\u4E0D\u80FD\u5C0F\u4E8E<strong>" + error.minDate + "</strong>";
    };
    NgValidateMessages.required = '此项内容必须填写';
    NgValidateMessages.pattern = '格式不符合要求';
    NgValidateMessages.letter = '此项内容必须是英文字母';
    NgValidateMessages.digit = '此项内容必须是数字';
    NgValidateMessages.character = '此项内容必须是英文字母或数字';
    NgValidateMessages.chinese = '此项内容必须是简体中文';
    NgValidateMessages.integer = '此项内容必须是整数';
    NgValidateMessages.number = '此项内容必须是数值';
    NgValidateMessages.fullWidth = '此项内容必须是全角';
    NgValidateMessages.halfWidth = '此项内容必须是半角';
    NgValidateMessages.phone = '手机号码格式不符合要求';
    NgValidateMessages.condition = '输入不符合要求';
    NgValidateMessages.email = '无效的email地址';
    NgValidateMessages.idCard = '无效的身份证号';
    NgValidateMessages.not_matching = '密码不匹配';
    NgValidateMessages.unique = '该值已经存在';
    NgValidateMessages.gte = '输入不符合要求';
    NgValidateMessages.url = '地址格式不符合要求';
    NgValidateMessages.date = '日期格式不符合要求';
    NgValidateMessages.maxDate = '输入不符合要求';
    NgValidateMessages.json = '输入不符合要求';
    NgValidateMessages.base64 = '输入不符合要求';
    NgValidateMessages.equal = '两次输入不一致';
    NgValidateMessages.notEqual = '两次输入不能一致';
    NgValidateMessages.equalTo = '两次输入不一致';
    NgValidateMessages.notEqualTo = '两次输入不能一致';
    NgValidateMessages.duplicated = '当前值已经存在，不能重复';
    NgValidateMessages.exists = '当前值已经存在，不能使用';
    return NgValidateMessages;
}());
export { NgValidateMessages };
if (false) {
    /** @type {?} */
    NgValidateMessages.required;
    /** @type {?} */
    NgValidateMessages.pattern;
    /** @type {?} */
    NgValidateMessages.letter;
    /** @type {?} */
    NgValidateMessages.digit;
    /** @type {?} */
    NgValidateMessages.character;
    /** @type {?} */
    NgValidateMessages.chinese;
    /** @type {?} */
    NgValidateMessages.integer;
    /** @type {?} */
    NgValidateMessages.number;
    /** @type {?} */
    NgValidateMessages.fullWidth;
    /** @type {?} */
    NgValidateMessages.halfWidth;
    /** @type {?} */
    NgValidateMessages.phone;
    /** @type {?} */
    NgValidateMessages.condition;
    /** @type {?} */
    NgValidateMessages.email;
    /** @type {?} */
    NgValidateMessages.idCard;
    /** @type {?} */
    NgValidateMessages.not_matching;
    /** @type {?} */
    NgValidateMessages.unique;
    /** @type {?} */
    NgValidateMessages.gte;
    /** @type {?} */
    NgValidateMessages.url;
    /** @type {?} */
    NgValidateMessages.date;
    /** @type {?} */
    NgValidateMessages.maxDate;
    /** @type {?} */
    NgValidateMessages.json;
    /** @type {?} */
    NgValidateMessages.base64;
    /** @type {?} */
    NgValidateMessages.equal;
    /** @type {?} */
    NgValidateMessages.notEqual;
    /** @type {?} */
    NgValidateMessages.equalTo;
    /** @type {?} */
    NgValidateMessages.notEqualTo;
    /** @type {?} */
    NgValidateMessages.duplicated;
    /** @type {?} */
    NgValidateMessages.exists;
}
//# sourceMappingURL=data:application/json;base64,