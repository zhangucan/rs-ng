/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Optional } from '@angular/core';
import { NgControl } from '@angular/forms';
var ValidateOnBlurMessageDirective = /** @class */ (function () {
    function ValidateOnBlurMessageDirective(model) {
        this.model = model;
    }
    Object.defineProperty(ValidateOnBlurMessageDirective.prototype, "control", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.model && this.model.control) {
                return this.model.control;
            }
            else {
                return undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ValidateOnBlurMessageDirective.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        if (this.control) {
            this.validators = this.control.validator;
            this.asyncValidators = this.control.asyncValidator;
            this.control.clearAsyncValidators();
            this.control.clearValidators();
        }
    };
    /**
     * @return {?}
     */
    ValidateOnBlurMessageDirective.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        if (this.control) {
            this.control.setAsyncValidators(this.asyncValidators);
            this.control.setValidators(this.validators);
            this.control.updateValueAndValidity();
        }
    };
    ValidateOnBlurMessageDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erValidateOnBlur]'
                },] }
    ];
    /** @nocollapse */
    ValidateOnBlurMessageDirective.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }] }
    ]; };
    ValidateOnBlurMessageDirective.propDecorators = {
        onFocus: [{ type: HostListener, args: ['focus',] }],
        onBlur: [{ type: HostListener, args: ['blur',] }]
    };
    return ValidateOnBlurMessageDirective;
}());
export { ValidateOnBlurMessageDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ValidateOnBlurMessageDirective.prototype.validators;
    /**
     * @type {?}
     * @private
     */
    ValidateOnBlurMessageDirective.prototype.asyncValidators;
    /**
     * @type {?}
     * @private
     */
    ValidateOnBlurMessageDirective.prototype.model;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ZhbGlkYXRlLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY29udHJvbC1vbi1ibHVyL2RpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6QztJQVFFLHdDQUFnQyxLQUFnQjtRQUFoQixVQUFLLEdBQUwsS0FBSyxDQUFXO0lBQ2hELENBQUM7SUFFRCxzQkFBSSxtREFBTzs7OztRQUFYO1lBQ0UsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFO2dCQUNwQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO2FBQzNCO2lCQUFNO2dCQUNMLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO1FBQ0gsQ0FBQzs7O09BQUE7Ozs7SUFHRCxnREFBTzs7O0lBRFA7UUFFRSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUN6QyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDO1lBQ25ELElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztZQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQzs7OztJQUdELCtDQUFNOzs7SUFETjtRQUVFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUN0RCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1NBQ3ZDO0lBQ0gsQ0FBQzs7Z0JBcENGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2lCQUMvQjs7OztnQkFKTyxTQUFTLHVCQVVGLFFBQVE7OzswQkFXcEIsWUFBWSxTQUFDLE9BQU87eUJBVXBCLFlBQVksU0FBQyxNQUFNOztJQVN0QixxQ0FBQztDQUFBLEFBdENELElBc0NDO1NBbkNZLDhCQUE4Qjs7Ozs7O0lBRXpDLG9EQUF3Qjs7Ozs7SUFDeEIseURBQTZCOzs7OztJQUVqQiwrQ0FBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05nQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZXJWYWxpZGF0ZU9uQmx1cl0nXG59KVxuZXhwb3J0IGNsYXNzIFZhbGlkYXRlT25CbHVyTWVzc2FnZURpcmVjdGl2ZSB7XG5cbiAgcHJpdmF0ZSB2YWxpZGF0b3JzOiBhbnk7XG4gIHByaXZhdGUgYXN5bmNWYWxpZGF0b3JzOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHJpdmF0ZSBtb2RlbDogTmdDb250cm9sKSB7XG4gIH1cblxuICBnZXQgY29udHJvbCgpIHtcbiAgICBpZiAodGhpcy5tb2RlbCAmJiB0aGlzLm1vZGVsLmNvbnRyb2wpIHtcbiAgICAgIHJldHVybiB0aGlzLm1vZGVsLmNvbnRyb2w7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignZm9jdXMnKVxuICBvbkZvY3VzKCkge1xuICAgIGlmICh0aGlzLmNvbnRyb2wpIHtcbiAgICAgIHRoaXMudmFsaWRhdG9ycyA9IHRoaXMuY29udHJvbC52YWxpZGF0b3I7XG4gICAgICB0aGlzLmFzeW5jVmFsaWRhdG9ycyA9IHRoaXMuY29udHJvbC5hc3luY1ZhbGlkYXRvcjtcbiAgICAgIHRoaXMuY29udHJvbC5jbGVhckFzeW5jVmFsaWRhdG9ycygpO1xuICAgICAgdGhpcy5jb250cm9sLmNsZWFyVmFsaWRhdG9ycygpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2JsdXInKVxuICBvbkJsdXIoKSB7XG4gICAgaWYgKHRoaXMuY29udHJvbCkge1xuICAgICAgdGhpcy5jb250cm9sLnNldEFzeW5jVmFsaWRhdG9ycyh0aGlzLmFzeW5jVmFsaWRhdG9ycyk7XG4gICAgICB0aGlzLmNvbnRyb2wuc2V0VmFsaWRhdG9ycyh0aGlzLnZhbGlkYXRvcnMpO1xuICAgICAgdGhpcy5jb250cm9sLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcbiAgICB9XG4gIH1cblxufVxuIl19