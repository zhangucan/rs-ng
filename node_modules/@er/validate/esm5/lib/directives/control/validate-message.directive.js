/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Directive, HostBinding, Input, Optional, ViewContainerRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { CacheUtils } from '@er/utils';
import { ValidateMessagesComponent } from '../../components/control/component';
/* tslint:disable:directive-selector */
var ValidationMessageDirective = /** @class */ (function () {
    function ValidationMessageDirective(componentFactoryResolver, viewContainerRef, ngControl) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.viewContainerRef = viewContainerRef;
        this.ngControl = ngControl;
        this.showError = true;
        this.enableValidation = true;
    }
    Object.defineProperty(ValidationMessageDirective.prototype, "control", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.ngControl && this.ngControl.control) {
                return this.ngControl.control;
            }
            else {
                return undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValidationMessageDirective.prototype, "isValid", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.showError || (!this.ngControl && this.ngControl.control == null)) {
                return false;
            }
            return this.ngControl && this.ngControl.control && this.ngControl.control.valid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValidationMessageDirective.prototype, "isInvalid", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.showError || (!this.ngControl && this.ngControl.control == null)) {
                return false;
            }
            return this.ngControl && this.ngControl.control && this.ngControl.control.invalid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ValidationMessageDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!this.ngControl || !this.enableValidation) {
            return;
        }
        /** @type {?} */
        var attrs = this.viewContainerRef.element.nativeElement.attributes;
        if (attrs) {
            /** @type {?} */
            var tag = !!attrs.getNamedItem('noerror');
            if (this.showError && tag) {
                this.showError = false;
                return;
            }
        }
        this.componentFactory = CacheUtils.get('$componentFactory', 'ValidateMessagesComponentFactory');
        if (!this.componentFactory) {
            this.componentFactory = this.componentFactoryResolver.resolveComponentFactory(ValidateMessagesComponent);
            CacheUtils.put('$componentFactory', 'validationMessagesComponentFactory', this.componentFactory);
        }
        /** @type {?} */
        var className = this.viewContainerRef.element.nativeElement.parentElement.className;
        if (className.indexOf('input-group') >= 0) {
        }
        this.componentRef = this.viewContainerRef.createComponent(this.componentFactory);
        ((/** @type {?} */ (this.componentRef.instance))).messages = this.messages;
        ((/** @type {?} */ (this.componentRef.instance))).control = (/** @type {?} */ (this.control));
    };
    ValidationMessageDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erValidate]'
                },] }
    ];
    /** @nocollapse */
    ValidationMessageDirective.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef },
        { type: NgControl, decorators: [{ type: Optional }] }
    ]; };
    ValidationMessageDirective.propDecorators = {
        messages: [{ type: Input }],
        showError: [{ type: Input }],
        enableValidation: [{ type: Input }],
        isValid: [{ type: HostBinding, args: ['class.er-valid',] }],
        isInvalid: [{ type: HostBinding, args: ['class.er-invalid',] }]
    };
    return ValidationMessageDirective;
}());
export { ValidationMessageDirective };
if (false) {
    /** @type {?} */
    ValidationMessageDirective.prototype.messages;
    /** @type {?} */
    ValidationMessageDirective.prototype.showError;
    /** @type {?} */
    ValidationMessageDirective.prototype.enableValidation;
    /** @type {?} */
    ValidationMessageDirective.prototype.currentState;
    /**
     * @type {?}
     * @private
     */
    ValidationMessageDirective.prototype.componentFactory;
    /**
     * @type {?}
     * @private
     */
    ValidationMessageDirective.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    ValidationMessageDirective.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    ValidationMessageDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    ValidationMessageDirective.prototype.ngControl;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUtbWVzc2FnZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdmFsaWRhdGUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9jb250cm9sL3ZhbGlkYXRlLW1lc3NhZ2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBR0wsd0JBQXdCLEVBRXhCLFNBQVMsRUFDVCxXQUFXLEVBQ1gsS0FBSyxFQUNMLFFBQVEsRUFDUixnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFjLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3RELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDckMsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sb0NBQW9DLENBQUM7O0FBSTdFO0lBZ0JFLG9DQUFvQix3QkFBa0QsRUFDbEQsZ0JBQWtDLEVBQ3RCLFNBQW9CO1FBRmhDLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFDbEQscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUN0QixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBWDNDLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFFakIscUJBQWdCLEdBQUcsSUFBSSxDQUFDO0lBVWpDLENBQUM7SUFFRCxzQkFBSSwrQ0FBTzs7OztRQUFYO1lBQ0UsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFO2dCQUM1QyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO2FBQy9CO2lCQUFNO2dCQUNMLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO1FBQ0gsQ0FBQzs7O09BQUE7SUFFRCxzQkFDSSwrQ0FBTzs7OztRQURYO1lBRUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMs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LGtEQUE4RDs7Ozs7SUFFbEQsOERBQTBEOzs7OztJQUMxRCxzREFBMEM7Ozs7O0lBQzFDLCtDQUF3QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENvbXBvbmVudEZhY3RvcnksXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgQ29tcG9uZW50UmVmLFxuICBEaXJlY3RpdmUsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgT3B0aW9uYWwsXG4gIFZpZXdDb250YWluZXJSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Zvcm1Db250cm9sLCBOZ0NvbnRyb2x9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7Q2FjaGVVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7VmFsaWRhdGVNZXNzYWdlc0NvbXBvbmVudH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9jb250cm9sL2NvbXBvbmVudCc7XG5cblxuLyogdHNsaW50OmRpc2FibGU6ZGlyZWN0aXZlLXNlbGVjdG9yICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZXJWYWxpZGF0ZV0nXG59KVxuZXhwb3J0IGNsYXNzIFZhbGlkYXRpb25NZXNzYWdlRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgQElucHV0KCkgbWVzc2FnZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG5cbiAgQElucHV0KCkgc2hvd0Vycm9yID0gdHJ1ZTtcblxuICBASW5wdXQoKSBlbmFibGVWYWxpZGF0aW9uID0gdHJ1ZTtcblxuICBjdXJyZW50U3RhdGU6IHN0cmluZztcblxuICBwcml2YXRlIGNvbXBvbmVudEZhY3Rvcnk6IENvbXBvbmVudEZhY3Rvcnk8VmFsaWRhdGVNZXNzYWdlc0NvbXBvbmVudD47XG4gIHByaXZhdGUgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8VmFsaWRhdGVNZXNzYWdlc0NvbXBvbmVudD47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICAgICAgICAgICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBwcml2YXRlIG5nQ29udHJvbDogTmdDb250cm9sKSB7XG4gIH1cblxuICBnZXQgY29udHJvbCgpIHtcbiAgICBpZiAodGhpcy5uZ0NvbnRyb2wgJiYgdGhpcy5uZ0NvbnRyb2wuY29udHJvbCkge1xuICAgICAgcmV0dXJuIHRoaXMubmdDb250cm9sLmNvbnRyb2w7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5lci12YWxpZCcpXG4gIGdldCBpc1ZhbGlkKCk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy5zaG93RXJyb3IgfHwgKCF0aGlzLm5nQ29udHJvbCAmJiB0aGlzLm5nQ29udHJvbC5jb250cm9sID09IG51bGwpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm5nQ29udHJvbCAmJiB0aGlzLm5nQ29udHJvbC5jb250cm9sICYmIHRoaXMubmdDb250cm9sLmNvbnRyb2wudmFsaWQ7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmVyLWludmFsaWQnKVxuICBnZXQgaXNJbnZhbGlkKCk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy5zaG93RXJyb3IgfHwgKCF0aGlzLm5nQ29udHJvbCAmJiB0aGlzLm5nQ29udHJvbC5jb250cm9sID09IG51bGwpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm5nQ29udHJvbCAmJiB0aGlzLm5nQ29udHJvbC5jb250cm9sICYmIHRoaXMubmdDb250cm9sLmNvbnRyb2wuaW52YWxpZDtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAoIXRoaXMubmdDb250cm9sIHx8ICF0aGlzLmVuYWJsZVZhbGlkYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBhdHRyczogTmFtZWROb2RlTWFwID0gdGhpcy52aWV3Q29udGFpbmVyUmVmLmVsZW1lbnQubmF0aXZlRWxlbWVudC5hdHRyaWJ1dGVzO1xuICAgIGlmIChhdHRycykge1xuICAgICAgY29uc3QgdGFnID0gISFhdHRycy5nZXROYW1lZEl0ZW0oJ25vZXJyb3InKTtcbiAgICAgIGlmICh0aGlzLnNob3dFcnJvciAmJiB0YWcpIHtcbiAgICAgICAgdGhpcy5zaG93RXJyb3IgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY29tcG9uZW50RmFjdG9yeSA9IENhY2hlVXRpbHMuZ2V0KCckY29tcG9uZW50RmFjdG9yeScsICdWYWxpZGF0ZU1lc3NhZ2VzQ29tcG9uZW50RmFjdG9yeScpO1xuICAgIGlmICghdGhpcy5jb21wb25lbnRGYWN0b3J5KSB7XG4gICAgICB0aGlzLmNvbXBvbmVudEZhY3RvcnkgPSB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShWYWxpZGF0ZU1lc3NhZ2VzQ29tcG9uZW50KTtcbiAgICAgIENhY2hlVXRpbHMucHV0KCckY29tcG9uZW50RmFjdG9yeScsICd2YWxpZGF0aW9uTWVzc2FnZXNDb21wb25lbnRGYWN0b3J5JywgdGhpcy5jb21wb25lbnRGYWN0b3J5KTtcbiAgICB9XG4gICAgY29uc3QgY2xhc3NOYW1lID0gdGhpcy52aWV3Q29udGFpbmVyUmVmLmVsZW1lbnQubmF0aXZlRWxlbWVudC5wYXJlbnRFbGVtZW50LmNsYXNzTmFtZTtcbiAgICBpZiAoY2xhc3NOYW1lLmluZGV4T2YoJ2lucHV0LWdyb3VwJykgPj0gMCkge1xuICAgIH1cbiAgICB0aGlzLmNvbXBvbmVudFJlZiA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnQodGhpcy5jb21wb25lbnRGYWN0b3J5KTtcbiAgICAoPFZhbGlkYXRlTWVzc2FnZXNDb21wb25lbnQ+dGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UpLm1lc3NhZ2VzID0gdGhpcy5tZXNzYWdlcztcbiAgICAoPFZhbGlkYXRlTWVzc2FnZXNDb21wb25lbnQ+dGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UpLmNvbnRyb2wgPSA8Rm9ybUNvbnRyb2w+dGhpcy5jb250cm9sO1xuICB9XG5cblxuXG59XG4iXX0=