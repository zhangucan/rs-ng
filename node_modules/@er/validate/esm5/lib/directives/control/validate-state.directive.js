/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Directive, HostBinding, Input, Optional, ViewContainerRef } from '@angular/core';
import { NgControl } from '@angular/forms';
/* tslint:disable:directive-selector */
var ValidateStateDirective = /** @class */ (function () {
    function ValidateStateDirective(componentFactoryResolver, viewContainerRef, ngControl) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.viewContainerRef = viewContainerRef;
        this.ngControl = ngControl;
        this.showError = true;
        this.enableValidation = true;
    }
    Object.defineProperty(ValidateStateDirective.prototype, "control", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.ngControl && this.ngControl.control) {
                return this.ngControl.control;
            }
            else {
                return undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValidateStateDirective.prototype, "isValid", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.showError || (!this.ngControl && this.ngControl.control == null)) {
                return false;
            }
            return this.ngControl && this.ngControl.control && this.ngControl.control.valid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ValidateStateDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!this.ngControl || !this.enableValidation) {
            return;
        }
        /** @type {?} */
        var attrs = this.viewContainerRef.element.nativeElement.attributes;
        if (attrs) {
            /** @type {?} */
            var tag = !!attrs.getNamedItem('noerror');
            if (this.showError && tag) {
                this.showError = false;
                return;
            }
        }
    };
    ValidateStateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[formControlName],[formControl],[ngModel]'
                },] }
    ];
    /** @nocollapse */
    ValidateStateDirective.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef },
        { type: NgControl, decorators: [{ type: Optional }] }
    ]; };
    ValidateStateDirective.propDecorators = {
        messages: [{ type: Input }],
        showError: [{ type: Input }],
        enableValidation: [{ type: Input }],
        isValid: [{ type: HostBinding, args: ['class.er-valid',] }]
    };
    return ValidateStateDirective;
}());
export { ValidateStateDirective };
if (false) {
    /** @type {?} */
    ValidateStateDirective.prototype.messages;
    /** @type {?} */
    ValidateStateDirective.prototype.showError;
    /** @type {?} */
    ValidateStateDirective.prototype.enableValidation;
    /** @type {?} */
    ValidateStateDirective.prototype.currentState;
    /**
     * @type {?}
     * @private
     */
    ValidateStateDirective.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    ValidateStateDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    ValidateStateDirective.prototype.ngControl;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUtc3RhdGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ZhbGlkYXRlLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY29udHJvbC92YWxpZGF0ZS1zdGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBZ0Isd0JBQXdCLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pJLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFJekM7SUFhRSxnQ0FBb0Isd0JBQWtELEVBQ2xELGdCQUFrQyxFQUN0QixTQUFvQjtRQUZoQyw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO1FBQ2xELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDdEIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQVIzQyxjQUFTLEdBQUcsSUFBSSxDQUFDO1FBRWpCLHFCQUFnQixHQUFHLElBQUksQ0FBQztJQU9qQyxDQUFDO0lBRUQsc0JBQUksMkNBQU87Ozs7UUFBWDtZQUNFLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRTtnQkFDNUMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQzthQUMvQjtpQkFBTTtnQkFDTCxPQUFPLFNBQVMsQ0FBQzthQUNsQjtRQUNILENBQUM7OztPQUFBO0lBRUQsc0JBQ0ksMkNBQU87Ozs7UUFEWDtZQUVFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxFQUFFO2dCQUMxRSxPQUFPLEtBQUssQ0FBQzthQUNkO1lBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUNsRixDQUFDOzs7T0FBQTs7OztJQUVELGdEQUFlOzs7SUFBZjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQzdDLE9BQU87U0FDUjs7WUFFSyxLQUFLLEdBQWlCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFVBQVU7UUFDbEYsSUFBSSxLQUFLLEVBQUU7O2dCQUNILEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUM7WUFDM0MsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLEdBQUcsRUFBRTtnQkFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQ3ZCLE9BQU87YUFDUjtTQUNGO0lBQ0gsQ0FBQzs7Z0JBL0NGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsMkNBQTJDO2lCQUN0RDs7OztnQkFQc0Isd0JBQXdCO2dCQUEyQyxnQkFBZ0I7Z0JBQ2xHLFNBQVMsdUJBbUJGLFFBQVE7OzsyQkFWcEIsS0FBSzs0QkFFTCxLQUFLO21DQUVMLEtBQUs7MEJBaUJMLFdBQVcsU0FBQyxnQkFBZ0I7O0lBdUIvQiw2QkFBQztDQUFBLEFBakRELElBaURDO1NBOUNZLHNCQUFzQjs7O0lBRWpDLDBDQUE2Qzs7SUFFN0MsMkNBQTBCOztJQUUxQixrREFBaUM7O0lBRWpDLDhDQUFxQjs7Ozs7SUFFVCwwREFBMEQ7Ozs7O0lBQzFELGtEQUEwQzs7Ozs7SUFDMUMsMkNBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBZnRlclZpZXdJbml0LCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIERpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIElucHV0LCBPcHRpb25hbCwgVmlld0NvbnRhaW5lclJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05nQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5cbi8qIHRzbGludDpkaXNhYmxlOmRpcmVjdGl2ZS1zZWxlY3RvciAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2Zvcm1Db250cm9sTmFtZV0sW2Zvcm1Db250cm9sXSxbbmdNb2RlbF0nXG59KVxuZXhwb3J0IGNsYXNzIFZhbGlkYXRlU3RhdGVEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcblxuICBASW5wdXQoKSBtZXNzYWdlczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcblxuICBASW5wdXQoKSBzaG93RXJyb3IgPSB0cnVlO1xuXG4gIEBJbnB1dCgpIGVuYWJsZVZhbGlkYXRpb24gPSB0cnVlO1xuXG4gIGN1cnJlbnRTdGF0ZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgICAgICAgICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBuZ0NvbnRyb2w6IE5nQ29udHJvbCkge1xuICB9XG5cbiAgZ2V0IGNvbnRyb2woKSB7XG4gICAgaWYgKHRoaXMubmdDb250cm9sICYmIHRoaXMubmdDb250cm9sLmNvbnRyb2wpIHtcbiAgICAgIHJldHVybiB0aGlzLm5nQ29udHJvbC5jb250cm9sO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuZXItdmFsaWQnKVxuICBnZXQgaXNWYWxpZCgpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMuc2hvd0Vycm9yIHx8ICghdGhpcy5uZ0NvbnRyb2wgJiYgdGhpcy5uZ0NvbnRyb2wuY29udHJvbCA9PSBudWxsKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5uZ0NvbnRyb2wgJiYgdGhpcy5uZ0NvbnRyb2wuY29udHJvbCAmJiB0aGlzLm5nQ29udHJvbC5jb250cm9sLnZhbGlkO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICghdGhpcy5uZ0NvbnRyb2wgfHwgIXRoaXMuZW5hYmxlVmFsaWRhdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGF0dHJzOiBOYW1lZE5vZGVNYXAgPSB0aGlzLnZpZXdDb250YWluZXJSZWYuZWxlbWVudC5uYXRpdmVFbGVtZW50LmF0dHJpYnV0ZXM7XG4gICAgaWYgKGF0dHJzKSB7XG4gICAgICBjb25zdCB0YWcgPSAhIWF0dHJzLmdldE5hbWVkSXRlbSgnbm9lcnJvcicpO1xuICAgICAgaWYgKHRoaXMuc2hvd0Vycm9yICYmIHRhZykge1xuICAgICAgICB0aGlzLnNob3dFcnJvciA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==