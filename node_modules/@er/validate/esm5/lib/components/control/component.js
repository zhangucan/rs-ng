/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Input, Optional, TemplateRef } from '@angular/core';
import { ControlContainer, FormControl } from '@angular/forms';
import { FormUtils } from '@er/utils';
import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';
import { ValidateUtils } from '../../utils';
var ValidateMessagesComponent = /** @class */ (function () {
    function ValidateMessagesComponent(controlContainer, cd) {
        this.controlContainer = controlContainer;
        this.cd = cd;
        this.showAllErrors = true;
        this.errors$ = new BehaviorSubject(undefined);
    }
    /**
     * @return {?}
     */
    ValidateMessagesComponent.prototype.getErrorMessages = /**
     * @return {?}
     */
    function () {
        if (this.control.dirty && this.control.invalid) {
            /** @type {?} */
            var errorMessages = ValidateUtils.getErrorMessage(this.control.errors);
            /** @type {?} */
            var errors = this.showAllErrors ? errorMessages : this.getFirstError(errorMessages);
            this.errors$.next(this.getErrors(errors));
        }
        else {
            return this.errors$.next([]);
        }
    };
    /**
     * @param {?} errorMessages
     * @return {?}
     */
    ValidateMessagesComponent.prototype.getFirstError = /**
     * @param {?} errorMessages
     * @return {?}
     */
    function (errorMessages) {
        if (Object.keys(errorMessages).length > 0) {
            return errorMessages[Object.keys(errorMessages)[0]];
        }
        return '校验失败';
    };
    /**
     * @param {?} errorMessages
     * @return {?}
     */
    ValidateMessagesComponent.prototype.getErrors = /**
     * @param {?} errorMessages
     * @return {?}
     */
    function (errorMessages) {
        var _this = this;
        /** @type {?} */
        var lst = [];
        if (errorMessages) {
            Object.keys(errorMessages).map(function (key) {
                lst.push({ key: key, value: (_this.messages && _this.messages[key]) || errorMessages[key] });
            });
        }
        return lst;
    };
    /**
     * @return {?}
     */
    ValidateMessagesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.control) {
            if (this.formlyField) {
                this.control = this.formlyField.formControl;
            }
            if (!this.control && this.controlContainer) {
                /** @type {?} */
                var form = this.controlContainer.formDirective ? ((/** @type {?} */ (this.controlContainer.formDirective))).form : null;
                if (form) {
                    this.control = FormUtils.getFormControl.apply(FormUtils, tslib_1.__spread([form], this.controlContainer.path, [this.controlName]));
                }
            }
        }
        if (this.control) {
            this.subscription = this.control.statusChanges.subscribe(function () {
                _this.getErrorMessages();
            });
        }
    };
    /**
     * @return {?}
     */
    ValidateMessagesComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    ValidateMessagesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-validate-messages',
                    template: "\n    <div *ngIf=\"errors$|async as errors\">\n      <ng-container *ngTemplateOutlet=\"errorMsgTpl?errorMsgTpl:defaultTpl;context:{$implicit:errors}\"></ng-container>\n    </div>\n    <ng-template #defaultTpl let-errors>\n      <div class=\"text-danger\" [ngClass]=\"styleClass\">\n        <ul *ngFor=\"let error of errors \" class=\"d-flex flex-column justify-content-start\">\n          <li [innerHTML]=\"error.value\" class=\"my-1\" style=\"font-size: 0.8em\"></li>\n        </ul>\n      </div>\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    ValidateMessagesComponent.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef }
    ]; };
    ValidateMessagesComponent.propDecorators = {
        control: [{ type: Input }],
        controlName: [{ type: Input }],
        formlyField: [{ type: Input }],
        force: [{ type: Input }],
        styleClass: [{ type: Input }],
        showAllErrors: [{ type: Input }],
        messages: [{ type: Input }],
        errorMsgTpl: [{ type: ContentChild, args: [TemplateRef,] }]
    };
    return ValidateMessagesComponent;
}());
export { ValidateMessagesComponent };
if (false) {
    /** @type {?} */
    ValidateMessagesComponent.prototype.control;
    /** @type {?} */
    ValidateMessagesComponent.prototype.controlName;
    /** @type {?} */
    ValidateMessagesComponent.prototype.formlyField;
    /** @type {?} */
    ValidateMessagesComponent.prototype.force;
    /** @type {?} */
    ValidateMessagesComponent.prototype.styleClass;
    /** @type {?} */
    ValidateMessagesComponent.prototype.showAllErrors;
    /** @type {?} */
    ValidateMessagesComponent.prototype.messages;
    /** @type {?} */
    ValidateMessagesComponent.prototype.errorMsgTpl;
    /** @type {?} */
    ValidateMessagesComponent.prototype.errors$;
    /** @type {?} */
    ValidateMessagesComponent.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ValidateMessagesComponent.prototype.controlContainer;
    /**
     * @type {?}
     * @private
     */
    ValidateMessagesComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,