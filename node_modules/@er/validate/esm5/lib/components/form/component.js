/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ContentChild, Input, Optional, TemplateRef } from '@angular/core';
import { ControlContainer, FormGroup } from '@angular/forms';
import { CommonsUtils } from '@er/utils';
import { Subject } from 'rxjs';
import { ValidateUtils } from '../../utils';
var FormValidateMessagesComponent = /** @class */ (function () {
    function FormValidateMessagesComponent(controlContainer) {
        this.controlContainer = controlContainer;
        this.errors$ = new Subject();
    }
    /**
     * @return {?}
     */
    FormValidateMessagesComponent.prototype.checkFormValidate = /**
     * @return {?}
     */
    function () {
        if (this.form.invalid) {
            alert();
            this.errors$.next(ValidateUtils.getFormErrors(this.form, this.messages, this.fields));
        }
        else {
            this.errors$.next(undefined);
        }
    };
    /**
     * @return {?}
     */
    FormValidateMessagesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.form && this.controlContainer) {
            this.form = this.controlContainer.formDirective ? ((/** @type {?} */ (this.controlContainer.formDirective))).form : null;
        }
        if (this.form) {
            this.subscription = this.form.statusChanges
                .subscribe(function () {
                _this.checkFormValidate();
            });
        }
    };
    /**
     * @param {?} errors
     * @return {?}
     */
    FormValidateMessagesComponent.prototype.errorKeys = /**
     * @param {?} errors
     * @return {?}
     */
    function (errors) {
        return Object.keys(errors);
    };
    /**
     * @param {?} error
     * @return {?}
     */
    FormValidateMessagesComponent.prototype.errorMsg = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return CommonsUtils.getText(error);
    };
    /**
     * @return {?}
     */
    FormValidateMessagesComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    FormValidateMessagesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-form-validate-messages',
                    template: "<div *ngIf=\"errors$|async as errors\">\n  <ng-container *ngTemplateOutlet=\"errorMsgTpl?errorMsgTpl:defaultTpl;context:{$implicit:errors}\"></ng-container>\n</div>\n\n<ng-template #defaultTpl let-errors>\n  <div class=\"text-danger\" [ngClass]=\"styleClass\">\n    <ul *ngFor=\"let key of errorKeys(errors)\" class=\"d-flex flex-column justify-content-start\">\n     <li class=\"my-2\">{{key}}</li>\n    </ul>\n  </div>\n</ng-template>",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    FormValidateMessagesComponent.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: Optional }] }
    ]; };
    FormValidateMessagesComponent.propDecorators = {
        form: [{ type: Input }],
        messages: [{ type: Input }],
        fields: [{ type: Input }],
        styleClass: [{ type: Input }],
        errorMsgTpl: [{ type: ContentChild, args: [TemplateRef,] }]
    };
    return FormValidateMessagesComponent;
}());
export { FormValidateMessagesComponent };
if (false) {
    /** @type {?} */
    FormValidateMessagesComponent.prototype.form;
    /** @type {?} */
    FormValidateMessagesComponent.prototype.messages;
    /** @type {?} */
    FormValidateMessagesComponent.prototype.fields;
    /** @type {?} */
    FormValidateMessagesComponent.prototype.styleClass;
    /** @type {?} */
    FormValidateMessagesComponent.prototype.errorMsgTpl;
    /** @type {?} */
    FormValidateMessagesComponent.prototype.errors$;
    /** @type {?} */
    FormValidateMessagesComponent.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    FormValidateMessagesComponent.prototype.controlContainer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ZhbGlkYXRlLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZm9ybS9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsUUFBUSxFQUFFLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoSSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsU0FBUyxFQUFxQixNQUFNLGdCQUFnQixDQUFDO0FBQy9FLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxFQUFDLE9BQU8sRUFBZSxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBRzFDO0lBcUJFLHVDQUFnQyxnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUpsRSxZQUFPLEdBQWdCLElBQUksT0FBTyxFQUFFLENBQUM7SUFLckMsQ0FBQzs7OztJQUVELHlEQUFpQjs7O0lBQWpCO1FBQ0UsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNyQixLQUFLLEVBQUUsQ0FBQztZQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ3ZGO2FBQU07WUFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUM5QjtJQUNILENBQUM7Ozs7SUFFRCxnREFBUTs7O0lBQVI7UUFBQSxpQkFVQztRQVRDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN2QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQUEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBc0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1NBQzNIO1FBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWE7aUJBQ3hDLFNBQVMsQ0FBQztnQkFDVCxLQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUMzQixDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxpREFBUzs7OztJQUFULFVBQVUsTUFBVTtRQUNsQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFFRCxnREFBUTs7OztJQUFSLFVBQVMsS0FBSztRQUNaLE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7O0lBRUQsbURBQVc7OztJQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDOztnQkF6REYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLGdjQUF1QjtvQkFDdkIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzs7O2dCQVZPLGdCQUFnQix1QkEyQlQsUUFBUTs7O3VCQWRwQixLQUFLOzJCQUVMLEtBQUs7eUJBRUwsS0FBSzs2QkFFTCxLQUFLOzhCQUVMLFlBQVksU0FBQyxXQUFXOztJQTJDM0Isb0NBQUM7Q0FBQSxBQTFERCxJQTBEQztTQXJEWSw2QkFBNkI7OztJQUV4Qyw2Q0FBeUI7O0lBRXpCLGlEQUE2Qzs7SUFFN0MsK0NBQW9COztJQUVwQixtREFBNEI7O0lBRTVCLG9EQUF5RDs7SUFFekQsZ0RBQXFDOztJQUVyQyxxREFBMkI7Ozs7O0lBRWYseURBQXNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBDb250ZW50Q2hpbGQsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3B0aW9uYWwsIFRlbXBsYXRlUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29udHJvbENvbnRhaW5lciwgRm9ybUdyb3VwLCBGb3JtR3JvdXBEaXJlY3RpdmV9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7Q29tbW9uc1V0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtTdWJqZWN0LCBTdWJzY3JpcHRpb259IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtWYWxpZGF0ZVV0aWxzfSBmcm9tICcuLi8uLi91dGlscyc7XG5cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZXItZm9ybS12YWxpZGF0ZS1tZXNzYWdlcycsXG4gIHRlbXBsYXRlVXJsOiAndHBsLmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBGb3JtVmFsaWRhdGVNZXNzYWdlc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBASW5wdXQoKSBmb3JtOiBGb3JtR3JvdXA7XG5cbiAgQElucHV0KCkgbWVzc2FnZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG5cbiAgQElucHV0KCkgZmllbGRzOiB7fTtcblxuICBASW5wdXQoKSBzdHlsZUNsYXNzOiBzdHJpbmc7XG5cbiAgQENvbnRlbnRDaGlsZChUZW1wbGF0ZVJlZikgZXJyb3JNc2dUcGw6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgZXJyb3JzJDogU3ViamVjdDx7fT4gPSBuZXcgU3ViamVjdCgpO1xuXG4gIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgY29udHJvbENvbnRhaW5lcjogQ29udHJvbENvbnRhaW5lcikge1xuICB9XG5cbiAgY2hlY2tGb3JtVmFsaWRhdGUoKSB7XG4gICAgaWYgKHRoaXMuZm9ybS5pbnZhbGlkKSB7XG4gICAgICBhbGVydCgpO1xuICAgICAgdGhpcy5lcnJvcnMkLm5leHQoVmFsaWRhdGVVdGlscy5nZXRGb3JtRXJyb3JzKHRoaXMuZm9ybSwgdGhpcy5tZXNzYWdlcywgdGhpcy5maWVsZHMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lcnJvcnMkLm5leHQodW5kZWZpbmVkKTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZm9ybSAmJiB0aGlzLmNvbnRyb2xDb250YWluZXIpIHtcbiAgICAgIHRoaXMuZm9ybSA9IHRoaXMuY29udHJvbENvbnRhaW5lci5mb3JtRGlyZWN0aXZlID8gKHRoaXMuY29udHJvbENvbnRhaW5lci5mb3JtRGlyZWN0aXZlIGFzIEZvcm1Hcm91cERpcmVjdGl2ZSkuZm9ybSA6IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLmZvcm0pIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5mb3JtLnN0YXR1c0NoYW5nZXNcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5jaGVja0Zvcm1WYWxpZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBlcnJvcktleXMoZXJyb3JzOiB7fSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhlcnJvcnMpO1xuICB9XG5cbiAgZXJyb3JNc2coZXJyb3IpIHtcbiAgICByZXR1cm4gQ29tbW9uc1V0aWxzLmdldFRleHQoZXJyb3IpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuIl19