/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FormArray, FormControl, FormGroup } from '@angular/forms';
import { CommonsUtils } from '@er/utils';
import { NgValidateMessages } from '../validators/all';
var ValidateUtils = /** @class */ (function () {
    function ValidateUtils() {
    }
    /**
     * @param {?} form
     * @param {?=} messages
     * @param {?=} formlyfield
     * @return {?}
     */
    ValidateUtils.getFormErrors = /**
     * @param {?} form
     * @param {?=} messages
     * @param {?=} formlyfield
     * @return {?}
     */
    function (form, messages, formlyfield) {
        /** @type {?} */
        var errors = {};
        if (form instanceof FormControl) {
            return (ValidateUtils.getControlErrors((/** @type {?} */ (form)), messages, formlyfield));
        }
        else if (form instanceof FormGroup) {
            Object.keys(form.controls).map(function (name) {
                return errors[name] = (ValidateUtils.getFormErrors((/** @type {?} */ (form.controls[name])), messages, formlyfield));
            });
        }
        else if (form instanceof FormArray) {
            /** @type {?} */
            var err_1 = [];
            ((/** @type {?} */ (form.controls[name]))).controls.forEach(function (control) {
                return err_1.push((ValidateUtils.getFormErrors(control, messages, formlyfield)));
            });
            return err_1;
        }
        return errors;
    };
    /**
     * @param {?} control
     * @param {?=} messages
     * @param {?=} formlyfield
     * @return {?}
     */
    ValidateUtils.getControlErrors = /**
     * @param {?} control
     * @param {?=} messages
     * @param {?=} formlyfield
     * @return {?}
     */
    function (control, messages, formlyfield) {
        return ValidateUtils.getErrorMessage(control.errors, messages, formlyfield);
    };
    /**
     * @param {?} errors
     * @param {?=} messages
     * @param {?=} formlyfield
     * @return {?}
     */
    ValidateUtils.getErrorMessage = /**
     * @param {?} errors
     * @param {?=} messages
     * @param {?=} formlyfield
     * @return {?}
     */
    function (errors, messages, formlyfield) {
        var _this = this;
        if (!errors) {
            return {};
        }
        /** @type {?} */
        var errorMessages = {};
        Object.keys(errors).forEach(function (key) {
            /** @type {?} */
            var message;
            if (formlyfield) {
                if (formlyfield.validators && formlyfield.validators[key] && formlyfield.validators[key].message) {
                    message = formlyfield.validators[key].message;
                }
                else if (formlyfield.asyncValidators && formlyfield.asyncValidators[key] && formlyfield.asyncValidators[key].message) {
                    message = formlyfield.asyncValidators[key].message;
                }
            }
            if (!message) {
                if (messages && messages.hasOwnProperty(key)) {
                    message = messages[key];
                }
                else if (NgValidateMessages.hasOwnProperty(key)) {
                    message = NgValidateMessages[key];
                }
                else {
                    message = key;
                }
            }
            if (typeof message === 'string') {
                errorMessages[key] = message;
            }
            else if (typeof message === 'function') {
                errorMessages[key] = message.apply(_this, [errors[key], formlyfield]);
            }
        });
        return errorMessages;
    };
    /**
     * @param {?} error
     * @param {?=} context
     * @return {?}
     */
    ValidateUtils.dynaValidationMessageFn = /**
     * @param {?} error
     * @param {?=} context
     * @return {?}
     */
    function (error, context) {
        /** @type {?} */
        var values = [];
        if (CommonsUtils.isJson(error) && context.errorProps) {
            if (Array.isArray(context.errorProps)) {
                context.errorProps.forEach(function (key) { return values.push(error[key]); });
            }
            else {
                values.push(error[context.errorProps]);
            }
        }
        else {
            /** @type {?} */
            var dyna = CommonsUtils.get(context, 'validation.dyna', []);
            /** @type {?} */
            var info = CommonsUtils.find(dyna, { key: context.errorKey });
            if (info) {
                values = info['args'] || [];
            }
        }
        return CommonsUtils.templateStr(context.format, values);
    };
    return ValidateUtils;
}());
export { ValidateUtils };
//# sourceMappingURL=data:application/json;base64,