import { RegPatterns } from '@er/types';
import { Subject } from 'rxjs';
import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';
import { CommonsUtils, DateUtils, FormUtils, RegUtils, IdCardUtils, CacheUtils } from '@er/utils';
import { __spread } from 'tslib';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, ContentChild, Input, Optional, TemplateRef, ChangeDetectorRef, Directive, HostListener, ComponentFactoryResolver, HostBinding, ViewContainerRef, NgModule } from '@angular/core';
import { FormGroup, Validators, FormArray, FormControl, ControlContainer, NgControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CustomValidators, CustomFormsModule } from 'ng2-validation';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var dateAfterValidator = function (after) {
    /** @type {?} */
    var fn = function (control) {
        /** @type {?} */
        var value = control.value;
        if (!DateUtils.isDate(value)) {
            return { 'dateAfter': { message: '错误的日期格式', value: value } };
        }
        /** @type {?} */
        var isAfter = CommonsUtils.isAfter(value, after);
        return isAfter ? null : { 'dateAfter': { value: value, after: after } };
    };
    return fn;
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var ageValidator = function (min, max) {
    /** @type {?} */
    var fn = function (control) {
        /** @type {?} */
        var value = control.value;
        if (!value) {
            return null;
        }
        if (!DateUtils.isDate(value)) {
            return { 'age': { message: '错误的日期格式', value: value } };
        }
        /** @type {?} */
        var age = CommonsUtils.getAge(value);
        /** @type {?} */
        var isInValid = (min > 0 && age < min) || (max > 0 && age > max);
        return isInValid ? null : { 'age': { min: min, max: max, value: value } };
    };
    return fn;
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var dateBeforeValidator = function (before) {
    /** @type {?} */
    var fn = function (control) {
        /** @type {?} */
        var value = control.value;
        if (!DateUtils.isDate(value)) {
            return { 'dataBefore': { message: '错误的日期格式', value: value } };
        }
        /** @type {?} */
        var isBefore = CommonsUtils.isBefore(control.value, before);
        return isBefore ? null : { 'dataBefore': { value: value, before: before } };
    };
    return fn;
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var dateBetweenValidator = function (before, after) {
    /** @type {?} */
    var fn = function (control) {
        /** @type {?} */
        var value = control.value;
        if (!DateUtils.isDate(value)) {
            return { 'dataBetween': { message: '错误的日期格式', value: value } };
        }
        /** @type {?} */
        var isBetween = CommonsUtils.isBefore(value, before)
            && CommonsUtils.isAfter(value, after);
        return isBetween ? null : { 'dataBetween': { value: value, before: before, after: after } };
    };
    return fn;
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var conditionValidator = function (condition) {
    /** @type {?} */
    var fn = function (control) {
        return condition(control.value) ? null : {
            condition: { condition: condition, value: control.value }
        };
    };
    return fn;
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var dateFormatValidator = function (dateRegPattern) {
    if (dateRegPattern === void 0) { dateRegPattern = RegPatterns.date_yyyymmdd; }
    /** @type {?} */
    var fn = function (control) {
        /** @type {?} */
        var value = control.value;
        /** @type {?} */
        var isValid = !value || value.match(dateRegPattern);
        return isValid ? null : { 'dateFormat': { value: value, 'format': dateRegPattern } };
    };
    return fn;
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var equalToValidator = function (controlName) {
    /** @type {?} */
    var fn = function (control) {
        /** @type {?} */
        var parent = control.parent;
        /** @type {?} */
        var target;
        while (parent instanceof FormGroup) {
            target = FormUtils.getFormControl(parent, controlName);
            if (target) {
                break;
            }
            parent = parent.parent;
        }
        if (target) {
            /** @type {?} */
            var value = control.value;
            /** @type {?} */
            var targetValue = target.value;
            /** @type {?} */
            var isValid = value === targetValue;
            return isValid ? null : { 'equalTo': { value: value, controlName: controlName } };
        }
        return null;
    };
    return fn;
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var matchValidator = function (pattern, errorKey) {
    if (errorKey === void 0) { errorKey = 'match'; }
    /** @type {?} */
    var fn = function (control) {
        var _a;
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, pattern) ? null : (_a = {}, _a[errorKey] = { pattern: pattern, value: value }, _a);
    };
    return fn;
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var notEqualToValidator = function (controlName) {
    /** @type {?} */
    var fn = function (control) {
        /** @type {?} */
        var parent = control.parent;
        /** @type {?} */
        var target;
        while (parent instanceof FormGroup) {
            target = FormUtils.getFormControl(parent, controlName);
            if (target) {
                break;
            }
            parent = parent.parent;
        }
        if (target) {
            /** @type {?} */
            var value = control.value;
            /** @type {?} */
            var targetValue = target.value;
            /** @type {?} */
            var isValid = value !== targetValue;
            return isValid ? null : { 'notEqualTo': { value: value, controlName: controlName } };
        }
        return null;
    };
    return fn;
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var passwordValidator = function (options) {
    if (!options) {
        options = {
            minLength: 6,
            requireLetters: true,
            requireNumbers: true
        };
    }
    /** @type {?} */
    var validator = new PasswordValidator(options);
    return function (control) {
        return validator.validate(control.value);
    };
};
var PasswordValidator = /** @class */ (function () {
    function PasswordValidator(options) {
        this.options = options;
        this.letterMatcher = /[a-zA-Z]/;
        this.lowerCaseLetterMatcher = /[a-z]/;
        this.upperCaseLetterMatcher = /[A-Z]/;
        this.numberMatcher = /[0-9]/;
        this.specialCharactersMatcher = /[-+=_.,:;~`!@#$%^&*(){}<>\[\]"'\/\\]/;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    PasswordValidator.prototype.validate = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!value) {
            return null;
        }
        /** @type {?} */
        var errors = {};
        // Minimum length.
        if (this.options.minLength > 0 && value.length < this.options.minLength) {
            errors.passwordMinLengthRequired = {
                minLength: this.options.minLength
            };
        }
        // Maximum length.
        if (this.options.maxLength >= 0 && value.length > this.options.maxLength) {
            errors.passwordMaxLengthExceeded = {
                maxLength: this.options.maxLength
            };
        }
        // Letters.
        if (this.options.requireLetters && !this.letterMatcher.test(value)) {
            errors.passwordLetterRequired = true;
        }
        // Lower-case letters.
        if (this.options.requireLowerCaseLetters && !this.lowerCaseLetterMatcher.test(value)) {
            errors.passwordLowerCaseLetterRequired = true;
        }
        // Upper-case letters.
        if (this.options.requireUpperCaseLetters && !this.upperCaseLetterMatcher.test(value)) {
            errors.passwordUpperCaseLetterRequired = true;
        }
        // Numbers.
        if (this.options.requireNumbers && !this.numberMatcher.test(value)) {
            errors.passwordNumberRequired = true;
        }
        // Special characters.
        if (this.options.requireSpecialCharacters && !this.specialCharactersMatcher.test(value)) {
            errors.passwordSpecialCharacterRequired = true;
        }
        return Object.keys(errors).length > 0 ? { password: { errors: errors, options: this.options } } : null;
    };
    return PasswordValidator;
}());
/**
 * @param {?} error
 * @return {?}
 */
function passwordValidationMessage(error) {
    /** @type {?} */
    var options = (/** @type {?} */ (error.options));
    /** @type {?} */
    var s = [];
    if (options.minLength) {
        s.push('最少' + options.minLength + '位');
    }
    if (options.maxLength) {
        s.push('最多' + options.maxLength + '位');
    }
    if (options.requireLetters) {
        s.push('包含字母');
    }
    if (options.requireLowerCaseLetters) {
        s.push('包含小写字母');
    }
    if (options.requireUpperCaseLetters) {
        s.push('包含大小字母');
    }
    if (options.requireNumbers) {
        s.push('包含数字');
    }
    if (options.requireSpecialCharacters) {
        s.push('包含非数字和字母');
    }
    return "\u767B\u5F55\u5BC6\u7801\u5FC5\u987B:<br>" + s.join('<br>');
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgValidators = /** @class */ (function () {
    function NgValidators() {
    }
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.letter = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.letter) ? null : { letter: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.character = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.character) ? null : { character: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.ascii = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.ascii) ? null : { ascii: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.chinese = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.chinese) ? null : { chinese: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.digit = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.digit) ? null : { digit: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.integer = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.integer) ? null : { integer: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.numeric = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.numeric) ? null : { numeric: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.phone = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.phone) ? null : { phone: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.idCard = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        /** @type {?} */
        var validation = IdCardUtils.test(value);
        return validation.status ? null : { idCard: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.ip = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.ip) ? null : { ip: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.halfWidth = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.halfWidth) ? null : { halfWidth: true };
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.fullWidth = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value;
        if (CommonsUtils.isEmptyString(value)) {
            return null;
        }
        return RegUtils.test(value, RegPatterns.fullWidth) ? null : { fullWidth: true };
    };
    /**
     * @param {?} pattern
     * @return {?}
     */
    NgValidators.match = /**
     * @param {?} pattern
     * @return {?}
     */
    function (pattern) {
        return matchValidator(pattern);
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    NgValidators.password = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return passwordValidator(options);
    };
    /**
     * @param {?} before
     * @return {?}
     */
    NgValidators.before = /**
     * @param {?} before
     * @return {?}
     */
    function (before) {
        return dateBeforeValidator(before);
    };
    /**
     * @param {?} after
     * @return {?}
     */
    NgValidators.after = /**
     * @param {?} after
     * @return {?}
     */
    function (after) {
        return dateAfterValidator(after);
    };
    /**
     * @param {?} before
     * @param {?} after
     * @return {?}
     */
    NgValidators.between = /**
     * @param {?} before
     * @param {?} after
     * @return {?}
     */
    function (before, after) {
        return dateBetweenValidator(before, after);
    };
    /**
     * @param {?=} formatPattern
     * @return {?}
     */
    NgValidators.dateFormat = /**
     * @param {?=} formatPattern
     * @return {?}
     */
    function (formatPattern) {
        return dateFormatValidator(formatPattern);
    };
    /**
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    NgValidators.age = /**
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    function (min, max) {
        if (min === void 0) { min = 0; }
        if (max === void 0) { max = 0; }
        return ageValidator(min, max);
    };
    /**
     * @param {?} conditionFn
     * @return {?}
     */
    NgValidators.condition = /**
     * @param {?} conditionFn
     * @return {?}
     */
    function (conditionFn) {
        return conditionValidator(conditionFn);
    };
    /**
     * @param {?} controlName
     * @return {?}
     */
    NgValidators.equalTo = /**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return equalToValidator(controlName);
    };
    /**
     * @param {?} controlName
     * @return {?}
     */
    NgValidators.notEqualTo = /**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        return notEqualToValidator(controlName);
    };
    /**
     * @param {?} minlength
     * @return {?}
     */
    NgValidators.minLength = /**
     * @param {?} minlength
     * @return {?}
     */
    function (minlength) {
        return Validators.minLength(minlength);
    };
    /**
     * @param {?} maxlength
     * @return {?}
     */
    NgValidators.maxLength = /**
     * @param {?} maxlength
     * @return {?}
     */
    function (maxlength) {
        return Validators.maxLength(maxlength);
    };
    /**
     * @param {?} minValue
     * @return {?}
     */
    NgValidators.min = /**
     * @param {?} minValue
     * @return {?}
     */
    function (minValue) {
        return Validators.min(minValue);
    };
    /**
     * @param {?} maxValue
     * @return {?}
     */
    NgValidators.max = /**
     * @param {?} maxValue
     * @return {?}
     */
    function (maxValue) {
        return Validators.max(maxValue);
    };
    /**
     * @param {?} reg
     * @return {?}
     */
    NgValidators.pattern = /**
     * @param {?} reg
     * @return {?}
     */
    function (reg) {
        return Validators.pattern(reg);
    };
    /**
     * @param {?} minLength
     * @param {?} maxLength
     * @return {?}
     */
    NgValidators.rangeLength = /**
     * @param {?} minLength
     * @param {?} maxLength
     * @return {?}
     */
    function (minLength, maxLength) {
        return CustomValidators.rangeLength([minLength, maxLength]);
    };
    /**
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    NgValidators.range = /**
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    function (min, max) {
        return CustomValidators.range([min, max]);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgValidators.gt = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return CustomValidators.gt(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgValidators.gte = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return CustomValidators.gte(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgValidators.lt = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return CustomValidators.lt(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgValidators.lte = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return CustomValidators.lte(value);
    };
    /**
     * @param {?} minDate
     * @return {?}
     */
    NgValidators.minDate = /**
     * @param {?} minDate
     * @return {?}
     */
    function (minDate) {
        return CustomValidators.minDate(minDate);
    };
    /**
     * @param {?} maxDate
     * @return {?}
     */
    NgValidators.maxDate = /**
     * @param {?} maxDate
     * @return {?}
     */
    function (maxDate) {
        return CustomValidators.maxDate(maxDate);
    };
    /**
     * @param {?} s
     * @return {?}
     */
    NgValidators.equal = /**
     * @param {?} s
     * @return {?}
     */
    function (s) {
        return CustomValidators.equal(s);
    };
    /**
     * @param {?} s
     * @return {?}
     */
    NgValidators.notEqual = /**
     * @param {?} s
     * @return {?}
     */
    function (s) {
        return CustomValidators.notEqual(s);
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.equalTo2 = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return CustomValidators.equalTo(control);
    };
    /**
     * @param {?} control
     * @return {?}
     */
    NgValidators.notEqualTo2 = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return CustomValidators.notEqualTo(control);
    };
    NgValidators.required = Validators.required;
    NgValidators.accept = Validators.requiredTrue;
    NgValidators.email = CustomValidators.email;
    NgValidators.url = CustomValidators.url;
    NgValidators.date = CustomValidators.date;
    NgValidators.json = CustomValidators.json;
    NgValidators.base64 = CustomValidators.base64;
    NgValidators.creditCard = CustomValidators.creditCard;
    return NgValidators;
}());
var NgValidateMessages = /** @class */ (function () {
    function NgValidateMessages() {
    }
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.maxlength = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u957F\u5EA6\u4E0D\u80FD\u5927\u4E8E<strong>" + error.requiredLength + "</strong>\u4E2A\u5B57";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.minlength = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u957F\u5EA6\u4E0D\u80FD\u5C11\u4E8E<strong>" + error.requiredLength + "</strong>\u4E2A\u5B57";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.min = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u4E0D\u80FD\u5C0F\u4E8E<strong>" + error.min + "</strong>";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.max = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u4E0D\u80FD\u5927\u4E8E<strong>" + error.max + "</strong>";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.age = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u5E74\u9F84\u5FC5\u987B\u4ECB\u4E8E " + error.min + " " + error.max;
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.password = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return passwordValidationMessage(error);
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.dateBefore = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u65E5\u671F\u5FC5\u987B\u5728 " + error.before + "\u4E4B\u524D";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.dateAfter = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u65E5\u671F\u5FC5\u987B\u5728 " + error.after + "\u4E4B\u540E";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.dataBetween = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u65E5\u671F\u5FC5\u987B\u5728 " + error.before + "\u548C" + error.after + "\u4E4B\u95F4";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.rangeLength = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u957F\u5EA6\u5FC5\u987B\u5927\u4E8E<strong>" + error.max + "</strong>";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.gt = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u5FC5\u987B\u5927\u4E8E<strong>" + error.max + "</strong>";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.lt = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u4E0D\u80FD\u5927\u4E8E<strong>" + error.lt + "</strong>";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.lte = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u4E0D\u80FD\u5927\u4E8E<strong>" + error.lte + "</strong>";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.range = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u4E0D\u80FD\u5927\u4E8E<strong>" + error.lte + "</strong>";
    };
    /**
     * @param {?} error
     * @return {?}
     */
    NgValidateMessages.minDate = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return "\u65E5\u671F\u4E0D\u80FD\u5C0F\u4E8E<strong>" + error.minDate + "</strong>";
    };
    NgValidateMessages.required = '此项内容必须填写';
    NgValidateMessages.pattern = '格式不符合要求';
    NgValidateMessages.letter = '此项内容必须是英文字母';
    NgValidateMessages.digit = '此项内容必须是数字';
    NgValidateMessages.character = '此项内容必须是英文字母或数字';
    NgValidateMessages.chinese = '此项内容必须是简体中文';
    NgValidateMessages.integer = '此项内容必须是整数';
    NgValidateMessages.number = '此项内容必须是数值';
    NgValidateMessages.fullWidth = '此项内容必须是全角';
    NgValidateMessages.halfWidth = '此项内容必须是半角';
    NgValidateMessages.phone = '手机号码格式不符合要求';
    NgValidateMessages.condition = '输入不符合要求';
    NgValidateMessages.email = '无效的email地址';
    NgValidateMessages.idCard = '无效的身份证号';
    NgValidateMessages.not_matching = '密码不匹配';
    NgValidateMessages.unique = '该值已经存在';
    NgValidateMessages.gte = '输入不符合要求';
    NgValidateMessages.url = '地址格式不符合要求';
    NgValidateMessages.date = '日期格式不符合要求';
    NgValidateMessages.maxDate = '输入不符合要求';
    NgValidateMessages.json = '输入不符合要求';
    NgValidateMessages.base64 = '输入不符合要求';
    NgValidateMessages.equal = '两次输入不一致';
    NgValidateMessages.notEqual = '两次输入不能一致';
    NgValidateMessages.equalTo = '两次输入不一致';
    NgValidateMessages.notEqualTo = '两次输入不能一致';
    NgValidateMessages.duplicated = '当前值已经存在，不能重复';
    NgValidateMessages.exists = '当前值已经存在，不能使用';
    return NgValidateMessages;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ValidateUtils = /** @class */ (function () {
    function ValidateUtils() {
    }
    /**
     * @param {?} form
     * @param {?=} messages
     * @param {?=} formlyfield
     * @return {?}
     */
    ValidateUtils.getFormErrors = /**
     * @param {?} form
     * @param {?=} messages
     * @param {?=} formlyfield
     * @return {?}
     */
    function (form, messages, formlyfield) {
        /** @type {?} */
        var errors = {};
        if (form instanceof FormControl) {
            return (ValidateUtils.getControlErrors((/** @type {?} */ (form)), messages, formlyfield));
        }
        else if (form instanceof FormGroup) {
            Object.keys(form.controls).map(function (name) {
                return errors[name] = (ValidateUtils.getFormErrors((/** @type {?} */ (form.controls[name])), messages, formlyfield));
            });
        }
        else if (form instanceof FormArray) {
            /** @type {?} */
            var err_1 = [];
            ((/** @type {?} */ (form.controls[name]))).controls.forEach(function (control) {
                return err_1.push((ValidateUtils.getFormErrors(control, messages, formlyfield)));
            });
            return err_1;
        }
        return errors;
    };
    /**
     * @param {?} control
     * @param {?=} messages
     * @param {?=} formlyfield
     * @return {?}
     */
    ValidateUtils.getControlErrors = /**
     * @param {?} control
     * @param {?=} messages
     * @param {?=} formlyfield
     * @return {?}
     */
    function (control, messages, formlyfield) {
        return ValidateUtils.getErrorMessage(control.errors, messages, formlyfield);
    };
    /**
     * @param {?} errors
     * @param {?=} messages
     * @param {?=} formlyfield
     * @return {?}
     */
    ValidateUtils.getErrorMessage = /**
     * @param {?} errors
     * @param {?=} messages
     * @param {?=} formlyfield
     * @return {?}
     */
    function (errors, messages, formlyfield) {
        var _this = this;
        if (!errors) {
            return {};
        }
        /** @type {?} */
        var errorMessages = {};
        Object.keys(errors).forEach(function (key) {
            /** @type {?} */
            var message;
            if (formlyfield) {
                if (formlyfield.validators && formlyfield.validators[key] && formlyfield.validators[key].message) {
                    message = formlyfield.validators[key].message;
                }
                else if (formlyfield.asyncValidators && formlyfield.asyncValidators[key] && formlyfield.asyncValidators[key].message) {
                    message = formlyfield.asyncValidators[key].message;
                }
            }
            if (!message) {
                if (messages && messages.hasOwnProperty(key)) {
                    message = messages[key];
                }
                else if (NgValidateMessages.hasOwnProperty(key)) {
                    message = NgValidateMessages[key];
                }
                else {
                    message = key;
                }
            }
            if (typeof message === 'string') {
                errorMessages[key] = message;
            }
            else if (typeof message === 'function') {
                errorMessages[key] = message.apply(_this, [errors[key], formlyfield]);
            }
        });
        return errorMessages;
    };
    /**
     * @param {?} error
     * @param {?=} context
     * @return {?}
     */
    ValidateUtils.dynaValidationMessageFn = /**
     * @param {?} error
     * @param {?=} context
     * @return {?}
     */
    function (error, context) {
        /** @type {?} */
        var values = [];
        if (CommonsUtils.isJson(error) && context.errorProps) {
            if (Array.isArray(context.errorProps)) {
                context.errorProps.forEach(function (key) { return values.push(error[key]); });
            }
            else {
                values.push(error[context.errorProps]);
            }
        }
        else {
            /** @type {?} */
            var dyna = CommonsUtils.get(context, 'validation.dyna', []);
            /** @type {?} */
            var info = CommonsUtils.find(dyna, { key: context.errorKey });
            if (info) {
                values = info['args'] || [];
            }
        }
        return CommonsUtils.templateStr(context.format, values);
    };
    return ValidateUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormValidateMessagesComponent = /** @class */ (function () {
    function FormValidateMessagesComponent(controlContainer) {
        this.controlContainer = controlContainer;
        this.errors$ = new Subject();
    }
    /**
     * @return {?}
     */
    FormValidateMessagesComponent.prototype.checkFormValidate = /**
     * @return {?}
     */
    function () {
        if (this.form.invalid) {
            alert();
            this.errors$.next(ValidateUtils.getFormErrors(this.form, this.messages, this.fields));
        }
        else {
            this.errors$.next(undefined);
        }
    };
    /**
     * @return {?}
     */
    FormValidateMessagesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.form && this.controlContainer) {
            this.form = this.controlContainer.formDirective ? ((/** @type {?} */ (this.controlContainer.formDirective))).form : null;
        }
        if (this.form) {
            this.subscription = this.form.statusChanges
                .subscribe(function () {
                _this.checkFormValidate();
            });
        }
    };
    /**
     * @param {?} errors
     * @return {?}
     */
    FormValidateMessagesComponent.prototype.errorKeys = /**
     * @param {?} errors
     * @return {?}
     */
    function (errors) {
        return Object.keys(errors);
    };
    /**
     * @param {?} error
     * @return {?}
     */
    FormValidateMessagesComponent.prototype.errorMsg = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return CommonsUtils.getText(error);
    };
    /**
     * @return {?}
     */
    FormValidateMessagesComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    FormValidateMessagesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-form-validate-messages',
                    template: "<div *ngIf=\"errors$|async as errors\">\n  <ng-container *ngTemplateOutlet=\"errorMsgTpl?errorMsgTpl:defaultTpl;context:{$implicit:errors}\"></ng-container>\n</div>\n\n<ng-template #defaultTpl let-errors>\n  <div class=\"text-danger\" [ngClass]=\"styleClass\">\n    <ul *ngFor=\"let key of errorKeys(errors)\" class=\"d-flex flex-column justify-content-start\">\n     <li class=\"my-2\">{{key}}</li>\n    </ul>\n  </div>\n</ng-template>",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    FormValidateMessagesComponent.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: Optional }] }
    ]; };
    FormValidateMessagesComponent.propDecorators = {
        form: [{ type: Input }],
        messages: [{ type: Input }],
        fields: [{ type: Input }],
        styleClass: [{ type: Input }],
        errorMsgTpl: [{ type: ContentChild, args: [TemplateRef,] }]
    };
    return FormValidateMessagesComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ValidateMessagesComponent = /** @class */ (function () {
    function ValidateMessagesComponent(controlContainer, cd) {
        this.controlContainer = controlContainer;
        this.cd = cd;
        this.showAllErrors = true;
        this.errors$ = new BehaviorSubject(undefined);
    }
    /**
     * @return {?}
     */
    ValidateMessagesComponent.prototype.getErrorMessages = /**
     * @return {?}
     */
    function () {
        if (this.control.dirty && this.control.invalid) {
            /** @type {?} */
            var errorMessages = ValidateUtils.getErrorMessage(this.control.errors);
            /** @type {?} */
            var errors = this.showAllErrors ? errorMessages : this.getFirstError(errorMessages);
            this.errors$.next(this.getErrors(errors));
        }
        else {
            return this.errors$.next([]);
        }
    };
    /**
     * @param {?} errorMessages
     * @return {?}
     */
    ValidateMessagesComponent.prototype.getFirstError = /**
     * @param {?} errorMessages
     * @return {?}
     */
    function (errorMessages) {
        if (Object.keys(errorMessages).length > 0) {
            return errorMessages[Object.keys(errorMessages)[0]];
        }
        return '校验失败';
    };
    /**
     * @param {?} errorMessages
     * @return {?}
     */
    ValidateMessagesComponent.prototype.getErrors = /**
     * @param {?} errorMessages
     * @return {?}
     */
    function (errorMessages) {
        var _this = this;
        /** @type {?} */
        var lst = [];
        if (errorMessages) {
            Object.keys(errorMessages).map(function (key) {
                lst.push({ key: key, value: (_this.messages && _this.messages[key]) || errorMessages[key] });
            });
        }
        return lst;
    };
    /**
     * @return {?}
     */
    ValidateMessagesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.control) {
            if (this.formlyField) {
                this.control = this.formlyField.formControl;
            }
            if (!this.control && this.controlContainer) {
                /** @type {?} */
                var form = this.controlContainer.formDirective ? ((/** @type {?} */ (this.controlContainer.formDirective))).form : null;
                if (form) {
                    this.control = FormUtils.getFormControl.apply(FormUtils, __spread([form], this.controlContainer.path, [this.controlName]));
                }
            }
        }
        if (this.control) {
            this.subscription = this.control.statusChanges.subscribe(function () {
                _this.getErrorMessages();
            });
        }
    };
    /**
     * @return {?}
     */
    ValidateMessagesComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    ValidateMessagesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'er-validate-messages',
                    template: "\n    <div *ngIf=\"errors$|async as errors\">\n      <ng-container *ngTemplateOutlet=\"errorMsgTpl?errorMsgTpl:defaultTpl;context:{$implicit:errors}\"></ng-container>\n    </div>\n    <ng-template #defaultTpl let-errors>\n      <div class=\"text-danger\" [ngClass]=\"styleClass\">\n        <ul *ngFor=\"let error of errors \" class=\"d-flex flex-column justify-content-start\">\n          <li [innerHTML]=\"error.value\" class=\"my-1\" style=\"font-size: 0.8em\"></li>\n        </ul>\n      </div>\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    ValidateMessagesComponent.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef }
    ]; };
    ValidateMessagesComponent.propDecorators = {
        control: [{ type: Input }],
        controlName: [{ type: Input }],
        formlyField: [{ type: Input }],
        force: [{ type: Input }],
        styleClass: [{ type: Input }],
        showAllErrors: [{ type: Input }],
        messages: [{ type: Input }],
        errorMsgTpl: [{ type: ContentChild, args: [TemplateRef,] }]
    };
    return ValidateMessagesComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ValidateOnBlurMessageDirective = /** @class */ (function () {
    function ValidateOnBlurMessageDirective(model) {
        this.model = model;
    }
    Object.defineProperty(ValidateOnBlurMessageDirective.prototype, "control", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.model && this.model.control) {
                return this.model.control;
            }
            else {
                return undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ValidateOnBlurMessageDirective.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        if (this.control) {
            this.validators = this.control.validator;
            this.asyncValidators = this.control.asyncValidator;
            this.control.clearAsyncValidators();
            this.control.clearValidators();
        }
    };
    /**
     * @return {?}
     */
    ValidateOnBlurMessageDirective.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        if (this.control) {
            this.control.setAsyncValidators(this.asyncValidators);
            this.control.setValidators(this.validators);
            this.control.updateValueAndValidity();
        }
    };
    ValidateOnBlurMessageDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erValidateOnBlur]'
                },] }
    ];
    /** @nocollapse */
    ValidateOnBlurMessageDirective.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }] }
    ]; };
    ValidateOnBlurMessageDirective.propDecorators = {
        onFocus: [{ type: HostListener, args: ['focus',] }],
        onBlur: [{ type: HostListener, args: ['blur',] }]
    };
    return ValidateOnBlurMessageDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* tslint:disable:directive-selector */
var ValidationMessageDirective = /** @class */ (function () {
    function ValidationMessageDirective(componentFactoryResolver, viewContainerRef, ngControl) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.viewContainerRef = viewContainerRef;
        this.ngControl = ngControl;
        this.showError = true;
        this.enableValidation = true;
    }
    Object.defineProperty(ValidationMessageDirective.prototype, "control", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.ngControl && this.ngControl.control) {
                return this.ngControl.control;
            }
            else {
                return undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValidationMessageDirective.prototype, "isValid", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.showError || (!this.ngControl && this.ngControl.control == null)) {
                return false;
            }
            return this.ngControl && this.ngControl.control && this.ngControl.control.valid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValidationMessageDirective.prototype, "isInvalid", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.showError || (!this.ngControl && this.ngControl.control == null)) {
                return false;
            }
            return this.ngControl && this.ngControl.control && this.ngControl.control.invalid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ValidationMessageDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!this.ngControl || !this.enableValidation) {
            return;
        }
        /** @type {?} */
        var attrs = this.viewContainerRef.element.nativeElement.attributes;
        if (attrs) {
            /** @type {?} */
            var tag = !!attrs.getNamedItem('noerror');
            if (this.showError && tag) {
                this.showError = false;
                return;
            }
        }
        this.componentFactory = CacheUtils.get('$componentFactory', 'ValidateMessagesComponentFactory');
        if (!this.componentFactory) {
            this.componentFactory = this.componentFactoryResolver.resolveComponentFactory(ValidateMessagesComponent);
            CacheUtils.put('$componentFactory', 'validationMessagesComponentFactory', this.componentFactory);
        }
        /** @type {?} */
        var className = this.viewContainerRef.element.nativeElement.parentElement.className;
        if (className.indexOf('input-group') >= 0) ;
        this.componentRef = this.viewContainerRef.createComponent(this.componentFactory);
        ((/** @type {?} */ (this.componentRef.instance))).messages = this.messages;
        ((/** @type {?} */ (this.componentRef.instance))).control = (/** @type {?} */ (this.control));
    };
    ValidationMessageDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[erValidate]'
                },] }
    ];
    /** @nocollapse */
    ValidationMessageDirective.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef },
        { type: NgControl, decorators: [{ type: Optional }] }
    ]; };
    ValidationMessageDirective.propDecorators = {
        messages: [{ type: Input }],
        showError: [{ type: Input }],
        enableValidation: [{ type: Input }],
        isValid: [{ type: HostBinding, args: ['class.er-valid',] }],
        isInvalid: [{ type: HostBinding, args: ['class.er-invalid',] }]
    };
    return ValidationMessageDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* tslint:disable:directive-selector */
var ValidateStateDirective = /** @class */ (function () {
    function ValidateStateDirective(componentFactoryResolver, viewContainerRef, ngControl) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.viewContainerRef = viewContainerRef;
        this.ngControl = ngControl;
        this.showError = true;
        this.enableValidation = true;
    }
    Object.defineProperty(ValidateStateDirective.prototype, "control", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.ngControl && this.ngControl.control) {
                return this.ngControl.control;
            }
            else {
                return undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValidateStateDirective.prototype, "isValid", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.showError || (!this.ngControl && this.ngControl.control == null)) {
                return false;
            }
            return this.ngControl && this.ngControl.control && this.ngControl.control.valid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ValidateStateDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!this.ngControl || !this.enableValidation) {
            return;
        }
        /** @type {?} */
        var attrs = this.viewContainerRef.element.nativeElement.attributes;
        if (attrs) {
            /** @type {?} */
            var tag = !!attrs.getNamedItem('noerror');
            if (this.showError && tag) {
                this.showError = false;
                return;
            }
        }
    };
    ValidateStateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[formControlName],[formControl],[ngModel]'
                },] }
    ];
    /** @nocollapse */
    ValidateStateDirective.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef },
        { type: NgControl, decorators: [{ type: Optional }] }
    ]; };
    ValidateStateDirective.propDecorators = {
        messages: [{ type: Input }],
        showError: [{ type: Input }],
        enableValidation: [{ type: Input }],
        isValid: [{ type: HostBinding, args: ['class.er-valid',] }]
    };
    return ValidateStateDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var directives = [
    ValidationMessageDirective,
    ValidateStateDirective,
    ValidateOnBlurMessageDirective
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ErValidateModule = /** @class */ (function () {
    function ErValidateModule() {
    }
    ErValidateModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        CustomFormsModule
                    ],
                    declarations: __spread([
                        ValidateMessagesComponent,
                        FormValidateMessagesComponent
                    ], directives),
                    exports: __spread([
                        FormsModule,
                        ReactiveFormsModule,
                        ValidateMessagesComponent,
                        FormValidateMessagesComponent
                    ], directives),
                    entryComponents: [
                        ValidateMessagesComponent
                    ]
                },] }
    ];
    return ErValidateModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ErValidateModule, NgValidators, NgValidateMessages, FormValidateMessagesComponent, ValidateMessagesComponent, ValidateUtils, ValidationMessageDirective, ValidateStateDirective, ValidateOnBlurMessageDirective, directives, ValidateMessagesComponent as ɵl, FormValidateMessagesComponent as ɵm, dateAfterValidator as ɵe, ageValidator as ɵh, dateBeforeValidator as ɵd, dateBetweenValidator as ɵf, conditionValidator as ɵi, dateFormatValidator as ɵg, equalToValidator as ɵj, matchValidator as ɵc, notEqualToValidator as ɵk, passwordValidationMessage as ɵb, passwordValidator as ɵa };

//# sourceMappingURL=er-validate.js.map