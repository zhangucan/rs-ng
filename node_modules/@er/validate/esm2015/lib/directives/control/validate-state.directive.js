/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Directive, HostBinding, Input, Optional, ViewContainerRef } from '@angular/core';
import { NgControl } from '@angular/forms';
/* tslint:disable:directive-selector */
export class ValidateStateDirective {
    /**
     * @param {?} componentFactoryResolver
     * @param {?} viewContainerRef
     * @param {?} ngControl
     */
    constructor(componentFactoryResolver, viewContainerRef, ngControl) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.viewContainerRef = viewContainerRef;
        this.ngControl = ngControl;
        this.showError = true;
        this.enableValidation = true;
    }
    /**
     * @return {?}
     */
    get control() {
        if (this.ngControl && this.ngControl.control) {
            return this.ngControl.control;
        }
        else {
            return undefined;
        }
    }
    /**
     * @return {?}
     */
    get isValid() {
        if (!this.showError || (!this.ngControl && this.ngControl.control == null)) {
            return false;
        }
        return this.ngControl && this.ngControl.control && this.ngControl.control.valid;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.ngControl || !this.enableValidation) {
            return;
        }
        /** @type {?} */
        const attrs = this.viewContainerRef.element.nativeElement.attributes;
        if (attrs) {
            /** @type {?} */
            const tag = !!attrs.getNamedItem('noerror');
            if (this.showError && tag) {
                this.showError = false;
                return;
            }
        }
    }
}
ValidateStateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[formControlName],[formControl],[ngModel]'
            },] }
];
/** @nocollapse */
ValidateStateDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: NgControl, decorators: [{ type: Optional }] }
];
ValidateStateDirective.propDecorators = {
    messages: [{ type: Input }],
    showError: [{ type: Input }],
    enableValidation: [{ type: Input }],
    isValid: [{ type: HostBinding, args: ['class.er-valid',] }]
};
if (false) {
    /** @type {?} */
    ValidateStateDirective.prototype.messages;
    /** @type {?} */
    ValidateStateDirective.prototype.showError;
    /** @type {?} */
    ValidateStateDirective.prototype.enableValidation;
    /** @type {?} */
    ValidateStateDirective.prototype.currentState;
    /**
     * @type {?}
     * @private
     */
    ValidateStateDirective.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    ValidateStateDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    ValidateStateDirective.prototype.ngControl;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUtc3RhdGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ZhbGlkYXRlLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY29udHJvbC92YWxpZGF0ZS1zdGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBZ0Isd0JBQXdCLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pJLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFPekMsTUFBTSxPQUFPLHNCQUFzQjs7Ozs7O0lBVWpDLFlBQW9CLHdCQUFrRCxFQUNsRCxnQkFBa0MsRUFDdEIsU0FBb0I7UUFGaEMsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUNsRCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ3RCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFSM0MsY0FBUyxHQUFHLElBQUksQ0FBQztRQUVqQixxQkFBZ0IsR0FBRyxJQUFJLENBQUM7SUFPakMsQ0FBQzs7OztJQUVELElBQUksT0FBTztRQUNULElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRTtZQUM1QyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO1NBQy9CO2FBQU07WUFDTCxPQUFPLFNBQVMsQ0FBQztTQUNsQjtJQUNILENBQUM7Ozs7SUFFRCxJQUNJLE9BQU87UUFDVCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsRUFBRTtZQUMxRSxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUNsRixDQUFDOzs7O0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQzdDLE9BQU87U0FDUjs7Y0FFSyxLQUFLLEdBQWlCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFVBQVU7UUFDbEYsSUFBSSxLQUFLLEVBQUU7O2tCQUNILEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUM7WUFDM0MsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLEdBQUcsRUFBRTtnQkFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQ3ZCLE9BQU87YUFDUjtTQUNGO0lBQ0gsQ0FBQzs7O1lBL0NGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsMkNBQTJDO2FBQ3REOzs7O1lBUHNCLHdCQUF3QjtZQUEyQyxnQkFBZ0I7WUFDbEcsU0FBUyx1QkFtQkYsUUFBUTs7O3VCQVZwQixLQUFLO3dCQUVMLEtBQUs7K0JBRUwsS0FBSztzQkFpQkwsV0FBVyxTQUFDLGdCQUFnQjs7OztJQXJCN0IsMENBQTZDOztJQUU3QywyQ0FBMEI7O0lBRTFCLGtEQUFpQzs7SUFFakMsOENBQXFCOzs7OztJQUVULDBEQUEwRDs7Ozs7SUFDMUQsa0RBQTBDOzs7OztJQUMxQywyQ0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyVmlld0luaXQsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgRGlyZWN0aXZlLCBIb3N0QmluZGluZywgSW5wdXQsIE9wdGlvbmFsLCBWaWV3Q29udGFpbmVyUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TmdDb250cm9sfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cblxuLyogdHNsaW50OmRpc2FibGU6ZGlyZWN0aXZlLXNlbGVjdG9yICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZm9ybUNvbnRyb2xOYW1lXSxbZm9ybUNvbnRyb2xdLFtuZ01vZGVsXSdcbn0pXG5leHBvcnQgY2xhc3MgVmFsaWRhdGVTdGF0ZURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG4gIEBJbnB1dCgpIG1lc3NhZ2VzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuXG4gIEBJbnB1dCgpIHNob3dFcnJvciA9IHRydWU7XG5cbiAgQElucHV0KCkgZW5hYmxlVmFsaWRhdGlvbiA9IHRydWU7XG5cbiAgY3VycmVudFN0YXRlOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICAgICAgICAgICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBwcml2YXRlIG5nQ29udHJvbDogTmdDb250cm9sKSB7XG4gIH1cblxuICBnZXQgY29udHJvbCgpIHtcbiAgICBpZiAodGhpcy5uZ0NvbnRyb2wgJiYgdGhpcy5uZ0NvbnRyb2wuY29udHJvbCkge1xuICAgICAgcmV0dXJuIHRoaXMubmdDb250cm9sLmNvbnRyb2w7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5lci12YWxpZCcpXG4gIGdldCBpc1ZhbGlkKCk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy5zaG93RXJyb3IgfHwgKCF0aGlzLm5nQ29udHJvbCAmJiB0aGlzLm5nQ29udHJvbC5jb250cm9sID09IG51bGwpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm5nQ29udHJvbCAmJiB0aGlzLm5nQ29udHJvbC5jb250cm9sICYmIHRoaXMubmdDb250cm9sLmNvbnRyb2wudmFsaWQ7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKCF0aGlzLm5nQ29udHJvbCB8fCAhdGhpcy5lbmFibGVWYWxpZGF0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYXR0cnM6IE5hbWVkTm9kZU1hcCA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuYXR0cmlidXRlcztcbiAgICBpZiAoYXR0cnMpIHtcbiAgICAgIGNvbnN0IHRhZyA9ICEhYXR0cnMuZ2V0TmFtZWRJdGVtKCdub2Vycm9yJyk7XG4gICAgICBpZiAodGhpcy5zaG93RXJyb3IgJiYgdGFnKSB7XG4gICAgICAgIHRoaXMuc2hvd0Vycm9yID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuIl19