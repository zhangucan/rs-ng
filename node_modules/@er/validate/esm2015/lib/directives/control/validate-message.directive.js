/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Directive, HostBinding, Input, Optional, ViewContainerRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { CacheUtils } from '@er/utils';
import { ValidateMessagesComponent } from '../../components/control/component';
/* tslint:disable:directive-selector */
export class ValidationMessageDirective {
    /**
     * @param {?} componentFactoryResolver
     * @param {?} viewContainerRef
     * @param {?} ngControl
     */
    constructor(componentFactoryResolver, viewContainerRef, ngControl) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.viewContainerRef = viewContainerRef;
        this.ngControl = ngControl;
        this.showError = true;
        this.enableValidation = true;
    }
    /**
     * @return {?}
     */
    get control() {
        if (this.ngControl && this.ngControl.control) {
            return this.ngControl.control;
        }
        else {
            return undefined;
        }
    }
    /**
     * @return {?}
     */
    get isValid() {
        if (!this.showError || (!this.ngControl && this.ngControl.control == null)) {
            return false;
        }
        return this.ngControl && this.ngControl.control && this.ngControl.control.valid;
    }
    /**
     * @return {?}
     */
    get isInvalid() {
        if (!this.showError || (!this.ngControl && this.ngControl.control == null)) {
            return false;
        }
        return this.ngControl && this.ngControl.control && this.ngControl.control.invalid;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.ngControl || !this.enableValidation) {
            return;
        }
        /** @type {?} */
        const attrs = this.viewContainerRef.element.nativeElement.attributes;
        if (attrs) {
            /** @type {?} */
            const tag = !!attrs.getNamedItem('noerror');
            if (this.showError && tag) {
                this.showError = false;
                return;
            }
        }
        this.componentFactory = CacheUtils.get('$componentFactory', 'ValidateMessagesComponentFactory');
        if (!this.componentFactory) {
            this.componentFactory = this.componentFactoryResolver.resolveComponentFactory(ValidateMessagesComponent);
            CacheUtils.put('$componentFactory', 'validationMessagesComponentFactory', this.componentFactory);
        }
        /** @type {?} */
        const className = this.viewContainerRef.element.nativeElement.parentElement.className;
        if (className.indexOf('input-group') >= 0) {
        }
        this.componentRef = this.viewContainerRef.createComponent(this.componentFactory);
        ((/** @type {?} */ (this.componentRef.instance))).messages = this.messages;
        ((/** @type {?} */ (this.componentRef.instance))).control = (/** @type {?} */ (this.control));
    }
}
ValidationMessageDirective.decorators = [
    { type: Directive, args: [{
                selector: '[erValidate]'
            },] }
];
/** @nocollapse */
ValidationMessageDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: NgControl, decorators: [{ type: Optional }] }
];
ValidationMessageDirective.propDecorators = {
    messages: [{ type: Input }],
    showError: [{ type: Input }],
    enableValidation: [{ type: Input }],
    isValid: [{ type: HostBinding, args: ['class.er-valid',] }],
    isInvalid: [{ type: HostBinding, args: ['class.er-invalid',] }]
};
if (false) {
    /** @type {?} */
    ValidationMessageDirective.prototype.messages;
    /** @type {?} */
    ValidationMessageDirective.prototype.showError;
    /** @type {?} */
    ValidationMessageDirective.prototype.enableValidation;
    /** @type {?} */
    ValidationMessageDirective.prototype.currentState;
    /**
     * @type {?}
     * @private
     */
    ValidationMessageDirective.prototype.componentFactory;
    /**
     * @type {?}
     * @private
     */
    ValidationMessageDirective.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    ValidationMessageDirective.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    ValidationMessageDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    ValidationMessageDirective.prototype.ngControl;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUtbWVzc2FnZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvdmFsaWRhdGUvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9jb250cm9sL3ZhbGlkYXRlLW1lc3NhZ2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBR0wsd0JBQXdCLEVBRXhCLFNBQVMsRUFDVCxXQUFXLEVBQ1gsS0FBSyxFQUNMLFFBQVEsRUFDUixnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFjLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3RELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDckMsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sb0NBQW9DLENBQUM7O0FBTzdFLE1BQU0sT0FBTywwQkFBMEI7Ozs7OztJQWFyQyxZQUFvQix3QkFBa0QsRUFDbEQsZ0JBQWtDLEVBQ3RCLFNBQW9CO1FBRmhDLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFDbEQscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUN0QixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBWDNDLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFFakIscUJBQWdCLEdBQUcsSUFBSSxDQUFDO0lBVWpDLENBQUM7Ozs7SUFFRCxJQUFJLE9BQU87UUFDVCxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFDNUMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztTQUMvQjthQUFNO1lBQ0wsT0FBTyxTQUFTLENBQUM7U0FDbEI7SUFDSCxDQUFDOzs7O0lBRUQsSUFDSSxPQUFPO1FBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FB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bXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnRGYWN0b3J5LFxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIENvbXBvbmVudFJlZixcbiAgRGlyZWN0aXZlLFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE9wdGlvbmFsLFxuICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtGb3JtQ29udHJvbCwgTmdDb250cm9sfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0NhY2hlVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQge1ZhbGlkYXRlTWVzc2FnZXNDb21wb25lbnR9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvY29udHJvbC9jb21wb25lbnQnO1xuXG5cbi8qIHRzbGludDpkaXNhYmxlOmRpcmVjdGl2ZS1zZWxlY3RvciAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2VyVmFsaWRhdGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBWYWxpZGF0aW9uTWVzc2FnZURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG4gIEBJbnB1dCgpIG1lc3NhZ2VzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuXG4gIEBJbnB1dCgpIHNob3dFcnJvciA9IHRydWU7XG5cbiAgQElucHV0KCkgZW5hYmxlVmFsaWRhdGlvbiA9IHRydWU7XG5cbiAgY3VycmVudFN0YXRlOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5PFZhbGlkYXRlTWVzc2FnZXNDb21wb25lbnQ+O1xuICBwcml2YXRlIGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPFZhbGlkYXRlTWVzc2FnZXNDb21wb25lbnQ+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgICAgICAgICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBuZ0NvbnRyb2w6IE5nQ29udHJvbCkge1xuICB9XG5cbiAgZ2V0IGNvbnRyb2woKSB7XG4gICAgaWYgKHRoaXMubmdDb250cm9sICYmIHRoaXMubmdDb250cm9sLmNvbnRyb2wpIHtcbiAgICAgIHJldHVybiB0aGlzLm5nQ29udHJvbC5jb250cm9sO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuZXItdmFsaWQnKVxuICBnZXQgaXNWYWxpZCgpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMuc2hvd0Vycm9yIHx8ICghdGhpcy5uZ0NvbnRyb2wgJiYgdGhpcy5uZ0NvbnRyb2wuY29udHJvbCA9PSBudWxsKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5uZ0NvbnRyb2wgJiYgdGhpcy5uZ0NvbnRyb2wuY29udHJvbCAmJiB0aGlzLm5nQ29udHJvbC5jb250cm9sLnZhbGlkO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5lci1pbnZhbGlkJylcbiAgZ2V0IGlzSW52YWxpZCgpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMuc2hvd0Vycm9yIHx8ICghdGhpcy5uZ0NvbnRyb2wgJiYgdGhpcy5uZ0NvbnRyb2wuY29udHJvbCA9PSBudWxsKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5uZ0NvbnRyb2wgJiYgdGhpcy5uZ0NvbnRyb2wuY29udHJvbCAmJiB0aGlzLm5nQ29udHJvbC5jb250cm9sLmludmFsaWQ7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKCF0aGlzLm5nQ29udHJvbCB8fCAhdGhpcy5lbmFibGVWYWxpZGF0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYXR0cnM6IE5hbWVkTm9kZU1hcCA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuYXR0cmlidXRlcztcbiAgICBpZiAoYXR0cnMpIHtcbiAgICAgIGNvbnN0IHRhZyA9ICEhYXR0cnMuZ2V0TmFtZWRJdGVtKCdub2Vycm9yJyk7XG4gICAgICBpZiAodGhpcy5zaG93RXJyb3IgJiYgdGFnKSB7XG4gICAgICAgIHRoaXMuc2hvd0Vycm9yID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNvbXBvbmVudEZhY3RvcnkgPSBDYWNoZVV0aWxzLmdldCgnJGNvbXBvbmVudEZhY3RvcnknLCAnVmFsaWRhdGVNZXNzYWdlc0NvbXBvbmVudEZhY3RvcnknKTtcbiAgICBpZiAoIXRoaXMuY29tcG9uZW50RmFjdG9yeSkge1xuICAgICAgdGhpcy5jb21wb25lbnRGYWN0b3J5ID0gdGhpcy5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoVmFsaWRhdGVNZXNzYWdlc0NvbXBvbmVudCk7XG4gICAgICBDYWNoZVV0aWxzLnB1dCgnJGNvbXBvbmVudEZhY3RvcnknLCAndmFsaWRhdGlvbk1lc3NhZ2VzQ29tcG9uZW50RmFjdG9yeScsIHRoaXMuY29tcG9uZW50RmFjdG9yeSk7XG4gICAgfVxuICAgIGNvbnN0IGNsYXNzTmFtZSA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudC5jbGFzc05hbWU7XG4gICAgaWYgKGNsYXNzTmFtZS5pbmRleE9mKCdpbnB1dC1ncm91cCcpID49IDApIHtcbiAgICB9XG4gICAgdGhpcy5jb21wb25lbnRSZWYgPSB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlQ29tcG9uZW50KHRoaXMuY29tcG9uZW50RmFjdG9yeSk7XG4gICAgKDxWYWxpZGF0ZU1lc3NhZ2VzQ29tcG9uZW50PnRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlKS5tZXNzYWdlcyA9IHRoaXMubWVzc2FnZXM7XG4gICAgKDxWYWxpZGF0ZU1lc3NhZ2VzQ29tcG9uZW50PnRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlKS5jb250cm9sID0gPEZvcm1Db250cm9sPnRoaXMuY29udHJvbDtcbiAgfVxuXG5cblxufVxuIl19