/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Optional } from '@angular/core';
import { NgControl } from '@angular/forms';
export class ValidateOnBlurMessageDirective {
    /**
     * @param {?} model
     */
    constructor(model) {
        this.model = model;
    }
    /**
     * @return {?}
     */
    get control() {
        if (this.model && this.model.control) {
            return this.model.control;
        }
        else {
            return undefined;
        }
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (this.control) {
            this.validators = this.control.validator;
            this.asyncValidators = this.control.asyncValidator;
            this.control.clearAsyncValidators();
            this.control.clearValidators();
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (this.control) {
            this.control.setAsyncValidators(this.asyncValidators);
            this.control.setValidators(this.validators);
            this.control.updateValueAndValidity();
        }
    }
}
ValidateOnBlurMessageDirective.decorators = [
    { type: Directive, args: [{
                selector: '[erValidateOnBlur]'
            },] }
];
/** @nocollapse */
ValidateOnBlurMessageDirective.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }] }
];
ValidateOnBlurMessageDirective.propDecorators = {
    onFocus: [{ type: HostListener, args: ['focus',] }],
    onBlur: [{ type: HostListener, args: ['blur',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ValidateOnBlurMessageDirective.prototype.validators;
    /**
     * @type {?}
     * @private
     */
    ValidateOnBlurMessageDirective.prototype.asyncValidators;
    /**
     * @type {?}
     * @private
     */
    ValidateOnBlurMessageDirective.prototype.model;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ZhbGlkYXRlLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY29udHJvbC1vbi1ibHVyL2RpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUt6QyxNQUFNLE9BQU8sOEJBQThCOzs7O0lBS3pDLFlBQWdDLEtBQWdCO1FBQWhCLFVBQUssR0FBTCxLQUFLLENBQVc7SUFDaEQsQ0FBQzs7OztJQUVELElBQUksT0FBTztRQUNULElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRTtZQUNwQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO1NBQzNCO2FBQU07WUFDTCxPQUFPLFNBQVMsQ0FBQztTQUNsQjtJQUNILENBQUM7Ozs7SUFHRCxPQUFPO1FBQ0wsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7WUFDekMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQztZQUNuRCxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUNoQztJQUNILENBQUM7Ozs7SUFHRCxNQUFNO1FBQ0osSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQ3RELElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUM1QyxJQUFJLENBQUMsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUM7U0FDdkM7SUFDSCxDQUFDOzs7WUFwQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7YUFDL0I7Ozs7WUFKTyxTQUFTLHVCQVVGLFFBQVE7OztzQkFXcEIsWUFBWSxTQUFDLE9BQU87cUJBVXBCLFlBQVksU0FBQyxNQUFNOzs7Ozs7O0lBeEJwQixvREFBd0I7Ozs7O0lBQ3hCLHlEQUE2Qjs7Ozs7SUFFakIsK0NBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOZ0NvbnRyb2x9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2VyVmFsaWRhdGVPbkJsdXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBWYWxpZGF0ZU9uQmx1ck1lc3NhZ2VEaXJlY3RpdmUge1xuXG4gIHByaXZhdGUgdmFsaWRhdG9yczogYW55O1xuICBwcml2YXRlIGFzeW5jVmFsaWRhdG9yczogYW55O1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgbW9kZWw6IE5nQ29udHJvbCkge1xuICB9XG5cbiAgZ2V0IGNvbnRyb2woKSB7XG4gICAgaWYgKHRoaXMubW9kZWwgJiYgdGhpcy5tb2RlbC5jb250cm9sKSB7XG4gICAgICByZXR1cm4gdGhpcy5tb2RlbC5jb250cm9sO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2ZvY3VzJylcbiAgb25Gb2N1cygpIHtcbiAgICBpZiAodGhpcy5jb250cm9sKSB7XG4gICAgICB0aGlzLnZhbGlkYXRvcnMgPSB0aGlzLmNvbnRyb2wudmFsaWRhdG9yO1xuICAgICAgdGhpcy5hc3luY1ZhbGlkYXRvcnMgPSB0aGlzLmNvbnRyb2wuYXN5bmNWYWxpZGF0b3I7XG4gICAgICB0aGlzLmNvbnRyb2wuY2xlYXJBc3luY1ZhbGlkYXRvcnMoKTtcbiAgICAgIHRoaXMuY29udHJvbC5jbGVhclZhbGlkYXRvcnMoKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdibHVyJylcbiAgb25CbHVyKCkge1xuICAgIGlmICh0aGlzLmNvbnRyb2wpIHtcbiAgICAgIHRoaXMuY29udHJvbC5zZXRBc3luY1ZhbGlkYXRvcnModGhpcy5hc3luY1ZhbGlkYXRvcnMpO1xuICAgICAgdGhpcy5jb250cm9sLnNldFZhbGlkYXRvcnModGhpcy52YWxpZGF0b3JzKTtcbiAgICAgIHRoaXMuY29udHJvbC51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KCk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==