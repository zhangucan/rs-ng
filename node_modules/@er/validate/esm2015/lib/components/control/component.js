/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Input, Optional, TemplateRef } from '@angular/core';
import { ControlContainer, FormControl } from '@angular/forms';
import { FormUtils } from '@er/utils';
import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';
import { ValidateUtils } from '../../utils';
export class ValidateMessagesComponent {
    /**
     * @param {?} controlContainer
     * @param {?} cd
     */
    constructor(controlContainer, cd) {
        this.controlContainer = controlContainer;
        this.cd = cd;
        this.showAllErrors = true;
        this.errors$ = new BehaviorSubject(undefined);
    }
    /**
     * @return {?}
     */
    getErrorMessages() {
        if (this.control.dirty && this.control.invalid) {
            /** @type {?} */
            const errorMessages = ValidateUtils.getErrorMessage(this.control.errors);
            /** @type {?} */
            const errors = this.showAllErrors ? errorMessages : this.getFirstError(errorMessages);
            this.errors$.next(this.getErrors(errors));
        }
        else {
            return this.errors$.next([]);
        }
    }
    /**
     * @param {?} errorMessages
     * @return {?}
     */
    getFirstError(errorMessages) {
        if (Object.keys(errorMessages).length > 0) {
            return errorMessages[Object.keys(errorMessages)[0]];
        }
        return '校验失败';
    }
    /**
     * @param {?} errorMessages
     * @return {?}
     */
    getErrors(errorMessages) {
        /** @type {?} */
        const lst = [];
        if (errorMessages) {
            Object.keys(errorMessages).map(key => {
                lst.push({ key, value: (this.messages && this.messages[key]) || errorMessages[key] });
            });
        }
        return lst;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.control) {
            if (this.formlyField) {
                this.control = this.formlyField.formControl;
            }
            if (!this.control && this.controlContainer) {
                /** @type {?} */
                const form = this.controlContainer.formDirective ? ((/** @type {?} */ (this.controlContainer.formDirective))).form : null;
                if (form) {
                    this.control = FormUtils.getFormControl(form, ...this.controlContainer.path, this.controlName);
                }
            }
        }
        if (this.control) {
            this.subscription = this.control.statusChanges.subscribe(() => {
                this.getErrorMessages();
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ValidateMessagesComponent.decorators = [
    { type: Component, args: [{
                selector: 'er-validate-messages',
                template: `
    <div *ngIf="errors$|async as errors">
      <ng-container *ngTemplateOutlet="errorMsgTpl?errorMsgTpl:defaultTpl;context:{$implicit:errors}"></ng-container>
    </div>
    <ng-template #defaultTpl let-errors>
      <div class="text-danger" [ngClass]="styleClass">
        <ul *ngFor="let error of errors " class="d-flex flex-column justify-content-start">
          <li [innerHTML]="error.value" class="my-1" style="font-size: 0.8em"></li>
        </ul>
      </div>
    </ng-template>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
ValidateMessagesComponent.ctorParameters = () => [
    { type: ControlContainer, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef }
];
ValidateMessagesComponent.propDecorators = {
    control: [{ type: Input }],
    controlName: [{ type: Input }],
    formlyField: [{ type: Input }],
    force: [{ type: Input }],
    styleClass: [{ type: Input }],
    showAllErrors: [{ type: Input }],
    messages: [{ type: Input }],
    errorMsgTpl: [{ type: ContentChild, args: [TemplateRef,] }]
};
if (false) {
    /** @type {?} */
    ValidateMessagesComponent.prototype.control;
    /** @type {?} */
    ValidateMessagesComponent.prototype.controlName;
    /** @type {?} */
    ValidateMessagesComponent.prototype.formlyField;
    /** @type {?} */
    ValidateMessagesComponent.prototype.force;
    /** @type {?} */
    ValidateMessagesComponent.prototype.styleClass;
    /** @type {?} */
    ValidateMessagesComponent.prototype.showAllErrors;
    /** @type {?} */
    ValidateMessagesComponent.prototype.messages;
    /** @type {?} */
    ValidateMessagesComponent.prototype.errorMsgTpl;
    /** @type {?} */
    ValidateMessagesComponent.prototype.errors$;
    /** @type {?} */
    ValidateMessagesComponent.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ValidateMessagesComponent.prototype.controlContainer;
    /**
     * @type {?}
     * @private
     */
    ValidateMessagesComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,