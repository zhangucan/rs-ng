/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ContentChild, Input, Optional, TemplateRef } from '@angular/core';
import { ControlContainer, FormGroup } from '@angular/forms';
import { CommonsUtils } from '@er/utils';
import { Subject } from 'rxjs';
import { ValidateUtils } from '../../utils';
export class FormValidateMessagesComponent {
    /**
     * @param {?} controlContainer
     */
    constructor(controlContainer) {
        this.controlContainer = controlContainer;
        this.errors$ = new Subject();
    }
    /**
     * @return {?}
     */
    checkFormValidate() {
        if (this.form.invalid) {
            alert();
            this.errors$.next(ValidateUtils.getFormErrors(this.form, this.messages, this.fields));
        }
        else {
            this.errors$.next(undefined);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.form && this.controlContainer) {
            this.form = this.controlContainer.formDirective ? ((/** @type {?} */ (this.controlContainer.formDirective))).form : null;
        }
        if (this.form) {
            this.subscription = this.form.statusChanges
                .subscribe(() => {
                this.checkFormValidate();
            });
        }
    }
    /**
     * @param {?} errors
     * @return {?}
     */
    errorKeys(errors) {
        return Object.keys(errors);
    }
    /**
     * @param {?} error
     * @return {?}
     */
    errorMsg(error) {
        return CommonsUtils.getText(error);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
FormValidateMessagesComponent.decorators = [
    { type: Component, args: [{
                selector: 'er-form-validate-messages',
                template: "<div *ngIf=\"errors$|async as errors\">\n  <ng-container *ngTemplateOutlet=\"errorMsgTpl?errorMsgTpl:defaultTpl;context:{$implicit:errors}\"></ng-container>\n</div>\n\n<ng-template #defaultTpl let-errors>\n  <div class=\"text-danger\" [ngClass]=\"styleClass\">\n    <ul *ngFor=\"let key of errorKeys(errors)\" class=\"d-flex flex-column justify-content-start\">\n     <li class=\"my-2\">{{key}}</li>\n    </ul>\n  </div>\n</ng-template>",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
FormValidateMessagesComponent.ctorParameters = () => [
    { type: ControlContainer, decorators: [{ type: Optional }] }
];
FormValidateMessagesComponent.propDecorators = {
    form: [{ type: Input }],
    messages: [{ type: Input }],
    fields: [{ type: Input }],
    styleClass: [{ type: Input }],
    errorMsgTpl: [{ type: ContentChild, args: [TemplateRef,] }]
};
if (false) {
    /** @type {?} */
    FormValidateMessagesComponent.prototype.form;
    /** @type {?} */
    FormValidateMessagesComponent.prototype.messages;
    /** @type {?} */
    FormValidateMessagesComponent.prototype.fields;
    /** @type {?} */
    FormValidateMessagesComponent.prototype.styleClass;
    /** @type {?} */
    FormValidateMessagesComponent.prototype.errorMsgTpl;
    /** @type {?} */
    FormValidateMessagesComponent.prototype.errors$;
    /** @type {?} */
    FormValidateMessagesComponent.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    FormValidateMessagesComponent.prototype.controlContainer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL3ZhbGlkYXRlLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZm9ybS9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsUUFBUSxFQUFFLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoSSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsU0FBUyxFQUFxQixNQUFNLGdCQUFnQixDQUFDO0FBQy9FLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdkMsT0FBTyxFQUFDLE9BQU8sRUFBZSxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBUTFDLE1BQU0sT0FBTyw2QkFBNkI7Ozs7SUFnQnhDLFlBQWdDLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBSmxFLFlBQU8sR0FBZ0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQUtyQyxDQUFDOzs7O0lBRUQsaUJBQWlCO1FBQ2YsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNyQixLQUFLLEVBQUUsQ0FBQztZQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ3ZGO2FBQU07WUFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUM5QjtJQUNILENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3ZDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBQSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxFQUFzQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDM0g7UUFDRCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDYixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYTtpQkFDeEMsU0FBUyxDQUFDLEdBQUcsRUFBRTtnQkFDZCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztZQUMzQixDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxTQUFTLENBQUMsTUFBVTtRQUNsQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFFRCxRQUFRLENBQUMsS0FBSztRQUNaLE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQzs7O1lBekRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsMkJBQTJCO2dCQUNyQyxnY0FBdUI7Z0JBQ3ZCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7O1lBVk8sZ0JBQWdCLHVCQTJCVCxRQUFROzs7bUJBZHBCLEtBQUs7dUJBRUwsS0FBSztxQkFFTCxLQUFLO3lCQUVMLEtBQUs7MEJBRUwsWUFBWSxTQUFDLFdBQVc7Ozs7SUFSekIsNkNBQXlCOztJQUV6QixpREFBNkM7O0lBRTdDLCtDQUFvQjs7SUFFcEIsbURBQTRCOztJQUU1QixvREFBeUQ7O0lBRXpELGdEQUFxQzs7SUFFckMscURBQTJCOzs7OztJQUVmLHlEQUFzRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgQ29udGVudENoaWxkLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIE9wdGlvbmFsLCBUZW1wbGF0ZVJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0NvbnRyb2xDb250YWluZXIsIEZvcm1Hcm91cCwgRm9ybUdyb3VwRGlyZWN0aXZlfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0NvbW1vbnNVdGlsc30gZnJvbSAnQGVyL3V0aWxzJztcbmltcG9ydCB7U3ViamVjdCwgU3Vic2NyaXB0aW9ufSBmcm9tICdyeGpzJztcbmltcG9ydCB7VmFsaWRhdGVVdGlsc30gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2VyLWZvcm0tdmFsaWRhdGUtbWVzc2FnZXMnLFxuICB0ZW1wbGF0ZVVybDogJ3RwbC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgRm9ybVZhbGlkYXRlTWVzc2FnZXNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCkgZm9ybTogRm9ybUdyb3VwO1xuXG4gIEBJbnB1dCgpIG1lc3NhZ2VzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuXG4gIEBJbnB1dCgpIGZpZWxkczoge307XG5cbiAgQElucHV0KCkgc3R5bGVDbGFzczogc3RyaW5nO1xuXG4gIEBDb250ZW50Q2hpbGQoVGVtcGxhdGVSZWYpIGVycm9yTXNnVHBsOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIGVycm9ycyQ6IFN1YmplY3Q8e30+ID0gbmV3IFN1YmplY3QoKTtcblxuICBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIGNvbnRyb2xDb250YWluZXI6IENvbnRyb2xDb250YWluZXIpIHtcbiAgfVxuXG4gIGNoZWNrRm9ybVZhbGlkYXRlKCkge1xuICAgIGlmICh0aGlzLmZvcm0uaW52YWxpZCkge1xuICAgICAgYWxlcnQoKTtcbiAgICAgIHRoaXMuZXJyb3JzJC5uZXh0KFZhbGlkYXRlVXRpbHMuZ2V0Rm9ybUVycm9ycyh0aGlzLmZvcm0sIHRoaXMubWVzc2FnZXMsIHRoaXMuZmllbGRzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXJyb3JzJC5uZXh0KHVuZGVmaW5lZCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmZvcm0gJiYgdGhpcy5jb250cm9sQ29udGFpbmVyKSB7XG4gICAgICB0aGlzLmZvcm0gPSB0aGlzLmNvbnRyb2xDb250YWluZXIuZm9ybURpcmVjdGl2ZSA/ICh0aGlzLmNvbnRyb2xDb250YWluZXIuZm9ybURpcmVjdGl2ZSBhcyBGb3JtR3JvdXBEaXJlY3RpdmUpLmZvcm0gOiBudWxsO1xuICAgIH1cbiAgICBpZiAodGhpcy5mb3JtKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMuZm9ybS5zdGF0dXNDaGFuZ2VzXG4gICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuY2hlY2tGb3JtVmFsaWRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZXJyb3JLZXlzKGVycm9yczoge30pIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZXJyb3JzKTtcbiAgfVxuXG4gIGVycm9yTXNnKGVycm9yKSB7XG4gICAgcmV0dXJuIENvbW1vbnNVdGlscy5nZXRUZXh0KGVycm9yKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==