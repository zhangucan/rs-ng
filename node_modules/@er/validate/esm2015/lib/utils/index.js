/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FormArray, FormControl, FormGroup } from '@angular/forms';
import { CommonsUtils } from '@er/utils';
import { NgValidateMessages } from '../validators/all';
export class ValidateUtils {
    /**
     * @param {?} form
     * @param {?=} messages
     * @param {?=} formlyfield
     * @return {?}
     */
    static getFormErrors(form, messages, formlyfield) {
        /** @type {?} */
        const errors = {};
        if (form instanceof FormControl) {
            return (ValidateUtils.getControlErrors((/** @type {?} */ (form)), messages, formlyfield));
        }
        else if (form instanceof FormGroup) {
            Object.keys(form.controls).map(name => errors[name] = (ValidateUtils.getFormErrors((/** @type {?} */ (form.controls[name])), messages, formlyfield)));
        }
        else if (form instanceof FormArray) {
            /** @type {?} */
            const err = [];
            ((/** @type {?} */ (form.controls[name]))).controls.forEach(control => err.push((ValidateUtils.getFormErrors(control, messages, formlyfield))));
            return err;
        }
        return errors;
    }
    /**
     * @param {?} control
     * @param {?=} messages
     * @param {?=} formlyfield
     * @return {?}
     */
    static getControlErrors(control, messages, formlyfield) {
        return ValidateUtils.getErrorMessage(control.errors, messages, formlyfield);
    }
    /**
     * @param {?} errors
     * @param {?=} messages
     * @param {?=} formlyfield
     * @return {?}
     */
    static getErrorMessage(errors, messages, formlyfield) {
        if (!errors) {
            return {};
        }
        /** @type {?} */
        const errorMessages = {};
        Object.keys(errors).forEach(key => {
            /** @type {?} */
            let message;
            if (formlyfield) {
                if (formlyfield.validators && formlyfield.validators[key] && formlyfield.validators[key].message) {
                    message = formlyfield.validators[key].message;
                }
                else if (formlyfield.asyncValidators && formlyfield.asyncValidators[key] && formlyfield.asyncValidators[key].message) {
                    message = formlyfield.asyncValidators[key].message;
                }
            }
            if (!message) {
                if (messages && messages.hasOwnProperty(key)) {
                    message = messages[key];
                }
                else if (NgValidateMessages.hasOwnProperty(key)) {
                    message = NgValidateMessages[key];
                }
                else {
                    message = key;
                }
            }
            if (typeof message === 'string') {
                errorMessages[key] = message;
            }
            else if (typeof message === 'function') {
                errorMessages[key] = message.apply(this, [errors[key], formlyfield]);
            }
        });
        return errorMessages;
    }
    /**
     * @param {?} error
     * @param {?=} context
     * @return {?}
     */
    static dynaValidationMessageFn(error, context) {
        /** @type {?} */
        let values = [];
        if (CommonsUtils.isJson(error) && context.errorProps) {
            if (Array.isArray(context.errorProps)) {
                context.errorProps.forEach(key => values.push(error[key]));
            }
            else {
                values.push(error[context.errorProps]);
            }
        }
        else {
            /** @type {?} */
            const dyna = CommonsUtils.get(context, 'validation.dyna', []);
            /** @type {?} */
            const info = CommonsUtils.find(dyna, { key: context.errorKey });
            if (info) {
                values = info['args'] || [];
            }
        }
        return CommonsUtils.templateStr(context.format, values);
    }
}
//# sourceMappingURL=data:application/json;base64,