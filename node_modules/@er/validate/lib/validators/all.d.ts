import { AbstractControl, Validators } from '@angular/forms';
import { PasswordValidatorOptions } from './password/validator';
export { PasswordValidatorOptions } from './password/validator';
export declare class NgValidators {
    static required: typeof Validators.required;
    static accept: typeof Validators.requiredTrue;
    static email: any;
    static url: any;
    static date: any;
    static json: any;
    static base64: any;
    static creditCard: any;
    static letter(control: AbstractControl): {
        letter: boolean;
    };
    static character(control: AbstractControl): {
        character: boolean;
    };
    static ascii(control: AbstractControl): {
        ascii: boolean;
    };
    static chinese(control: AbstractControl): {
        chinese: boolean;
    };
    static digit(control: AbstractControl): {
        digit: boolean;
    };
    static integer(control: AbstractControl): {
        integer: boolean;
    };
    static numeric(control: AbstractControl): {
        numeric: boolean;
    };
    static phone(control: AbstractControl): {
        phone: boolean;
    };
    static idCard(control: AbstractControl): {
        idCard: boolean;
    };
    static ip(control: AbstractControl): {
        ip: boolean;
    };
    static halfWidth(control: AbstractControl): {
        halfWidth: boolean;
    };
    static fullWidth(control: AbstractControl): {
        fullWidth: boolean;
    };
    static match(pattern: string | string[] | RegExp | RegExp[]): import("@angular/forms/src/directives/validators").ValidatorFn;
    static password(options?: PasswordValidatorOptions): import("@angular/forms/src/directives/validators").ValidatorFn;
    static before(before: Date | string): import("@angular/forms/src/directives/validators").ValidatorFn;
    static after(after: Date | string): import("@angular/forms/src/directives/validators").ValidatorFn;
    static between(before: Date | string, after: Date | string): import("@angular/forms/src/directives/validators").ValidatorFn;
    static dateFormat(formatPattern?: RegExp): import("@angular/forms/src/directives/validators").ValidatorFn;
    static age(min?: number, max?: number): import("@angular/forms/src/directives/validators").ValidatorFn;
    static condition(conditionFn: (value: any) => boolean): import("@angular/forms/src/directives/validators").ValidatorFn;
    static equalTo(controlName: string): import("@angular/forms/src/directives/validators").ValidatorFn;
    static notEqualTo(controlName: string): import("@angular/forms/src/directives/validators").ValidatorFn;
    static minLength(minlength: number): import("@angular/forms/src/directives/validators").ValidatorFn;
    static maxLength(maxlength: number): import("@angular/forms/src/directives/validators").ValidatorFn;
    static min(minValue: number): import("@angular/forms/src/directives/validators").ValidatorFn;
    static max(maxValue: number): import("@angular/forms/src/directives/validators").ValidatorFn;
    static pattern(reg: string | RegExp): import("@angular/forms/src/directives/validators").ValidatorFn;
    static rangeLength(minLength: number, maxLength: number): any;
    static range(min: number, max: number): any;
    static gt(value: number): any;
    static gte(value: number): any;
    static lt(value: number): any;
    static lte(value: number): any;
    static minDate(minDate: string): any;
    static maxDate(maxDate: string): any;
    static equal(s: any): any;
    static notEqual(s: any): any;
    static equalTo2(control: AbstractControl): any;
    static notEqualTo2(control: AbstractControl): any;
}
export declare class NgValidateMessages {
    static required: string;
    static pattern: string;
    static letter: string;
    static digit: string;
    static character: string;
    static chinese: string;
    static integer: string;
    static number: string;
    static fullWidth: string;
    static halfWidth: string;
    static phone: string;
    static condition: string;
    static email: string;
    static idCard: string;
    static not_matching: string;
    static unique: string;
    static gte: string;
    static url: string;
    static date: string;
    static maxDate: string;
    static json: string;
    static base64: string;
    static equal: string;
    static notEqual: string;
    static equalTo: string;
    static notEqualTo: string;
    static duplicated: string;
    static exists: string;
    static maxlength(error: any): string;
    static minlength(error: any): string;
    static min(error: any): string;
    static max(error: any): string;
    static age(error: any): string;
    static password(error: any): string;
    static dateBefore(error: any): string;
    static dateAfter(error: any): string;
    static dataBetween(error: any): string;
    static rangeLength(error: any): string;
    static gt(error: any): string;
    static lt(error: any): string;
    static lte(error: any): string;
    static range(error: any): string;
    static minDate(error: any): string;
}
