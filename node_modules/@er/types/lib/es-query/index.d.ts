import { DataType } from '../data-type';
export declare const DEFAULT_ES_QUERY_CONDITION = "AND";
export declare const ES_QUERY_OPERATORS: {
    contains: {
        label: string;
        key: string;
        multiple: boolean;
        dataTypes: DataType[];
        operator: string;
    };
    equal: {
        label: string;
        key: string;
        multiple: boolean;
        operator: string;
    };
    in: {
        label: string;
        key: string;
        multiple: boolean;
        operator: string;
        getValue: (v: any) => any;
    };
    less: {
        label: string;
        key: string;
        dataTypes: DataType[];
        operator: string;
        getValue: (v: any) => {
            'lt': any;
        };
    };
    less_equal: {
        label: string;
        key: string;
        dataTypes: DataType[];
        operator: string;
        getValue: (v: any) => {
            'lte': any;
        };
    };
    greater: {
        label: string;
        key: string;
        dataTypes: DataType[];
        operator: string;
        getValue: (v: any) => {
            'gt': any;
        };
    };
    greater_equal: {
        label: string;
        key: string;
        dataTypes: DataType[];
        operator: string;
        getValue: (v: any) => {
            'gte': any;
        };
    };
    between: {
        label: string;
        key: string;
        inputs: number;
        dataTypes: DataType[];
        operator: string;
        getValue: (v: any) => {
            'gte': any;
            'lte': any;
        };
    };
    begins_with: {
        label: string;
        key: string;
        dataTypes: DataType[];
        operator: string;
        getValue: (v: any) => string;
    };
    end_with: {
        label: string;
        key: string;
        dataTypes: DataType[];
        operator: string;
        getValue: (v: any) => string;
    };
    pattern: {
        label: string;
        key: string;
        dataTypes: DataType[];
        operator: string;
    };
    phrase: {
        label: string;
        key: string;
        dataTypes: DataType[];
        operator: string;
    };
    phrase_prefix: {
        label: string;
        key: string;
        dataTypes: DataType[];
        operator: string;
    };
    isEmpty: {
        label: string;
        key: string;
        inputs: number;
        dataTypes: DataType[];
    };
    isNull: {
        label: string;
        key: string;
        inputs: number;
    };
    isExists: {
        label: string;
        key: string;
        inputs: number;
        dataTypes: DataType[];
    };
    type: {
        label: string;
        key: string;
    };
};
export declare const EsQueryMethods: {
    match: {
        label: string;
        key: string;
        dataTypes: DataType[];
    };
    term: {
        label: string;
        key: string;
    };
    terms: {
        label: string;
        key: string;
    };
    termsSet: {
        label: string;
        key: string;
    };
    range: {
        label: string;
        key: string;
        dataTypes: DataType[];
    };
    exists: {
        label: string;
        key: string;
    };
    prefix: {
        label: string;
        key: string;
    };
    wildcard: {
        label: string;
        key: string;
    };
    regexp: {
        label: string;
        key: string;
    };
    fuzzy: {
        label: string;
        key: string;
    };
    type: {
        label: string;
        key: string;
    };
    ids: {
        label: string;
        key: string;
    };
};
export declare const EsAggMethods: {};
export declare const EsBulkAggMethods: {};
