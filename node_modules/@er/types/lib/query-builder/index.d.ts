import { DataEntity } from '../data-entity';
import { DataField } from '../data-field';
import { DataItem } from '../data-item';
import { DynaComponent } from '../dyna-content';
import { QueryRule, QueryRuleSet } from '../query';
export interface QueryDataField extends DataField {
    value?: string;
    nullable?: boolean;
    operators?: string[];
    defaultOperator?: any;
    entityKey?: string;
    validator?: (rule: QueryRule, parent: QueryRuleSet) => any | null;
}
export interface QueryBuilderStyleClasses {
    removeIcon?: string;
    addIcon?: string;
    button?: string;
    buttonGroup?: string;
    removeButton?: string;
    removeButtonSize?: string;
    switchRow?: string;
    switchGroup?: string;
    switchLabel?: string;
    switchRadio?: string;
    switchControl?: string;
    rightAlign?: string;
    transition?: string;
    tree?: string;
    row?: string;
    connector?: string;
    rule?: string;
    ruleSet?: string;
    invalidRuleSet?: string;
    emptyWarning?: string;
    fieldControl?: string;
    fieldControlSize?: string;
    entityControl?: string;
    entityControlSize?: string;
    operatorControl?: string;
    operatorControlSize?: string;
    inputControl?: string;
    inputControlSize?: string;
}
export interface QueryBuilderProps {
    fields?: DataField[];
    entities?: DataEntity[];
    styleClasses?: QueryBuilderStyleClasses;
    allowRuleSet?: boolean;
    allowEmptyRuleSet?: boolean;
    emptyMessage?: boolean;
    operators?: {
        [type: string]: DataItem[];
    } | ((field: DataField) => DataItem[]);
    inputs?: {
        [type: string]: DynaComponent;
    } | ((field: DataField, operator: string) => DynaComponent);
    getOperators?: (fieldName: string, field: DataField) => string[];
    getInputType?: (field: string, operator: string) => string;
    getOptions?: (field: string) => DataItem[];
    addRuleSet?: (parent: QueryRuleSet) => void;
    addRule?: (parent: QueryRuleSet) => void;
    removeRuleSet?: (ruleset: QueryRuleSet, parent: QueryRuleSet) => void;
    removeRule?: (rule: QueryRule, parent: QueryRuleSet) => void;
}
