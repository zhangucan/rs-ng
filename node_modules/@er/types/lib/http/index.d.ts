import { HttpHeaders, HttpParams } from '@angular/common/http';
import { ApiServerType } from '../api';
export interface HttpClientRequestOptions {
    body?: any;
    headers?: HttpHeaders;
    params?: HttpParams;
    observe?: 'body' | 'events' | 'response';
    reportProgress?: boolean;
    responseType?: HttpResponseType;
    withCredentials?: boolean;
}
export declare enum HttpMethod {
    GET = "Get",
    POST = "Post",
    DELETE = "Delete",
    OPTIONS = "Options",
    PUT = "Put",
    HEAD = "Head",
    PATCH = "Patch"
}
export declare enum HttpResponseType {
    ARRAY = "arraybuffer",
    BLOB = "blob",
    JSON = "json",
    TEXT = "text"
}
export declare enum HttpContentType {
    FORM = "application/x-www-form-urlencoded",
    MULTIPART = "multipart/form-data",
    JSON = "application/json",
    TEXT = "text/plain"
}
export declare type HttpRequestPayload = string | {
    [key: string]: any;
} | Function;
export declare enum HttpRequestPayloadType {
    PARAMS = "params",
    BODY = "body"
}
export interface HttpRequestOptions {
    tag?: string | string[];
    uri?: string;
    serverType?: ApiServerType;
    method?: HttpMethod | string;
    headers?: {
        [name: string]: string | string[];
    };
    params?: HttpRequestPayload;
    body?: HttpRequestPayload;
    payload?: HttpRequestPayload;
    payloadType?: HttpRequestPayloadType;
    contentType?: HttpContentType;
    responseType?: HttpResponseType;
    observe?: 'body' | 'events' | 'response';
    reportProgress?: boolean;
    withCredentials?: boolean;
    retry?: number;
    dataPath?: string | string[];
    notifySuccess?: boolean;
    alertSuccess?: boolean;
    successMessage?: string;
    notifyFailure?: boolean;
    alertFailure?: boolean;
    failureMessage?: string;
    stateName?: string | string[];
    context?: any;
    skipRootHttpNotify?: boolean;
    onRequest?: (options: HttpRequestOptions) => HttpRequestOptions | boolean;
    onResponse?: (response: any, request: HttpRequestOptions) => any;
    onError?: (error: any, request: HttpRequestOptions) => any;
    onSuccess?: (resp: any, request: HttpRequestOptions) => any;
    onFailure?: (message: any, request: HttpRequestOptions) => any;
    [extended: string]: any;
}
