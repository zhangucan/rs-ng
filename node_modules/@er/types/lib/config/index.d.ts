import { Type } from '@angular/core';
import { Observable } from 'rxjs';
import { ApiRequestOptions, ApiServerType } from '../api';
import { Breadcrumb } from '../breadcrumb';
import { DialogProp } from '../dialog';
import { HttpRequestOptions } from '../http';
import { HttpInterceptorConfig } from '../interceptor';
import { Menu } from '../menu';
import { NotifyProp, NotifyType } from '../notify';
/**
 * basic config model properties
 */
export interface ConfigModel {
    isProduction?: boolean;
    appTitle?: string;
    appName?: string;
    appLogo?: string;
    version?: string;
    api?: {
        servers?: {
            es?: ApiRequestOptions;
            er?: ApiRequestOptions;
            image?: ApiRequestOptions;
            timer?: ApiRequestOptions;
            [key: string]: ApiRequestOptions;
        };
        default?: string | ApiServerType;
    };
    dataFieldProps?: {
        dataCode?: {
            apiEntry?: string;
            codeKey?: string;
            nameKey?: string;
            catKey?: string;
            parentKey?: string;
            inUseKey?: string;
            abbrKey?: string;
        };
    };
    stomp?: {
        enabled?: boolean;
        url?: string | Function;
        destination?: string;
        headers?: {};
        heartbeat_in?: number;
        heartbeat_out?: number;
        reconnect_delay?: number;
        debug?: boolean;
    };
    rootPath?: string;
    resources?: {
        uri?: string;
        root?: string;
        reserve?: boolean;
    };
    auth?: {
        storageKey?: string;
        headerName?: string;
        authScheme?: string;
        loginRouter?: string;
        changePwdRouter?: string;
        changePwdSuccessRouter?: string;
        profileRouter?: string;
        userTokenKey?: string;
        passwordKey?: string;
        rememberMeKey?: string;
        component?: Type<any>;
        title?: string;
        requiredUserProps?: string;
        failedPropsRouter?: string;
        loginApiOptions?: ApiRequestOptions;
        registerApiOptions?: ApiRequestOptions;
        logoutApiOptions?: ApiRequestOptions;
        changePwdApiOptions?: ApiRequestOptions;
        resetPwdApiOptions?: ApiRequestOptions;
        loginSuccessRouter?: string | any[];
        logoutSuccessRouter?: string | any[];
        defaultRules?: string[];
        getRolePermissions?: (roles: string | string[]) => Observable<string[]>;
        getUserInfo?: (userId: any) => Observable<{}>;
        onLoginSuccess?: (user: any) => void;
    };
    wechat?: {
        id?: string;
        appid?: string;
        scope?: string;
        redirect_uri?: string;
        state?: string;
        style?: 'black' | 'white';
        href?: string;
        self_redirect?: boolean;
    };
    httpTimeout?: number;
    httpInterceptors?: HttpInterceptorConfig[];
    onLoading?: string;
    rootMenu?: Menu;
    alert?: NotifyProp;
    announce?: NotifyProp;
    notify?: NotifyType;
    dialog?: DialogProp;
    debounce?: number;
    breadcrumb?: {
        prefix?: Breadcrumb[];
        excludes?: string | string[];
    };
    routeLogger?: boolean;
    log?: {
        enableRoute?: boolean;
        enableApp?: boolean;
        level?: number;
        httpPost?: boolean;
        httpOptions?: HttpRequestOptions;
        blackLList?: string[];
    };
    [key: string]: any;
}
