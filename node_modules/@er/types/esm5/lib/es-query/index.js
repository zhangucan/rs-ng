/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DataType } from '../data-type';
/** @type {?} */
export var DEFAULT_ES_QUERY_CONDITION = 'AND';
/** @type {?} */
export var ES_QUERY_OPERATORS = {
    contains: {
        label: '包含',
        key: 'contains',
        multiple: true,
        dataTypes: [DataType.STRING],
        operator: 'match'
    },
    equal: {
        label: '等于',
        key: 'equal',
        multiple: true,
        operator: 'terms'
    },
    in: {
        label: '包含',
        key: 'in',
        multiple: true,
        operator: 'in',
        getValue: function (v) {
            return v.split(',').map(function (e) {
                return e.trim();
            });
        }
    },
    less: {
        label: '小于',
        key: 'less',
        dataTypes: [DataType.NUMBER, DataType.DATE],
        operator: 'range',
        getValue: function (v) {
            return { 'lt': v };
        }
    },
    less_equal: {
        label: '小于等于',
        key: 'less_equal',
        dataTypes: [DataType.NUMBER, DataType.DATE],
        operator: 'range',
        getValue: function (v) {
            return { 'lte': v };
        }
    },
    greater: {
        label: '大于',
        key: 'greater',
        dataTypes: [DataType.NUMBER, DataType.DATE],
        operator: 'range',
        getValue: function (v) {
            return { 'gt': v };
        }
    },
    greater_equal: {
        label: '小于等于',
        key: 'greater_equal',
        dataTypes: [DataType.NUMBER, DataType.DATE],
        operator: 'range',
        getValue: function (v) {
            return { 'gte': v };
        }
    },
    between: {
        label: '介于',
        key: 'between',
        inputs: 2,
        dataTypes: [DataType.NUMBER, DataType.DATE],
        operator: 'range',
        getValue: function (v) {
            return { 'gte': v[0], 'lte': v[1] };
        }
    },
    begins_with: {
        label: '以...打头',
        key: 'begins_with',
        dataTypes: [DataType.STRING],
        operator: 'wildcard',
        getValue: function (v) {
            return 'v*';
        }
    },
    end_with: {
        label: '以...结尾',
        key: 'end_with',
        dataTypes: [DataType.STRING],
        operator: 'wildcard',
        getValue: function (v) {
            return '*v';
        }
    },
    pattern: {
        label: '匹配',
        key: 'pattern',
        dataTypes: [DataType.STRING],
        operator: 'wildcard'
    },
    phrase: {
        label: '短语',
        key: 'phrase',
        dataTypes: [DataType.STRING],
        operator: 'phrase'
    },
    phrase_prefix: {
        label: '短语前缀',
        key: 'phrase_prefix',
        dataTypes: [DataType.STRING],
        operator: 'phrase_prefix'
    },
    isEmpty: {
        label: '',
        key: 'is_empty',
        inputs: 0,
        dataTypes: [DataType.STRING]
    },
    isNull: {
        label: '',
        key: 'is_null',
        inputs: 0
    },
    isExists: {
        label: '存在',
        key: 'is_exists',
        inputs: 0,
        dataTypes: [DataType.STRING, DataType.NUMBER, DataType.DATE, DataType.BOOLEAN]
    },
    type: {
        label: '类型',
        key: 'is_type'
    }
};
/** @type {?} */
export var EsQueryMethods = {
    match: { label: '包含', key: 'match', dataTypes: [DataType.STRING] },
    term: { label: '包含条目', key: 'term' },
    terms: { label: '包含多个条目', key: 'terms' },
    termsSet: { label: '包含多个条目', key: 'termsSet' },
    range: { label: '范围', key: 'range', dataTypes: [DataType.NUMBER, DataType.DATE] },
    exists: { label: '存在', key: 'exists' },
    prefix: { label: '前缀', key: 'prefix' },
    wildcard: { label: '通配', key: 'wildcard' },
    regexp: { label: '正则', key: '正则' },
    fuzzy: { label: '间距', key: 'fuzzy' },
    type: { label: '类型', key: 'type' },
    ids: { label: '唯一值', key: 'ids' }
};
/** @type {?} */
export var EsAggMethods = {};
/** @type {?} */
export var EsBulkAggMethods = {};
//# sourceMappingURL=data:application/json;base64,