import { DateUtils, EsUtils } from '@er/utils';
import { requestBodySearch, boolQuery, termQuery, termsQuery } from 'elastic-builder';
import { __assign } from 'tslib';
import { transition, trigger, useAnimation } from '@angular/animations';
import { bounce, bounceIn, bounceInDown, bounceInLeft, bounceInRight, bounceInUp, bounceOut, bounceOutDown, bounceOutLeft, bounceOutRight, bounceOutUp, fadeIn, fadeInDown, fadeInLeft, fadeInRight, fadeInUp, fadeOut, fadeOutDown, fadeOutLeft, fadeOutRight, fadeOutUp, flash, flip, flipInX, flipInY, flipOutX, flipOutY, hinge, jackInTheBox, jello, lightSpeedIn, lightSpeedOut, pulse, rollIn, rollOut, rotateIn, rotateInDownLeft, rotateInDownRight, rotateInUpLeft, rotateInUpRight, rotateOut, rotateOutDownLeft, rotateOutDownRight, rotateOutUpLeft, rotateOutUpRight, rubberBand, shake, slideInDown, slideInLeft, slideInRight, slideInUp, slideOutDown, slideOutLeft, slideOutRight, slideOutUp, swing, tada, wobble, zoomIn, zoomInDown, zoomInLeft, zoomInRight, zoomInUp, zoomOut, zoomOutDown, zoomOutLeft, zoomOutRight, zoomOutUp } from 'ng-animate';
import { ApiServerType, HttpMethod, HttpRequestPayloadType, Order, DataType } from '@er/types';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var MockServerApiRequestOptions = {};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var paramKeys$1 = {
    sort: 'sort',
    from: 'from',
    size: 'size',
    order: 'order',
    page: 'page',
    to: 'to',
    q: 'q',
    query: 'query',
    filter: 'filter',
    globalFiler: 'globalFiler',
    fields: '_source'
};
/** @type {?} */
var responseResolver = function (response) {
    if (response) {
        if (response instanceof Array) {
            if (response.length === 1) {
                response = response[0];
            }
        }
        return { success: true, content: response };
    }
    else {
        return { success: false };
    }
};
/** @type {?} */
var updateResponseResolver$1 = function (response) {
    if (response && response.hasOwnProperty('_id')) {
        /** @type {?} */
        var id = response['_id'];
        delete response['_id'];
        return { success: true, content: __assign({ id: id }, response) };
    }
    else {
        return { failure: true, message: response };
    }
};
/** @type {?} */
var deleteResponseResolver$1 = function (response) {
    return response && response.result === 'deleted'
        ? { success: true, content: response }
        : { failure: true, message: response };
};
/** @type {?} */
var parseResponse = function (resp) {
    /** @type {?} */
    var response = {};
    response['success'] = resp.hasOwnProperty('hits') || resp.hasOwnProperty('aggregations');
    if (response['success']) {
        response['content'] = {
            total: resp['hits'].total,
            items: resp['hits'].hits.map(function (hit) {
                return __assign({ id: hit._id }, hit['_source']);
            })
        };
        if (resp.aggregations) {
            response['content']['aggs'] = resp.aggregations;
        }
        if (resp.highlight) {
            response['content']['highlight'] = resp.highlight;
        }
    }
    else {
        response['error'] = resp.error && resp.error.reason;
    }
    return response;
};
/** @type {?} */
var getApiEntryWithType = function (apiEntry) {
    if (apiEntry.indexOf('/') === -1) {
        apiEntry = apiEntry + "/type";
    }
    return apiEntry;
};
/** @type {?} */
var EsServerApiRequestOptions = {
    serverType: ApiServerType.ES,
    paramsKeys: paramKeys$1,
    actions: {
        login: {
            uriResolver: 'user',
            method: HttpMethod.GET,
            onResponse: responseResolver,
            notifySuccess: true,
            successMessage: '登录成功'
        },
        logout: {
            uriResolver: 'logout',
            notifySuccess: false,
            onResponse: responseResolver,
            successMessage: '退出登录成功'
        },
        register: {
            uriResolver: 'user',
            method: HttpMethod.POST,
            notifySuccess: true,
            successMessage: '注册成功'
        },
        getById: {
            method: HttpMethod.POST,
            uriResolver: function (apiEntry) { return apiEntry + "/_search"; },
            payloadResolver: function (apiEntry, payload) {
                /** @type {?} */
                var query = requestBodySearch().query(boolQuery().must(termQuery('_id', payload['id'])));
                if (payload.fields) {
                    query.source(payload.fields);
                }
                return (/** @type {?} */ (query.toJSON()));
            },
            onResponse: function (resp) {
                return {
                    success: true,
                    content: parseResponse(resp)['content']['items'][0]
                };
            }
        },
        getByIds: {
            method: HttpMethod.POST,
            uriResolver: function (apiEntry) { return apiEntry + "/_search"; },
            payloadResolver: function (apiEntry, payload) {
                /** @type {?} */
                var query = requestBodySearch().query(boolQuery().must(termsQuery('_id', payload['id'])));
                if (payload.fields) {
                    query.source(payload.fields);
                }
                return (/** @type {?} */ (query.toJSON()));
            },
            onResponse: function (resp) {
                return {
                    success: true,
                    content: parseResponse(resp)['content']['items']
                };
            }
        },
        getByQuery: {
            method: HttpMethod.POST,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: function (apiEntry) {
                if (apiEntry && apiEntry.toLowerCase().indexOf('_msearch') === -1) {
                    return apiEntry + "/_search";
                }
                else {
                    return apiEntry;
                }
            },
            payloadResolver: function (apiEntry, payload, options) {
                /** @type {?} */
                var body = EsUtils.resolveRequestBody(payload, options);
                if (!body['sort']) ;
                return body;
            },
            onResponse: function (resp) {
                if (resp.responses) {
                    return {
                        success: true,
                        content: {
                            items: resp.responses.map(function (r) { return parseResponse(r); })
                        }
                    };
                }
                else {
                    return parseResponse(resp);
                }
            }
        },
        create: {
            method: HttpMethod.POST,
            uriResolver: function (apiEntry) { return getApiEntryWithType(apiEntry) + "?refresh"; },
            payloadResolver: function (apiEntry, payload) {
                delete payload.id;
                delete payload['_index'];
                delete payload['_type'];
                payload['_createdTime'] = DateUtils.getFormattedDateTime();
                return payload;
            },
            onResponse: updateResponseResolver$1,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据保存成功'
        },
        updateById: {
            method: HttpMethod.POST,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: function (apiEntry, payload) { return getApiEntryWithType(apiEntry) + "/" + payload.id + "/_update?refresh"; },
            payloadResolver: function (apiEntry, payload) {
                return {
                    script: {
                        source: payload.script,
                        lang: 'painless',
                        params: payload.params
                    }
                };
            },
            onResponse: updateResponseResolver$1,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据更新成功'
        },
        patchById: {
            method: HttpMethod.POST,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: function (apiEntry, payload) { return getApiEntryWithType(apiEntry) + "/" + payload.id + "/_update?refresh"; },
            payloadResolver: function (apiEntry, payload, options) {
                delete payload.id;
                delete payload['_index'];
                delete payload['_type'];
                payload['_modifiedTime'] = DateUtils.getFormattedDateTime();
                return {
                    doc: payload
                };
            },
            onResponse: updateResponseResolver$1,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据更新成功'
        },
        deleteById: {
            method: HttpMethod.DELETE,
            uriResolver: function (apiEntry, payload) { return getApiEntryWithType(apiEntry) + "/" + payload + "?refresh"; },
            payloadResolver: function () { return undefined; },
            onResponse: deleteResponseResolver$1,
            notifySuccess: false,
            alertSuccess: false,
            successMessage: '数据删除成功'
        },
        deleteByQuery: {
            method: HttpMethod.POST,
            uriResolver: function (apiEntry) { return apiEntry + "/_delete_by_query?refresh"; },
            payloadResolver: function (apiEntry, payload, options) { return EsUtils.resolveRequestBody(payload, options); },
            onResponse: deleteResponseResolver$1,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '批量数据删除成功'
        },
        batch: {
            method: HttpMethod.POST,
            uriResolver: function () { return "_bulk?refresh"; },
            onResponse: function (resp) {
                return __assign({}, resp, { success: !resp.hasOwnProperty('errors') });
            },
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '批量操作成功'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var paramKeys$2 = {
    sort: '_sort',
    order: '_order',
    from: 'from',
    size: 'size',
    page: '_page',
    to: '_end'
};
/** @type {?} */
var responseResolver$1 = function (response) { return response; };
/** @type {?} */
var updateResponseResolver$2 = function (response) {
    return response && response.hasOwnProperty('id')
        ? { success: true, result: response.id }
        : { failure: true, message: response };
};
/** @type {?} */
var deleteResponseResolver$2 = function (response) {
    return response && Object.keys(response).length === 0
        ? { success: true, result: {} }
        : { failure: true, message: response };
};
/** @type {?} */
var ErServerApiRequestOptions = {
    serverType: ApiServerType.ER,
    paramsKeys: paramKeys$2,
    actions: {
        login: {
            uriResolver: function () { return 'login'; },
            method: HttpMethod.POST,
            notifySuccess: true,
            successMessage: '登录成功',
            notifyFailure: true,
            onResponse: responseResolver$1,
            onSuccess: (function (resp) {
                /** @type {?} */
                var content = resp.content;
                return content || {};
            })
        },
        logout: {
            uriResolver: function () { return 'logout'; },
            notifySuccess: false,
            onResponse: responseResolver$1
        },
        changePwd: {
            uriResolver: function () { return 'user/updatePwd'; },
            notifySuccess: false,
            onResponse: responseResolver$1
        },
        register: {
            uriResolver: function () { return 'user/reg'; },
            method: HttpMethod.POST,
            notifySuccess: true,
            successMessage: '注册成功'
        },
        getById: {
            uriResolver: function (apiEntry, payload) { return apiEntry + "/" + payload; },
            onResponse: function (response) {
                return __assign({ id: response['_id'] }, response['_source']);
            }
        },
        getByIds: {
            method: HttpMethod.GET,
            payloadType: HttpRequestPayloadType.PARAMS,
            payloadResolver: function (apiEntry, payload, options) {
                var _a;
                /** @type {?} */
                var _ids = payload;
                if (_ids.length === 0) {
                    throw new Error('id值为空');
                }
                /** @type {?} */
                var keys = options.paramsKeys;
                return _a = {},
                    _a[keys.ids] = _ids,
                    _a[keys.fields] = payload.fields,
                    _a;
            }
        },
        getByQuery: {
            method: HttpMethod.GET,
            payloadType: HttpRequestPayloadType.PARAMS,
            payloadResolver: function (apiEntry, payload, options) {
                /** @type {?} */
                var qParams = '';
                /** @type {?} */
                var requestPayload = payload || {};
                /** @type {?} */
                var query = requestPayload.query;
                var size = requestPayload.size, page = requestPayload.page;
                if (size || page) {
                    if (!qParams.endsWith('&')) {
                        qParams += '&';
                    }
                    qParams += options.paramsKeys.size + "=" + (size || 10) + "&" + options.paramsKeys.page + "=" + (page || 1);
                }
                /** @type {?} */
                var sort = requestPayload.sort;
                if (sort) {
                    if (!qParams.endsWith('&')) {
                        qParams += '&';
                    }
                    /** @type {?} */
                    var sortFields_1 = '';
                    /** @type {?} */
                    var sortOrders_1 = '';
                    if (typeof sort === 'string') {
                        qParams += options.paramsKeys.sort + "=" + sort + "&" + options.paramsKeys.order + "=" + Order.ASC;
                    }
                    else {
                        Object.keys(sort).map(function (field) {
                            sortFields_1 += field + ",";
                            sortOrders_1 += sort[field] + ",";
                        });
                        qParams += options.paramsKeys.sort + "=" + sortFields_1 + "&" + options.paramsKeys.order + "=" + sortOrders_1;
                    }
                }
                return qParams;
            },
            onResponse: function (response) { return response; }
        },
        create: {
            method: HttpMethod.POST,
            onResponse: updateResponseResolver$2,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据保存成功'
        },
        updateById: {
            method: HttpMethod.PUT,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: function (apiEntry, payload) { return apiEntry + "/" + payload.id; },
            payloadResolver: function (apiEntry, payload) { return payload.data; },
            onResponse: updateResponseResolver$2,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据更新成功'
        },
        patchById: {
            method: HttpMethod.PATCH,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: function (apiEntry, payload) { return apiEntry + "/" + payload.id; },
            payloadResolver: function (apiEntry, payload) { return payload; },
            onResponse: updateResponseResolver$2,
            notifySuccess: true,
            successMessage: '数据更新成功'
        },
        deleteById: {
            method: HttpMethod.DELETE,
            uriResolver: function (apiEntry, payload) { return apiEntry + "/" + payload; },
            onResponse: deleteResponseResolver$2,
            notifySuccess: true,
            successMessage: '数据删除成功'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var ANIMATION_NAMES = {
    bounce: bounce,
    flash: flash,
    pulse: pulse,
    rubberBand: rubberBand,
    shake: shake,
    swing: swing,
    tada: tada,
    wobble: wobble,
    jello: jello,
    bounceInDown: bounceInDown,
    bounceInLeft: bounceInLeft,
    bounceInRight: bounceInRight,
    bounceInUp: bounceInUp,
    bounceOutDown: bounceOutDown,
    bounceOutLeft: bounceOutLeft,
    bounceOutRight: bounceOutRight,
    bounceOutUp: bounceOutUp,
    fadeIn: fadeIn,
    fadeInDown: fadeInDown,
    fadeInLeft: fadeInLeft,
    fadeInRight: fadeInRight,
    fadeInUp: fadeInUp,
    fadeOut: fadeOut,
    fadeOutDown: fadeOutDown,
    fadeOutLeft: fadeOutLeft,
    fadeOutRight: fadeOutRight,
    fadeOutUp: fadeOutUp,
    slideInDown: slideInDown,
    slideInLeft: slideInLeft,
    slideInRight: slideInRight,
    slideInUp: slideInUp,
    slideOutDown: slideOutDown,
    slideOutLeft: slideOutLeft,
    slideOutRight: slideOutRight,
    slideOutUp: slideOutUp,
    flip: flip,
    flipInX: flipInX,
    flipInY: flipInY,
    flipOutX: flipOutX,
    flipOutY: flipOutY,
    lightSpeedIn: lightSpeedIn,
    lightSpeedOut: lightSpeedOut,
    rotateIn: rotateIn,
    rotateInDownLeft: rotateInDownLeft,
    rotateInDownRight: rotateInDownRight,
    rotateInUpLeft: rotateInUpLeft,
    rotateInUpRight: rotateInUpRight,
    rotateOut: rotateOut,
    rotateOutDownLeft: rotateOutDownLeft,
    rotateOutDownRight: rotateOutDownRight,
    rotateOutUpLeft: rotateOutUpLeft,
    rotateOutUpRight: rotateOutUpRight,
    jackInTheBox: jackInTheBox,
    hinge: hinge,
    rollIn: rollIn,
    rollOut: rollOut,
    zoomIn: zoomIn,
    zoomOut: zoomOut,
    zoomInDown: zoomInDown,
    zoomInLeft: zoomInLeft,
    zoomInRight: zoomInRight,
    zoomInUp: zoomInUp,
    zoomOutDown: zoomOutDown,
    zoomOutLeft: zoomOutLeft,
    zoomOutRight: zoomOutRight,
    zoomOutUp: zoomOutUp
};
/** @type {?} */
var ANIMATIONS = {
    bounce: trigger('bounce', [transition('* => *', useAnimation(bounce))]),
    flash: trigger('flash', [transition('* => *', useAnimation(flash))]),
    pulse: trigger('pulse', [transition('* => *', useAnimation(pulse))]),
    rubberBand: trigger('rubberBand', [transition('* => *', useAnimation(rubberBand))]),
    shake: trigger('shake', [transition('* => *', useAnimation(shake))]),
    swing: trigger('swing', [transition('* => *', useAnimation(swing))]),
    tada: trigger('tada', [transition('* => *', useAnimation(tada))]),
    wobble: trigger('wobble', [transition('* => *', useAnimation(wobble))]),
    jello: trigger('jello', [transition('* => *', useAnimation(jello))]),
    bounceIn: trigger('bounceIn', [transition('* => *', useAnimation(bounceIn))]),
    bounceInDown: trigger('bounceInDown', [transition('* => *', useAnimation(bounceInDown))]),
    bounceInLeft: trigger('bounceInLeft', [transition('* => *', useAnimation(bounceInLeft))]),
    bounceOut: trigger('bounceOut', [transition('* => *', useAnimation(bounceOut))]),
    bounceOutRight: trigger('bounceOutRight', [
        transition('* => *', useAnimation(bounceOutRight))
    ]),
    bounceOutUp: trigger('bounceOutUp', [transition('* => *', useAnimation(bounceOutUp))]),
    fadeIn: trigger('fadeIn', [transition('* => *', useAnimation(fadeIn))]),
    fadeInDown: trigger('fadeInDown', [transition('* => *', useAnimation(fadeInDown))]),
    fadeInLeft: trigger('fadeInLeft', [transition('* => *', useAnimation(fadeInLeft))]),
    fadeOut: trigger('fadeOut', [transition('* => *', useAnimation(fadeOut))]),
    fadeOutUp: trigger('fadeOutUp', [transition('* => *', useAnimation(fadeOutUp))]),
    fadeOutRight: trigger('fadeOutRight', [transition('* => *', useAnimation(fadeOutRight))]),
    slideInDown: trigger('slideInDown', [transition('* => *', useAnimation(slideInDown))]),
    slideInLeft: trigger('slideInLeft', [transition('* => *', useAnimation(slideInLeft))]),
    slideOutUp: trigger('slideOutUp', [transition('* => *', useAnimation(slideOutUp))]),
    slideOutRight: trigger('slideOutRight', [
        transition('* => *', useAnimation(slideOutRight))
    ]),
    flip: trigger('flip', [transition('* => *', useAnimation(flip))]),
    flipInX: trigger('flipInX', [transition('* => *', useAnimation(flipInX))]),
    flipInY: trigger('flipInY', [transition('* => *', useAnimation(flipInY))]),
    flipOutX: trigger('flipOutX', [transition('* => *', useAnimation(flipOutX))]),
    flipOutY: trigger('flipOutY', [transition('* => *', useAnimation(flipOutY))]),
    lightSpeedIn: trigger('lightSpeedIn', [transition('* => *', useAnimation(lightSpeedIn))]),
    lightSpeedOut: trigger('lightSpeedOut', [
        transition('* => *', useAnimation(lightSpeedOut))
    ]),
    rotateIn: trigger('rotateIn', [transition('* => *', useAnimation(rotateIn))]),
    rotateInDownLeft: trigger('rotateInDownLeft', [
        transition('* => *', useAnimation(rotateInDownLeft))
    ]),
    rotateInUpRight: trigger('rotateInUpRight', [
        transition('* => *', useAnimation(rotateInUpRight))
    ]),
    rotateOut: trigger('rotateOut', [transition('* => *', useAnimation(rotateOut))]),
    rotateOutUpLeft: trigger('rotateOutUpLeft', [
        transition('* => *', useAnimation(rotateOutUpLeft))
    ]),
    rotateOutDownRight: trigger('rotateOutDownRight', [
        transition('* => *', useAnimation(rotateOutDownRight))
    ]),
    hinge: trigger('hinge', [transition('* => *', useAnimation(hinge))]),
    jackInTheBox: trigger('jackInTheBox', [transition('* => *', useAnimation(jackInTheBox))]),
    rollIn: trigger('rollIn', [transition('* => *', useAnimation(rollIn))]),
    rollOut: trigger('rollOut', [transition('* => *', useAnimation(rollOut))]),
    zoomIn: trigger('zoomIn', [transition('* => *', useAnimation(zoomIn))]),
    zoomInLeft: trigger('zoomInLeft', [transition('* => *', useAnimation(zoomInLeft))]),
    zoomInDown: trigger('zoomInDown', [transition('* => *', useAnimation(zoomInDown))]),
    zoomOut: trigger('zoomOut', [transition('* => *', useAnimation(zoomOut))]),
    zoomOutUp: trigger('zoomOutUp', [transition('* => *', useAnimation(zoomOutUp))]),
    zoomOutRight: trigger('zoomOutRight', [transition('* => *', useAnimation(zoomOutRight))])
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_API_REQUEST_OPTIONS = {
    notifyFailure: true,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_BUTTON_PROPS = (/** @type {?} */ ({
    iconPos: 'left',
    type: 'button'
}));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_FIELD_PROPS = {
    dataType: DataType.STRING,
    maxLength: 20,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_HTTP_REQUEST_OPTIONS = {
    notifySuccess: false,
    successMessage: ''
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_INIT_HTTP_STATE = { 'label': '加载中...', 'icon': 'fa-cog fa-spin' };

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_NAV_EXTRAS = {
    queryParamsHandling: 'merge',
    // 'preserve'
    preserveFragment: true
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_ROOT_ROUTER_OPTIONS = {
    useHash: true,
    onSameUrlNavigation: 'reload',
    enableTracing: false,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MockServerApiRequestOptions, EsServerApiRequestOptions, ErServerApiRequestOptions, ANIMATION_NAMES, ANIMATIONS, DEFAULT_API_REQUEST_OPTIONS, DEFAULT_BUTTON_PROPS, DEFAULT_FIELD_PROPS, DEFAULT_HTTP_REQUEST_OPTIONS, DEFAULT_INIT_HTTP_STATE, DEFAULT_NAV_EXTRAS, DEFAULT_ROOT_ROUTER_OPTIONS };

//# sourceMappingURL=er-presets.js.map