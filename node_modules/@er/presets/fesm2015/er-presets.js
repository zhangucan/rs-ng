import { DateUtils, EsUtils } from '@er/utils';
import { requestBodySearch, boolQuery, termQuery, termsQuery } from 'elastic-builder';
import { transition, trigger, useAnimation } from '@angular/animations';
import { bounce, bounceIn, bounceInDown, bounceInLeft, bounceInRight, bounceInUp, bounceOut, bounceOutDown, bounceOutLeft, bounceOutRight, bounceOutUp, fadeIn, fadeInDown, fadeInLeft, fadeInRight, fadeInUp, fadeOut, fadeOutDown, fadeOutLeft, fadeOutRight, fadeOutUp, flash, flip, flipInX, flipInY, flipOutX, flipOutY, hinge, jackInTheBox, jello, lightSpeedIn, lightSpeedOut, pulse, rollIn, rollOut, rotateIn, rotateInDownLeft, rotateInDownRight, rotateInUpLeft, rotateInUpRight, rotateOut, rotateOutDownLeft, rotateOutDownRight, rotateOutUpLeft, rotateOutUpRight, rubberBand, shake, slideInDown, slideInLeft, slideInRight, slideInUp, slideOutDown, slideOutLeft, slideOutRight, slideOutUp, swing, tada, wobble, zoomIn, zoomInDown, zoomInLeft, zoomInRight, zoomInUp, zoomOut, zoomOutDown, zoomOutLeft, zoomOutRight, zoomOutUp } from 'ng-animate';
import { ApiServerType, HttpMethod, HttpRequestPayloadType, Order, DataType } from '@er/types';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const MockServerApiRequestOptions = {};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const paramKeys$1 = {
    sort: 'sort',
    from: 'from',
    size: 'size',
    order: 'order',
    page: 'page',
    to: 'to',
    q: 'q',
    query: 'query',
    filter: 'filter',
    globalFiler: 'globalFiler',
    fields: '_source'
};
/** @type {?} */
const responseResolver = response => {
    if (response) {
        if (response instanceof Array) {
            if (response.length === 1) {
                response = response[0];
            }
        }
        return { success: true, content: response };
    }
    else {
        return { success: false };
    }
};
/** @type {?} */
const updateResponseResolver$1 = response => {
    if (response && response.hasOwnProperty('_id')) {
        /** @type {?} */
        const id = response['_id'];
        delete response['_id'];
        return { success: true, content: Object.assign({ id }, response) };
    }
    else {
        return { failure: true, message: response };
    }
};
/** @type {?} */
const deleteResponseResolver$1 = response => response && response.result === 'deleted'
    ? { success: true, content: response }
    : { failure: true, message: response };
/** @type {?} */
const parseResponse = (resp) => {
    /** @type {?} */
    const response = {};
    response['success'] = resp.hasOwnProperty('hits') || resp.hasOwnProperty('aggregations');
    if (response['success']) {
        response['content'] = {
            total: resp['hits'].total,
            items: resp['hits'].hits.map(hit => {
                return Object.assign({ id: hit._id }, hit['_source']);
            })
        };
        if (resp.aggregations) {
            response['content']['aggs'] = resp.aggregations;
        }
        if (resp.highlight) {
            response['content']['highlight'] = resp.highlight;
        }
    }
    else {
        response['error'] = resp.error && resp.error.reason;
    }
    return response;
};
/** @type {?} */
const getApiEntryWithType = (apiEntry) => {
    if (apiEntry.indexOf('/') === -1) {
        apiEntry = `${apiEntry}/type`;
    }
    return apiEntry;
};
/** @type {?} */
const EsServerApiRequestOptions = {
    serverType: ApiServerType.ES,
    paramsKeys: paramKeys$1,
    actions: {
        login: {
            uriResolver: 'user',
            method: HttpMethod.GET,
            onResponse: responseResolver,
            notifySuccess: true,
            successMessage: '登录成功'
        },
        logout: {
            uriResolver: 'logout',
            notifySuccess: false,
            onResponse: responseResolver,
            successMessage: '退出登录成功'
        },
        register: {
            uriResolver: 'user',
            method: HttpMethod.POST,
            notifySuccess: true,
            successMessage: '注册成功'
        },
        getById: {
            method: HttpMethod.POST,
            uriResolver: (apiEntry) => `${apiEntry}/_search`,
            payloadResolver: (apiEntry, payload) => {
                /** @type {?} */
                const query = requestBodySearch().query(boolQuery().must(termQuery('_id', payload['id'])));
                if (payload.fields) {
                    query.source(payload.fields);
                }
                return (/** @type {?} */ (query.toJSON()));
            },
            onResponse: (resp) => {
                return {
                    success: true,
                    content: parseResponse(resp)['content']['items'][0]
                };
            }
        },
        getByIds: {
            method: HttpMethod.POST,
            uriResolver: (apiEntry) => `${apiEntry}/_search`,
            payloadResolver: (apiEntry, payload) => {
                /** @type {?} */
                const query = requestBodySearch().query(boolQuery().must(termsQuery('_id', payload['id'])));
                if (payload.fields) {
                    query.source(payload.fields);
                }
                return (/** @type {?} */ (query.toJSON()));
            },
            onResponse: (resp) => {
                return {
                    success: true,
                    content: parseResponse(resp)['content']['items']
                };
            }
        },
        getByQuery: {
            method: HttpMethod.POST,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: (apiEntry) => {
                if (apiEntry && apiEntry.toLowerCase().indexOf('_msearch') === -1) {
                    return `${apiEntry}/_search`;
                }
                else {
                    return apiEntry;
                }
            },
            payloadResolver: (apiEntry, payload, options) => {
                /** @type {?} */
                const body = EsUtils.resolveRequestBody(payload, options);
                if (!body['sort']) ;
                return body;
            },
            onResponse: resp => {
                if (resp.responses) {
                    return {
                        success: true,
                        content: {
                            items: resp.responses.map(r => parseResponse(r))
                        }
                    };
                }
                else {
                    return parseResponse(resp);
                }
            }
        },
        create: {
            method: HttpMethod.POST,
            uriResolver: apiEntry => `${getApiEntryWithType(apiEntry)}?refresh`,
            payloadResolver: (apiEntry, payload) => {
                delete payload.id;
                delete payload['_index'];
                delete payload['_type'];
                payload['_createdTime'] = DateUtils.getFormattedDateTime();
                return payload;
            },
            onResponse: updateResponseResolver$1,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据保存成功'
        },
        updateById: {
            method: HttpMethod.POST,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: (apiEntry, payload) => `${getApiEntryWithType(apiEntry)}/${payload.id}/_update?refresh`,
            payloadResolver: (apiEntry, payload) => {
                return {
                    script: {
                        source: payload.script,
                        lang: 'painless',
                        params: payload.params
                    }
                };
            },
            onResponse: updateResponseResolver$1,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据更新成功'
        },
        patchById: {
            method: HttpMethod.POST,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: (apiEntry, payload) => `${getApiEntryWithType(apiEntry)}/${payload.id}/_update?refresh`,
            payloadResolver: (apiEntry, payload, options) => {
                delete payload.id;
                delete payload['_index'];
                delete payload['_type'];
                payload['_modifiedTime'] = DateUtils.getFormattedDateTime();
                return {
                    doc: payload
                };
            },
            onResponse: updateResponseResolver$1,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据更新成功'
        },
        deleteById: {
            method: HttpMethod.DELETE,
            uriResolver: (apiEntry, payload) => `${getApiEntryWithType(apiEntry)}/${payload}?refresh`,
            payloadResolver: () => undefined,
            onResponse: deleteResponseResolver$1,
            notifySuccess: false,
            alertSuccess: false,
            successMessage: '数据删除成功'
        },
        deleteByQuery: {
            method: HttpMethod.POST,
            uriResolver: (apiEntry) => `${apiEntry}/_delete_by_query?refresh`,
            payloadResolver: (apiEntry, payload, options) => EsUtils.resolveRequestBody(payload, options),
            onResponse: deleteResponseResolver$1,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '批量数据删除成功'
        },
        batch: {
            method: HttpMethod.POST,
            uriResolver: () => `_bulk?refresh`,
            onResponse: (resp) => {
                return Object.assign({}, resp, { success: !resp.hasOwnProperty('errors') });
            },
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '批量操作成功'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const paramKeys$2 = {
    sort: '_sort',
    order: '_order',
    from: 'from',
    size: 'size',
    page: '_page',
    to: '_end'
};
/** @type {?} */
const responseResolver$1 = response => response;
/** @type {?} */
const updateResponseResolver$2 = response => response && response.hasOwnProperty('id')
    ? { success: true, result: response.id }
    : { failure: true, message: response };
/** @type {?} */
const deleteResponseResolver$2 = response => response && Object.keys(response).length === 0
    ? { success: true, result: {} }
    : { failure: true, message: response };
/** @type {?} */
const ErServerApiRequestOptions = {
    serverType: ApiServerType.ER,
    paramsKeys: paramKeys$2,
    actions: {
        login: {
            uriResolver: () => 'login',
            method: HttpMethod.POST,
            notifySuccess: true,
            successMessage: '登录成功',
            notifyFailure: true,
            onResponse: responseResolver$1,
            onSuccess: ((resp) => {
                /** @type {?} */
                const content = resp.content;
                return content || {};
            })
        },
        logout: {
            uriResolver: () => 'logout',
            notifySuccess: false,
            onResponse: responseResolver$1
        },
        changePwd: {
            uriResolver: () => 'user/updatePwd',
            notifySuccess: false,
            onResponse: responseResolver$1
        },
        register: {
            uriResolver: () => 'user/reg',
            method: HttpMethod.POST,
            notifySuccess: true,
            successMessage: '注册成功'
        },
        getById: {
            uriResolver: (apiEntry, payload) => `${apiEntry}/${payload}`,
            onResponse: (response) => {
                return Object.assign({ id: response['_id'] }, response['_source']);
            }
        },
        getByIds: {
            method: HttpMethod.GET,
            payloadType: HttpRequestPayloadType.PARAMS,
            payloadResolver: (apiEntry, payload, options) => {
                /** @type {?} */
                const _ids = payload;
                if (_ids.length === 0) {
                    throw new Error('id值为空');
                }
                /** @type {?} */
                const keys = options.paramsKeys;
                return {
                    [keys.ids]: _ids,
                    [keys.fields]: payload.fields
                };
            }
        },
        getByQuery: {
            method: HttpMethod.GET,
            payloadType: HttpRequestPayloadType.PARAMS,
            payloadResolver: (apiEntry, payload, options) => {
                /** @type {?} */
                let qParams = '';
                /** @type {?} */
                const requestPayload = payload || {};
                /** @type {?} */
                const query = requestPayload.query;
                const { size, page } = requestPayload;
                if (size || page) {
                    if (!qParams.endsWith('&')) {
                        qParams += '&';
                    }
                    qParams += `${options.paramsKeys.size}=${size || 10}&${options.paramsKeys.page}=${page || 1}`;
                }
                /** @type {?} */
                const sort = requestPayload.sort;
                if (sort) {
                    if (!qParams.endsWith('&')) {
                        qParams += '&';
                    }
                    /** @type {?} */
                    let sortFields = '';
                    /** @type {?} */
                    let sortOrders = '';
                    if (typeof sort === 'string') {
                        qParams += `${options.paramsKeys.sort}=${sort}&${options.paramsKeys.order}=${Order.ASC}`;
                    }
                    else {
                        Object.keys(sort).map(field => {
                            sortFields += `${field},`;
                            sortOrders += `${sort[field]},`;
                        });
                        qParams += `${options.paramsKeys.sort}=${sortFields}&${options.paramsKeys.order}=${sortOrders}`;
                    }
                }
                return qParams;
            },
            onResponse: response => response
        },
        create: {
            method: HttpMethod.POST,
            onResponse: updateResponseResolver$2,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据保存成功'
        },
        updateById: {
            method: HttpMethod.PUT,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: (apiEntry, payload) => `${apiEntry}/${payload.id}`,
            payloadResolver: (apiEntry, payload) => payload.data,
            onResponse: updateResponseResolver$2,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据更新成功'
        },
        patchById: {
            method: HttpMethod.PATCH,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: (apiEntry, payload) => `${apiEntry}/${payload.id}`,
            payloadResolver: (apiEntry, payload) => payload,
            onResponse: updateResponseResolver$2,
            notifySuccess: true,
            successMessage: '数据更新成功'
        },
        deleteById: {
            method: HttpMethod.DELETE,
            uriResolver: (apiEntry, payload) => `${apiEntry}/${payload}`,
            onResponse: deleteResponseResolver$2,
            notifySuccess: true,
            successMessage: '数据删除成功'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ANIMATION_NAMES = {
    bounce,
    flash,
    pulse,
    rubberBand,
    shake,
    swing,
    tada,
    wobble,
    jello,
    bounceInDown,
    bounceInLeft,
    bounceInRight,
    bounceInUp,
    bounceOutDown,
    bounceOutLeft,
    bounceOutRight,
    bounceOutUp,
    fadeIn,
    fadeInDown,
    fadeInLeft,
    fadeInRight,
    fadeInUp,
    fadeOut,
    fadeOutDown,
    fadeOutLeft,
    fadeOutRight,
    fadeOutUp,
    slideInDown,
    slideInLeft,
    slideInRight,
    slideInUp,
    slideOutDown,
    slideOutLeft,
    slideOutRight,
    slideOutUp,
    flip,
    flipInX,
    flipInY,
    flipOutX,
    flipOutY,
    lightSpeedIn,
    lightSpeedOut,
    rotateIn,
    rotateInDownLeft,
    rotateInDownRight,
    rotateInUpLeft,
    rotateInUpRight,
    rotateOut,
    rotateOutDownLeft,
    rotateOutDownRight,
    rotateOutUpLeft,
    rotateOutUpRight,
    jackInTheBox,
    hinge,
    rollIn,
    rollOut,
    zoomIn,
    zoomOut,
    zoomInDown,
    zoomInLeft,
    zoomInRight,
    zoomInUp,
    zoomOutDown,
    zoomOutLeft,
    zoomOutRight,
    zoomOutUp
};
/** @type {?} */
const ANIMATIONS = {
    bounce: trigger('bounce', [transition('* => *', useAnimation(bounce))]),
    flash: trigger('flash', [transition('* => *', useAnimation(flash))]),
    pulse: trigger('pulse', [transition('* => *', useAnimation(pulse))]),
    rubberBand: trigger('rubberBand', [transition('* => *', useAnimation(rubberBand))]),
    shake: trigger('shake', [transition('* => *', useAnimation(shake))]),
    swing: trigger('swing', [transition('* => *', useAnimation(swing))]),
    tada: trigger('tada', [transition('* => *', useAnimation(tada))]),
    wobble: trigger('wobble', [transition('* => *', useAnimation(wobble))]),
    jello: trigger('jello', [transition('* => *', useAnimation(jello))]),
    bounceIn: trigger('bounceIn', [transition('* => *', useAnimation(bounceIn))]),
    bounceInDown: trigger('bounceInDown', [transition('* => *', useAnimation(bounceInDown))]),
    bounceInLeft: trigger('bounceInLeft', [transition('* => *', useAnimation(bounceInLeft))]),
    bounceOut: trigger('bounceOut', [transition('* => *', useAnimation(bounceOut))]),
    bounceOutRight: trigger('bounceOutRight', [
        transition('* => *', useAnimation(bounceOutRight))
    ]),
    bounceOutUp: trigger('bounceOutUp', [transition('* => *', useAnimation(bounceOutUp))]),
    fadeIn: trigger('fadeIn', [transition('* => *', useAnimation(fadeIn))]),
    fadeInDown: trigger('fadeInDown', [transition('* => *', useAnimation(fadeInDown))]),
    fadeInLeft: trigger('fadeInLeft', [transition('* => *', useAnimation(fadeInLeft))]),
    fadeOut: trigger('fadeOut', [transition('* => *', useAnimation(fadeOut))]),
    fadeOutUp: trigger('fadeOutUp', [transition('* => *', useAnimation(fadeOutUp))]),
    fadeOutRight: trigger('fadeOutRight', [transition('* => *', useAnimation(fadeOutRight))]),
    slideInDown: trigger('slideInDown', [transition('* => *', useAnimation(slideInDown))]),
    slideInLeft: trigger('slideInLeft', [transition('* => *', useAnimation(slideInLeft))]),
    slideOutUp: trigger('slideOutUp', [transition('* => *', useAnimation(slideOutUp))]),
    slideOutRight: trigger('slideOutRight', [
        transition('* => *', useAnimation(slideOutRight))
    ]),
    flip: trigger('flip', [transition('* => *', useAnimation(flip))]),
    flipInX: trigger('flipInX', [transition('* => *', useAnimation(flipInX))]),
    flipInY: trigger('flipInY', [transition('* => *', useAnimation(flipInY))]),
    flipOutX: trigger('flipOutX', [transition('* => *', useAnimation(flipOutX))]),
    flipOutY: trigger('flipOutY', [transition('* => *', useAnimation(flipOutY))]),
    lightSpeedIn: trigger('lightSpeedIn', [transition('* => *', useAnimation(lightSpeedIn))]),
    lightSpeedOut: trigger('lightSpeedOut', [
        transition('* => *', useAnimation(lightSpeedOut))
    ]),
    rotateIn: trigger('rotateIn', [transition('* => *', useAnimation(rotateIn))]),
    rotateInDownLeft: trigger('rotateInDownLeft', [
        transition('* => *', useAnimation(rotateInDownLeft))
    ]),
    rotateInUpRight: trigger('rotateInUpRight', [
        transition('* => *', useAnimation(rotateInUpRight))
    ]),
    rotateOut: trigger('rotateOut', [transition('* => *', useAnimation(rotateOut))]),
    rotateOutUpLeft: trigger('rotateOutUpLeft', [
        transition('* => *', useAnimation(rotateOutUpLeft))
    ]),
    rotateOutDownRight: trigger('rotateOutDownRight', [
        transition('* => *', useAnimation(rotateOutDownRight))
    ]),
    hinge: trigger('hinge', [transition('* => *', useAnimation(hinge))]),
    jackInTheBox: trigger('jackInTheBox', [transition('* => *', useAnimation(jackInTheBox))]),
    rollIn: trigger('rollIn', [transition('* => *', useAnimation(rollIn))]),
    rollOut: trigger('rollOut', [transition('* => *', useAnimation(rollOut))]),
    zoomIn: trigger('zoomIn', [transition('* => *', useAnimation(zoomIn))]),
    zoomInLeft: trigger('zoomInLeft', [transition('* => *', useAnimation(zoomInLeft))]),
    zoomInDown: trigger('zoomInDown', [transition('* => *', useAnimation(zoomInDown))]),
    zoomOut: trigger('zoomOut', [transition('* => *', useAnimation(zoomOut))]),
    zoomOutUp: trigger('zoomOutUp', [transition('* => *', useAnimation(zoomOutUp))]),
    zoomOutRight: trigger('zoomOutRight', [transition('* => *', useAnimation(zoomOutRight))])
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_API_REQUEST_OPTIONS = {
    notifyFailure: true,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_BUTTON_PROPS = (/** @type {?} */ ({
    iconPos: 'left',
    type: 'button'
}));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_FIELD_PROPS = {
    dataType: DataType.STRING,
    maxLength: 20,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_HTTP_REQUEST_OPTIONS = {
    notifySuccess: false,
    successMessage: ''
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_INIT_HTTP_STATE = { 'label': '加载中...', 'icon': 'fa-cog fa-spin' };

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_NAV_EXTRAS = {
    queryParamsHandling: 'merge',
    // 'preserve'
    preserveFragment: true
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_ROOT_ROUTER_OPTIONS = {
    useHash: true,
    onSameUrlNavigation: 'reload',
    enableTracing: false,
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MockServerApiRequestOptions, EsServerApiRequestOptions, ErServerApiRequestOptions, ANIMATION_NAMES, ANIMATIONS, DEFAULT_API_REQUEST_OPTIONS, DEFAULT_BUTTON_PROPS, DEFAULT_FIELD_PROPS, DEFAULT_HTTP_REQUEST_OPTIONS, DEFAULT_INIT_HTTP_STATE, DEFAULT_NAV_EXTRAS, DEFAULT_ROOT_ROUTER_OPTIONS };

//# sourceMappingURL=er-presets.js.map