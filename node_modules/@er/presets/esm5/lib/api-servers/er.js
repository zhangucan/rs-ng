/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ApiServerType, HttpMethod, HttpRequestPayloadType, Order } from '@er/types';
/**
 * @record
 */
export function ErHttpResponse() { }
if (false) {
    /** @type {?|undefined} */
    ErHttpResponse.prototype.success;
    /** @type {?|undefined} */
    ErHttpResponse.prototype.message;
    /** @type {?|undefined} */
    ErHttpResponse.prototype.error;
    /** @type {?|undefined} */
    ErHttpResponse.prototype.content;
    /** @type {?|undefined} */
    ErHttpResponse.prototype.contents;
}
/** @type {?} */
var paramKeys = {
    sort: '_sort',
    order: '_order',
    from: 'from',
    size: 'size',
    page: '_page',
    to: '_end'
};
/** @type {?} */
var responseResolver = function (response) { return response; };
var ɵ0 = responseResolver;
/** @type {?} */
var updateResponseResolver = function (response) {
    return response && response.hasOwnProperty('id')
        ? { success: true, result: response.id }
        : { failure: true, message: response };
};
var ɵ1 = updateResponseResolver;
/** @type {?} */
var deleteResponseResolver = function (response) {
    return response && Object.keys(response).length === 0
        ? { success: true, result: {} }
        : { failure: true, message: response };
};
var ɵ2 = deleteResponseResolver;
/** @type {?} */
export var ErServerApiRequestOptions = {
    serverType: ApiServerType.ER,
    paramsKeys: paramKeys,
    actions: {
        login: {
            uriResolver: function () { return 'login'; },
            method: HttpMethod.POST,
            notifySuccess: true,
            successMessage: '登录成功',
            notifyFailure: true,
            onResponse: responseResolver,
            onSuccess: (function (resp) {
                /** @type {?} */
                var content = resp.content;
                return content || {};
            })
        },
        logout: {
            uriResolver: function () { return 'logout'; },
            notifySuccess: false,
            onResponse: responseResolver
        },
        changePwd: {
            uriResolver: function () { return 'user/updatePwd'; },
            notifySuccess: false,
            onResponse: responseResolver
        },
        register: {
            uriResolver: function () { return 'user/reg'; },
            method: HttpMethod.POST,
            notifySuccess: true,
            successMessage: '注册成功'
        },
        getById: {
            uriResolver: function (apiEntry, payload) { return apiEntry + "/" + payload; },
            onResponse: function (response) {
                return tslib_1.__assign({ id: response['_id'] }, response['_source']);
            }
        },
        getByIds: {
            method: HttpMethod.GET,
            payloadType: HttpRequestPayloadType.PARAMS,
            payloadResolver: function (apiEntry, payload, options) {
                var _a;
                /** @type {?} */
                var _ids = payload;
                if (_ids.length === 0) {
                    throw new Error('id值为空');
                }
                /** @type {?} */
                var keys = options.paramsKeys;
                return _a = {},
                    _a[keys.ids] = _ids,
                    _a[keys.fields] = payload.fields,
                    _a;
            }
        },
        getByQuery: {
            method: HttpMethod.GET,
            payloadType: HttpRequestPayloadType.PARAMS,
            payloadResolver: function (apiEntry, payload, options) {
                /** @type {?} */
                var qParams = '';
                /** @type {?} */
                var requestPayload = payload || {};
                /** @type {?} */
                var query = requestPayload.query;
                if (query) {
                    if (query instanceof Array) {
                        // (query as Query[]).forEach(q => qParams += `${q.field}=${q.value}&`);
                    }
                    else {
                        /** @type {?} */
                        var q = (/** @type {?} */ (query));
                        // qParams = `${q.field}=${q.value}`;
                    }
                }
                var size = requestPayload.size, page = requestPayload.page;
                if (size || page) {
                    if (!qParams.endsWith('&')) {
                        qParams += '&';
                    }
                    qParams += options.paramsKeys.size + "=" + (size || 10) + "&" + options.paramsKeys.page + "=" + (page || 1);
                }
                /** @type {?} */
                var sort = requestPayload.sort;
                if (sort) {
                    if (!qParams.endsWith('&')) {
                        qParams += '&';
                    }
                    /** @type {?} */
                    var sortFields_1 = '';
                    /** @type {?} */
                    var sortOrders_1 = '';
                    if (typeof sort === 'string') {
                        qParams += options.paramsKeys.sort + "=" + sort + "&" + options.paramsKeys.order + "=" + Order.ASC;
                    }
                    else {
                        Object.keys(sort).map(function (field) {
                            sortFields_1 += field + ",";
                            sortOrders_1 += sort[field] + ",";
                        });
                        qParams += options.paramsKeys.sort + "=" + sortFields_1 + "&" + options.paramsKeys.order + "=" + sortOrders_1;
                    }
                }
                return qParams;
            },
            onResponse: function (response) { return response; }
        },
        create: {
            method: HttpMethod.POST,
            onResponse: updateResponseResolver,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据保存成功'
        },
        updateById: {
            method: HttpMethod.PUT,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: function (apiEntry, payload) { return apiEntry + "/" + payload.id; },
            payloadResolver: function (apiEntry, payload) { return payload.data; },
            onResponse: updateResponseResolver,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据更新成功'
        },
        patchById: {
            method: HttpMethod.PATCH,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: function (apiEntry, payload) { return apiEntry + "/" + payload.id; },
            payloadResolver: function (apiEntry, payload) { return payload; },
            onResponse: updateResponseResolver,
            notifySuccess: true,
            successMessage: '数据更新成功'
        },
        deleteById: {
            method: HttpMethod.DELETE,
            uriResolver: function (apiEntry, payload) { return apiEntry + "/" + payload; },
            onResponse: deleteResponseResolver,
            notifySuccess: true,
            successMessage: '数据删除成功'
        }
    }
};
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvcHJlc2V0cy8iLCJzb3VyY2VzIjpbImxpYi9hcGktc2VydmVycy9lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBK0MsYUFBYSxFQUFFLFVBQVUsRUFBRSxzQkFBc0IsRUFBRSxLQUFLLEVBQVEsTUFBTSxXQUFXLENBQUM7Ozs7QUFFeEksb0NBTUM7OztJQUxDLGlDQUFrQjs7SUFDbEIsaUNBQWlCOztJQUNqQiwrQkFBZTs7SUFDZixpQ0FBYzs7SUFDZCxrQ0FBaUI7OztJQUdiLFNBQVMsR0FBa0I7SUFDL0IsSUFBSSxFQUFFLE9BQU87SUFDYixLQUFLLEVBQUUsUUFBUTtJQUNmLElBQUksRUFBRSxNQUFNO0lBQ1osSUFBSSxFQUFFLE1BQU07SUFDWixJQUFJLEVBQUUsT0FBTztJQUNiLEVBQUUsRUFBRSxNQUFNO0NBQ1g7O0lBRUssZ0JBQWdCLEdBQUcsVUFBQSxRQUFRLElBQUksT0FBQSxRQUFRLEVBQVIsQ0FBUTs7O0lBRXZDLHNCQUFzQixHQUFHLFVBQUEsUUFBUTtJQUNyQyxPQUFBLFFBQVEsSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQztRQUN2QyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsRUFBRSxFQUFDO1FBQ3RDLENBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBQztBQUZ0QyxDQUVzQzs7O0lBRWxDLHNCQUFzQixHQUFHLFVBQUEsUUFBUTtJQUNyQyxPQUFBLFFBQVEsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBQztRQUM3QixDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUUsSUFBSSxF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YUFBYSxFQUFFLElBQUk7WUFDbkIsY0FBYyxFQUFFLFFBQVE7U0FDekI7S0FFRjtDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBcGlQYXJhbXNLZXlzLCBBcGlQYXlsb2FkLCBBcGlSZXF1ZXN0T3B0aW9ucywgQXBpU2VydmVyVHlwZSwgSHR0cE1ldGhvZCwgSHR0cFJlcXVlc3RQYXlsb2FkVHlwZSwgT3JkZXIsIFF1ZXJ5fSBmcm9tICdAZXIvdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVySHR0cFJlc3BvbnNlIHtcbiAgc3VjY2Vzcz86IGJvb2xlYW47XG4gIG1lc3NhZ2U/OiBzdHJpbmc7XG4gIGVycm9yPzogc3RyaW5nO1xuICBjb250ZW50PzogYW55O1xuICBjb250ZW50cz86IGFueVtdO1xufVxuXG5jb25zdCBwYXJhbUtleXM6IEFwaVBhcmFtc0tleXMgPSB7XG4gIHNvcnQ6ICdfc29ydCcsXG4gIG9yZGVyOiAnX29yZGVyJyxcbiAgZnJvbTogJ2Zyb20nLFxuICBzaXplOiAnc2l6ZScsXG4gIHBhZ2U6ICdfcGFnZScsXG4gIHRvOiAnX2VuZCdcbn07XG5cbmNvbnN0IHJlc3BvbnNlUmVzb2x2ZXIgPSByZXNwb25zZSA9PiByZXNwb25zZTtcblxuY29uc3QgdXBkYXRlUmVzcG9uc2VSZXNvbHZlciA9IHJlc3BvbnNlID0+XG4gIHJlc3BvbnNlICYmIHJlc3BvbnNlLmhhc093blByb3BlcnR5KCdpZCcpXG4gICAgPyB7c3VjY2VzczogdHJ1ZSwgcmVzdWx0OiByZXNwb25zZS5pZH1cbiAgICA6IHtmYWlsdXJlOiB0cnVlLCBtZXNzYWdlOiByZXNwb25zZX07XG5cbmNvbnN0IGRlbGV0ZVJlc3BvbnNlUmVzb2x2ZXIgPSByZXNwb25zZSA9PlxuICByZXNwb25zZSAmJiBPYmplY3Qua2V5cyhyZXNwb25zZSkubGVuZ3RoID09PSAwXG4gICAgPyB7c3VjY2VzczogdHJ1ZSwgcmVzdWx0OiB7fX1cbiAgICA6IHtmYWlsdXJlOiB0cnVlLCBtZXNzYWdlOiByZXNwb25zZX07XG5cbmV4cG9ydCBjb25zdCBFclNlcnZlckFwaVJlcXVlc3RPcHRpb25zOiBBcGlSZXF1ZXN0T3B0aW9ucyA9IHtcbiAgc2VydmVyVHlwZTogQXBpU2VydmVyVHlwZS5FUixcbiAgcGFyYW1zS2V5czogcGFyYW1LZXlzLFxuICBhY3Rpb25zOiB7XG5cbiAgICBsb2dpbjoge1xuICAgICAgdXJpUmVzb2x2ZXI6ICgpID0+ICdsb2dpbicsXG4gICAgICBtZXRob2Q6IEh0dHBNZXRob2QuUE9TVCxcbiAgICAgIG5vdGlmeVN1Y2Nlc3M6IHRydWUsXG4gICAgICBzdWNjZXNzTWVzc2FnZTogJ+eZu+W9leaIkOWKnycsXG4gICAgICBub3RpZnlGYWlsdXJlOiB0cnVlLFxuICAgICAgb25SZXNwb25zZTogcmVzcG9uc2VSZXNvbHZlcixcbiAgICAgIG9uU3VjY2VzczogKChyZXNwKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSByZXNwLmNvbnRlbnQ7XG4gICAgICAgIHJldHVybiBjb250ZW50IHx8IHt9O1xuICAgICAgfSlcbiAgICB9LFxuXG4gICAgbG9nb3V0OiB7XG4gICAgICB1cmlSZXNvbHZlcjogKCkgPT4gJ2xvZ291dCcsXG4gICAgICBub3RpZnlTdWNjZXNzOiBmYWxzZSxcbiAgICAgIG9uUmVzcG9uc2U6IHJlc3BvbnNlUmVzb2x2ZXJcbiAgICB9LFxuXG4gICAgY2hhbmdlUHdkOiB7XG4gICAgICB1cmlSZXNvbHZlcjogKCkgPT4gJ3VzZXIvdXBkYXRlUHdkJyxcbiAgICAgIG5vdGlmeVN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgb25SZXNwb25zZTogcmVzcG9uc2VSZXNvbHZlclxuICAgIH0sXG5cbiAgICByZWdpc3Rlcjoge1xuICAgICAgdXJpUmVzb2x2ZXI6ICgpID0+ICd1c2VyL3JlZycsXG4gICAgICBtZXRob2Q6IEh0dHBNZXRob2QuUE9TVCxcbiAgICAgIG5vdGlmeVN1Y2Nlc3M6IHRydWUsXG4gICAgICBzdWNjZXNzTWVzc2FnZTogJ+azqOWGjOaIkOWKnydcbiAgICB9LFxuXG4gICAgZ2V0QnlJZDoge1xuICAgICAgdXJpUmVzb2x2ZXI6IChhcGlFbnRyeTogc3RyaW5nLCBwYXlsb2FkKSA9PiBgJHthcGlFbnRyeX0vJHtwYXlsb2FkfWAsXG4gICAgICBvblJlc3BvbnNlOiAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpZDogcmVzcG9uc2VbJ19pZCddLFxuICAgICAgICAgIC4uLnJlc3BvbnNlWydfc291cmNlJ11cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0QnlJZHM6IHtcbiAgICAgIG1ldGhvZDogSHR0cE1ldGhvZC5HRVQsXG4gICAgICBwYXlsb2FkVHlwZTogSHR0cFJlcXVlc3RQYXlsb2FkVHlwZS5QQVJBTVMsXG4gICAgICBwYXlsb2FkUmVzb2x2ZXI6IChhcGlFbnRyeTogc3RyaW5nLCBwYXlsb2FkOiBBcGlQYXlsb2FkLCBvcHRpb25zOiBBcGlSZXF1ZXN0T3B0aW9ucykgPT4ge1xuICAgICAgICBjb25zdCBfaWRzID0gcGF5bG9hZDsgLy8gdG9kbzogdG9TdHJpbmdcbiAgICAgICAgaWYgKF9pZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpZOWAvOS4uuepuicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleXMgPSBvcHRpb25zLnBhcmFtc0tleXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgW2tleXMuaWRzXTogX2lkcyxcbiAgICAgICAgICBba2V5cy5maWVsZHNdOiBwYXlsb2FkLmZpZWxkc1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRCeVF1ZXJ5OiB7XG4gICAgICBtZXRob2Q6IEh0dHBNZXRob2QuR0VULFxuICAgICAgcGF5bG9hZFR5cGU6IEh0dHBSZXF1ZXN0UGF5bG9hZFR5cGUuUEFSQU1TLFxuICAgICAgcGF5bG9hZFJlc29sdmVyOiAoYXBpRW50cnk6IHN0cmluZywgcGF5bG9hZDogQXBpUGF5bG9hZCwgb3B0aW9uczogQXBpUmVxdWVzdE9wdGlvbnMpID0+IHtcbiAgICAgICAgbGV0IHFQYXJhbXMgPSAnJztcbiAgICAgICAgY29uc3QgcmVxdWVzdFBheWxvYWQgPSBwYXlsb2FkIHx8IHt9O1xuICAgICAgICBjb25zdCBxdWVyeSA9IHJlcXVlc3RQYXlsb2FkLnF1ZXJ5O1xuICAgICAgICBpZiAocXVlcnkpIHtcbiAgICAgICAgICBpZiAocXVlcnkgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgLy8gKHF1ZXJ5IGFzIFF1ZXJ5W10pLmZvckVhY2gocSA9PiBxUGFyYW1zICs9IGAke3EuZmllbGR9PSR7cS52YWx1ZX0mYCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHEgPSA8UXVlcnk+cXVlcnk7XG4gICAgICAgICAgICAvLyBxUGFyYW1zID0gYCR7cS5maWVsZH09JHtxLnZhbHVlfWA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHtzaXplLCBwYWdlfSA9IHJlcXVlc3RQYXlsb2FkO1xuICAgICAgICBpZiAoc2l6ZSB8fCBwYWdlKSB7XG4gICAgICAgICAgaWYgKCFxUGFyYW1zLmVuZHNXaXRoKCcmJykpIHtcbiAgICAgICAgICAgIHFQYXJhbXMgKz0gJyYnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxUGFyYW1zICs9IGAke29wdGlvbnMucGFyYW1zS2V5cy5zaXplfT0ke3NpemUgfHwgMTB9JiR7b3B0aW9ucy5wYXJhbXNLZXlzLnBhZ2V9PSR7cGFnZSB8fCAxfWA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc29ydCA9IHJlcXVlc3RQYXlsb2FkLnNvcnQ7XG4gICAgICAgIGlmIChzb3J0KSB7XG4gICAgICAgICAgaWYgKCFxUGFyYW1zLmVuZHNXaXRoKCcmJykpIHtcbiAgICAgICAgICAgIHFQYXJhbXMgKz0gJyYnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgc29ydEZpZWxkcyA9ICcnO1xuICAgICAgICAgIGxldCBzb3J0T3JkZXJzID0gJyc7XG4gICAgICAgICAgaWYgKHR5cGVvZiBzb3J0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcVBhcmFtcyArPSBgJHtvcHRpb25zLnBhcmFtc0tleXMuc29ydH09JHtzb3J0fSYke29wdGlvbnMucGFyYW1zS2V5cy5vcmRlcn09JHtPcmRlci5BU0N9YDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoc29ydCkubWFwKGZpZWxkID0+IHtcbiAgICAgICAgICAgICAgc29ydEZpZWxkcyArPSBgJHtmaWVsZH0sYDtcbiAgICAgICAgICAgICAgc29ydE9yZGVycyArPSBgJHtzb3J0W2ZpZWxkXX0sYDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcVBhcmFtcyArPSBgJHtvcHRpb25zLnBhcmFtc0tleXMuc29ydH09JHtzb3J0RmllbGRzfSYke29wdGlvbnMucGFyYW1zS2V5cy5vcmRlcn09JHtzb3J0T3JkZXJzfWA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBxUGFyYW1zO1xuICAgICAgfSxcbiAgICAgIG9uUmVzcG9uc2U6IHJlc3BvbnNlID0+IHJlc3BvbnNlXG4gICAgfSxcblxuICAgIGNyZWF0ZToge1xuICAgICAgbWV0aG9kOiBIdHRwTWV0aG9kLlBPU1QsXG4gICAgICBvblJlc3BvbnNlOiB1cGRhdGVSZXNwb25zZVJlc29sdmVyLFxuICAgICAgbm90aWZ5U3VjY2VzczogZmFsc2UsXG4gICAgICBhbGVydFN1Y2Nlc3M6IHRydWUsXG4gICAgICBzdWNjZXNzTWVzc2FnZTogJ+aVsOaNruS/neWtmOaIkOWKnydcbiAgICB9LFxuXG4gICAgdXBkYXRlQnlJZDoge1xuICAgICAgbWV0aG9kOiBIdHRwTWV0aG9kLlBVVCxcbiAgICAgIHBheWxvYWRUeXBlOiBIdHRwUmVxdWVzdFBheWxvYWRUeXBlLkJPRFksXG4gICAgICB1cmlSZXNvbHZlcjogKGFwaUVudHJ5OiBzdHJpbmcsIHBheWxvYWQ6IEFwaVBheWxvYWQpID0+IGAke2FwaUVudHJ5fS8ke3BheWxvYWQuaWR9YCxcbiAgICAgIHBheWxvYWRSZXNvbHZlcjogKGFwaUVudHJ5OiBzdHJpbmcsIHBheWxvYWQ6IEFwaVBheWxvYWQpID0+IHBheWxvYWQuZGF0YSxcbiAgICAgIG9uUmVzcG9uc2U6IHVwZGF0ZVJlc3BvbnNlUmVzb2x2ZXIsXG4gICAgICBub3RpZnlTdWNjZXNzOiBmYWxzZSxcbiAgICAgIGFsZXJ0U3VjY2VzczogdHJ1ZSxcbiAgICAgIHN1Y2Nlc3NNZXNzYWdlOiAn5pWw5o2u5pu05paw5oiQ5YqfJ1xuICAgIH0sXG5cbiAgICBwYXRjaEJ5SWQ6IHtcbiAgICAgIG1ldGhvZDogSHR0cE1ldGhvZC5QQVRDSCxcbiAgICAgIHBheWxvYWRUeXBlOiBIdHRwUmVxdWVzdFBheWxvYWRUeXBlLkJPRFksXG4gICAgICB1cmlSZXNvbHZlcjogKGFwaUVudHJ5OiBzdHJpbmcsIHBheWxvYWQ6IEFwaVBheWxvYWQpID0+IGAke2FwaUVudHJ5fS8ke3BheWxvYWQuaWR9YCxcbiAgICAgIHBheWxvYWRSZXNvbHZlcjogKGFwaUVudHJ5OiBzdHJpbmcsIHBheWxvYWQ6IEFwaVBheWxvYWQpID0+IHBheWxvYWQsXG4gICAgICBvblJlc3BvbnNlOiB1cGRhdGVSZXNwb25zZVJlc29sdmVyLFxuICAgICAgbm90aWZ5U3VjY2VzczogdHJ1ZSxcbiAgICAgIHN1Y2Nlc3NNZXNzYWdlOiAn5pWw5o2u5pu05paw5oiQ5YqfJ1xuICAgIH0sXG5cbiAgICBkZWxldGVCeUlkOiB7XG4gICAgICBtZXRob2Q6IEh0dHBNZXRob2QuREVMRVRFLFxuICAgICAgdXJpUmVzb2x2ZXI6IChhcGlFbnRyeTogc3RyaW5nLCBwYXlsb2FkOiBBcGlQYXlsb2FkKSA9PiBgJHthcGlFbnRyeX0vJHtwYXlsb2FkfWAsXG4gICAgICBvblJlc3BvbnNlOiBkZWxldGVSZXNwb25zZVJlc29sdmVyLFxuICAgICAgbm90aWZ5U3VjY2VzczogdHJ1ZSxcbiAgICAgIHN1Y2Nlc3NNZXNzYWdlOiAn5pWw5o2u5Yig6Zmk5oiQ5YqfJ1xuICAgIH1cblxuICB9XG59O1xuIl19