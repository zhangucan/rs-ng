/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ApiServerType, HttpMethod, HttpRequestPayloadType } from '@er/types';
import { DateUtils, EsUtils } from '@er/utils';
import * as esb from 'elastic-builder';
/**
 * @record
 */
export function EsHttpResponse() { }
if (false) {
    /** @type {?|undefined} */
    EsHttpResponse.prototype._index;
    /** @type {?|undefined} */
    EsHttpResponse.prototype._type;
    /* Skipping unhandled member: [key: string]: any;*/
}
/** @type {?} */
var paramKeys = {
    sort: 'sort',
    from: 'from',
    size: 'size',
    order: 'order',
    page: 'page',
    to: 'to',
    q: 'q',
    query: 'query',
    filter: 'filter',
    globalFiler: 'globalFiler',
    fields: '_source'
};
/** @type {?} */
var responseResolver = function (response) {
    if (response) {
        if (response instanceof Array) {
            if (response.length === 1) {
                response = response[0];
            }
        }
        return { success: true, content: response };
    }
    else {
        return { success: false };
    }
};
var ɵ0 = responseResolver;
/** @type {?} */
var updateResponseResolver = function (response) {
    if (response && response.hasOwnProperty('_id')) {
        /** @type {?} */
        var id = response['_id'];
        delete response['_id'];
        return { success: true, content: tslib_1.__assign({ id: id }, response) };
    }
    else {
        return { failure: true, message: response };
    }
};
var ɵ1 = updateResponseResolver;
/** @type {?} */
var deleteResponseResolver = function (response) {
    return response && response.result === 'deleted'
        ? { success: true, content: response }
        : { failure: true, message: response };
};
var ɵ2 = deleteResponseResolver;
/** @type {?} */
var parseResponse = function (resp) {
    /** @type {?} */
    var response = {};
    response['success'] = resp.hasOwnProperty('hits') || resp.hasOwnProperty('aggregations');
    if (response['success']) {
        response['content'] = {
            total: resp['hits'].total,
            items: resp['hits'].hits.map(function (hit) {
                return tslib_1.__assign({ id: hit._id }, hit['_source']);
            })
        };
        if (resp.aggregations) {
            response['content']['aggs'] = resp.aggregations;
        }
        if (resp.highlight) {
            response['content']['highlight'] = resp.highlight;
        }
    }
    else {
        response['error'] = resp.error && resp.error.reason;
    }
    return response;
};
var ɵ3 = parseResponse;
/** @type {?} */
var getApiEntryWithType = function (apiEntry) {
    if (apiEntry.indexOf('/') === -1) {
        apiEntry = apiEntry + "/type";
    }
    return apiEntry;
};
var ɵ4 = getApiEntryWithType;
/** @type {?} */
var META_DATA_FILTER_PATH = 'filter_path=hits.hits.*,aggregations.*';
/** @type {?} */
export var EsServerApiRequestOptions = {
    serverType: ApiServerType.ES,
    paramsKeys: paramKeys,
    actions: {
        login: {
            uriResolver: 'user',
            method: HttpMethod.GET,
            onResponse: responseResolver,
            notifySuccess: true,
            successMessage: '登录成功'
        },
        logout: {
            uriResolver: 'logout',
            notifySuccess: false,
            onResponse: responseResolver,
            successMessage: '退出登录成功'
        },
        register: {
            uriResolver: 'user',
            method: HttpMethod.POST,
            notifySuccess: true,
            successMessage: '注册成功'
        },
        getById: {
            method: HttpMethod.POST,
            uriResolver: function (apiEntry) { return apiEntry + "/_search"; },
            payloadResolver: function (apiEntry, payload) {
                /** @type {?} */
                var query = esb.requestBodySearch().query(esb.boolQuery().must(esb.termQuery('_id', payload['id'])));
                if (payload.fields) {
                    query.source(payload.fields);
                }
                return (/** @type {?} */ (query.toJSON()));
            },
            onResponse: function (resp) {
                return {
                    success: true,
                    content: parseResponse(resp)['content']['items'][0]
                };
            }
        },
        getByIds: {
            method: HttpMethod.POST,
            uriResolver: function (apiEntry) { return apiEntry + "/_search"; },
            payloadResolver: function (apiEntry, payload) {
                /** @type {?} */
                var query = esb.requestBodySearch().query(esb.boolQuery().must(esb.termsQuery('_id', payload['id'])));
                if (payload.fields) {
                    query.source(payload.fields);
                }
                return (/** @type {?} */ (query.toJSON()));
            },
            onResponse: function (resp) {
                return {
                    success: true,
                    content: parseResponse(resp)['content']['items']
                };
            }
        },
        getByQuery: {
            method: HttpMethod.POST,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: function (apiEntry) {
                if (apiEntry && apiEntry.toLowerCase().indexOf('_msearch') === -1) {
                    return apiEntry + "/_search";
                }
                else {
                    return apiEntry;
                }
            },
            payloadResolver: function (apiEntry, payload, options) {
                /** @type {?} */
                var body = EsUtils.resolveRequestBody(payload, options);
                if (!body['sort']) {
                    // body['sort'] = {'timestamp': Order.DESC};
                }
                return body;
            },
            onResponse: function (resp) {
                if (resp.responses) {
                    return {
                        success: true,
                        content: {
                            items: resp.responses.map(function (r) { return parseResponse(r); })
                        }
                    };
                }
                else {
                    return parseResponse(resp);
                }
            }
        },
        create: {
            method: HttpMethod.POST,
            uriResolver: function (apiEntry) { return getApiEntryWithType(apiEntry) + "?refresh"; },
            payloadResolver: function (apiEntry, payload) {
                delete payload.id;
                delete payload['_index'];
                delete payload['_type'];
                payload['_createdTime'] = DateUtils.getFormattedDateTime();
                return payload;
            },
            onResponse: updateResponseResolver,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据保存成功'
        },
        updateById: {
            method: HttpMethod.POST,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: function (apiEntry, payload) { return getApiEntryWithType(apiEntry) + "/" + payload.id + "/_update?refresh"; },
            payloadResolver: function (apiEntry, payload) {
                return {
                    script: {
                        source: payload.script,
                        lang: 'painless',
                        params: payload.params
                    }
                };
            },
            onResponse: updateResponseResolver,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据更新成功'
        },
        patchById: {
            method: HttpMethod.POST,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: function (apiEntry, payload) { return getApiEntryWithType(apiEntry) + "/" + payload.id + "/_update?refresh"; },
            payloadResolver: function (apiEntry, payload, options) {
                delete payload.id;
                delete payload['_index'];
                delete payload['_type'];
                payload['_modifiedTime'] = DateUtils.getFormattedDateTime();
                return {
                    doc: payload
                };
            },
            onResponse: updateResponseResolver,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据更新成功'
        },
        deleteById: {
            method: HttpMethod.DELETE,
            uriResolver: function (apiEntry, payload) { return getApiEntryWithType(apiEntry) + "/" + payload + "?refresh"; },
            payloadResolver: function () { return undefined; },
            onResponse: deleteResponseResolver,
            notifySuccess: false,
            alertSuccess: false,
            successMessage: '数据删除成功'
        },
        deleteByQuery: {
            method: HttpMethod.POST,
            uriResolver: function (apiEntry) { return apiEntry + "/_delete_by_query?refresh"; },
            payloadResolver: function (apiEntry, payload, options) { return EsUtils.resolveRequestBody(payload, options); },
            onResponse: deleteResponseResolver,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '批量数据删除成功'
        },
        batch: {
            method: HttpMethod.POST,
            uriResolver: function () { return "_bulk?refresh"; },
            onResponse: function (resp) {
                return tslib_1.__assign({}, resp, { success: !resp.hasOwnProperty('errors') });
            },
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '批量操作成功'
        }
    }
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
//# sourceMappingURL=data:application/json;base64,