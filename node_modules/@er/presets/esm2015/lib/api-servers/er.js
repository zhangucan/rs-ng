/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ApiServerType, HttpMethod, HttpRequestPayloadType, Order } from '@er/types';
/**
 * @record
 */
export function ErHttpResponse() { }
if (false) {
    /** @type {?|undefined} */
    ErHttpResponse.prototype.success;
    /** @type {?|undefined} */
    ErHttpResponse.prototype.message;
    /** @type {?|undefined} */
    ErHttpResponse.prototype.error;
    /** @type {?|undefined} */
    ErHttpResponse.prototype.content;
    /** @type {?|undefined} */
    ErHttpResponse.prototype.contents;
}
/** @type {?} */
const paramKeys = {
    sort: '_sort',
    order: '_order',
    from: 'from',
    size: 'size',
    page: '_page',
    to: '_end'
};
/** @type {?} */
const responseResolver = response => response;
const ɵ0 = responseResolver;
/** @type {?} */
const updateResponseResolver = response => response && response.hasOwnProperty('id')
    ? { success: true, result: response.id }
    : { failure: true, message: response };
const ɵ1 = updateResponseResolver;
/** @type {?} */
const deleteResponseResolver = response => response && Object.keys(response).length === 0
    ? { success: true, result: {} }
    : { failure: true, message: response };
const ɵ2 = deleteResponseResolver;
/** @type {?} */
export const ErServerApiRequestOptions = {
    serverType: ApiServerType.ER,
    paramsKeys: paramKeys,
    actions: {
        login: {
            uriResolver: () => 'login',
            method: HttpMethod.POST,
            notifySuccess: true,
            successMessage: '登录成功',
            notifyFailure: true,
            onResponse: responseResolver,
            onSuccess: ((resp) => {
                /** @type {?} */
                const content = resp.content;
                return content || {};
            })
        },
        logout: {
            uriResolver: () => 'logout',
            notifySuccess: false,
            onResponse: responseResolver
        },
        changePwd: {
            uriResolver: () => 'user/updatePwd',
            notifySuccess: false,
            onResponse: responseResolver
        },
        register: {
            uriResolver: () => 'user/reg',
            method: HttpMethod.POST,
            notifySuccess: true,
            successMessage: '注册成功'
        },
        getById: {
            uriResolver: (apiEntry, payload) => `${apiEntry}/${payload}`,
            onResponse: (response) => {
                return Object.assign({ id: response['_id'] }, response['_source']);
            }
        },
        getByIds: {
            method: HttpMethod.GET,
            payloadType: HttpRequestPayloadType.PARAMS,
            payloadResolver: (apiEntry, payload, options) => {
                /** @type {?} */
                const _ids = payload;
                if (_ids.length === 0) {
                    throw new Error('id值为空');
                }
                /** @type {?} */
                const keys = options.paramsKeys;
                return {
                    [keys.ids]: _ids,
                    [keys.fields]: payload.fields
                };
            }
        },
        getByQuery: {
            method: HttpMethod.GET,
            payloadType: HttpRequestPayloadType.PARAMS,
            payloadResolver: (apiEntry, payload, options) => {
                /** @type {?} */
                let qParams = '';
                /** @type {?} */
                const requestPayload = payload || {};
                /** @type {?} */
                const query = requestPayload.query;
                if (query) {
                    if (query instanceof Array) {
                        // (query as Query[]).forEach(q => qParams += `${q.field}=${q.value}&`);
                    }
                    else {
                        /** @type {?} */
                        const q = (/** @type {?} */ (query));
                        // qParams = `${q.field}=${q.value}`;
                    }
                }
                const { size, page } = requestPayload;
                if (size || page) {
                    if (!qParams.endsWith('&')) {
                        qParams += '&';
                    }
                    qParams += `${options.paramsKeys.size}=${size || 10}&${options.paramsKeys.page}=${page || 1}`;
                }
                /** @type {?} */
                const sort = requestPayload.sort;
                if (sort) {
                    if (!qParams.endsWith('&')) {
                        qParams += '&';
                    }
                    /** @type {?} */
                    let sortFields = '';
                    /** @type {?} */
                    let sortOrders = '';
                    if (typeof sort === 'string') {
                        qParams += `${options.paramsKeys.sort}=${sort}&${options.paramsKeys.order}=${Order.ASC}`;
                    }
                    else {
                        Object.keys(sort).map(field => {
                            sortFields += `${field},`;
                            sortOrders += `${sort[field]},`;
                        });
                        qParams += `${options.paramsKeys.sort}=${sortFields}&${options.paramsKeys.order}=${sortOrders}`;
                    }
                }
                return qParams;
            },
            onResponse: response => response
        },
        create: {
            method: HttpMethod.POST,
            onResponse: updateResponseResolver,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据保存成功'
        },
        updateById: {
            method: HttpMethod.PUT,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: (apiEntry, payload) => `${apiEntry}/${payload.id}`,
            payloadResolver: (apiEntry, payload) => payload.data,
            onResponse: updateResponseResolver,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据更新成功'
        },
        patchById: {
            method: HttpMethod.PATCH,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: (apiEntry, payload) => `${apiEntry}/${payload.id}`,
            payloadResolver: (apiEntry, payload) => payload,
            onResponse: updateResponseResolver,
            notifySuccess: true,
            successMessage: '数据更新成功'
        },
        deleteById: {
            method: HttpMethod.DELETE,
            uriResolver: (apiEntry, payload) => `${apiEntry}/${payload}`,
            onResponse: deleteResponseResolver,
            notifySuccess: true,
            successMessage: '数据删除成功'
        }
    }
};
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,