/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ApiServerType, HttpMethod, HttpRequestPayloadType } from '@er/types';
import { DateUtils, EsUtils } from '@er/utils';
import * as esb from 'elastic-builder';
/**
 * @record
 */
export function EsHttpResponse() { }
if (false) {
    /** @type {?|undefined} */
    EsHttpResponse.prototype._index;
    /** @type {?|undefined} */
    EsHttpResponse.prototype._type;
    /* Skipping unhandled member: [key: string]: any;*/
}
/** @type {?} */
const paramKeys = {
    sort: 'sort',
    from: 'from',
    size: 'size',
    order: 'order',
    page: 'page',
    to: 'to',
    q: 'q',
    query: 'query',
    filter: 'filter',
    globalFiler: 'globalFiler',
    fields: '_source'
};
/** @type {?} */
const responseResolver = response => {
    if (response) {
        if (response instanceof Array) {
            if (response.length === 1) {
                response = response[0];
            }
        }
        return { success: true, content: response };
    }
    else {
        return { success: false };
    }
};
const ɵ0 = responseResolver;
/** @type {?} */
const updateResponseResolver = response => {
    if (response && response.hasOwnProperty('_id')) {
        /** @type {?} */
        const id = response['_id'];
        delete response['_id'];
        return { success: true, content: Object.assign({ id }, response) };
    }
    else {
        return { failure: true, message: response };
    }
};
const ɵ1 = updateResponseResolver;
/** @type {?} */
const deleteResponseResolver = response => response && response.result === 'deleted'
    ? { success: true, content: response }
    : { failure: true, message: response };
const ɵ2 = deleteResponseResolver;
/** @type {?} */
const parseResponse = (resp) => {
    /** @type {?} */
    const response = {};
    response['success'] = resp.hasOwnProperty('hits') || resp.hasOwnProperty('aggregations');
    if (response['success']) {
        response['content'] = {
            total: resp['hits'].total,
            items: resp['hits'].hits.map(hit => {
                return Object.assign({ id: hit._id }, hit['_source']);
            })
        };
        if (resp.aggregations) {
            response['content']['aggs'] = resp.aggregations;
        }
        if (resp.highlight) {
            response['content']['highlight'] = resp.highlight;
        }
    }
    else {
        response['error'] = resp.error && resp.error.reason;
    }
    return response;
};
const ɵ3 = parseResponse;
/** @type {?} */
const getApiEntryWithType = (apiEntry) => {
    if (apiEntry.indexOf('/') === -1) {
        apiEntry = `${apiEntry}/type`;
    }
    return apiEntry;
};
const ɵ4 = getApiEntryWithType;
/** @type {?} */
const META_DATA_FILTER_PATH = 'filter_path=hits.hits.*,aggregations.*';
/** @type {?} */
export const EsServerApiRequestOptions = {
    serverType: ApiServerType.ES,
    paramsKeys: paramKeys,
    actions: {
        login: {
            uriResolver: 'user',
            method: HttpMethod.GET,
            onResponse: responseResolver,
            notifySuccess: true,
            successMessage: '登录成功'
        },
        logout: {
            uriResolver: 'logout',
            notifySuccess: false,
            onResponse: responseResolver,
            successMessage: '退出登录成功'
        },
        register: {
            uriResolver: 'user',
            method: HttpMethod.POST,
            notifySuccess: true,
            successMessage: '注册成功'
        },
        getById: {
            method: HttpMethod.POST,
            uriResolver: (apiEntry) => `${apiEntry}/_search`,
            payloadResolver: (apiEntry, payload) => {
                /** @type {?} */
                const query = esb.requestBodySearch().query(esb.boolQuery().must(esb.termQuery('_id', payload['id'])));
                if (payload.fields) {
                    query.source(payload.fields);
                }
                return (/** @type {?} */ (query.toJSON()));
            },
            onResponse: (resp) => {
                return {
                    success: true,
                    content: parseResponse(resp)['content']['items'][0]
                };
            }
        },
        getByIds: {
            method: HttpMethod.POST,
            uriResolver: (apiEntry) => `${apiEntry}/_search`,
            payloadResolver: (apiEntry, payload) => {
                /** @type {?} */
                const query = esb.requestBodySearch().query(esb.boolQuery().must(esb.termsQuery('_id', payload['id'])));
                if (payload.fields) {
                    query.source(payload.fields);
                }
                return (/** @type {?} */ (query.toJSON()));
            },
            onResponse: (resp) => {
                return {
                    success: true,
                    content: parseResponse(resp)['content']['items']
                };
            }
        },
        getByQuery: {
            method: HttpMethod.POST,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: (apiEntry) => {
                if (apiEntry && apiEntry.toLowerCase().indexOf('_msearch') === -1) {
                    return `${apiEntry}/_search`;
                }
                else {
                    return apiEntry;
                }
            },
            payloadResolver: (apiEntry, payload, options) => {
                /** @type {?} */
                const body = EsUtils.resolveRequestBody(payload, options);
                if (!body['sort']) {
                    // body['sort'] = {'timestamp': Order.DESC};
                }
                return body;
            },
            onResponse: resp => {
                if (resp.responses) {
                    return {
                        success: true,
                        content: {
                            items: resp.responses.map(r => parseResponse(r))
                        }
                    };
                }
                else {
                    return parseResponse(resp);
                }
            }
        },
        create: {
            method: HttpMethod.POST,
            uriResolver: apiEntry => `${getApiEntryWithType(apiEntry)}?refresh`,
            payloadResolver: (apiEntry, payload) => {
                delete payload.id;
                delete payload['_index'];
                delete payload['_type'];
                payload['_createdTime'] = DateUtils.getFormattedDateTime();
                return payload;
            },
            onResponse: updateResponseResolver,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据保存成功'
        },
        updateById: {
            method: HttpMethod.POST,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: (apiEntry, payload) => `${getApiEntryWithType(apiEntry)}/${payload.id}/_update?refresh`,
            payloadResolver: (apiEntry, payload) => {
                return {
                    script: {
                        source: payload.script,
                        lang: 'painless',
                        params: payload.params
                    }
                };
            },
            onResponse: updateResponseResolver,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据更新成功'
        },
        patchById: {
            method: HttpMethod.POST,
            payloadType: HttpRequestPayloadType.BODY,
            uriResolver: (apiEntry, payload) => `${getApiEntryWithType(apiEntry)}/${payload.id}/_update?refresh`,
            payloadResolver: (apiEntry, payload, options) => {
                delete payload.id;
                delete payload['_index'];
                delete payload['_type'];
                payload['_modifiedTime'] = DateUtils.getFormattedDateTime();
                return {
                    doc: payload
                };
            },
            onResponse: updateResponseResolver,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '数据更新成功'
        },
        deleteById: {
            method: HttpMethod.DELETE,
            uriResolver: (apiEntry, payload) => `${getApiEntryWithType(apiEntry)}/${payload}?refresh`,
            payloadResolver: () => undefined,
            onResponse: deleteResponseResolver,
            notifySuccess: false,
            alertSuccess: false,
            successMessage: '数据删除成功'
        },
        deleteByQuery: {
            method: HttpMethod.POST,
            uriResolver: (apiEntry) => `${apiEntry}/_delete_by_query?refresh`,
            payloadResolver: (apiEntry, payload, options) => EsUtils.resolveRequestBody(payload, options),
            onResponse: deleteResponseResolver,
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '批量数据删除成功'
        },
        batch: {
            method: HttpMethod.POST,
            uriResolver: () => `_bulk?refresh`,
            onResponse: (resp) => {
                return Object.assign({}, resp, { success: !resp.hasOwnProperty('errors') });
            },
            notifySuccess: false,
            alertSuccess: true,
            successMessage: '批量操作成功'
        }
    }
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvcHJlc2V0cy8iLCJzb3VyY2VzIjpbImxpYi9hcGktc2VydmVycy9lcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUErQyxhQUFhLEVBQUUsVUFBVSxFQUFFLHNCQUFzQixFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQzFILE9BQU8sRUFBQyxTQUFTLEVBQUUsT0FBTyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQzdDLE9BQU8sS0FBSyxHQUFHLE1BQU0saUJBQWlCLENBQUM7Ozs7QUFFdkMsb0NBS0M7OztJQUpDLGdDQUFnQjs7SUFDaEIsK0JBQWU7Ozs7TUFLWCxTQUFTLEdBQWtCO0lBQy9CLElBQUksRUFBRSxNQUFNO0lBQ1osSUFBSSxFQUFFLE1BQU07SUFDWixJQUFJLEVBQUUsTUFBTTtJQUNaLEtBQUssRUFBRSxPQUFPO0lBQ2QsSUFBSSxFQUFFLE1BQU07SUFDWixFQUFFLEVBQUUsSUFBSTtJQUNSLENBQUMsRUFBRSxHQUFHO0lBQ04sS0FBSyxFQUFFLE9BQU87SUFDZCxNQUFNLEVBQUUsUUFBUTtJQUNoQixXQUFXLEVBQUUsYUFBYTtJQUMxQixNQUFNLEVBQUUsU0FBUztDQUNsQjs7TUFFSyxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsRUFBRTtJQUNsQyxJQUFJLFFBQVEsRUFBRTtRQUNaLElBQUksUUFBUSxZQUFZLEtBQUssRUFBRTtZQUM3QixJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUN6QixRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3hCO1NBQ0Y7UUFDRCxPQUFPLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFDLENBQUM7S0FDM0M7U0FBTTtRQUNMLE9BQU8sRUFBQyxPQUFPLEVBQUUsS0FBSyxFQUFDLENBQUM7S0FDekI7QUFDSCxDQUFDOzs7TUFFSyxzQkFBc0IsR0FBRyxRQUFRLENBQUMs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cmFtc0tleXMsIEFwaVBheWxvYWQsIEFwaVJlcXVlc3RPcHRpb25zLCBBcGlTZXJ2ZXJUeXBlLCBIdHRwTWV0aG9kLCBIdHRwUmVxdWVzdFBheWxvYWRUeXBlfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtEYXRlVXRpbHMsIEVzVXRpbHN9IGZyb20gJ0Blci91dGlscyc7XG5pbXBvcnQgKiBhcyBlc2IgZnJvbSAnZWxhc3RpYy1idWlsZGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBFc0h0dHBSZXNwb25zZSB7XG4gIF9pbmRleD86IHN0cmluZztcbiAgX3R5cGU/OiBzdHJpbmc7XG5cbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5jb25zdCBwYXJhbUtleXM6IEFwaVBhcmFtc0tleXMgPSB7XG4gIHNvcnQ6ICdzb3J0JyxcbiAgZnJvbTogJ2Zyb20nLFxuICBzaXplOiAnc2l6ZScsXG4gIG9yZGVyOiAnb3JkZXInLFxuICBwYWdlOiAncGFnZScsXG4gIHRvOiAndG8nLFxuICBxOiAncScsXG4gIHF1ZXJ5OiAncXVlcnknLFxuICBmaWx0ZXI6ICdmaWx0ZXInLFxuICBnbG9iYWxGaWxlcjogJ2dsb2JhbEZpbGVyJyxcbiAgZmllbGRzOiAnX3NvdXJjZSdcbn07XG5cbmNvbnN0IHJlc3BvbnNlUmVzb2x2ZXIgPSByZXNwb25zZSA9PiB7XG4gIGlmIChyZXNwb25zZSkge1xuICAgIGlmIChyZXNwb25zZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBpZiAocmVzcG9uc2UubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJlc3BvbnNlID0gcmVzcG9uc2VbMF07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7c3VjY2VzczogdHJ1ZSwgY29udGVudDogcmVzcG9uc2V9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7c3VjY2VzczogZmFsc2V9O1xuICB9XG59O1xuXG5jb25zdCB1cGRhdGVSZXNwb25zZVJlc29sdmVyID0gcmVzcG9uc2UgPT4ge1xuICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UuaGFzT3duUHJvcGVydHkoJ19pZCcpKSB7XG4gICAgY29uc3QgaWQgPSByZXNwb25zZVsnX2lkJ107XG4gICAgZGVsZXRlIHJlc3BvbnNlWydfaWQnXTtcbiAgICByZXR1cm4ge3N1Y2Nlc3M6IHRydWUsIGNvbnRlbnQ6IHtpZCwgLi4ucmVzcG9uc2V9fTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge2ZhaWx1cmU6IHRydWUsIG1lc3NhZ2U6IHJlc3BvbnNlfTtcbiAgfVxufTtcblxuY29uc3QgZGVsZXRlUmVzcG9uc2VSZXNvbHZlciA9IHJlc3BvbnNlID0+XG4gIHJlc3BvbnNlICYmIHJlc3BvbnNlLnJlc3VsdCA9PT0gJ2RlbGV0ZWQnXG4gICAgPyB7c3VjY2VzczogdHJ1ZSwgY29udGVudDogcmVzcG9uc2V9XG4gICAgOiB7ZmFpbHVyZTogdHJ1ZSwgbWVzc2FnZTogcmVzcG9uc2V9O1xuXG5jb25zdCBwYXJzZVJlc3BvbnNlID0gKHJlc3ApID0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSB7fTtcbiAgcmVzcG9uc2VbJ3N1Y2Nlc3MnXSA9IHJlc3AuaGFzT3duUHJvcGVydHkoJ2hpdHMnKSB8fCByZXNwLmhhc093blByb3BlcnR5KCdhZ2dyZWdhdGlvbnMnKTtcbiAgaWYgKHJlc3BvbnNlWydzdWNjZXNzJ10pIHtcbiAgICByZXNwb25zZVsnY29udGVudCddID0ge1xuICAgICAgdG90YWw6IHJlc3BbJ2hpdHMnXS50b3RhbCxcbiAgICAgIGl0ZW1zOiByZXNwWydoaXRzJ10uaGl0cy5tYXAoaGl0ID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpZDogaGl0Ll9pZCxcbiAgICAgICAgICAvLyBfaW5kZXg6IGhpdC5faW5kZXgsXG4gICAgICAgICAgLy8gX3R5cGU6IGhpdC5fdHlwZSxcbiAgICAgICAgICAuLi5oaXRbJ19zb3VyY2UnXVxuICAgICAgICB9O1xuICAgICAgfSlcbiAgICB9O1xuICAgIGlmIChyZXNwLmFnZ3JlZ2F0aW9ucykge1xuICAgICAgcmVzcG9uc2VbJ2NvbnRlbnQnXVsnYWdncyddID0gcmVzcC5hZ2dyZWdhdGlvbnM7XG4gICAgfVxuICAgIGlmIChyZXNwLmhpZ2hsaWdodCkge1xuICAgICAgcmVzcG9uc2VbJ2NvbnRlbnQnXVsnaGlnaGxpZ2h0J10gPSByZXNwLmhpZ2hsaWdodDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVzcG9uc2VbJ2Vycm9yJ10gPSByZXNwLmVycm9yICYmIHJlc3AuZXJyb3IucmVhc29uO1xuICB9XG4gIHJldHVybiByZXNwb25zZTtcbn07XG5cbmNvbnN0IGdldEFwaUVudHJ5V2l0aFR5cGUgPSAoYXBpRW50cnkpID0+IHtcbiAgaWYgKGFwaUVudHJ5LmluZGV4T2YoJy8nKSA9PT0gLTEpIHtcbiAgICBhcGlFbnRyeSA9IGAke2FwaUVudHJ5fS90eXBlYDtcbiAgfVxuICByZXR1cm4gYXBpRW50cnk7XG59O1xuXG5jb25zdCBNRVRBX0RBVEFfRklMVEVSX1BBVEggPSAnZmlsdGVyX3BhdGg9aGl0cy5oaXRzLiosYWdncmVnYXRpb25zLionO1xuXG5leHBvcnQgY29uc3QgRXNTZXJ2ZXJBcGlSZXF1ZXN0T3B0aW9uczogQXBpUmVxdWVzdE9wdGlvbnMgPSB7XG5cbiAgc2VydmVyVHlwZTogQXBpU2VydmVyVHlwZS5FUyxcblxuICBwYXJhbXNLZXlzOiBwYXJhbUtleXMsXG5cbiAgYWN0aW9uczoge1xuXG4gICAgbG9naW46IHtcbiAgICAgIHVyaVJlc29sdmVyOiAndXNlcicsXG4gICAgICBtZXRob2Q6IEh0dHBNZXRob2QuR0VULFxuICAgICAgb25SZXNwb25zZTogcmVzcG9uc2VSZXNvbHZlcixcbiAgICAgIG5vdGlmeVN1Y2Nlc3M6IHRydWUsXG4gICAgICBzdWNjZXNzTWVzc2FnZTogJ+eZu+W9leaIkOWKnydcbiAgICB9LFxuXG4gICAgbG9nb3V0OiB7XG4gICAgICB1cmlSZXNvbHZlcjogJ2xvZ291dCcsXG4gICAgICBub3RpZnlTdWNjZXNzOiBmYWxzZSxcbiAgICAgIG9uUmVzcG9uc2U6IHJlc3BvbnNlUmVzb2x2ZXIsXG4gICAgICBzdWNjZXNzTWVzc2FnZTogJ+mAgOWHuueZu+W9leaIkOWKnydcbiAgICB9LFxuXG4gICAgcmVnaXN0ZXI6IHtcbiAgICAgIHVyaVJlc29sdmVyOiAndXNlcicsXG4gICAgICBtZXRob2Q6IEh0dHBNZXRob2QuUE9TVCxcbiAgICAgIG5vdGlmeVN1Y2Nlc3M6IHRydWUsXG4gICAgICBzdWNjZXNzTWVzc2FnZTogJ+azqOWGjOaIkOWKnydcbiAgICB9LFxuXG4gICAgZ2V0QnlJZDoge1xuICAgICAgbWV0aG9kOiBIdHRwTWV0aG9kLlBPU1QsXG4gICAgICB1cmlSZXNvbHZlcjogKGFwaUVudHJ5OiBzdHJpbmcpID0+IGAke2FwaUVudHJ5fS9fc2VhcmNoYCxcbiAgICAgIHBheWxvYWRSZXNvbHZlcjogKGFwaUVudHJ5LCBwYXlsb2FkOiBBcGlQYXlsb2FkKSA9PiB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gZXNiLnJlcXVlc3RCb2R5U2VhcmNoKCkucXVlcnkoXG4gICAgICAgICAgZXNiLmJvb2xRdWVyeSgpLm11c3QoZXNiLnRlcm1RdWVyeSgnX2lkJywgcGF5bG9hZFsnaWQnXSkpXG4gICAgICAgICk7XG4gICAgICAgIGlmIChwYXlsb2FkLmZpZWxkcykge1xuICAgICAgICAgIHF1ZXJ5LnNvdXJjZShwYXlsb2FkLmZpZWxkcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHF1ZXJ5LnRvSlNPTigpIGFzIHt9O1xuICAgICAgfSxcbiAgICAgIG9uUmVzcG9uc2U6IChyZXNwKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICBjb250ZW50OiBwYXJzZVJlc3BvbnNlKHJlc3ApWydjb250ZW50J11bJ2l0ZW1zJ11bMF1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0QnlJZHM6IHtcbiAgICAgIG1ldGhvZDogSHR0cE1ldGhvZC5QT1NULFxuICAgICAgdXJpUmVzb2x2ZXI6IChhcGlFbnRyeTogc3RyaW5nKSA9PiBgJHthcGlFbnRyeX0vX3NlYXJjaGAsXG4gICAgICBwYXlsb2FkUmVzb2x2ZXI6IChhcGlFbnRyeSwgcGF5bG9hZDogQXBpUGF5bG9hZCkgPT4ge1xuICAgICAgICBjb25zdCBxdWVyeSA9IGVzYi5yZXF1ZXN0Qm9keVNlYXJjaCgpLnF1ZXJ5KFxuICAgICAgICAgIGVzYi5ib29sUXVlcnkoKS5tdXN0KGVzYi50ZXJtc1F1ZXJ5KCdfaWQnLCBwYXlsb2FkWydpZCddKSlcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHBheWxvYWQuZmllbGRzKSB7XG4gICAgICAgICAgcXVlcnkuc291cmNlKHBheWxvYWQuZmllbGRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcXVlcnkudG9KU09OKCkgYXMge307XG4gICAgICB9LFxuICAgICAgb25SZXNwb25zZTogKHJlc3ApID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgIGNvbnRlbnQ6IHBhcnNlUmVzcG9uc2UocmVzcClbJ2NvbnRlbnQnXVsnaXRlbXMnXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRCeVF1ZXJ5OiB7XG4gICAgICBtZXRob2Q6IEh0dHBNZXRob2QuUE9TVCxcbiAgICAgIHBheWxvYWRUeXBlOiBIdHRwUmVxdWVzdFBheWxvYWRUeXBlLkJPRFksXG4gICAgICB1cmlSZXNvbHZlcjogKGFwaUVudHJ5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKGFwaUVudHJ5ICYmIGFwaUVudHJ5LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignX21zZWFyY2gnKSA9PT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gYCR7YXBpRW50cnl9L19zZWFyY2hgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBhcGlFbnRyeTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHBheWxvYWRSZXNvbHZlcjogKGFwaUVudHJ5LCBwYXlsb2FkLCBvcHRpb25zPykgPT4ge1xuICAgICAgICBjb25zdCBib2R5ID0gRXNVdGlscy5yZXNvbHZlUmVxdWVzdEJvZHkocGF5bG9hZCwgb3B0aW9ucyk7XG4gICAgICAgIGlmICghYm9keVsnc29ydCddKSB7XG4gICAgICAgICAgLy8gYm9keVsnc29ydCddID0geyd0aW1lc3RhbXAnOiBPcmRlci5ERVNDfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYm9keTtcbiAgICAgIH0sXG4gICAgICBvblJlc3BvbnNlOiByZXNwID0+IHtcbiAgICAgICAgaWYgKHJlc3AucmVzcG9uc2VzKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICAgIGl0ZW1zOiByZXNwLnJlc3BvbnNlcy5tYXAociA9PiBwYXJzZVJlc3BvbnNlKHIpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlUmVzcG9uc2UocmVzcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgY3JlYXRlOiB7XG4gICAgICBtZXRob2Q6IEh0dHBNZXRob2QuUE9TVCxcbiAgICAgIHVyaVJlc29sdmVyOiBhcGlFbnRyeSA9PiBgJHtnZXRBcGlFbnRyeVdpdGhUeXBlKGFwaUVudHJ5KX0/cmVmcmVzaGAsXG4gICAgICBwYXlsb2FkUmVzb2x2ZXI6IChhcGlFbnRyeTogc3RyaW5nLCBwYXlsb2FkOiBBcGlQYXlsb2FkKSA9PiB7XG4gICAgICAgIGRlbGV0ZSBwYXlsb2FkLmlkO1xuICAgICAgICBkZWxldGUgcGF5bG9hZFsnX2luZGV4J107XG4gICAgICAgIGRlbGV0ZSBwYXlsb2FkWydfdHlwZSddO1xuICAgICAgICBwYXlsb2FkWydfY3JlYXRlZFRpbWUnXSA9IERhdGVVdGlscy5nZXRGb3JtYXR0ZWREYXRlVGltZSgpO1xuICAgICAgICByZXR1cm4gcGF5bG9hZDtcbiAgICAgIH0sXG4gICAgICBvblJlc3BvbnNlOiB1cGRhdGVSZXNwb25zZVJlc29sdmVyLFxuICAgICAgbm90aWZ5U3VjY2VzczogZmFsc2UsXG4gICAgICBhbGVydFN1Y2Nlc3M6IHRydWUsXG4gICAgICBzdWNjZXNzTWVzc2FnZTogJ+aVsOaNruS/neWtmOaIkOWKnydcbiAgICB9LFxuXG4gICAgdXBkYXRlQnlJZDoge1xuICAgICAgbWV0aG9kOiBIdHRwTWV0aG9kLlBPU1QsXG4gICAgICBwYXlsb2FkVHlwZTogSHR0cFJlcXVlc3RQYXlsb2FkVHlwZS5CT0RZLFxuICAgICAgdXJpUmVzb2x2ZXI6IChhcGlFbnRyeTogc3RyaW5nLCBwYXlsb2FkOiBBcGlQYXlsb2FkKSA9PiBgJHtnZXRBcGlFbnRyeVdpdGhUeXBlKGFwaUVudHJ5KX0vJHtwYXlsb2FkLmlkfS9fdXBkYXRlP3JlZnJlc2hgLFxuICAgICAgcGF5bG9hZFJlc29sdmVyOiAoYXBpRW50cnk6IHN0cmluZywgcGF5bG9hZDogQXBpUGF5bG9hZCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNjcmlwdDoge1xuICAgICAgICAgICAgc291cmNlOiBwYXlsb2FkLnNjcmlwdCxcbiAgICAgICAgICAgIGxhbmc6ICdwYWlubGVzcycsXG4gICAgICAgICAgICBwYXJhbXM6IHBheWxvYWQucGFyYW1zXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIG9uUmVzcG9uc2U6IHVwZGF0ZVJlc3BvbnNlUmVzb2x2ZXIsXG4gICAgICBub3RpZnlTdWNjZXNzOiBmYWxzZSxcbiAgICAgIGFsZXJ0U3VjY2VzczogdHJ1ZSxcbiAgICAgIHN1Y2Nlc3NNZXNzYWdlOiAn5pWw5o2u5pu05paw5oiQ5YqfJ1xuICAgIH0sXG5cbiAgICBwYXRjaEJ5SWQ6IHtcbiAgICAgIG1ldGhvZDogSHR0cE1ldGhvZC5QT1NULFxuICAgICAgcGF5bG9hZFR5cGU6IEh0dHBSZXF1ZXN0UGF5bG9hZFR5cGUuQk9EWSxcbiAgICAgIHVyaVJlc29sdmVyOiAoYXBpRW50cnk6IHN0cmluZywgcGF5bG9hZDogQXBpUGF5bG9hZCkgPT4gYCR7Z2V0QXBpRW50cnlXaXRoVHlwZShhcGlFbnRyeSl9LyR7cGF5bG9hZC5pZH0vX3VwZGF0ZT9yZWZyZXNoYCxcbiAgICAgIHBheWxvYWRSZXNvbHZlcjogKGFwaUVudHJ5OiBzdHJpbmcsIHBheWxvYWQ6IEFwaVBheWxvYWQsIG9wdGlvbnM/KSA9PiB7XG4gICAgICAgIGRlbGV0ZSBwYXlsb2FkLmlkO1xuICAgICAgICBkZWxldGUgcGF5bG9hZFsnX2luZGV4J107XG4gICAgICAgIGRlbGV0ZSBwYXlsb2FkWydfdHlwZSddO1xuICAgICAgICBwYXlsb2FkWydfbW9kaWZpZWRUaW1lJ10gPSBEYXRlVXRpbHMuZ2V0Rm9ybWF0dGVkRGF0ZVRpbWUoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkb2M6IHBheWxvYWRcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBvblJlc3BvbnNlOiB1cGRhdGVSZXNwb25zZVJlc29sdmVyLFxuICAgICAgbm90aWZ5U3VjY2VzczogZmFsc2UsXG4gICAgICBhbGVydFN1Y2Nlc3M6IHRydWUsXG4gICAgICBzdWNjZXNzTWVzc2FnZTogJ+aVsOaNruabtOaWsOaIkOWKnydcbiAgICB9LFxuXG4gICAgZGVsZXRlQnlJZDoge1xuICAgICAgbWV0aG9kOiBIdHRwTWV0aG9kLkRFTEVURSxcbiAgICAgIHVyaVJlc29sdmVyOiAoYXBpRW50cnk6IHN0cmluZywgcGF5bG9hZDogQXBpUGF5bG9hZCkgPT4gYCR7Z2V0QXBpRW50cnlXaXRoVHlwZShhcGlFbnRyeSl9LyR7cGF5bG9hZH0/cmVmcmVzaGAsXG4gICAgICBwYXlsb2FkUmVzb2x2ZXI6ICgpID0+IHVuZGVmaW5lZCxcbiAgICAgIG9uUmVzcG9uc2U6IGRlbGV0ZVJlc3BvbnNlUmVzb2x2ZXIsXG4gICAgICBub3RpZnlTdWNjZXNzOiBmYWxzZSxcbiAgICAgIGFsZXJ0U3VjY2VzczogZmFsc2UsXG4gICAgICBzdWNjZXNzTWVzc2FnZTogJ+aVsOaNruWIoOmZpOaIkOWKnydcbiAgICB9LFxuXG4gICAgZGVsZXRlQnlRdWVyeToge1xuICAgICAgbWV0aG9kOiBIdHRwTWV0aG9kLlBPU1QsXG4gICAgICB1cmlSZXNvbHZlcjogKGFwaUVudHJ5OiBzdHJpbmcpID0+IGAke2FwaUVudHJ5fS9fZGVsZXRlX2J5X3F1ZXJ5P3JlZnJlc2hgLFxuICAgICAgcGF5bG9hZFJlc29sdmVyOiAoYXBpRW50cnksIHBheWxvYWQsIG9wdGlvbnM/KSA9PiBFc1V0aWxzLnJlc29sdmVSZXF1ZXN0Qm9keShwYXlsb2FkLCBvcHRpb25zKSxcbiAgICAgIG9uUmVzcG9uc2U6IGRlbGV0ZVJlc3BvbnNlUmVzb2x2ZXIsXG4gICAgICBub3RpZnlTdWNjZXNzOiBmYWxzZSxcbiAgICAgIGFsZXJ0U3VjY2VzczogdHJ1ZSxcbiAgICAgIHN1Y2Nlc3NNZXNzYWdlOiAn5om56YeP5pWw5o2u5Yig6Zmk5oiQ5YqfJ1xuICAgIH0sXG5cbiAgICBiYXRjaDoge1xuICAgICAgbWV0aG9kOiBIdHRwTWV0aG9kLlBPU1QsXG4gICAgICB1cmlSZXNvbHZlcjogKCkgPT4gYF9idWxrP3JlZnJlc2hgLFxuICAgICAgb25SZXNwb25zZTogKHJlc3ApID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5yZXNwLFxuICAgICAgICAgIHN1Y2Nlc3M6ICFyZXNwLmhhc093blByb3BlcnR5KCdlcnJvcnMnKVxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIG5vdGlmeVN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgYWxlcnRTdWNjZXNzOiB0cnVlLFxuICAgICAgc3VjY2Vzc01lc3NhZ2U6ICfmibnph4/mk43kvZzmiJDlip8nXG4gICAgfVxuICB9XG59O1xuIl19