(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@er/utils'), require('elastic-builder'), require('@angular/animations'), require('ng-animate'), require('@er/types')) :
    typeof define === 'function' && define.amd ? define('@er/presets', ['exports', '@er/utils', 'elastic-builder', '@angular/animations', 'ng-animate', '@er/types'], factory) :
    (factory((global.er = global.er || {}, global.er.presets = {}),global.utils,global.esb,global.ng.animations,global.ngAnimate,global.types));
}(this, (function (exports,utils,esb,animations,ngAnimate,types) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MockServerApiRequestOptions = {};

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var paramKeys$1 = {
        sort: 'sort',
        from: 'from',
        size: 'size',
        order: 'order',
        page: 'page',
        to: 'to',
        q: 'q',
        query: 'query',
        filter: 'filter',
        globalFiler: 'globalFiler',
        fields: '_source'
    };
    /** @type {?} */
    var responseResolver = function (response) {
        if (response) {
            if (response instanceof Array) {
                if (response.length === 1) {
                    response = response[0];
                }
            }
            return { success: true, content: response };
        }
        else {
            return { success: false };
        }
    };
    /** @type {?} */
    var updateResponseResolver$1 = function (response) {
        if (response && response.hasOwnProperty('_id')) {
            /** @type {?} */
            var id = response['_id'];
            delete response['_id'];
            return { success: true, content: __assign({ id: id }, response) };
        }
        else {
            return { failure: true, message: response };
        }
    };
    /** @type {?} */
    var deleteResponseResolver$1 = function (response) {
        return response && response.result === 'deleted'
            ? { success: true, content: response }
            : { failure: true, message: response };
    };
    /** @type {?} */
    var parseResponse = function (resp) {
        /** @type {?} */
        var response = {};
        response['success'] = resp.hasOwnProperty('hits') || resp.hasOwnProperty('aggregations');
        if (response['success']) {
            response['content'] = {
                total: resp['hits'].total,
                items: resp['hits'].hits.map(function (hit) {
                    return __assign({ id: hit._id }, hit['_source']);
                })
            };
            if (resp.aggregations) {
                response['content']['aggs'] = resp.aggregations;
            }
            if (resp.highlight) {
                response['content']['highlight'] = resp.highlight;
            }
        }
        else {
            response['error'] = resp.error && resp.error.reason;
        }
        return response;
    };
    /** @type {?} */
    var getApiEntryWithType = function (apiEntry) {
        if (apiEntry.indexOf('/') === -1) {
            apiEntry = apiEntry + "/type";
        }
        return apiEntry;
    };
    /** @type {?} */
    var EsServerApiRequestOptions = {
        serverType: types.ApiServerType.ES,
        paramsKeys: paramKeys$1,
        actions: {
            login: {
                uriResolver: 'user',
                method: types.HttpMethod.GET,
                onResponse: responseResolver,
                notifySuccess: true,
                successMessage: '登录成功'
            },
            logout: {
                uriResolver: 'logout',
                notifySuccess: false,
                onResponse: responseResolver,
                successMessage: '退出登录成功'
            },
            register: {
                uriResolver: 'user',
                method: types.HttpMethod.POST,
                notifySuccess: true,
                successMessage: '注册成功'
            },
            getById: {
                method: types.HttpMethod.POST,
                uriResolver: function (apiEntry) { return apiEntry + "/_search"; },
                payloadResolver: function (apiEntry, payload) {
                    /** @type {?} */
                    var query = esb.requestBodySearch().query(esb.boolQuery().must(esb.termQuery('_id', payload['id'])));
                    if (payload.fields) {
                        query.source(payload.fields);
                    }
                    return ( /** @type {?} */(query.toJSON()));
                },
                onResponse: function (resp) {
                    return {
                        success: true,
                        content: parseResponse(resp)['content']['items'][0]
                    };
                }
            },
            getByIds: {
                method: types.HttpMethod.POST,
                uriResolver: function (apiEntry) { return apiEntry + "/_search"; },
                payloadResolver: function (apiEntry, payload) {
                    /** @type {?} */
                    var query = esb.requestBodySearch().query(esb.boolQuery().must(esb.termsQuery('_id', payload['id'])));
                    if (payload.fields) {
                        query.source(payload.fields);
                    }
                    return ( /** @type {?} */(query.toJSON()));
                },
                onResponse: function (resp) {
                    return {
                        success: true,
                        content: parseResponse(resp)['content']['items']
                    };
                }
            },
            getByQuery: {
                method: types.HttpMethod.POST,
                payloadType: types.HttpRequestPayloadType.BODY,
                uriResolver: function (apiEntry) {
                    if (apiEntry && apiEntry.toLowerCase().indexOf('_msearch') === -1) {
                        return apiEntry + "/_search";
                    }
                    else {
                        return apiEntry;
                    }
                },
                payloadResolver: function (apiEntry, payload, options) {
                    /** @type {?} */
                    var body = utils.EsUtils.resolveRequestBody(payload, options);
                    if (!body['sort']) ;
                    return body;
                },
                onResponse: function (resp) {
                    if (resp.responses) {
                        return {
                            success: true,
                            content: {
                                items: resp.responses.map(function (r) { return parseResponse(r); })
                            }
                        };
                    }
                    else {
                        return parseResponse(resp);
                    }
                }
            },
            create: {
                method: types.HttpMethod.POST,
                uriResolver: function (apiEntry) { return getApiEntryWithType(apiEntry) + "?refresh"; },
                payloadResolver: function (apiEntry, payload) {
                    delete payload.id;
                    delete payload['_index'];
                    delete payload['_type'];
                    payload['_createdTime'] = utils.DateUtils.getFormattedDateTime();
                    return payload;
                },
                onResponse: updateResponseResolver$1,
                notifySuccess: false,
                alertSuccess: true,
                successMessage: '数据保存成功'
            },
            updateById: {
                method: types.HttpMethod.POST,
                payloadType: types.HttpRequestPayloadType.BODY,
                uriResolver: function (apiEntry, payload) { return getApiEntryWithType(apiEntry) + "/" + payload.id + "/_update?refresh"; },
                payloadResolver: function (apiEntry, payload) {
                    return {
                        script: {
                            source: payload.script,
                            lang: 'painless',
                            params: payload.params
                        }
                    };
                },
                onResponse: updateResponseResolver$1,
                notifySuccess: false,
                alertSuccess: true,
                successMessage: '数据更新成功'
            },
            patchById: {
                method: types.HttpMethod.POST,
                payloadType: types.HttpRequestPayloadType.BODY,
                uriResolver: function (apiEntry, payload) { return getApiEntryWithType(apiEntry) + "/" + payload.id + "/_update?refresh"; },
                payloadResolver: function (apiEntry, payload, options) {
                    delete payload.id;
                    delete payload['_index'];
                    delete payload['_type'];
                    payload['_modifiedTime'] = utils.DateUtils.getFormattedDateTime();
                    return {
                        doc: payload
                    };
                },
                onResponse: updateResponseResolver$1,
                notifySuccess: false,
                alertSuccess: true,
                successMessage: '数据更新成功'
            },
            deleteById: {
                method: types.HttpMethod.DELETE,
                uriResolver: function (apiEntry, payload) { return getApiEntryWithType(apiEntry) + "/" + payload + "?refresh"; },
                payloadResolver: function () { return undefined; },
                onResponse: deleteResponseResolver$1,
                notifySuccess: false,
                alertSuccess: false,
                successMessage: '数据删除成功'
            },
            deleteByQuery: {
                method: types.HttpMethod.POST,
                uriResolver: function (apiEntry) { return apiEntry + "/_delete_by_query?refresh"; },
                payloadResolver: function (apiEntry, payload, options) { return utils.EsUtils.resolveRequestBody(payload, options); },
                onResponse: deleteResponseResolver$1,
                notifySuccess: false,
                alertSuccess: true,
                successMessage: '批量数据删除成功'
            },
            batch: {
                method: types.HttpMethod.POST,
                uriResolver: function () { return "_bulk?refresh"; },
                onResponse: function (resp) {
                    return __assign({}, resp, { success: !resp.hasOwnProperty('errors') });
                },
                notifySuccess: false,
                alertSuccess: true,
                successMessage: '批量操作成功'
            }
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var paramKeys$2 = {
        sort: '_sort',
        order: '_order',
        from: 'from',
        size: 'size',
        page: '_page',
        to: '_end'
    };
    /** @type {?} */
    var responseResolver$1 = function (response) { return response; };
    /** @type {?} */
    var updateResponseResolver$2 = function (response) {
        return response && response.hasOwnProperty('id')
            ? { success: true, result: response.id }
            : { failure: true, message: response };
    };
    /** @type {?} */
    var deleteResponseResolver$2 = function (response) {
        return response && Object.keys(response).length === 0
            ? { success: true, result: {} }
            : { failure: true, message: response };
    };
    /** @type {?} */
    var ErServerApiRequestOptions = {
        serverType: types.ApiServerType.ER,
        paramsKeys: paramKeys$2,
        actions: {
            login: {
                uriResolver: function () { return 'login'; },
                method: types.HttpMethod.POST,
                notifySuccess: true,
                successMessage: '登录成功',
                notifyFailure: true,
                onResponse: responseResolver$1,
                onSuccess: (function (resp) {
                    /** @type {?} */
                    var content = resp.content;
                    return content || {};
                })
            },
            logout: {
                uriResolver: function () { return 'logout'; },
                notifySuccess: false,
                onResponse: responseResolver$1
            },
            changePwd: {
                uriResolver: function () { return 'user/updatePwd'; },
                notifySuccess: false,
                onResponse: responseResolver$1
            },
            register: {
                uriResolver: function () { return 'user/reg'; },
                method: types.HttpMethod.POST,
                notifySuccess: true,
                successMessage: '注册成功'
            },
            getById: {
                uriResolver: function (apiEntry, payload) { return apiEntry + "/" + payload; },
                onResponse: function (response) {
                    return __assign({ id: response['_id'] }, response['_source']);
                }
            },
            getByIds: {
                method: types.HttpMethod.GET,
                payloadType: types.HttpRequestPayloadType.PARAMS,
                payloadResolver: function (apiEntry, payload, options) {
                    var _a;
                    /** @type {?} */
                    var _ids = payload;
                    if (_ids.length === 0) {
                        throw new Error('id值为空');
                    }
                    /** @type {?} */
                    var keys = options.paramsKeys;
                    return _a = {},
                        _a[keys.ids] = _ids,
                        _a[keys.fields] = payload.fields,
                        _a;
                }
            },
            getByQuery: {
                method: types.HttpMethod.GET,
                payloadType: types.HttpRequestPayloadType.PARAMS,
                payloadResolver: function (apiEntry, payload, options) {
                    /** @type {?} */
                    var qParams = '';
                    /** @type {?} */
                    var requestPayload = payload || {};
                    /** @type {?} */
                    var query = requestPayload.query;
                    var size = requestPayload.size, page = requestPayload.page;
                    if (size || page) {
                        if (!qParams.endsWith('&')) {
                            qParams += '&';
                        }
                        qParams += options.paramsKeys.size + "=" + (size || 10) + "&" + options.paramsKeys.page + "=" + (page || 1);
                    }
                    /** @type {?} */
                    var sort = requestPayload.sort;
                    if (sort) {
                        if (!qParams.endsWith('&')) {
                            qParams += '&';
                        }
                        /** @type {?} */
                        var sortFields_1 = '';
                        /** @type {?} */
                        var sortOrders_1 = '';
                        if (typeof sort === 'string') {
                            qParams += options.paramsKeys.sort + "=" + sort + "&" + options.paramsKeys.order + "=" + types.Order.ASC;
                        }
                        else {
                            Object.keys(sort).map(function (field) {
                                sortFields_1 += field + ",";
                                sortOrders_1 += sort[field] + ",";
                            });
                            qParams += options.paramsKeys.sort + "=" + sortFields_1 + "&" + options.paramsKeys.order + "=" + sortOrders_1;
                        }
                    }
                    return qParams;
                },
                onResponse: function (response) { return response; }
            },
            create: {
                method: types.HttpMethod.POST,
                onResponse: updateResponseResolver$2,
                notifySuccess: false,
                alertSuccess: true,
                successMessage: '数据保存成功'
            },
            updateById: {
                method: types.HttpMethod.PUT,
                payloadType: types.HttpRequestPayloadType.BODY,
                uriResolver: function (apiEntry, payload) { return apiEntry + "/" + payload.id; },
                payloadResolver: function (apiEntry, payload) { return payload.data; },
                onResponse: updateResponseResolver$2,
                notifySuccess: false,
                alertSuccess: true,
                successMessage: '数据更新成功'
            },
            patchById: {
                method: types.HttpMethod.PATCH,
                payloadType: types.HttpRequestPayloadType.BODY,
                uriResolver: function (apiEntry, payload) { return apiEntry + "/" + payload.id; },
                payloadResolver: function (apiEntry, payload) { return payload; },
                onResponse: updateResponseResolver$2,
                notifySuccess: true,
                successMessage: '数据更新成功'
            },
            deleteById: {
                method: types.HttpMethod.DELETE,
                uriResolver: function (apiEntry, payload) { return apiEntry + "/" + payload; },
                onResponse: deleteResponseResolver$2,
                notifySuccess: true,
                successMessage: '数据删除成功'
            }
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var ANIMATION_NAMES = {
        bounce: ngAnimate.bounce,
        flash: ngAnimate.flash,
        pulse: ngAnimate.pulse,
        rubberBand: ngAnimate.rubberBand,
        shake: ngAnimate.shake,
        swing: ngAnimate.swing,
        tada: ngAnimate.tada,
        wobble: ngAnimate.wobble,
        jello: ngAnimate.jello,
        bounceInDown: ngAnimate.bounceInDown,
        bounceInLeft: ngAnimate.bounceInLeft,
        bounceInRight: ngAnimate.bounceInRight,
        bounceInUp: ngAnimate.bounceInUp,
        bounceOutDown: ngAnimate.bounceOutDown,
        bounceOutLeft: ngAnimate.bounceOutLeft,
        bounceOutRight: ngAnimate.bounceOutRight,
        bounceOutUp: ngAnimate.bounceOutUp,
        fadeIn: ngAnimate.fadeIn,
        fadeInDown: ngAnimate.fadeInDown,
        fadeInLeft: ngAnimate.fadeInLeft,
        fadeInRight: ngAnimate.fadeInRight,
        fadeInUp: ngAnimate.fadeInUp,
        fadeOut: ngAnimate.fadeOut,
        fadeOutDown: ngAnimate.fadeOutDown,
        fadeOutLeft: ngAnimate.fadeOutLeft,
        fadeOutRight: ngAnimate.fadeOutRight,
        fadeOutUp: ngAnimate.fadeOutUp,
        slideInDown: ngAnimate.slideInDown,
        slideInLeft: ngAnimate.slideInLeft,
        slideInRight: ngAnimate.slideInRight,
        slideInUp: ngAnimate.slideInUp,
        slideOutDown: ngAnimate.slideOutDown,
        slideOutLeft: ngAnimate.slideOutLeft,
        slideOutRight: ngAnimate.slideOutRight,
        slideOutUp: ngAnimate.slideOutUp,
        flip: ngAnimate.flip,
        flipInX: ngAnimate.flipInX,
        flipInY: ngAnimate.flipInY,
        flipOutX: ngAnimate.flipOutX,
        flipOutY: ngAnimate.flipOutY,
        lightSpeedIn: ngAnimate.lightSpeedIn,
        lightSpeedOut: ngAnimate.lightSpeedOut,
        rotateIn: ngAnimate.rotateIn,
        rotateInDownLeft: ngAnimate.rotateInDownLeft,
        rotateInDownRight: ngAnimate.rotateInDownRight,
        rotateInUpLeft: ngAnimate.rotateInUpLeft,
        rotateInUpRight: ngAnimate.rotateInUpRight,
        rotateOut: ngAnimate.rotateOut,
        rotateOutDownLeft: ngAnimate.rotateOutDownLeft,
        rotateOutDownRight: ngAnimate.rotateOutDownRight,
        rotateOutUpLeft: ngAnimate.rotateOutUpLeft,
        rotateOutUpRight: ngAnimate.rotateOutUpRight,
        jackInTheBox: ngAnimate.jackInTheBox,
        hinge: ngAnimate.hinge,
        rollIn: ngAnimate.rollIn,
        rollOut: ngAnimate.rollOut,
        zoomIn: ngAnimate.zoomIn,
        zoomOut: ngAnimate.zoomOut,
        zoomInDown: ngAnimate.zoomInDown,
        zoomInLeft: ngAnimate.zoomInLeft,
        zoomInRight: ngAnimate.zoomInRight,
        zoomInUp: ngAnimate.zoomInUp,
        zoomOutDown: ngAnimate.zoomOutDown,
        zoomOutLeft: ngAnimate.zoomOutLeft,
        zoomOutRight: ngAnimate.zoomOutRight,
        zoomOutUp: ngAnimate.zoomOutUp
    };
    /** @type {?} */
    var ANIMATIONS = {
        bounce: animations.trigger('bounce', [animations.transition('* => *', animations.useAnimation(ngAnimate.bounce))]),
        flash: animations.trigger('flash', [animations.transition('* => *', animations.useAnimation(ngAnimate.flash))]),
        pulse: animations.trigger('pulse', [animations.transition('* => *', animations.useAnimation(ngAnimate.pulse))]),
        rubberBand: animations.trigger('rubberBand', [animations.transition('* => *', animations.useAnimation(ngAnimate.rubberBand))]),
        shake: animations.trigger('shake', [animations.transition('* => *', animations.useAnimation(ngAnimate.shake))]),
        swing: animations.trigger('swing', [animations.transition('* => *', animations.useAnimation(ngAnimate.swing))]),
        tada: animations.trigger('tada', [animations.transition('* => *', animations.useAnimation(ngAnimate.tada))]),
        wobble: animations.trigger('wobble', [animations.transition('* => *', animations.useAnimation(ngAnimate.wobble))]),
        jello: animations.trigger('jello', [animations.transition('* => *', animations.useAnimation(ngAnimate.jello))]),
        bounceIn: animations.trigger('bounceIn', [animations.transition('* => *', animations.useAnimation(ngAnimate.bounceIn))]),
        bounceInDown: animations.trigger('bounceInDown', [animations.transition('* => *', animations.useAnimation(ngAnimate.bounceInDown))]),
        bounceInLeft: animations.trigger('bounceInLeft', [animations.transition('* => *', animations.useAnimation(ngAnimate.bounceInLeft))]),
        bounceOut: animations.trigger('bounceOut', [animations.transition('* => *', animations.useAnimation(ngAnimate.bounceOut))]),
        bounceOutRight: animations.trigger('bounceOutRight', [
            animations.transition('* => *', animations.useAnimation(ngAnimate.bounceOutRight))
        ]),
        bounceOutUp: animations.trigger('bounceOutUp', [animations.transition('* => *', animations.useAnimation(ngAnimate.bounceOutUp))]),
        fadeIn: animations.trigger('fadeIn', [animations.transition('* => *', animations.useAnimation(ngAnimate.fadeIn))]),
        fadeInDown: animations.trigger('fadeInDown', [animations.transition('* => *', animations.useAnimation(ngAnimate.fadeInDown))]),
        fadeInLeft: animations.trigger('fadeInLeft', [animations.transition('* => *', animations.useAnimation(ngAnimate.fadeInLeft))]),
        fadeOut: animations.trigger('fadeOut', [animations.transition('* => *', animations.useAnimation(ngAnimate.fadeOut))]),
        fadeOutUp: animations.trigger('fadeOutUp', [animations.transition('* => *', animations.useAnimation(ngAnimate.fadeOutUp))]),
        fadeOutRight: animations.trigger('fadeOutRight', [animations.transition('* => *', animations.useAnimation(ngAnimate.fadeOutRight))]),
        slideInDown: animations.trigger('slideInDown', [animations.transition('* => *', animations.useAnimation(ngAnimate.slideInDown))]),
        slideInLeft: animations.trigger('slideInLeft', [animations.transition('* => *', animations.useAnimation(ngAnimate.slideInLeft))]),
        slideOutUp: animations.trigger('slideOutUp', [animations.transition('* => *', animations.useAnimation(ngAnimate.slideOutUp))]),
        slideOutRight: animations.trigger('slideOutRight', [
            animations.transition('* => *', animations.useAnimation(ngAnimate.slideOutRight))
        ]),
        flip: animations.trigger('flip', [animations.transition('* => *', animations.useAnimation(ngAnimate.flip))]),
        flipInX: animations.trigger('flipInX', [animations.transition('* => *', animations.useAnimation(ngAnimate.flipInX))]),
        flipInY: animations.trigger('flipInY', [animations.transition('* => *', animations.useAnimation(ngAnimate.flipInY))]),
        flipOutX: animations.trigger('flipOutX', [animations.transition('* => *', animations.useAnimation(ngAnimate.flipOutX))]),
        flipOutY: animations.trigger('flipOutY', [animations.transition('* => *', animations.useAnimation(ngAnimate.flipOutY))]),
        lightSpeedIn: animations.trigger('lightSpeedIn', [animations.transition('* => *', animations.useAnimation(ngAnimate.lightSpeedIn))]),
        lightSpeedOut: animations.trigger('lightSpeedOut', [
            animations.transition('* => *', animations.useAnimation(ngAnimate.lightSpeedOut))
        ]),
        rotateIn: animations.trigger('rotateIn', [animations.transition('* => *', animations.useAnimation(ngAnimate.rotateIn))]),
        rotateInDownLeft: animations.trigger('rotateInDownLeft', [
            animations.transition('* => *', animations.useAnimation(ngAnimate.rotateInDownLeft))
        ]),
        rotateInUpRight: animations.trigger('rotateInUpRight', [
            animations.transition('* => *', animations.useAnimation(ngAnimate.rotateInUpRight))
        ]),
        rotateOut: animations.trigger('rotateOut', [animations.transition('* => *', animations.useAnimation(ngAnimate.rotateOut))]),
        rotateOutUpLeft: animations.trigger('rotateOutUpLeft', [
            animations.transition('* => *', animations.useAnimation(ngAnimate.rotateOutUpLeft))
        ]),
        rotateOutDownRight: animations.trigger('rotateOutDownRight', [
            animations.transition('* => *', animations.useAnimation(ngAnimate.rotateOutDownRight))
        ]),
        hinge: animations.trigger('hinge', [animations.transition('* => *', animations.useAnimation(ngAnimate.hinge))]),
        jackInTheBox: animations.trigger('jackInTheBox', [animations.transition('* => *', animations.useAnimation(ngAnimate.jackInTheBox))]),
        rollIn: animations.trigger('rollIn', [animations.transition('* => *', animations.useAnimation(ngAnimate.rollIn))]),
        rollOut: animations.trigger('rollOut', [animations.transition('* => *', animations.useAnimation(ngAnimate.rollOut))]),
        zoomIn: animations.trigger('zoomIn', [animations.transition('* => *', animations.useAnimation(ngAnimate.zoomIn))]),
        zoomInLeft: animations.trigger('zoomInLeft', [animations.transition('* => *', animations.useAnimation(ngAnimate.zoomInLeft))]),
        zoomInDown: animations.trigger('zoomInDown', [animations.transition('* => *', animations.useAnimation(ngAnimate.zoomInDown))]),
        zoomOut: animations.trigger('zoomOut', [animations.transition('* => *', animations.useAnimation(ngAnimate.zoomOut))]),
        zoomOutUp: animations.trigger('zoomOutUp', [animations.transition('* => *', animations.useAnimation(ngAnimate.zoomOutUp))]),
        zoomOutRight: animations.trigger('zoomOutRight', [animations.transition('* => *', animations.useAnimation(ngAnimate.zoomOutRight))])
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_API_REQUEST_OPTIONS = {
        notifyFailure: true,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_BUTTON_PROPS = ( /** @type {?} */({
        iconPos: 'left',
        type: 'button'
    }));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_FIELD_PROPS = {
        dataType: types.DataType.STRING,
        maxLength: 20,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_HTTP_REQUEST_OPTIONS = {
        notifySuccess: false,
        successMessage: ''
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_INIT_HTTP_STATE = { 'label': '加载中...', 'icon': 'fa-cog fa-spin' };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_NAV_EXTRAS = {
        queryParamsHandling: 'merge',
        // 'preserve'
        preserveFragment: true
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_ROOT_ROUTER_OPTIONS = {
        useHash: true,
        onSameUrlNavigation: 'reload',
        enableTracing: false,
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.MockServerApiRequestOptions = MockServerApiRequestOptions;
    exports.EsServerApiRequestOptions = EsServerApiRequestOptions;
    exports.ErServerApiRequestOptions = ErServerApiRequestOptions;
    exports.ANIMATION_NAMES = ANIMATION_NAMES;
    exports.ANIMATIONS = ANIMATIONS;
    exports.DEFAULT_API_REQUEST_OPTIONS = DEFAULT_API_REQUEST_OPTIONS;
    exports.DEFAULT_BUTTON_PROPS = DEFAULT_BUTTON_PROPS;
    exports.DEFAULT_FIELD_PROPS = DEFAULT_FIELD_PROPS;
    exports.DEFAULT_HTTP_REQUEST_OPTIONS = DEFAULT_HTTP_REQUEST_OPTIONS;
    exports.DEFAULT_INIT_HTTP_STATE = DEFAULT_INIT_HTTP_STATE;
    exports.DEFAULT_NAV_EXTRAS = DEFAULT_NAV_EXTRAS;
    exports.DEFAULT_ROOT_ROUTER_OPTIONS = DEFAULT_ROOT_ROUTER_OPTIONS;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=er-presets.umd.js.map