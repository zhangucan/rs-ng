/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Output } from '@angular/core';
import { FormArray, FormGroup } from '@angular/forms';
import { LogUtils } from '@er/core';
import { PngFormlyUtils } from '../../utils';
import { PngFormlyFormComponent } from '../form/component';
export class PngFormlyWizardFormComponent extends PngFormlyFormComponent {
    constructor() {
        super(...arguments);
        this.stepChange = new EventEmitter();
    }
    /**
     * @param {?} formProps
     * @return {?}
     */
    resolveFormFields(formProps) {
        if (!formProps || !formProps['steps']) {
            LogUtils.error(this, '没有定义steps', formProps);
        }
        if (formProps.steps) {
            formProps.steps.forEach(step => {
                step.fields.forEach(field => {
                    PngFormlyUtils.resolveField(formProps, field, this);
                });
            });
            this.formArray = new FormArray(formProps.steps.map(() => new FormGroup({})));
            this.stepFormlyOptions = formProps.steps.map((step) => {
                return Object.assign({}, formProps.options || {}, step.options || {});
            });
        }
        this.currentStepIndex = formProps.activeIndex || 0;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onStepChange(event) {
        this.currentStepIndex = event;
        this.stepChange.emit(event);
    }
}
PngFormlyWizardFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-formly-wizard',
                template: `
    <png-panel [header]="formProps.header" [footer]="formProps.footer" [icon]="formProps.icon" [toggleable]="formProps.collapsable">
      <png-wizard [(activeIndex)]="currentStepIndex"
                  (stepChange)="onStepChange($event)"
                  [styleClass]="formProps.styleClass"
                  [style]="formProps.style"
                  [stepStyleClass]="formProps['stepStyleClass']"
                  [stepStyle]="formProps['stepStyle']"
      >
        <ng-container *ngFor="let step of formProps['steps']; let i = index;">
          <png-step
            [label]="step.label"
            [styleClass]="step.styleClass"
            [style]="step.style"
          >
            <formly-form
              [form]="formArray.at(i)"
              [(model)]="formProps.model"
              [fields]="step.fields"
              [options]="stepFormlyOptions[i]">
            </formly-form>
          </png-step>
        </ng-container>
        <ng-template erTypedTemplate="footer">
          <button pButton type="button" *ngIf="currentStepIndex+1 === formProps['steps'].length"
                  class="pull-right" icon="fa fa-save" iconPos="right" label="提交"></button>
        </ng-template>
      </png-wizard>
    </png-panel>
    <!--<png-form-debug [model]="formModel"-->
    <!--[debugFormProps]="debugFormProps"-->
    <!--[runtimeFormProps]="formProps">-->
    <!--</png-form-debug>-->
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
PngFormlyWizardFormComponent.propDecorators = {
    stepChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    PngFormlyWizardFormComponent.prototype.formArray;
    /** @type {?} */
    PngFormlyWizardFormComponent.prototype.stepFormlyOptions;
    /** @type {?} */
    PngFormlyWizardFormComponent.prototype.currentStepIndex;
    /** @type {?} */
    PngFormlyWizardFormComponent.prototype.stepChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2Zvcm1seS1wcmltZW5nLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvd2l6YXJkL2NvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZGLE9BQU8sRUFBQyxTQUFTLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEQsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUVsQyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBMkN6RCxNQUFNLE9BQU8sNEJBQTZCLFNBQVEsc0JBQXNCO0lBdkN4RTs7UUErQ1ksZUFBVSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUE0QjVDLENBQUM7Ozs7O0lBMUJDLGlCQUFpQixDQUFDLFNBQTBCO1FBQzFDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDckMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQzlDO1FBQ0QsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFO1lBQ25CLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDMUIsY0FBYyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUN0RCxDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0UsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ3BELHlCQUNLLFNBQVMsQ0FBQyxPQUFPLElBQUksRUFBRSxFQUN2QixJQUFJLENBQUMsT0FBTyxJQUFJLEVBQUUsRUFDckI7WUFDSixDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxXQUFXLElBQUksQ0FBQyxDQUFDO0lBQ3JELENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLEtBQUs7UUFDaEIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztRQUM5QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7WUF6RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUNUO2dCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7eUJBVUUsTUFBTTs7OztJQU5QLGlEQUFxQjs7SUFFckIseURBQXVDOztJQUV2Qyx3REFBeUI7O0lBRXpCLGtEQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtGb3JtQXJyYXksIEZvcm1Hcm91cH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtMb2dVdGlsc30gZnJvbSAnQGVyL2NvcmUnO1xuaW1wb3J0IHtGb3JtbHlGb3JtT3B0aW9uc30gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5pbXBvcnQge1BuZ0Zvcm1seVV0aWxzfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQge1BuZ0Zvcm1seUZvcm1Db21wb25lbnR9IGZyb20gJy4uL2Zvcm0vY29tcG9uZW50JztcbmltcG9ydCB7V2l6YXJkRm9ybVByb3BzfSBmcm9tICcuL3R5cGUnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BuZy1mb3JtbHktd2l6YXJkJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8cG5nLXBhbmVsIFtoZWFkZXJdPVwiZm9ybVByb3BzLmhlYWRlclwiIFtmb290ZXJdPVwiZm9ybVByb3BzLmZvb3RlclwiIFtpY29uXT1cImZvcm1Qcm9wcy5pY29uXCIgW3RvZ2dsZWFibGVdPVwiZm9ybVByb3BzLmNvbGxhcHNhYmxlXCI+XG4gICAgICA8cG5nLXdpemFyZCBbKGFjdGl2ZUluZGV4KV09XCJjdXJyZW50U3RlcEluZGV4XCJcbiAgICAgICAgICAgICAgICAgIChzdGVwQ2hhbmdlKT1cIm9uU3RlcENoYW5nZSgkZXZlbnQpXCJcbiAgICAgICAgICAgICAgICAgIFtzdHlsZUNsYXNzXT1cImZvcm1Qcm9wcy5zdHlsZUNsYXNzXCJcbiAgICAgICAgICAgICAgICAgIFtzdHlsZV09XCJmb3JtUHJvcHMuc3R5bGVcIlxuICAgICAgICAgICAgICAgICAgW3N0ZXBTdHlsZUNsYXNzXT1cImZvcm1Qcm9wc1snc3RlcFN0eWxlQ2xhc3MnXVwiXG4gICAgICAgICAgICAgICAgICBbc3RlcFN0eWxlXT1cImZvcm1Qcm9wc1snc3RlcFN0eWxlJ11cIlxuICAgICAgPlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBzdGVwIG9mIGZvcm1Qcm9wc1snc3RlcHMnXTsgbGV0IGkgPSBpbmRleDtcIj5cbiAgICAgICAgICA8cG5nLXN0ZXBcbiAgICAgICAgICAgIFtsYWJlbF09XCJzdGVwLmxhYmVsXCJcbiAgICAgICAgICAgIFtzdHlsZUNsYXNzXT1cInN0ZXAuc3R5bGVDbGFzc1wiXG4gICAgICAgICAgICBbc3R5bGVdPVwic3RlcC5zdHlsZVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGZvcm1seS1mb3JtXG4gICAgICAgICAgICAgIFtmb3JtXT1cImZvcm1BcnJheS5hdChpKVwiXG4gICAgICAgICAgICAgIFsobW9kZWwpXT1cImZvcm1Qcm9wcy5tb2RlbFwiXG4gICAgICAgICAgICAgIFtmaWVsZHNdPVwic3RlcC5maWVsZHNcIlxuICAgICAgICAgICAgICBbb3B0aW9uc109XCJzdGVwRm9ybWx5T3B0aW9uc1tpXVwiPlxuICAgICAgICAgICAgPC9mb3JtbHktZm9ybT5cbiAgICAgICAgICA8L3BuZy1zdGVwPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgPG5nLXRlbXBsYXRlIGVyVHlwZWRUZW1wbGF0ZT1cImZvb3RlclwiPlxuICAgICAgICAgIDxidXR0b24gcEJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgKm5nSWY9XCJjdXJyZW50U3RlcEluZGV4KzEgPT09IGZvcm1Qcm9wc1snc3RlcHMnXS5sZW5ndGhcIlxuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJwdWxsLXJpZ2h0XCIgaWNvbj1cImZhIGZhLXNhdmVcIiBpY29uUG9zPVwicmlnaHRcIiBsYWJlbD1cIuaPkOS6pFwiPjwvYnV0dG9uPlxuICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgPC9wbmctd2l6YXJkPlxuICAgIDwvcG5nLXBhbmVsPlxuICAgIDwhLS08cG5nLWZvcm0tZGVidWcgW21vZGVsXT1cImZvcm1Nb2RlbFwiLS0+XG4gICAgPCEtLVtkZWJ1Z0Zvcm1Qcm9wc109XCJkZWJ1Z0Zvcm1Qcm9wc1wiLS0+XG4gICAgPCEtLVtydW50aW1lRm9ybVByb3BzXT1cImZvcm1Qcm9wc1wiPi0tPlxuICAgIDwhLS08L3BuZy1mb3JtLWRlYnVnPi0tPlxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcblxuZXhwb3J0IGNsYXNzIFBuZ0Zvcm1seVdpemFyZEZvcm1Db21wb25lbnQgZXh0ZW5kcyBQbmdGb3JtbHlGb3JtQ29tcG9uZW50IHtcblxuICBmb3JtQXJyYXk6IEZvcm1BcnJheTtcblxuICBzdGVwRm9ybWx5T3B0aW9uczogRm9ybWx5Rm9ybU9wdGlvbnNbXTtcblxuICBjdXJyZW50U3RlcEluZGV4OiBudW1iZXI7XG5cbiAgQE91dHB1dCgpIHN0ZXBDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcmVzb2x2ZUZvcm1GaWVsZHMoZm9ybVByb3BzOiBXaXphcmRGb3JtUHJvcHMpIHtcbiAgICBpZiAoIWZvcm1Qcm9wcyB8fCAhZm9ybVByb3BzWydzdGVwcyddKSB7XG4gICAgICBMb2dVdGlscy5lcnJvcih0aGlzLCAn5rKh5pyJ5a6a5LmJc3RlcHMnLCBmb3JtUHJvcHMpO1xuICAgIH1cbiAgICBpZiAoZm9ybVByb3BzLnN0ZXBzKSB7XG4gICAgICBmb3JtUHJvcHMuc3RlcHMuZm9yRWFjaChzdGVwID0+IHtcbiAgICAgICAgc3RlcC5maWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICAgICAgUG5nRm9ybWx5VXRpbHMucmVzb2x2ZUZpZWxkKGZvcm1Qcm9wcywgZmllbGQsIHRoaXMpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5mb3JtQXJyYXkgPSBuZXcgRm9ybUFycmF5KGZvcm1Qcm9wcy5zdGVwcy5tYXAoKCkgPT4gbmV3IEZvcm1Hcm91cCh7fSkpKTtcbiAgICAgIHRoaXMuc3RlcEZvcm1seU9wdGlvbnMgPSBmb3JtUHJvcHMuc3RlcHMubWFwKChzdGVwKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uZm9ybVByb3BzLm9wdGlvbnMgfHwge30sXG4gICAgICAgICAgLi4uc3RlcC5vcHRpb25zIHx8IHt9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50U3RlcEluZGV4ID0gZm9ybVByb3BzLmFjdGl2ZUluZGV4IHx8IDA7XG4gIH1cblxuICBvblN0ZXBDaGFuZ2UoZXZlbnQpIHtcbiAgICB0aGlzLmN1cnJlbnRTdGVwSW5kZXggPSBldmVudDtcbiAgICB0aGlzLnN0ZXBDaGFuZ2UuZW1pdChldmVudCk7XG4gIH1cblxufVxuIl19