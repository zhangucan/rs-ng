/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Output } from '@angular/core';
import { FormArray, FormGroup } from '@angular/forms';
import { LogUtils } from '@er/core';
import { PngFormlyUtils } from '../../utils';
import { PngFormlyFormComponent } from '../form/component';
export class PngFormlyTabsFormComponent extends PngFormlyFormComponent {
    constructor() {
        super(...arguments);
        this.onTabChange = new EventEmitter();
        this.onTabClose = new EventEmitter();
    }
    /**
     * @param {?} formProps
     * @return {?}
     */
    resolveFormFields(formProps) {
        if (!formProps || !formProps['tabs']) {
            LogUtils.error(this, '没有定义tabs', formProps);
        }
        if (formProps.tabs) {
            formProps.tabs.forEach(tab => {
                tab.fields.forEach(field => {
                    PngFormlyUtils.resolveField(this._formProps, field, this);
                });
            });
            this.formArray = new FormArray(formProps.tabs.map(() => new FormGroup({})));
            this.tabFormlyOptions = formProps.tabs.map((tab) => {
                return Object.assign({}, formProps.options || {}, tab.options || {});
            });
        }
        this.currentTabIndex = formProps.activeIndex || 0;
    }
    /**
     * @return {?}
     */
    afterPropsInit() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    tabChange(event) {
        this.currentTabIndex = event;
        this.onTabChange.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    tabClose(event) {
        this.onTabClose.emit(event);
    }
}
PngFormlyTabsFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-formly-tab',
                template: `
    <png-panel [header]="formProps.caption" [footer]="formProps.footer" [icon]="formProps.icon" [toggleable]="formProps.collapsable">
      <p-tabView [activeIndex]="formProps['activeIndex']"
                 [styleClass]="formProps.styleClass"
                 [style]="formProps.style"
                 [orientation]="formProps['tabOrientation']"
                 (onChange)="tabChange($event)"
                 (onClose)="tabClose($event)"
      >
        <ng-container>
          <p-tabPanel *ngFor="let tab of formProps['tabs']; let i = index"
                      [header]="tab.caption"
                      [headerStyle]="tab.style"
                      [headerStyleClass]="tab.styleClass"
                      [leftIcon]="tab.leftIcon"
                      [rightIcon]="tab.rightIcon"
          >
            <formly-form
              [form]="formArray.at(i)"
              [(model)]="formProps.model"
              [fields]="tab.fields"
              [options]="tabFormlyOptions[i]">
            </formly-form>
          </p-tabPanel>
        </ng-container>
      </p-tabView>
    </png-panel>

    <div [ngClass]="formProps.buttonsStyleClass">
      <er-button [stateKey]="formProps.$id"
                 icon="fa fa-save"
                 label="提&nbsp;&nbsp;&nbsp;交"
                 title="保留数据到服务端"
                 class="mr-2"
                 type="button"
                 (onClick)="formlyForm.submit()"
                 [styleClass]="formProps.submitBtnStyleClass"
      ></er-button>
      <er-button icon="fa fa-circle-o"
                 class="mr-2"
                 label="重&nbsp;&nbsp;&nbsp;填"
                 title="恢复到修改前的状态"
                 [styleClass]="formProps.resetBtnStyleClass"
                 (onClick)="formlyForm.resetModel()">
      </er-button>

      <ng-container *ngFor="let btn of formProps.buttons">
        <er-button erPropsBind [props]="btn" [context]="btn.context"></er-button>
      </ng-container>
    </div>

    <!--<png-form-debug [model]="formModel"-->
    <!--[debugFormProps]="props"-->
    <!--[runtimeFormProps]="formProps">-->
    <!--</png-form-debug>-->
  `,
                styles: [":host::ng-deep .ui-tabview .ui-state-active{background-color:transparent!important}:host::ng-deep .ui-tabview .ui-tabview-panel{margin:10px}:host::ng-deep .ui-tabview .ui-tabview-selected{border-left:5px solid #3bdc06}"]
            }] }
];
PngFormlyTabsFormComponent.propDecorators = {
    onTabChange: [{ type: Output }],
    onTabClose: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    PngFormlyTabsFormComponent.prototype.formArray;
    /** @type {?} */
    PngFormlyTabsFormComponent.prototype.tabFormlyOptions;
    /** @type {?} */
    PngFormlyTabsFormComponent.prototype.currentTabIndex;
    /** @type {?} */
    PngFormlyTabsFormComponent.prototype.onTabChange;
    /** @type {?} */
    PngFormlyTabsFormComponent.prototype.onTabClose;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2Zvcm1seS1wcmltZW5nLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGFiL2NvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBQyxTQUFTLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEQsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUVsQyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBZ0V6RCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsc0JBQXNCO0lBN0R0RTs7UUFxRVksZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRWpDLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBbUM1QyxDQUFDOzs7OztJQWpDQyxpQkFBaUIsQ0FBQyxTQUF1QjtRQUN2QyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3BDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUM3QztRQUNELElBQUksU0FBUyxDQUFDLElBQUksRUFBRTtZQUNsQixTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDM0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ3pCLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQzVELENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1RSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDakQseUJBQ0ssU0FBUyxDQUFDLE9BQU8sSUFBSSxFQUFFLEVBQ3ZCLEdBQUcsQ0FBQyxPQUFPLElBQUksRUFBRSxFQUNwQjtZQUNKLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxJQUFJLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQyxXQUFXLElBQUksQ0FBQyxDQUFDO0lBQ3BELENBQUM7Ozs7SUFFRCxjQUFjO0lBQ2QsQ0FBQzs7Ozs7SUFFRCxTQUFTLENBQUMsS0FBSztRQUNiLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1FBQzdCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7Ozs7O0lBRUQsUUFBUSxDQUFDLEtBQUs7UUFDWixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7WUF4R0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7Z0JBQzFCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXVEVDs7YUFFRjs7OzBCQVVFLE1BQU07eUJBRU4sTUFBTTs7OztJQVJQLCtDQUFxQjs7SUFFckIsc0RBQXNDOztJQUV0QyxxREFBd0I7O0lBRXhCLGlEQUEyQzs7SUFFM0MsZ0RBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Rm9ybUFycmF5LCBGb3JtR3JvdXB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7TG9nVXRpbHN9IGZyb20gJ0Blci9jb3JlJztcbmltcG9ydCB7Rm9ybWx5Rm9ybU9wdGlvbnN9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHtQbmdGb3JtbHlVdGlsc30gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHtQbmdGb3JtbHlGb3JtQ29tcG9uZW50fSBmcm9tICcuLi9mb3JtL2NvbXBvbmVudCc7XG5pbXBvcnQge1RhYkZvcm1Qcm9wc30gZnJvbSAnLi90eXBlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG5nLWZvcm1seS10YWInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxwbmctcGFuZWwgW2hlYWRlcl09XCJmb3JtUHJvcHMuY2FwdGlvblwiIFtmb290ZXJdPVwiZm9ybVByb3BzLmZvb3RlclwiIFtpY29uXT1cImZvcm1Qcm9wcy5pY29uXCIgW3RvZ2dsZWFibGVdPVwiZm9ybVByb3BzLmNvbGxhcHNhYmxlXCI+XG4gICAgICA8cC10YWJWaWV3IFthY3RpdmVJbmRleF09XCJmb3JtUHJvcHNbJ2FjdGl2ZUluZGV4J11cIlxuICAgICAgICAgICAgICAgICBbc3R5bGVDbGFzc109XCJmb3JtUHJvcHMuc3R5bGVDbGFzc1wiXG4gICAgICAgICAgICAgICAgIFtzdHlsZV09XCJmb3JtUHJvcHMuc3R5bGVcIlxuICAgICAgICAgICAgICAgICBbb3JpZW50YXRpb25dPVwiZm9ybVByb3BzWyd0YWJPcmllbnRhdGlvbiddXCJcbiAgICAgICAgICAgICAgICAgKG9uQ2hhbmdlKT1cInRhYkNoYW5nZSgkZXZlbnQpXCJcbiAgICAgICAgICAgICAgICAgKG9uQ2xvc2UpPVwidGFiQ2xvc2UoJGV2ZW50KVwiXG4gICAgICA+XG4gICAgICAgIDxuZy1jb250YWluZXI+XG4gICAgICAgICAgPHAtdGFiUGFuZWwgKm5nRm9yPVwibGV0IHRhYiBvZiBmb3JtUHJvcHNbJ3RhYnMnXTsgbGV0IGkgPSBpbmRleFwiXG4gICAgICAgICAgICAgICAgICAgICAgW2hlYWRlcl09XCJ0YWIuY2FwdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgW2hlYWRlclN0eWxlXT1cInRhYi5zdHlsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgW2hlYWRlclN0eWxlQ2xhc3NdPVwidGFiLnN0eWxlQ2xhc3NcIlxuICAgICAgICAgICAgICAgICAgICAgIFtsZWZ0SWNvbl09XCJ0YWIubGVmdEljb25cIlxuICAgICAgICAgICAgICAgICAgICAgIFtyaWdodEljb25dPVwidGFiLnJpZ2h0SWNvblwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGZvcm1seS1mb3JtXG4gICAgICAgICAgICAgIFtmb3JtXT1cImZvcm1BcnJheS5hdChpKVwiXG4gICAgICAgICAgICAgIFsobW9kZWwpXT1cImZvcm1Qcm9wcy5tb2RlbFwiXG4gICAgICAgICAgICAgIFtmaWVsZHNdPVwidGFiLmZpZWxkc1wiXG4gICAgICAgICAgICAgIFtvcHRpb25zXT1cInRhYkZvcm1seU9wdGlvbnNbaV1cIj5cbiAgICAgICAgICAgIDwvZm9ybWx5LWZvcm0+XG4gICAgICAgICAgPC9wLXRhYlBhbmVsPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvcC10YWJWaWV3PlxuICAgIDwvcG5nLXBhbmVsPlxuXG4gICAgPGRpdiBbbmdDbGFzc109XCJmb3JtUHJvcHMuYnV0dG9uc1N0eWxlQ2xhc3NcIj5cbiAgICAgIDxlci1idXR0b24gW3N0YXRlS2V5XT1cImZvcm1Qcm9wcy4kaWRcIlxuICAgICAgICAgICAgICAgICBpY29uPVwiZmEgZmEtc2F2ZVwiXG4gICAgICAgICAgICAgICAgIGxhYmVsPVwi5o+QJm5ic3A7Jm5ic3A7Jm5ic3A75LqkXCJcbiAgICAgICAgICAgICAgICAgdGl0bGU9XCLkv53nlZnmlbDmja7liLDmnI3liqHnq69cIlxuICAgICAgICAgICAgICAgICBjbGFzcz1cIm1yLTJcIlxuICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgKG9uQ2xpY2spPVwiZm9ybWx5Rm9ybS5zdWJtaXQoKVwiXG4gICAgICAgICAgICAgICAgIFtzdHlsZUNsYXNzXT1cImZvcm1Qcm9wcy5zdWJtaXRCdG5TdHlsZUNsYXNzXCJcbiAgICAgID48L2VyLWJ1dHRvbj5cbiAgICAgIDxlci1idXR0b24gaWNvbj1cImZhIGZhLWNpcmNsZS1vXCJcbiAgICAgICAgICAgICAgICAgY2xhc3M9XCJtci0yXCJcbiAgICAgICAgICAgICAgICAgbGFiZWw9XCLph40mbmJzcDsmbmJzcDsmbmJzcDvloatcIlxuICAgICAgICAgICAgICAgICB0aXRsZT1cIuaBouWkjeWIsOS/ruaUueWJjeeahOeKtuaAgVwiXG4gICAgICAgICAgICAgICAgIFtzdHlsZUNsYXNzXT1cImZvcm1Qcm9wcy5yZXNldEJ0blN0eWxlQ2xhc3NcIlxuICAgICAgICAgICAgICAgICAob25DbGljayk9XCJmb3JtbHlGb3JtLnJlc2V0TW9kZWwoKVwiPlxuICAgICAgPC9lci1idXR0b24+XG5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGJ0biBvZiBmb3JtUHJvcHMuYnV0dG9uc1wiPlxuICAgICAgICA8ZXItYnV0dG9uIGVyUHJvcHNCaW5kIFtwcm9wc109XCJidG5cIiBbY29udGV4dF09XCJidG4uY29udGV4dFwiPjwvZXItYnV0dG9uPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC9kaXY+XG5cbiAgICA8IS0tPHBuZy1mb3JtLWRlYnVnIFttb2RlbF09XCJmb3JtTW9kZWxcIi0tPlxuICAgIDwhLS1bZGVidWdGb3JtUHJvcHNdPVwicHJvcHNcIi0tPlxuICAgIDwhLS1bcnVudGltZUZvcm1Qcm9wc109XCJmb3JtUHJvcHNcIj4tLT5cbiAgICA8IS0tPC9wbmctZm9ybS1kZWJ1Zz4tLT5cbiAgYCxcbiAgc3R5bGVVcmxzOiBbJ3N0eWxlcy5zY3NzJ11cbn0pXG5cbmV4cG9ydCBjbGFzcyBQbmdGb3JtbHlUYWJzRm9ybUNvbXBvbmVudCBleHRlbmRzIFBuZ0Zvcm1seUZvcm1Db21wb25lbnQge1xuXG4gIGZvcm1BcnJheTogRm9ybUFycmF5O1xuXG4gIHRhYkZvcm1seU9wdGlvbnM6IEZvcm1seUZvcm1PcHRpb25zW107XG5cbiAgY3VycmVudFRhYkluZGV4OiBudW1iZXI7XG5cbiAgQE91dHB1dCgpIG9uVGFiQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIEBPdXRwdXQoKSBvblRhYkNsb3NlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHJlc29sdmVGb3JtRmllbGRzKGZvcm1Qcm9wczogVGFiRm9ybVByb3BzKSB7XG4gICAgaWYgKCFmb3JtUHJvcHMgfHwgIWZvcm1Qcm9wc1sndGFicyddKSB7XG4gICAgICBMb2dVdGlscy5lcnJvcih0aGlzLCAn5rKh5pyJ5a6a5LmJdGFicycsIGZvcm1Qcm9wcyk7XG4gICAgfVxuICAgIGlmIChmb3JtUHJvcHMudGFicykge1xuICAgICAgZm9ybVByb3BzLnRhYnMuZm9yRWFjaCh0YWIgPT4ge1xuICAgICAgICB0YWIuZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgICAgIFBuZ0Zvcm1seVV0aWxzLnJlc29sdmVGaWVsZCh0aGlzLl9mb3JtUHJvcHMsIGZpZWxkLCB0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZm9ybUFycmF5ID0gbmV3IEZvcm1BcnJheShmb3JtUHJvcHMudGFicy5tYXAoKCkgPT4gbmV3IEZvcm1Hcm91cCh7fSkpKTtcbiAgICAgIHRoaXMudGFiRm9ybWx5T3B0aW9ucyA9IGZvcm1Qcm9wcy50YWJzLm1hcCgodGFiKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uZm9ybVByb3BzLm9wdGlvbnMgfHwge30sXG4gICAgICAgICAgLi4udGFiLm9wdGlvbnMgfHwge31cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnRUYWJJbmRleCA9IGZvcm1Qcm9wcy5hY3RpdmVJbmRleCB8fCAwO1xuICB9XG5cbiAgYWZ0ZXJQcm9wc0luaXQoKSB7XG4gIH1cblxuICB0YWJDaGFuZ2UoZXZlbnQpIHtcbiAgICB0aGlzLmN1cnJlbnRUYWJJbmRleCA9IGV2ZW50O1xuICAgIHRoaXMub25UYWJDaGFuZ2UuZW1pdChldmVudCk7XG4gIH1cblxuICB0YWJDbG9zZShldmVudCkge1xuICAgIHRoaXMub25UYWJDbG9zZS5lbWl0KGV2ZW50KTtcbiAgfVxuXG59XG4iXX0=