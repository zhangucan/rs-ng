/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { LogUtils, RouteBindComponent } from '@er/core';
import { FormlyFormComponent } from '@er/formly';
import { CommonsUtils, ConfigUtils, IdUtils } from '@er/utils';
import { of } from 'rxjs';
import { PngFormlyUtils } from '../../utils';
export class PngFormlyFormComponent extends RouteBindComponent {
    constructor() {
        super(...arguments);
        this.debug = !!!ConfigUtils.getConfig().isProduction;
        this.onFormValueChanges = new EventEmitter();
        this.panelProps = {};
        this._formProps = {};
    }
    /**
     * @return {?}
     */
    get props() {
        return this._props;
    }
    /**
     * @param {?} props
     * @return {?}
     */
    set props(props) {
        this.panelProps = props['panel'] || {};
        this._props = CommonsUtils.omit(props, 'panel');
        this.initFormProps(this._props);
    }
    /**
     * @return {?}
     */
    get formProps() {
        return this._formProps || {};
    }
    /**
     * @param {?} event
     * @return {?}
     */
    formValueChanges(event) {
        if (this.debug) {
            this.formModel$ = of(this.formlyForm.model);
        }
        this.onFormValueChanges.emit(event);
    }
    /**
     * @param {?} props
     * @return {?}
     */
    beforeRoutePropsBind(props) {
        return { props: props };
    }
    /**
     * @param {?} formProps
     * @return {?}
     */
    resolveFormFields(formProps) {
        if (!formProps || !formProps['fields']) {
            LogUtils.error(this, '没有定义fields!', formProps);
            return;
        }
        formProps.formlyForm = this.formlyForm;
        this.formlyForm.formProps = formProps;
        formProps.fields.forEach(field => {
            PngFormlyUtils.resolveField(formProps, field, this.formlyForm);
        });
    }
    /**
     * @return {?}
     */
    afterPropsInit() {
    }
    /**
     * @private
     * @param {?} formProps
     * @return {?}
     */
    initFormProps(formProps) {
        this.resolveFormFields(formProps);
        formProps.$id = IdUtils.getRandom();
        if (formProps.entity) {
            if (!formProps.caption) {
                if (formProps.$routeParams && formProps.$routeParams['id']) {
                    formProps.caption = `编辑${formProps.entity.label}`;
                }
                else {
                    formProps.caption = `添加${formProps.entity.label}`;
                }
            }
            if (!formProps.apiEntry) {
                formProps.apiEntry = formProps.entity.apiEntry;
            }
        }
        if (!formProps.apiEntry) {
            LogUtils.warn([this, '没有定义apiEntry,表单不能提交！', formProps]);
        }
        else if (this.formlyForm) {
            this.formlyForm.apiEntry = formProps.apiEntry;
        }
        if (formProps.beforeSubmit) {
            this.beforeSubmit = formProps.beforeSubmit;
            delete formProps.beforeSubmit;
        }
        if (formProps.valueChanges) {
            this.valueChanges = formProps.valueChanges;
            delete formProps.valueChanges;
        }
        if (formProps.afterSubmit) {
            this.afterSubmit = formProps.afterSubmit;
            delete formProps.afterSubmit;
        }
        if (formProps.entity && formProps.entity.initValue) {
            formProps.model = formProps.entity.initValue;
        }
        else {
            formProps.model = {};
        }
        this._formProps = formProps;
        this.afterPropsInit();
    }
}
PngFormlyFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-formly-form',
                template: `
    <png-panel [showHeader]="panelProps['showHeader']"
               [header]="panelProps['caption']"
               [footer]="panelProps['footer']"
               [icon]="panelProps['icon']"
               [collapsed]="panelProps['collapsed']"
               [toggleable]="panelProps['collapsable']"
               [styleClass]="panelProps['panelStyleClass']"
               [barStyleClass]="panelProps['barStyleClass']"
               [style]="panelProps['panelStyle']"
    >
      <er-formly-form
        class="my-2"
        erPropsBind
        [props]="formProps"
        [beforeSubmit]="beforeSubmit"
        [afterSubmit]="afterSubmit"
        [valueChanges]="valueChanges"
        (onFormValueChanges)="formValueChanges($event)"
      >
      </er-formly-form>
    </png-panel>
    <png-form-debug *ngIf="debug"
                    [model]="formModel$|async"
                    [debugFormProps]="props"
                    [runtimeFormProps]="formProps"
    >
    </png-form-debug>
  `
            }] }
];
PngFormlyFormComponent.propDecorators = {
    debug: [{ type: Input }],
    formlyForm: [{ type: ViewChild, args: [FormlyFormComponent,] }],
    onFormValueChanges: [{ type: Output }],
    props: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PngFormlyFormComponent.prototype.debugFormProps;
    /** @type {?} */
    PngFormlyFormComponent.prototype.debug;
    /** @type {?} */
    PngFormlyFormComponent.prototype.formlyForm;
    /** @type {?} */
    PngFormlyFormComponent.prototype.onFormValueChanges;
    /** @type {?} */
    PngFormlyFormComponent.prototype.panelProps;
    /** @type {?} */
    PngFormlyFormComponent.prototype.formModel$;
    /** @type {?} */
    PngFormlyFormComponent.prototype.beforeSubmit;
    /** @type {?} */
    PngFormlyFormComponent.prototype.afterSubmit;
    /** @type {?} */
    PngFormlyFormComponent.prototype.valueChanges;
    /**
     * @type {?}
     * @protected
     */
    PngFormlyFormComponent.prototype._formProps;
    /**
     * @type {?}
     * @protected
     */
    PngFormlyFormComponent.prototype._props;
}
//# sourceMappingURL=data:application/json;base64,