/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { ApiUtils, AuthUtils, LogUtils } from '@er/core';
import { CommonsUtils, DateUtils, DialogUtils } from '@er/utils';
import { PngFormlyTypes } from '../../types/field-types';
import { PngFormlyUtils } from '../../utils';
import { PngFormlyFormComponent } from '../form/component';
export class PngFormlyAuditFormComponent extends PngFormlyFormComponent {
    constructor() {
        super(...arguments);
        this.buttonsStyleClass = 'text-center my-5';
        this.submitBtnStyleClass = 'btn btn-success';
        this.resetBtnStyleClass = 'btn btn-danger';
        this.initBtnStyleClass = 'btn btn-alert';
        this.backBtnStyleClass = 'btn btn-info';
    }
    /**
     * @param {?} formProps
     * @return {?}
     */
    resolveFormFields(formProps) {
        if (!formProps || !formProps['fields']) {
            LogUtils.error(this, '没有定义fields!', formProps);
            return;
        }
        if (!formProps.caption) {
            formProps.caption = `审核${formProps.entity.label}信息`;
        }
        formProps.fields.forEach(field => {
            field.type = PngFormlyTypes.value;
            PngFormlyUtils.resolveField(formProps, field, this);
        });
        /** @type {?} */
        const commentField = {
            key: 'comment',
            type: PngFormlyTypes.textArea,
            attrs: {
                placeholder: '请输入您的审核意见或备注'
            },
            templateOptions: {
                label: '审核意见',
                description: '审核不通过时，必须输入不通过的原因',
                minLength: 5
            }
        };
        PngFormlyUtils.resolveField(formProps, commentField, this);
        formProps.fields.push(commentField);
    }
    /**
     * @return {?}
     */
    onAccept() {
        /** @type {?} */
        const newState = this.saveAuditHis();
        ApiUtils.patchById(this.formlyForm.apiEntry, this.formlyForm.modelId, this.getSubmitData(newState), {
            tag: this.formlyForm.formId
        }).subscribe();
    }
    /**
     * @return {?}
     */
    onReject() {
        if (CommonsUtils.isEmpty(this.formlyForm.model['comment'])) {
            DialogUtils.error('操作无效', '请输入不通过的原因');
            return;
        }
        ApiUtils.patchById(this.formlyForm.apiEntry, this.formlyForm.modelId, this.getSubmitData(-1), {
            tag: this.formlyForm.formId
        }).subscribe();
    }
    /**
     * @param {?} state
     * @return {?}
     */
    getSubmitData(state) {
        return {
            audit: {
                state: state,
                auditComment: this.formlyForm.model['comment'],
                auditDate: DateUtils.getFormattedDate(),
                auditorName: AuthUtils.getCurrentUser().fullName,
                auditorId: AuthUtils.getCurrentUser().id
            }
        };
    }
    /**
     * @private
     * @return {?}
     */
    saveAuditHis() {
        /** @type {?} */
        const audit = this.formlyForm.model['audit'];
        if (audit) {
            /** @type {?} */
            const data = this.formlyForm.model;
            delete data['id'];
            ApiUtils.save(`${this.formlyForm.apiEntry}-audit-his`, data, {
                tag: this.formlyForm.formId
            }).subscribe();
            return ++audit['state'];
        }
        return 1;
    }
}
PngFormlyAuditFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-formly-audit-form',
                template: `
    <png-panel [header]="formProps.caption"
               [footer]="formProps.footer"
               [icon]="formProps.icon"
               [toggleable]="formProps.collapsable"
    >
      <er-formly-form
        class="mt-2"
        erPropsBind
        [props]="formProps"
        [beforeSubmit]="beforeSubmit"
        [afterSubmit]="afterSubmit"
      >
        <ng-template erTypedTemplate="buttons">
          <div [ngClass]="buttonsStyleClass">
            <er-button [stateKey]="formlyForm.formId"
                       icon="fa fa-check"
                       label="通&nbsp;&nbsp;&nbsp;过"
                       title="保留数据到服务端"
                       class="mr-2"
                       type="button"
                       [disabled]="!formlyForm.form.valid"
                       [styleClass]="submitBtnStyleClass"
                       (onClick)="onAccept()"
            ></er-button>
            <er-button icon="fa fa-close"
                       class="ml-4"
                       label="不&nbsp;&nbsp;&nbsp;通&nbsp;&nbsp;&nbsp;过"
                       title="恢复到修改前的状态"
                       [styleClass]="resetBtnStyleClass"
                       (onClick)="onReject()"
            >
            </er-button>
          </div>

        </ng-template>
      </er-formly-form>
    </png-panel>

  `
            }] }
];
PngFormlyAuditFormComponent.propDecorators = {
    buttonsStyleClass: [{ type: Input }],
    submitBtnStyleClass: [{ type: Input }],
    resetBtnStyleClass: [{ type: Input }],
    initBtnStyleClass: [{ type: Input }],
    backBtnStyleClass: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PngFormlyAuditFormComponent.prototype.buttonsStyleClass;
    /** @type {?} */
    PngFormlyAuditFormComponent.prototype.submitBtnStyleClass;
    /** @type {?} */
    PngFormlyAuditFormComponent.prototype.resetBtnStyleClass;
    /** @type {?} */
    PngFormlyAuditFormComponent.prototype.initBtnStyleClass;
    /** @type {?} */
    PngFormlyAuditFormComponent.prototype.backBtnStyleClass;
}
//# sourceMappingURL=data:application/json;base64,