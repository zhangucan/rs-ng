/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ViewContainerRef } from '@angular/core';
import { FieldWrapper } from '@ngx-formly/core';
/**
 * @record
 */
export function PngPanelWrapperProps() { }
if (false) {
    /** @type {?} */
    PngPanelWrapperProps.prototype.panel;
}
export class PngPanelWrapperComponent extends FieldWrapper {
    /**
     * @return {?}
     */
    get isToggleable() {
        return (this.to['panel'] && this.to['panel'].toggleable) !== undefined
            ? this.to['panel'].toggleable
            : true;
    }
}
PngPanelWrapperComponent.decorators = [
    { type: Component, args: [{
                template: `
    <png-panel
      [collapsed]="to['panel']?.collapsed"
      [toggleable]="isToggleable"
      [showHeader]="to['panel']?.showHeader === undefined ? true : to['panel']?.showHeader"
      [barStyleClass]="to['panel']?.barStyleClass"
      [barStyle]="to['panel']?.barStyle"
      [style]="to['panel']?.style"
      [styleClass]="to['panel']?.styleClass">
      <ng-container *ngIf="to['panel']?.header">
        <ng-template erTypedTemplate="header">
          <er-dyna-content [content]="to['panel'].header" styleClass="d-inline"></er-dyna-content>
        </ng-template>
      </ng-container>
      <ng-template #fieldComponent></ng-template>
      <ng-container *ngIf="to['panel']?.footer">
        <ng-template erTypedTemplate="footer">
          <er-dyna-content [content]="to['panel']?.footer" styleClass="d-inline"></er-dyna-content>
        </ng-template>
      </ng-container>
    </png-panel>
  `
            }] }
];
PngPanelWrapperComponent.propDecorators = {
    fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
};
if (false) {
    /** @type {?} */
    PngPanelWrapperComponent.prototype.fieldComponent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Blci9mb3JtbHktcHJpbWVuZy8iLCJzb3VyY2VzIjpbImxpYi9maWVsZC13cmFwcGVycy9wYW5lbC93cmFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7Ozs7QUFFOUMsMENBYUM7OztJQVpDLHFDQVdFOztBQTJCSixNQUFNLE9BQU8sd0JBQXlCLFNBQVEsWUFBWTs7OztJQUl4RCxJQUFJLFlBQVk7UUFDZCxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLFNBQVM7WUFDcEUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVTtZQUM3QixDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ1gsQ0FBQzs7O1lBaENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXFCVDthQUNGOzs7NkJBR0UsU0FBUyxTQUFDLGdCQUFnQixFQUFFLEVBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFDOzs7O0lBQXJELGtEQUF3RiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBWaWV3Q2hpbGQsIFZpZXdDb250YWluZXJSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtGaWVsZFdyYXBwZXJ9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBuZ1BhbmVsV3JhcHBlclByb3BzIHtcbiAgcGFuZWw6IHtcbiAgICBpY29uPzogc3RyaW5nO1xuICAgIGhlYWRlcj86IHN0cmluZztcbiAgICBmb290ZXI/OiBzdHJpbmc7XG4gICAgYmFyU3R5bGVDbGFzcz86IHN0cmluZztcbiAgICBiYXJTdHlsZT86IHt9O1xuICAgIHN0eWxlQ2xhc3M/OiBzdHJpbmc7XG4gICAgc3R5bGU/OiBzdHJpbmc7XG4gICAgY29sbGFwc2VkPzogYm9vbGVhbjtcbiAgICBzaG93SGVhZGVyPzogYm9vbGVhbjtcbiAgICB0b2dnbGVhYmxlPzogYm9vbGVhbjtcbiAgfTtcbn1cblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlOiBgXG4gICAgPHBuZy1wYW5lbFxuICAgICAgW2NvbGxhcHNlZF09XCJ0b1sncGFuZWwnXT8uY29sbGFwc2VkXCJcbiAgICAgIFt0b2dnbGVhYmxlXT1cImlzVG9nZ2xlYWJsZVwiXG4gICAgICBbc2hvd0hlYWRlcl09XCJ0b1sncGFuZWwnXT8uc2hvd0hlYWRlciA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IHRvWydwYW5lbCddPy5zaG93SGVhZGVyXCJcbiAgICAgIFtiYXJTdHlsZUNsYXNzXT1cInRvWydwYW5lbCddPy5iYXJTdHlsZUNsYXNzXCJcbiAgICAgIFtiYXJTdHlsZV09XCJ0b1sncGFuZWwnXT8uYmFyU3R5bGVcIlxuICAgICAgW3N0eWxlXT1cInRvWydwYW5lbCddPy5zdHlsZVwiXG4gICAgICBbc3R5bGVDbGFzc109XCJ0b1sncGFuZWwnXT8uc3R5bGVDbGFzc1wiPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInRvWydwYW5lbCddPy5oZWFkZXJcIj5cbiAgICAgICAgPG5nLXRlbXBsYXRlIGVyVHlwZWRUZW1wbGF0ZT1cImhlYWRlclwiPlxuICAgICAgICAgIDxlci1keW5hLWNvbnRlbnQgW2NvbnRlbnRdPVwidG9bJ3BhbmVsJ10uaGVhZGVyXCIgc3R5bGVDbGFzcz1cImQtaW5saW5lXCI+PC9lci1keW5hLWNvbnRlbnQ+XG4gICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDxuZy10ZW1wbGF0ZSAjZmllbGRDb21wb25lbnQ+PC9uZy10ZW1wbGF0ZT5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJ0b1sncGFuZWwnXT8uZm9vdGVyXCI+XG4gICAgICAgIDxuZy10ZW1wbGF0ZSBlclR5cGVkVGVtcGxhdGU9XCJmb290ZXJcIj5cbiAgICAgICAgICA8ZXItZHluYS1jb250ZW50IFtjb250ZW50XT1cInRvWydwYW5lbCddPy5mb290ZXJcIiBzdHlsZUNsYXNzPVwiZC1pbmxpbmVcIj48L2VyLWR5bmEtY29udGVudD5cbiAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvcG5nLXBhbmVsPlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIFBuZ1BhbmVsV3JhcHBlckNvbXBvbmVudCBleHRlbmRzIEZpZWxkV3JhcHBlciB7XG5cbiAgQFZpZXdDaGlsZCgnZmllbGRDb21wb25lbnQnLCB7cmVhZDogVmlld0NvbnRhaW5lclJlZn0pIGZpZWxkQ29tcG9uZW50OiBWaWV3Q29udGFpbmVyUmVmO1xuXG4gIGdldCBpc1RvZ2dsZWFibGUoKSB7XG4gICAgcmV0dXJuICh0aGlzLnRvWydwYW5lbCddICYmIHRoaXMudG9bJ3BhbmVsJ10udG9nZ2xlYWJsZSkgIT09IHVuZGVmaW5lZFxuICAgICAgPyB0aGlzLnRvWydwYW5lbCddLnRvZ2dsZWFibGVcbiAgICAgIDogdHJ1ZTtcbiAgfVxuXG5cbn1cbiJdfQ==