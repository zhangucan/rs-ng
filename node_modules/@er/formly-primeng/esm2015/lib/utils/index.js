/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DataFieldUtils } from '@er/core';
import { DataAttr, DataType } from '@er/types';
import { CommonsUtils, ConfigUtils, DateUtils, DialogUtils, IdUtils } from '@er/utils';
import { NgValidators } from '@er/validate';
import { PngFormlyTypes } from '../types/field-types';
export class PngFormlyUtils {
    /**
     * @param {?} formProps
     * @param {?} field
     * @param {?=} formlyForm
     * @return {?}
     */
    static resolveField(formProps, field, formlyForm) {
        if (formProps) {
            field.formProps = formProps;
        }
        if (formlyForm) {
            field.formlyForm = formlyForm;
        }
        field.className = field.className || '' + 'formly-field';
        PngFormlyUtils.resolveDataField(formProps, field, formlyForm);
    }
    /**
     * @param {?} apiEntry
     * @param {?} fieldName
     * @param {?=} query
     * @param {?=} selectable
     * @return {?}
     */
    static distinctSuggestProps(apiEntry, fieldName, query, selectable = false) {
        /** @type {?} */
        const props = {
            type: PngFormlyTypes.autoComplete,
            props: (/** @type {?} */ ({
                minLength: 1,
                size: 5,
                forceSelection: false,
                dropdown: false,
                placeholder: '请输入唯一的代码值',
                onSelect: (ctx) => {
                    if (!selectable) {
                        DialogUtils.error('无效操作', '该值已经存在，不能选择');
                        setTimeout(() => ctx.field.formControl.reset());
                    }
                },
                $ext: {
                    apiDataProps: (/** @type {?} */ ({
                        apiEntry: apiEntry,
                        query: query,
                        searchFields: fieldName,
                        withTerm: true
                    })),
                    dataItemProps: {
                        template: item => `<span title="该值已经存在，不可用"><del>${item[fieldName]}</del></span> `
                    }
                }
            })),
            templateOptions: {
                required: false,
                description: '<span class="text-danger">内容必须唯一，可以不填，不填时系统自动生成</span>'
            }
        };
        return props;
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    static resolveValidators(field) {
        if (field.validators) {
            /** @type {?} */
            const validates = field.validators;
            field.validators = {};
            if (CommonsUtils.isFunction(validates)) {
                field.validators.validation = [validates];
            }
            else if (CommonsUtils.isArray(validates)) {
                field.validators.validation = validates;
            }
            else {
                field.validators = validates;
            }
        }
        if (field.validations) {
            if (field.validators && field.validators['validation']) {
                field.validators.validation = Object.assign({}, field.validators.validation, field.validations);
            }
            else if (field.validators) {
                field.validators = Object.assign({}, field.validators, { validation: field.validations });
            }
            else {
                field.validators = {};
                field.validators.validation = field.validations;
            }
            delete field.validations;
        }
    }
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    static resolveBasic(dataField, field) {
        field.key = field.key || dataField.key;
        if (dataField.hidden) {
            field.hide = true;
        }
        if (dataField.defaultValue !== undefined) {
            field.defaultValue = dataField.defaultValue;
        }
        switch (dataField.dataAttr) {
            case DataAttr.CURRENCY:
                field.dataType = DataType.NUMBER;
                field.defaultValue = 0;
                break;
            case DataAttr.TEXT:
                field.type = PngFormlyTypes.textArea;
                break;
            case DataAttr.DISTINCT:
                Object.assign(field, PngFormlyUtils.distinctSuggestProps(field.apiEntry, field.key));
                break;
        }
        if (!field.type) {
            switch (dataField.dataType) {
                case DataType.STRING:
                    field.type = PngFormlyTypes.input;
                    break;
                case DataType.BOOLEAN:
                    field.type = PngFormlyTypes.switch;
                    break;
                case DataType.NUMBER:
                    field.type = PngFormlyTypes.spinner;
                    break;
                case DataType.DATE:
                    field.type = PngFormlyTypes.calendar;
                    break;
                default:
                    field.type = PngFormlyTypes.input;
            }
        }
    }
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    static resolveProps(dataField, field) {
        /** @type {?} */
        const props = {
            $ext: {}
        };
        if (dataField.dataItems) {
            props.$ext['dataItems'] = dataField.dataItems;
        }
        if (dataField.apiDataProps) {
            props.$ext['apiDataProps'] = dataField.apiDataProps;
        }
        if (dataField.dataItemProps) {
            props.$ext['dataItemProps'] = dataField.dataItemProps;
        }
        if (dataField.dataAttr === DataAttr.DATA_CODE) {
            props['dataKey'] = ConfigUtils.getConfig().dataFieldProps.dataCode.codeKey;
        }
        if (dataField.dataItems) {
            props.$ext['dataItems'] = dataField.dataItems;
        }
        switch (dataField.dataAttr) {
            case DataAttr.DATE_TIME:
                Object.assign(props, (/** @type {?} */ ({
                    dateFormat: 'yy-mm-dd hh:mm',
                    monthNavigator: true,
                    yearNavigator: true,
                    showTime: true
                })));
                break;
            case DataAttr.DATE:
                Object.assign(props, (/** @type {?} */ ({
                    dateFormat: 'yy-mm-dd',
                    monthNavigator: true,
                    yearNavigator: true
                })));
                break;
            case DataAttr.TIME:
                Object.assign(props, (/** @type {?} */ ({
                    timeOnly: true
                })));
                break;
            case DataAttr.MONTH:
                Object.assign(props, (/** @type {?} */ ({
                    view: 'month',
                    dateFormat: 'yy-mm',
                    yearNavigator: true,
                    monthNavigator: true,
                    yearRange: '2000:2020'
                })));
                break;
        }
        field.props = CommonsUtils.defaults(field.props, props);
    }
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    static resolveAttrs(dataField, field) {
        /** @type {?} */
        const attrs = {};
        switch (dataField.dataAttr) {
            case DataAttr.CURRENCY:
                CommonsUtils.set(attrs, '$ext.inputRule', 'pnum');
                CommonsUtils.set(attrs, '$ext.postText', '￥');
                break;
            case DataAttr.PHONE:
                CommonsUtils.set(attrs, '$ext.inputRule', 'pint');
                CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-phone');
                break;
            case DataAttr.ID_CARD:
                CommonsUtils.set(attrs, '$ext.inputRule', /[0-9]|X|x/);
                CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-id-card');
                break;
            case DataAttr.QQ:
                CommonsUtils.set(attrs, '$ext.inputRule', 'pint');
                CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-qq');
                break;
            case DataAttr.WE_CHAT:
                CommonsUtils.set(attrs, '$ext.inputRule', 'pint');
                CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-wechat');
                break;
            case DataAttr.EMAIL:
                CommonsUtils.set(attrs, '$ext.preText', '@');
                break;
            case DataAttr.URL:
                CommonsUtils.set(attrs, '$ext.preText', 'http://');
                break;
        }
        field.attrs = CommonsUtils.defaults(field.attrs, attrs);
    }
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    static resolveTemplateOptions(dataField, field) {
        /** @type {?} */
        const options = {};
        options.label = `${dataField.label}:`;
        if (dataField.required) {
            options.required = true;
        }
        if (dataField.description) {
            options.description = dataField.description;
        }
        if (dataField.placeholder) {
            options.placeholder = dataField.placeholder;
        }
        if (dataField.disabled) {
            options.disabled = dataField.disabled;
        }
        field.templateOptions = CommonsUtils.defaults(field.templateOptions, options);
    }
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    static resolveValidations(dataField, field) {
        /** @type {?} */
        const validations = [];
        if (dataField.maxLength) {
            validations.push(NgValidators.maxLength(dataField.maxLength));
        }
        if (dataField.minLength) {
            validations.push(NgValidators.minLength(dataField.minLength));
        }
        if (dataField.max) {
            validations.push(NgValidators.max(dataField.max));
        }
        if (dataField.min) {
            validations.push(NgValidators.min(dataField.min));
        }
        if (dataField.pattern) {
            validations.push(NgValidators.pattern(dataField.pattern));
        }
        if (dataField.dataAttr === DataAttr.ID_CARD) {
            validations.push(NgValidators.idCard);
        }
        if (validations.length > 0) {
            field.validations = validations;
        }
    }
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    static resolveParsers(dataField, field) {
        field.parsers = CommonsUtils.getArrayValue(dataField.parsers) || [];
        /** @type {?} */
        let parser;
        switch (dataField.dataAttr) {
            case DataAttr.CURRENCY:
                parser = (val) => val ? Number(val) : val;
                break;
            case DataAttr.DATE:
                parser = (val) => val ? DateUtils.getFormattedDate(val, 'YYYY-MM-DD') : val;
                break;
            case DataAttr.DATE_TIME:
                parser = (val) => val ? DateUtils.getFormattedDate(val, 'YYYY-MM-DD HH:mm:ss') : val;
                break;
            case DataAttr.TIME:
                parser = (val) => val ? DateUtils.getFormattedDate(val, 'HH:mm:ss') : val;
                break;
            case DataAttr.YEAR:
                parser = (val) => val ? DateUtils.getFormattedDate(val, 'YYYY') : val;
                break;
            case DataAttr.MONTH:
                parser = (val) => val ? DateUtils.getFormattedDate(val, 'YYYY-MM') : val;
                break;
            case DataAttr.PERCENT:
                parser = (val) => val ? Number(val) / 100 : val;
                break;
            case DataAttr.ID_CARD:
                parser = (val) => val ? val.toUpperCase() : val;
                break;
        }
        /** @type {?} */
        const parsers = CommonsUtils.getArrayValue(dataField.parsers) || [];
        if (parser) {
            parsers.push((val) => {
                try {
                    return parser(val);
                }
                catch (e) {
                    return undefined;
                }
            });
        }
        if (parsers.length > 0) {
            field.parsers = parsers;
        }
    }
    /**
     * @private
     * @param {?} formProps
     * @param {?} field
     * @param {?=} formlyForm
     * @return {?}
     */
    static resolveDataField(formProps, field, formlyForm) {
        if (field.fieldArray) {
            if (field.wrappers) {
                field.wrappers = CommonsUtils.getArrayValue(field.wrappers);
            }
            PngFormlyUtils.resolveField(() => formProps, field.fieldArray, () => formlyForm); // bind latter
        }
        else if (field.fieldGroup) {
            if (field.wrappers) {
                field.wrappers = CommonsUtils.getArrayValue(field.wrappers);
            }
            field.fieldGroup.forEach(aField => {
                if (field.templateOptions && field.templateOptions.landscape) {
                    CommonsUtils.set((/** @type {?} */ (aField)), 'templateOptions.landscape', field.templateOptions.landscape);
                }
                PngFormlyUtils.resolveField(formProps, aField, formlyForm);
            });
        }
        else {
            /** @type {?} */
            let dataField = field.dataField;
            if (field.template) {
                field.type = 'formly-template';
            }
            if (field.type === PngFormlyTypes.dyna) {
                Object.defineProperty(field, 'key', {
                    value: `$_${IdUtils.getRandom()}`,
                    enumerable: false
                });
                // field.key = `$_${IdUtils.getRandom()}`;
            }
            if (!dataField) {
                if (!field.type) {
                    field.type = PngFormlyTypes.input;
                }
                if (field.parsers) {
                    field.parsers = CommonsUtils.getArrayValue(field.parsers);
                }
                PngFormlyUtils.resolveValidators(field);
                return;
            }
            dataField = CommonsUtils.merge(DataFieldUtils.getFieldDefaultProps(dataField), dataField);
            field.dataField = dataField;
            if (field.type && field.type === PngFormlyTypes.value) {
                field.key = field.key || field.dataField.key;
                CommonsUtils.set((/** @type {?} */ (field)), 'templateOptions.label', field.dataField.label);
                return field;
            }
            /** @type {?} */
            const resolvedField = {};
            PngFormlyUtils.resolveBasic(dataField, resolvedField);
            PngFormlyUtils.resolveProps(dataField, resolvedField);
            PngFormlyUtils.resolveAttrs(dataField, resolvedField);
            PngFormlyUtils.resolveTemplateOptions(dataField, resolvedField);
            PngFormlyUtils.resolveValidations(dataField, resolvedField);
            CommonsUtils.defaults(field, resolvedField);
            if (field.type === PngFormlyTypes.input) {
                if (field.props['$ext'].apiDataProps) {
                    field.type = PngFormlyTypes.autoComplete;
                }
                if (dataField.length) {
                    CommonsUtils.set((/** @type {?} */ (field)), 'attrs.size', dataField.length);
                }
            }
            /** @type {?} */
            const apiDataProps = CommonsUtils.get(field, 'props.$ext.apiDataProps');
            if (apiDataProps) {
                if (!apiDataProps.apiEntry) {
                    apiDataProps['apiEntry'] = formProps.apiEntry || formProps.entity && formProps.entity.apiEntry;
                }
                if (!apiDataProps.dataPath) {
                    apiDataProps['dataPath'] = 'items';
                }
            }
            PngFormlyUtils.resolveParsers(dataField, resolvedField);
            if (resolvedField.parsers) {
                field.parsers = field.parsers || [];
                field.parsers = field.parsers.concat(resolvedField.parsers);
            }
            PngFormlyUtils.resolveValidators(field);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZXIvZm9ybWx5LXByaW1lbmcvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFHeEMsT0FBTyxFQUFlLFFBQVEsRUFBRSxRQUFRLEVBQVksTUFBTSxXQUFXLENBQUM7QUFDdEUsT0FBTyxFQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDckYsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUMxQyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFcEQsTUFBTSxPQUFPLGNBQWM7Ozs7Ozs7SUFFekIsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFvQixFQUFFLEtBQTBCLEVBQUUsVUFBVztRQUMvRSxJQUFJLFNBQVMsRUFBRTtZQUNiLEtBQUssQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1NBQzdCO1FBQ0QsSUFBSSxVQUFVLEVBQUU7WUFDZCxLQUFLLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztTQUMvQjtRQUNELEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsSUFBSSxFQUFFLEdBQUcsY0FBYyxDQUFDO1FBQ3pELGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7Ozs7Ozs7O0lBRUQsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsS0FBTSxFQUFFLFVBQVUsR0FBRyxLQUFLOztjQUNuRSxLQUFLLEdBQUc7WUFDWixJQUFJLEVBQUUsY0FBYyxDQUFDLFlBQVk7WUFDakMsS0FBSyxFQUFFLG1CQUFzQjtnQkFDM0IsU0FBUyxFQUFFLENBQUM7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RSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQzdEO2FBQ0Y7O2tCQUVLLFlBQVksR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSx5QkFBeUIsQ0FBQztZQUV2RSxJQUFJLFlBQVksRUFBRTtnQkFDaEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUU7b0JBQzFCLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBRyxTQUFTLENBQUMsUUFBUSxJQUFJLFNBQVMsQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7aUJBQ2hHO2dCQUNELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFO29CQUMxQixZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsT0FBTyxDQUFDO2lCQUNwQzthQUNGO1lBRUQsY0FBYyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFFeEQsSUFBSSxhQUFhLENBQUMsT0FBTyxFQUFFO2dCQUN6QixLQUFLLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO2dCQUNwQyxLQUFLLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUM3RDtZQUVELGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUV6QztJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGF0YUZpZWxkVXRpbHN9IGZyb20gJ0Blci9jb3JlJztcbmltcG9ydCB7RXJGb3JtbHlGaWVsZENvbmZpZywgRXJGb3JtbHlUZW1wbGF0ZU9wdGlvbnN9IGZyb20gJ0Blci9mb3JtbHknO1xuaW1wb3J0IHtQbmdBdXRvQ29tcGxldGVQcm9wcywgUG5nQ2FsZW5kYXJQcm9wc30gZnJvbSAnQGVyL3ByaW1lbmcnO1xuaW1wb3J0IHtBcGlEYXRhUHJvcHMsIERhdGFBdHRyLCBEYXRhVHlwZSwgRm9ybVByb3BzfSBmcm9tICdAZXIvdHlwZXMnO1xuaW1wb3J0IHtDb21tb25zVXRpbHMsIENvbmZpZ1V0aWxzLCBEYXRlVXRpbHMsIERpYWxvZ1V0aWxzLCBJZFV0aWxzfSBmcm9tICdAZXIvdXRpbHMnO1xuaW1wb3J0IHtOZ1ZhbGlkYXRvcnN9IGZyb20gJ0Blci92YWxpZGF0ZSc7XG5pbXBvcnQge1BuZ0Zvcm1seVR5cGVzfSBmcm9tICcuLi90eXBlcy9maWVsZC10eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBQbmdGb3JtbHlVdGlscyB7XG5cbiAgc3RhdGljIHJlc29sdmVGaWVsZChmb3JtUHJvcHM6IEZvcm1Qcm9wcywgZmllbGQ6IEVyRm9ybWx5RmllbGRDb25maWcsIGZvcm1seUZvcm0/KSB7XG4gICAgaWYgKGZvcm1Qcm9wcykge1xuICAgICAgZmllbGQuZm9ybVByb3BzID0gZm9ybVByb3BzO1xuICAgIH1cbiAgICBpZiAoZm9ybWx5Rm9ybSkge1xuICAgICAgZmllbGQuZm9ybWx5Rm9ybSA9IGZvcm1seUZvcm07XG4gICAgfVxuICAgIGZpZWxkLmNsYXNzTmFtZSA9IGZpZWxkLmNsYXNzTmFtZSB8fCAnJyArICdmb3JtbHktZmllbGQnO1xuICAgIFBuZ0Zvcm1seVV0aWxzLnJlc29sdmVEYXRhRmllbGQoZm9ybVByb3BzLCBmaWVsZCwgZm9ybWx5Rm9ybSk7XG4gIH1cblxuICBzdGF0aWMgZGlzdGluY3RTdWdnZXN0UHJvcHMoYXBpRW50cnksIGZpZWxkTmFtZSwgcXVlcnk/LCBzZWxlY3RhYmxlID0gZmFsc2UpIHtcbiAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgIHR5cGU6IFBuZ0Zvcm1seVR5cGVzLmF1dG9Db21wbGV0ZSxcbiAgICAgIHByb3BzOiA8UG5nQXV0b0NvbXBsZXRlUHJvcHM+e1xuICAgICAgICBtaW5MZW5ndGg6IDEsXG4gICAgICAgIHNpemU6IDUsXG4gICAgICAgIGZvcmNlU2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgZHJvcGRvd246IGZhbHNlLFxuICAgICAgICBwbGFjZWhvbGRlcjogJ+ivt+i+k+WFpeWUr+S4gOeahOS7o+eggeWAvCcsXG4gICAgICAgIG9uU2VsZWN0OiAoY3R4KSA9PiB7XG4gICAgICAgICAgaWYgKCFzZWxlY3RhYmxlKSB7XG4gICAgICAgICAgICBEaWFsb2dVdGlscy5lcnJvcign5peg5pWI5pON5L2cJywgJ+ivpeWAvOW3sue7j+WtmOWcqO+8jOS4jeiDvemAieaLqScpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBjdHguZmllbGQuZm9ybUNvbnRyb2wucmVzZXQoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAkZXh0OiB7XG4gICAgICAgICAgYXBpRGF0YVByb3BzOiA8QXBpRGF0YVByb3BzPntcbiAgICAgICAgICAgIGFwaUVudHJ5OiBhcGlFbnRyeSxcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICAgIHNlYXJjaEZpZWxkczogZmllbGROYW1lLFxuICAgICAgICAgICAgd2l0aFRlcm06IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRhdGFJdGVtUHJvcHM6IHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiBpdGVtID0+IGA8c3BhbiB0aXRsZT1cIuivpeWAvOW3sue7j+WtmOWcqO+8jOS4jeWPr+eUqFwiPjxkZWw+JHtpdGVtW2ZpZWxkTmFtZV19PC9kZWw+PC9zcGFuPiBgXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVPcHRpb25zOiB7XG4gICAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgZGVzY3JpcHRpb246ICc8c3BhbiBjbGFzcz1cInRleHQtZGFuZ2VyXCI+5YaF5a655b+F6aG75ZSv5LiA77yM5Y+v5Lul5LiN5aGr77yM5LiN5aGr5pe257O757uf6Ieq5Yqo55Sf5oiQPC9zcGFuPidcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBwcm9wcztcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHJlc29sdmVWYWxpZGF0b3JzKGZpZWxkKSB7XG4gICAgaWYgKGZpZWxkLnZhbGlkYXRvcnMpIHtcbiAgICAgIGNvbnN0IHZhbGlkYXRlcyA9IGZpZWxkLnZhbGlkYXRvcnM7XG4gICAgICBmaWVsZC52YWxpZGF0b3JzID0ge307XG4gICAgICBpZiAoQ29tbW9uc1V0aWxzLmlzRnVuY3Rpb24odmFsaWRhdGVzKSkge1xuICAgICAgICBmaWVsZC52YWxpZGF0b3JzLnZhbGlkYXRpb24gPSBbdmFsaWRhdGVzXTtcbiAgICAgIH0gZWxzZSBpZiAoQ29tbW9uc1V0aWxzLmlzQXJyYXkodmFsaWRhdGVzKSkge1xuICAgICAgICBmaWVsZC52YWxpZGF0b3JzLnZhbGlkYXRpb24gPSB2YWxpZGF0ZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaWVsZC52YWxpZGF0b3JzID0gdmFsaWRhdGVzO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmllbGQudmFsaWRhdGlvbnMpIHtcbiAgICAgIGlmIChmaWVsZC52YWxpZGF0b3JzICYmIGZpZWxkLnZhbGlkYXRvcnNbJ3ZhbGlkYXRpb24nXSkge1xuICAgICAgICBmaWVsZC52YWxpZGF0b3JzLnZhbGlkYXRpb24gPSB7XG4gICAgICAgICAgLi4uZmllbGQudmFsaWRhdG9ycy52YWxpZGF0aW9uLFxuICAgICAgICAgIC4uLmZpZWxkLnZhbGlkYXRpb25zXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkLnZhbGlkYXRvcnMpIHtcbiAgICAgICAgZmllbGQudmFsaWRhdG9ycyA9IHtcbiAgICAgICAgICAuLi5maWVsZC52YWxpZGF0b3JzLFxuICAgICAgICAgIHZhbGlkYXRpb246IGZpZWxkLnZhbGlkYXRpb25zXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaWVsZC52YWxpZGF0b3JzID0ge307XG4gICAgICAgIGZpZWxkLnZhbGlkYXRvcnMudmFsaWRhdGlvbiA9IGZpZWxkLnZhbGlkYXRpb25zO1xuICAgICAgfVxuICAgICAgZGVsZXRlIGZpZWxkLnZhbGlkYXRpb25zO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHJlc29sdmVCYXNpYyhkYXRhRmllbGQsIGZpZWxkKSB7XG5cbiAgICBmaWVsZC5rZXkgPSBmaWVsZC5rZXkgfHwgZGF0YUZpZWxkLmtleTtcblxuICAgIGlmIChkYXRhRmllbGQuaGlkZGVuKSB7XG4gICAgICBmaWVsZC5oaWRlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YUZpZWxkLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmaWVsZC5kZWZhdWx0VmFsdWUgPSBkYXRhRmllbGQuZGVmYXVsdFZhbHVlO1xuICAgIH1cblxuICAgIHN3aXRjaCAoZGF0YUZpZWxkLmRhdGFBdHRyKSB7XG4gICAgICBjYXNlIERhdGFBdHRyLkNVUlJFTkNZOlxuICAgICAgICBmaWVsZC5kYXRhVHlwZSA9IERhdGFUeXBlLk5VTUJFUjtcbiAgICAgICAgZmllbGQuZGVmYXVsdFZhbHVlID0gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERhdGFBdHRyLlRFWFQ6XG4gICAgICAgIGZpZWxkLnR5cGUgPSBQbmdGb3JtbHlUeXBlcy50ZXh0QXJlYTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERhdGFBdHRyLkRJU1RJTkNUOlxuICAgICAgICBPYmplY3QuYXNzaWduKGZpZWxkLCBQbmdGb3JtbHlVdGlscy5kaXN0aW5jdFN1Z2dlc3RQcm9wcyhmaWVsZC5hcGlFbnRyeSwgZmllbGQua2V5KSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICghZmllbGQudHlwZSkge1xuICAgICAgc3dpdGNoIChkYXRhRmllbGQuZGF0YVR5cGUpIHtcbiAgICAgICAgY2FzZSBEYXRhVHlwZS5TVFJJTkc6XG4gICAgICAgICAgZmllbGQudHlwZSA9IFBuZ0Zvcm1seVR5cGVzLmlucHV0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIERhdGFUeXBlLkJPT0xFQU46XG4gICAgICAgICAgZmllbGQudHlwZSA9IFBuZ0Zvcm1seVR5cGVzLnN3aXRjaDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBEYXRhVHlwZS5OVU1CRVI6XG4gICAgICAgICAgZmllbGQudHlwZSA9IFBuZ0Zvcm1seVR5cGVzLnNwaW5uZXI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgRGF0YVR5cGUuREFURTpcbiAgICAgICAgICBmaWVsZC50eXBlID0gUG5nRm9ybWx5VHlwZXMuY2FsZW5kYXI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgZmllbGQudHlwZSA9IFBuZ0Zvcm1seVR5cGVzLmlucHV0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHJlc29sdmVQcm9wcyhkYXRhRmllbGQsIGZpZWxkKSB7XG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAkZXh0OiB7fVxuICAgIH07XG4gICAgaWYgKGRhdGFGaWVsZC5kYXRhSXRlbXMpIHtcbiAgICAgIHByb3BzLiRleHRbJ2RhdGFJdGVtcyddID0gZGF0YUZpZWxkLmRhdGFJdGVtcztcbiAgICB9XG4gICAgaWYgKGRhdGFGaWVsZC5hcGlEYXRhUHJvcHMpIHtcbiAgICAgIHByb3BzLiRleHRbJ2FwaURhdGFQcm9wcyddID0gZGF0YUZpZWxkLmFwaURhdGFQcm9wcztcbiAgICB9XG4gICAgaWYgKGRhdGFGaWVsZC5kYXRhSXRlbVByb3BzKSB7XG4gICAgICBwcm9wcy4kZXh0WydkYXRhSXRlbVByb3BzJ10gPSBkYXRhRmllbGQuZGF0YUl0ZW1Qcm9wcztcbiAgICB9XG4gICAgaWYgKGRhdGFGaWVsZC5kYXRhQXR0ciA9PT0gRGF0YUF0dHIuREFUQV9DT0RFKSB7XG4gICAgICBwcm9wc1snZGF0YUtleSddID0gQ29uZmlnVXRpbHMuZ2V0Q29uZmlnKCkuZGF0YUZpZWxkUHJvcHMuZGF0YUNvZGUuY29kZUtleTtcbiAgICB9XG4gICAgaWYgKGRhdGFGaWVsZC5kYXRhSXRlbXMpIHtcbiAgICAgIHByb3BzLiRleHRbJ2RhdGFJdGVtcyddID0gZGF0YUZpZWxkLmRhdGFJdGVtcztcbiAgICB9XG4gICAgc3dpdGNoIChkYXRhRmllbGQuZGF0YUF0dHIpIHtcbiAgICAgIGNhc2UgRGF0YUF0dHIuREFURV9USU1FOlxuICAgICAgICBPYmplY3QuYXNzaWduKHByb3BzLCA8UG5nQ2FsZW5kYXJQcm9wcz57XG4gICAgICAgICAgZGF0ZUZvcm1hdDogJ3l5LW1tLWRkIGhoOm1tJyxcbiAgICAgICAgICBtb250aE5hdmlnYXRvcjogdHJ1ZSxcbiAgICAgICAgICB5ZWFyTmF2aWdhdG9yOiB0cnVlLFxuICAgICAgICAgIHNob3dUaW1lOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRGF0YUF0dHIuREFURTpcbiAgICAgICAgT2JqZWN0LmFzc2lnbihwcm9wcywgPFBuZ0NhbGVuZGFyUHJvcHM+e1xuICAgICAgICAgIGRhdGVGb3JtYXQ6ICd5eS1tbS1kZCcsXG4gICAgICAgICAgbW9udGhOYXZpZ2F0b3I6IHRydWUsXG4gICAgICAgICAgeWVhck5hdmlnYXRvcjogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERhdGFBdHRyLlRJTUU6XG4gICAgICAgIE9iamVjdC5hc3NpZ24ocHJvcHMsIDxQbmdDYWxlbmRhclByb3BzPntcbiAgICAgICAgICB0aW1lT25seTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERhdGFBdHRyLk1PTlRIOlxuICAgICAgICBPYmplY3QuYXNzaWduKHByb3BzLCA8UG5nQ2FsZW5kYXJQcm9wcz57XG4gICAgICAgICAgdmlldzogJ21vbnRoJyxcbiAgICAgICAgICBkYXRlRm9ybWF0OiAneXktbW0nLFxuICAgICAgICAgIHllYXJOYXZpZ2F0b3I6IHRydWUsXG4gICAgICAgICAgbW9udGhOYXZpZ2F0b3I6IHRydWUsXG4gICAgICAgICAgeWVhclJhbmdlOiAnMjAwMDoyMDIwJ1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGZpZWxkLnByb3BzID0gQ29tbW9uc1V0aWxzLmRlZmF1bHRzKGZpZWxkLnByb3BzLCBwcm9wcyk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyByZXNvbHZlQXR0cnMoZGF0YUZpZWxkLCBmaWVsZCkge1xuICAgIGNvbnN0IGF0dHJzID0ge307XG4gICAgc3dpdGNoIChkYXRhRmllbGQuZGF0YUF0dHIpIHtcbiAgICAgIGNhc2UgRGF0YUF0dHIuQ1VSUkVOQ1k6XG4gICAgICAgIENvbW1vbnNVdGlscy5zZXQoYXR0cnMsICckZXh0LmlucHV0UnVsZScsICdwbnVtJyk7XG4gICAgICAgIENvbW1vbnNVdGlscy5zZXQoYXR0cnMsICckZXh0LnBvc3RUZXh0JywgJ++/pScpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRGF0YUF0dHIuUEhPTkU6XG4gICAgICAgIENvbW1vbnNVdGlscy5zZXQoYXR0cnMsICckZXh0LmlucHV0UnVsZScsICdwaW50Jyk7XG4gICAgICAgIENvbW1vbnNVdGlscy5zZXQoYXR0cnMsICckZXh0LnByZUljb24nLCAnZmEgZmEtcGhvbmUnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERhdGFBdHRyLklEX0NBUkQ6XG4gICAgICAgIENvbW1vbnNVdGlscy5zZXQoYXR0cnMsICckZXh0LmlucHV0UnVsZScsIC9bMC05XXxYfHgvKTtcbiAgICAgICAgQ29tbW9uc1V0aWxzLnNldChhdHRycywgJyRleHQucHJlSWNvbicsICdmYSBmYS1pZC1jYXJkJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBEYXRhQXR0ci5RUTpcbiAgICAgICAgQ29tbW9uc1V0aWxzLnNldChhdHRycywgJyRleHQuaW5wdXRSdWxlJywgJ3BpbnQnKTtcbiAgICAgICAgQ29tbW9uc1V0aWxzLnNldChhdHRycywgJyRleHQucHJlSWNvbicsICdmYSBmYS1xcScpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRGF0YUF0dHIuV0VfQ0hBVDpcbiAgICAgICAgQ29tbW9uc1V0aWxzLnNldChhdHRycywgJyRleHQuaW5wdXRSdWxlJywgJ3BpbnQnKTtcbiAgICAgICAgQ29tbW9uc1V0aWxzLnNldChhdHRycywgJyRleHQucHJlSWNvbicsICdmYSBmYS13ZWNoYXQnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERhdGFBdHRyLkVNQUlMOlxuICAgICAgICBDb21tb25zVXRpbHMuc2V0KGF0dHJzLCAnJGV4dC5wcmVUZXh0JywgJ0AnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERhdGFBdHRyLlVSTDpcbiAgICAgICAgQ29tbW9uc1V0aWxzLnNldChhdHRycywgJyRleHQucHJlVGV4dCcsICdodHRwOi8vJyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBmaWVsZC5hdHRycyA9IENvbW1vbnNVdGlscy5kZWZhdWx0cyhmaWVsZC5hdHRycywgYXR0cnMpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcmVzb2x2ZVRlbXBsYXRlT3B0aW9ucyhkYXRhRmllbGQsIGZpZWxkKSB7XG4gICAgY29uc3Qgb3B0aW9uczogRXJGb3JtbHlUZW1wbGF0ZU9wdGlvbnMgPSB7fTtcblxuICAgIG9wdGlvbnMubGFiZWwgPSBgJHtkYXRhRmllbGQubGFiZWx9OmA7XG5cbiAgICBpZiAoZGF0YUZpZWxkLnJlcXVpcmVkKSB7XG4gICAgICBvcHRpb25zLnJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGRhdGFGaWVsZC5kZXNjcmlwdGlvbikge1xuICAgICAgb3B0aW9ucy5kZXNjcmlwdGlvbiA9IGRhdGFGaWVsZC5kZXNjcmlwdGlvbjtcbiAgICB9XG4gICAgaWYgKGRhdGFGaWVsZC5wbGFjZWhvbGRlcikge1xuICAgICAgb3B0aW9ucy5wbGFjZWhvbGRlciA9IGRhdGFGaWVsZC5wbGFjZWhvbGRlcjtcbiAgICB9XG4gICAgaWYgKGRhdGFGaWVsZC5kaXNhYmxlZCkge1xuICAgICAgb3B0aW9ucy5kaXNhYmxlZCA9IGRhdGFGaWVsZC5kaXNhYmxlZDtcbiAgICB9XG5cbiAgICBmaWVsZC50ZW1wbGF0ZU9wdGlvbnMgPSBDb21tb25zVXRpbHMuZGVmYXVsdHMoZmllbGQudGVtcGxhdGVPcHRpb25zLCBvcHRpb25zKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIHJlc29sdmVWYWxpZGF0aW9ucyhkYXRhRmllbGQsIGZpZWxkKSB7XG5cbiAgICBjb25zdCB2YWxpZGF0aW9ucyA9IFtdO1xuXG4gICAgaWYgKGRhdGFGaWVsZC5tYXhMZW5ndGgpIHtcbiAgICAgIHZhbGlkYXRpb25zLnB1c2goTmdWYWxpZGF0b3JzLm1heExlbmd0aChkYXRhRmllbGQubWF4TGVuZ3RoKSk7XG4gICAgfVxuICAgIGlmIChkYXRhRmllbGQubWluTGVuZ3RoKSB7XG4gICAgICB2YWxpZGF0aW9ucy5wdXNoKE5nVmFsaWRhdG9ycy5taW5MZW5ndGgoZGF0YUZpZWxkLm1pbkxlbmd0aCkpO1xuICAgIH1cbiAgICBpZiAoZGF0YUZpZWxkLm1heCkge1xuICAgICAgdmFsaWRhdGlvbnMucHVzaChOZ1ZhbGlkYXRvcnMubWF4KGRhdGFGaWVsZC5tYXgpKTtcbiAgICB9XG4gICAgaWYgKGRhdGFGaWVsZC5taW4pIHtcbiAgICAgIHZhbGlkYXRpb25zLnB1c2goTmdWYWxpZGF0b3JzLm1pbihkYXRhRmllbGQubWluKSk7XG4gICAgfVxuICAgIGlmIChkYXRhRmllbGQucGF0dGVybikge1xuICAgICAgdmFsaWRhdGlvbnMucHVzaChOZ1ZhbGlkYXRvcnMucGF0dGVybihkYXRhRmllbGQucGF0dGVybikpO1xuICAgIH1cbiAgICBpZiAoZGF0YUZpZWxkLmRhdGFBdHRyID09PSBEYXRhQXR0ci5JRF9DQVJEKSB7XG4gICAgICB2YWxpZGF0aW9ucy5wdXNoKE5nVmFsaWRhdG9ycy5pZENhcmQpO1xuICAgIH1cblxuICAgIGlmICh2YWxpZGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICBmaWVsZC52YWxpZGF0aW9ucyA9IHZhbGlkYXRpb25zO1xuICAgIH1cblxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcmVzb2x2ZVBhcnNlcnMoZGF0YUZpZWxkLCBmaWVsZCkge1xuICAgIGZpZWxkLnBhcnNlcnMgPSBDb21tb25zVXRpbHMuZ2V0QXJyYXlWYWx1ZShkYXRhRmllbGQucGFyc2VycykgfHwgW107XG4gICAgbGV0IHBhcnNlcjtcbiAgICBzd2l0Y2ggKGRhdGFGaWVsZC5kYXRhQXR0cikge1xuICAgICAgY2FzZSBEYXRhQXR0ci5DVVJSRU5DWTpcbiAgICAgICAgcGFyc2VyID0gKHZhbCkgPT4gdmFsID8gTnVtYmVyKHZhbCkgOiB2YWw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBEYXRhQXR0ci5EQVRFOlxuICAgICAgICBwYXJzZXIgPSAodmFsKSA9PiB2YWwgPyBEYXRlVXRpbHMuZ2V0Rm9ybWF0dGVkRGF0ZSh2YWwsICdZWVlZLU1NLUREJykgOiB2YWw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBEYXRhQXR0ci5EQVRFX1RJTUU6XG4gICAgICAgIHBhcnNlciA9ICh2YWwpID0+IHZhbCA/IERhdGVVdGlscy5nZXRGb3JtYXR0ZWREYXRlKHZhbCwgJ1lZWVktTU0tREQgSEg6bW06c3MnKSA6IHZhbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIERhdGFBdHRyLlRJTUU6XG4gICAgICAgIHBhcnNlciA9ICh2YWwpID0+IHZhbCA/IERhdGVVdGlscy5nZXRGb3JtYXR0ZWREYXRlKHZhbCwgJ0hIOm1tOnNzJykgOiB2YWw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBEYXRhQXR0ci5ZRUFSOlxuICAgICAgICBwYXJzZXIgPSAodmFsKSA9PiB2YWwgPyBEYXRlVXRpbHMuZ2V0Rm9ybWF0dGVkRGF0ZSh2YWwsICdZWVlZJykgOiB2YWw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBEYXRhQXR0ci5NT05USDpcbiAgICAgICAgcGFyc2VyID0gKHZhbCkgPT4gdmFsID8gRGF0ZVV0aWxzLmdldEZvcm1hdHRlZERhdGUodmFsLCAnWVlZWS1NTScpIDogdmFsO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRGF0YUF0dHIuUEVSQ0VOVDpcbiAgICAgICAgcGFyc2VyID0gKHZhbCkgPT4gdmFsID8gTnVtYmVyKHZhbCkgLyAxMDAgOiB2YWw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBEYXRhQXR0ci5JRF9DQVJEOlxuICAgICAgICBwYXJzZXIgPSAodmFsKSA9PiB2YWwgPyB2YWwudG9VcHBlckNhc2UoKSA6IHZhbDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IHBhcnNlcnMgPSBDb21tb25zVXRpbHMuZ2V0QXJyYXlWYWx1ZShkYXRhRmllbGQucGFyc2VycykgfHwgW107XG4gICAgaWYgKHBhcnNlcikge1xuICAgICAgcGFyc2Vycy5wdXNoKCh2YWwpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyKHZhbCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHBhcnNlcnMubGVuZ3RoID4gMCkge1xuICAgICAgZmllbGQucGFyc2VycyA9IHBhcnNlcnM7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcmVzb2x2ZURhdGFGaWVsZChmb3JtUHJvcHM6IEZvcm1Qcm9wcywgZmllbGQ6IEVyRm9ybWx5RmllbGRDb25maWcsIGZvcm1seUZvcm0/KSB7XG4gICAgaWYgKGZpZWxkLmZpZWxkQXJyYXkpIHtcbiAgICAgIGlmIChmaWVsZC53cmFwcGVycykge1xuICAgICAgICBmaWVsZC53cmFwcGVycyA9IENvbW1vbnNVdGlscy5nZXRBcnJheVZhbHVlKGZpZWxkLndyYXBwZXJzKTtcbiAgICAgIH1cbiAgICAgIFBuZ0Zvcm1seVV0aWxzLnJlc29sdmVGaWVsZCgoKSA9PiBmb3JtUHJvcHMsIGZpZWxkLmZpZWxkQXJyYXksICgpID0+IGZvcm1seUZvcm0pOyAvLyBiaW5kIGxhdHRlclxuICAgIH0gZWxzZSBpZiAoZmllbGQuZmllbGRHcm91cCkge1xuICAgICAgaWYgKGZpZWxkLndyYXBwZXJzKSB7XG4gICAgICAgIGZpZWxkLndyYXBwZXJzID0gQ29tbW9uc1V0aWxzLmdldEFycmF5VmFsdWUoZmllbGQud3JhcHBlcnMpO1xuICAgICAgfVxuICAgICAgZmllbGQuZmllbGRHcm91cC5mb3JFYWNoKGFGaWVsZCA9PiB7XG4gICAgICAgIGlmIChmaWVsZC50ZW1wbGF0ZU9wdGlvbnMgJiYgZmllbGQudGVtcGxhdGVPcHRpb25zLmxhbmRzY2FwZSkge1xuICAgICAgICAgIENvbW1vbnNVdGlscy5zZXQoPHt9PmFGaWVsZCwgJ3RlbXBsYXRlT3B0aW9ucy5sYW5kc2NhcGUnLCBmaWVsZC50ZW1wbGF0ZU9wdGlvbnMubGFuZHNjYXBlKTtcbiAgICAgICAgfVxuICAgICAgICBQbmdGb3JtbHlVdGlscy5yZXNvbHZlRmllbGQoZm9ybVByb3BzLCBhRmllbGQsIGZvcm1seUZvcm0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcblxuICAgICAgbGV0IGRhdGFGaWVsZCA9IGZpZWxkLmRhdGFGaWVsZDtcblxuICAgICAgaWYgKGZpZWxkLnRlbXBsYXRlKSB7XG4gICAgICAgIGZpZWxkLnR5cGUgPSAnZm9ybWx5LXRlbXBsYXRlJztcbiAgICAgIH1cblxuICAgICAgaWYgKGZpZWxkLnR5cGUgPT09IFBuZ0Zvcm1seVR5cGVzLmR5bmEpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpZWxkLCAna2V5Jywge1xuICAgICAgICAgIHZhbHVlOiBgJF8ke0lkVXRpbHMuZ2V0UmFuZG9tKCl9YCxcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gZmllbGQua2V5ID0gYCRfJHtJZFV0aWxzLmdldFJhbmRvbSgpfWA7XG4gICAgICB9XG5cbiAgICAgIGlmICghZGF0YUZpZWxkKSB7XG4gICAgICAgIGlmICghZmllbGQudHlwZSkge1xuICAgICAgICAgIGZpZWxkLnR5cGUgPSBQbmdGb3JtbHlUeXBlcy5pbnB1dDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmllbGQucGFyc2Vycykge1xuICAgICAgICAgIGZpZWxkLnBhcnNlcnMgPSBDb21tb25zVXRpbHMuZ2V0QXJyYXlWYWx1ZShmaWVsZC5wYXJzZXJzKTtcbiAgICAgICAgfVxuICAgICAgICBQbmdGb3JtbHlVdGlscy5yZXNvbHZlVmFsaWRhdG9ycyhmaWVsZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZGF0YUZpZWxkID0gQ29tbW9uc1V0aWxzLm1lcmdlKFxuICAgICAgICBEYXRhRmllbGRVdGlscy5nZXRGaWVsZERlZmF1bHRQcm9wcyhkYXRhRmllbGQpLFxuICAgICAgICBkYXRhRmllbGRcbiAgICAgICk7XG5cbiAgICAgIGZpZWxkLmRhdGFGaWVsZCA9IGRhdGFGaWVsZDtcblxuICAgICAgaWYgKGZpZWxkLnR5cGUgJiYgZmllbGQudHlwZSA9PT0gUG5nRm9ybWx5VHlwZXMudmFsdWUpIHtcbiAgICAgICAgZmllbGQua2V5ID0gZmllbGQua2V5IHx8IGZpZWxkLmRhdGFGaWVsZC5rZXk7XG4gICAgICAgIENvbW1vbnNVdGlscy5zZXQoPHt9PmZpZWxkLCAndGVtcGxhdGVPcHRpb25zLmxhYmVsJywgZmllbGQuZGF0YUZpZWxkLmxhYmVsKTtcbiAgICAgICAgcmV0dXJuIGZpZWxkO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXNvbHZlZEZpZWxkOiBFckZvcm1seUZpZWxkQ29uZmlnID0ge307XG5cbiAgICAgIFBuZ0Zvcm1seVV0aWxzLnJlc29sdmVCYXNpYyhkYXRhRmllbGQsIHJlc29sdmVkRmllbGQpO1xuXG4gICAgICBQbmdGb3JtbHlVdGlscy5yZXNvbHZlUHJvcHMoZGF0YUZpZWxkLCByZXNvbHZlZEZpZWxkKTtcblxuICAgICAgUG5nRm9ybWx5VXRpbHMucmVzb2x2ZUF0dHJzKGRhdGFGaWVsZCwgcmVzb2x2ZWRGaWVsZCk7XG5cbiAgICAgIFBuZ0Zvcm1seVV0aWxzLnJlc29sdmVUZW1wbGF0ZU9wdGlvbnMoZGF0YUZpZWxkLCByZXNvbHZlZEZpZWxkKTtcblxuICAgICAgUG5nRm9ybWx5VXRpbHMucmVzb2x2ZVZhbGlkYXRpb25zKGRhdGFGaWVsZCwgcmVzb2x2ZWRGaWVsZCk7XG5cbiAgICAgIENvbW1vbnNVdGlscy5kZWZhdWx0cyhmaWVsZCwgcmVzb2x2ZWRGaWVsZCk7XG5cbiAgICAgIGlmIChmaWVsZC50eXBlID09PSBQbmdGb3JtbHlUeXBlcy5pbnB1dCkge1xuICAgICAgICBpZiAoZmllbGQucHJvcHNbJyRleHQnXS5hcGlEYXRhUHJvcHMpIHtcbiAgICAgICAgICBmaWVsZC50eXBlID0gUG5nRm9ybWx5VHlwZXMuYXV0b0NvbXBsZXRlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhRmllbGQubGVuZ3RoKSB7XG4gICAgICAgICAgQ29tbW9uc1V0aWxzLnNldCg8e30+ZmllbGQsICdhdHRycy5zaXplJywgZGF0YUZpZWxkLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgYXBpRGF0YVByb3BzID0gQ29tbW9uc1V0aWxzLmdldChmaWVsZCwgJ3Byb3BzLiRleHQuYXBpRGF0YVByb3BzJyk7XG5cbiAgICAgIGlmIChhcGlEYXRhUHJvcHMpIHtcbiAgICAgICAgaWYgKCFhcGlEYXRhUHJvcHMuYXBpRW50cnkpIHtcbiAgICAgICAgICBhcGlEYXRhUHJvcHNbJ2FwaUVudHJ5J10gPSBmb3JtUHJvcHMuYXBpRW50cnkgfHwgZm9ybVByb3BzLmVudGl0eSAmJiBmb3JtUHJvcHMuZW50aXR5LmFwaUVudHJ5O1xuICAgICAgICB9XG4gICAgICAgIGlmICghYXBpRGF0YVByb3BzLmRhdGFQYXRoKSB7XG4gICAgICAgICAgYXBpRGF0YVByb3BzWydkYXRhUGF0aCddID0gJ2l0ZW1zJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBQbmdGb3JtbHlVdGlscy5yZXNvbHZlUGFyc2VycyhkYXRhRmllbGQsIHJlc29sdmVkRmllbGQpO1xuXG4gICAgICBpZiAocmVzb2x2ZWRGaWVsZC5wYXJzZXJzKSB7XG4gICAgICAgIGZpZWxkLnBhcnNlcnMgPSBmaWVsZC5wYXJzZXJzIHx8IFtdO1xuICAgICAgICBmaWVsZC5wYXJzZXJzID0gZmllbGQucGFyc2Vycy5jb25jYXQocmVzb2x2ZWRGaWVsZC5wYXJzZXJzKTtcbiAgICAgIH1cblxuICAgICAgUG5nRm9ybWx5VXRpbHMucmVzb2x2ZVZhbGlkYXRvcnMoZmllbGQpO1xuXG4gICAgfVxuICB9XG59XG4iXX0=