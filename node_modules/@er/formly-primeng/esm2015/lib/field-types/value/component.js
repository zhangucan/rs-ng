/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { DataFieldUtils } from '@er/core';
import { BehaviorSubject } from 'rxjs';
import { PngFormlyFieldType } from '../../base/field-type';
/**
 * @record
 */
export function ValueProps() { }
if (false) {
    /** @type {?} */
    ValueProps.prototype.render;
}
export class PngFormlyFieldValueComponent extends PngFormlyFieldType {
    constructor() {
        super(...arguments);
        this.value$ = new BehaviorSubject('');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        if (this.formControl) {
            this.form.valueChanges.subscribe(value => {
                if (this.props['render']) {
                    this.value$.next(this.props['render'](this.formControl.value, this.model, this.field['dataField']));
                }
                else {
                    if (this.field['dataField']) {
                        this.value$.next(DataFieldUtils.getFieldDisplayContent(this.formControl.value, this.field['dataField']));
                    }
                    else {
                        this.value$.next(this.formControl.value || '【未填】');
                    }
                }
            });
        }
    }
}
PngFormlyFieldValueComponent.decorators = [
    { type: Component, args: [{
                template: `
    <span class="field-value font-weight-bold" [innerHTML]="value$|async|erText"></span>
  `
            }] }
];
if (false) {
    /** @type {?} */
    PngFormlyFieldValueComponent.prototype.value$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2Zvcm1seS1wcmltZW5nLyIsInNvdXJjZXMiOlsibGliL2ZpZWxkLXR5cGVzL3ZhbHVlL2NvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBUyxNQUFNLGVBQWUsQ0FBQztBQUNoRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQ3hDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDckMsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7Ozs7QUFFekQsZ0NBRUM7OztJQURDLDRCQUFpQzs7QUFRbkMsTUFBTSxPQUFPLDRCQUE2QixTQUFRLGtCQUFrQjtJQUxwRTs7UUFPRSxXQUFNLEdBQUcsSUFBSSxlQUFlLENBQU0sRUFBRSxDQUFDLENBQUM7SUFrQnhDLENBQUM7Ozs7SUFoQkMsUUFBUTtRQUNOLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNqQixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUN2QyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7b0JBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDckc7cUJBQU07b0JBQ0wsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFO3dCQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQzFHO3lCQUFNO3dCQUNMLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxDQUFDO3FCQUNwRDtpQkFDRjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7WUF4QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRTs7R0FFVDthQUNGOzs7O0lBR0MsOENBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0RhdGFGaWVsZFV0aWxzfSBmcm9tICdAZXIvY29yZSc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1BuZ0Zvcm1seUZpZWxkVHlwZX0gZnJvbSAnLi4vLi4vYmFzZS9maWVsZC10eXBlJztcblxuZXhwb3J0IGludGVyZmFjZSBWYWx1ZVByb3BzIHtcbiAgcmVuZGVyOiAodmFsdWUsIGZpZWxkKSA9PiBzdHJpbmc7XG59XG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZTogYFxuICAgIDxzcGFuIGNsYXNzPVwiZmllbGQtdmFsdWUgZm9udC13ZWlnaHQtYm9sZFwiIFtpbm5lckhUTUxdPVwidmFsdWUkfGFzeW5jfGVyVGV4dFwiPjwvc3Bhbj5cbiAgYFxufSlcbmV4cG9ydCBjbGFzcyBQbmdGb3JtbHlGaWVsZFZhbHVlQ29tcG9uZW50IGV4dGVuZHMgUG5nRm9ybWx5RmllbGRUeXBlIGltcGxlbWVudHMgT25Jbml0IHtcblxuICB2YWx1ZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGFueT4oJycpO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHN1cGVyLm5nT25Jbml0KCk7XG4gICAgaWYgKHRoaXMuZm9ybUNvbnRyb2wpIHtcbiAgICAgIHRoaXMuZm9ybS52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKHZhbHVlID0+IHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHNbJ3JlbmRlciddKSB7XG4gICAgICAgICAgdGhpcy52YWx1ZSQubmV4dCh0aGlzLnByb3BzWydyZW5kZXInXSh0aGlzLmZvcm1Db250cm9sLnZhbHVlLCB0aGlzLm1vZGVsLCB0aGlzLmZpZWxkWydkYXRhRmllbGQnXSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0aGlzLmZpZWxkWydkYXRhRmllbGQnXSkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSQubmV4dChEYXRhRmllbGRVdGlscy5nZXRGaWVsZERpc3BsYXlDb250ZW50KHRoaXMuZm9ybUNvbnRyb2wudmFsdWUsIHRoaXMuZmllbGRbJ2RhdGFGaWVsZCddKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUkLm5leHQodGhpcy5mb3JtQ29udHJvbC52YWx1ZSB8fCAn44CQ5pyq5aGr44CRJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==