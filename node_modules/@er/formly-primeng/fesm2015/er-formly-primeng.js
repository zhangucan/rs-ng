import { distinctUntilChanged } from 'rxjs/operators';
import { of, BehaviorSubject } from 'rxjs';
import { CommonsUtils, ConfigUtils, DateUtils, DialogUtils, IdUtils } from '@er/utils';
import { DataAttr, DataType, UiLandscape } from '@er/types';
import { Component, EventEmitter, Input, Output, ViewChild, ChangeDetectionStrategy, ViewContainerRef, NgModule } from '@angular/core';
import { FormArray, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { DataFieldUtils, LogUtils, RouteBindComponent, ApiUtils, AuthUtils, BaseComponent, DynaContentComponent, ErCoreModule } from '@er/core';
import { FormlyFormComponent, ErFormlyFieldType, ErFormlyFieldWrapper, ErFormlyModule } from '@er/formly';
import { ErPrimeNgModule } from '@er/primeng';
import { NgValidators, ErValidateModule } from '@er/validate';
import { FieldWrapper, FormlyModule } from '@ngx-formly/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const PngFormlyTypes = {
    input: 'pngInput',
    checkbox: 'pngCheckbox',
    radio: 'pngRadio',
    select: 'pngSelect',
    switch: 'pngSwitch',
    button: 'pngButton',
    textArea: 'pngTextArea',
    autoComplete: 'pngAutoComplete',
    calendar: 'pngCalendar',
    chips: 'pngChips',
    editor: 'pngEditor',
    keyFilter: 'pngKeyFilter',
    fileUpload: 'pngFileUpload',
    listBox: 'pngListBox',
    mask: 'pngMask',
    multiSelect: 'pngMultiSelect',
    rating: 'pngRating',
    slider: 'pngSlider',
    spinner: 'pngSpinner',
    selectButton: 'pngSelectButton',
    tree: 'pngTree',
    table: 'pngTable',
    dyna: 'pngDyna',
    value: 'pngValue'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyUtils {
    /**
     * @param {?} formProps
     * @param {?} field
     * @param {?=} formlyForm
     * @return {?}
     */
    static resolveField(formProps, field, formlyForm) {
        if (formProps) {
            field.formProps = formProps;
        }
        if (formlyForm) {
            field.formlyForm = formlyForm;
        }
        field.className = field.className || '' + 'formly-field';
        PngFormlyUtils.resolveDataField(formProps, field, formlyForm);
    }
    /**
     * @param {?} apiEntry
     * @param {?} fieldName
     * @param {?=} query
     * @param {?=} selectable
     * @return {?}
     */
    static distinctSuggestProps(apiEntry, fieldName, query, selectable = false) {
        /** @type {?} */
        const props = {
            type: PngFormlyTypes.autoComplete,
            props: (/** @type {?} */ ({
                minLength: 1,
                size: 5,
                forceSelection: false,
                dropdown: false,
                placeholder: '请输入唯一的代码值',
                onSelect: (ctx) => {
                    if (!selectable) {
                        DialogUtils.error('无效操作', '该值已经存在，不能选择');
                        setTimeout(() => ctx.field.formControl.reset());
                    }
                },
                $ext: {
                    apiDataProps: (/** @type {?} */ ({
                        apiEntry: apiEntry,
                        query: query,
                        searchFields: fieldName,
                        withTerm: true
                    })),
                    dataItemProps: {
                        template: item => `<span title="该值已经存在，不可用"><del>${item[fieldName]}</del></span> `
                    }
                }
            })),
            templateOptions: {
                required: false,
                description: '<span class="text-danger">内容必须唯一，可以不填，不填时系统自动生成</span>'
            }
        };
        return props;
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    static resolveValidators(field) {
        if (field.validators) {
            /** @type {?} */
            const validates = field.validators;
            field.validators = {};
            if (CommonsUtils.isFunction(validates)) {
                field.validators.validation = [validates];
            }
            else if (CommonsUtils.isArray(validates)) {
                field.validators.validation = validates;
            }
            else {
                field.validators = validates;
            }
        }
        if (field.validations) {
            if (field.validators && field.validators['validation']) {
                field.validators.validation = Object.assign({}, field.validators.validation, field.validations);
            }
            else if (field.validators) {
                field.validators = Object.assign({}, field.validators, { validation: field.validations });
            }
            else {
                field.validators = {};
                field.validators.validation = field.validations;
            }
            delete field.validations;
        }
    }
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    static resolveBasic(dataField, field) {
        field.key = field.key || dataField.key;
        if (dataField.hidden) {
            field.hide = true;
        }
        if (dataField.defaultValue !== undefined) {
            field.defaultValue = dataField.defaultValue;
        }
        switch (dataField.dataAttr) {
            case DataAttr.CURRENCY:
                field.dataType = DataType.NUMBER;
                field.defaultValue = 0;
                break;
            case DataAttr.TEXT:
                field.type = PngFormlyTypes.textArea;
                break;
            case DataAttr.DISTINCT:
                Object.assign(field, PngFormlyUtils.distinctSuggestProps(field.apiEntry, field.key));
                break;
        }
        if (!field.type) {
            switch (dataField.dataType) {
                case DataType.STRING:
                    field.type = PngFormlyTypes.input;
                    break;
                case DataType.BOOLEAN:
                    field.type = PngFormlyTypes.switch;
                    break;
                case DataType.NUMBER:
                    field.type = PngFormlyTypes.spinner;
                    break;
                case DataType.DATE:
                    field.type = PngFormlyTypes.calendar;
                    break;
                default:
                    field.type = PngFormlyTypes.input;
            }
        }
    }
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    static resolveProps(dataField, field) {
        /** @type {?} */
        const props = {
            $ext: {}
        };
        if (dataField.dataItems) {
            props.$ext['dataItems'] = dataField.dataItems;
        }
        if (dataField.apiDataProps) {
            props.$ext['apiDataProps'] = dataField.apiDataProps;
        }
        if (dataField.dataItemProps) {
            props.$ext['dataItemProps'] = dataField.dataItemProps;
        }
        if (dataField.dataAttr === DataAttr.DATA_CODE) {
            props['dataKey'] = ConfigUtils.getConfig().dataFieldProps.dataCode.codeKey;
        }
        if (dataField.dataItems) {
            props.$ext['dataItems'] = dataField.dataItems;
        }
        switch (dataField.dataAttr) {
            case DataAttr.DATE_TIME:
                Object.assign(props, (/** @type {?} */ ({
                    dateFormat: 'yy-mm-dd hh:mm',
                    monthNavigator: true,
                    yearNavigator: true,
                    showTime: true
                })));
                break;
            case DataAttr.DATE:
                Object.assign(props, (/** @type {?} */ ({
                    dateFormat: 'yy-mm-dd',
                    monthNavigator: true,
                    yearNavigator: true
                })));
                break;
            case DataAttr.TIME:
                Object.assign(props, (/** @type {?} */ ({
                    timeOnly: true
                })));
                break;
            case DataAttr.MONTH:
                Object.assign(props, (/** @type {?} */ ({
                    view: 'month',
                    dateFormat: 'yy-mm',
                    yearNavigator: true,
                    monthNavigator: true,
                    yearRange: '2000:2020'
                })));
                break;
        }
        field.props = CommonsUtils.defaults(field.props, props);
    }
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    static resolveAttrs(dataField, field) {
        /** @type {?} */
        const attrs = {};
        switch (dataField.dataAttr) {
            case DataAttr.CURRENCY:
                CommonsUtils.set(attrs, '$ext.inputRule', 'pnum');
                CommonsUtils.set(attrs, '$ext.postText', '￥');
                break;
            case DataAttr.PHONE:
                CommonsUtils.set(attrs, '$ext.inputRule', 'pint');
                CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-phone');
                break;
            case DataAttr.ID_CARD:
                CommonsUtils.set(attrs, '$ext.inputRule', /[0-9]|X|x/);
                CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-id-card');
                break;
            case DataAttr.QQ:
                CommonsUtils.set(attrs, '$ext.inputRule', 'pint');
                CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-qq');
                break;
            case DataAttr.WE_CHAT:
                CommonsUtils.set(attrs, '$ext.inputRule', 'pint');
                CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-wechat');
                break;
            case DataAttr.EMAIL:
                CommonsUtils.set(attrs, '$ext.preText', '@');
                break;
            case DataAttr.URL:
                CommonsUtils.set(attrs, '$ext.preText', 'http://');
                break;
        }
        field.attrs = CommonsUtils.defaults(field.attrs, attrs);
    }
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    static resolveTemplateOptions(dataField, field) {
        /** @type {?} */
        const options = {};
        options.label = `${dataField.label}:`;
        if (dataField.required) {
            options.required = true;
        }
        if (dataField.description) {
            options.description = dataField.description;
        }
        if (dataField.placeholder) {
            options.placeholder = dataField.placeholder;
        }
        if (dataField.disabled) {
            options.disabled = dataField.disabled;
        }
        field.templateOptions = CommonsUtils.defaults(field.templateOptions, options);
    }
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    static resolveValidations(dataField, field) {
        /** @type {?} */
        const validations = [];
        if (dataField.maxLength) {
            validations.push(NgValidators.maxLength(dataField.maxLength));
        }
        if (dataField.minLength) {
            validations.push(NgValidators.minLength(dataField.minLength));
        }
        if (dataField.max) {
            validations.push(NgValidators.max(dataField.max));
        }
        if (dataField.min) {
            validations.push(NgValidators.min(dataField.min));
        }
        if (dataField.pattern) {
            validations.push(NgValidators.pattern(dataField.pattern));
        }
        if (dataField.dataAttr === DataAttr.ID_CARD) {
            validations.push(NgValidators.idCard);
        }
        if (validations.length > 0) {
            field.validations = validations;
        }
    }
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    static resolveParsers(dataField, field) {
        field.parsers = CommonsUtils.getArrayValue(dataField.parsers) || [];
        /** @type {?} */
        let parser;
        switch (dataField.dataAttr) {
            case DataAttr.CURRENCY:
                parser = (val) => val ? Number(val) : val;
                break;
            case DataAttr.DATE:
                parser = (val) => val ? DateUtils.getFormattedDate(val, 'YYYY-MM-DD') : val;
                break;
            case DataAttr.DATE_TIME:
                parser = (val) => val ? DateUtils.getFormattedDate(val, 'YYYY-MM-DD HH:mm:ss') : val;
                break;
            case DataAttr.TIME:
                parser = (val) => val ? DateUtils.getFormattedDate(val, 'HH:mm:ss') : val;
                break;
            case DataAttr.YEAR:
                parser = (val) => val ? DateUtils.getFormattedDate(val, 'YYYY') : val;
                break;
            case DataAttr.MONTH:
                parser = (val) => val ? DateUtils.getFormattedDate(val, 'YYYY-MM') : val;
                break;
            case DataAttr.PERCENT:
                parser = (val) => val ? Number(val) / 100 : val;
                break;
            case DataAttr.ID_CARD:
                parser = (val) => val ? val.toUpperCase() : val;
                break;
        }
        /** @type {?} */
        const parsers = CommonsUtils.getArrayValue(dataField.parsers) || [];
        if (parser) {
            parsers.push((val) => {
                try {
                    return parser(val);
                }
                catch (e) {
                    return undefined;
                }
            });
        }
        if (parsers.length > 0) {
            field.parsers = parsers;
        }
    }
    /**
     * @private
     * @param {?} formProps
     * @param {?} field
     * @param {?=} formlyForm
     * @return {?}
     */
    static resolveDataField(formProps, field, formlyForm) {
        if (field.fieldArray) {
            if (field.wrappers) {
                field.wrappers = CommonsUtils.getArrayValue(field.wrappers);
            }
            PngFormlyUtils.resolveField(() => formProps, field.fieldArray, () => formlyForm); // bind latter
        }
        else if (field.fieldGroup) {
            if (field.wrappers) {
                field.wrappers = CommonsUtils.getArrayValue(field.wrappers);
            }
            field.fieldGroup.forEach(aField => {
                if (field.templateOptions && field.templateOptions.landscape) {
                    CommonsUtils.set((/** @type {?} */ (aField)), 'templateOptions.landscape', field.templateOptions.landscape);
                }
                PngFormlyUtils.resolveField(formProps, aField, formlyForm);
            });
        }
        else {
            /** @type {?} */
            let dataField = field.dataField;
            if (field.template) {
                field.type = 'formly-template';
            }
            if (field.type === PngFormlyTypes.dyna) {
                Object.defineProperty(field, 'key', {
                    value: `$_${IdUtils.getRandom()}`,
                    enumerable: false
                });
                // field.key = `$_${IdUtils.getRandom()}`;
            }
            if (!dataField) {
                if (!field.type) {
                    field.type = PngFormlyTypes.input;
                }
                if (field.parsers) {
                    field.parsers = CommonsUtils.getArrayValue(field.parsers);
                }
                PngFormlyUtils.resolveValidators(field);
                return;
            }
            dataField = CommonsUtils.merge(DataFieldUtils.getFieldDefaultProps(dataField), dataField);
            field.dataField = dataField;
            if (field.type && field.type === PngFormlyTypes.value) {
                field.key = field.key || field.dataField.key;
                CommonsUtils.set((/** @type {?} */ (field)), 'templateOptions.label', field.dataField.label);
                return field;
            }
            /** @type {?} */
            const resolvedField = {};
            PngFormlyUtils.resolveBasic(dataField, resolvedField);
            PngFormlyUtils.resolveProps(dataField, resolvedField);
            PngFormlyUtils.resolveAttrs(dataField, resolvedField);
            PngFormlyUtils.resolveTemplateOptions(dataField, resolvedField);
            PngFormlyUtils.resolveValidations(dataField, resolvedField);
            CommonsUtils.defaults(field, resolvedField);
            if (field.type === PngFormlyTypes.input) {
                if (field.props['$ext'].apiDataProps) {
                    field.type = PngFormlyTypes.autoComplete;
                }
                if (dataField.length) {
                    CommonsUtils.set((/** @type {?} */ (field)), 'attrs.size', dataField.length);
                }
            }
            /** @type {?} */
            const apiDataProps = CommonsUtils.get(field, 'props.$ext.apiDataProps');
            if (apiDataProps) {
                if (!apiDataProps.apiEntry) {
                    apiDataProps['apiEntry'] = formProps.apiEntry || formProps.entity && formProps.entity.apiEntry;
                }
                if (!apiDataProps.dataPath) {
                    apiDataProps['dataPath'] = 'items';
                }
            }
            PngFormlyUtils.resolveParsers(dataField, resolvedField);
            if (resolvedField.parsers) {
                field.parsers = field.parsers || [];
                field.parsers = field.parsers.concat(resolvedField.parsers);
            }
            PngFormlyUtils.resolveValidators(field);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyFormComponent extends RouteBindComponent {
    constructor() {
        super(...arguments);
        this.debug = !!!ConfigUtils.getConfig().isProduction;
        this.onFormValueChanges = new EventEmitter();
        this.panelProps = {};
        this._formProps = {};
    }
    /**
     * @return {?}
     */
    get props() {
        return this._props;
    }
    /**
     * @param {?} props
     * @return {?}
     */
    set props(props) {
        this.panelProps = props['panel'] || {};
        this._props = CommonsUtils.omit(props, 'panel');
        this.initFormProps(this._props);
    }
    /**
     * @return {?}
     */
    get formProps() {
        return this._formProps || {};
    }
    /**
     * @param {?} event
     * @return {?}
     */
    formValueChanges(event) {
        if (this.debug) {
            this.formModel$ = of(this.formlyForm.model);
        }
        this.onFormValueChanges.emit(event);
    }
    /**
     * @param {?} props
     * @return {?}
     */
    beforeRoutePropsBind(props) {
        return { props: props };
    }
    /**
     * @param {?} formProps
     * @return {?}
     */
    resolveFormFields(formProps) {
        if (!formProps || !formProps['fields']) {
            LogUtils.error(this, '没有定义fields!', formProps);
            return;
        }
        formProps.formlyForm = this.formlyForm;
        this.formlyForm.formProps = formProps;
        formProps.fields.forEach(field => {
            PngFormlyUtils.resolveField(formProps, field, this.formlyForm);
        });
    }
    /**
     * @return {?}
     */
    afterPropsInit() {
    }
    /**
     * @private
     * @param {?} formProps
     * @return {?}
     */
    initFormProps(formProps) {
        this.resolveFormFields(formProps);
        formProps.$id = IdUtils.getRandom();
        if (formProps.entity) {
            if (!formProps.caption) {
                if (formProps.$routeParams && formProps.$routeParams['id']) {
                    formProps.caption = `编辑${formProps.entity.label}`;
                }
                else {
                    formProps.caption = `添加${formProps.entity.label}`;
                }
            }
            if (!formProps.apiEntry) {
                formProps.apiEntry = formProps.entity.apiEntry;
            }
        }
        if (!formProps.apiEntry) {
            LogUtils.warn([this, '没有定义apiEntry,表单不能提交！', formProps]);
        }
        else if (this.formlyForm) {
            this.formlyForm.apiEntry = formProps.apiEntry;
        }
        if (formProps.beforeSubmit) {
            this.beforeSubmit = formProps.beforeSubmit;
            delete formProps.beforeSubmit;
        }
        if (formProps.valueChanges) {
            this.valueChanges = formProps.valueChanges;
            delete formProps.valueChanges;
        }
        if (formProps.afterSubmit) {
            this.afterSubmit = formProps.afterSubmit;
            delete formProps.afterSubmit;
        }
        if (formProps.entity && formProps.entity.initValue) {
            formProps.model = formProps.entity.initValue;
        }
        else {
            formProps.model = {};
        }
        this._formProps = formProps;
        this.afterPropsInit();
    }
}
PngFormlyFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-formly-form',
                template: `
    <png-panel [showHeader]="panelProps['showHeader']"
               [header]="panelProps['caption']"
               [footer]="panelProps['footer']"
               [icon]="panelProps['icon']"
               [collapsed]="panelProps['collapsed']"
               [toggleable]="panelProps['collapsable']"
               [styleClass]="panelProps['panelStyleClass']"
               [barStyleClass]="panelProps['barStyleClass']"
               [style]="panelProps['panelStyle']"
    >
      <er-formly-form
        class="my-2"
        erPropsBind
        [props]="formProps"
        [beforeSubmit]="beforeSubmit"
        [afterSubmit]="afterSubmit"
        [valueChanges]="valueChanges"
        (onFormValueChanges)="formValueChanges($event)"
      >
      </er-formly-form>
    </png-panel>
    <png-form-debug *ngIf="debug"
                    [model]="formModel$|async"
                    [debugFormProps]="props"
                    [runtimeFormProps]="formProps"
    >
    </png-form-debug>
  `
            }] }
];
PngFormlyFormComponent.propDecorators = {
    debug: [{ type: Input }],
    formlyForm: [{ type: ViewChild, args: [FormlyFormComponent,] }],
    onFormValueChanges: [{ type: Output }],
    props: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyAuditFormComponent extends PngFormlyFormComponent {
    constructor() {
        super(...arguments);
        this.buttonsStyleClass = 'text-center my-5';
        this.submitBtnStyleClass = 'btn btn-success';
        this.resetBtnStyleClass = 'btn btn-danger';
        this.initBtnStyleClass = 'btn btn-alert';
        this.backBtnStyleClass = 'btn btn-info';
    }
    /**
     * @param {?} formProps
     * @return {?}
     */
    resolveFormFields(formProps) {
        if (!formProps || !formProps['fields']) {
            LogUtils.error(this, '没有定义fields!', formProps);
            return;
        }
        if (!formProps.caption) {
            formProps.caption = `审核${formProps.entity.label}信息`;
        }
        formProps.fields.forEach(field => {
            field.type = PngFormlyTypes.value;
            PngFormlyUtils.resolveField(formProps, field, this);
        });
        /** @type {?} */
        const commentField = {
            key: 'comment',
            type: PngFormlyTypes.textArea,
            attrs: {
                placeholder: '请输入您的审核意见或备注'
            },
            templateOptions: {
                label: '审核意见',
                description: '审核不通过时，必须输入不通过的原因',
                minLength: 5
            }
        };
        PngFormlyUtils.resolveField(formProps, commentField, this);
        formProps.fields.push(commentField);
    }
    /**
     * @return {?}
     */
    onAccept() {
        /** @type {?} */
        const newState = this.saveAuditHis();
        ApiUtils.patchById(this.formlyForm.apiEntry, this.formlyForm.modelId, this.getSubmitData(newState), {
            tag: this.formlyForm.formId
        }).subscribe();
    }
    /**
     * @return {?}
     */
    onReject() {
        if (CommonsUtils.isEmpty(this.formlyForm.model['comment'])) {
            DialogUtils.error('操作无效', '请输入不通过的原因');
            return;
        }
        ApiUtils.patchById(this.formlyForm.apiEntry, this.formlyForm.modelId, this.getSubmitData(-1), {
            tag: this.formlyForm.formId
        }).subscribe();
    }
    /**
     * @param {?} state
     * @return {?}
     */
    getSubmitData(state) {
        return {
            audit: {
                state: state,
                auditComment: this.formlyForm.model['comment'],
                auditDate: DateUtils.getFormattedDate(),
                auditorName: AuthUtils.getCurrentUser().fullName,
                auditorId: AuthUtils.getCurrentUser().id
            }
        };
    }
    /**
     * @private
     * @return {?}
     */
    saveAuditHis() {
        /** @type {?} */
        const audit = this.formlyForm.model['audit'];
        if (audit) {
            /** @type {?} */
            const data = this.formlyForm.model;
            delete data['id'];
            ApiUtils.save(`${this.formlyForm.apiEntry}-audit-his`, data, {
                tag: this.formlyForm.formId
            }).subscribe();
            return ++audit['state'];
        }
        return 1;
    }
}
PngFormlyAuditFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-formly-audit-form',
                template: `
    <png-panel [header]="formProps.caption"
               [footer]="formProps.footer"
               [icon]="formProps.icon"
               [toggleable]="formProps.collapsable"
    >
      <er-formly-form
        class="mt-2"
        erPropsBind
        [props]="formProps"
        [beforeSubmit]="beforeSubmit"
        [afterSubmit]="afterSubmit"
      >
        <ng-template erTypedTemplate="buttons">
          <div [ngClass]="buttonsStyleClass">
            <er-button [stateKey]="formlyForm.formId"
                       icon="fa fa-check"
                       label="通&nbsp;&nbsp;&nbsp;过"
                       title="保留数据到服务端"
                       class="mr-2"
                       type="button"
                       [disabled]="!formlyForm.form.valid"
                       [styleClass]="submitBtnStyleClass"
                       (onClick)="onAccept()"
            ></er-button>
            <er-button icon="fa fa-close"
                       class="ml-4"
                       label="不&nbsp;&nbsp;&nbsp;通&nbsp;&nbsp;&nbsp;过"
                       title="恢复到修改前的状态"
                       [styleClass]="resetBtnStyleClass"
                       (onClick)="onReject()"
            >
            </er-button>
          </div>

        </ng-template>
      </er-formly-form>
    </png-panel>

  `
            }] }
];
PngFormlyAuditFormComponent.propDecorators = {
    buttonsStyleClass: [{ type: Input }],
    submitBtnStyleClass: [{ type: Input }],
    resetBtnStyleClass: [{ type: Input }],
    initBtnStyleClass: [{ type: Input }],
    backBtnStyleClass: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormDebugComponent extends BaseComponent {
}
PngFormDebugComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-form-debug',
                template: `
    <p-tabView>
      <p-tabPanel header="Form Data" leftIcon="fa fa-eye text-dark">
        <pre [erJsonViewer]="model"></pre>
      </p-tabPanel>
      <p-tabPanel header="Form Json" leftIcon="fa fa-gear text-info">
        <pre [erJsonViewer]="debugFormProps"></pre>
      </p-tabPanel>
      <p-tabPanel header="Runtime Form Json" leftIcon="fa fa-cogs text-danger">
        <pre [erJsonViewer]="runtimeFormProps"></pre>
      </p-tabPanel>
    </p-tabView>
  `,
                styles: ["/deep/ .ui-tabview-selected{border-bottom:5px solid red!important}/deep/ .ui-tabview-selected .ui-tabview-title{color:#000!important}"]
            }] }
];
PngFormDebugComponent.propDecorators = {
    model: [{ type: Input }],
    debugFormProps: [{ type: Input }],
    runtimeFormProps: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyTabsFormComponent extends PngFormlyFormComponent {
    constructor() {
        super(...arguments);
        this.onTabChange = new EventEmitter();
        this.onTabClose = new EventEmitter();
    }
    /**
     * @param {?} formProps
     * @return {?}
     */
    resolveFormFields(formProps) {
        if (!formProps || !formProps['tabs']) {
            LogUtils.error(this, '没有定义tabs', formProps);
        }
        if (formProps.tabs) {
            formProps.tabs.forEach(tab => {
                tab.fields.forEach(field => {
                    PngFormlyUtils.resolveField(this._formProps, field, this);
                });
            });
            this.formArray = new FormArray(formProps.tabs.map(() => new FormGroup({})));
            this.tabFormlyOptions = formProps.tabs.map((tab) => {
                return Object.assign({}, formProps.options || {}, tab.options || {});
            });
        }
        this.currentTabIndex = formProps.activeIndex || 0;
    }
    /**
     * @return {?}
     */
    afterPropsInit() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    tabChange(event) {
        this.currentTabIndex = event;
        this.onTabChange.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    tabClose(event) {
        this.onTabClose.emit(event);
    }
}
PngFormlyTabsFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-formly-tab',
                template: `
    <png-panel [header]="formProps.caption" [footer]="formProps.footer" [icon]="formProps.icon" [toggleable]="formProps.collapsable">
      <p-tabView [activeIndex]="formProps['activeIndex']"
                 [styleClass]="formProps.styleClass"
                 [style]="formProps.style"
                 [orientation]="formProps['tabOrientation']"
                 (onChange)="tabChange($event)"
                 (onClose)="tabClose($event)"
      >
        <ng-container>
          <p-tabPanel *ngFor="let tab of formProps['tabs']; let i = index"
                      [header]="tab.caption"
                      [headerStyle]="tab.style"
                      [headerStyleClass]="tab.styleClass"
                      [leftIcon]="tab.leftIcon"
                      [rightIcon]="tab.rightIcon"
          >
            <formly-form
              [form]="formArray.at(i)"
              [(model)]="formProps.model"
              [fields]="tab.fields"
              [options]="tabFormlyOptions[i]">
            </formly-form>
          </p-tabPanel>
        </ng-container>
      </p-tabView>
    </png-panel>

    <div [ngClass]="formProps.buttonsStyleClass">
      <er-button [stateKey]="formProps.$id"
                 icon="fa fa-save"
                 label="提&nbsp;&nbsp;&nbsp;交"
                 title="保留数据到服务端"
                 class="mr-2"
                 type="button"
                 (onClick)="formlyForm.submit()"
                 [styleClass]="formProps.submitBtnStyleClass"
      ></er-button>
      <er-button icon="fa fa-circle-o"
                 class="mr-2"
                 label="重&nbsp;&nbsp;&nbsp;填"
                 title="恢复到修改前的状态"
                 [styleClass]="formProps.resetBtnStyleClass"
                 (onClick)="formlyForm.resetModel()">
      </er-button>

      <ng-container *ngFor="let btn of formProps.buttons">
        <er-button erPropsBind [props]="btn" [context]="btn.context"></er-button>
      </ng-container>
    </div>

    <!--<png-form-debug [model]="formModel"-->
    <!--[debugFormProps]="props"-->
    <!--[runtimeFormProps]="formProps">-->
    <!--</png-form-debug>-->
  `,
                styles: [":host::ng-deep .ui-tabview .ui-state-active{background-color:transparent!important}:host::ng-deep .ui-tabview .ui-tabview-panel{margin:10px}:host::ng-deep .ui-tabview .ui-tabview-selected{border-left:5px solid #3bdc06}"]
            }] }
];
PngFormlyTabsFormComponent.propDecorators = {
    onTabChange: [{ type: Output }],
    onTabClose: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyWizardFormComponent extends PngFormlyFormComponent {
    constructor() {
        super(...arguments);
        this.stepChange = new EventEmitter();
    }
    /**
     * @param {?} formProps
     * @return {?}
     */
    resolveFormFields(formProps) {
        if (!formProps || !formProps['steps']) {
            LogUtils.error(this, '没有定义steps', formProps);
        }
        if (formProps.steps) {
            formProps.steps.forEach(step => {
                step.fields.forEach(field => {
                    PngFormlyUtils.resolveField(formProps, field, this);
                });
            });
            this.formArray = new FormArray(formProps.steps.map(() => new FormGroup({})));
            this.stepFormlyOptions = formProps.steps.map((step) => {
                return Object.assign({}, formProps.options || {}, step.options || {});
            });
        }
        this.currentStepIndex = formProps.activeIndex || 0;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onStepChange(event) {
        this.currentStepIndex = event;
        this.stepChange.emit(event);
    }
}
PngFormlyWizardFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'png-formly-wizard',
                template: `
    <png-panel [header]="formProps.header" [footer]="formProps.footer" [icon]="formProps.icon" [toggleable]="formProps.collapsable">
      <png-wizard [(activeIndex)]="currentStepIndex"
                  (stepChange)="onStepChange($event)"
                  [styleClass]="formProps.styleClass"
                  [style]="formProps.style"
                  [stepStyleClass]="formProps['stepStyleClass']"
                  [stepStyle]="formProps['stepStyle']"
      >
        <ng-container *ngFor="let step of formProps['steps']; let i = index;">
          <png-step
            [label]="step.label"
            [styleClass]="step.styleClass"
            [style]="step.style"
          >
            <formly-form
              [form]="formArray.at(i)"
              [(model)]="formProps.model"
              [fields]="step.fields"
              [options]="stepFormlyOptions[i]">
            </formly-form>
          </png-step>
        </ng-container>
        <ng-template erTypedTemplate="footer">
          <button pButton type="button" *ngIf="currentStepIndex+1 === formProps['steps'].length"
                  class="pull-right" icon="fa fa-save" iconPos="right" label="提交"></button>
        </ng-template>
      </png-wizard>
    </png-panel>
    <!--<png-form-debug [model]="formModel"-->
    <!--[debugFormProps]="debugFormProps"-->
    <!--[runtimeFormProps]="formProps">-->
    <!--</png-form-debug>-->
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
PngFormlyWizardFormComponent.propDecorators = {
    stepChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const Components = [
    PngFormlyFormComponent,
    PngFormlyAuditFormComponent,
    PngFormlyWizardFormComponent,
    PngFormlyTabsFormComponent,
    PngFormDebugComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class PngFormlyFieldType extends ErFormlyFieldType {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyAutoCompleteComponent extends PngFormlyFieldType {
}
PngFormlyAutoCompleteComponent.decorators = [
    { type: Component, args: [{
                template: `
    <div class="d-flex">
      <png-auto-complete class="m-auto w-100"
      formlyPropsBind
      [props]="props"
      [formControl]="formControl"
    ></png-auto-complete>
      <png-buttons *ngIf="props['$ext'].buttons" class="pull-right" [btns]="props['$ext'].buttons" [context]="field"></png-buttons>
    </div>
    <div *ngIf="props['multiple']" class="small text-muted pl-2">提示：可以选择多项</div>

  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyButtonComponent extends PngFormlyFieldType {
}
PngFormlyButtonComponent.decorators = [
    { type: Component, args: [{
                template: `
    <png-button
      formlyPropsBind
      [props]="props"
      [formControl]="formControl"
    >
    </png-button>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyCalendarComponent extends PngFormlyFieldType {
}
PngFormlyCalendarComponent.decorators = [
    { type: Component, args: [{
                template: `
    <png-calendar
      formlyPropsBind
      [props]="props"
      [formControl]="formControl"
    ></png-calendar>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyCheckboxComponent extends PngFormlyFieldType {
}
PngFormlyCheckboxComponent.decorators = [
    { type: Component, args: [{
                template: `
    <png-check-box
      formlyPropsBind
      [props]="props"
      [formControl]="formControl"
    ></png-check-box>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyChipsComponent extends PngFormlyFieldType {
    constructor() {
        super(...arguments);
        this.defaultProps = {
            allowDuplicate: false,
            addOnBlur: true,
            max: 2
        };
    }
}
PngFormlyChipsComponent.decorators = [
    { type: Component, args: [{
                template: `
    <p-chips
      formlyPropsBind
      [props]="props"
      [formControl]="formControl"
    >
    </p-chips>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyFieldDynaComponent extends PngFormlyFieldType {
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        if (this.props['refreshOnForm']) {
            /** @type {?} */
            const form = this.field.formlyForm.form;
            this.subscription = form.valueChanges
                .pipe(distinctUntilChanged())
                .subscribe(_ => {
                this.comp.refresh();
            });
        }
        else if (this.props['refreshOnField']) {
            /** @type {?} */
            const formControl = this.field.formlyForm.formControl(this.props['refreshOnField']);
            this.subscription = formControl.valueChanges
                .pipe(distinctUntilChanged())
                .subscribe(_ => {
                this.comp.refresh();
            });
        }
        else {
            this.comp.refresh();
        }
    }
    /**
     * @return {?}
     */
    unsubscribe() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unsubscribe();
    }
}
PngFormlyFieldDynaComponent.decorators = [
    { type: Component, args: [{
                template: `
    <er-dyna-content [content]="props['content']" [context]="{field: field}"></er-dyna-content>
  `
            }] }
];
PngFormlyFieldDynaComponent.propDecorators = {
    comp: [{ type: ViewChild, args: [DynaContentComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyEditorComponent extends PngFormlyFieldType {
    constructor() {
        super(...arguments);
        this.defaultProps = {
            style: { height: '200px' }
        };
    }
}
PngFormlyEditorComponent.decorators = [
    { type: Component, args: [{
                template: `
    <p-editor formlyPropsBind
              [props]="props"
              [formControl]="formControl"
    >
    </p-editor>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyFileUploadComponent extends PngFormlyFieldType {
}
PngFormlyFileUploadComponent.decorators = [
    { type: Component, args: [{
                template: `
    <png-file-upload
      erPropsBind
      [props]="props"
      [formControl]="formControl"
    >
    </png-file-upload>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyInputComponent extends PngFormlyFieldType {
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.field['attrs'] = Object.assign({}, this.to || {}, this.attrs);
        if (!this.field['attrs']['disabled']) {
            delete this.field['attrs']['disabled'];
        }
    }
}
PngFormlyInputComponent.decorators = [
    { type: Component, args: [{
                template: `
    <png-input
      formlyPropsBind
      [attrs]="attrs"
      [formControl]="formControl"
    >
    </png-input>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyKeyFilterComponent extends PngFormlyFieldType {
}
PngFormlyKeyFilterComponent.decorators = [
    { type: Component, args: [{
                template: `    
    <input 
      type="text" 
      formlyPropsBind
      [props]="props"
      [attrs]="attrs"
      [formControl]="formControl"
    />
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyListBoxComponent extends PngFormlyFieldType {
}
PngFormlyListBoxComponent.decorators = [
    { type: Component, args: [{
                template: `
    <png-list-box
      formlyPropsBind
      [props]="props"
      [formControl]="formControl"
    ></png-list-box>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyMaskComponent extends PngFormlyFieldType {
}
PngFormlyMaskComponent.decorators = [
    { type: Component, args: [{
                template: `
    <p-inputMask
             [mask]="to['mask']"
             [formControl]="formControl"
    >
    </p-inputMask>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyMultiSelectComponent extends PngFormlyFieldType {
}
PngFormlyMultiSelectComponent.decorators = [
    { type: Component, args: [{
                template: `
    <png-multi-select
      formlyPropsBind
      [props]="props"
      [formControl]="formControl"
    ></png-multi-select>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyRadioComponent extends PngFormlyFieldType {
    constructor() {
        super(...arguments);
        this.defaultProps = {
            $ext: {
                inline: true
            }
        };
    }
}
PngFormlyRadioComponent.decorators = [
    { type: Component, args: [{
                template: `
    <png-radio
      formlyPropsBind
      [props]="props"
      [formControl]="formControl"
    ></png-radio>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyRatingComponent extends PngFormlyFieldType {
}
PngFormlyRatingComponent.decorators = [
    { type: Component, args: [{
                template: `
    <png-rating
      formlyPropsBind
      [props]="props"
      [formControl]="formControl"
    >
    </png-rating>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlySelectButtonComponent extends PngFormlyFieldType {
}
PngFormlySelectButtonComponent.decorators = [
    { type: Component, args: [{
                template: `
        <p>当前值: {{formControl.value}}</p>
        <png-select-button
          formlyPropsBind
          [props]="props"
          [formControl]="formControl"
        >
      </png-select-button>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlySelectComponent extends PngFormlyFieldType {
    constructor() {
        super(...arguments);
        this.defaultProps = {
            placeholder: '请选择'
        };
    }
}
PngFormlySelectComponent.decorators = [
    { type: Component, args: [{
                template: `
    <png-select
      formlyPropsBind
      [props]="props"
      [formControl]="formControl"
    ></png-select>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlySliderComponent extends PngFormlyFieldType {
    constructor() {
        super(...arguments);
        this.defaultProps = {
            range: true,
            min: 0,
            max: 100,
            orientation: 'horizontal'
        };
    }
}
PngFormlySliderComponent.decorators = [
    { type: Component, args: [{
                template: `
    <png-slider
      formlyPropsBind
      [props]="props"
      [formControl]="formControl"
    ></png-slider>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlySpinnerComponent extends PngFormlyFieldType {
}
PngFormlySpinnerComponent.decorators = [
    { type: Component, args: [{
                template: `
    <p-spinner
      formlyPropsBind
      [props]="props"
      [context]="{field:field}"
      [formControl]="formControl"
      [pKeyFilter]="props['inputRule'] || 'num'"
    ></p-spinner>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlySwitchComponent extends PngFormlyFieldType {
}
PngFormlySwitchComponent.decorators = [
    { type: Component, args: [{
                template: `
    <p-inputSwitch
      formlyPropsBind
      [props]="props"
      [formControl]="formControl"
    >
    </p-inputSwitch>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyTableComponent extends PngFormlyFieldType {
    constructor() {
        super(...arguments);
        this.defaultProps = {
            selectionMode: 'checkbox',
        };
    }
}
PngFormlyTableComponent.decorators = [
    { type: Component, args: [{
                template: `
    <png-table
      formlyPropsBind
      [props]="props"
      [formControl]="formControl"
    >
    </png-table>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyTextAreaComponent extends PngFormlyFieldType {
    constructor() {
        super(...arguments);
        this.defaultProps = {
            rows: 3,
            autoResize: true
        };
    }
}
PngFormlyTextAreaComponent.decorators = [
    { type: Component, args: [{
                template: `
    <textarea
      pInputTextarea
      [cols]="props['cols']"
      [rows]="props['rows']"
      [autoResize]="props['autoResize']"
      [placeholder]="to.placeholder || '输入内容'"
      [formControl]="formControl"
    >
    </textarea>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyTreeComponent extends PngFormlyFieldType {
    constructor() {
        super(...arguments);
        this.defaultProps = {
            selectionMode: 'checkbox',
        };
    }
}
PngFormlyTreeComponent.decorators = [
    { type: Component, args: [{
                template: `
    <png-tree
      formlyPropsBind
      [props]="props"
      [formControl]="formControl"
    >
    </png-tree>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyFieldValueComponent extends PngFormlyFieldType {
    constructor() {
        super(...arguments);
        this.value$ = new BehaviorSubject('');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        if (this.formControl) {
            this.form.valueChanges.subscribe(value => {
                if (this.props['render']) {
                    this.value$.next(this.props['render'](this.formControl.value, this.model, this.field['dataField']));
                }
                else {
                    if (this.field['dataField']) {
                        this.value$.next(DataFieldUtils.getFieldDisplayContent(this.formControl.value, this.field['dataField']));
                    }
                    else {
                        this.value$.next(this.formControl.value || '【未填】');
                    }
                }
            });
        }
    }
}
PngFormlyFieldValueComponent.decorators = [
    { type: Component, args: [{
                template: `
    <span class="field-value font-weight-bold" [innerHTML]="value$|async|erText"></span>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngCardWrapperComponent extends FieldWrapper {
}
PngCardWrapperComponent.decorators = [
    { type: Component, args: [{
                template: `
    <div class="card" [ngClass]="to['card']?.styleClass" [ngStyle]="to['card']?.style">
      <h3 class="card-header"><i [ngClass]="to['card']?.icon"></i> <span [innerHTML]="to['card']?.header"></span></h3>
      <div class="card-body">
        <ng-container #fieldComponent></ng-container>
      </div>
    </div>
  `
            }] }
];
PngCardWrapperComponent.propDecorators = {
    fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFieldSetWrapperComponent extends FieldWrapper {
}
PngFieldSetWrapperComponent.decorators = [
    { type: Component, args: [{
                template: `
    <p-fieldset [collapsed]="to['fieldSet']?.collapsed"
                [legend]="to['fieldSet']?.legend"
                [styleClass]="to['fieldSet']?.styleClass"
                [style]="to['fieldSet']?.style"
                [toggleable]="to['fieldSet']?.toggleable || true">
      <ng-container #fieldComponent></ng-container>
    </p-fieldset>
  `,
                styles: ["/deep/ legend{font-size:1.2rem!important}"]
            }] }
];
PngFieldSetWrapperComponent.propDecorators = {
    fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyHorizontalWrapperComponent extends ErFormlyFieldWrapper {
    /**
     * @return {?}
     */
    get description() {
        return CommonsUtils.getValue(this.to.description, this.field);
    }
}
PngFormlyHorizontalWrapperComponent.decorators = [
    { type: Component, args: [{
                template: `
    <div class="fieldset w-100">
      <div class="fieldset-{{field.key}}-horizontal py-2" [ngClass]="field.fieldSetStyleClass || 'm-2'"
           [ngStyle]="field.fieldSetStyle">
        <div class="row align-items-center">
          <div class="field-label-horizontal label-{{field.key}}" [ngClass]="field.labelStyleClass || 'col-3 pull-right'">
            <label *ngIf="to.label && to['hideLabel'] !== true" [attr.for]="id" style="float:right;font-weight: bold">
              <span *ngIf="to.required && to['hideRequiredMarker'] !== true" style="color: red" title="必填内容">*</span> {{ to.label }}
            </label>
          </div>
          <div [ngClass]="field.fieldStyleClass || 'col-9 pull-left'">
            <div class="d-flex flex-column align-items-start">

              <ng-container *ngIf="to['before'] && to['before'].content">
                <er-dyna-content [content]="to['before'].content" [context]="field"></er-dyna-content>
              </ng-container>

              <div class="ui-fluid w-100 mr-2 pr-2 field-control-horizontal field-{{field.key}}"
                   [ngClass]="field.fieldStyleClass" [ngStyle]="field.fieldStyle">
                <ng-template #fieldComponent></ng-template>
              </div>

              <div *ngIf="field.showErrors !== false" class="invalid-feedback d-block" [ngClass]="field.validationStyleClass"
                   [ngStyle]="field.validationStyle">
                <er-validate-messages [formlyField]="field"></er-validate-messages>
              </div>

              <ng-container *ngIf="to.description">
                <div class="field-description-horizontal field-{{field.key}}-description">
                  <small class="form-text text-muted">
                    <i class="text-primary fa fa-info-circle"></i>&nbsp;
                    <span [innerHTML]="description"></span>
                  </small>
                </div>
              </ng-container>

              <ng-container *ngIf="to['after'] && to['after'].content">
                <er-dyna-content [content]="to['after'].content" [context]="field"></er-dyna-content>
              </ng-container>

            </div>
          </div>
        </div>
      </div>
    </div>
  `,
                styles: [""]
            }] }
];
PngFormlyHorizontalWrapperComponent.propDecorators = {
    fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngPanelWrapperComponent extends FieldWrapper {
    /**
     * @return {?}
     */
    get isToggleable() {
        return (this.to['panel'] && this.to['panel'].toggleable) !== undefined
            ? this.to['panel'].toggleable
            : true;
    }
}
PngPanelWrapperComponent.decorators = [
    { type: Component, args: [{
                template: `
    <png-panel
      [collapsed]="to['panel']?.collapsed"
      [toggleable]="isToggleable"
      [showHeader]="to['panel']?.showHeader === undefined ? true : to['panel']?.showHeader"
      [barStyleClass]="to['panel']?.barStyleClass"
      [barStyle]="to['panel']?.barStyle"
      [style]="to['panel']?.style"
      [styleClass]="to['panel']?.styleClass">
      <ng-container *ngIf="to['panel']?.header">
        <ng-template erTypedTemplate="header">
          <er-dyna-content [content]="to['panel'].header" styleClass="d-inline"></er-dyna-content>
        </ng-template>
      </ng-container>
      <ng-template #fieldComponent></ng-template>
      <ng-container *ngIf="to['panel']?.footer">
        <ng-template erTypedTemplate="footer">
          <er-dyna-content [content]="to['panel']?.footer" styleClass="d-inline"></er-dyna-content>
        </ng-template>
      </ng-container>
    </png-panel>
  `
            }] }
];
PngPanelWrapperComponent.propDecorators = {
    fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyResponsiveWrapperComponent extends ErFormlyFieldWrapper {
}
PngFormlyResponsiveWrapperComponent.decorators = [
    { type: Component, args: [{
                template: `
    <div class="fieldset-{{field.key}}-responsive" [ngClass]="field.fieldSetStyleClass" [ngStyle]="field.fieldSetStyle">
      
        <div *ngIf="to.label && to['hideLabel'] !== true && to['floatLabel'] !== true" class="field-label-vertical label-{{field.key}}"
             [ngClass]="field.labelStyleClass" [ngStyle]="field.labelStyle">
          <label [attr.for]="id" style="font-weight: bold">
            <span *ngIf="to.required && to['hideRequiredMarker'] !== true" style="color: red">*</span> {{ to.label }}
          </label>
        </div>

        <ng-container *ngIf="to['before'] && to['before'].content">
          <er-dyna-content [content]="to['before'].content" [context]="to['before'].context"></er-dyna-content>
        </ng-container>

        <div class="ui-fluid w-100 field-control-vertical field-{{field.key}}"
             [ngClass]="field.fieldStyleClass" [ngStyle]="field.fieldStyle">
          <ng-template #fieldComponent></ng-template>
        </div>

        <ng-container *ngIf="to.description">
          <div class="field-description-vertical field-{{field.key}}">
            <small class="form-text text-muted">
              <i class="text-primary fa fa-info-circle"></i>
              <er-dyna-content [content]="to.description" [context]="field"></er-dyna-content>
            </small>
          </div>
        </ng-container>

        <ng-container *ngIf="to['after'] && to['after'].content">
          <er-dyna-content [content]="to['after'].content" [context]="to['after'].context"></er-dyna-content>
        </ng-container>
      
    </div>
  `
            }] }
];
PngFormlyResponsiveWrapperComponent.propDecorators = {
    fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngScrollPanelWrapperComponent extends FieldWrapper {
}
PngScrollPanelWrapperComponent.decorators = [
    { type: Component, args: [{
                template: `
    <p-scrollPanel [style]="to['scroll']?.style" [styleClass]="to['scroll']?.styleClass">
      <ng-container #fieldComponent></ng-container>
    </p-scrollPanel >
  `
            }] }
];
PngScrollPanelWrapperComponent.propDecorators = {
    fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PngFormlyVerticalWrapperComponent extends ErFormlyFieldWrapper {
}
PngFormlyVerticalWrapperComponent.decorators = [
    { type: Component, args: [{
                template: `
   <div class="fieldset w-100"> 
    <div class="fieldset-{{field.key}}-vertical" [ngClass]="field.fieldSetStyleClass || 'm-2 p-2'"
         [ngStyle]="field.fieldSetStyle">
      <div class="row flex-column align-items-center">

        <div *ngIf="to.label && to['hideLabel'] !== true && to['floatLabel'] !== true" class="field-label-vertical label-{{field.key}}">
          <label [attr.for]="id" style="font-weight: bold">
            <span *ngIf="to.required && to['hideRequiredMarker'] !== true" style="color: red" title="必填内容">*</span> {{ to.label }}
          </label>
        </div>

        <ng-container *ngIf="to['before'] && to['before'].content">
          <er-dyna-content [content]="to['before'].content" [context]="to['before'].context"></er-dyna-content>
        </ng-container>

        <div class="ui-fluid w-100 p-1 field-control-vertical field-{{field.key}}"
             [ngClass]="field.fieldStyleClass" [ngStyle]="field.fieldStyle">
          <ng-template #fieldComponent></ng-template>
        </div>

        <div *ngIf="field.showErrors" class="invalid-feedback d-block" [ngClass]="field.validationStyleClass"
             [ngStyle]="field.validationStyle">
          <er-validate-messages [formlyField]="field"></er-validate-messages>
        </div>

        <ng-container *ngIf="to.description">
          <div class="field-description-vertical field-{{field.key}}">
            <small class="form-text text-muted">
              <i class="text-primary fa fa-info-circle"></i>&nbsp;
              <er-dyna-content styleClass="d-inline" [content]="to.description" [context]="field"></er-dyna-content>
            </small>
          </div>
        </ng-container>

        <ng-container *ngIf="to['after'] && to['after'].content">
          <er-dyna-content [content]="to['after'].content" [context]="to['after'].context"></er-dyna-content>
        </ng-container>
      </div>
    </div>
   </div>
  `,
                styles: [""]
            }] }
];
PngFormlyVerticalWrapperComponent.propDecorators = {
    fieldComponent: [{ type: ViewChild, args: ['fieldComponent', { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const PngFormlyWrappers = {
    pngFieldWrapper: 'pngFieldWrapper',
    pngFieldSetWrapper: 'pngFieldSetWrapper',
    pngVerticalWrapper: 'pngVerticalWrapper',
    pngHorizontalWrapper: 'pngHorizontalWrapper',
    pngResponsiveWrapper: 'pngResponsiveWrapper',
    pngCardWrapper: 'pngCardWrapper',
    pngPanelWrapper: 'pngPanelWrapper',
    pngScrollPanelWrapper: 'pngScrollPanelWrapper'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const excludeTypes = [
    PngFormlyTypes.button
];
class TemplatePngField {
    /**
     * @param {?} fc
     * @return {?}
     */
    run(fc) {
        fc.templateManipulators.preWrapper.push((field) => {
            if (field && field.type && field.type.startsWith('png') && excludeTypes.indexOf(field.type) === -1) {
                /** @type {?} */
                let landscape = field && field.templateOptions && field.templateOptions.landscape;
                if (!landscape) {
                    landscape = field && field.formProps && field.formProps.landscape;
                }
                switch (landscape || UiLandscape.vertical) {
                    case UiLandscape.horizontal:
                        return PngFormlyWrappers.pngHorizontalWrapper;
                    case UiLandscape.responsive:
                        return PngFormlyWrappers.pngResponsiveWrapper;
                    default:
                        return PngFormlyWrappers.pngVerticalWrapper;
                }
            }
        });
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const PNG_FORMLY_CONFIG = {
    types: [
        {
            name: PngFormlyTypes.input,
            component: PngFormlyInputComponent
        },
        {
            name: PngFormlyTypes.checkbox,
            component: PngFormlyCheckboxComponent
        },
        {
            name: PngFormlyTypes.textArea,
            component: PngFormlyTextAreaComponent
        },
        {
            name: PngFormlyTypes.radio,
            component: PngFormlyRadioComponent
        },
        {
            name: PngFormlyTypes.select,
            component: PngFormlySelectComponent
        },
        {
            name: PngFormlyTypes.button,
            component: PngFormlyButtonComponent
        },
        {
            name: PngFormlyTypes.autoComplete,
            component: PngFormlyAutoCompleteComponent
        },
        {
            name: PngFormlyTypes.calendar,
            component: PngFormlyCalendarComponent
        },
        {
            name: PngFormlyTypes.chips,
            component: PngFormlyChipsComponent
        },
        {
            name: PngFormlyTypes.editor,
            component: PngFormlyEditorComponent
        },
        {
            name: PngFormlyTypes.fileUpload,
            component: PngFormlyFileUploadComponent
        },
        {
            name: PngFormlyTypes.keyFilter,
            component: PngFormlyKeyFilterComponent
        },
        {
            name: PngFormlyTypes.listBox,
            component: PngFormlyListBoxComponent
        },
        {
            name: PngFormlyTypes.mask,
            component: PngFormlyMaskComponent
        },
        {
            name: PngFormlyTypes.switch,
            component: PngFormlySwitchComponent
        },
        {
            name: PngFormlyTypes.multiSelect,
            component: PngFormlyMultiSelectComponent
        },
        {
            name: PngFormlyTypes.rating,
            component: PngFormlyRatingComponent
        },
        {
            name: PngFormlyTypes.slider,
            component: PngFormlySliderComponent
        },
        {
            name: PngFormlyTypes.spinner,
            component: PngFormlySpinnerComponent
        },
        {
            name: PngFormlyTypes.selectButton,
            component: PngFormlySelectButtonComponent
        },
        {
            name: PngFormlyTypes.table,
            component: PngFormlyTableComponent
        },
        {
            name: PngFormlyTypes.tree,
            component: PngFormlyTreeComponent
        },
        {
            name: PngFormlyTypes.value,
            component: PngFormlyFieldValueComponent
        },
        {
            name: PngFormlyTypes.dyna,
            component: PngFormlyFieldDynaComponent
        }
    ],
    wrappers: [
        { name: PngFormlyWrappers.pngVerticalWrapper, component: PngFormlyVerticalWrapperComponent },
        { name: PngFormlyWrappers.pngHorizontalWrapper, component: PngFormlyHorizontalWrapperComponent },
        { name: PngFormlyWrappers.pngResponsiveWrapper, component: PngFormlyResponsiveWrapperComponent },
        { name: PngFormlyWrappers.pngFieldSetWrapper, component: PngFieldSetWrapperComponent },
        { name: PngFormlyWrappers.pngCardWrapper, component: PngCardWrapperComponent },
        { name: PngFormlyWrappers.pngPanelWrapper, component: PngPanelWrapperComponent },
        { name: PngFormlyWrappers.pngScrollPanelWrapper, component: PngScrollPanelWrapperComponent }
    ],
    manipulators: [
        { class: TemplatePngField, method: 'run' }
    ]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const PNG_FORMLY_TYPE_COMPONENTS = [
    PngFormlyTextAreaComponent,
    PngFormlySelectComponent,
    PngFormlyRadioComponent,
    PngFormlyCheckboxComponent,
    PngFormlyInputComponent,
    PngFormlyAutoCompleteComponent,
    PngFormlyMultiSelectComponent,
    PngFormlyCalendarComponent,
    PngFormlyChipsComponent,
    PngFormlyEditorComponent,
    PngFormlyKeyFilterComponent,
    PngFormlyListBoxComponent,
    PngFormlyMaskComponent,
    PngFormlyRatingComponent,
    PngFormlySliderComponent,
    PngFormlySelectButtonComponent,
    PngFormlyFileUploadComponent,
    PngFormlyButtonComponent,
    PngFormlySwitchComponent,
    PngFormlySpinnerComponent,
    PngFormlyTableComponent,
    PngFormlyTreeComponent,
    PngFormlyFieldValueComponent,
    PngFormlyFieldDynaComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const PNG_FORMLY_WRAPPERS = [
    PngFormlyVerticalWrapperComponent,
    PngFormlyHorizontalWrapperComponent,
    PngFormlyResponsiveWrapperComponent,
    PngPanelWrapperComponent,
    PngCardWrapperComponent,
    PngFieldSetWrapperComponent,
    PngScrollPanelWrapperComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ErFormlyPrimeNgModule {
}
ErFormlyPrimeNgModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    ReactiveFormsModule,
                    ErCoreModule,
                    ErValidateModule,
                    ErFormlyModule,
                    ErPrimeNgModule,
                    FormlyModule.forChild(PNG_FORMLY_CONFIG)
                ],
                declarations: [
                    ...PNG_FORMLY_TYPE_COMPONENTS,
                    ...PNG_FORMLY_WRAPPERS,
                    ...Components
                ],
                exports: [
                    FormlyModule,
                    ...Components
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ErFormlyPrimeNgModule, PngFormlyAuditFormComponent, PngFormlyFormComponent, PngFormlyWizardFormComponent, PngFormlyTabsFormComponent, PngFormDebugComponent, Components, PNG_FORMLY_CONFIG, PngFormlyInputComponent, PngFormlyCheckboxComponent, PngFormlyRadioComponent, PngFormlySelectComponent, PngFormlyTextAreaComponent, PngFormlyAutoCompleteComponent, PngFormlyButtonComponent, PngFormlyCalendarComponent, PngFormlyChipsComponent, PngFormlyEditorComponent, PngFormlyFileUploadComponent, PngFormlyKeyFilterComponent, PngFormlyListBoxComponent, PngFormlyMaskComponent, PngFormlyMultiSelectComponent, PngFormlyRatingComponent, PngFormlySelectButtonComponent, PngFormlySliderComponent, PngFormlySpinnerComponent, PngFormlySwitchComponent, PngFormlyTableComponent, PngFormlyTreeComponent, PngFormlyFieldValueComponent, PngFormlyFieldDynaComponent, PNG_FORMLY_TYPE_COMPONENTS, PngCardWrapperComponent, PngFormlyHorizontalWrapperComponent, PngFieldSetWrapperComponent, PngPanelWrapperComponent, PngFormlyVerticalWrapperComponent, PngScrollPanelWrapperComponent, PngFormlyResponsiveWrapperComponent, PNG_FORMLY_WRAPPERS, PngFormlyTypes, PngFormlyWrappers, PngFormlyFieldType as ɵa, TemplatePngField as ɵb };

//# sourceMappingURL=er-formly-primeng.js.map