{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@er/formly-primeng/lib/types/field-types.ts","ng://@er/formly-primeng/lib/utils/index.ts","ng://@er/formly-primeng/lib/components/form/component.ts","ng://@er/formly-primeng/lib/components/audit/component.ts","ng://@er/formly-primeng/lib/components/debug/component.ts","ng://@er/formly-primeng/lib/components/tab/component.ts","ng://@er/formly-primeng/lib/components/wizard/component.ts","ng://@er/formly-primeng/lib/components/all.ts","ng://@er/formly-primeng/lib/base/field-type.ts","ng://@er/formly-primeng/lib/field-types/auto-complete/component.ts","ng://@er/formly-primeng/lib/field-types/button/component.ts","ng://@er/formly-primeng/lib/field-types/calendar/component.ts","ng://@er/formly-primeng/lib/field-types/checkbox/component.ts","ng://@er/formly-primeng/lib/field-types/chips/component.ts","ng://@er/formly-primeng/lib/field-types/dyna/component.ts","ng://@er/formly-primeng/lib/field-types/editor/component.ts","ng://@er/formly-primeng/lib/field-types/file-upload/component.ts","ng://@er/formly-primeng/lib/field-types/input/component.ts","ng://@er/formly-primeng/lib/field-types/key-filter/component.ts","ng://@er/formly-primeng/lib/field-types/list-box/component.ts","ng://@er/formly-primeng/lib/field-types/mask/component.ts","ng://@er/formly-primeng/lib/field-types/multi-select/component.ts","ng://@er/formly-primeng/lib/field-types/radio/component.ts","ng://@er/formly-primeng/lib/field-types/rating/component.ts","ng://@er/formly-primeng/lib/field-types/select-button/component.ts","ng://@er/formly-primeng/lib/field-types/select/component.ts","ng://@er/formly-primeng/lib/field-types/slider/component.ts","ng://@er/formly-primeng/lib/field-types/spinner/component.ts","ng://@er/formly-primeng/lib/field-types/switch/component.ts","ng://@er/formly-primeng/lib/field-types/table/component.ts","ng://@er/formly-primeng/lib/field-types/text-area/component.ts","ng://@er/formly-primeng/lib/field-types/tree/component.ts","ng://@er/formly-primeng/lib/field-types/value/component.ts","ng://@er/formly-primeng/lib/field-wrappers/card/wrapper.ts","ng://@er/formly-primeng/lib/field-wrappers/field-set/wrapper.ts","ng://@er/formly-primeng/lib/field-wrappers/horizontal/wrapper.ts","ng://@er/formly-primeng/lib/field-wrappers/panel/wrapper.ts","ng://@er/formly-primeng/lib/field-wrappers/responsive/wrapper.ts","ng://@er/formly-primeng/lib/field-wrappers/scrol-panel/wrapper.ts","ng://@er/formly-primeng/lib/field-wrappers/vertical/wrapper.ts","ng://@er/formly-primeng/lib/types/field-wrappers.ts","ng://@er/formly-primeng/lib/run/field/index.ts","ng://@er/formly-primeng/lib/config/formly.ts","ng://@er/formly-primeng/lib/field-types/all.ts","ng://@er/formly-primeng/lib/field-wrappers/all.ts","ng://@er/formly-primeng/lib/er-formly-primeng.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","PngFormlyTypes","input","checkbox","radio","select","switch","button","textArea","autoComplete","calendar","chips","editor","keyFilter","fileUpload","listBox","mask","multiSelect","rating","slider","spinner","selectButton","tree","table","dyna","PngFormlyUtils","resolveField","formProps","field","formlyForm","className","resolveDataField","distinctSuggestProps","apiEntry","fieldName","query","selectable","type","props","minLength","size","forceSelection","dropdown","placeholder","onSelect","ctx","DialogUtils","setTimeout","formControl","reset","$ext","apiDataProps","searchFields","withTerm","dataItemProps","template","item","templateOptions","required","description","resolveValidators","validators","validates","CommonsUtils","isFunction","validation","isArray","validations","resolveBasic","dataField","key","hidden","hide","defaultValue","undefined","dataAttr","DataAttr","CURRENCY","dataType","DataType","NUMBER","TEXT","DISTINCT","STRING","BOOLEAN","DATE","resolveProps","dataItems","DATA_CODE","ConfigUtils","getConfig","dataFieldProps","dataCode","codeKey","DATE_TIME","dateFormat","monthNavigator","yearNavigator","showTime","TIME","timeOnly","MONTH","view","yearRange","defaults","resolveAttrs","attrs","set","PHONE","ID_CARD","QQ","WE_CHAT","EMAIL","URL","resolveTemplateOptions","options","label","disabled","resolveValidations","maxLength","NgValidators","max","min","pattern","idCard","resolveParsers","parser","parsers","getArrayValue","val","Number","DateUtils","getFormattedDate","YEAR","PERCENT","toUpperCase","fieldArray","wrappers","fieldGroup","forEach","aField","landscape","defineProperty","IdUtils","getRandom","enumerable","merge","DataFieldUtils","getFieldDefaultProps","resolvedField","get","entity","dataPath","PngFormlyFormComponent","_this","_super","debug","isProduction","onFormValueChanges","EventEmitter","panelProps","_formProps","tslib_1.__extends","_props","omit","initFormProps","formValueChanges","event","formModel$","of","model","emit","beforeRoutePropsBind","resolveFormFields","fields","LogUtils","afterPropsInit","$id","caption","$routeParams","warn","beforeSubmit","valueChanges","afterSubmit","initValue","Component","args","selector","Input","ViewChild","FormlyFormComponent","Output","RouteBindComponent","PngFormlyAuditFormComponent","buttonsStyleClass","submitBtnStyleClass","resetBtnStyleClass","initBtnStyleClass","backBtnStyleClass","commentField","onAccept","newState","saveAuditHis","ApiUtils","patchById","modelId","getSubmitData","tag","formId","subscribe","onReject","isEmpty","state","audit","auditComment","auditDate","auditorName","AuthUtils","getCurrentUser","fullName","auditorId","id","data","save","PngFormDebugComponent","BaseComponent","PngFormlyTabsFormComponent","onTabChange","onTabClose","tabs","tab","formArray","FormArray","map","FormGroup","tabFormlyOptions","currentTabIndex","activeIndex","tabChange","tabClose","PngFormlyWizardFormComponent","stepChange","steps","step","stepFormlyOptions","currentStepIndex","onStepChange","changeDetection","ChangeDetectionStrategy","OnPush","Components","PngFormlyFieldType","ErFormlyFieldType","PngFormlyAutoCompleteComponent","PngFormlyButtonComponent","PngFormlyCalendarComponent","PngFormlyCheckboxComponent","PngFormlyChipsComponent","defaultProps","allowDuplicate","addOnBlur","PngFormlyFieldDynaComponent","ngOnInit","form","subscription","pipe","distinctUntilChanged","_","comp","refresh","unsubscribe","ngOnDestroy","DynaContentComponent","PngFormlyEditorComponent","style","height","PngFormlyFileUploadComponent","PngFormlyInputComponent","to","PngFormlyKeyFilterComponent","PngFormlyListBoxComponent","PngFormlyMaskComponent","PngFormlyMultiSelectComponent","PngFormlyRadioComponent","inline","PngFormlyRatingComponent","PngFormlySelectButtonComponent","PngFormlySelectComponent","PngFormlySliderComponent","range","orientation","PngFormlySpinnerComponent","PngFormlySwitchComponent","PngFormlyTableComponent","selectionMode","PngFormlyTextAreaComponent","rows","autoResize","PngFormlyTreeComponent","PngFormlyFieldValueComponent","value$","BehaviorSubject","getFieldDisplayContent","PngCardWrapperComponent","read","ViewContainerRef","FieldWrapper","PngFieldSetWrapperComponent","PngFormlyHorizontalWrapperComponent","getValue","ErFormlyFieldWrapper","PngPanelWrapperComponent","toggleable","PngFormlyResponsiveWrapperComponent","PngScrollPanelWrapperComponent","PngFormlyVerticalWrapperComponent","PngFormlyWrappers","pngFieldWrapper","pngFieldSetWrapper","pngVerticalWrapper","pngHorizontalWrapper","pngResponsiveWrapper","pngCardWrapper","pngPanelWrapper","pngScrollPanelWrapper","excludeTypes","TemplatePngField","run","fc","templateManipulators","preWrapper","startsWith","indexOf","UiLandscape","vertical","horizontal","responsive","PNG_FORMLY_CONFIG","types","name","component","manipulators","class","method","PNG_FORMLY_TYPE_COMPONENTS","PNG_FORMLY_WRAPPERS","ErFormlyPrimeNgModule","NgModule","imports","ReactiveFormsModule","ErCoreModule","ErValidateModule","ErFormlyModule","ErPrimeNgModule","FormlyModule","forChild","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export const PngFormlyTypes = {\n  input: 'pngInput',\n  checkbox: 'pngCheckbox',\n  radio: 'pngRadio',\n  select: 'pngSelect',\n  switch: 'pngSwitch',\n  button: 'pngButton',\n  textArea: 'pngTextArea',\n  autoComplete: 'pngAutoComplete',\n  calendar: 'pngCalendar',\n  chips: 'pngChips',\n  editor: 'pngEditor',\n  keyFilter: 'pngKeyFilter',\n  fileUpload: 'pngFileUpload',\n  listBox: 'pngListBox',\n  mask: 'pngMask',\n  multiSelect: 'pngMultiSelect',\n  rating: 'pngRating',\n  slider: 'pngSlider',\n  spinner: 'pngSpinner',\n  selectButton: 'pngSelectButton',\n  tree: 'pngTree',\n  table: 'pngTable',\n  dyna: 'pngDyna',\n  value: 'pngValue'\n};\n","import {DataFieldUtils} from '@er/core';\nimport {ErFormlyFieldConfig, ErFormlyTemplateOptions} from '@er/formly';\nimport {PngAutoCompleteProps, PngCalendarProps} from '@er/primeng';\nimport {ApiDataProps, DataAttr, DataType, FormProps} from '@er/types';\nimport {CommonsUtils, ConfigUtils, DateUtils, DialogUtils, IdUtils} from '@er/utils';\nimport {NgValidators} from '@er/validate';\nimport {PngFormlyTypes} from '../types/field-types';\n\nexport class PngFormlyUtils {\n\n  static resolveField(formProps: FormProps, field: ErFormlyFieldConfig, formlyForm?) {\n    if (formProps) {\n      field.formProps = formProps;\n    }\n    if (formlyForm) {\n      field.formlyForm = formlyForm;\n    }\n    field.className = field.className || '' + 'formly-field';\n    PngFormlyUtils.resolveDataField(formProps, field, formlyForm);\n  }\n\n  static distinctSuggestProps(apiEntry, fieldName, query?, selectable = false) {\n    const props = {\n      type: PngFormlyTypes.autoComplete,\n      props: <PngAutoCompleteProps>{\n        minLength: 1,\n        size: 5,\n        forceSelection: false,\n        dropdown: false,\n        placeholder: 'è¯·è¾å¥å¯ä¸çä»£ç å¼',\n        onSelect: (ctx) => {\n          if (!selectable) {\n            DialogUtils.error('æ ææä½', 'è¯¥å¼å·²ç»å­å¨ï¼ä¸è½éæ©');\n            setTimeout(() => ctx.field.formControl.reset());\n          }\n        },\n        $ext: {\n          apiDataProps: <ApiDataProps>{\n            apiEntry: apiEntry,\n            query: query,\n            searchFields: fieldName,\n            withTerm: true\n          },\n          dataItemProps: {\n            template: item => `<span title=\"è¯¥å¼å·²ç»å­å¨ï¼ä¸å¯ç¨\"><del>${item[fieldName]}</del></span> `\n          }\n        }\n      },\n      templateOptions: {\n        required: false,\n        description: '<span class=\"text-danger\">åå®¹å¿é¡»å¯ä¸ï¼å¯ä»¥ä¸å¡«ï¼ä¸å¡«æ¶ç³»ç»èªå¨çæ</span>'\n      }\n    };\n    return props;\n  }\n\n  private static resolveValidators(field) {\n    if (field.validators) {\n      const validates = field.validators;\n      field.validators = {};\n      if (CommonsUtils.isFunction(validates)) {\n        field.validators.validation = [validates];\n      } else if (CommonsUtils.isArray(validates)) {\n        field.validators.validation = validates;\n      } else {\n        field.validators = validates;\n      }\n    }\n    if (field.validations) {\n      if (field.validators && field.validators['validation']) {\n        field.validators.validation = {\n          ...field.validators.validation,\n          ...field.validations\n        };\n      } else if (field.validators) {\n        field.validators = {\n          ...field.validators,\n          validation: field.validations\n        };\n      } else {\n        field.validators = {};\n        field.validators.validation = field.validations;\n      }\n      delete field.validations;\n    }\n  }\n\n  private static resolveBasic(dataField, field) {\n\n    field.key = field.key || dataField.key;\n\n    if (dataField.hidden) {\n      field.hide = true;\n    }\n\n    if (dataField.defaultValue !== undefined) {\n      field.defaultValue = dataField.defaultValue;\n    }\n\n    switch (dataField.dataAttr) {\n      case DataAttr.CURRENCY:\n        field.dataType = DataType.NUMBER;\n        field.defaultValue = 0;\n        break;\n      case DataAttr.TEXT:\n        field.type = PngFormlyTypes.textArea;\n        break;\n      case DataAttr.DISTINCT:\n        Object.assign(field, PngFormlyUtils.distinctSuggestProps(field.apiEntry, field.key));\n        break;\n    }\n\n    if (!field.type) {\n      switch (dataField.dataType) {\n        case DataType.STRING:\n          field.type = PngFormlyTypes.input;\n          break;\n        case DataType.BOOLEAN:\n          field.type = PngFormlyTypes.switch;\n          break;\n        case DataType.NUMBER:\n          field.type = PngFormlyTypes.spinner;\n          break;\n        case DataType.DATE:\n          field.type = PngFormlyTypes.calendar;\n          break;\n        default:\n          field.type = PngFormlyTypes.input;\n      }\n    }\n  }\n\n  private static resolveProps(dataField, field) {\n    const props = {\n      $ext: {}\n    };\n    if (dataField.dataItems) {\n      props.$ext['dataItems'] = dataField.dataItems;\n    }\n    if (dataField.apiDataProps) {\n      props.$ext['apiDataProps'] = dataField.apiDataProps;\n    }\n    if (dataField.dataItemProps) {\n      props.$ext['dataItemProps'] = dataField.dataItemProps;\n    }\n    if (dataField.dataAttr === DataAttr.DATA_CODE) {\n      props['dataKey'] = ConfigUtils.getConfig().dataFieldProps.dataCode.codeKey;\n    }\n    if (dataField.dataItems) {\n      props.$ext['dataItems'] = dataField.dataItems;\n    }\n    switch (dataField.dataAttr) {\n      case DataAttr.DATE_TIME:\n        Object.assign(props, <PngCalendarProps>{\n          dateFormat: 'yy-mm-dd hh:mm',\n          monthNavigator: true,\n          yearNavigator: true,\n          showTime: true\n        });\n        break;\n      case DataAttr.DATE:\n        Object.assign(props, <PngCalendarProps>{\n          dateFormat: 'yy-mm-dd',\n          monthNavigator: true,\n          yearNavigator: true\n        });\n        break;\n      case DataAttr.TIME:\n        Object.assign(props, <PngCalendarProps>{\n          timeOnly: true\n        });\n        break;\n      case DataAttr.MONTH:\n        Object.assign(props, <PngCalendarProps>{\n          view: 'month',\n          dateFormat: 'yy-mm',\n          yearNavigator: true,\n          monthNavigator: true,\n          yearRange: '2000:2020'\n        });\n        break;\n    }\n    field.props = CommonsUtils.defaults(field.props, props);\n  }\n\n  private static resolveAttrs(dataField, field) {\n    const attrs = {};\n    switch (dataField.dataAttr) {\n      case DataAttr.CURRENCY:\n        CommonsUtils.set(attrs, '$ext.inputRule', 'pnum');\n        CommonsUtils.set(attrs, '$ext.postText', 'ï¿¥');\n        break;\n      case DataAttr.PHONE:\n        CommonsUtils.set(attrs, '$ext.inputRule', 'pint');\n        CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-phone');\n        break;\n      case DataAttr.ID_CARD:\n        CommonsUtils.set(attrs, '$ext.inputRule', /[0-9]|X|x/);\n        CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-id-card');\n        break;\n      case DataAttr.QQ:\n        CommonsUtils.set(attrs, '$ext.inputRule', 'pint');\n        CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-qq');\n        break;\n      case DataAttr.WE_CHAT:\n        CommonsUtils.set(attrs, '$ext.inputRule', 'pint');\n        CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-wechat');\n        break;\n      case DataAttr.EMAIL:\n        CommonsUtils.set(attrs, '$ext.preText', '@');\n        break;\n      case DataAttr.URL:\n        CommonsUtils.set(attrs, '$ext.preText', 'http://');\n        break;\n    }\n    field.attrs = CommonsUtils.defaults(field.attrs, attrs);\n  }\n\n  private static resolveTemplateOptions(dataField, field) {\n    const options: ErFormlyTemplateOptions = {};\n\n    options.label = `${dataField.label}:`;\n\n    if (dataField.required) {\n      options.required = true;\n    }\n    if (dataField.description) {\n      options.description = dataField.description;\n    }\n    if (dataField.placeholder) {\n      options.placeholder = dataField.placeholder;\n    }\n    if (dataField.disabled) {\n      options.disabled = dataField.disabled;\n    }\n\n    field.templateOptions = CommonsUtils.defaults(field.templateOptions, options);\n  }\n\n  private static resolveValidations(dataField, field) {\n\n    const validations = [];\n\n    if (dataField.maxLength) {\n      validations.push(NgValidators.maxLength(dataField.maxLength));\n    }\n    if (dataField.minLength) {\n      validations.push(NgValidators.minLength(dataField.minLength));\n    }\n    if (dataField.max) {\n      validations.push(NgValidators.max(dataField.max));\n    }\n    if (dataField.min) {\n      validations.push(NgValidators.min(dataField.min));\n    }\n    if (dataField.pattern) {\n      validations.push(NgValidators.pattern(dataField.pattern));\n    }\n    if (dataField.dataAttr === DataAttr.ID_CARD) {\n      validations.push(NgValidators.idCard);\n    }\n\n    if (validations.length > 0) {\n      field.validations = validations;\n    }\n\n  }\n\n  private static resolveParsers(dataField, field) {\n    field.parsers = CommonsUtils.getArrayValue(dataField.parsers) || [];\n    let parser;\n    switch (dataField.dataAttr) {\n      case DataAttr.CURRENCY:\n        parser = (val) => val ? Number(val) : val;\n        break;\n      case DataAttr.DATE:\n        parser = (val) => val ? DateUtils.getFormattedDate(val, 'YYYY-MM-DD') : val;\n        break;\n      case DataAttr.DATE_TIME:\n        parser = (val) => val ? DateUtils.getFormattedDate(val, 'YYYY-MM-DD HH:mm:ss') : val;\n        break;\n      case DataAttr.TIME:\n        parser = (val) => val ? DateUtils.getFormattedDate(val, 'HH:mm:ss') : val;\n        break;\n      case DataAttr.YEAR:\n        parser = (val) => val ? DateUtils.getFormattedDate(val, 'YYYY') : val;\n        break;\n      case DataAttr.MONTH:\n        parser = (val) => val ? DateUtils.getFormattedDate(val, 'YYYY-MM') : val;\n        break;\n      case DataAttr.PERCENT:\n        parser = (val) => val ? Number(val) / 100 : val;\n        break;\n      case DataAttr.ID_CARD:\n        parser = (val) => val ? val.toUpperCase() : val;\n        break;\n    }\n    const parsers = CommonsUtils.getArrayValue(dataField.parsers) || [];\n    if (parser) {\n      parsers.push((val) => {\n        try {\n          return parser(val);\n        } catch (e) {\n          return undefined;\n        }\n      });\n    }\n    if (parsers.length > 0) {\n      field.parsers = parsers;\n    }\n  }\n\n  private static resolveDataField(formProps: FormProps, field: ErFormlyFieldConfig, formlyForm?) {\n    if (field.fieldArray) {\n      if (field.wrappers) {\n        field.wrappers = CommonsUtils.getArrayValue(field.wrappers);\n      }\n      PngFormlyUtils.resolveField(() => formProps, field.fieldArray, () => formlyForm); // bind latter\n    } else if (field.fieldGroup) {\n      if (field.wrappers) {\n        field.wrappers = CommonsUtils.getArrayValue(field.wrappers);\n      }\n      field.fieldGroup.forEach(aField => {\n        if (field.templateOptions && field.templateOptions.landscape) {\n          CommonsUtils.set(<{}>aField, 'templateOptions.landscape', field.templateOptions.landscape);\n        }\n        PngFormlyUtils.resolveField(formProps, aField, formlyForm);\n      });\n    } else {\n\n      let dataField = field.dataField;\n\n      if (field.template) {\n        field.type = 'formly-template';\n      }\n\n      if (field.type === PngFormlyTypes.dyna) {\n        Object.defineProperty(field, 'key', {\n          value: `$_${IdUtils.getRandom()}`,\n          enumerable: false\n        });\n        // field.key = `$_${IdUtils.getRandom()}`;\n      }\n\n      if (!dataField) {\n        if (!field.type) {\n          field.type = PngFormlyTypes.input;\n        }\n        if (field.parsers) {\n          field.parsers = CommonsUtils.getArrayValue(field.parsers);\n        }\n        PngFormlyUtils.resolveValidators(field);\n        return;\n      }\n\n      dataField = CommonsUtils.merge(\n        DataFieldUtils.getFieldDefaultProps(dataField),\n        dataField\n      );\n\n      field.dataField = dataField;\n\n      if (field.type && field.type === PngFormlyTypes.value) {\n        field.key = field.key || field.dataField.key;\n        CommonsUtils.set(<{}>field, 'templateOptions.label', field.dataField.label);\n        return field;\n      }\n\n      const resolvedField: ErFormlyFieldConfig = {};\n\n      PngFormlyUtils.resolveBasic(dataField, resolvedField);\n\n      PngFormlyUtils.resolveProps(dataField, resolvedField);\n\n      PngFormlyUtils.resolveAttrs(dataField, resolvedField);\n\n      PngFormlyUtils.resolveTemplateOptions(dataField, resolvedField);\n\n      PngFormlyUtils.resolveValidations(dataField, resolvedField);\n\n      CommonsUtils.defaults(field, resolvedField);\n\n      if (field.type === PngFormlyTypes.input) {\n        if (field.props['$ext'].apiDataProps) {\n          field.type = PngFormlyTypes.autoComplete;\n        }\n        if (dataField.length) {\n          CommonsUtils.set(<{}>field, 'attrs.size', dataField.length);\n        }\n      }\n\n      const apiDataProps = CommonsUtils.get(field, 'props.$ext.apiDataProps');\n\n      if (apiDataProps) {\n        if (!apiDataProps.apiEntry) {\n          apiDataProps['apiEntry'] = formProps.apiEntry || formProps.entity && formProps.entity.apiEntry;\n        }\n        if (!apiDataProps.dataPath) {\n          apiDataProps['dataPath'] = 'items';\n        }\n      }\n\n      PngFormlyUtils.resolveParsers(dataField, resolvedField);\n\n      if (resolvedField.parsers) {\n        field.parsers = field.parsers || [];\n        field.parsers = field.parsers.concat(resolvedField.parsers);\n      }\n\n      PngFormlyUtils.resolveValidators(field);\n\n    }\n  }\n}\n","import {Component, EventEmitter, Input, Output, ViewChild} from '@angular/core';\nimport {LogUtils, RouteBindComponent} from '@er/core';\nimport {FormlyFormComponent} from '@er/formly';\nimport {FormProps} from '@er/types';\nimport {CommonsUtils, ConfigUtils, IdUtils} from '@er/utils';\nimport {Observable, of} from 'rxjs';\nimport {PngFormlyUtils} from '../../utils';\n\n@Component({\n  selector: 'png-formly-form',\n  template: `\n    <png-panel [showHeader]=\"panelProps['showHeader']\"\n               [header]=\"panelProps['caption']\"\n               [footer]=\"panelProps['footer']\"\n               [icon]=\"panelProps['icon']\"\n               [collapsed]=\"panelProps['collapsed']\"\n               [toggleable]=\"panelProps['collapsable']\"\n               [styleClass]=\"panelProps['panelStyleClass']\"\n               [barStyleClass]=\"panelProps['barStyleClass']\"\n               [style]=\"panelProps['panelStyle']\"\n    >\n      <er-formly-form\n        class=\"my-2\"\n        erPropsBind\n        [props]=\"formProps\"\n        [beforeSubmit]=\"beforeSubmit\"\n        [afterSubmit]=\"afterSubmit\"\n        [valueChanges]=\"valueChanges\"\n        (onFormValueChanges)=\"formValueChanges($event)\"\n      >\n      </er-formly-form>\n    </png-panel>\n    <png-form-debug *ngIf=\"debug\"\n                    [model]=\"formModel$|async\"\n                    [debugFormProps]=\"props\"\n                    [runtimeFormProps]=\"formProps\"\n    >\n    </png-form-debug>\n  `\n})\n\nexport class PngFormlyFormComponent extends RouteBindComponent {\n\n  debugFormProps: FormProps;\n\n  @Input() debug = !!!ConfigUtils.getConfig().isProduction;\n\n  @ViewChild(FormlyFormComponent) formlyForm: FormlyFormComponent;\n\n  @Output() onFormValueChanges: EventEmitter<any> = new EventEmitter();\n\n  panelProps = {};\n\n  formModel$: Observable<any>;\n\n  public beforeSubmit;\n\n  public afterSubmit;\n\n  public valueChanges;\n\n  protected _formProps: FormProps = {};\n\n  protected _props: {};\n\n  @Input()\n  get props() {\n    return this._props;\n  }\n\n  set props(props) {\n    this.panelProps = props['panel'] || {};\n    this._props = CommonsUtils.omit(props, 'panel');\n    this.initFormProps(this._props);\n  }\n\n  get formProps(): FormProps {\n    return this._formProps || {};\n  }\n\n  formValueChanges(event) {\n    if (this.debug) {\n      this.formModel$ = of(this.formlyForm.model);\n    }\n    this.onFormValueChanges.emit(event);\n  }\n\n  beforeRoutePropsBind(props): {} {\n    return {props: props};\n  }\n\n  resolveFormFields(formProps: FormProps) {\n    if (!formProps || !formProps['fields']) {\n      LogUtils.error(this, 'æ²¡æå®ä¹fields!', formProps);\n      return;\n    }\n\n    formProps.formlyForm = this.formlyForm;\n\n    this.formlyForm.formProps = formProps;\n\n    formProps.fields.forEach(field => {\n      PngFormlyUtils.resolveField(formProps, field, this.formlyForm);\n    });\n  }\n\n  afterPropsInit() {\n  }\n\n  private initFormProps(formProps) {\n\n    this.resolveFormFields(formProps);\n\n    formProps.$id = IdUtils.getRandom();\n\n    if (formProps.entity) {\n      if (!formProps.caption) {\n        if (formProps.$routeParams && formProps.$routeParams['id']) {\n          formProps.caption = `ç¼è¾${formProps.entity.label}`;\n        } else {\n          formProps.caption = `æ·»å ${formProps.entity.label}`;\n        }\n      }\n      if (!formProps.apiEntry) {\n        formProps.apiEntry = formProps.entity.apiEntry;\n      }\n    }\n\n    if (!formProps.apiEntry) {\n      LogUtils.warn([this, 'æ²¡æå®ä¹apiEntry,è¡¨åä¸è½æäº¤ï¼', formProps]);\n    } else if (this.formlyForm) {\n      this.formlyForm.apiEntry = formProps.apiEntry;\n    }\n\n    if (formProps.beforeSubmit) {\n      this.beforeSubmit = formProps.beforeSubmit;\n      delete formProps.beforeSubmit;\n    }\n\n    if (formProps.valueChanges) {\n      this.valueChanges = formProps.valueChanges;\n      delete formProps.valueChanges;\n    }\n\n    if (formProps.afterSubmit) {\n      this.afterSubmit = formProps.afterSubmit;\n      delete formProps.afterSubmit;\n    }\n\n    if (formProps.entity && formProps.entity.initValue) {\n      formProps.model = formProps.entity.initValue;\n    } else {\n      formProps.model = {};\n    }\n\n    this._formProps = formProps;\n\n    this.afterPropsInit();\n  }\n\n}\n","import {Component, Input} from '@angular/core';\nimport {ApiUtils, AuthUtils, LogUtils} from '@er/core';\nimport {ErFormlyFieldConfig} from '@er/formly';\nimport {FormProps} from '@er/types';\nimport {CommonsUtils, DateUtils, DialogUtils} from '@er/utils';\nimport {PngFormlyTypes} from '../../types/field-types';\nimport {PngFormlyUtils} from '../../utils';\nimport {PngFormlyFormComponent} from '../form/component';\n\n@Component({\n  selector: 'png-formly-audit-form',\n  template: `\n    <png-panel [header]=\"formProps.caption\"\n               [footer]=\"formProps.footer\"\n               [icon]=\"formProps.icon\"\n               [toggleable]=\"formProps.collapsable\"\n    >\n      <er-formly-form\n        class=\"mt-2\"\n        erPropsBind\n        [props]=\"formProps\"\n        [beforeSubmit]=\"beforeSubmit\"\n        [afterSubmit]=\"afterSubmit\"\n      >\n        <ng-template erTypedTemplate=\"buttons\">\n          <div [ngClass]=\"buttonsStyleClass\">\n            <er-button [stateKey]=\"formlyForm.formId\"\n                       icon=\"fa fa-check\"\n                       label=\"é&nbsp;&nbsp;&nbsp;è¿\"\n                       title=\"ä¿çæ°æ®å°æå¡ç«¯\"\n                       class=\"mr-2\"\n                       type=\"button\"\n                       [disabled]=\"!formlyForm.form.valid\"\n                       [styleClass]=\"submitBtnStyleClass\"\n                       (onClick)=\"onAccept()\"\n            ></er-button>\n            <er-button icon=\"fa fa-close\"\n                       class=\"ml-4\"\n                       label=\"ä¸&nbsp;&nbsp;&nbsp;é&nbsp;&nbsp;&nbsp;è¿\"\n                       title=\"æ¢å¤å°ä¿®æ¹åçç¶æ\"\n                       [styleClass]=\"resetBtnStyleClass\"\n                       (onClick)=\"onReject()\"\n            >\n            </er-button>\n          </div>\n\n        </ng-template>\n      </er-formly-form>\n    </png-panel>\n\n  `\n})\nexport class PngFormlyAuditFormComponent extends PngFormlyFormComponent {\n\n  @Input() buttonsStyleClass: any = 'text-center my-5';\n\n  @Input() submitBtnStyleClass: any = 'btn btn-success';\n\n  @Input() resetBtnStyleClass: any = 'btn btn-danger';\n\n  @Input() initBtnStyleClass: any = 'btn btn-alert';\n\n  @Input() backBtnStyleClass: any = 'btn btn-info';\n\n  resolveFormFields(formProps: FormProps) {\n    if (!formProps || !formProps['fields']) {\n      LogUtils.error(this, 'æ²¡æå®ä¹fields!', formProps);\n      return;\n    }\n    if (!formProps.caption) {\n      formProps.caption = `å®¡æ ¸${formProps.entity.label}ä¿¡æ¯`;\n    }\n    formProps.fields.forEach(field => {\n      field.type = PngFormlyTypes.value;\n      PngFormlyUtils.resolveField(formProps, field, this);\n    });\n    const commentField: ErFormlyFieldConfig = {\n      key: 'comment',\n      type: PngFormlyTypes.textArea,\n      attrs: {\n        placeholder: 'è¯·è¾å¥æ¨çå®¡æ ¸æè§æå¤æ³¨'\n      },\n      templateOptions: {\n        label: 'å®¡æ ¸æè§',\n        description: 'å®¡æ ¸ä¸éè¿æ¶ï¼å¿é¡»è¾å¥ä¸éè¿çåå ',\n        minLength: 5\n      }\n    };\n    PngFormlyUtils.resolveField(formProps, commentField, this);\n    formProps.fields.push(commentField);\n  }\n\n  onAccept() {\n    const newState = this.saveAuditHis();\n    ApiUtils.patchById(this.formlyForm.apiEntry, this.formlyForm.modelId, this.getSubmitData(newState), {\n      tag: this.formlyForm.formId\n    }).subscribe();\n  }\n\n  onReject() {\n    if (CommonsUtils.isEmpty(this.formlyForm.model['comment'])) {\n      DialogUtils.error('æä½æ æ', 'è¯·è¾å¥ä¸éè¿çåå ');\n      return;\n    }\n    ApiUtils.patchById(this.formlyForm.apiEntry, this.formlyForm.modelId, this.getSubmitData(-1), {\n      tag: this.formlyForm.formId\n    }).subscribe();\n  }\n\n  getSubmitData(state) {\n    return {\n      audit: {\n        state: state,\n        auditComment: this.formlyForm.model['comment'],\n        auditDate: DateUtils.getFormattedDate(),\n        auditorName: AuthUtils.getCurrentUser().fullName,\n        auditorId: AuthUtils.getCurrentUser().id\n      }\n    };\n  }\n\n\n  private saveAuditHis(): number {\n    const audit = this.formlyForm.model['audit'];\n    if (audit) {\n      const data = this.formlyForm.model;\n      delete data['id'];\n      ApiUtils.save(`${this.formlyForm.apiEntry}-audit-his`, data, {\n        tag: this.formlyForm.formId\n      }).subscribe();\n      return ++audit['state'];\n    }\n    return 1;\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {BaseComponent} from '@er/core';\n\n@Component({\n  selector: 'png-form-debug',\n  template: `\n    <p-tabView>\n      <p-tabPanel header=\"Form Data\" leftIcon=\"fa fa-eye text-dark\">\n        <pre [erJsonViewer]=\"model\"></pre>\n      </p-tabPanel>\n      <p-tabPanel header=\"Form Json\" leftIcon=\"fa fa-gear text-info\">\n        <pre [erJsonViewer]=\"debugFormProps\"></pre>\n      </p-tabPanel>\n      <p-tabPanel header=\"Runtime Form Json\" leftIcon=\"fa fa-cogs text-danger\">\n        <pre [erJsonViewer]=\"runtimeFormProps\"></pre>\n      </p-tabPanel>\n    </p-tabView>\n  `,\n  styleUrls: ['styles.scss']\n})\n\nexport class PngFormDebugComponent extends BaseComponent {\n  @Input() model;\n  @Input() debugFormProps;\n  @Input() runtimeFormProps;\n}\n","import {Component, EventEmitter, Output} from '@angular/core';\nimport {FormArray, FormGroup} from '@angular/forms';\nimport {LogUtils} from '@er/core';\nimport {FormlyFormOptions} from '@ngx-formly/core';\nimport {PngFormlyUtils} from '../../utils';\nimport {PngFormlyFormComponent} from '../form/component';\nimport {TabFormProps} from './type';\n\n@Component({\n  selector: 'png-formly-tab',\n  template: `\n    <png-panel [header]=\"formProps.caption\" [footer]=\"formProps.footer\" [icon]=\"formProps.icon\" [toggleable]=\"formProps.collapsable\">\n      <p-tabView [activeIndex]=\"formProps['activeIndex']\"\n                 [styleClass]=\"formProps.styleClass\"\n                 [style]=\"formProps.style\"\n                 [orientation]=\"formProps['tabOrientation']\"\n                 (onChange)=\"tabChange($event)\"\n                 (onClose)=\"tabClose($event)\"\n      >\n        <ng-container>\n          <p-tabPanel *ngFor=\"let tab of formProps['tabs']; let i = index\"\n                      [header]=\"tab.caption\"\n                      [headerStyle]=\"tab.style\"\n                      [headerStyleClass]=\"tab.styleClass\"\n                      [leftIcon]=\"tab.leftIcon\"\n                      [rightIcon]=\"tab.rightIcon\"\n          >\n            <formly-form\n              [form]=\"formArray.at(i)\"\n              [(model)]=\"formProps.model\"\n              [fields]=\"tab.fields\"\n              [options]=\"tabFormlyOptions[i]\">\n            </formly-form>\n          </p-tabPanel>\n        </ng-container>\n      </p-tabView>\n    </png-panel>\n\n    <div [ngClass]=\"formProps.buttonsStyleClass\">\n      <er-button [stateKey]=\"formProps.$id\"\n                 icon=\"fa fa-save\"\n                 label=\"æ&nbsp;&nbsp;&nbsp;äº¤\"\n                 title=\"ä¿çæ°æ®å°æå¡ç«¯\"\n                 class=\"mr-2\"\n                 type=\"button\"\n                 (onClick)=\"formlyForm.submit()\"\n                 [styleClass]=\"formProps.submitBtnStyleClass\"\n      ></er-button>\n      <er-button icon=\"fa fa-circle-o\"\n                 class=\"mr-2\"\n                 label=\"é&nbsp;&nbsp;&nbsp;å¡«\"\n                 title=\"æ¢å¤å°ä¿®æ¹åçç¶æ\"\n                 [styleClass]=\"formProps.resetBtnStyleClass\"\n                 (onClick)=\"formlyForm.resetModel()\">\n      </er-button>\n\n      <ng-container *ngFor=\"let btn of formProps.buttons\">\n        <er-button erPropsBind [props]=\"btn\" [context]=\"btn.context\"></er-button>\n      </ng-container>\n    </div>\n\n    <!--<png-form-debug [model]=\"formModel\"-->\n    <!--[debugFormProps]=\"props\"-->\n    <!--[runtimeFormProps]=\"formProps\">-->\n    <!--</png-form-debug>-->\n  `,\n  styleUrls: ['styles.scss']\n})\n\nexport class PngFormlyTabsFormComponent extends PngFormlyFormComponent {\n\n  formArray: FormArray;\n\n  tabFormlyOptions: FormlyFormOptions[];\n\n  currentTabIndex: number;\n\n  @Output() onTabChange = new EventEmitter();\n\n  @Output() onTabClose = new EventEmitter();\n\n  resolveFormFields(formProps: TabFormProps) {\n    if (!formProps || !formProps['tabs']) {\n      LogUtils.error(this, 'æ²¡æå®ä¹tabs', formProps);\n    }\n    if (formProps.tabs) {\n      formProps.tabs.forEach(tab => {\n        tab.fields.forEach(field => {\n          PngFormlyUtils.resolveField(this._formProps, field, this);\n        });\n      });\n      this.formArray = new FormArray(formProps.tabs.map(() => new FormGroup({})));\n      this.tabFormlyOptions = formProps.tabs.map((tab) => {\n        return {\n          ...formProps.options || {},\n          ...tab.options || {}\n        };\n      });\n    }\n    this.currentTabIndex = formProps.activeIndex || 0;\n  }\n\n  afterPropsInit() {\n  }\n\n  tabChange(event) {\n    this.currentTabIndex = event;\n    this.onTabChange.emit(event);\n  }\n\n  tabClose(event) {\n    this.onTabClose.emit(event);\n  }\n\n}\n","import {ChangeDetectionStrategy, Component, EventEmitter, Output} from '@angular/core';\nimport {FormArray, FormGroup} from '@angular/forms';\nimport {LogUtils} from '@er/core';\nimport {FormlyFormOptions} from '@ngx-formly/core';\nimport {PngFormlyUtils} from '../../utils';\nimport {PngFormlyFormComponent} from '../form/component';\nimport {WizardFormProps} from './type';\n\n\n@Component({\n  selector: 'png-formly-wizard',\n  template: `\n    <png-panel [header]=\"formProps.header\" [footer]=\"formProps.footer\" [icon]=\"formProps.icon\" [toggleable]=\"formProps.collapsable\">\n      <png-wizard [(activeIndex)]=\"currentStepIndex\"\n                  (stepChange)=\"onStepChange($event)\"\n                  [styleClass]=\"formProps.styleClass\"\n                  [style]=\"formProps.style\"\n                  [stepStyleClass]=\"formProps['stepStyleClass']\"\n                  [stepStyle]=\"formProps['stepStyle']\"\n      >\n        <ng-container *ngFor=\"let step of formProps['steps']; let i = index;\">\n          <png-step\n            [label]=\"step.label\"\n            [styleClass]=\"step.styleClass\"\n            [style]=\"step.style\"\n          >\n            <formly-form\n              [form]=\"formArray.at(i)\"\n              [(model)]=\"formProps.model\"\n              [fields]=\"step.fields\"\n              [options]=\"stepFormlyOptions[i]\">\n            </formly-form>\n          </png-step>\n        </ng-container>\n        <ng-template erTypedTemplate=\"footer\">\n          <button pButton type=\"button\" *ngIf=\"currentStepIndex+1 === formProps['steps'].length\"\n                  class=\"pull-right\" icon=\"fa fa-save\" iconPos=\"right\" label=\"æäº¤\"></button>\n        </ng-template>\n      </png-wizard>\n    </png-panel>\n    <!--<png-form-debug [model]=\"formModel\"-->\n    <!--[debugFormProps]=\"debugFormProps\"-->\n    <!--[runtimeFormProps]=\"formProps\">-->\n    <!--</png-form-debug>-->\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class PngFormlyWizardFormComponent extends PngFormlyFormComponent {\n\n  formArray: FormArray;\n\n  stepFormlyOptions: FormlyFormOptions[];\n\n  currentStepIndex: number;\n\n  @Output() stepChange = new EventEmitter();\n\n  resolveFormFields(formProps: WizardFormProps) {\n    if (!formProps || !formProps['steps']) {\n      LogUtils.error(this, 'æ²¡æå®ä¹steps', formProps);\n    }\n    if (formProps.steps) {\n      formProps.steps.forEach(step => {\n        step.fields.forEach(field => {\n          PngFormlyUtils.resolveField(formProps, field, this);\n        });\n      });\n      this.formArray = new FormArray(formProps.steps.map(() => new FormGroup({})));\n      this.stepFormlyOptions = formProps.steps.map((step) => {\n        return {\n          ...formProps.options || {},\n          ...step.options || {}\n        };\n      });\n    }\n    this.currentStepIndex = formProps.activeIndex || 0;\n  }\n\n  onStepChange(event) {\n    this.currentStepIndex = event;\n    this.stepChange.emit(event);\n  }\n\n}\n","import {PngFormlyAuditFormComponent} from './audit/component';\nimport {PngFormDebugComponent} from './debug/component';\nimport {PngFormlyFormComponent} from './form/component';\nimport {PngFormlyTabsFormComponent} from './tab/component';\nimport {PngFormlyWizardFormComponent} from './wizard/component';\n\nexport {PngFormlyAuditFormComponent} from './audit/component';\nexport {PngFormlyFormComponent} from './form/component';\nexport {PngFormlyWizardFormComponent} from './wizard/component';\nexport {PngFormlyTabsFormComponent} from './tab/component';\nexport {PngFormDebugComponent} from './debug/component';\nexport * from './tab/type';\nexport * from './wizard/type';\n\nexport const Components = [\n  PngFormlyFormComponent,\n  PngFormlyAuditFormComponent,\n  PngFormlyWizardFormComponent,\n  PngFormlyTabsFormComponent,\n  PngFormDebugComponent\n];\n","import {ErFormlyFieldType} from '@er/formly';\n\nexport abstract class PngFormlyFieldType extends ErFormlyFieldType {\n\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `\n    <div class=\"d-flex\">\n      <png-auto-complete class=\"m-auto w-100\"\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    ></png-auto-complete>\n      <png-buttons *ngIf=\"props['$ext'].buttons\" class=\"pull-right\" [btns]=\"props['$ext'].buttons\" [context]=\"field\"></png-buttons>\n    </div>\n    <div *ngIf=\"props['multiple']\" class=\"small text-muted pl-2\">æç¤ºï¼å¯ä»¥éæ©å¤é¡¹</div>\n\n  `\n})\nexport class PngFormlyAutoCompleteComponent extends PngFormlyFieldType {\n\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `\n    <png-button\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    >\n    </png-button>\n  `\n})\nexport class PngFormlyButtonComponent extends PngFormlyFieldType {\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `\n    <png-calendar\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    ></png-calendar>\n  `\n})\nexport class PngFormlyCalendarComponent extends PngFormlyFieldType {\n}\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `\n    <png-check-box\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    ></png-check-box>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PngFormlyCheckboxComponent extends PngFormlyFieldType {\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `\n    <p-chips\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    >\n    </p-chips>\n  `\n})\nexport class PngFormlyChipsComponent extends PngFormlyFieldType {\n  defaultProps = {\n    allowDuplicate: false,\n    addOnBlur: true,\n    max: 2\n  };\n}\n","import {Component, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {DynaContentComponent} from '@er/core';\nimport {DynaContent} from '@er/types';\nimport {Subscription} from 'rxjs';\nimport {distinctUntilChanged} from 'rxjs/operators';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\nexport interface DynaProps {\n  content: DynaContent;\n  refreshOnFieldChanges: string;\n  refreshOnFormChanges: boolean;\n}\n\n@Component({\n  template: `\n    <er-dyna-content [content]=\"props['content']\" [context]=\"{field: field}\"></er-dyna-content>\n  `\n})\nexport class PngFormlyFieldDynaComponent extends PngFormlyFieldType implements OnInit, OnDestroy {\n\n  @ViewChild(DynaContentComponent) comp: DynaContentComponent;\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.props['refreshOnForm']) {\n      const form: FormGroup = this.field.formlyForm.form;\n      this.subscription = form.valueChanges\n        .pipe(distinctUntilChanged())\n        .subscribe(_ => {\n          this.comp.refresh();\n        });\n    } else if (this.props['refreshOnField']) {\n      const formControl = this.field.formlyForm.formControl(this.props['refreshOnField']);\n      this.subscription = formControl.valueChanges\n        .pipe(distinctUntilChanged())\n        .subscribe(_ => {\n          this.comp.refresh();\n        });\n    } else {\n      this.comp.refresh();\n    }\n  }\n\n  unsubscribe() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this.unsubscribe();\n  }\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `\n    <p-editor formlyPropsBind\n              [props]=\"props\"\n              [formControl]=\"formControl\"\n    >\n    </p-editor>\n  `\n})\nexport class PngFormlyEditorComponent extends PngFormlyFieldType {\n  defaultProps = {\n    style: {height: '200px'}\n  };\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `\n    <png-file-upload\n      erPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    >\n    </png-file-upload>\n  `\n})\nexport class PngFormlyFileUploadComponent extends PngFormlyFieldType {\n\n}\n","import {Component, OnInit} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `\n    <png-input\n      formlyPropsBind\n      [attrs]=\"attrs\"\n      [formControl]=\"formControl\"\n    >\n    </png-input>\n  `\n})\nexport class PngFormlyInputComponent extends PngFormlyFieldType implements OnInit {\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.field['attrs'] = {\n      ...this.to || {},\n      ...this.attrs\n    };\n    if (!this.field['attrs']['disabled']) {\n      delete this.field['attrs']['disabled'];\n    }\n  }\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `    \n    <input \n      type=\"text\" \n      formlyPropsBind\n      [props]=\"props\"\n      [attrs]=\"attrs\"\n      [formControl]=\"formControl\"\n    />\n  `\n})\nexport class PngFormlyKeyFilterComponent extends PngFormlyFieldType {\n  /**\n   * pint: Positive integers\n   int: Integers\n   pnum: Positive numbers\n   num: Numbers\n   hex: Hexadecimal\n   email: Email\n   alpha: Alphabetic\n   alphanum: Alphanumeric\n   */\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `\n    <png-list-box\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    ></png-list-box>\n  `\n})\nexport class PngFormlyListBoxComponent extends PngFormlyFieldType {\n\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `\n    <p-inputMask\n             [mask]=\"to['mask']\"\n             [formControl]=\"formControl\"\n    >\n    </p-inputMask>\n  `\n})\nexport class PngFormlyMaskComponent extends PngFormlyFieldType {\n\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n\n@Component({\n  template: `\n    <png-multi-select\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    ></png-multi-select>\n  `,\n})\nexport class PngFormlyMultiSelectComponent extends PngFormlyFieldType {\n}\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `\n    <png-radio\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    ></png-radio>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PngFormlyRadioComponent extends PngFormlyFieldType {\n  defaultProps = {\n    $ext: {\n      inline: true\n    }\n  }\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n\n@Component({\n  template: `\n    <png-rating\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    >\n    </png-rating>\n  `\n})\nexport class PngFormlyRatingComponent extends PngFormlyFieldType {\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n\n@Component({\n  template: `\n        <p>å½åå¼: {{formControl.value}}</p>\n        <png-select-button\n          formlyPropsBind\n          [props]=\"props\"\n          [formControl]=\"formControl\"\n        >\n      </png-select-button>\n  `,\n})\nexport class PngFormlySelectButtonComponent extends PngFormlyFieldType {\n}\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `\n    <png-select\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    ></png-select>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PngFormlySelectComponent extends PngFormlyFieldType {\n  defaultProps = {\n    placeholder: 'è¯·éæ©'\n  };\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n\n@Component({\n  template: `\n    <png-slider\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    ></png-slider>\n  `\n})\nexport class PngFormlySliderComponent extends PngFormlyFieldType {\n  defaultProps = {\n    range: true,\n    min: 0,\n    max: 100,\n    orientation: 'horizontal'\n  };\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n\n@Component({\n  template: `\n    <p-spinner\n      formlyPropsBind\n      [props]=\"props\"\n      [context]=\"{field:field}\"\n      [formControl]=\"formControl\"\n      [pKeyFilter]=\"props['inputRule'] || 'num'\"\n    ></p-spinner>\n  `\n})\nexport class PngFormlySpinnerComponent extends PngFormlyFieldType {\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `\n    <p-inputSwitch\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    >\n    </p-inputSwitch>\n  `\n})\nexport class PngFormlySwitchComponent extends PngFormlyFieldType {\n\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `\n    <png-table\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    >\n    </png-table>\n  `\n})\nexport class PngFormlyTableComponent extends PngFormlyFieldType {\n  defaultProps = {\n    selectionMode: 'checkbox',\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `\n    <textarea\n      pInputTextarea\n      [cols]=\"props['cols']\"\n      [rows]=\"props['rows']\"\n      [autoResize]=\"props['autoResize']\"\n      [placeholder]=\"to.placeholder || 'è¾å¥åå®¹'\"\n      [formControl]=\"formControl\"\n    >\n    </textarea>\n  `\n})\nexport class PngFormlyTextAreaComponent extends PngFormlyFieldType implements OnInit {\n  defaultProps = {\n    rows: 3,\n    autoResize: true\n  };\n}\n","import {Component} from '@angular/core';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\n@Component({\n  template: `\n    <png-tree\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    >\n    </png-tree>\n  `\n})\nexport class PngFormlyTreeComponent extends PngFormlyFieldType {\n  defaultProps = {\n    selectionMode: 'checkbox',\n  };\n}\n","import {Component, OnInit} from '@angular/core';\nimport {DataFieldUtils} from '@er/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {PngFormlyFieldType} from '../../base/field-type';\n\nexport interface ValueProps {\n  render: (value, field) => string;\n}\n\n@Component({\n  template: `\n    <span class=\"field-value font-weight-bold\" [innerHTML]=\"value$|async|erText\"></span>\n  `\n})\nexport class PngFormlyFieldValueComponent extends PngFormlyFieldType implements OnInit {\n\n  value$ = new BehaviorSubject<any>('');\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.formControl) {\n      this.form.valueChanges.subscribe(value => {\n        if (this.props['render']) {\n          this.value$.next(this.props['render'](this.formControl.value, this.model, this.field['dataField']));\n        } else {\n          if (this.field['dataField']) {\n            this.value$.next(DataFieldUtils.getFieldDisplayContent(this.formControl.value, this.field['dataField']));\n          } else {\n            this.value$.next(this.formControl.value || 'ãæªå¡«ã');\n          }\n        }\n      });\n    }\n  }\n}\n","import {Component, ViewChild, ViewContainerRef} from '@angular/core';\nimport {FieldWrapper} from '@ngx-formly/core';\n\nexport interface PngCardWrapperProps {\n  card: {\n    icon?: string;\n    header?: string;\n    styleClass?: any;\n    style?: any;\n  };\n}\n\n@Component({\n  template: `\n    <div class=\"card\" [ngClass]=\"to['card']?.styleClass\" [ngStyle]=\"to['card']?.style\">\n      <h3 class=\"card-header\"><i [ngClass]=\"to['card']?.icon\"></i> <span [innerHTML]=\"to['card']?.header\"></span></h3>\n      <div class=\"card-body\">\n        <ng-container #fieldComponent></ng-container>\n      </div>\n    </div>\n  `\n})\nexport class PngCardWrapperComponent extends FieldWrapper {\n  @ViewChild('fieldComponent', {read: ViewContainerRef}) fieldComponent: ViewContainerRef;\n}\n","import {Component, ViewChild, ViewContainerRef} from '@angular/core';\nimport {FieldWrapper} from '@ngx-formly/core';\n\nexport interface PngFieldSetWrapperProps {\n  fieldSet: {\n    legend?: string;\n    toggleable?: boolean;\n    styleClass?: any;\n    style?: any\n  }\n}\n\n@Component({\n  template: `\n    <p-fieldset [collapsed]=\"to['fieldSet']?.collapsed\"\n                [legend]=\"to['fieldSet']?.legend\"\n                [styleClass]=\"to['fieldSet']?.styleClass\"\n                [style]=\"to['fieldSet']?.style\"\n                [toggleable]=\"to['fieldSet']?.toggleable || true\">\n      <ng-container #fieldComponent></ng-container>\n    </p-fieldset>\n  `,\n  styleUrls: ['styles.scss']\n})\nexport class PngFieldSetWrapperComponent extends FieldWrapper {\n  @ViewChild('fieldComponent', {read: ViewContainerRef}) fieldComponent: ViewContainerRef;\n}\n","import {Component, ViewChild, ViewContainerRef} from '@angular/core';\nimport {ErFormlyFieldWrapper} from '@er/formly';\nimport {CommonsUtils} from '@er/utils';\n\n@Component({\n  template: `\n    <div class=\"fieldset w-100\">\n      <div class=\"fieldset-{{field.key}}-horizontal py-2\" [ngClass]=\"field.fieldSetStyleClass || 'm-2'\"\n           [ngStyle]=\"field.fieldSetStyle\">\n        <div class=\"row align-items-center\">\n          <div class=\"field-label-horizontal label-{{field.key}}\" [ngClass]=\"field.labelStyleClass || 'col-3 pull-right'\">\n            <label *ngIf=\"to.label && to['hideLabel'] !== true\" [attr.for]=\"id\" style=\"float:right;font-weight: bold\">\n              <span *ngIf=\"to.required && to['hideRequiredMarker'] !== true\" style=\"color: red\" title=\"å¿å¡«åå®¹\">*</span> {{ to.label }}\n            </label>\n          </div>\n          <div [ngClass]=\"field.fieldStyleClass || 'col-9 pull-left'\">\n            <div class=\"d-flex flex-column align-items-start\">\n\n              <ng-container *ngIf=\"to['before'] && to['before'].content\">\n                <er-dyna-content [content]=\"to['before'].content\" [context]=\"field\"></er-dyna-content>\n              </ng-container>\n\n              <div class=\"ui-fluid w-100 mr-2 pr-2 field-control-horizontal field-{{field.key}}\"\n                   [ngClass]=\"field.fieldStyleClass\" [ngStyle]=\"field.fieldStyle\">\n                <ng-template #fieldComponent></ng-template>\n              </div>\n\n              <div *ngIf=\"field.showErrors !== false\" class=\"invalid-feedback d-block\" [ngClass]=\"field.validationStyleClass\"\n                   [ngStyle]=\"field.validationStyle\">\n                <er-validate-messages [formlyField]=\"field\"></er-validate-messages>\n              </div>\n\n              <ng-container *ngIf=\"to.description\">\n                <div class=\"field-description-horizontal field-{{field.key}}-description\">\n                  <small class=\"form-text text-muted\">\n                    <i class=\"text-primary fa fa-info-circle\"></i>&nbsp;\n                    <span [innerHTML]=\"description\"></span>\n                  </small>\n                </div>\n              </ng-container>\n\n              <ng-container *ngIf=\"to['after'] && to['after'].content\">\n                <er-dyna-content [content]=\"to['after'].content\" [context]=\"field\"></er-dyna-content>\n              </ng-container>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['styles.scss']\n})\nexport class PngFormlyHorizontalWrapperComponent extends ErFormlyFieldWrapper {\n  @ViewChild('fieldComponent', {read: ViewContainerRef}) fieldComponent: ViewContainerRef;\n\n  get description() {\n    return CommonsUtils.getValue(this.to.description, this.field);\n  }\n}\n","import {Component, ViewChild, ViewContainerRef} from '@angular/core';\nimport {FieldWrapper} from '@ngx-formly/core';\n\nexport interface PngPanelWrapperProps {\n  panel: {\n    icon?: string;\n    header?: string;\n    footer?: string;\n    barStyleClass?: string;\n    barStyle?: {};\n    styleClass?: string;\n    style?: string;\n    collapsed?: boolean;\n    showHeader?: boolean;\n    toggleable?: boolean;\n  };\n}\n\n@Component({\n  template: `\n    <png-panel\n      [collapsed]=\"to['panel']?.collapsed\"\n      [toggleable]=\"isToggleable\"\n      [showHeader]=\"to['panel']?.showHeader === undefined ? true : to['panel']?.showHeader\"\n      [barStyleClass]=\"to['panel']?.barStyleClass\"\n      [barStyle]=\"to['panel']?.barStyle\"\n      [style]=\"to['panel']?.style\"\n      [styleClass]=\"to['panel']?.styleClass\">\n      <ng-container *ngIf=\"to['panel']?.header\">\n        <ng-template erTypedTemplate=\"header\">\n          <er-dyna-content [content]=\"to['panel'].header\" styleClass=\"d-inline\"></er-dyna-content>\n        </ng-template>\n      </ng-container>\n      <ng-template #fieldComponent></ng-template>\n      <ng-container *ngIf=\"to['panel']?.footer\">\n        <ng-template erTypedTemplate=\"footer\">\n          <er-dyna-content [content]=\"to['panel']?.footer\" styleClass=\"d-inline\"></er-dyna-content>\n        </ng-template>\n      </ng-container>\n    </png-panel>\n  `\n})\nexport class PngPanelWrapperComponent extends FieldWrapper {\n\n  @ViewChild('fieldComponent', {read: ViewContainerRef}) fieldComponent: ViewContainerRef;\n\n  get isToggleable() {\n    return (this.to['panel'] && this.to['panel'].toggleable) !== undefined\n      ? this.to['panel'].toggleable\n      : true;\n  }\n\n\n}\n","import {Component, ViewChild, ViewContainerRef} from '@angular/core';\nimport {ErFormlyFieldWrapper} from '@er/formly';\n\n@Component({\n  template: `\n    <div class=\"fieldset-{{field.key}}-responsive\" [ngClass]=\"field.fieldSetStyleClass\" [ngStyle]=\"field.fieldSetStyle\">\n      \n        <div *ngIf=\"to.label && to['hideLabel'] !== true && to['floatLabel'] !== true\" class=\"field-label-vertical label-{{field.key}}\"\n             [ngClass]=\"field.labelStyleClass\" [ngStyle]=\"field.labelStyle\">\n          <label [attr.for]=\"id\" style=\"font-weight: bold\">\n            <span *ngIf=\"to.required && to['hideRequiredMarker'] !== true\" style=\"color: red\">*</span> {{ to.label }}\n          </label>\n        </div>\n\n        <ng-container *ngIf=\"to['before'] && to['before'].content\">\n          <er-dyna-content [content]=\"to['before'].content\" [context]=\"to['before'].context\"></er-dyna-content>\n        </ng-container>\n\n        <div class=\"ui-fluid w-100 field-control-vertical field-{{field.key}}\"\n             [ngClass]=\"field.fieldStyleClass\" [ngStyle]=\"field.fieldStyle\">\n          <ng-template #fieldComponent></ng-template>\n        </div>\n\n        <ng-container *ngIf=\"to.description\">\n          <div class=\"field-description-vertical field-{{field.key}}\">\n            <small class=\"form-text text-muted\">\n              <i class=\"text-primary fa fa-info-circle\"></i>\n              <er-dyna-content [content]=\"to.description\" [context]=\"field\"></er-dyna-content>\n            </small>\n          </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"to['after'] && to['after'].content\">\n          <er-dyna-content [content]=\"to['after'].content\" [context]=\"to['after'].context\"></er-dyna-content>\n        </ng-container>\n      \n    </div>\n  `\n})\nexport class PngFormlyResponsiveWrapperComponent extends ErFormlyFieldWrapper {\n  @ViewChild('fieldComponent', {read: ViewContainerRef}) fieldComponent: ViewContainerRef;\n}\n","import {Component, ViewChild, ViewContainerRef} from '@angular/core';\nimport {FieldWrapper} from '@ngx-formly/core';\n\nexport interface PngScrollPanelWrapperProps {\n  style?: any;\n  styleClass?: any;\n}\n\n@Component({\n  template: `\n    <p-scrollPanel [style]=\"to['scroll']?.style\" [styleClass]=\"to['scroll']?.styleClass\">\n      <ng-container #fieldComponent></ng-container>\n    </p-scrollPanel >\n  `\n})\nexport class PngScrollPanelWrapperComponent extends FieldWrapper {\n  @ViewChild('fieldComponent', {read: ViewContainerRef}) fieldComponent: ViewContainerRef;\n}\n","import {Component, ViewChild, ViewContainerRef} from '@angular/core';\nimport {ErFormlyFieldWrapper} from '@er/formly';\n\n@Component({\n  template: `\n   <div class=\"fieldset w-100\"> \n    <div class=\"fieldset-{{field.key}}-vertical\" [ngClass]=\"field.fieldSetStyleClass || 'm-2 p-2'\"\n         [ngStyle]=\"field.fieldSetStyle\">\n      <div class=\"row flex-column align-items-center\">\n\n        <div *ngIf=\"to.label && to['hideLabel'] !== true && to['floatLabel'] !== true\" class=\"field-label-vertical label-{{field.key}}\">\n          <label [attr.for]=\"id\" style=\"font-weight: bold\">\n            <span *ngIf=\"to.required && to['hideRequiredMarker'] !== true\" style=\"color: red\" title=\"å¿å¡«åå®¹\">*</span> {{ to.label }}\n          </label>\n        </div>\n\n        <ng-container *ngIf=\"to['before'] && to['before'].content\">\n          <er-dyna-content [content]=\"to['before'].content\" [context]=\"to['before'].context\"></er-dyna-content>\n        </ng-container>\n\n        <div class=\"ui-fluid w-100 p-1 field-control-vertical field-{{field.key}}\"\n             [ngClass]=\"field.fieldStyleClass\" [ngStyle]=\"field.fieldStyle\">\n          <ng-template #fieldComponent></ng-template>\n        </div>\n\n        <div *ngIf=\"field.showErrors\" class=\"invalid-feedback d-block\" [ngClass]=\"field.validationStyleClass\"\n             [ngStyle]=\"field.validationStyle\">\n          <er-validate-messages [formlyField]=\"field\"></er-validate-messages>\n        </div>\n\n        <ng-container *ngIf=\"to.description\">\n          <div class=\"field-description-vertical field-{{field.key}}\">\n            <small class=\"form-text text-muted\">\n              <i class=\"text-primary fa fa-info-circle\"></i>&nbsp;\n              <er-dyna-content styleClass=\"d-inline\" [content]=\"to.description\" [context]=\"field\"></er-dyna-content>\n            </small>\n          </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"to['after'] && to['after'].content\">\n          <er-dyna-content [content]=\"to['after'].content\" [context]=\"to['after'].context\"></er-dyna-content>\n        </ng-container>\n      </div>\n    </div>\n   </div>\n  `,\n  styleUrls: ['styles.scss']\n})\nexport class PngFormlyVerticalWrapperComponent extends ErFormlyFieldWrapper {\n  @ViewChild('fieldComponent', {read: ViewContainerRef}) fieldComponent: ViewContainerRef;\n}\n","export const PngFormlyWrappers = {\n  pngFieldWrapper: 'pngFieldWrapper',\n  pngFieldSetWrapper: 'pngFieldSetWrapper',\n  pngVerticalWrapper: 'pngVerticalWrapper',\n  pngHorizontalWrapper: 'pngHorizontalWrapper',\n  pngResponsiveWrapper: 'pngResponsiveWrapper',\n  pngCardWrapper: 'pngCardWrapper',\n  pngPanelWrapper: 'pngPanelWrapper',\n  pngScrollPanelWrapper: 'pngScrollPanelWrapper'\n};\n","import {ErFormlyFieldConfig} from '@er/formly';\nimport {UiLandscape} from '@er/types';\nimport {FormlyConfig} from '@ngx-formly/core';\nimport {PngFormlyTypes} from '../../types/field-types';\nimport {PngFormlyWrappers} from '../../types/field-wrappers';\n\nconst excludeTypes = [\n  PngFormlyTypes.button\n];\n\nexport class TemplatePngField {\n\n  run(fc: FormlyConfig) {\n    fc.templateManipulators.preWrapper.push((field: ErFormlyFieldConfig) => {\n      if (field && field.type && field.type.startsWith('png') && excludeTypes.indexOf(field.type) === -1) {\n        let landscape = field && field.templateOptions && field.templateOptions.landscape;\n        if (!landscape) {\n          landscape = field && field.formProps && field.formProps.landscape;\n        }\n        switch (landscape || UiLandscape.vertical) {\n          case UiLandscape.horizontal:\n            return PngFormlyWrappers.pngHorizontalWrapper;\n          case UiLandscape.responsive:\n            return PngFormlyWrappers.pngResponsiveWrapper;\n          default:\n            return PngFormlyWrappers.pngVerticalWrapper;\n        }\n      }\n    });\n  }\n}\n","import {ConfigOption} from '@ngx-formly/core';\nimport {PngFormlyAutoCompleteComponent} from '../field-types/auto-complete/component';\nimport {PngFormlyButtonComponent} from '../field-types/button/component';\nimport {PngFormlyCalendarComponent} from '../field-types/calendar/component';\nimport {PngFormlyCheckboxComponent} from '../field-types/checkbox/component';\nimport {PngFormlyChipsComponent} from '../field-types/chips/component';\nimport {PngFormlyFieldDynaComponent} from '../field-types/dyna/component';\nimport {PngFormlyEditorComponent} from '../field-types/editor/component';\nimport {PngFormlyFileUploadComponent} from '../field-types/file-upload/component';\nimport {PngFormlyInputComponent} from '../field-types/input/component';\nimport {PngFormlyKeyFilterComponent} from '../field-types/key-filter/component';\nimport {PngFormlyListBoxComponent} from '../field-types/list-box/component';\nimport {PngFormlyMaskComponent} from '../field-types/mask/component';\nimport {PngFormlyMultiSelectComponent} from '../field-types/multi-select/component';\nimport {PngFormlyRadioComponent} from '../field-types/radio/component';\nimport {PngFormlyRatingComponent} from '../field-types/rating/component';\nimport {PngFormlySelectButtonComponent} from '../field-types/select-button/component';\nimport {PngFormlySelectComponent} from '../field-types/select/component';\nimport {PngFormlySliderComponent} from '../field-types/slider/component';\nimport {PngFormlySpinnerComponent} from '../field-types/spinner/component';\nimport {PngFormlySwitchComponent} from '../field-types/switch/component';\nimport {PngFormlyTableComponent} from '../field-types/table/component';\nimport {PngFormlyTextAreaComponent} from '../field-types/text-area/component';\nimport {PngFormlyTreeComponent} from '../field-types/tree/component';\nimport {PngFormlyFieldValueComponent} from '../field-types/value/component';\nimport {PngCardWrapperComponent} from '../field-wrappers/card/wrapper';\nimport {PngFieldSetWrapperComponent} from '../field-wrappers/field-set/wrapper';\nimport {PngFormlyHorizontalWrapperComponent} from '../field-wrappers/horizontal/wrapper';\nimport {PngPanelWrapperComponent} from '../field-wrappers/panel/wrapper';\nimport {PngFormlyResponsiveWrapperComponent} from '../field-wrappers/responsive/wrapper';\nimport {PngScrollPanelWrapperComponent} from '../field-wrappers/scrol-panel/wrapper';\nimport {PngFormlyVerticalWrapperComponent} from '../field-wrappers/vertical/wrapper';\nimport {TemplatePngField} from '../run/field';\nimport {PngFormlyTypes, PngFormlyWrappers} from '../types/all';\n\nexport const PNG_FORMLY_CONFIG: ConfigOption = {\n  types: [\n    {\n      name: PngFormlyTypes.input,\n      component: PngFormlyInputComponent\n    },\n    {\n      name: PngFormlyTypes.checkbox,\n      component: PngFormlyCheckboxComponent\n    },\n    {\n      name: PngFormlyTypes.textArea,\n      component: PngFormlyTextAreaComponent\n    },\n    {\n      name: PngFormlyTypes.radio,\n      component: PngFormlyRadioComponent\n    },\n    {\n      name: PngFormlyTypes.select,\n      component: PngFormlySelectComponent\n    },\n    {\n      name: PngFormlyTypes.button,\n      component: PngFormlyButtonComponent\n    },\n    {\n      name: PngFormlyTypes.autoComplete,\n      component: PngFormlyAutoCompleteComponent\n    },\n    {\n      name: PngFormlyTypes.calendar,\n      component: PngFormlyCalendarComponent\n    },\n    {\n      name: PngFormlyTypes.chips,\n      component: PngFormlyChipsComponent\n    },\n    {\n      name: PngFormlyTypes.editor,\n      component: PngFormlyEditorComponent\n    },\n    {\n      name: PngFormlyTypes.fileUpload,\n      component: PngFormlyFileUploadComponent\n    },\n    {\n      name: PngFormlyTypes.keyFilter,\n      component: PngFormlyKeyFilterComponent\n    },\n    {\n      name: PngFormlyTypes.listBox,\n      component: PngFormlyListBoxComponent\n    },\n    {\n      name: PngFormlyTypes.mask,\n      component: PngFormlyMaskComponent\n    },\n    {\n      name: PngFormlyTypes.switch,\n      component: PngFormlySwitchComponent\n    },\n    {\n      name: PngFormlyTypes.multiSelect,\n      component: PngFormlyMultiSelectComponent\n    },\n    {\n      name: PngFormlyTypes.rating,\n      component: PngFormlyRatingComponent\n    },\n    {\n      name: PngFormlyTypes.slider,\n      component: PngFormlySliderComponent\n    },\n    {\n      name: PngFormlyTypes.spinner,\n      component: PngFormlySpinnerComponent\n    },\n    {\n      name: PngFormlyTypes.selectButton,\n      component: PngFormlySelectButtonComponent\n    },\n    {\n      name: PngFormlyTypes.table,\n      component: PngFormlyTableComponent\n    },\n    {\n      name: PngFormlyTypes.tree,\n      component: PngFormlyTreeComponent\n    },\n    {\n      name: PngFormlyTypes.value,\n      component: PngFormlyFieldValueComponent\n    },\n    {\n      name: PngFormlyTypes.dyna,\n      component: PngFormlyFieldDynaComponent\n    }\n  ],\n  wrappers: [\n    {name: PngFormlyWrappers.pngVerticalWrapper, component: PngFormlyVerticalWrapperComponent},\n    {name: PngFormlyWrappers.pngHorizontalWrapper, component: PngFormlyHorizontalWrapperComponent},\n    {name: PngFormlyWrappers.pngResponsiveWrapper, component: PngFormlyResponsiveWrapperComponent},\n    {name: PngFormlyWrappers.pngFieldSetWrapper, component: PngFieldSetWrapperComponent},\n    {name: PngFormlyWrappers.pngCardWrapper, component: PngCardWrapperComponent},\n    {name: PngFormlyWrappers.pngPanelWrapper, component: PngPanelWrapperComponent},\n    {name: PngFormlyWrappers.pngScrollPanelWrapper, component: PngScrollPanelWrapperComponent}\n  ],\n  manipulators: [\n    {class: TemplatePngField, method: 'run'}\n  ]\n};\n","import {PngFormlyAutoCompleteComponent} from './auto-complete/component';\nimport {PngFormlyButtonComponent} from './button/component';\nimport {PngFormlyCalendarComponent} from './calendar/component';\nimport {PngFormlyCheckboxComponent} from './checkbox/component';\nimport {PngFormlyChipsComponent} from './chips/component';\nimport {PngFormlyFieldDynaComponent} from './dyna/component';\nimport {PngFormlyEditorComponent} from './editor/component';\nimport {PngFormlyFileUploadComponent} from './file-upload/component';\nimport {PngFormlyInputComponent} from './input/component';\nimport {PngFormlyKeyFilterComponent} from './key-filter/component';\nimport {PngFormlyListBoxComponent} from './list-box/component';\nimport {PngFormlyMaskComponent} from './mask/component';\nimport {PngFormlyMultiSelectComponent} from './multi-select/component';\nimport {PngFormlyRadioComponent} from './radio/component';\nimport {PngFormlyRatingComponent} from './rating/component';\nimport {PngFormlySelectButtonComponent} from './select-button/component';\nimport {PngFormlySelectComponent} from './select/component';\nimport {PngFormlySliderComponent} from './slider/component';\nimport {PngFormlySpinnerComponent} from './spinner/component';\nimport {PngFormlySwitchComponent} from './switch/component';\nimport {PngFormlyTableComponent} from './table/component';\nimport {PngFormlyTextAreaComponent} from './text-area/component';\nimport {PngFormlyTreeComponent} from './tree/component';\nimport {PngFormlyFieldValueComponent} from './value/component';\n\n\nexport {PngFormlyInputComponent} from './input/component';\nexport {PngFormlyCheckboxComponent} from './checkbox/component';\nexport {PngFormlyRadioComponent} from './radio/component';\nexport {PngFormlySelectComponent} from './select/component';\nexport {PngFormlyTextAreaComponent} from './text-area/component';\nexport {PngFormlyAutoCompleteComponent} from './auto-complete/component';\nexport {PngFormlyButtonComponent} from './button/component';\nexport {PngFormlyCalendarComponent} from './calendar/component';\nexport {PngFormlyChipsComponent} from './chips/component';\nexport {PngFormlyEditorComponent} from './editor/component';\nexport {PngFormlyFileUploadComponent} from './file-upload/component';\nexport {PngFormlyKeyFilterComponent} from './key-filter/component';\nexport {PngFormlyListBoxComponent} from './list-box/component';\nexport {PngFormlyMaskComponent} from './mask/component';\nexport {PngFormlyMultiSelectComponent} from './multi-select/component';\nexport {PngFormlyRatingComponent} from './rating/component';\nexport {PngFormlySelectButtonComponent} from './select-button/component';\nexport {PngFormlySliderComponent} from './slider/component';\nexport {PngFormlySpinnerComponent} from './spinner/component';\nexport {PngFormlySwitchComponent} from './switch/component';\nexport {PngFormlyTableComponent} from './table/component';\nexport {PngFormlyTreeComponent} from './tree/component';\nexport {PngFormlyFieldValueComponent, ValueProps} from './value/component';\nexport {PngFormlyFieldDynaComponent, DynaProps} from './dyna/component';\n\nexport const PNG_FORMLY_TYPE_COMPONENTS = [\n  PngFormlyTextAreaComponent,\n  PngFormlySelectComponent,\n  PngFormlyRadioComponent,\n  PngFormlyCheckboxComponent,\n  PngFormlyInputComponent,\n  PngFormlyAutoCompleteComponent,\n  PngFormlyMultiSelectComponent,\n  PngFormlyCalendarComponent,\n  PngFormlyChipsComponent,\n  PngFormlyEditorComponent,\n  PngFormlyKeyFilterComponent,\n  PngFormlyListBoxComponent,\n  PngFormlyMaskComponent,\n  PngFormlyRatingComponent,\n  PngFormlySliderComponent,\n  PngFormlySelectButtonComponent,\n  PngFormlyFileUploadComponent,\n  PngFormlyButtonComponent,\n  PngFormlySwitchComponent,\n  PngFormlySpinnerComponent,\n  PngFormlyTableComponent,\n  PngFormlyTreeComponent,\n  PngFormlyFieldValueComponent,\n  PngFormlyFieldDynaComponent\n];\n","import {PngCardWrapperComponent} from './card/wrapper';\nimport {PngFieldSetWrapperComponent} from './field-set/wrapper';\nimport {PngFormlyHorizontalWrapperComponent} from './horizontal/wrapper';\nimport {PngPanelWrapperComponent} from './panel/wrapper';\nimport {PngFormlyResponsiveWrapperComponent} from './responsive/wrapper';\nimport {PngScrollPanelWrapperComponent} from './scrol-panel/wrapper';\nimport {PngFormlyVerticalWrapperComponent} from './vertical/wrapper';\n\nexport {PngCardWrapperComponent, PngCardWrapperProps} from './card/wrapper';\nexport {PngFormlyHorizontalWrapperComponent} from './horizontal/wrapper';\nexport {PngFieldSetWrapperComponent, PngFieldSetWrapperProps} from './field-set/wrapper';\nexport {PngPanelWrapperComponent, PngPanelWrapperProps} from './panel/wrapper';\nexport {PngFormlyVerticalWrapperComponent} from './vertical/wrapper';\nexport {PngScrollPanelWrapperComponent, PngScrollPanelWrapperProps} from './scrol-panel/wrapper';\nexport {PngFormlyResponsiveWrapperComponent} from './responsive/wrapper';\n\nexport const PNG_FORMLY_WRAPPERS = [\n  PngFormlyVerticalWrapperComponent,\n  PngFormlyHorizontalWrapperComponent,\n  PngFormlyResponsiveWrapperComponent,\n  PngPanelWrapperComponent,\n  PngCardWrapperComponent,\n  PngFieldSetWrapperComponent,\n  PngScrollPanelWrapperComponent\n];\n","import {NgModule} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {ErCoreModule} from '@er/core';\nimport {ErFormlyModule} from '@er/formly';\nimport {ErPrimeNgModule} from '@er/primeng';\nimport {ErValidateModule} from '@er/validate';\nimport {FormlyModule} from '@ngx-formly/core';\nimport {Components} from './components/all';\nimport {PNG_FORMLY_CONFIG} from './config/formly';\nimport {PNG_FORMLY_TYPE_COMPONENTS} from './field-types/all';\nimport {PNG_FORMLY_WRAPPERS} from './field-wrappers/all';\n\n@NgModule({\n  imports: [\n    ReactiveFormsModule,\n    ErCoreModule,\n    ErValidateModule,\n    ErFormlyModule,\n    ErPrimeNgModule,\n    FormlyModule.forChild(PNG_FORMLY_CONFIG)\n  ],\n  declarations: [\n    ...PNG_FORMLY_TYPE_COMPONENTS,\n    ...PNG_FORMLY_WRAPPERS,\n    ...Components\n  ],\n  exports: [\n    FormlyModule,\n    ...Components\n  ]\n})\nexport class ErFormlyPrimeNgModule {\n}\n"]}