(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/operators'), require('rxjs'), require('@er/utils'), require('@er/types'), require('@angular/core'), require('@angular/forms'), require('@er/core'), require('@er/formly'), require('@er/primeng'), require('@er/validate'), require('@ngx-formly/core')) :
    typeof define === 'function' && define.amd ? define('@er/formly-primeng', ['exports', 'rxjs/operators', 'rxjs', '@er/utils', '@er/types', '@angular/core', '@angular/forms', '@er/core', '@er/formly', '@er/primeng', '@er/validate', '@ngx-formly/core'], factory) :
    (factory((global.er = global.er || {}, global.er['formly-primeng'] = {}),global.rxjs.operators,global.rxjs,global.utils,global.types,global.ng.core,global.ng.forms,global.core$1,global.formly,global.primeng,global.validate,global.core$2));
}(this, (function (exports,operators,rxjs,utils,types,core,forms,core$1,formly,primeng,validate,core$2) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PngFormlyTypes = {
        input: 'pngInput',
        checkbox: 'pngCheckbox',
        radio: 'pngRadio',
        select: 'pngSelect',
        switch: 'pngSwitch',
        button: 'pngButton',
        textArea: 'pngTextArea',
        autoComplete: 'pngAutoComplete',
        calendar: 'pngCalendar',
        chips: 'pngChips',
        editor: 'pngEditor',
        keyFilter: 'pngKeyFilter',
        fileUpload: 'pngFileUpload',
        listBox: 'pngListBox',
        mask: 'pngMask',
        multiSelect: 'pngMultiSelect',
        rating: 'pngRating',
        slider: 'pngSlider',
        spinner: 'pngSpinner',
        selectButton: 'pngSelectButton',
        tree: 'pngTree',
        table: 'pngTable',
        dyna: 'pngDyna',
        value: 'pngValue'
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyUtils = /** @class */ (function () {
        function PngFormlyUtils() {
        }
        /**
         * @param {?} formProps
         * @param {?} field
         * @param {?=} formlyForm
         * @return {?}
         */
        PngFormlyUtils.resolveField = /**
         * @param {?} formProps
         * @param {?} field
         * @param {?=} formlyForm
         * @return {?}
         */
            function (formProps, field, formlyForm) {
                if (formProps) {
                    field.formProps = formProps;
                }
                if (formlyForm) {
                    field.formlyForm = formlyForm;
                }
                field.className = field.className || '' + 'formly-field';
                PngFormlyUtils.resolveDataField(formProps, field, formlyForm);
            };
        /**
         * @param {?} apiEntry
         * @param {?} fieldName
         * @param {?=} query
         * @param {?=} selectable
         * @return {?}
         */
        PngFormlyUtils.distinctSuggestProps = /**
         * @param {?} apiEntry
         * @param {?} fieldName
         * @param {?=} query
         * @param {?=} selectable
         * @return {?}
         */
            function (apiEntry, fieldName, query, selectable) {
                if (selectable === void 0) {
                    selectable = false;
                }
                /** @type {?} */
                var props = {
                    type: PngFormlyTypes.autoComplete,
                    props: ( /** @type {?} */({
                        minLength: 1,
                        size: 5,
                        forceSelection: false,
                        dropdown: false,
                        placeholder: '请输入唯一的代码值',
                        onSelect: function (ctx) {
                            if (!selectable) {
                                utils.DialogUtils.error('无效操作', '该值已经存在，不能选择');
                                setTimeout(function () { return ctx.field.formControl.reset(); });
                            }
                        },
                        $ext: {
                            apiDataProps: ( /** @type {?} */({
                                apiEntry: apiEntry,
                                query: query,
                                searchFields: fieldName,
                                withTerm: true
                            })),
                            dataItemProps: {
                                template: function (item) { return "<span title=\"\u8BE5\u503C\u5DF2\u7ECF\u5B58\u5728\uFF0C\u4E0D\u53EF\u7528\"><del>" + item[fieldName] + "</del></span> "; }
                            }
                        }
                    })),
                    templateOptions: {
                        required: false,
                        description: '<span class="text-danger">内容必须唯一，可以不填，不填时系统自动生成</span>'
                    }
                };
                return props;
            };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        PngFormlyUtils.resolveValidators = /**
         * @private
         * @param {?} field
         * @return {?}
         */
            function (field) {
                if (field.validators) {
                    /** @type {?} */
                    var validates = field.validators;
                    field.validators = {};
                    if (utils.CommonsUtils.isFunction(validates)) {
                        field.validators.validation = [validates];
                    }
                    else if (utils.CommonsUtils.isArray(validates)) {
                        field.validators.validation = validates;
                    }
                    else {
                        field.validators = validates;
                    }
                }
                if (field.validations) {
                    if (field.validators && field.validators['validation']) {
                        field.validators.validation = __assign({}, field.validators.validation, field.validations);
                    }
                    else if (field.validators) {
                        field.validators = __assign({}, field.validators, { validation: field.validations });
                    }
                    else {
                        field.validators = {};
                        field.validators.validation = field.validations;
                    }
                    delete field.validations;
                }
            };
        /**
         * @private
         * @param {?} dataField
         * @param {?} field
         * @return {?}
         */
        PngFormlyUtils.resolveBasic = /**
         * @private
         * @param {?} dataField
         * @param {?} field
         * @return {?}
         */
            function (dataField, field) {
                field.key = field.key || dataField.key;
                if (dataField.hidden) {
                    field.hide = true;
                }
                if (dataField.defaultValue !== undefined) {
                    field.defaultValue = dataField.defaultValue;
                }
                switch (dataField.dataAttr) {
                    case types.DataAttr.CURRENCY:
                        field.dataType = types.DataType.NUMBER;
                        field.defaultValue = 0;
                        break;
                    case types.DataAttr.TEXT:
                        field.type = PngFormlyTypes.textArea;
                        break;
                    case types.DataAttr.DISTINCT:
                        Object.assign(field, PngFormlyUtils.distinctSuggestProps(field.apiEntry, field.key));
                        break;
                }
                if (!field.type) {
                    switch (dataField.dataType) {
                        case types.DataType.STRING:
                            field.type = PngFormlyTypes.input;
                            break;
                        case types.DataType.BOOLEAN:
                            field.type = PngFormlyTypes.switch;
                            break;
                        case types.DataType.NUMBER:
                            field.type = PngFormlyTypes.spinner;
                            break;
                        case types.DataType.DATE:
                            field.type = PngFormlyTypes.calendar;
                            break;
                        default:
                            field.type = PngFormlyTypes.input;
                    }
                }
            };
        /**
         * @private
         * @param {?} dataField
         * @param {?} field
         * @return {?}
         */
        PngFormlyUtils.resolveProps = /**
         * @private
         * @param {?} dataField
         * @param {?} field
         * @return {?}
         */
            function (dataField, field) {
                /** @type {?} */
                var props = {
                    $ext: {}
                };
                if (dataField.dataItems) {
                    props.$ext['dataItems'] = dataField.dataItems;
                }
                if (dataField.apiDataProps) {
                    props.$ext['apiDataProps'] = dataField.apiDataProps;
                }
                if (dataField.dataItemProps) {
                    props.$ext['dataItemProps'] = dataField.dataItemProps;
                }
                if (dataField.dataAttr === types.DataAttr.DATA_CODE) {
                    props['dataKey'] = utils.ConfigUtils.getConfig().dataFieldProps.dataCode.codeKey;
                }
                if (dataField.dataItems) {
                    props.$ext['dataItems'] = dataField.dataItems;
                }
                switch (dataField.dataAttr) {
                    case types.DataAttr.DATE_TIME:
                        Object.assign(props, ( /** @type {?} */({
                            dateFormat: 'yy-mm-dd hh:mm',
                            monthNavigator: true,
                            yearNavigator: true,
                            showTime: true
                        })));
                        break;
                    case types.DataAttr.DATE:
                        Object.assign(props, ( /** @type {?} */({
                            dateFormat: 'yy-mm-dd',
                            monthNavigator: true,
                            yearNavigator: true
                        })));
                        break;
                    case types.DataAttr.TIME:
                        Object.assign(props, ( /** @type {?} */({
                            timeOnly: true
                        })));
                        break;
                    case types.DataAttr.MONTH:
                        Object.assign(props, ( /** @type {?} */({
                            view: 'month',
                            dateFormat: 'yy-mm',
                            yearNavigator: true,
                            monthNavigator: true,
                            yearRange: '2000:2020'
                        })));
                        break;
                }
                field.props = utils.CommonsUtils.defaults(field.props, props);
            };
        /**
         * @private
         * @param {?} dataField
         * @param {?} field
         * @return {?}
         */
        PngFormlyUtils.resolveAttrs = /**
         * @private
         * @param {?} dataField
         * @param {?} field
         * @return {?}
         */
            function (dataField, field) {
                /** @type {?} */
                var attrs = {};
                switch (dataField.dataAttr) {
                    case types.DataAttr.CURRENCY:
                        utils.CommonsUtils.set(attrs, '$ext.inputRule', 'pnum');
                        utils.CommonsUtils.set(attrs, '$ext.postText', '￥');
                        break;
                    case types.DataAttr.PHONE:
                        utils.CommonsUtils.set(attrs, '$ext.inputRule', 'pint');
                        utils.CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-phone');
                        break;
                    case types.DataAttr.ID_CARD:
                        utils.CommonsUtils.set(attrs, '$ext.inputRule', /[0-9]|X|x/);
                        utils.CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-id-card');
                        break;
                    case types.DataAttr.QQ:
                        utils.CommonsUtils.set(attrs, '$ext.inputRule', 'pint');
                        utils.CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-qq');
                        break;
                    case types.DataAttr.WE_CHAT:
                        utils.CommonsUtils.set(attrs, '$ext.inputRule', 'pint');
                        utils.CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-wechat');
                        break;
                    case types.DataAttr.EMAIL:
                        utils.CommonsUtils.set(attrs, '$ext.preText', '@');
                        break;
                    case types.DataAttr.URL:
                        utils.CommonsUtils.set(attrs, '$ext.preText', 'http://');
                        break;
                }
                field.attrs = utils.CommonsUtils.defaults(field.attrs, attrs);
            };
        /**
         * @private
         * @param {?} dataField
         * @param {?} field
         * @return {?}
         */
        PngFormlyUtils.resolveTemplateOptions = /**
         * @private
         * @param {?} dataField
         * @param {?} field
         * @return {?}
         */
            function (dataField, field) {
                /** @type {?} */
                var options = {};
                options.label = dataField.label + ":";
                if (dataField.required) {
                    options.required = true;
                }
                if (dataField.description) {
                    options.description = dataField.description;
                }
                if (dataField.placeholder) {
                    options.placeholder = dataField.placeholder;
                }
                if (dataField.disabled) {
                    options.disabled = dataField.disabled;
                }
                field.templateOptions = utils.CommonsUtils.defaults(field.templateOptions, options);
            };
        /**
         * @private
         * @param {?} dataField
         * @param {?} field
         * @return {?}
         */
        PngFormlyUtils.resolveValidations = /**
         * @private
         * @param {?} dataField
         * @param {?} field
         * @return {?}
         */
            function (dataField, field) {
                /** @type {?} */
                var validations = [];
                if (dataField.maxLength) {
                    validations.push(validate.NgValidators.maxLength(dataField.maxLength));
                }
                if (dataField.minLength) {
                    validations.push(validate.NgValidators.minLength(dataField.minLength));
                }
                if (dataField.max) {
                    validations.push(validate.NgValidators.max(dataField.max));
                }
                if (dataField.min) {
                    validations.push(validate.NgValidators.min(dataField.min));
                }
                if (dataField.pattern) {
                    validations.push(validate.NgValidators.pattern(dataField.pattern));
                }
                if (dataField.dataAttr === types.DataAttr.ID_CARD) {
                    validations.push(validate.NgValidators.idCard);
                }
                if (validations.length > 0) {
                    field.validations = validations;
                }
            };
        /**
         * @private
         * @param {?} dataField
         * @param {?} field
         * @return {?}
         */
        PngFormlyUtils.resolveParsers = /**
         * @private
         * @param {?} dataField
         * @param {?} field
         * @return {?}
         */
            function (dataField, field) {
                field.parsers = utils.CommonsUtils.getArrayValue(dataField.parsers) || [];
                /** @type {?} */
                var parser;
                switch (dataField.dataAttr) {
                    case types.DataAttr.CURRENCY:
                        parser = function (val) { return val ? Number(val) : val; };
                        break;
                    case types.DataAttr.DATE:
                        parser = function (val) { return val ? utils.DateUtils.getFormattedDate(val, 'YYYY-MM-DD') : val; };
                        break;
                    case types.DataAttr.DATE_TIME:
                        parser = function (val) { return val ? utils.DateUtils.getFormattedDate(val, 'YYYY-MM-DD HH:mm:ss') : val; };
                        break;
                    case types.DataAttr.TIME:
                        parser = function (val) { return val ? utils.DateUtils.getFormattedDate(val, 'HH:mm:ss') : val; };
                        break;
                    case types.DataAttr.YEAR:
                        parser = function (val) { return val ? utils.DateUtils.getFormattedDate(val, 'YYYY') : val; };
                        break;
                    case types.DataAttr.MONTH:
                        parser = function (val) { return val ? utils.DateUtils.getFormattedDate(val, 'YYYY-MM') : val; };
                        break;
                    case types.DataAttr.PERCENT:
                        parser = function (val) { return val ? Number(val) / 100 : val; };
                        break;
                    case types.DataAttr.ID_CARD:
                        parser = function (val) { return val ? val.toUpperCase() : val; };
                        break;
                }
                /** @type {?} */
                var parsers = utils.CommonsUtils.getArrayValue(dataField.parsers) || [];
                if (parser) {
                    parsers.push(function (val) {
                        try {
                            return parser(val);
                        }
                        catch (e) {
                            return undefined;
                        }
                    });
                }
                if (parsers.length > 0) {
                    field.parsers = parsers;
                }
            };
        /**
         * @private
         * @param {?} formProps
         * @param {?} field
         * @param {?=} formlyForm
         * @return {?}
         */
        PngFormlyUtils.resolveDataField = /**
         * @private
         * @param {?} formProps
         * @param {?} field
         * @param {?=} formlyForm
         * @return {?}
         */
            function (formProps, field, formlyForm) {
                if (field.fieldArray) {
                    if (field.wrappers) {
                        field.wrappers = utils.CommonsUtils.getArrayValue(field.wrappers);
                    }
                    PngFormlyUtils.resolveField(function () { return formProps; }, field.fieldArray, function () { return formlyForm; }); // bind latter
                }
                else if (field.fieldGroup) {
                    if (field.wrappers) {
                        field.wrappers = utils.CommonsUtils.getArrayValue(field.wrappers);
                    }
                    field.fieldGroup.forEach(function (aField) {
                        if (field.templateOptions && field.templateOptions.landscape) {
                            utils.CommonsUtils.set(( /** @type {?} */(aField)), 'templateOptions.landscape', field.templateOptions.landscape);
                        }
                        PngFormlyUtils.resolveField(formProps, aField, formlyForm);
                    });
                }
                else {
                    /** @type {?} */
                    var dataField = field.dataField;
                    if (field.template) {
                        field.type = 'formly-template';
                    }
                    if (field.type === PngFormlyTypes.dyna) {
                        Object.defineProperty(field, 'key', {
                            value: "$_" + utils.IdUtils.getRandom(),
                            enumerable: false
                        });
                        // field.key = `$_${IdUtils.getRandom()}`;
                    }
                    if (!dataField) {
                        if (!field.type) {
                            field.type = PngFormlyTypes.input;
                        }
                        if (field.parsers) {
                            field.parsers = utils.CommonsUtils.getArrayValue(field.parsers);
                        }
                        PngFormlyUtils.resolveValidators(field);
                        return;
                    }
                    dataField = utils.CommonsUtils.merge(core$1.DataFieldUtils.getFieldDefaultProps(dataField), dataField);
                    field.dataField = dataField;
                    if (field.type && field.type === PngFormlyTypes.value) {
                        field.key = field.key || field.dataField.key;
                        utils.CommonsUtils.set(( /** @type {?} */(field)), 'templateOptions.label', field.dataField.label);
                        return field;
                    }
                    /** @type {?} */
                    var resolvedField = {};
                    PngFormlyUtils.resolveBasic(dataField, resolvedField);
                    PngFormlyUtils.resolveProps(dataField, resolvedField);
                    PngFormlyUtils.resolveAttrs(dataField, resolvedField);
                    PngFormlyUtils.resolveTemplateOptions(dataField, resolvedField);
                    PngFormlyUtils.resolveValidations(dataField, resolvedField);
                    utils.CommonsUtils.defaults(field, resolvedField);
                    if (field.type === PngFormlyTypes.input) {
                        if (field.props['$ext'].apiDataProps) {
                            field.type = PngFormlyTypes.autoComplete;
                        }
                        if (dataField.length) {
                            utils.CommonsUtils.set(( /** @type {?} */(field)), 'attrs.size', dataField.length);
                        }
                    }
                    /** @type {?} */
                    var apiDataProps = utils.CommonsUtils.get(field, 'props.$ext.apiDataProps');
                    if (apiDataProps) {
                        if (!apiDataProps.apiEntry) {
                            apiDataProps['apiEntry'] = formProps.apiEntry || formProps.entity && formProps.entity.apiEntry;
                        }
                        if (!apiDataProps.dataPath) {
                            apiDataProps['dataPath'] = 'items';
                        }
                    }
                    PngFormlyUtils.resolveParsers(dataField, resolvedField);
                    if (resolvedField.parsers) {
                        field.parsers = field.parsers || [];
                        field.parsers = field.parsers.concat(resolvedField.parsers);
                    }
                    PngFormlyUtils.resolveValidators(field);
                }
            };
        return PngFormlyUtils;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyFormComponent = /** @class */ (function (_super) {
        __extends(PngFormlyFormComponent, _super);
        function PngFormlyFormComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.debug = !!!utils.ConfigUtils.getConfig().isProduction;
            _this.onFormValueChanges = new core.EventEmitter();
            _this.panelProps = {};
            _this._formProps = {};
            return _this;
        }
        Object.defineProperty(PngFormlyFormComponent.prototype, "props", {
            get: /**
             * @return {?}
             */ function () {
                return this._props;
            },
            set: /**
             * @param {?} props
             * @return {?}
             */ function (props) {
                this.panelProps = props['panel'] || {};
                this._props = utils.CommonsUtils.omit(props, 'panel');
                this.initFormProps(this._props);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PngFormlyFormComponent.prototype, "formProps", {
            get: /**
             * @return {?}
             */ function () {
                return this._formProps || {};
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        PngFormlyFormComponent.prototype.formValueChanges = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.debug) {
                    this.formModel$ = rxjs.of(this.formlyForm.model);
                }
                this.onFormValueChanges.emit(event);
            };
        /**
         * @param {?} props
         * @return {?}
         */
        PngFormlyFormComponent.prototype.beforeRoutePropsBind = /**
         * @param {?} props
         * @return {?}
         */
            function (props) {
                return { props: props };
            };
        /**
         * @param {?} formProps
         * @return {?}
         */
        PngFormlyFormComponent.prototype.resolveFormFields = /**
         * @param {?} formProps
         * @return {?}
         */
            function (formProps) {
                var _this = this;
                if (!formProps || !formProps['fields']) {
                    core$1.LogUtils.error(this, '没有定义fields!', formProps);
                    return;
                }
                formProps.formlyForm = this.formlyForm;
                this.formlyForm.formProps = formProps;
                formProps.fields.forEach(function (field) {
                    PngFormlyUtils.resolveField(formProps, field, _this.formlyForm);
                });
            };
        /**
         * @return {?}
         */
        PngFormlyFormComponent.prototype.afterPropsInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @private
         * @param {?} formProps
         * @return {?}
         */
        PngFormlyFormComponent.prototype.initFormProps = /**
         * @private
         * @param {?} formProps
         * @return {?}
         */
            function (formProps) {
                this.resolveFormFields(formProps);
                formProps.$id = utils.IdUtils.getRandom();
                if (formProps.entity) {
                    if (!formProps.caption) {
                        if (formProps.$routeParams && formProps.$routeParams['id']) {
                            formProps.caption = "\u7F16\u8F91" + formProps.entity.label;
                        }
                        else {
                            formProps.caption = "\u6DFB\u52A0" + formProps.entity.label;
                        }
                    }
                    if (!formProps.apiEntry) {
                        formProps.apiEntry = formProps.entity.apiEntry;
                    }
                }
                if (!formProps.apiEntry) {
                    core$1.LogUtils.warn([this, '没有定义apiEntry,表单不能提交！', formProps]);
                }
                else if (this.formlyForm) {
                    this.formlyForm.apiEntry = formProps.apiEntry;
                }
                if (formProps.beforeSubmit) {
                    this.beforeSubmit = formProps.beforeSubmit;
                    delete formProps.beforeSubmit;
                }
                if (formProps.valueChanges) {
                    this.valueChanges = formProps.valueChanges;
                    delete formProps.valueChanges;
                }
                if (formProps.afterSubmit) {
                    this.afterSubmit = formProps.afterSubmit;
                    delete formProps.afterSubmit;
                }
                if (formProps.entity && formProps.entity.initValue) {
                    formProps.model = formProps.entity.initValue;
                }
                else {
                    formProps.model = {};
                }
                this._formProps = formProps;
                this.afterPropsInit();
            };
        PngFormlyFormComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'png-formly-form',
                        template: "\n    <png-panel [showHeader]=\"panelProps['showHeader']\"\n               [header]=\"panelProps['caption']\"\n               [footer]=\"panelProps['footer']\"\n               [icon]=\"panelProps['icon']\"\n               [collapsed]=\"panelProps['collapsed']\"\n               [toggleable]=\"panelProps['collapsable']\"\n               [styleClass]=\"panelProps['panelStyleClass']\"\n               [barStyleClass]=\"panelProps['barStyleClass']\"\n               [style]=\"panelProps['panelStyle']\"\n    >\n      <er-formly-form\n        class=\"my-2\"\n        erPropsBind\n        [props]=\"formProps\"\n        [beforeSubmit]=\"beforeSubmit\"\n        [afterSubmit]=\"afterSubmit\"\n        [valueChanges]=\"valueChanges\"\n        (onFormValueChanges)=\"formValueChanges($event)\"\n      >\n      </er-formly-form>\n    </png-panel>\n    <png-form-debug *ngIf=\"debug\"\n                    [model]=\"formModel$|async\"\n                    [debugFormProps]=\"props\"\n                    [runtimeFormProps]=\"formProps\"\n    >\n    </png-form-debug>\n  "
                    }] }
        ];
        PngFormlyFormComponent.propDecorators = {
            debug: [{ type: core.Input }],
            formlyForm: [{ type: core.ViewChild, args: [formly.FormlyFormComponent,] }],
            onFormValueChanges: [{ type: core.Output }],
            props: [{ type: core.Input }]
        };
        return PngFormlyFormComponent;
    }(core$1.RouteBindComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyAuditFormComponent = /** @class */ (function (_super) {
        __extends(PngFormlyAuditFormComponent, _super);
        function PngFormlyAuditFormComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.buttonsStyleClass = 'text-center my-5';
            _this.submitBtnStyleClass = 'btn btn-success';
            _this.resetBtnStyleClass = 'btn btn-danger';
            _this.initBtnStyleClass = 'btn btn-alert';
            _this.backBtnStyleClass = 'btn btn-info';
            return _this;
        }
        /**
         * @param {?} formProps
         * @return {?}
         */
        PngFormlyAuditFormComponent.prototype.resolveFormFields = /**
         * @param {?} formProps
         * @return {?}
         */
            function (formProps) {
                var _this = this;
                if (!formProps || !formProps['fields']) {
                    core$1.LogUtils.error(this, '没有定义fields!', formProps);
                    return;
                }
                if (!formProps.caption) {
                    formProps.caption = "\u5BA1\u6838" + formProps.entity.label + "\u4FE1\u606F";
                }
                formProps.fields.forEach(function (field) {
                    field.type = PngFormlyTypes.value;
                    PngFormlyUtils.resolveField(formProps, field, _this);
                });
                /** @type {?} */
                var commentField = {
                    key: 'comment',
                    type: PngFormlyTypes.textArea,
                    attrs: {
                        placeholder: '请输入您的审核意见或备注'
                    },
                    templateOptions: {
                        label: '审核意见',
                        description: '审核不通过时，必须输入不通过的原因',
                        minLength: 5
                    }
                };
                PngFormlyUtils.resolveField(formProps, commentField, this);
                formProps.fields.push(commentField);
            };
        /**
         * @return {?}
         */
        PngFormlyAuditFormComponent.prototype.onAccept = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var newState = this.saveAuditHis();
                core$1.ApiUtils.patchById(this.formlyForm.apiEntry, this.formlyForm.modelId, this.getSubmitData(newState), {
                    tag: this.formlyForm.formId
                }).subscribe();
            };
        /**
         * @return {?}
         */
        PngFormlyAuditFormComponent.prototype.onReject = /**
         * @return {?}
         */
            function () {
                if (utils.CommonsUtils.isEmpty(this.formlyForm.model['comment'])) {
                    utils.DialogUtils.error('操作无效', '请输入不通过的原因');
                    return;
                }
                core$1.ApiUtils.patchById(this.formlyForm.apiEntry, this.formlyForm.modelId, this.getSubmitData(-1), {
                    tag: this.formlyForm.formId
                }).subscribe();
            };
        /**
         * @param {?} state
         * @return {?}
         */
        PngFormlyAuditFormComponent.prototype.getSubmitData = /**
         * @param {?} state
         * @return {?}
         */
            function (state) {
                return {
                    audit: {
                        state: state,
                        auditComment: this.formlyForm.model['comment'],
                        auditDate: utils.DateUtils.getFormattedDate(),
                        auditorName: core$1.AuthUtils.getCurrentUser().fullName,
                        auditorId: core$1.AuthUtils.getCurrentUser().id
                    }
                };
            };
        /**
         * @private
         * @return {?}
         */
        PngFormlyAuditFormComponent.prototype.saveAuditHis = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var audit = this.formlyForm.model['audit'];
                if (audit) {
                    /** @type {?} */
                    var data = this.formlyForm.model;
                    delete data['id'];
                    core$1.ApiUtils.save(this.formlyForm.apiEntry + "-audit-his", data, {
                        tag: this.formlyForm.formId
                    }).subscribe();
                    return ++audit['state'];
                }
                return 1;
            };
        PngFormlyAuditFormComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'png-formly-audit-form',
                        template: "\n    <png-panel [header]=\"formProps.caption\"\n               [footer]=\"formProps.footer\"\n               [icon]=\"formProps.icon\"\n               [toggleable]=\"formProps.collapsable\"\n    >\n      <er-formly-form\n        class=\"mt-2\"\n        erPropsBind\n        [props]=\"formProps\"\n        [beforeSubmit]=\"beforeSubmit\"\n        [afterSubmit]=\"afterSubmit\"\n      >\n        <ng-template erTypedTemplate=\"buttons\">\n          <div [ngClass]=\"buttonsStyleClass\">\n            <er-button [stateKey]=\"formlyForm.formId\"\n                       icon=\"fa fa-check\"\n                       label=\"\u901A&nbsp;&nbsp;&nbsp;\u8FC7\"\n                       title=\"\u4FDD\u7559\u6570\u636E\u5230\u670D\u52A1\u7AEF\"\n                       class=\"mr-2\"\n                       type=\"button\"\n                       [disabled]=\"!formlyForm.form.valid\"\n                       [styleClass]=\"submitBtnStyleClass\"\n                       (onClick)=\"onAccept()\"\n            ></er-button>\n            <er-button icon=\"fa fa-close\"\n                       class=\"ml-4\"\n                       label=\"\u4E0D&nbsp;&nbsp;&nbsp;\u901A&nbsp;&nbsp;&nbsp;\u8FC7\"\n                       title=\"\u6062\u590D\u5230\u4FEE\u6539\u524D\u7684\u72B6\u6001\"\n                       [styleClass]=\"resetBtnStyleClass\"\n                       (onClick)=\"onReject()\"\n            >\n            </er-button>\n          </div>\n\n        </ng-template>\n      </er-formly-form>\n    </png-panel>\n\n  "
                    }] }
        ];
        PngFormlyAuditFormComponent.propDecorators = {
            buttonsStyleClass: [{ type: core.Input }],
            submitBtnStyleClass: [{ type: core.Input }],
            resetBtnStyleClass: [{ type: core.Input }],
            initBtnStyleClass: [{ type: core.Input }],
            backBtnStyleClass: [{ type: core.Input }]
        };
        return PngFormlyAuditFormComponent;
    }(PngFormlyFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormDebugComponent = /** @class */ (function (_super) {
        __extends(PngFormDebugComponent, _super);
        function PngFormDebugComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFormDebugComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'png-form-debug',
                        template: "\n    <p-tabView>\n      <p-tabPanel header=\"Form Data\" leftIcon=\"fa fa-eye text-dark\">\n        <pre [erJsonViewer]=\"model\"></pre>\n      </p-tabPanel>\n      <p-tabPanel header=\"Form Json\" leftIcon=\"fa fa-gear text-info\">\n        <pre [erJsonViewer]=\"debugFormProps\"></pre>\n      </p-tabPanel>\n      <p-tabPanel header=\"Runtime Form Json\" leftIcon=\"fa fa-cogs text-danger\">\n        <pre [erJsonViewer]=\"runtimeFormProps\"></pre>\n      </p-tabPanel>\n    </p-tabView>\n  ",
                        styles: ["/deep/ .ui-tabview-selected{border-bottom:5px solid red!important}/deep/ .ui-tabview-selected .ui-tabview-title{color:#000!important}"]
                    }] }
        ];
        PngFormDebugComponent.propDecorators = {
            model: [{ type: core.Input }],
            debugFormProps: [{ type: core.Input }],
            runtimeFormProps: [{ type: core.Input }]
        };
        return PngFormDebugComponent;
    }(core$1.BaseComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyTabsFormComponent = /** @class */ (function (_super) {
        __extends(PngFormlyTabsFormComponent, _super);
        function PngFormlyTabsFormComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.onTabChange = new core.EventEmitter();
            _this.onTabClose = new core.EventEmitter();
            return _this;
        }
        /**
         * @param {?} formProps
         * @return {?}
         */
        PngFormlyTabsFormComponent.prototype.resolveFormFields = /**
         * @param {?} formProps
         * @return {?}
         */
            function (formProps) {
                var _this = this;
                if (!formProps || !formProps['tabs']) {
                    core$1.LogUtils.error(this, '没有定义tabs', formProps);
                }
                if (formProps.tabs) {
                    formProps.tabs.forEach(function (tab) {
                        tab.fields.forEach(function (field) {
                            PngFormlyUtils.resolveField(_this._formProps, field, _this);
                        });
                    });
                    this.formArray = new forms.FormArray(formProps.tabs.map(function () { return new forms.FormGroup({}); }));
                    this.tabFormlyOptions = formProps.tabs.map(function (tab) {
                        return __assign({}, formProps.options || {}, tab.options || {});
                    });
                }
                this.currentTabIndex = formProps.activeIndex || 0;
            };
        /**
         * @return {?}
         */
        PngFormlyTabsFormComponent.prototype.afterPropsInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} event
         * @return {?}
         */
        PngFormlyTabsFormComponent.prototype.tabChange = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.currentTabIndex = event;
                this.onTabChange.emit(event);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        PngFormlyTabsFormComponent.prototype.tabClose = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.onTabClose.emit(event);
            };
        PngFormlyTabsFormComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'png-formly-tab',
                        template: "\n    <png-panel [header]=\"formProps.caption\" [footer]=\"formProps.footer\" [icon]=\"formProps.icon\" [toggleable]=\"formProps.collapsable\">\n      <p-tabView [activeIndex]=\"formProps['activeIndex']\"\n                 [styleClass]=\"formProps.styleClass\"\n                 [style]=\"formProps.style\"\n                 [orientation]=\"formProps['tabOrientation']\"\n                 (onChange)=\"tabChange($event)\"\n                 (onClose)=\"tabClose($event)\"\n      >\n        <ng-container>\n          <p-tabPanel *ngFor=\"let tab of formProps['tabs']; let i = index\"\n                      [header]=\"tab.caption\"\n                      [headerStyle]=\"tab.style\"\n                      [headerStyleClass]=\"tab.styleClass\"\n                      [leftIcon]=\"tab.leftIcon\"\n                      [rightIcon]=\"tab.rightIcon\"\n          >\n            <formly-form\n              [form]=\"formArray.at(i)\"\n              [(model)]=\"formProps.model\"\n              [fields]=\"tab.fields\"\n              [options]=\"tabFormlyOptions[i]\">\n            </formly-form>\n          </p-tabPanel>\n        </ng-container>\n      </p-tabView>\n    </png-panel>\n\n    <div [ngClass]=\"formProps.buttonsStyleClass\">\n      <er-button [stateKey]=\"formProps.$id\"\n                 icon=\"fa fa-save\"\n                 label=\"\u63D0&nbsp;&nbsp;&nbsp;\u4EA4\"\n                 title=\"\u4FDD\u7559\u6570\u636E\u5230\u670D\u52A1\u7AEF\"\n                 class=\"mr-2\"\n                 type=\"button\"\n                 (onClick)=\"formlyForm.submit()\"\n                 [styleClass]=\"formProps.submitBtnStyleClass\"\n      ></er-button>\n      <er-button icon=\"fa fa-circle-o\"\n                 class=\"mr-2\"\n                 label=\"\u91CD&nbsp;&nbsp;&nbsp;\u586B\"\n                 title=\"\u6062\u590D\u5230\u4FEE\u6539\u524D\u7684\u72B6\u6001\"\n                 [styleClass]=\"formProps.resetBtnStyleClass\"\n                 (onClick)=\"formlyForm.resetModel()\">\n      </er-button>\n\n      <ng-container *ngFor=\"let btn of formProps.buttons\">\n        <er-button erPropsBind [props]=\"btn\" [context]=\"btn.context\"></er-button>\n      </ng-container>\n    </div>\n\n    <!--<png-form-debug [model]=\"formModel\"-->\n    <!--[debugFormProps]=\"props\"-->\n    <!--[runtimeFormProps]=\"formProps\">-->\n    <!--</png-form-debug>-->\n  ",
                        styles: [":host::ng-deep .ui-tabview .ui-state-active{background-color:transparent!important}:host::ng-deep .ui-tabview .ui-tabview-panel{margin:10px}:host::ng-deep .ui-tabview .ui-tabview-selected{border-left:5px solid #3bdc06}"]
                    }] }
        ];
        PngFormlyTabsFormComponent.propDecorators = {
            onTabChange: [{ type: core.Output }],
            onTabClose: [{ type: core.Output }]
        };
        return PngFormlyTabsFormComponent;
    }(PngFormlyFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyWizardFormComponent = /** @class */ (function (_super) {
        __extends(PngFormlyWizardFormComponent, _super);
        function PngFormlyWizardFormComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.stepChange = new core.EventEmitter();
            return _this;
        }
        /**
         * @param {?} formProps
         * @return {?}
         */
        PngFormlyWizardFormComponent.prototype.resolveFormFields = /**
         * @param {?} formProps
         * @return {?}
         */
            function (formProps) {
                var _this = this;
                if (!formProps || !formProps['steps']) {
                    core$1.LogUtils.error(this, '没有定义steps', formProps);
                }
                if (formProps.steps) {
                    formProps.steps.forEach(function (step) {
                        step.fields.forEach(function (field) {
                            PngFormlyUtils.resolveField(formProps, field, _this);
                        });
                    });
                    this.formArray = new forms.FormArray(formProps.steps.map(function () { return new forms.FormGroup({}); }));
                    this.stepFormlyOptions = formProps.steps.map(function (step) {
                        return __assign({}, formProps.options || {}, step.options || {});
                    });
                }
                this.currentStepIndex = formProps.activeIndex || 0;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        PngFormlyWizardFormComponent.prototype.onStepChange = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.currentStepIndex = event;
                this.stepChange.emit(event);
            };
        PngFormlyWizardFormComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'png-formly-wizard',
                        template: "\n    <png-panel [header]=\"formProps.header\" [footer]=\"formProps.footer\" [icon]=\"formProps.icon\" [toggleable]=\"formProps.collapsable\">\n      <png-wizard [(activeIndex)]=\"currentStepIndex\"\n                  (stepChange)=\"onStepChange($event)\"\n                  [styleClass]=\"formProps.styleClass\"\n                  [style]=\"formProps.style\"\n                  [stepStyleClass]=\"formProps['stepStyleClass']\"\n                  [stepStyle]=\"formProps['stepStyle']\"\n      >\n        <ng-container *ngFor=\"let step of formProps['steps']; let i = index;\">\n          <png-step\n            [label]=\"step.label\"\n            [styleClass]=\"step.styleClass\"\n            [style]=\"step.style\"\n          >\n            <formly-form\n              [form]=\"formArray.at(i)\"\n              [(model)]=\"formProps.model\"\n              [fields]=\"step.fields\"\n              [options]=\"stepFormlyOptions[i]\">\n            </formly-form>\n          </png-step>\n        </ng-container>\n        <ng-template erTypedTemplate=\"footer\">\n          <button pButton type=\"button\" *ngIf=\"currentStepIndex+1 === formProps['steps'].length\"\n                  class=\"pull-right\" icon=\"fa fa-save\" iconPos=\"right\" label=\"\u63D0\u4EA4\"></button>\n        </ng-template>\n      </png-wizard>\n    </png-panel>\n    <!--<png-form-debug [model]=\"formModel\"-->\n    <!--[debugFormProps]=\"debugFormProps\"-->\n    <!--[runtimeFormProps]=\"formProps\">-->\n    <!--</png-form-debug>-->\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        PngFormlyWizardFormComponent.propDecorators = {
            stepChange: [{ type: core.Output }]
        };
        return PngFormlyWizardFormComponent;
    }(PngFormlyFormComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var Components = [
        PngFormlyFormComponent,
        PngFormlyAuditFormComponent,
        PngFormlyWizardFormComponent,
        PngFormlyTabsFormComponent,
        PngFormDebugComponent
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ PngFormlyFieldType = /** @class */ (function (_super) {
        __extends(PngFormlyFieldType, _super);
        function PngFormlyFieldType() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PngFormlyFieldType;
    }(formly.ErFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyAutoCompleteComponent = /** @class */ (function (_super) {
        __extends(PngFormlyAutoCompleteComponent, _super);
        function PngFormlyAutoCompleteComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFormlyAutoCompleteComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <div class=\"d-flex\">\n      <png-auto-complete class=\"m-auto w-100\"\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    ></png-auto-complete>\n      <png-buttons *ngIf=\"props['$ext'].buttons\" class=\"pull-right\" [btns]=\"props['$ext'].buttons\" [context]=\"field\"></png-buttons>\n    </div>\n    <div *ngIf=\"props['multiple']\" class=\"small text-muted pl-2\">\u63D0\u793A\uFF1A\u53EF\u4EE5\u9009\u62E9\u591A\u9879</div>\n\n  "
                    }] }
        ];
        return PngFormlyAutoCompleteComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyButtonComponent = /** @class */ (function (_super) {
        __extends(PngFormlyButtonComponent, _super);
        function PngFormlyButtonComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFormlyButtonComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <png-button\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    >\n    </png-button>\n  "
                    }] }
        ];
        return PngFormlyButtonComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyCalendarComponent = /** @class */ (function (_super) {
        __extends(PngFormlyCalendarComponent, _super);
        function PngFormlyCalendarComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFormlyCalendarComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <png-calendar\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    ></png-calendar>\n  "
                    }] }
        ];
        return PngFormlyCalendarComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyCheckboxComponent = /** @class */ (function (_super) {
        __extends(PngFormlyCheckboxComponent, _super);
        function PngFormlyCheckboxComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFormlyCheckboxComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <png-check-box\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    ></png-check-box>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        return PngFormlyCheckboxComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyChipsComponent = /** @class */ (function (_super) {
        __extends(PngFormlyChipsComponent, _super);
        function PngFormlyChipsComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultProps = {
                allowDuplicate: false,
                addOnBlur: true,
                max: 2
            };
            return _this;
        }
        PngFormlyChipsComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <p-chips\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    >\n    </p-chips>\n  "
                    }] }
        ];
        return PngFormlyChipsComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyFieldDynaComponent = /** @class */ (function (_super) {
        __extends(PngFormlyFieldDynaComponent, _super);
        function PngFormlyFieldDynaComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        PngFormlyFieldDynaComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                _super.prototype.ngOnInit.call(this);
                if (this.props['refreshOnForm']) {
                    /** @type {?} */
                    var form = this.field.formlyForm.form;
                    this.subscription = form.valueChanges
                        .pipe(operators.distinctUntilChanged())
                        .subscribe(function (_) {
                        _this.comp.refresh();
                    });
                }
                else if (this.props['refreshOnField']) {
                    /** @type {?} */
                    var formControl = this.field.formlyForm.formControl(this.props['refreshOnField']);
                    this.subscription = formControl.valueChanges
                        .pipe(operators.distinctUntilChanged())
                        .subscribe(function (_) {
                        _this.comp.refresh();
                    });
                }
                else {
                    this.comp.refresh();
                }
            };
        /**
         * @return {?}
         */
        PngFormlyFieldDynaComponent.prototype.unsubscribe = /**
         * @return {?}
         */
            function () {
                if (this.subscription) {
                    this.subscription.unsubscribe();
                }
            };
        /**
         * @return {?}
         */
        PngFormlyFieldDynaComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.unsubscribe();
            };
        PngFormlyFieldDynaComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <er-dyna-content [content]=\"props['content']\" [context]=\"{field: field}\"></er-dyna-content>\n  "
                    }] }
        ];
        PngFormlyFieldDynaComponent.propDecorators = {
            comp: [{ type: core.ViewChild, args: [core$1.DynaContentComponent,] }]
        };
        return PngFormlyFieldDynaComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyEditorComponent = /** @class */ (function (_super) {
        __extends(PngFormlyEditorComponent, _super);
        function PngFormlyEditorComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultProps = {
                style: { height: '200px' }
            };
            return _this;
        }
        PngFormlyEditorComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <p-editor formlyPropsBind\n              [props]=\"props\"\n              [formControl]=\"formControl\"\n    >\n    </p-editor>\n  "
                    }] }
        ];
        return PngFormlyEditorComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyFileUploadComponent = /** @class */ (function (_super) {
        __extends(PngFormlyFileUploadComponent, _super);
        function PngFormlyFileUploadComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFormlyFileUploadComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <png-file-upload\n      erPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    >\n    </png-file-upload>\n  "
                    }] }
        ];
        return PngFormlyFileUploadComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyInputComponent = /** @class */ (function (_super) {
        __extends(PngFormlyInputComponent, _super);
        function PngFormlyInputComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        PngFormlyInputComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnInit.call(this);
                this.field['attrs'] = __assign({}, this.to || {}, this.attrs);
                if (!this.field['attrs']['disabled']) {
                    delete this.field['attrs']['disabled'];
                }
            };
        PngFormlyInputComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <png-input\n      formlyPropsBind\n      [attrs]=\"attrs\"\n      [formControl]=\"formControl\"\n    >\n    </png-input>\n  "
                    }] }
        ];
        return PngFormlyInputComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyKeyFilterComponent = /** @class */ (function (_super) {
        __extends(PngFormlyKeyFilterComponent, _super);
        function PngFormlyKeyFilterComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFormlyKeyFilterComponent.decorators = [
            { type: core.Component, args: [{
                        template: "    \n    <input \n      type=\"text\" \n      formlyPropsBind\n      [props]=\"props\"\n      [attrs]=\"attrs\"\n      [formControl]=\"formControl\"\n    />\n  "
                    }] }
        ];
        return PngFormlyKeyFilterComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyListBoxComponent = /** @class */ (function (_super) {
        __extends(PngFormlyListBoxComponent, _super);
        function PngFormlyListBoxComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFormlyListBoxComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <png-list-box\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    ></png-list-box>\n  "
                    }] }
        ];
        return PngFormlyListBoxComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyMaskComponent = /** @class */ (function (_super) {
        __extends(PngFormlyMaskComponent, _super);
        function PngFormlyMaskComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFormlyMaskComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <p-inputMask\n             [mask]=\"to['mask']\"\n             [formControl]=\"formControl\"\n    >\n    </p-inputMask>\n  "
                    }] }
        ];
        return PngFormlyMaskComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyMultiSelectComponent = /** @class */ (function (_super) {
        __extends(PngFormlyMultiSelectComponent, _super);
        function PngFormlyMultiSelectComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFormlyMultiSelectComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <png-multi-select\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    ></png-multi-select>\n  "
                    }] }
        ];
        return PngFormlyMultiSelectComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyRadioComponent = /** @class */ (function (_super) {
        __extends(PngFormlyRadioComponent, _super);
        function PngFormlyRadioComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultProps = {
                $ext: {
                    inline: true
                }
            };
            return _this;
        }
        PngFormlyRadioComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <png-radio\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    ></png-radio>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        return PngFormlyRadioComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyRatingComponent = /** @class */ (function (_super) {
        __extends(PngFormlyRatingComponent, _super);
        function PngFormlyRatingComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFormlyRatingComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <png-rating\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    >\n    </png-rating>\n  "
                    }] }
        ];
        return PngFormlyRatingComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlySelectButtonComponent = /** @class */ (function (_super) {
        __extends(PngFormlySelectButtonComponent, _super);
        function PngFormlySelectButtonComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFormlySelectButtonComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n        <p>\u5F53\u524D\u503C: {{formControl.value}}</p>\n        <png-select-button\n          formlyPropsBind\n          [props]=\"props\"\n          [formControl]=\"formControl\"\n        >\n      </png-select-button>\n  "
                    }] }
        ];
        return PngFormlySelectButtonComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlySelectComponent = /** @class */ (function (_super) {
        __extends(PngFormlySelectComponent, _super);
        function PngFormlySelectComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultProps = {
                placeholder: '请选择'
            };
            return _this;
        }
        PngFormlySelectComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <png-select\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    ></png-select>\n  ",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        return PngFormlySelectComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlySliderComponent = /** @class */ (function (_super) {
        __extends(PngFormlySliderComponent, _super);
        function PngFormlySliderComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultProps = {
                range: true,
                min: 0,
                max: 100,
                orientation: 'horizontal'
            };
            return _this;
        }
        PngFormlySliderComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <png-slider\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    ></png-slider>\n  "
                    }] }
        ];
        return PngFormlySliderComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlySpinnerComponent = /** @class */ (function (_super) {
        __extends(PngFormlySpinnerComponent, _super);
        function PngFormlySpinnerComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFormlySpinnerComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <p-spinner\n      formlyPropsBind\n      [props]=\"props\"\n      [context]=\"{field:field}\"\n      [formControl]=\"formControl\"\n      [pKeyFilter]=\"props['inputRule'] || 'num'\"\n    ></p-spinner>\n  "
                    }] }
        ];
        return PngFormlySpinnerComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlySwitchComponent = /** @class */ (function (_super) {
        __extends(PngFormlySwitchComponent, _super);
        function PngFormlySwitchComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFormlySwitchComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <p-inputSwitch\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    >\n    </p-inputSwitch>\n  "
                    }] }
        ];
        return PngFormlySwitchComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyTableComponent = /** @class */ (function (_super) {
        __extends(PngFormlyTableComponent, _super);
        function PngFormlyTableComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultProps = {
                selectionMode: 'checkbox',
            };
            return _this;
        }
        PngFormlyTableComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <png-table\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    >\n    </png-table>\n  "
                    }] }
        ];
        return PngFormlyTableComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyTextAreaComponent = /** @class */ (function (_super) {
        __extends(PngFormlyTextAreaComponent, _super);
        function PngFormlyTextAreaComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultProps = {
                rows: 3,
                autoResize: true
            };
            return _this;
        }
        PngFormlyTextAreaComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <textarea\n      pInputTextarea\n      [cols]=\"props['cols']\"\n      [rows]=\"props['rows']\"\n      [autoResize]=\"props['autoResize']\"\n      [placeholder]=\"to.placeholder || '\u8F93\u5165\u5185\u5BB9'\"\n      [formControl]=\"formControl\"\n    >\n    </textarea>\n  "
                    }] }
        ];
        return PngFormlyTextAreaComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyTreeComponent = /** @class */ (function (_super) {
        __extends(PngFormlyTreeComponent, _super);
        function PngFormlyTreeComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.defaultProps = {
                selectionMode: 'checkbox',
            };
            return _this;
        }
        PngFormlyTreeComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <png-tree\n      formlyPropsBind\n      [props]=\"props\"\n      [formControl]=\"formControl\"\n    >\n    </png-tree>\n  "
                    }] }
        ];
        return PngFormlyTreeComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyFieldValueComponent = /** @class */ (function (_super) {
        __extends(PngFormlyFieldValueComponent, _super);
        function PngFormlyFieldValueComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.value$ = new rxjs.BehaviorSubject('');
            return _this;
        }
        /**
         * @return {?}
         */
        PngFormlyFieldValueComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                _super.prototype.ngOnInit.call(this);
                if (this.formControl) {
                    this.form.valueChanges.subscribe(function (value) {
                        if (_this.props['render']) {
                            _this.value$.next(_this.props['render'](_this.formControl.value, _this.model, _this.field['dataField']));
                        }
                        else {
                            if (_this.field['dataField']) {
                                _this.value$.next(core$1.DataFieldUtils.getFieldDisplayContent(_this.formControl.value, _this.field['dataField']));
                            }
                            else {
                                _this.value$.next(_this.formControl.value || '【未填】');
                            }
                        }
                    });
                }
            };
        PngFormlyFieldValueComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <span class=\"field-value font-weight-bold\" [innerHTML]=\"value$|async|erText\"></span>\n  "
                    }] }
        ];
        return PngFormlyFieldValueComponent;
    }(PngFormlyFieldType));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngCardWrapperComponent = /** @class */ (function (_super) {
        __extends(PngCardWrapperComponent, _super);
        function PngCardWrapperComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngCardWrapperComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <div class=\"card\" [ngClass]=\"to['card']?.styleClass\" [ngStyle]=\"to['card']?.style\">\n      <h3 class=\"card-header\"><i [ngClass]=\"to['card']?.icon\"></i> <span [innerHTML]=\"to['card']?.header\"></span></h3>\n      <div class=\"card-body\">\n        <ng-container #fieldComponent></ng-container>\n      </div>\n    </div>\n  "
                    }] }
        ];
        PngCardWrapperComponent.propDecorators = {
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }]
        };
        return PngCardWrapperComponent;
    }(core$2.FieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFieldSetWrapperComponent = /** @class */ (function (_super) {
        __extends(PngFieldSetWrapperComponent, _super);
        function PngFieldSetWrapperComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFieldSetWrapperComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <p-fieldset [collapsed]=\"to['fieldSet']?.collapsed\"\n                [legend]=\"to['fieldSet']?.legend\"\n                [styleClass]=\"to['fieldSet']?.styleClass\"\n                [style]=\"to['fieldSet']?.style\"\n                [toggleable]=\"to['fieldSet']?.toggleable || true\">\n      <ng-container #fieldComponent></ng-container>\n    </p-fieldset>\n  ",
                        styles: ["/deep/ legend{font-size:1.2rem!important}"]
                    }] }
        ];
        PngFieldSetWrapperComponent.propDecorators = {
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }]
        };
        return PngFieldSetWrapperComponent;
    }(core$2.FieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyHorizontalWrapperComponent = /** @class */ (function (_super) {
        __extends(PngFormlyHorizontalWrapperComponent, _super);
        function PngFormlyHorizontalWrapperComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PngFormlyHorizontalWrapperComponent.prototype, "description", {
            get: /**
             * @return {?}
             */ function () {
                return utils.CommonsUtils.getValue(this.to.description, this.field);
            },
            enumerable: true,
            configurable: true
        });
        PngFormlyHorizontalWrapperComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <div class=\"fieldset w-100\">\n      <div class=\"fieldset-{{field.key}}-horizontal py-2\" [ngClass]=\"field.fieldSetStyleClass || 'm-2'\"\n           [ngStyle]=\"field.fieldSetStyle\">\n        <div class=\"row align-items-center\">\n          <div class=\"field-label-horizontal label-{{field.key}}\" [ngClass]=\"field.labelStyleClass || 'col-3 pull-right'\">\n            <label *ngIf=\"to.label && to['hideLabel'] !== true\" [attr.for]=\"id\" style=\"float:right;font-weight: bold\">\n              <span *ngIf=\"to.required && to['hideRequiredMarker'] !== true\" style=\"color: red\" title=\"\u5FC5\u586B\u5185\u5BB9\">*</span> {{ to.label }}\n            </label>\n          </div>\n          <div [ngClass]=\"field.fieldStyleClass || 'col-9 pull-left'\">\n            <div class=\"d-flex flex-column align-items-start\">\n\n              <ng-container *ngIf=\"to['before'] && to['before'].content\">\n                <er-dyna-content [content]=\"to['before'].content\" [context]=\"field\"></er-dyna-content>\n              </ng-container>\n\n              <div class=\"ui-fluid w-100 mr-2 pr-2 field-control-horizontal field-{{field.key}}\"\n                   [ngClass]=\"field.fieldStyleClass\" [ngStyle]=\"field.fieldStyle\">\n                <ng-template #fieldComponent></ng-template>\n              </div>\n\n              <div *ngIf=\"field.showErrors !== false\" class=\"invalid-feedback d-block\" [ngClass]=\"field.validationStyleClass\"\n                   [ngStyle]=\"field.validationStyle\">\n                <er-validate-messages [formlyField]=\"field\"></er-validate-messages>\n              </div>\n\n              <ng-container *ngIf=\"to.description\">\n                <div class=\"field-description-horizontal field-{{field.key}}-description\">\n                  <small class=\"form-text text-muted\">\n                    <i class=\"text-primary fa fa-info-circle\"></i>&nbsp;\n                    <span [innerHTML]=\"description\"></span>\n                  </small>\n                </div>\n              </ng-container>\n\n              <ng-container *ngIf=\"to['after'] && to['after'].content\">\n                <er-dyna-content [content]=\"to['after'].content\" [context]=\"field\"></er-dyna-content>\n              </ng-container>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  ",
                        styles: [""]
                    }] }
        ];
        PngFormlyHorizontalWrapperComponent.propDecorators = {
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }]
        };
        return PngFormlyHorizontalWrapperComponent;
    }(formly.ErFormlyFieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngPanelWrapperComponent = /** @class */ (function (_super) {
        __extends(PngPanelWrapperComponent, _super);
        function PngPanelWrapperComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PngPanelWrapperComponent.prototype, "isToggleable", {
            get: /**
             * @return {?}
             */ function () {
                return (this.to['panel'] && this.to['panel'].toggleable) !== undefined
                    ? this.to['panel'].toggleable
                    : true;
            },
            enumerable: true,
            configurable: true
        });
        PngPanelWrapperComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <png-panel\n      [collapsed]=\"to['panel']?.collapsed\"\n      [toggleable]=\"isToggleable\"\n      [showHeader]=\"to['panel']?.showHeader === undefined ? true : to['panel']?.showHeader\"\n      [barStyleClass]=\"to['panel']?.barStyleClass\"\n      [barStyle]=\"to['panel']?.barStyle\"\n      [style]=\"to['panel']?.style\"\n      [styleClass]=\"to['panel']?.styleClass\">\n      <ng-container *ngIf=\"to['panel']?.header\">\n        <ng-template erTypedTemplate=\"header\">\n          <er-dyna-content [content]=\"to['panel'].header\" styleClass=\"d-inline\"></er-dyna-content>\n        </ng-template>\n      </ng-container>\n      <ng-template #fieldComponent></ng-template>\n      <ng-container *ngIf=\"to['panel']?.footer\">\n        <ng-template erTypedTemplate=\"footer\">\n          <er-dyna-content [content]=\"to['panel']?.footer\" styleClass=\"d-inline\"></er-dyna-content>\n        </ng-template>\n      </ng-container>\n    </png-panel>\n  "
                    }] }
        ];
        PngPanelWrapperComponent.propDecorators = {
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }]
        };
        return PngPanelWrapperComponent;
    }(core$2.FieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyResponsiveWrapperComponent = /** @class */ (function (_super) {
        __extends(PngFormlyResponsiveWrapperComponent, _super);
        function PngFormlyResponsiveWrapperComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFormlyResponsiveWrapperComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <div class=\"fieldset-{{field.key}}-responsive\" [ngClass]=\"field.fieldSetStyleClass\" [ngStyle]=\"field.fieldSetStyle\">\n      \n        <div *ngIf=\"to.label && to['hideLabel'] !== true && to['floatLabel'] !== true\" class=\"field-label-vertical label-{{field.key}}\"\n             [ngClass]=\"field.labelStyleClass\" [ngStyle]=\"field.labelStyle\">\n          <label [attr.for]=\"id\" style=\"font-weight: bold\">\n            <span *ngIf=\"to.required && to['hideRequiredMarker'] !== true\" style=\"color: red\">*</span> {{ to.label }}\n          </label>\n        </div>\n\n        <ng-container *ngIf=\"to['before'] && to['before'].content\">\n          <er-dyna-content [content]=\"to['before'].content\" [context]=\"to['before'].context\"></er-dyna-content>\n        </ng-container>\n\n        <div class=\"ui-fluid w-100 field-control-vertical field-{{field.key}}\"\n             [ngClass]=\"field.fieldStyleClass\" [ngStyle]=\"field.fieldStyle\">\n          <ng-template #fieldComponent></ng-template>\n        </div>\n\n        <ng-container *ngIf=\"to.description\">\n          <div class=\"field-description-vertical field-{{field.key}}\">\n            <small class=\"form-text text-muted\">\n              <i class=\"text-primary fa fa-info-circle\"></i>\n              <er-dyna-content [content]=\"to.description\" [context]=\"field\"></er-dyna-content>\n            </small>\n          </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"to['after'] && to['after'].content\">\n          <er-dyna-content [content]=\"to['after'].content\" [context]=\"to['after'].context\"></er-dyna-content>\n        </ng-container>\n      \n    </div>\n  "
                    }] }
        ];
        PngFormlyResponsiveWrapperComponent.propDecorators = {
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }]
        };
        return PngFormlyResponsiveWrapperComponent;
    }(formly.ErFormlyFieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngScrollPanelWrapperComponent = /** @class */ (function (_super) {
        __extends(PngScrollPanelWrapperComponent, _super);
        function PngScrollPanelWrapperComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngScrollPanelWrapperComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n    <p-scrollPanel [style]=\"to['scroll']?.style\" [styleClass]=\"to['scroll']?.styleClass\">\n      <ng-container #fieldComponent></ng-container>\n    </p-scrollPanel >\n  "
                    }] }
        ];
        PngScrollPanelWrapperComponent.propDecorators = {
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }]
        };
        return PngScrollPanelWrapperComponent;
    }(core$2.FieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PngFormlyVerticalWrapperComponent = /** @class */ (function (_super) {
        __extends(PngFormlyVerticalWrapperComponent, _super);
        function PngFormlyVerticalWrapperComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PngFormlyVerticalWrapperComponent.decorators = [
            { type: core.Component, args: [{
                        template: "\n   <div class=\"fieldset w-100\"> \n    <div class=\"fieldset-{{field.key}}-vertical\" [ngClass]=\"field.fieldSetStyleClass || 'm-2 p-2'\"\n         [ngStyle]=\"field.fieldSetStyle\">\n      <div class=\"row flex-column align-items-center\">\n\n        <div *ngIf=\"to.label && to['hideLabel'] !== true && to['floatLabel'] !== true\" class=\"field-label-vertical label-{{field.key}}\">\n          <label [attr.for]=\"id\" style=\"font-weight: bold\">\n            <span *ngIf=\"to.required && to['hideRequiredMarker'] !== true\" style=\"color: red\" title=\"\u5FC5\u586B\u5185\u5BB9\">*</span> {{ to.label }}\n          </label>\n        </div>\n\n        <ng-container *ngIf=\"to['before'] && to['before'].content\">\n          <er-dyna-content [content]=\"to['before'].content\" [context]=\"to['before'].context\"></er-dyna-content>\n        </ng-container>\n\n        <div class=\"ui-fluid w-100 p-1 field-control-vertical field-{{field.key}}\"\n             [ngClass]=\"field.fieldStyleClass\" [ngStyle]=\"field.fieldStyle\">\n          <ng-template #fieldComponent></ng-template>\n        </div>\n\n        <div *ngIf=\"field.showErrors\" class=\"invalid-feedback d-block\" [ngClass]=\"field.validationStyleClass\"\n             [ngStyle]=\"field.validationStyle\">\n          <er-validate-messages [formlyField]=\"field\"></er-validate-messages>\n        </div>\n\n        <ng-container *ngIf=\"to.description\">\n          <div class=\"field-description-vertical field-{{field.key}}\">\n            <small class=\"form-text text-muted\">\n              <i class=\"text-primary fa fa-info-circle\"></i>&nbsp;\n              <er-dyna-content styleClass=\"d-inline\" [content]=\"to.description\" [context]=\"field\"></er-dyna-content>\n            </small>\n          </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"to['after'] && to['after'].content\">\n          <er-dyna-content [content]=\"to['after'].content\" [context]=\"to['after'].context\"></er-dyna-content>\n        </ng-container>\n      </div>\n    </div>\n   </div>\n  ",
                        styles: [""]
                    }] }
        ];
        PngFormlyVerticalWrapperComponent.propDecorators = {
            fieldComponent: [{ type: core.ViewChild, args: ['fieldComponent', { read: core.ViewContainerRef },] }]
        };
        return PngFormlyVerticalWrapperComponent;
    }(formly.ErFormlyFieldWrapper));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PngFormlyWrappers = {
        pngFieldWrapper: 'pngFieldWrapper',
        pngFieldSetWrapper: 'pngFieldSetWrapper',
        pngVerticalWrapper: 'pngVerticalWrapper',
        pngHorizontalWrapper: 'pngHorizontalWrapper',
        pngResponsiveWrapper: 'pngResponsiveWrapper',
        pngCardWrapper: 'pngCardWrapper',
        pngPanelWrapper: 'pngPanelWrapper',
        pngScrollPanelWrapper: 'pngScrollPanelWrapper'
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var excludeTypes = [
        PngFormlyTypes.button
    ];
    var TemplatePngField = /** @class */ (function () {
        function TemplatePngField() {
        }
        /**
         * @param {?} fc
         * @return {?}
         */
        TemplatePngField.prototype.run = /**
         * @param {?} fc
         * @return {?}
         */
            function (fc) {
                fc.templateManipulators.preWrapper.push(function (field) {
                    if (field && field.type && field.type.startsWith('png') && excludeTypes.indexOf(field.type) === -1) {
                        /** @type {?} */
                        var landscape = field && field.templateOptions && field.templateOptions.landscape;
                        if (!landscape) {
                            landscape = field && field.formProps && field.formProps.landscape;
                        }
                        switch (landscape || types.UiLandscape.vertical) {
                            case types.UiLandscape.horizontal:
                                return PngFormlyWrappers.pngHorizontalWrapper;
                            case types.UiLandscape.responsive:
                                return PngFormlyWrappers.pngResponsiveWrapper;
                            default:
                                return PngFormlyWrappers.pngVerticalWrapper;
                        }
                    }
                });
            };
        return TemplatePngField;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PNG_FORMLY_CONFIG = {
        types: [
            {
                name: PngFormlyTypes.input,
                component: PngFormlyInputComponent
            },
            {
                name: PngFormlyTypes.checkbox,
                component: PngFormlyCheckboxComponent
            },
            {
                name: PngFormlyTypes.textArea,
                component: PngFormlyTextAreaComponent
            },
            {
                name: PngFormlyTypes.radio,
                component: PngFormlyRadioComponent
            },
            {
                name: PngFormlyTypes.select,
                component: PngFormlySelectComponent
            },
            {
                name: PngFormlyTypes.button,
                component: PngFormlyButtonComponent
            },
            {
                name: PngFormlyTypes.autoComplete,
                component: PngFormlyAutoCompleteComponent
            },
            {
                name: PngFormlyTypes.calendar,
                component: PngFormlyCalendarComponent
            },
            {
                name: PngFormlyTypes.chips,
                component: PngFormlyChipsComponent
            },
            {
                name: PngFormlyTypes.editor,
                component: PngFormlyEditorComponent
            },
            {
                name: PngFormlyTypes.fileUpload,
                component: PngFormlyFileUploadComponent
            },
            {
                name: PngFormlyTypes.keyFilter,
                component: PngFormlyKeyFilterComponent
            },
            {
                name: PngFormlyTypes.listBox,
                component: PngFormlyListBoxComponent
            },
            {
                name: PngFormlyTypes.mask,
                component: PngFormlyMaskComponent
            },
            {
                name: PngFormlyTypes.switch,
                component: PngFormlySwitchComponent
            },
            {
                name: PngFormlyTypes.multiSelect,
                component: PngFormlyMultiSelectComponent
            },
            {
                name: PngFormlyTypes.rating,
                component: PngFormlyRatingComponent
            },
            {
                name: PngFormlyTypes.slider,
                component: PngFormlySliderComponent
            },
            {
                name: PngFormlyTypes.spinner,
                component: PngFormlySpinnerComponent
            },
            {
                name: PngFormlyTypes.selectButton,
                component: PngFormlySelectButtonComponent
            },
            {
                name: PngFormlyTypes.table,
                component: PngFormlyTableComponent
            },
            {
                name: PngFormlyTypes.tree,
                component: PngFormlyTreeComponent
            },
            {
                name: PngFormlyTypes.value,
                component: PngFormlyFieldValueComponent
            },
            {
                name: PngFormlyTypes.dyna,
                component: PngFormlyFieldDynaComponent
            }
        ],
        wrappers: [
            { name: PngFormlyWrappers.pngVerticalWrapper, component: PngFormlyVerticalWrapperComponent },
            { name: PngFormlyWrappers.pngHorizontalWrapper, component: PngFormlyHorizontalWrapperComponent },
            { name: PngFormlyWrappers.pngResponsiveWrapper, component: PngFormlyResponsiveWrapperComponent },
            { name: PngFormlyWrappers.pngFieldSetWrapper, component: PngFieldSetWrapperComponent },
            { name: PngFormlyWrappers.pngCardWrapper, component: PngCardWrapperComponent },
            { name: PngFormlyWrappers.pngPanelWrapper, component: PngPanelWrapperComponent },
            { name: PngFormlyWrappers.pngScrollPanelWrapper, component: PngScrollPanelWrapperComponent }
        ],
        manipulators: [
            { class: TemplatePngField, method: 'run' }
        ]
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PNG_FORMLY_TYPE_COMPONENTS = [
        PngFormlyTextAreaComponent,
        PngFormlySelectComponent,
        PngFormlyRadioComponent,
        PngFormlyCheckboxComponent,
        PngFormlyInputComponent,
        PngFormlyAutoCompleteComponent,
        PngFormlyMultiSelectComponent,
        PngFormlyCalendarComponent,
        PngFormlyChipsComponent,
        PngFormlyEditorComponent,
        PngFormlyKeyFilterComponent,
        PngFormlyListBoxComponent,
        PngFormlyMaskComponent,
        PngFormlyRatingComponent,
        PngFormlySliderComponent,
        PngFormlySelectButtonComponent,
        PngFormlyFileUploadComponent,
        PngFormlyButtonComponent,
        PngFormlySwitchComponent,
        PngFormlySpinnerComponent,
        PngFormlyTableComponent,
        PngFormlyTreeComponent,
        PngFormlyFieldValueComponent,
        PngFormlyFieldDynaComponent
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PNG_FORMLY_WRAPPERS = [
        PngFormlyVerticalWrapperComponent,
        PngFormlyHorizontalWrapperComponent,
        PngFormlyResponsiveWrapperComponent,
        PngPanelWrapperComponent,
        PngCardWrapperComponent,
        PngFieldSetWrapperComponent,
        PngScrollPanelWrapperComponent
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ErFormlyPrimeNgModule = /** @class */ (function () {
        function ErFormlyPrimeNgModule() {
        }
        ErFormlyPrimeNgModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            forms.ReactiveFormsModule,
                            core$1.ErCoreModule,
                            validate.ErValidateModule,
                            formly.ErFormlyModule,
                            primeng.ErPrimeNgModule,
                            core$2.FormlyModule.forChild(PNG_FORMLY_CONFIG)
                        ],
                        declarations: __spread(PNG_FORMLY_TYPE_COMPONENTS, PNG_FORMLY_WRAPPERS, Components),
                        exports: __spread([
                            core$2.FormlyModule
                        ], Components)
                    },] }
        ];
        return ErFormlyPrimeNgModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ErFormlyPrimeNgModule = ErFormlyPrimeNgModule;
    exports.PngFormlyAuditFormComponent = PngFormlyAuditFormComponent;
    exports.PngFormlyFormComponent = PngFormlyFormComponent;
    exports.PngFormlyWizardFormComponent = PngFormlyWizardFormComponent;
    exports.PngFormlyTabsFormComponent = PngFormlyTabsFormComponent;
    exports.PngFormDebugComponent = PngFormDebugComponent;
    exports.Components = Components;
    exports.PNG_FORMLY_CONFIG = PNG_FORMLY_CONFIG;
    exports.PngFormlyInputComponent = PngFormlyInputComponent;
    exports.PngFormlyCheckboxComponent = PngFormlyCheckboxComponent;
    exports.PngFormlyRadioComponent = PngFormlyRadioComponent;
    exports.PngFormlySelectComponent = PngFormlySelectComponent;
    exports.PngFormlyTextAreaComponent = PngFormlyTextAreaComponent;
    exports.PngFormlyAutoCompleteComponent = PngFormlyAutoCompleteComponent;
    exports.PngFormlyButtonComponent = PngFormlyButtonComponent;
    exports.PngFormlyCalendarComponent = PngFormlyCalendarComponent;
    exports.PngFormlyChipsComponent = PngFormlyChipsComponent;
    exports.PngFormlyEditorComponent = PngFormlyEditorComponent;
    exports.PngFormlyFileUploadComponent = PngFormlyFileUploadComponent;
    exports.PngFormlyKeyFilterComponent = PngFormlyKeyFilterComponent;
    exports.PngFormlyListBoxComponent = PngFormlyListBoxComponent;
    exports.PngFormlyMaskComponent = PngFormlyMaskComponent;
    exports.PngFormlyMultiSelectComponent = PngFormlyMultiSelectComponent;
    exports.PngFormlyRatingComponent = PngFormlyRatingComponent;
    exports.PngFormlySelectButtonComponent = PngFormlySelectButtonComponent;
    exports.PngFormlySliderComponent = PngFormlySliderComponent;
    exports.PngFormlySpinnerComponent = PngFormlySpinnerComponent;
    exports.PngFormlySwitchComponent = PngFormlySwitchComponent;
    exports.PngFormlyTableComponent = PngFormlyTableComponent;
    exports.PngFormlyTreeComponent = PngFormlyTreeComponent;
    exports.PngFormlyFieldValueComponent = PngFormlyFieldValueComponent;
    exports.PngFormlyFieldDynaComponent = PngFormlyFieldDynaComponent;
    exports.PNG_FORMLY_TYPE_COMPONENTS = PNG_FORMLY_TYPE_COMPONENTS;
    exports.PngCardWrapperComponent = PngCardWrapperComponent;
    exports.PngFormlyHorizontalWrapperComponent = PngFormlyHorizontalWrapperComponent;
    exports.PngFieldSetWrapperComponent = PngFieldSetWrapperComponent;
    exports.PngPanelWrapperComponent = PngPanelWrapperComponent;
    exports.PngFormlyVerticalWrapperComponent = PngFormlyVerticalWrapperComponent;
    exports.PngScrollPanelWrapperComponent = PngScrollPanelWrapperComponent;
    exports.PngFormlyResponsiveWrapperComponent = PngFormlyResponsiveWrapperComponent;
    exports.PNG_FORMLY_WRAPPERS = PNG_FORMLY_WRAPPERS;
    exports.PngFormlyTypes = PngFormlyTypes;
    exports.PngFormlyWrappers = PngFormlyWrappers;
    exports.ɵa = PngFormlyFieldType;
    exports.ɵb = TemplatePngField;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=er-formly-primeng.umd.js.map