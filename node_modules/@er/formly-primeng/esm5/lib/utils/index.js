/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DataFieldUtils } from '@er/core';
import { DataAttr, DataType } from '@er/types';
import { CommonsUtils, ConfigUtils, DateUtils, DialogUtils, IdUtils } from '@er/utils';
import { NgValidators } from '@er/validate';
import { PngFormlyTypes } from '../types/field-types';
var PngFormlyUtils = /** @class */ (function () {
    function PngFormlyUtils() {
    }
    /**
     * @param {?} formProps
     * @param {?} field
     * @param {?=} formlyForm
     * @return {?}
     */
    PngFormlyUtils.resolveField = /**
     * @param {?} formProps
     * @param {?} field
     * @param {?=} formlyForm
     * @return {?}
     */
    function (formProps, field, formlyForm) {
        if (formProps) {
            field.formProps = formProps;
        }
        if (formlyForm) {
            field.formlyForm = formlyForm;
        }
        field.className = field.className || '' + 'formly-field';
        PngFormlyUtils.resolveDataField(formProps, field, formlyForm);
    };
    /**
     * @param {?} apiEntry
     * @param {?} fieldName
     * @param {?=} query
     * @param {?=} selectable
     * @return {?}
     */
    PngFormlyUtils.distinctSuggestProps = /**
     * @param {?} apiEntry
     * @param {?} fieldName
     * @param {?=} query
     * @param {?=} selectable
     * @return {?}
     */
    function (apiEntry, fieldName, query, selectable) {
        if (selectable === void 0) { selectable = false; }
        /** @type {?} */
        var props = {
            type: PngFormlyTypes.autoComplete,
            props: (/** @type {?} */ ({
                minLength: 1,
                size: 5,
                forceSelection: false,
                dropdown: false,
                placeholder: '请输入唯一的代码值',
                onSelect: function (ctx) {
                    if (!selectable) {
                        DialogUtils.error('无效操作', '该值已经存在，不能选择');
                        setTimeout(function () { return ctx.field.formControl.reset(); });
                    }
                },
                $ext: {
                    apiDataProps: (/** @type {?} */ ({
                        apiEntry: apiEntry,
                        query: query,
                        searchFields: fieldName,
                        withTerm: true
                    })),
                    dataItemProps: {
                        template: function (item) { return "<span title=\"\u8BE5\u503C\u5DF2\u7ECF\u5B58\u5728\uFF0C\u4E0D\u53EF\u7528\"><del>" + item[fieldName] + "</del></span> "; }
                    }
                }
            })),
            templateOptions: {
                required: false,
                description: '<span class="text-danger">内容必须唯一，可以不填，不填时系统自动生成</span>'
            }
        };
        return props;
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    PngFormlyUtils.resolveValidators = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field.validators) {
            /** @type {?} */
            var validates = field.validators;
            field.validators = {};
            if (CommonsUtils.isFunction(validates)) {
                field.validators.validation = [validates];
            }
            else if (CommonsUtils.isArray(validates)) {
                field.validators.validation = validates;
            }
            else {
                field.validators = validates;
            }
        }
        if (field.validations) {
            if (field.validators && field.validators['validation']) {
                field.validators.validation = tslib_1.__assign({}, field.validators.validation, field.validations);
            }
            else if (field.validators) {
                field.validators = tslib_1.__assign({}, field.validators, { validation: field.validations });
            }
            else {
                field.validators = {};
                field.validators.validation = field.validations;
            }
            delete field.validations;
        }
    };
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    PngFormlyUtils.resolveBasic = /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    function (dataField, field) {
        field.key = field.key || dataField.key;
        if (dataField.hidden) {
            field.hide = true;
        }
        if (dataField.defaultValue !== undefined) {
            field.defaultValue = dataField.defaultValue;
        }
        switch (dataField.dataAttr) {
            case DataAttr.CURRENCY:
                field.dataType = DataType.NUMBER;
                field.defaultValue = 0;
                break;
            case DataAttr.TEXT:
                field.type = PngFormlyTypes.textArea;
                break;
            case DataAttr.DISTINCT:
                Object.assign(field, PngFormlyUtils.distinctSuggestProps(field.apiEntry, field.key));
                break;
        }
        if (!field.type) {
            switch (dataField.dataType) {
                case DataType.STRING:
                    field.type = PngFormlyTypes.input;
                    break;
                case DataType.BOOLEAN:
                    field.type = PngFormlyTypes.switch;
                    break;
                case DataType.NUMBER:
                    field.type = PngFormlyTypes.spinner;
                    break;
                case DataType.DATE:
                    field.type = PngFormlyTypes.calendar;
                    break;
                default:
                    field.type = PngFormlyTypes.input;
            }
        }
    };
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    PngFormlyUtils.resolveProps = /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    function (dataField, field) {
        /** @type {?} */
        var props = {
            $ext: {}
        };
        if (dataField.dataItems) {
            props.$ext['dataItems'] = dataField.dataItems;
        }
        if (dataField.apiDataProps) {
            props.$ext['apiDataProps'] = dataField.apiDataProps;
        }
        if (dataField.dataItemProps) {
            props.$ext['dataItemProps'] = dataField.dataItemProps;
        }
        if (dataField.dataAttr === DataAttr.DATA_CODE) {
            props['dataKey'] = ConfigUtils.getConfig().dataFieldProps.dataCode.codeKey;
        }
        if (dataField.dataItems) {
            props.$ext['dataItems'] = dataField.dataItems;
        }
        switch (dataField.dataAttr) {
            case DataAttr.DATE_TIME:
                Object.assign(props, (/** @type {?} */ ({
                    dateFormat: 'yy-mm-dd hh:mm',
                    monthNavigator: true,
                    yearNavigator: true,
                    showTime: true
                })));
                break;
            case DataAttr.DATE:
                Object.assign(props, (/** @type {?} */ ({
                    dateFormat: 'yy-mm-dd',
                    monthNavigator: true,
                    yearNavigator: true
                })));
                break;
            case DataAttr.TIME:
                Object.assign(props, (/** @type {?} */ ({
                    timeOnly: true
                })));
                break;
            case DataAttr.MONTH:
                Object.assign(props, (/** @type {?} */ ({
                    view: 'month',
                    dateFormat: 'yy-mm',
                    yearNavigator: true,
                    monthNavigator: true,
                    yearRange: '2000:2020'
                })));
                break;
        }
        field.props = CommonsUtils.defaults(field.props, props);
    };
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    PngFormlyUtils.resolveAttrs = /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    function (dataField, field) {
        /** @type {?} */
        var attrs = {};
        switch (dataField.dataAttr) {
            case DataAttr.CURRENCY:
                CommonsUtils.set(attrs, '$ext.inputRule', 'pnum');
                CommonsUtils.set(attrs, '$ext.postText', '￥');
                break;
            case DataAttr.PHONE:
                CommonsUtils.set(attrs, '$ext.inputRule', 'pint');
                CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-phone');
                break;
            case DataAttr.ID_CARD:
                CommonsUtils.set(attrs, '$ext.inputRule', /[0-9]|X|x/);
                CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-id-card');
                break;
            case DataAttr.QQ:
                CommonsUtils.set(attrs, '$ext.inputRule', 'pint');
                CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-qq');
                break;
            case DataAttr.WE_CHAT:
                CommonsUtils.set(attrs, '$ext.inputRule', 'pint');
                CommonsUtils.set(attrs, '$ext.preIcon', 'fa fa-wechat');
                break;
            case DataAttr.EMAIL:
                CommonsUtils.set(attrs, '$ext.preText', '@');
                break;
            case DataAttr.URL:
                CommonsUtils.set(attrs, '$ext.preText', 'http://');
                break;
        }
        field.attrs = CommonsUtils.defaults(field.attrs, attrs);
    };
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    PngFormlyUtils.resolveTemplateOptions = /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    function (dataField, field) {
        /** @type {?} */
        var options = {};
        options.label = dataField.label + ":";
        if (dataField.required) {
            options.required = true;
        }
        if (dataField.description) {
            options.description = dataField.description;
        }
        if (dataField.placeholder) {
            options.placeholder = dataField.placeholder;
        }
        if (dataField.disabled) {
            options.disabled = dataField.disabled;
        }
        field.templateOptions = CommonsUtils.defaults(field.templateOptions, options);
    };
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    PngFormlyUtils.resolveValidations = /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    function (dataField, field) {
        /** @type {?} */
        var validations = [];
        if (dataField.maxLength) {
            validations.push(NgValidators.maxLength(dataField.maxLength));
        }
        if (dataField.minLength) {
            validations.push(NgValidators.minLength(dataField.minLength));
        }
        if (dataField.max) {
            validations.push(NgValidators.max(dataField.max));
        }
        if (dataField.min) {
            validations.push(NgValidators.min(dataField.min));
        }
        if (dataField.pattern) {
            validations.push(NgValidators.pattern(dataField.pattern));
        }
        if (dataField.dataAttr === DataAttr.ID_CARD) {
            validations.push(NgValidators.idCard);
        }
        if (validations.length > 0) {
            field.validations = validations;
        }
    };
    /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    PngFormlyUtils.resolveParsers = /**
     * @private
     * @param {?} dataField
     * @param {?} field
     * @return {?}
     */
    function (dataField, field) {
        field.parsers = CommonsUtils.getArrayValue(dataField.parsers) || [];
        /** @type {?} */
        var parser;
        switch (dataField.dataAttr) {
            case DataAttr.CURRENCY:
                parser = function (val) { return val ? Number(val) : val; };
                break;
            case DataAttr.DATE:
                parser = function (val) { return val ? DateUtils.getFormattedDate(val, 'YYYY-MM-DD') : val; };
                break;
            case DataAttr.DATE_TIME:
                parser = function (val) { return val ? DateUtils.getFormattedDate(val, 'YYYY-MM-DD HH:mm:ss') : val; };
                break;
            case DataAttr.TIME:
                parser = function (val) { return val ? DateUtils.getFormattedDate(val, 'HH:mm:ss') : val; };
                break;
            case DataAttr.YEAR:
                parser = function (val) { return val ? DateUtils.getFormattedDate(val, 'YYYY') : val; };
                break;
            case DataAttr.MONTH:
                parser = function (val) { return val ? DateUtils.getFormattedDate(val, 'YYYY-MM') : val; };
                break;
            case DataAttr.PERCENT:
                parser = function (val) { return val ? Number(val) / 100 : val; };
                break;
            case DataAttr.ID_CARD:
                parser = function (val) { return val ? val.toUpperCase() : val; };
                break;
        }
        /** @type {?} */
        var parsers = CommonsUtils.getArrayValue(dataField.parsers) || [];
        if (parser) {
            parsers.push(function (val) {
                try {
                    return parser(val);
                }
                catch (e) {
                    return undefined;
                }
            });
        }
        if (parsers.length > 0) {
            field.parsers = parsers;
        }
    };
    /**
     * @private
     * @param {?} formProps
     * @param {?} field
     * @param {?=} formlyForm
     * @return {?}
     */
    PngFormlyUtils.resolveDataField = /**
     * @private
     * @param {?} formProps
     * @param {?} field
     * @param {?=} formlyForm
     * @return {?}
     */
    function (formProps, field, formlyForm) {
        if (field.fieldArray) {
            if (field.wrappers) {
                field.wrappers = CommonsUtils.getArrayValue(field.wrappers);
            }
            PngFormlyUtils.resolveField(function () { return formProps; }, field.fieldArray, function () { return formlyForm; }); // bind latter
        }
        else if (field.fieldGroup) {
            if (field.wrappers) {
                field.wrappers = CommonsUtils.getArrayValue(field.wrappers);
            }
            field.fieldGroup.forEach(function (aField) {
                if (field.templateOptions && field.templateOptions.landscape) {
                    CommonsUtils.set((/** @type {?} */ (aField)), 'templateOptions.landscape', field.templateOptions.landscape);
                }
                PngFormlyUtils.resolveField(formProps, aField, formlyForm);
            });
        }
        else {
            /** @type {?} */
            var dataField = field.dataField;
            if (field.template) {
                field.type = 'formly-template';
            }
            if (field.type === PngFormlyTypes.dyna) {
                Object.defineProperty(field, 'key', {
                    value: "$_" + IdUtils.getRandom(),
                    enumerable: false
                });
                // field.key = `$_${IdUtils.getRandom()}`;
            }
            if (!dataField) {
                if (!field.type) {
                    field.type = PngFormlyTypes.input;
                }
                if (field.parsers) {
                    field.parsers = CommonsUtils.getArrayValue(field.parsers);
                }
                PngFormlyUtils.resolveValidators(field);
                return;
            }
            dataField = CommonsUtils.merge(DataFieldUtils.getFieldDefaultProps(dataField), dataField);
            field.dataField = dataField;
            if (field.type && field.type === PngFormlyTypes.value) {
                field.key = field.key || field.dataField.key;
                CommonsUtils.set((/** @type {?} */ (field)), 'templateOptions.label', field.dataField.label);
                return field;
            }
            /** @type {?} */
            var resolvedField = {};
            PngFormlyUtils.resolveBasic(dataField, resolvedField);
            PngFormlyUtils.resolveProps(dataField, resolvedField);
            PngFormlyUtils.resolveAttrs(dataField, resolvedField);
            PngFormlyUtils.resolveTemplateOptions(dataField, resolvedField);
            PngFormlyUtils.resolveValidations(dataField, resolvedField);
            CommonsUtils.defaults(field, resolvedField);
            if (field.type === PngFormlyTypes.input) {
                if (field.props['$ext'].apiDataProps) {
                    field.type = PngFormlyTypes.autoComplete;
                }
                if (dataField.length) {
                    CommonsUtils.set((/** @type {?} */ (field)), 'attrs.size', dataField.length);
                }
            }
            /** @type {?} */
            var apiDataProps = CommonsUtils.get(field, 'props.$ext.apiDataProps');
            if (apiDataProps) {
                if (!apiDataProps.apiEntry) {
                    apiDataProps['apiEntry'] = formProps.apiEntry || formProps.entity && formProps.entity.apiEntry;
                }
                if (!apiDataProps.dataPath) {
                    apiDataProps['dataPath'] = 'items';
                }
            }
            PngFormlyUtils.resolveParsers(dataField, resolvedField);
            if (resolvedField.parsers) {
                field.parsers = field.parsers || [];
                field.parsers = field.parsers.concat(resolvedField.parsers);
            }
            PngFormlyUtils.resolveValidators(field);
        }
    };
    return PngFormlyUtils;
}());
export { PngFormlyUtils };
//# sourceMappingURL=data:application/json;base64,