/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { LogUtils, RouteBindComponent } from '@er/core';
import { FormlyFormComponent } from '@er/formly';
import { CommonsUtils, ConfigUtils, IdUtils } from '@er/utils';
import { of } from 'rxjs';
import { PngFormlyUtils } from '../../utils';
var PngFormlyFormComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngFormlyFormComponent, _super);
    function PngFormlyFormComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.debug = !!!ConfigUtils.getConfig().isProduction;
        _this.onFormValueChanges = new EventEmitter();
        _this.panelProps = {};
        _this._formProps = {};
        return _this;
    }
    Object.defineProperty(PngFormlyFormComponent.prototype, "props", {
        get: /**
         * @return {?}
         */
        function () {
            return this._props;
        },
        set: /**
         * @param {?} props
         * @return {?}
         */
        function (props) {
            this.panelProps = props['panel'] || {};
            this._props = CommonsUtils.omit(props, 'panel');
            this.initFormProps(this._props);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PngFormlyFormComponent.prototype, "formProps", {
        get: /**
         * @return {?}
         */
        function () {
            return this._formProps || {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    PngFormlyFormComponent.prototype.formValueChanges = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.debug) {
            this.formModel$ = of(this.formlyForm.model);
        }
        this.onFormValueChanges.emit(event);
    };
    /**
     * @param {?} props
     * @return {?}
     */
    PngFormlyFormComponent.prototype.beforeRoutePropsBind = /**
     * @param {?} props
     * @return {?}
     */
    function (props) {
        return { props: props };
    };
    /**
     * @param {?} formProps
     * @return {?}
     */
    PngFormlyFormComponent.prototype.resolveFormFields = /**
     * @param {?} formProps
     * @return {?}
     */
    function (formProps) {
        var _this = this;
        if (!formProps || !formProps['fields']) {
            LogUtils.error(this, '没有定义fields!', formProps);
            return;
        }
        formProps.formlyForm = this.formlyForm;
        this.formlyForm.formProps = formProps;
        formProps.fields.forEach(function (field) {
            PngFormlyUtils.resolveField(formProps, field, _this.formlyForm);
        });
    };
    /**
     * @return {?}
     */
    PngFormlyFormComponent.prototype.afterPropsInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @private
     * @param {?} formProps
     * @return {?}
     */
    PngFormlyFormComponent.prototype.initFormProps = /**
     * @private
     * @param {?} formProps
     * @return {?}
     */
    function (formProps) {
        this.resolveFormFields(formProps);
        formProps.$id = IdUtils.getRandom();
        if (formProps.entity) {
            if (!formProps.caption) {
                if (formProps.$routeParams && formProps.$routeParams['id']) {
                    formProps.caption = "\u7F16\u8F91" + formProps.entity.label;
                }
                else {
                    formProps.caption = "\u6DFB\u52A0" + formProps.entity.label;
                }
            }
            if (!formProps.apiEntry) {
                formProps.apiEntry = formProps.entity.apiEntry;
            }
        }
        if (!formProps.apiEntry) {
            LogUtils.warn([this, '没有定义apiEntry,表单不能提交！', formProps]);
        }
        else if (this.formlyForm) {
            this.formlyForm.apiEntry = formProps.apiEntry;
        }
        if (formProps.beforeSubmit) {
            this.beforeSubmit = formProps.beforeSubmit;
            delete formProps.beforeSubmit;
        }
        if (formProps.valueChanges) {
            this.valueChanges = formProps.valueChanges;
            delete formProps.valueChanges;
        }
        if (formProps.afterSubmit) {
            this.afterSubmit = formProps.afterSubmit;
            delete formProps.afterSubmit;
        }
        if (formProps.entity && formProps.entity.initValue) {
            formProps.model = formProps.entity.initValue;
        }
        else {
            formProps.model = {};
        }
        this._formProps = formProps;
        this.afterPropsInit();
    };
    PngFormlyFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-formly-form',
                    template: "\n    <png-panel [showHeader]=\"panelProps['showHeader']\"\n               [header]=\"panelProps['caption']\"\n               [footer]=\"panelProps['footer']\"\n               [icon]=\"panelProps['icon']\"\n               [collapsed]=\"panelProps['collapsed']\"\n               [toggleable]=\"panelProps['collapsable']\"\n               [styleClass]=\"panelProps['panelStyleClass']\"\n               [barStyleClass]=\"panelProps['barStyleClass']\"\n               [style]=\"panelProps['panelStyle']\"\n    >\n      <er-formly-form\n        class=\"my-2\"\n        erPropsBind\n        [props]=\"formProps\"\n        [beforeSubmit]=\"beforeSubmit\"\n        [afterSubmit]=\"afterSubmit\"\n        [valueChanges]=\"valueChanges\"\n        (onFormValueChanges)=\"formValueChanges($event)\"\n      >\n      </er-formly-form>\n    </png-panel>\n    <png-form-debug *ngIf=\"debug\"\n                    [model]=\"formModel$|async\"\n                    [debugFormProps]=\"props\"\n                    [runtimeFormProps]=\"formProps\"\n    >\n    </png-form-debug>\n  "
                }] }
    ];
    PngFormlyFormComponent.propDecorators = {
        debug: [{ type: Input }],
        formlyForm: [{ type: ViewChild, args: [FormlyFormComponent,] }],
        onFormValueChanges: [{ type: Output }],
        props: [{ type: Input }]
    };
    return PngFormlyFormComponent;
}(RouteBindComponent));
export { PngFormlyFormComponent };
if (false) {
    /** @type {?} */
    PngFormlyFormComponent.prototype.debugFormProps;
    /** @type {?} */
    PngFormlyFormComponent.prototype.debug;
    /** @type {?} */
    PngFormlyFormComponent.prototype.formlyForm;
    /** @type {?} */
    PngFormlyFormComponent.prototype.onFormValueChanges;
    /** @type {?} */
    PngFormlyFormComponent.prototype.panelProps;
    /** @type {?} */
    PngFormlyFormComponent.prototype.formModel$;
    /** @type {?} */
    PngFormlyFormComponent.prototype.beforeSubmit;
    /** @type {?} */
    PngFormlyFormComponent.prototype.afterSubmit;
    /** @type {?} */
    PngFormlyFormComponent.prototype.valueChanges;
    /**
     * @type {?}
     * @protected
     */
    PngFormlyFormComponent.prototype._formProps;
    /**
     * @type {?}
     * @protected
     */
    PngFormlyFormComponent.prototype._props;
}
//# sourceMappingURL=data:application/json;base64,