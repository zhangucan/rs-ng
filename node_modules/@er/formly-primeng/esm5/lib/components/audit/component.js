/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { ApiUtils, AuthUtils, LogUtils } from '@er/core';
import { CommonsUtils, DateUtils, DialogUtils } from '@er/utils';
import { PngFormlyTypes } from '../../types/field-types';
import { PngFormlyUtils } from '../../utils';
import { PngFormlyFormComponent } from '../form/component';
var PngFormlyAuditFormComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngFormlyAuditFormComponent, _super);
    function PngFormlyAuditFormComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.buttonsStyleClass = 'text-center my-5';
        _this.submitBtnStyleClass = 'btn btn-success';
        _this.resetBtnStyleClass = 'btn btn-danger';
        _this.initBtnStyleClass = 'btn btn-alert';
        _this.backBtnStyleClass = 'btn btn-info';
        return _this;
    }
    /**
     * @param {?} formProps
     * @return {?}
     */
    PngFormlyAuditFormComponent.prototype.resolveFormFields = /**
     * @param {?} formProps
     * @return {?}
     */
    function (formProps) {
        var _this = this;
        if (!formProps || !formProps['fields']) {
            LogUtils.error(this, '没有定义fields!', formProps);
            return;
        }
        if (!formProps.caption) {
            formProps.caption = "\u5BA1\u6838" + formProps.entity.label + "\u4FE1\u606F";
        }
        formProps.fields.forEach(function (field) {
            field.type = PngFormlyTypes.value;
            PngFormlyUtils.resolveField(formProps, field, _this);
        });
        /** @type {?} */
        var commentField = {
            key: 'comment',
            type: PngFormlyTypes.textArea,
            attrs: {
                placeholder: '请输入您的审核意见或备注'
            },
            templateOptions: {
                label: '审核意见',
                description: '审核不通过时，必须输入不通过的原因',
                minLength: 5
            }
        };
        PngFormlyUtils.resolveField(formProps, commentField, this);
        formProps.fields.push(commentField);
    };
    /**
     * @return {?}
     */
    PngFormlyAuditFormComponent.prototype.onAccept = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newState = this.saveAuditHis();
        ApiUtils.patchById(this.formlyForm.apiEntry, this.formlyForm.modelId, this.getSubmitData(newState), {
            tag: this.formlyForm.formId
        }).subscribe();
    };
    /**
     * @return {?}
     */
    PngFormlyAuditFormComponent.prototype.onReject = /**
     * @return {?}
     */
    function () {
        if (CommonsUtils.isEmpty(this.formlyForm.model['comment'])) {
            DialogUtils.error('操作无效', '请输入不通过的原因');
            return;
        }
        ApiUtils.patchById(this.formlyForm.apiEntry, this.formlyForm.modelId, this.getSubmitData(-1), {
            tag: this.formlyForm.formId
        }).subscribe();
    };
    /**
     * @param {?} state
     * @return {?}
     */
    PngFormlyAuditFormComponent.prototype.getSubmitData = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return {
            audit: {
                state: state,
                auditComment: this.formlyForm.model['comment'],
                auditDate: DateUtils.getFormattedDate(),
                auditorName: AuthUtils.getCurrentUser().fullName,
                auditorId: AuthUtils.getCurrentUser().id
            }
        };
    };
    /**
     * @private
     * @return {?}
     */
    PngFormlyAuditFormComponent.prototype.saveAuditHis = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var audit = this.formlyForm.model['audit'];
        if (audit) {
            /** @type {?} */
            var data = this.formlyForm.model;
            delete data['id'];
            ApiUtils.save(this.formlyForm.apiEntry + "-audit-his", data, {
                tag: this.formlyForm.formId
            }).subscribe();
            return ++audit['state'];
        }
        return 1;
    };
    PngFormlyAuditFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'png-formly-audit-form',
                    template: "\n    <png-panel [header]=\"formProps.caption\"\n               [footer]=\"formProps.footer\"\n               [icon]=\"formProps.icon\"\n               [toggleable]=\"formProps.collapsable\"\n    >\n      <er-formly-form\n        class=\"mt-2\"\n        erPropsBind\n        [props]=\"formProps\"\n        [beforeSubmit]=\"beforeSubmit\"\n        [afterSubmit]=\"afterSubmit\"\n      >\n        <ng-template erTypedTemplate=\"buttons\">\n          <div [ngClass]=\"buttonsStyleClass\">\n            <er-button [stateKey]=\"formlyForm.formId\"\n                       icon=\"fa fa-check\"\n                       label=\"\u901A&nbsp;&nbsp;&nbsp;\u8FC7\"\n                       title=\"\u4FDD\u7559\u6570\u636E\u5230\u670D\u52A1\u7AEF\"\n                       class=\"mr-2\"\n                       type=\"button\"\n                       [disabled]=\"!formlyForm.form.valid\"\n                       [styleClass]=\"submitBtnStyleClass\"\n                       (onClick)=\"onAccept()\"\n            ></er-button>\n            <er-button icon=\"fa fa-close\"\n                       class=\"ml-4\"\n                       label=\"\u4E0D&nbsp;&nbsp;&nbsp;\u901A&nbsp;&nbsp;&nbsp;\u8FC7\"\n                       title=\"\u6062\u590D\u5230\u4FEE\u6539\u524D\u7684\u72B6\u6001\"\n                       [styleClass]=\"resetBtnStyleClass\"\n                       (onClick)=\"onReject()\"\n            >\n            </er-button>\n          </div>\n\n        </ng-template>\n      </er-formly-form>\n    </png-panel>\n\n  "
                }] }
    ];
    PngFormlyAuditFormComponent.propDecorators = {
        buttonsStyleClass: [{ type: Input }],
        submitBtnStyleClass: [{ type: Input }],
        resetBtnStyleClass: [{ type: Input }],
        initBtnStyleClass: [{ type: Input }],
        backBtnStyleClass: [{ type: Input }]
    };
    return PngFormlyAuditFormComponent;
}(PngFormlyFormComponent));
export { PngFormlyAuditFormComponent };
if (false) {
    /** @type {?} */
    PngFormlyAuditFormComponent.prototype.buttonsStyleClass;
    /** @type {?} */
    PngFormlyAuditFormComponent.prototype.submitBtnStyleClass;
    /** @type {?} */
    PngFormlyAuditFormComponent.prototype.resetBtnStyleClass;
    /** @type {?} */
    PngFormlyAuditFormComponent.prototype.initBtnStyleClass;
    /** @type {?} */
    PngFormlyAuditFormComponent.prototype.backBtnStyleClass;
}
//# sourceMappingURL=data:application/json;base64,