/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild } from '@angular/core';
import { DynaContentComponent } from '@er/core';
import { distinctUntilChanged } from 'rxjs/operators';
import { PngFormlyFieldType } from '../../base/field-type';
/**
 * @record
 */
export function DynaProps() { }
if (false) {
    /** @type {?} */
    DynaProps.prototype.content;
    /** @type {?} */
    DynaProps.prototype.refreshOnFieldChanges;
    /** @type {?} */
    DynaProps.prototype.refreshOnFormChanges;
}
var PngFormlyFieldDynaComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PngFormlyFieldDynaComponent, _super);
    function PngFormlyFieldDynaComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    PngFormlyFieldDynaComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        if (this.props['refreshOnForm']) {
            /** @type {?} */
            var form = this.field.formlyForm.form;
            this.subscription = form.valueChanges
                .pipe(distinctUntilChanged())
                .subscribe(function (_) {
                _this.comp.refresh();
            });
        }
        else if (this.props['refreshOnField']) {
            /** @type {?} */
            var formControl = this.field.formlyForm.formControl(this.props['refreshOnField']);
            this.subscription = formControl.valueChanges
                .pipe(distinctUntilChanged())
                .subscribe(function (_) {
                _this.comp.refresh();
            });
        }
        else {
            this.comp.refresh();
        }
    };
    /**
     * @return {?}
     */
    PngFormlyFieldDynaComponent.prototype.unsubscribe = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    PngFormlyFieldDynaComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.unsubscribe();
    };
    PngFormlyFieldDynaComponent.decorators = [
        { type: Component, args: [{
                    template: "\n    <er-dyna-content [content]=\"props['content']\" [context]=\"{field: field}\"></er-dyna-content>\n  "
                }] }
    ];
    PngFormlyFieldDynaComponent.propDecorators = {
        comp: [{ type: ViewChild, args: [DynaContentComponent,] }]
    };
    return PngFormlyFieldDynaComponent;
}(PngFormlyFieldType));
export { PngFormlyFieldDynaComponent };
if (false) {
    /** @type {?} */
    PngFormlyFieldDynaComponent.prototype.comp;
    /** @type {?} */
    PngFormlyFieldDynaComponent.prototype.subscription;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVyL2Zvcm1seS1wcmltZW5nLyIsInNvdXJjZXMiOlsibGliL2ZpZWxkLXR5cGVzL2R5bmEvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBcUIsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXRFLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUc5QyxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQzs7OztBQUV6RCwrQkFJQzs7O0lBSEMsNEJBQXFCOztJQUNyQiwwQ0FBOEI7O0lBQzlCLHlDQUE4Qjs7QUFHaEM7SUFLaUQsdURBQWtCO0lBTG5FOztJQXlDQSxDQUFDOzs7O0lBOUJDLDhDQUFROzs7SUFBUjtRQUFBLGlCQW1CQztRQWxCQyxpQkFBTSxRQUFRLFdBQUUsQ0FBQztRQUNqQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEVBQUU7O2dCQUN6QixJQUFJLEdBQWMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSTtZQUNsRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZO2lCQUNsQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztpQkFDNUIsU0FBUyxDQUFDLFVBQUEsQ0FBQztnQkFDVixLQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxDQUFDO1NBQ047YUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsRUFBRTs7Z0JBQ2pDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ25GLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDLFlBQVk7aUJBQ3pDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO2lCQUM1QixTQUFTLENBQUMsVUFBQSxDQUFDO2dCQUNWLEtBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDdEIsQ0FBQyxDQUFDLENBQUM7U0FDTjthQUFNO1lBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNyQjtJQUNILENBQUM7Ozs7SUFFRCxpREFBVzs7O0lBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7Ozs7SUFFRCxpREFBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Z0JBeENGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsMkdBRVQ7aUJBQ0Y7Ozt1QkFHRSxTQUFTLFNBQUMsb0JBQW9COztJQWtDakMsa0NBQUM7Q0FBQSxBQXpDRCxDQUtpRCxrQkFBa0IsR0FvQ2xFO1NBcENZLDJCQUEyQjs7O0lBRXRDLDJDQUE0RDs7SUFFNUQsbURBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIE9uRGVzdHJveSwgT25Jbml0LCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtGb3JtR3JvdXB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7RHluYUNvbnRlbnRDb21wb25lbnR9IGZyb20gJ0Blci9jb3JlJztcbmltcG9ydCB7RHluYUNvbnRlbnR9IGZyb20gJ0Blci90eXBlcyc7XG5pbXBvcnQge1N1YnNjcmlwdGlvbn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1BuZ0Zvcm1seUZpZWxkVHlwZX0gZnJvbSAnLi4vLi4vYmFzZS9maWVsZC10eXBlJztcblxuZXhwb3J0IGludGVyZmFjZSBEeW5hUHJvcHMge1xuICBjb250ZW50OiBEeW5hQ29udGVudDtcbiAgcmVmcmVzaE9uRmllbGRDaGFuZ2VzOiBzdHJpbmc7XG4gIHJlZnJlc2hPbkZvcm1DaGFuZ2VzOiBib29sZWFuO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZXItZHluYS1jb250ZW50IFtjb250ZW50XT1cInByb3BzWydjb250ZW50J11cIiBbY29udGV4dF09XCJ7ZmllbGQ6IGZpZWxkfVwiPjwvZXItZHluYS1jb250ZW50PlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIFBuZ0Zvcm1seUZpZWxkRHluYUNvbXBvbmVudCBleHRlbmRzIFBuZ0Zvcm1seUZpZWxkVHlwZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBAVmlld0NoaWxkKER5bmFDb250ZW50Q29tcG9uZW50KSBjb21wOiBEeW5hQ29udGVudENvbXBvbmVudDtcblxuICBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBuZ09uSW5pdCgpIHtcbiAgICBzdXBlci5uZ09uSW5pdCgpO1xuICAgIGlmICh0aGlzLnByb3BzWydyZWZyZXNoT25Gb3JtJ10pIHtcbiAgICAgIGNvbnN0IGZvcm06IEZvcm1Hcm91cCA9IHRoaXMuZmllbGQuZm9ybWx5Rm9ybS5mb3JtO1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBmb3JtLnZhbHVlQ2hhbmdlc1xuICAgICAgICAucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKVxuICAgICAgICAuc3Vic2NyaWJlKF8gPT4ge1xuICAgICAgICAgIHRoaXMuY29tcC5yZWZyZXNoKCk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wc1sncmVmcmVzaE9uRmllbGQnXSkge1xuICAgICAgY29uc3QgZm9ybUNvbnRyb2wgPSB0aGlzLmZpZWxkLmZvcm1seUZvcm0uZm9ybUNvbnRyb2wodGhpcy5wcm9wc1sncmVmcmVzaE9uRmllbGQnXSk7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IGZvcm1Db250cm9sLnZhbHVlQ2hhbmdlc1xuICAgICAgICAucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKVxuICAgICAgICAuc3Vic2NyaWJlKF8gPT4ge1xuICAgICAgICAgIHRoaXMuY29tcC5yZWZyZXNoKCk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbXAucmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuXG4gIHVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbiJdfQ==