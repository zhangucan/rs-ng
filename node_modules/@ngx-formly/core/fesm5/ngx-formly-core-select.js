import { Pipe, NgModule } from '@angular/core';
import { Observable, of } from 'rxjs';
import { map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var FormlySelectOptionsPipe = /** @class */ (function () {
    function FormlySelectOptionsPipe() {
    }
    /**
     * @param {?} options
     * @param {?=} field
     * @return {?}
     */
    FormlySelectOptionsPipe.prototype.transform = /**
     * @param {?} options
     * @param {?=} field
     * @return {?}
     */
    function (options, field) {
        var _this = this;
        if (!(options instanceof Observable)) {
            options = of(options);
        }
        return ((/** @type {?} */ (options))).pipe(map(function (value) { return _this.toOptions(value, field || {}); }));
    };
    /**
     * @param {?} options
     * @param {?} field
     * @return {?}
     */
    FormlySelectOptionsPipe.prototype.toOptions = /**
     * @param {?} options
     * @param {?} field
     * @return {?}
     */
    function (options, field) {
        var _this = this;
        /** @type {?} */
        var gOptions = [];
        /** @type {?} */
        var groups = {};
        /** @type {?} */
        var to = field.templateOptions || {};
        options.map(function (option) {
            if (!_this.getGroupProp(option, to)) {
                gOptions.push(_this.toOption(option, to));
            }
            else {
                if (!groups[_this.getGroupProp(option, to)]) {
                    groups[_this.getGroupProp(option, to)] = [];
                    gOptions.push({
                        label: _this.getGroupProp(option, to),
                        group: groups[_this.getGroupProp(option, to)],
                    });
                }
                groups[_this.getGroupProp(option, to)].push(_this.toOption(option, to));
            }
        });
        return gOptions;
    };
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    FormlySelectOptionsPipe.prototype.toOption = /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    function (item, to) {
        return {
            label: this.getLabelProp(item, to),
            value: this.getValueProp(item, to),
            disabled: this.getDisabledProp(item, to) || false,
        };
    };
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    FormlySelectOptionsPipe.prototype.getLabelProp = /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    function (item, to) {
        if (typeof to.labelProp === 'function') {
            return to.labelProp(item);
        }
        if (this.shouldUseLegacyOption(item, to)) {
            return item.value;
        }
        return item[to.labelProp || 'label'];
    };
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    FormlySelectOptionsPipe.prototype.getValueProp = /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    function (item, to) {
        if (typeof to.valueProp === 'function') {
            return to.valueProp(item);
        }
        if (this.shouldUseLegacyOption(item, to)) {
            return item.key;
        }
        return item[to.valueProp || 'value'];
    };
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    FormlySelectOptionsPipe.prototype.getDisabledProp = /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    function (item, to) {
        if (typeof to.disabledProp === 'function') {
            return to.disabledProp(item);
        }
        return item[to.disabledProp || 'disabled'];
    };
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    FormlySelectOptionsPipe.prototype.getGroupProp = /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    function (item, to) {
        if (typeof to.groupProp === 'function') {
            return to.groupProp(item);
        }
        return item[to.groupProp || 'group'];
    };
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    FormlySelectOptionsPipe.prototype.shouldUseLegacyOption = /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    function (item, to) {
        return !to.valueProp
            && !to.labelProp
            && item != null
            && typeof item === 'object'
            && 'key' in item
            && 'value' in item;
    };
    FormlySelectOptionsPipe.decorators = [
        { type: Pipe, args: [{ name: 'formlySelectOptions' },] }
    ];
    return FormlySelectOptionsPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var FormlySelectModule = /** @class */ (function () {
    function FormlySelectModule() {
    }
    FormlySelectModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FormlySelectOptionsPipe],
                    exports: [FormlySelectOptionsPipe],
                },] }
    ];
    return FormlySelectModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { FormlySelectModule, FormlySelectOptionsPipe as Éµa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZvcm1seS1jb3JlLXNlbGVjdC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vQG5neC1mb3JtbHkvY29yZS9zZWxlY3Qvc2VsZWN0LW9wdGlvbnMucGlwZS50cyIsIm5nOi8vQG5neC1mb3JtbHkvY29yZS9zZWxlY3Qvc2VsZWN0Lm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiBhcyBvYnNlcnZhYmxlT2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5cbkBQaXBlKHsgbmFtZTogJ2Zvcm1seVNlbGVjdE9wdGlvbnMnIH0pXG5leHBvcnQgY2xhc3MgRm9ybWx5U2VsZWN0T3B0aW9uc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgdHJhbnNmb3JtKG9wdGlvbnMsIGZpZWxkPzogRm9ybWx5RmllbGRDb25maWcpIHtcbiAgICBpZiAoIShvcHRpb25zIGluc3RhbmNlb2YgT2JzZXJ2YWJsZSkpIHtcbiAgICAgIG9wdGlvbnMgPSBvYnNlcnZhYmxlT2Yob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChvcHRpb25zIGFzIE9ic2VydmFibGU8YW55PikucGlwZShcbiAgICAgIG1hcCh2YWx1ZSA9PiB0aGlzLnRvT3B0aW9ucyh2YWx1ZSwgZmllbGQgfHwge30pKSxcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSB0b09wdGlvbnMob3B0aW9ucywgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnKSB7XG4gICAgY29uc3QgZ09wdGlvbnM6IGFueVtdID0gW10sXG4gICAgICBncm91cHM6IHsgW2tleTogc3RyaW5nXTogYW55W10gfSA9IHt9LFxuICAgICAgdG8gPSBmaWVsZC50ZW1wbGF0ZU9wdGlvbnMgfHwge307XG5cbiAgICBvcHRpb25zLm1hcCgob3B0aW9uOiBhbnkpID0+IHtcbiAgICAgIGlmICghdGhpcy5nZXRHcm91cFByb3Aob3B0aW9uLCB0bykpIHtcbiAgICAgICAgZ09wdGlvbnMucHVzaCh0aGlzLnRvT3B0aW9uKG9wdGlvbiwgdG8pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghZ3JvdXBzW3RoaXMuZ2V0R3JvdXBQcm9wKG9wdGlvbiwgdG8pXSkge1xuICAgICAgICAgIGdyb3Vwc1t0aGlzLmdldEdyb3VwUHJvcChvcHRpb24sIHRvKV0gPSBbXTtcbiAgICAgICAgICBnT3B0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgIGxhYmVsOiB0aGlzLmdldEdyb3VwUHJvcChvcHRpb24sIHRvKSxcbiAgICAgICAgICAgIGdyb3VwOiBncm91cHNbdGhpcy5nZXRHcm91cFByb3Aob3B0aW9uLCB0byldLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGdyb3Vwc1t0aGlzLmdldEdyb3VwUHJvcChvcHRpb24sIHRvKV0ucHVzaCh0aGlzLnRvT3B0aW9uKG9wdGlvbiwgdG8pKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBnT3B0aW9ucztcbiAgfVxuXG4gIHByaXZhdGUgdG9PcHRpb24oaXRlbSwgdG8pIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6IHRoaXMuZ2V0TGFiZWxQcm9wKGl0ZW0sIHRvKSxcbiAgICAgIHZhbHVlOiB0aGlzLmdldFZhbHVlUHJvcChpdGVtLCB0byksXG4gICAgICBkaXNhYmxlZDogdGhpcy5nZXREaXNhYmxlZFByb3AoaXRlbSwgdG8pIHx8IGZhbHNlLFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGdldExhYmVsUHJvcChpdGVtLCB0byk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiB0by5sYWJlbFByb3AgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiB0by5sYWJlbFByb3AoaXRlbSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2hvdWxkVXNlTGVnYWN5T3B0aW9uKGl0ZW0sIHRvKSkge1xuICAgICAgcmV0dXJuIGl0ZW0udmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW1bdG8ubGFiZWxQcm9wIHx8ICdsYWJlbCddO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRWYWx1ZVByb3AoaXRlbSwgdG8pOiBzdHJpbmcge1xuICAgIGlmICh0eXBlb2YgdG8udmFsdWVQcm9wID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gdG8udmFsdWVQcm9wKGl0ZW0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNob3VsZFVzZUxlZ2FjeU9wdGlvbihpdGVtLCB0bykpIHtcbiAgICAgIHJldHVybiBpdGVtLmtleTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbVt0by52YWx1ZVByb3AgfHwgJ3ZhbHVlJ107XG4gIH1cblxuICBwcml2YXRlIGdldERpc2FibGVkUHJvcChpdGVtLCB0byk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiB0by5kaXNhYmxlZFByb3AgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiB0by5kaXNhYmxlZFByb3AoaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtW3RvLmRpc2FibGVkUHJvcCB8fCAnZGlzYWJsZWQnXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0R3JvdXBQcm9wKGl0ZW0sIHRvKTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIHRvLmdyb3VwUHJvcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHRvLmdyb3VwUHJvcChpdGVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbVt0by5ncm91cFByb3AgfHwgJ2dyb3VwJ107XG4gIH1cblxuICBwcml2YXRlIHNob3VsZFVzZUxlZ2FjeU9wdGlvbihpdGVtLCB0bykge1xuICAgIHJldHVybiAhdG8udmFsdWVQcm9wXG4gICAgICAmJiAhdG8ubGFiZWxQcm9wXG4gICAgICAmJiBpdGVtICE9IG51bGxcbiAgICAgICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0J1xuICAgICAgJiYgJ2tleScgaW4gaXRlbVxuICAgICAgJiYgJ3ZhbHVlJyBpbiBpdGVtO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybWx5U2VsZWN0T3B0aW9uc1BpcGUgfSBmcm9tICcuL3NlbGVjdC1vcHRpb25zLnBpcGUnO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtGb3JtbHlTZWxlY3RPcHRpb25zUGlwZV0sXG4gIGV4cG9ydHM6IFtGb3JtbHlTZWxlY3RPcHRpb25zUGlwZV0sXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seVNlbGVjdE1vZHVsZSB7IH1cbiJdLCJuYW1lcyI6WyJvYnNlcnZhYmxlT2YiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7SUFLQTtLQTBGQzs7Ozs7O0lBeEZDLDJDQUFTOzs7OztJQUFULFVBQVUsT0FBTyxFQUFFLEtBQXlCO1FBQTVDLGlCQVFDO1FBUEMsSUFBSSxFQUFFLE9BQU8sWUFBWSxVQUFVLENBQUMsRUFBRTtZQUNwQyxPQUFPLEdBQUdBLEVBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNqQztRQUVELE9BQU8sb0JBQUMsT0FBTyxJQUFxQixJQUFJLENBQ3RDLEdBQUcsQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUMsR0FBQSxDQUFDLENBQ2pELENBQUM7S0FDSDs7Ozs7O0lBRU8sMkNBQVM7Ozs7O0lBQWpCLFVBQWtCLE9BQU8sRUFBRSxLQUF3QjtRQUFuRCxpQkFxQkM7O1lBcEJPLFFBQVEsR0FBVSxFQUFFOztZQUN4QixNQUFNLEdBQTZCLEVBQUU7O1lBQ3JDLEVBQUUsR0FBRyxLQUFLLENBQUMsZUFBZSxJQUFJLEVBQUU7UUFFbEMsT0FBTyxDQUFDLEdBQUcsQ0FB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