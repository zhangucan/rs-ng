{"version":3,"file":"ngx-formly-core-json-schema.js.map","sources":["ng://@ngx-formly/core/json-schema/formly-json-schema.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { JSONSchema7, JSONSchema7TypeName } from 'json-schema';\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyJsonschema {\n  toFieldConfig(jsonSchema: JSONSchema7): FormlyFieldConfig {\n    return this._toFieldConfig(jsonSchema);\n  }\n\n  _toFieldConfig(jsonSchema: JSONSchema7, key?: string): FormlyFieldConfig {\n    const field: FormlyFieldConfig = {\n      ...(key ? { key } : {}),\n      type: jsonSchema.type as JSONSchema7TypeName,\n      defaultValue: jsonSchema.default,\n      templateOptions: {\n        minLength: jsonSchema.minLength,\n        maxLength: jsonSchema.maxLength,\n        label: jsonSchema.title,\n        readonly: jsonSchema.readOnly,\n        pattern: jsonSchema.pattern,\n        description: jsonSchema.description,\n      },\n    };\n\n    if (jsonSchema.enum) {\n      if (field.type === 'integer' || field.type === 'number') {\n        field.parsers = [Number];\n      }\n      field.type = 'enum';\n      field.templateOptions.options = jsonSchema.enum;\n      field.templateOptions.labelProp = item => item;\n      field.templateOptions.valueProp = item => item;\n    }\n\n    switch (jsonSchema.type) {\n      case 'object': {\n        field.fieldGroup = [];\n        Object.keys(jsonSchema.properties).forEach(p => {\n          const child = this._toFieldConfig(<JSONSchema7> jsonSchema.properties[p], p);\n          if (Array.isArray(jsonSchema.required) && jsonSchema.required.indexOf(p) !== -1) {\n            child.templateOptions.required = true;\n          }\n          field.fieldGroup.push(child);\n        });\n        break;\n      }\n      case 'array': {\n        if (!Array.isArray(jsonSchema.items)) {\n          field.fieldArray = this._toFieldConfig(jsonSchema.items as JSONSchema7);\n        } else {\n          field['_fieldArray'] = [];\n          field.fieldGroup = [];\n          jsonSchema.items.forEach(item => field['_fieldArray'].push(this._toFieldConfig(<JSONSchema7> item)));\n          if (jsonSchema.additionalItems) {\n            field['_additionalFieldArray'] = this._toFieldConfig(<JSONSchema7> jsonSchema.additionalItems);\n          }\n\n          Object.defineProperty(field, 'fieldArray', {\n            get: () => {\n              return field['_fieldArray'][field.fieldGroup.length] || field['_additionalFieldArray'];\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n        break;\n      }\n    }\n\n    return field;\n  }\n}\n"],"names":[],"mappings":"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"}
