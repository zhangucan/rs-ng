import { Observable, Subject } from 'rxjs';
import { AbstractControl, FormArray, FormGroup, NgForm, FormGroupDirective, Validators, FormControl } from '@angular/forms';
import { Injectable, InjectionToken, Component, Input, NgModule, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional, Directive, HostListener, ElementRef, Renderer2, EventEmitter, Output, ViewContainerRef, ViewChild, Attribute, ComponentFactoryResolver, SkipSelf, defineInjectable, inject } from '@angular/core';
import { debounceTime, map, tap } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @param {?} formId
 * @param {?} field
 * @param {?} index
 * @return {?}
 */
function getFieldId(formId, field, index) {
    if (field.id)
        return field.id;
    /** @type {?} */
    let type = field.type;
    if (!type && field.template)
        type = 'template';
    return [formId, type, field.key, index].join('_');
}
/**
 * @param {?} field
 * @return {?}
 */
function getKeyPath(field) {
    /* We store the keyPath in the field for performance reasons. This function will be called frequently. */
    if (!((/** @type {?} */ (field)))['_formlyKeyPath'] || ((/** @type {?} */ (field)))['_formlyKeyPath'].key !== field.key) {
        /** @type {?} */
        let keyPath = [];
        if (field.key) {
            /* Also allow for an array key, hence the type check  */
            /** @type {?} */
            let pathElements = typeof field.key === 'string' ? field.key.split('.') : field.key;
            for (let pathElement of pathElements) {
                if (typeof pathElement === 'string') {
                    /* replace paths of the form names[2] by names.2, cfr. angular formly */
                    pathElement = pathElement.replace(/\[(\w+)\]/g, '.$1');
                    keyPath = keyPath.concat(pathElement.split('.'));
                }
                else {
                    keyPath.push(pathElement);
                }
            }
            for (let i = 0; i < keyPath.length; i++) {
                /** @type {?} */
                let pathElement = keyPath[i];
                if (typeof pathElement === 'string' && /^\d+$/.test(pathElement)) {
                    keyPath[i] = parseInt(pathElement);
                }
            }
        }
        ((/** @type {?} */ (field)))['_formlyKeyPath'] = {
            key: field.key,
            path: keyPath,
        };
    }
    return ((/** @type {?} */ (field)))['_formlyKeyPath'].path.slice(0);
}
/** @type {?} */
const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];
/**
 * @param {?} model
 * @param {?} path
 * @param {?} value
 * @return {?}
 */
function assignModelValue(model, path, value) {
    if (typeof path === 'string') {
        path = getKeyPath({ key: path });
    }
    if (path.length > 1) {
        /** @type {?} */
        const e = path.shift();
        if (!model[e] || !isObject(model[e])) {
            model[e] = typeof path[0] === 'string' ? {} : [];
        }
        assignModelValue(model[e], path, value);
    }
    else {
        model[path[0]] = value;
    }
}
/**
 * @param {?} field
 * @return {?}
 */
function getFieldValue(field) {
    /** @type {?} */
    const paths = getKeyPath(field);
    /** @type {?} */
    let model = field.parent.model;
    while (model && paths.length > 0) {
        /** @type {?} */
        const e = paths.shift();
        model = model[e];
    }
    return model;
}
/**
 * @param {?} dest
 * @param {...?} args
 * @return {?}
 */
function reverseDeepMerge(dest, ...args) {
    args.forEach(src => {
        for (let srcArg in src) {
            if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {
                if (isFunction(src[srcArg])) {
                    dest[srcArg] = src[srcArg];
                }
                else {
                    dest[srcArg] = clone(src[srcArg]);
                }
            }
            else if (objAndSameType(dest[srcArg], src[srcArg])) {
                reverseDeepMerge(dest[srcArg], src[srcArg]);
            }
        }
    });
    return dest;
}
/**
 * @param {?} value
 * @return {?}
 */
function isNullOrUndefined(value) {
    return value === undefined || value === null;
}
/**
 * @param {?} value
 * @return {?}
 */
function isUndefined(value) {
    return value === undefined;
}
/**
 * @param {?} value
 * @return {?}
 */
function isBlankString(value) {
    return value === '';
}
/**
 * @param {?} value
 * @return {?}
 */
function isFunction(value) {
    return typeof (value) === 'function';
}
/**
 * @param {?} obj1
 * @param {?} obj2
 * @return {?}
 */
function objAndSameType(obj1, obj2) {
    return isObject(obj1) && isObject(obj2)
        && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)
        && !(Array.isArray(obj1) || Array.isArray(obj2));
}
/**
 * @param {?} x
 * @return {?}
 */
function isObject(x) {
    return x != null && typeof x === 'object';
}
/**
 * @param {?} value
 * @return {?}
 */
function clone(value) {
    if (!isObject(value) || value instanceof RegExp || value instanceof Observable || /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity) {
        return value;
    }
    if (value instanceof AbstractControl) {
        return null;
    }
    if (Object.prototype.toString.call(value) === '[object Date]') {
        return new Date(value.getTime());
    }
    if (Array.isArray(value)) {
        return value.slice(0).map(v => clone(v));
    }
    value = Object.assign({}, value);
    Object.keys(value).forEach(k => value[k] = clone(value[k]));
    return value;
}
/**
 * @param {?} form
 * @param {?} key
 * @return {?}
 */
function removeFieldControl(form, key) {
    if (form instanceof FormArray) {
        form.removeAt((/** @type {?} */ (key)));
    }
    else if (form instanceof FormGroup) {
        form.removeControl(`${key}`);
    }
}
/**
 * @param {?} field
 * @param {?} prop
 * @param {?} defaultValue
 * @return {?}
 */
function defineHiddenProp(field, prop, defaultValue) {
    Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });
    field[prop] = defaultValue;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const FORMLY_CONFIG = new InjectionToken('FORMLY_CONFIG');
/**
 * Maintains list of formly field directive types. This can be used to register new field templates.
 */
class FormlyConfig {
    constructor() {
        this.types = {};
        this.validators = {};
        this.wrappers = {};
        this.messages = {};
        this.templateManipulators = {
            preWrapper: [],
            postWrapper: [],
        };
        this.extras = {
            fieldTransform: undefined,
            showError: function (field) {
                return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));
            },
        };
        this.extensions = {};
    }
    /**
     * @param {?} config
     * @return {?}
     */
    addConfig(config) {
        if (config.types) {
            config.types.forEach(type => this.setType(type));
        }
        if (config.validators) {
            config.validators.forEach(validator => this.setValidator(validator));
        }
        if (config.wrappers) {
            config.wrappers.forEach(wrapper => this.setWrapper(wrapper));
        }
        if (config.manipulators) {
            config.manipulators.forEach(manipulator => this.setManipulator(manipulator));
        }
        if (config.validationMessages) {
            config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));
        }
        if (config.extensions) {
            config.extensions.forEach(c => this.extensions[c.name] = c.extension);
        }
        if (config.extras) {
            this.extras = Object.assign({}, this.extras, config.extras);
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setType(options) {
        if (Array.isArray(options)) {
            options.forEach((option) => this.setType(option));
        }
        else {
            if (!this.types[options.name]) {
                this.types[options.name] = (/** @type {?} */ ({}));
            }
            this.types[options.name].component = options.component;
            this.types[options.name].name = options.name;
            this.types[options.name].extends = options.extends;
            this.types[options.name].defaultOptions = options.defaultOptions;
            if (options.wrappers) {
                options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));
            }
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getType(name) {
        if (!this.types[name]) {
            throw new Error(`[Formly Error] There is no type by the name of "${name}"`);
        }
        this.mergeExtendedType(name);
        return this.types[name];
    }
    /**
     * @param {?=} field
     * @return {?}
     */
    getMergedField(field = {}) {
        /** @type {?} */
        const type = this.getType(field.type);
        if (type.defaultOptions) {
            reverseDeepMerge(field, type.defaultOptions);
        }
        /** @type {?} */
        const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;
        if (extendDefaults) {
            reverseDeepMerge(field, extendDefaults);
        }
        if (field && field.optionsTypes) {
            field.optionsTypes.forEach(option => {
                /** @type {?} */
                const defaultOptions = this.getType(option).defaultOptions;
                if (defaultOptions) {
                    reverseDeepMerge(field, defaultOptions);
                }
            });
        }
        this.createComponentInstance(field);
        /** @type {?} */
        const componentRef = ((/** @type {?} */ (field)))._componentFactory.componentRef;
        if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {
            reverseDeepMerge(field, componentRef.instance.defaultOptions);
        }
        if (!field.wrappers && type.wrappers) {
            field.wrappers = [...type.wrappers];
        }
    }
    /**
     * @param {?=} field
     * @return {?}
     */
    createComponentInstance(field = {}) {
        if (!field.type || field._componentFactory && field.type === field._componentFactory.type) {
            return;
        }
        /** @type {?} */
        const type = this.getType(field.type);
        /** @type {?} */
        const _componentFactoryResolver = ((/** @type {?} */ (field.parent.options)))._componentFactoryResolver;
        defineHiddenProp(field, '_componentFactory', {
            type: field.type,
            component: type.component,
            componentRef: _componentFactoryResolver
                ? _componentFactoryResolver.resolveComponentFactory(type.component).create(_componentFactoryResolver._ngModule.injector)
                : null,
        });
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setWrapper(options) {
        this.wrappers[options.name] = options;
        if (options.types) {
            options.types.forEach((type) => {
                this.setTypeWrapper(type, options.name);
            });
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getWrapper(name) {
        if (!this.wrappers[name]) {
            throw new Error(`[Formly Error] There is no wrapper by the name of "${name}"`);
        }
        return this.wrappers[name];
    }
    /**
     * @param {?} type
     * @param {?} name
     * @return {?}
     */
    setTypeWrapper(type, name) {
        if (!this.types[type]) {
            this.types[type] = (/** @type {?} */ ({}));
        }
        if (!this.types[type].wrappers) {
            this.types[type].wrappers = [];
        }
        if (this.types[type].wrappers.indexOf(name) === -1) {
            this.types[type].wrappers.push(name);
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setValidator(options) {
        this.validators[options.name] = options;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getValidator(name) {
        if (!this.validators[name]) {
            throw new Error(`[Formly Error] There is no validator by the name of "${name}"`);
        }
        return this.validators[name];
    }
    /**
     * @param {?} name
     * @param {?} message
     * @return {?}
     */
    addValidatorMessage(name, message) {
        this.messages[name] = message;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getValidatorMessage(name) {
        return this.messages[name];
    }
    /**
     * @param {?} manipulator
     * @return {?}
     */
    setManipulator(manipulator) {
        new manipulator.class()[manipulator.method](this);
    }
    /**
     * @param {?} name
     * @return {?}
     */
    mergeExtendedType(name) {
        if (!this.types[name].extends) {
            return;
        }
        /** @type {?} */
        const extendedType = this.getType(this.types[name].extends);
        if (!this.types[name].component) {
            this.types[name].component = extendedType.component;
        }
        if (!this.types[name].wrappers) {
            this.types[name].wrappers = extendedType.wrappers;
        }
    }
}
FormlyConfig.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */ FormlyConfig.ngInjectableDef = defineInjectable({ factory: function FormlyConfig_Factory() { return new FormlyConfig(); }, token: FormlyConfig, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class FormlyFormBuilder {
    /**
     * @param {?} formlyConfig
     */
    constructor(formlyConfig) {
        this.formlyConfig = formlyConfig;
    }
    /**
     * @param {?} formControl
     * @param {?=} fieldGroup
     * @param {?=} model
     * @param {?=} options
     * @return {?}
     */
    buildForm(formControl, fieldGroup = [], model, options) {
        this._buildForm({ fieldGroup, model, formControl, options });
    }
    /**
     * @param {?} field
     * @return {?}
     */
    _buildForm(field) {
        this.getExtensions().forEach(extension => extension.prePopulate && extension.prePopulate(field));
        this.getExtensions().forEach(extension => extension.onPopulate && extension.onPopulate(field));
        if (field.fieldGroup) {
            field.fieldGroup.forEach((f) => this._buildForm(f));
        }
        this.getExtensions().forEach(extension => extension.postPopulate && extension.postPopulate(field));
    }
    /**
     * @return {?}
     */
    getExtensions() {
        return Object.keys(this.formlyConfig.extensions).map(name => this.formlyConfig.extensions[name]);
    }
}
FormlyFormBuilder.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
FormlyFormBuilder.ctorParameters = () => [
    { type: FormlyConfig }
];
/** @nocollapse */ FormlyFormBuilder.ngInjectableDef = defineInjectable({ factory: function FormlyFormBuilder_Factory() { return new FormlyFormBuilder(inject(FormlyConfig)); }, token: FormlyFormBuilder, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class FormlyForm {
    /**
     * @param {?} formlyBuilder
     * @param {?} formlyConfig
     * @param {?} componentFactoryResolver
     * @param {?} parentForm
     * @param {?} parentFormGroup
     * @param {?} parentFormlyForm
     */
    constructor(formlyBuilder, formlyConfig, componentFactoryResolver, parentForm, parentFormGroup, parentFormlyForm) {
        this.formlyBuilder = formlyBuilder;
        this.formlyConfig = formlyConfig;
        this.componentFactoryResolver = componentFactoryResolver;
        this.parentForm = parentForm;
        this.parentFormGroup = parentFormGroup;
        this.parentFormlyForm = parentFormlyForm;
        this.model = {};
        this.form = new FormGroup({});
        this.fields = [];
        this.modelChange = new EventEmitter();
        /**
         * \@internal
         */
        this.isRoot = true;
        this.modelChangeSubs = [];
        this.enableCheckExprDebounce = false;
        this.checkExpressionChange$ = this.modelChange.pipe(debounceTime(this.enableCheckExprDebounce ? 100 : 0), tap(() => {
            this.enableCheckExprDebounce = true;
            this.checkExpressionChange();
            this.enableCheckExprDebounce = false;
        })).subscribe();
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.checkExpressionChange();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.fields || this.fields.length === 0 || !this.isRoot) {
            return;
        }
        if (changes.fields || changes.form || changes.model) {
            this.model = this.model || {};
            this.form = this.form || (new FormGroup({}));
            this.setOptions();
            this.clearModelSubscriptions();
            this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);
            this.trackModelChanges(this.fields);
            this.options.updateInitialValue();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.clearModelSubscriptions();
        this.checkExpressionChange$.unsubscribe();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    changeModel(event) {
        assignModelValue(this.model, event.key, event.value);
        this.modelChange.emit(this.model);
    }
    /**
     * @return {?}
     */
    setOptions() {
        this.options = this.options || {};
        this.options.formState = this.options.formState || {};
        if (!this.options.showError) {
            this.options.showError = this.formlyConfig.extras.showError;
        }
        if (!this.options.fieldChanges) {
            this.options.fieldChanges = new Subject();
        }
        if (!this.options.resetModel) {
            this.options.resetModel = (model) => {
                model = isNullOrUndefined(model) ? this.initialModel : model;
                if (this.model) {
                    Object.keys(this.model).forEach(k => delete this.model[k]);
                    Object.assign(this.model, model || {});
                }
                ((/** @type {?} */ (this.options)))._buildForm();
                // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form
                // but only when the current component is a root one.
                if (!this.parentFormlyForm && this.options.parentForm && this.options.parentForm.control === this.form) {
                    this.options.parentForm.resetForm(model);
                }
                else {
                    this.form.reset(model);
                }
            };
        }
        if (!this.options.parentForm) {
            this.options.parentForm = this.parentFormGroup || this.parentForm;
        }
        if (this.options.parentForm) {
            /** @type {?} */
            let submitted = this.options.parentForm.submitted;
            Object.defineProperty(this.options.parentForm, 'submitted', {
                get: () => submitted,
                set: value => {
                    submitted = value;
                    ((/** @type {?} */ (this.options)))._markForCheck({
                        fieldGroup: this.fields,
                        model: this.model,
                        formControl: this.form,
                        options: this.options,
                    });
                },
            });
        }
        if (!this.options.updateInitialValue) {
            this.options.updateInitialValue = () => this.initialModel = reverseDeepMerge({}, this.model);
        }
        if (!((/** @type {?} */ (this.options)))._buildForm) {
            ((/** @type {?} */ (this.options)))._buildForm = () => {
                this.clearModelSubscriptions();
                this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);
                this.trackModelChanges(this.fields);
            };
        }
        if (!((/** @type {?} */ (this.options)))._markForCheck) {
            ((/** @type {?} */ (this.options)))._markForCheck = (field) => {
                if (field._componentRefs) {
                    field._componentRefs.forEach(ref => ref.changeDetectorRef.markForCheck());
                }
                if (field.fieldGroup) {
                    field.fieldGroup.forEach(f => ((/** @type {?} */ (this.options)))._markForCheck(f));
                }
            };
        }
        if (!((/** @type {?} */ (this.options)))._componentFactoryResolver) {
            ((/** @type {?} */ (this.options)))._componentFactoryResolver = this.componentFactoryResolver;
        }
    }
    /**
     * @return {?}
     */
    checkExpressionChange() {
        if (this.isRoot && ((/** @type {?} */ (this.options)))._checkField) {
            ((/** @type {?} */ (this.options)))._checkField({
                fieldGroup: this.fields,
                model: this.model,
                formControl: this.form,
                options: this.options,
            });
        }
    }
    /**
     * @param {?} fields
     * @param {?=} rootKey
     * @return {?}
     */
    trackModelChanges(fields, rootKey = []) {
        fields.forEach(field => {
            if (field.key && field.type && !field.fieldGroup) {
                /** @type {?} */
                const valueChanges = field.formControl.valueChanges.pipe(field.modelOptions.debounce && field.modelOptions.debounce.default
                    ? debounceTime(field.modelOptions.debounce.default)
                    : tap(() => { }), map(value => {
                    if (field.parsers && field.parsers.length > 0) {
                        field.parsers.forEach(parserFn => value = parserFn(value));
                    }
                    return value;
                }), tap(value => this.changeModel({ key: [...rootKey, field.key].join('.'), value })));
                this.modelChangeSubs.push(valueChanges.subscribe());
            }
            if (field.fieldGroup && field.fieldGroup.length > 0) {
                this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, field.key] : rootKey);
            }
        });
    }
    /**
     * @return {?}
     */
    clearModelSubscriptions() {
        this.modelChangeSubs.forEach(sub => sub.unsubscribe());
        this.modelChangeSubs = [];
    }
}
FormlyForm.decorators = [
    { type: Component, args: [{
                selector: 'formly-form',
                template: `
    <formly-field *ngFor="let field of fields"
      hide-deprecation
      [form]="field.form"
      [options]="field.options"
      [model]="field.model"
      [field]="field">
    </formly-field>
    <ng-content></ng-content>
  `
            }] }
];
/** @nocollapse */
FormlyForm.ctorParameters = () => [
    { type: FormlyFormBuilder },
    { type: FormlyConfig },
    { type: ComponentFactoryResolver },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }] },
    { type: FormlyForm, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
FormlyForm.propDecorators = {
    model: [{ type: Input }],
    form: [{ type: Input }],
    fields: [{ type: Input }],
    options: [{ type: Input }],
    modelChange: [{ type: Output }],
    isRoot: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class FormlyField {
    /**
     * @param {?} formlyConfig
     * @param {?} componentFactoryResolver
     * @param {?} hideDeprecation
     */
    constructor(formlyConfig, componentFactoryResolver, 
    // tslint:disable-next-line
    hideDeprecation) {
        this.formlyConfig = formlyConfig;
        this.componentFactoryResolver = componentFactoryResolver;
        this.className = '';
        this.warnDeprecation = false;
        this.modelChange = new EventEmitter();
        this.warnDeprecation = hideDeprecation === null;
    }
    /**
     * @param {?} m
     * @return {?}
     */
    set model(m) {
        this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);
    }
    /**
     * @param {?} form
     * @return {?}
     */
    set form(form) {
        this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);
    }
    /**
     * @return {?}
     */
    get componentRefs() {
        if (!((/** @type {?} */ (this.field)))._componentRefs) {
            defineHiddenProp(this.field, '_componentRefs', []);
        }
        return ((/** @type {?} */ (this.field)))._componentRefs;
    }
    /**
     * @param {?} refs
     * @return {?}
     */
    set componentRefs(refs) {
        ((/** @type {?} */ (this.field)))._componentRefs = refs;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.triggerHook('afterContentInit');
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.triggerHook('afterContentChecked');
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.triggerHook('afterViewInit');
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        this.triggerHook('afterViewChecked');
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.triggerHook('doCheck');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.triggerHook('onInit');
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.field) {
            this.renderField(this.field, this.containerRef);
        }
        this.triggerHook('onChanges', changes);
        this.componentRefs.forEach(ref => {
            Object.assign(ref.instance, { field: this.field });
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.triggerHook('onDestroy');
        this.componentRefs.forEach(componentRef => componentRef.destroy());
        this.componentRefs = [];
    }
    /**
     * @param {?} field
     * @param {?} containerRef
     * @return {?}
     */
    renderField(field, containerRef) {
        this.componentRefs.forEach(componentRef => componentRef.destroy());
        this.componentRefs = [];
        /** @type {?} */
        const wrappers = (/** @type {?} */ ((field.wrappers || []).map(wrapperName => this.formlyConfig.getWrapper(wrapperName))));
        [...wrappers, Object.assign({}, this.formlyConfig.getType(field.type), { componentFactory: ((/** @type {?} */ (field)))._componentFactory })].forEach(({ component, componentRef }) => {
            /** @type {?} */
            const ref = componentRef ? componentRef : containerRef.createComponent(this.componentFactoryResolver.resolveComponentFactory(component));
            Object.assign(ref.instance, { field });
            this.componentRefs.push(ref);
            containerRef = ref.instance.fieldComponent;
        });
    }
    /**
     * @param {?} name
     * @param {?=} changes
     * @return {?}
     */
    triggerHook(name, changes) {
        if (this.field.hooks && this.field.hooks[name]) {
            if (!changes || changes.field) {
                this.field.hooks[name](this.field);
            }
        }
        if (this.field.lifecycle && this.field.lifecycle[name]) {
            this.field.lifecycle[name](this.field.form, this.field, this.field.model, this.field.options);
        }
    }
}
FormlyField.decorators = [
    { type: Component, args: [{
                selector: 'formly-field',
                template: `<ng-template #container></ng-template>`,
                host: {
                    '[style.display]': 'field.hide ? "none":""',
                    '[class]': 'field.className? field.className : className',
                }
            }] }
];
/** @nocollapse */
FormlyField.ctorParameters = () => [
    { type: FormlyConfig },
    { type: ComponentFactoryResolver },
    { type: undefined, decorators: [{ type: Attribute, args: ['hide-deprecation',] }] }
];
FormlyField.propDecorators = {
    field: [{ type: Input }],
    className: [{ type: Input, args: ['class',] }],
    model: [{ type: Input }],
    form: [{ type: Input }],
    options: [{ type: Input }],
    modelChange: [{ type: Output }],
    containerRef: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class FormlyAttributes {
    /**
     * @param {?} renderer
     * @param {?} elementRef
     */
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFocus($event) {
        this.field.focus = true;
        if (this.to.focus) {
            this.to.focus(this.field, $event);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBlur($event) {
        this.field.focus = false;
        if (this.to.blur) {
            this.to.blur(this.field, $event);
        }
    }
    /**
     * @return {?}
     */
    get to() {
        return this.field.templateOptions || {};
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.field) {
            /** @type {?} */
            const fieldChanges = changes.field;
            this.renderer.setAttribute(this.elementRef.nativeElement, 'id', this.field.id);
            if (this.to && this.to.attributes) {
                this.setAttributes(this.to.attributes);
                Object.defineProperty(this.to, 'attributes', {
                    get: () => this.to.__attributes__,
                    set: attributes => this.setAttributes(attributes),
                    enumerable: true,
                    configurable: true,
                });
            }
            if ((fieldChanges.previousValue || {}).focus !== (fieldChanges.currentValue || {}).focus && this.elementRef.nativeElement.focus) {
                this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();
            }
        }
    }
    /**
     * @param {?} attributes
     * @return {?}
     */
    setAttributes(attributes) {
        if (this.to.__attributes__ && this.to.__attributes__ !== attributes) {
            Object.keys(this.to.__attributes__).forEach(name => this.renderer.removeAttribute(this.elementRef.nativeElement, name));
        }
        this.to.__attributes__ = attributes;
        Object.keys(attributes).forEach(name => this.renderer.setAttribute(this.elementRef.nativeElement, name, (/** @type {?} */ (attributes[name]))));
    }
}
FormlyAttributes.decorators = [
    { type: Directive, args: [{
                selector: '[formlyAttributes]',
                host: {
                    '[attr.name]': 'field.name',
                    '[attr.placeholder]': 'to.placeholder',
                    '[attr.tabindex]': 'to.tabindex || 0',
                    '[attr.readonly]': 'to.readonly',
                    '[attr.step]': 'to.step',
                    '(keyup)': 'to.keyup && to.keyup(field, $event)',
                    '(keydown)': 'to.keydown && to.keydown(field, $event)',
                    '(click)': 'to.click && to.click(field, $event)',
                    '(change)': 'to.change && to.change(field, $event)',
                    '(keypress)': 'to.keypress && to.keypress(field, $event)',
                },
            },] }
];
/** @nocollapse */
FormlyAttributes.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
FormlyAttributes.propDecorators = {
    field: [{ type: Input, args: ['formlyAttributes',] }],
    onFocus: [{ type: HostListener, args: ['focus', ['$event'],] }],
    onBlur: [{ type: HostListener, args: ['blur', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template F
 */
class FieldType {
    /**
     * @return {?}
     */
    get model() { return this.field.model; }
    /**
     * @param {?} m
     * @return {?}
     */
    set model(m) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }
    /**
     * @return {?}
     */
    get form() { return (/** @type {?} */ (this.field.parent.formControl)); }
    /**
     * @param {?} form
     * @return {?}
     */
    set form(form) { console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }
    /**
     * @return {?}
     */
    get options() { return this.field.options; }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) { console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }
    /**
     * @return {?}
     */
    get key() { return this.field.key; }
    /**
     * @return {?}
     */
    get formControl() { return this.field.formControl; }
    /**
     * @return {?}
     */
    get to() { return this.field.templateOptions; }
    /**
     * @return {?}
     */
    get showError() { return this.options.showError(this); }
    /**
     * @return {?}
     */
    get id() { return this.field.id; }
    /**
     * @return {?}
     */
    get formState() { return this.options.formState || {}; }
}
FieldType.propDecorators = {
    field: [{ type: Input }],
    model: [{ type: Input }],
    form: [{ type: Input }],
    options: [{ type: Input }]
};
/**
 * @deprecated use `FieldType` instead
 * @abstract
 */
class Field extends FieldType {
    constructor() {
        super();
        console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template F
 */
class FieldArrayType extends FieldType {
    // tslint:disable-next-line
    /**
     * @param {?} builder
     */
    constructor(builder) {
        super();
    }
    /**
     * @param {?=} i
     * @param {?=} initialModel
     * @return {?}
     */
    add(i, initialModel) {
        i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;
        this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);
        ((/** @type {?} */ (this.options)))._buildForm();
    }
    /**
     * @param {?} i
     * @return {?}
     */
    remove(i) {
        this.model.splice(i, 1);
        ((/** @type {?} */ (this.options)))._buildForm();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @abstract
 * @template F
 */
class FieldWrapper extends FieldType {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class FormlyGroup extends FieldType {
}
FormlyGroup.decorators = [
    { type: Component, args: [{
                selector: 'formly-group',
                template: `
    <formly-form
      [fields]="field.fieldGroup"
      [isRoot]="false"
      [model]="field.model"
      [form]="field.formControl"
      [options]="options"
      [ngClass]="field.fieldGroupClassName">
      <ng-content></ng-content>
    </formly-form>
  `
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class FormlyValidationMessage {
    /**
     * @param {?} formlyConfig
     */
    constructor(formlyConfig) {
        this.formlyConfig = formlyConfig;
    }
    /**
     * @return {?}
     */
    get errorMessage() {
        /** @type {?} */
        const fieldForm = this.field.formControl;
        for (let error in fieldForm.errors) {
            if (fieldForm.errors.hasOwnProperty(error)) {
                /** @type {?} */
                let message = this.formlyConfig.getValidatorMessage(error);
                if (isObject(fieldForm.errors[error])) {
                    if (fieldForm.errors[error].errorPath) {
                        return;
                    }
                    if (fieldForm.errors[error].message) {
                        message = fieldForm.errors[error].message;
                    }
                }
                if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {
                    message = this.field.validation.messages[error];
                }
                if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {
                    message = this.field.validators[error].message;
                }
                if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {
                    message = this.field.asyncValidators[error].message;
                }
                if (typeof message === 'function') {
                    return message(fieldForm.errors[error], this.field);
                }
                return message;
            }
        }
    }
}
FormlyValidationMessage.decorators = [
    { type: Component, args: [{
                selector: 'formly-validation-message',
                template: `{{ errorMessage }}`
            }] }
];
/** @nocollapse */
FormlyValidationMessage.ctorParameters = () => [
    { type: FormlyConfig }
];
FormlyValidationMessage.propDecorators = {
    field: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class FormlyTemplateType extends FieldType {
}
FormlyTemplateType.decorators = [
    { type: Component, args: [{
                selector: 'formly-template',
                template: `<div [innerHtml]="field.template"></div>`
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @param {?} expression
 * @param {?} argNames
 * @return {?}
 */
function evalStringExpression(expression, argNames) {
    try {
        return (/** @type {?} */ (Function(...argNames, `return ${expression};`)));
    }
    catch (error) {
        console.error(error);
    }
}
/**
 * @param {?} expression
 * @param {?} argNames
 * @return {?}
 */
function evalExpressionValueSetter(expression, argNames) {
    try {
        return (/** @type {?} */ (Function(...argNames, `${expression} = expressionValue;`)));
    }
    catch (error) {
        console.error(error);
    }
}
/**
 * @param {?} expression
 * @param {?} thisArg
 * @param {?} argVal
 * @return {?}
 */
function evalExpression(expression, thisArg, argVal) {
    if (expression instanceof Function) {
        return expression.apply(thisArg, argVal);
    }
    else {
        return expression ? true : false;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * \@experimental
 */
class FieldExpressionExtension {
    /**
     * @param {?} field
     * @return {?}
     */
    prePopulate(field) {
        if (field.parent || field.options._checkField) {
            return;
        }
        field.options._checkField = (f, ignoreCache) => this._checkField(f, ignoreCache);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    onPopulate(field) {
        if (!field.parent || field._expressionProperties) {
            return;
        }
        // cache built expression
        defineHiddenProp(field, '_expressionProperties', {});
        if (field.expressionProperties) {
            for (const key in field.expressionProperties) {
                /** @type {?} */
                const expressionProperty = field.expressionProperties[key];
                /** @type {?} */
                const expressionValueSetter = evalExpressionValueSetter(`field.${key}`, ['expressionValue', 'model', 'field']);
                if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {
                    field._expressionProperties[key] = {
                        expression: this._evalExpression(expressionProperty, field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')
                            ? () => field.parent.templateOptions.disabled
                            : undefined),
                        expressionValueSetter,
                    };
                    if (key === 'templateOptions.disabled') {
                        Object.defineProperty(field._expressionProperties[key], 'expressionValue', {
                            get: () => field.templateOptions.disabled,
                            set: () => { },
                            enumerable: true,
                            configurable: true,
                        });
                    }
                }
                else if (expressionProperty instanceof Observable) {
                    /** @type {?} */
                    const subscription = ((/** @type {?} */ (expressionProperty))).pipe(tap(v => evalExpression(expressionValueSetter, { field }, [v, field.model, field]))).subscribe();
                    /** @type {?} */
                    const onDestroy = field.hooks.onDestroy;
                    field.hooks.onDestroy = (field) => {
                        onDestroy && onDestroy(field);
                        subscription.unsubscribe();
                    };
                }
            }
        }
        if (field.hideExpression || field.parent.hideExpression) {
            // delete hide value in order to force re-evaluate it in FormlyFormExpression.
            delete field.hide;
            field.hideExpression = this._evalExpression(field.hideExpression, field.parent && field.parent.hideExpression ? () => field.parent.hide : undefined);
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    postPopulate(field) {
        if (field.parent) {
            return;
        }
        field.options._checkField(field, true);
    }
    /**
     * @param {?} expression
     * @param {?=} parentExpression
     * @return {?}
     */
    _evalExpression(expression, parentExpression) {
        expression = expression || (() => false);
        if (typeof expression === 'string') {
            expression = evalStringExpression(expression, ['model', 'formState']);
        }
        return parentExpression
            ? (model, formState) => parentExpression() || expression(model, formState)
            : expression;
    }
    /**
     * @param {?} field
     * @param {?=} ignoreCache
     * @return {?}
     */
    _checkField(field, ignoreCache = false) {
        /** @type {?} */
        let markForCheck = false;
        field.fieldGroup.forEach(f => {
            this.checkFieldExpressionChange(f, ignoreCache) && (markForCheck = true);
            this.checkFieldVisibilityChange(f, ignoreCache) && (markForCheck = true);
            if (f.fieldGroup && f.fieldGroup.length > 0) {
                this._checkField(f, ignoreCache);
            }
        });
        if (markForCheck && field.options && field.options._markForCheck) {
            field.options._markForCheck(field);
        }
    }
    /**
     * @param {?} field
     * @param {?} ignoreCache
     * @return {?}
     */
    checkFieldExpressionChange(field, ignoreCache) {
        if (!field || !field._expressionProperties) {
            return false;
        }
        /** @type {?} */
        let markForCheck = false;
        /** @type {?} */
        const expressionProperties = field._expressionProperties;
        /** @type {?} */
        const validators = FORMLY_VALIDATORS.map(v => `templateOptions.${v}`);
        for (const key in expressionProperties) {
            /** @type {?} */
            let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState]);
            if (key === 'templateOptions.disabled') {
                expressionValue = !!expressionValue;
            }
            if (ignoreCache || (expressionProperties[key].expressionValue !== expressionValue
                && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue)))) {
                markForCheck = true;
                expressionProperties[key].expressionValue = expressionValue;
                evalExpression(expressionProperties[key].expressionValueSetter, { field }, [expressionValue, field.model, field]);
                if (key.indexOf('model.') === 0) {
                    /** @type {?} */
                    const path = key.replace(/^model\./, '');
                    /** @type {?} */
                    const control = field.key && key === path ? field.formControl : field.parent.formControl.get(path);
                    if (control
                        && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))
                        && control.value !== expressionValue) {
                        control.patchValue(expressionValue);
                    }
                }
                if (validators.indexOf(key) !== -1 && field.formControl) {
                    field.formControl.updateValueAndValidity({ emitEvent: false });
                }
            }
        }
        return markForCheck;
    }
    /**
     * @param {?} field
     * @param {?} ignoreCache
     * @return {?}
     */
    checkFieldVisibilityChange(field, ignoreCache) {
        if (!field || isNullOrUndefined(field.hideExpression)) {
            return false;
        }
        /** @type {?} */
        const hideExpressionResult = !!evalExpression(field.hideExpression, { field }, [field.model, field.options.formState]);
        /** @type {?} */
        let markForCheck = false;
        if (hideExpressionResult !== field.hide || ignoreCache) {
            markForCheck = true;
            // toggle hide
            field.hide = hideExpressionResult;
            field.templateOptions.hidden = hideExpressionResult;
            if (field.formControl && field.key) {
                /** @type {?} */
                const parent = this.fieldParentFormControl(field);
                if (parent) {
                    /** @type {?} */
                    const control = parent.get(`${this.fieldKey(field)}`);
                    if (hideExpressionResult === true && control) {
                        removeFieldControl(parent, this.fieldKey(field));
                    }
                    else if (hideExpressionResult === false && !control) {
                        this.addFieldControl(parent, field);
                    }
                }
            }
            if (field.options.fieldChanges) {
                field.options.fieldChanges.next((/** @type {?} */ ({ field: field, type: 'hidden', value: hideExpressionResult })));
            }
        }
        return markForCheck;
    }
    /**
     * @param {?} parent
     * @param {?} field
     * @return {?}
     */
    addFieldControl(parent, field) {
        /** @type {?} */
        const fieldModel = getFieldValue(field);
        if (!(isNullOrUndefined(field.formControl.value) && isNullOrUndefined(fieldModel))
            && field.formControl.value !== fieldModel) {
            field.formControl.patchValue(fieldModel, { emitEvent: false });
        }
        if (parent instanceof FormArray) {
            parent.push(field.formControl);
        }
        else if (parent instanceof FormGroup) {
            parent.addControl(`${this.fieldKey(field)}`, field.formControl);
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    fieldParentFormControl(field) {
        /** @type {?} */
        const paths = getKeyPath(field);
        paths.pop(); // remove last path
        return (/** @type {?} */ ((paths.length > 0 ? field.parent.formControl.get(paths) : field.parent.formControl)));
    }
    /**
     * @param {?} field
     * @return {?}
     */
    fieldKey(field) {
        return getKeyPath(field).pop();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * \@experimental
 */
class FieldValidationExtension {
    /**
     * @param {?} formlyConfig
     */
    constructor(formlyConfig) {
        this.formlyConfig = formlyConfig;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    onPopulate(field) {
        this.initFieldValidation(field);
        this.initFieldAsyncValidation(field);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    initFieldValidation(field) {
        if (field._validators) {
            return;
        }
        defineHiddenProp(field, '_validators', []);
        this.initPredefinedFieldValidation(field);
        if (field.validators) {
            for (const validatorName in field.validators) {
                if (validatorName !== 'validation') {
                    /** @type {?} */
                    let validator = field.validators[validatorName];
                    /** @type {?} */
                    let errorPath;
                    /** @type {?} */
                    let message;
                    if (isObject(validator)) {
                        errorPath = validator.errorPath;
                        message = validator.message;
                        validator = validator.expression;
                    }
                    field._validators.push((control) => {
                        /** @type {?} */
                        const isValid = validator(control, field);
                        if (errorPath && field.formControl && field.formControl.get(errorPath)) {
                            if (!isValid) {
                                field.formControl.get(errorPath).setErrors(Object.assign({}, (field.formControl.get(errorPath).errors || {}), { [validatorName]: { message } }));
                            }
                            else {
                                /** @type {?} */
                                const errors = (field.formControl.get(errorPath).errors || {});
                                delete errors[validatorName];
                                field.formControl.get(errorPath).setErrors(Object.keys(errors).length === 0 ? null : errors);
                            }
                        }
                        return isValid ? null : { [validatorName]: errorPath ? { errorPath } : true };
                    });
                }
                else {
                    if (!Array.isArray(field.validators.validation)) {
                        field.validators.validation = [field.validators.validation];
                    }
                    field.validators.validation
                        .forEach((validator) => field._validators.push(this.wrapNgValidatorFn(field, validator)));
                }
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    initFieldAsyncValidation(field) {
        if (field._asyncValidators) {
            return;
        }
        defineHiddenProp(field, '_asyncValidators', []);
        if (field.asyncValidators) {
            for (const validatorName in field.asyncValidators) {
                if (validatorName !== 'validation') {
                    /** @type {?} */
                    let validator = field.asyncValidators[validatorName];
                    if (isObject(validator)) {
                        validator = validator.expression;
                    }
                    field._asyncValidators.push((control) => new Promise((resolve) => {
                        return validator(control, field).then((result) => {
                            resolve(result ? null : { [validatorName]: true });
                        });
                    }));
                }
                else {
                    if (!Array.isArray(field.asyncValidators.validation)) {
                        field.asyncValidators.validation = [field.asyncValidators.validation];
                    }
                    field.asyncValidators.validation
                        .forEach((validator) => field._asyncValidators.push((/** @type {?} */ (this.wrapNgValidatorFn(field, validator)))));
                }
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    initPredefinedFieldValidation(field) {
        FORMLY_VALIDATORS
            .filter(opt => (field.templateOptions && field.templateOptions.hasOwnProperty(opt)) || (field.expressionProperties && field.expressionProperties[`templateOptions.${opt}`]))
            .forEach((opt) => {
            field._validators.push((control) => {
                /** @type {?} */
                const value = field.templateOptions[opt];
                if (value === false) {
                    return null;
                }
                switch (opt) {
                    case 'required':
                        return Validators.required(control);
                    case 'pattern':
                        return Validators.pattern(value)(control);
                    case 'minLength':
                        return Validators.minLength(value)(control);
                    case 'maxLength':
                        return Validators.maxLength(value)(control);
                    case 'min':
                        return Validators.min(value)(control);
                    case 'max':
                        return Validators.max(value)(control);
                }
            });
        });
    }
    /**
     * @param {?} field
     * @param {?} validator
     * @return {?}
     */
    wrapNgValidatorFn(field, validator) {
        validator = typeof validator === 'string'
            ? this.formlyConfig.getValidator(validator).validation
            : validator;
        return (control) => ((/** @type {?} */ (validator)))(control, field);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * \@experimental
 */
class FieldFormExtension {
    /**
     * @param {?} field
     * @return {?}
     */
    onPopulate(field) {
        if (field.key && field.type) {
            /** @type {?} */
            const paths = getKeyPath({ key: field.key });
            /** @type {?} */
            let rootForm = (/** @type {?} */ (field.parent.formControl));
            /** @type {?} */
            let rootModel = field.fieldGroup ? { [paths[0]]: field.model } : field.model;
            paths.forEach((path, index) => {
                // FormGroup/FormArray only allow string value for path
                /** @type {?} */
                const formPath = path.toString();
                // is last item
                if (index === paths.length - 1) {
                    this.addFormControl(rootForm, field, rootModel, formPath);
                }
                else {
                    if (!rootModel[path]) {
                        rootModel[path] = typeof path === 'string' ? {} : [];
                    }
                    this.addFormControl(rootForm, { key: formPath, fieldGroup: [], modelOptions: {}, templateOptions: {} }, rootModel, formPath);
                    rootForm = (/** @type {?} */ (rootForm.get(formPath)));
                    rootModel = rootModel[path];
                }
            });
        }
        if (field.fieldGroup && !field.formControl) {
            field.formControl = field.parent.formControl;
        }
    }
    /**
     * @param {?} form
     * @param {?} field
     * @param {?} model
     * @param {?} path
     * @return {?}
     */
    addFormControl(form, field, model, path) {
        /** @type {?} */
        const abstractControlOptions = (/** @type {?} */ ({
            validators: field._validators,
            asyncValidators: field._asyncValidators,
            updateOn: field.modelOptions.updateOn,
        }));
        /** @type {?} */
        let control;
        if (field.formControl instanceof AbstractControl || form.get((/** @type {?} */ (path)))) {
            control = field.formControl || form.get((/** @type {?} */ (path)));
            if (!(isNullOrUndefined(control.value) && isNullOrUndefined(model[path]))
                && control.value !== model[path]
                && control instanceof FormControl) {
                control.patchValue(model[path]);
            }
            if (abstractControlOptions.validators || abstractControlOptions.asyncValidators) {
                if (abstractControlOptions.validators) {
                    control.setValidators(abstractControlOptions.validators);
                }
                if (abstractControlOptions.asyncValidators) {
                    control.setAsyncValidators(abstractControlOptions.asyncValidators);
                }
                control.updateValueAndValidity();
            }
        }
        else if (field._componentFactory && field._componentFactory.component && field._componentFactory.component.createControl) {
            /** @type {?} */
            const component = field._componentFactory.component;
            console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);
            control = component.createControl(model[path], field);
        }
        else if (field.fieldGroup && !field.fieldArray) {
            control = new FormGroup({}, abstractControlOptions);
        }
        else if (field.fieldArray) {
            control = new FormArray([], abstractControlOptions);
        }
        else {
            control = new FormControl(model[path], abstractControlOptions);
        }
        if (field.templateOptions.disabled) {
            control.disable();
        }
        // Replace decorated property with a getter that returns the observable.
        // https://github.com/angular-redux/store/blob/master/src/decorators/select.ts#L79-L85
        if (delete field.templateOptions.disabled) {
            Object.defineProperty(field.templateOptions, 'disabled', {
                get: () => !field.formControl.enabled,
                set: (value) => value ? field.formControl.disable() : field.formControl.enable(),
                enumerable: true,
                configurable: true,
            });
        }
        if (field) {
            field.formControl = control;
        }
        if (form instanceof FormArray) {
            if (form.at((/** @type {?} */ (path))) !== control) {
                form.setControl((/** @type {?} */ (path)), control);
            }
        }
        else {
            if (form.get((/** @type {?} */ (path))) !== control) {
                form.setControl((/** @type {?} */ (path)), control);
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * \@experimental
 */
class CoreExtension {
    /**
     * @param {?} formlyConfig
     */
    constructor(formlyConfig) {
        this.formlyConfig = formlyConfig;
        this.formId = 0;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    prePopulate(field) {
        this.formlyConfig.createComponentInstance(field);
        this.getFieldComponentInstance(field).prePopulate();
        if (field.parent) {
            return;
        }
        /** @type {?} */
        const fieldTransforms = (field.options && field.options.fieldTransform) || this.formlyConfig.extras.fieldTransform;
        (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(fieldTransform => {
            if (fieldTransform) {
                console.warn(`NgxFormly: fieldTransform is deprecated since v5.0, use custom extension instead.`);
                /** @type {?} */
                const fieldGroup = fieldTransform(field.fieldGroup, field.model, (/** @type {?} */ (field.formControl)), field.options);
                if (!fieldGroup) {
                    throw new Error('fieldTransform must return an array of fields');
                }
            }
        });
    }
    /**
     * @param {?} field
     * @return {?}
     */
    onPopulate(field) {
        this.initFieldOptions(field);
        this.getFieldComponentInstance(field).onPopulate();
        if (field.fieldGroup) {
            field.fieldGroup.forEach((f, index) => {
                Object.defineProperty(f, 'parent', { get: () => field, configurable: true });
                Object.defineProperty(f, 'index', { get: () => index, configurable: true });
                this.formId++;
            });
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    postPopulate(field) {
        this.getFieldComponentInstance(field).postPopulate();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    initFieldOptions(field) {
        /** @type {?} */
        const root = (/** @type {?} */ (field.parent));
        if (!root) {
            return;
        }
        Object.defineProperty(field, 'form', { get: () => root.formControl, configurable: true });
        Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });
        Object.defineProperty(field, 'model', {
            get: () => field.key && field.fieldGroup ? getFieldValue(field) : root.model,
            configurable: true,
        });
        field.id = getFieldId(`formly_${this.formId}`, field, field['index']);
        field.templateOptions = field.templateOptions || {};
        field.modelOptions = field.modelOptions || {};
        field.hooks = field.hooks || {};
        if (field.lifecycle) {
            console.warn(`NgxFormly: 'lifecycle' is deprecated since v5.0, use 'hooks' instead.`);
        }
        if (field.type && field.key) {
            field.templateOptions = Object.assign({
                label: '',
                placeholder: '',
                focus: false,
            }, field.templateOptions);
        }
        if (field.template && field.type !== 'formly-template') {
            if (field.type) {
                console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);
            }
            field.type = 'formly-template';
        }
        if (field.type) {
            this.formlyConfig.getMergedField(field);
        }
        if (field.key && isUndefined(field.defaultValue) && (field.fieldGroup || field.fieldArray)) {
            field.defaultValue = field.fieldArray ? [] : {};
        }
        if (!isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {
            assignModelValue(root.model, field.key, field.defaultValue);
        }
        this.initFieldWrappers(field);
        if (field.fieldArray) {
            this.initFieldArray(field);
        }
        if (!field.type && field.fieldGroup) {
            field.type = 'formly-group';
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    initFieldArray(field) {
        field.fieldGroup = field.fieldGroup || [];
        if (field.fieldGroup.length > field.model.length) {
            for (let i = field.fieldGroup.length; i >= field.model.length; --i) {
                removeFieldControl((/** @type {?} */ (field.formControl)), i);
                field.fieldGroup.splice(i, 1);
            }
        }
        for (let i = field.fieldGroup.length; i < field.model.length; i++) {
            /** @type {?} */
            const f = Object.assign({}, clone(field.fieldArray), { key: `${i}` });
            field.fieldGroup.push(f);
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    initFieldWrappers(field) {
        field.wrappers = field.wrappers || [];
        /** @type {?} */
        const fieldTemplateManipulators = Object.assign({ preWrapper: [], postWrapper: [] }, (field.templateOptions.templateManipulators || {}));
        field.wrappers = [
            ...this.formlyConfig.templateManipulators.preWrapper.map(m => m(field)),
            ...fieldTemplateManipulators.preWrapper.map(m => m(field)),
            ...field.wrappers,
            ...this.formlyConfig.templateManipulators.postWrapper.map(m => m(field)),
            ...fieldTemplateManipulators.postWrapper.map(m => m(field)),
        ].filter((el, i, a) => el && i === a.indexOf(el));
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getFieldComponentInstance(field) {
        /** @type {?} */
        let instance = {};
        if (field._componentFactory && field._componentFactory.componentRef) {
            instance = field._componentFactory.componentRef.instance;
        }
        return {
            prePopulate: () => instance.prePopulate && instance.prePopulate(field),
            onPopulate: () => instance.onPopulate && instance.onPopulate(field),
            postPopulate: () => instance.postPopulate && instance.postPopulate(field),
        };
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @param {?} formlyConfig
 * @return {?}
 */
function defaultFormlyConfig(formlyConfig) {
    return {
        types: [
            { name: 'formly-group', component: FormlyGroup },
            { name: 'formly-template', component: FormlyTemplateType },
        ],
        extensions: [
            { name: 'core', extension: new CoreExtension(formlyConfig) },
            { name: 'field-validation', extension: new FieldValidationExtension(formlyConfig) },
            { name: 'field-form', extension: new FieldFormExtension() },
            { name: 'field-expression', extension: new FieldExpressionExtension() },
        ],
    };
}
class FormlyModule {
    /**
     * @param {?} configService
     * @param {?=} configs
     */
    constructor(configService, configs = []) {
        if (!configs) {
            return;
        }
        configs.forEach(config => configService.addConfig(config));
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config = {}) {
        return {
            ngModule: FormlyModule,
            providers: [
                { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },
                { provide: FORMLY_CONFIG, useValue: config, multi: true },
                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },
                FormlyConfig,
                FormlyFormBuilder,
            ],
        };
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    static forChild(config = {}) {
        return {
            ngModule: FormlyModule,
            providers: [
                { provide: FORMLY_CONFIG, useValue: config, multi: true },
                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },
            ],
        };
    }
}
FormlyModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FormlyForm,
                    FormlyField,
                    FormlyAttributes,
                    FormlyGroup,
                    FormlyValidationMessage,
                    FormlyTemplateType,
                ],
                entryComponents: [FormlyGroup, FormlyTemplateType],
                exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],
                imports: [CommonModule],
            },] }
];
/** @nocollapse */
FormlyModule.ctorParameters = () => [
    { type: FormlyConfig },
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [FORMLY_CONFIG,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { FormlyForm, FormlyField, FormlyAttributes, FormlyConfig, FormlyFormBuilder, FieldType, Field, FieldArrayType, FieldWrapper, FormlyModule, defineHiddenProp as ɵdefineHiddenProp, FormlyGroup as ɵc, defaultFormlyConfig as ɵb, CoreExtension as ɵf, FieldExpressionExtension as ɵi, FieldFormExtension as ɵh, FieldValidationExtension as ɵg, FORMLY_CONFIG as ɵa, FormlyTemplateType as ɵe, FormlyValidationMessage as ɵd };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZvcm1seS1jb3JlLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9Abmd4LWZvcm1seS9jb3JlL2xpYi91dGlscy50cyIsIm5nOi8vQG5neC1mb3JtbHkvY29yZS9saWIvc2VydmljZXMvZm9ybWx5LmNvbmZpZy50cyIsIm5nOi8vQG5neC1mb3JtbHkvY29yZS9saWIvc2VydmljZXMvZm9ybWx5LmZvcm0uYnVpbGRlci50cyIsIm5nOi8vQG5neC1mb3JtbHkvY29yZS9saWIvY29tcG9uZW50cy9mb3JtbHkuZm9ybS50cyIsIm5nOi8vQG5neC1mb3JtbHkvY29yZS9saWIvY29tcG9uZW50cy9mb3JtbHkuZmllbGQudHMiLCJuZzovL0BuZ3gtZm9ybWx5L2NvcmUvbGliL2NvbXBvbmVudHMvZm9ybWx5LmF0dHJpYnV0ZXMudHMiLCJuZzovL0BuZ3gtZm9ybWx5L2NvcmUvbGliL3RlbXBsYXRlcy9maWVsZC50eXBlLnRzIiwibmc6Ly9Abmd4LWZvcm1seS9jb3JlL2xpYi90ZW1wbGF0ZXMvZmllbGQtYXJyYXkudHlwZS50cyIsIm5nOi8vQG5neC1mb3JtbHkvY29yZS9saWIvdGVtcGxhdGVzL2ZpZWxkLndyYXBwZXIudHMiLCJuZzovL0BuZ3gtZm9ybWx5L2NvcmUvbGliL2NvbXBvbmVudHMvZm9ybWx5Lmdyb3VwLnRzIiwibmc6Ly9Abmd4LWZvcm1seS9jb3JlL2xpYi90ZW1wbGF0ZXMvZm9ybWx5LnZhbGlkYXRpb24tbWVzc2FnZS50cyIsIm5nOi8vQG5neC1mb3JtbHkvY29yZS9saWIvdGVtcGxhdGVzL2ZpZWxkLXRlbXBsYXRlLnR5cGUudHMiLCJuZzovL0BuZ3gtZm9ybWx5L2NvcmUvbGliL2V4dGVuc2lvbnMvZmllbGQtZXhwcmVzc2lvbi91dGlscy50cyIsIm5nOi8vQG5neC1mb3JtbHkvY29yZS9saWIvZXh0ZW5zaW9ucy9maWVsZC1leHByZXNzaW9uL2ZpZWxkLWV4cHJlc3Npb24udHMiLCJuZzovL0BuZ3gtZm9ybWx5L2NvcmUvbGliL2V4dGVuc2lvbnMvZmllbGQtdmFsaWRhdGlvbi9maWVsZC12YWxpZGF0aW9uLnRzIiwibmc6Ly9Abmd4LWZvcm1seS9jb3JlL2xpYi9leHRlbnNpb25zL2ZpZWxkLWZvcm0vZmllbGQtZm9ybS50cyIsIm5nOi8vQG5neC1mb3JtbHkvY29yZS9saWIvZXh0ZW5zaW9ucy9jb3JlL2NvcmUudHMiLCJuZzovL0BuZ3gtZm9ybWx5L2NvcmUvbGliL2NvcmUubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnIH0gZnJvbSAnLi9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgRm9ybUFycmF5LCBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWVsZElkKGZvcm1JZDogc3RyaW5nLCBmaWVsZDogRm9ybWx5RmllbGRDb25maWcsIGluZGV4OiBzdHJpbmd8bnVtYmVyKSB7XG4gIGlmIChmaWVsZC5pZCkgcmV0dXJuIGZpZWxkLmlkO1xuICBsZXQgdHlwZSA9IGZpZWxkLnR5cGU7XG4gIGlmICghdHlwZSAmJiBmaWVsZC50ZW1wbGF0ZSkgdHlwZSA9ICd0ZW1wbGF0ZSc7XG4gIHJldHVybiBbZm9ybUlkLCB0eXBlLCBmaWVsZC5rZXksIGluZGV4XS5qb2luKCdfJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRLZXlQYXRoKGZpZWxkOiB7a2V5Pzogc3RyaW5nfHN0cmluZ1tdLCBmaWVsZEdyb3VwPzogYW55LCBmaWVsZEFycmF5PzogYW55fSk6IChzdHJpbmd8bnVtYmVyKVtdIHtcbiAgLyogV2Ugc3RvcmUgdGhlIGtleVBhdGggaW4gdGhlIGZpZWxkIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGZyZXF1ZW50bHkuICovXG4gIGlmICghKDxhbnk+IGZpZWxkKVsnX2Zvcm1seUtleVBhdGgnXSB8fCAoPGFueT4gZmllbGQpWydfZm9ybWx5S2V5UGF0aCddLmtleSAhPT0gZmllbGQua2V5KSB7XG4gICAgbGV0IGtleVBhdGg6IChzdHJpbmd8bnVtYmVyKVtdID0gW107XG4gICAgaWYgKGZpZWxkLmtleSkge1xuICAgICAgLyogQWxzbyBhbGxvdyBmb3IgYW4gYXJyYXkga2V5LCBoZW5jZSB0aGUgdHlwZSBjaGVjayAgKi9cbiAgICAgIGxldCBwYXRoRWxlbWVudHMgPSB0eXBlb2YgZmllbGQua2V5ID09PSAnc3RyaW5nJyA/IGZpZWxkLmtleS5zcGxpdCgnLicpIDogZmllbGQua2V5O1xuICAgICAgZm9yIChsZXQgcGF0aEVsZW1lbnQgb2YgcGF0aEVsZW1lbnRzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGF0aEVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgLyogcmVwbGFjZSBwYXRocyBvZiB0aGUgZm9ybSBuYW1lc1syXSBieSBuYW1lcy4yLCBjZnIuIGFuZ3VsYXIgZm9ybWx5ICovXG4gICAgICAgICAgcGF0aEVsZW1lbnQgPSBwYXRoRWxlbWVudC5yZXBsYWNlKC9cXFsoXFx3KylcXF0vZywgJy4kMScpO1xuICAgICAgICAgIGtleVBhdGggPSBrZXlQYXRoLmNvbmNhdChwYXRoRWxlbWVudC5zcGxpdCgnLicpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBrZXlQYXRoLnB1c2gocGF0aEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleVBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHBhdGhFbGVtZW50ID0ga2V5UGF0aFtpXTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXRoRWxlbWVudCA9PT0gJ3N0cmluZycgJiYgL15cXGQrJC8udGVzdChwYXRoRWxlbWVudCkpICB7XG4gICAgICAgICAga2V5UGF0aFtpXSA9IHBhcnNlSW50KHBhdGhFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAoPGFueT4gZmllbGQpWydfZm9ybWx5S2V5UGF0aCddID0ge1xuICAgICAga2V5OiBmaWVsZC5rZXksXG4gICAgICBwYXRoOiBrZXlQYXRoLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gKDxhbnk+IGZpZWxkKVsnX2Zvcm1seUtleVBhdGgnXS5wYXRoLnNsaWNlKDApO1xufVxuXG5leHBvcnQgY29uc3QgRk9STUxZX1ZBTElEQVRPUlMgPSBbJ3JlcXVpcmVkJywgJ3BhdHRlcm4nLCAnbWluTGVuZ3RoJywgJ21heExlbmd0aCcsICdtaW4nLCAnbWF4J107XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25Nb2RlbFZhbHVlKG1vZGVsOiBhbnksIHBhdGg6IHN0cmluZyB8IChzdHJpbmcgfCBudW1iZXIpW10sIHZhbHVlOiBhbnkpIHtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIHBhdGggPSBnZXRLZXlQYXRoKHtrZXk6IHBhdGh9KTtcbiAgfVxuXG4gIGlmIChwYXRoLmxlbmd0aCA+IDEpIHtcbiAgICBjb25zdCBlID0gcGF0aC5zaGlmdCgpO1xuICAgIGlmICghbW9kZWxbZV0gfHwgIWlzT2JqZWN0KG1vZGVsW2VdKSkge1xuICAgICAgbW9kZWxbZV0gPSB0eXBlb2YgcGF0aFswXSA9PT0gJ3N0cmluZycgPyB7fSA6IFtdO1xuICAgIH1cbiAgICBhc3NpZ25Nb2RlbFZhbHVlKG1vZGVsW2VdLCBwYXRoLCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgbW9kZWxbcGF0aFswXV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmllbGRWYWx1ZShmaWVsZDogRm9ybWx5RmllbGRDb25maWcpOiBhbnkge1xuICBjb25zdCBwYXRocyA9IGdldEtleVBhdGgoZmllbGQpO1xuICBsZXQgbW9kZWwgPSBmaWVsZC5wYXJlbnQubW9kZWw7XG4gIHdoaWxlIChtb2RlbCAmJiBwYXRocy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgZSA9IHBhdGhzLnNoaWZ0KCk7XG4gICAgbW9kZWwgPSBtb2RlbFtlXTtcbiAgfVxuXG4gIHJldHVybiBtb2RlbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEtleShjb250cm9sS2V5OiBzdHJpbmcsIGFjdHVhbEtleTogc3RyaW5nKSB7XG4gIHJldHVybiBhY3R1YWxLZXkgPyBhY3R1YWxLZXkgKyAnLicgKyBjb250cm9sS2V5IDogY29udHJvbEtleTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJldmVyc2VEZWVwTWVyZ2UoZGVzdDogYW55LCAuLi5hcmdzOiBhbnlbXSkge1xuICBhcmdzLmZvckVhY2goc3JjID0+IHtcbiAgICBmb3IgKGxldCBzcmNBcmcgaW4gc3JjKSB7XG4gICAgICBpZiAoaXNOdWxsT3JVbmRlZmluZWQoZGVzdFtzcmNBcmddKSB8fCBpc0JsYW5rU3RyaW5nKGRlc3Rbc3JjQXJnXSkpIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oc3JjW3NyY0FyZ10pKSB7XG4gICAgICAgICAgZGVzdFtzcmNBcmddID0gc3JjW3NyY0FyZ107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVzdFtzcmNBcmddID0gY2xvbmUoc3JjW3NyY0FyZ10pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9iakFuZFNhbWVUeXBlKGRlc3Rbc3JjQXJnXSwgc3JjW3NyY0FyZ10pKSB7XG4gICAgICAgIHJldmVyc2VEZWVwTWVyZ2UoZGVzdFtzcmNBcmddLCBzcmNbc3JjQXJnXSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRlc3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZCh2YWx1ZTogYW55KSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWU6IGFueSkge1xuICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQmxhbmtTdHJpbmcodmFsdWU6IGFueSkge1xuICByZXR1cm4gdmFsdWUgPT09ICcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YodmFsdWUpID09PSAnZnVuY3Rpb24nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb2JqQW5kU2FtZVR5cGUob2JqMTogYW55LCBvYmoyOiBhbnkpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KG9iajEpICYmIGlzT2JqZWN0KG9iajIpXG4gICAgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iajEpID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqMilcbiAgICAmJiAhKEFycmF5LmlzQXJyYXkob2JqMSkgfHwgQXJyYXkuaXNBcnJheShvYmoyKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdCh4OiBhbnkpIHtcbiAgcmV0dXJuIHggIT0gbnVsbCAmJiB0eXBlb2YgeCA9PT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZSh2YWx1ZTogYW55KTogYW55IHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBSZWdFeHAgfHwgdmFsdWUgaW5zdGFuY2VvZiBPYnNlcnZhYmxlIHx8IC8qIGluc3RhbmNlb2YgU2FmZUh0bWxJbXBsICovIHZhbHVlLmNoYW5naW5nVGhpc0JyZWFrc0FwcGxpY2F0aW9uU2VjdXJpdHkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBYnN0cmFjdENvbnRyb2wpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodmFsdWUuZ2V0VGltZSgpKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS5zbGljZSgwKS5tYXAodiA9PiBjbG9uZSh2KSk7XG4gIH1cblxuICB2YWx1ZSA9IE9iamVjdC5hc3NpZ24oe30sIHZhbHVlKTtcbiAgT2JqZWN0LmtleXModmFsdWUpLmZvckVhY2goayA9PiB2YWx1ZVtrXSA9IGNsb25lKHZhbHVlW2tdKSk7XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRmllbGRDb250cm9sKGZvcm06IEZvcm1BcnJheSB8IEZvcm1Hcm91cCwga2V5OiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgaWYgKGZvcm0gaW5zdGFuY2VvZiBGb3JtQXJyYXkpIHtcbiAgICBmb3JtLnJlbW92ZUF0KGtleSBhcyBudW1iZXIpO1xuICB9IGVsc2UgaWYgKGZvcm0gaW5zdGFuY2VvZiBGb3JtR3JvdXApIHtcbiAgICBmb3JtLnJlbW92ZUNvbnRyb2woYCR7a2V5fWApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVIaWRkZW5Qcm9wKGZpZWxkLCBwcm9wLCBkZWZhdWx0VmFsdWUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpZWxkLCBwcm9wLCB7IGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICBmaWVsZFtwcm9wXSA9IGRlZmF1bHRWYWx1ZTtcbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uRXJyb3JzLCBGb3JtR3JvdXAsIEZvcm1BcnJheSwgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnLi8uLi90ZW1wbGF0ZXMvZmllbGQudHlwZSc7XG5pbXBvcnQgeyByZXZlcnNlRGVlcE1lcmdlLCBkZWZpbmVIaWRkZW5Qcm9wIH0gZnJvbSAnLi8uLi91dGlscyc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZywgRm9ybWx5Rm9ybU9wdGlvbnMsIEZvcm1seUZpZWxkQ29uZmlnQ2FjaGUgfSBmcm9tICcuLi9jb21wb25lbnRzL2Zvcm1seS5maWVsZC5jb25maWcnO1xuXG5leHBvcnQgY29uc3QgRk9STUxZX0NPTkZJRyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxGb3JtbHlDb25maWc+KCdGT1JNTFlfQ09ORklHJyk7XG5cbi8qKiBAZXhwZXJpbWVudGFsICovXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1seUV4dGVuc2lvbiB7XG4gIHByZVBvcHVsYXRlPyhmaWVsZDogRm9ybWx5RmllbGRDb25maWcpOiB2b2lkO1xuICBvblBvcHVsYXRlPyhmaWVsZDogRm9ybWx5RmllbGRDb25maWcpOiB2b2lkO1xuICBwb3N0UG9wdWxhdGU/KGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZyk6IHZvaWQ7XG59XG5cbi8qKlxuICogTWFpbnRhaW5zIGxpc3Qgb2YgZm9ybWx5IGZpZWxkIGRpcmVjdGl2ZSB0eXBlcy4gVGhpcyBjYW4gYmUgdXNlZCB0byByZWdpc3RlciBuZXcgZmllbGQgdGVtcGxhdGVzLlxuICovXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIEZvcm1seUNvbmZpZyB7XG4gIHR5cGVzOiB7W25hbWU6IHN0cmluZ106IFR5cGVPcHRpb259ID0ge307XG4gIHZhbGlkYXRvcnM6IHsgW25hbWU6IHN0cmluZ106IFZhbGlkYXRvck9wdGlvbiB9ID0ge307XG4gIHdyYXBwZXJzOiB7IFtuYW1lOiBzdHJpbmddOiBXcmFwcGVyT3B0aW9uIH0gPSB7fTtcbiAgbWVzc2FnZXM6IHsgW25hbWU6IHN0cmluZ106IHN0cmluZyB8ICgoZXJyb3I6IGFueSwgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnKSA9PiBzdHJpbmcpOyB9ID0ge307XG4gIHRlbXBsYXRlTWFuaXB1bGF0b3JzOiB7XG4gICAgcHJlV3JhcHBlcjogTWFuaXB1bGF0b3JXcmFwcGVyW107XG4gICAgcG9zdFdyYXBwZXI6IE1hbmlwdWxhdG9yV3JhcHBlcltdO1xuICB9ID0ge1xuICAgIHByZVdyYXBwZXI6IFtdLFxuICAgIHBvc3RXcmFwcGVyOiBbXSxcbiAgfTtcbiAgZXh0cmFzOiB7XG4gICAgZmllbGRUcmFuc2Zvcm0/OiAoKGZpZWxkczogRm9ybWx5RmllbGRDb25maWdbXSwgbW9kZWw6IGFueSwgZm9ybTogRm9ybUdyb3VwIHwgRm9ybUFycmF5LCBvcHRpb25zOiBGb3JtbHlGb3JtT3B0aW9ucykgPT4gRm9ybWx5RmllbGRDb25maWdbXSlbXSxcbiAgICBzaG93RXJyb3I/OiAoZmllbGQ6IEZpZWxkVHlwZSkgPT4gYm9vbGVhbjtcbiAgfSA9IHtcbiAgICBmaWVsZFRyYW5zZm9ybTogdW5kZWZpbmVkLFxuICAgIHNob3dFcnJvcjogZnVuY3Rpb24oZmllbGQ6IEZpZWxkVHlwZSkge1xuICAgICAgcmV0dXJuIGZpZWxkLmZvcm1Db250cm9sICYmIGZpZWxkLmZvcm1Db250cm9sLmludmFsaWQgJiYgKGZpZWxkLmZvcm1Db250cm9sLnRvdWNoZWQgfHwgKGZpZWxkLm9wdGlvbnMucGFyZW50Rm9ybSAmJiBmaWVsZC5vcHRpb25zLnBhcmVudEZvcm0uc3VibWl0dGVkKSB8fCAoZmllbGQuZmllbGQudmFsaWRhdGlvbiAmJiBmaWVsZC5maWVsZC52YWxpZGF0aW9uLnNob3cpKTtcbiAgICB9LFxuICB9O1xuICBleHRlbnNpb25zOiB7IFtuYW1lOiBzdHJpbmddOiBGb3JtbHlFeHRlbnNpb24gfSA9IHt9O1xuXG4gIGFkZENvbmZpZyhjb25maWc6IENvbmZpZ09wdGlvbikge1xuICAgIGlmIChjb25maWcudHlwZXMpIHtcbiAgICAgIGNvbmZpZy50eXBlcy5mb3JFYWNoKHR5cGUgPT4gdGhpcy5zZXRUeXBlKHR5cGUpKTtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy52YWxpZGF0b3JzKSB7XG4gICAgICBjb25maWcudmFsaWRhdG9ycy5mb3JFYWNoKHZhbGlkYXRvciA9PiB0aGlzLnNldFZhbGlkYXRvcih2YWxpZGF0b3IpKTtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy53cmFwcGVycykge1xuICAgICAgY29uZmlnLndyYXBwZXJzLmZvckVhY2god3JhcHBlciA9PiB0aGlzLnNldFdyYXBwZXIod3JhcHBlcikpO1xuICAgIH1cbiAgICBpZiAoY29uZmlnLm1hbmlwdWxhdG9ycykge1xuICAgICAgY29uZmlnLm1hbmlwdWxhdG9ycy5mb3JFYWNoKG1hbmlwdWxhdG9yID0+IHRoaXMuc2V0TWFuaXB1bGF0b3IobWFuaXB1bGF0b3IpKTtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy52YWxpZGF0aW9uTWVzc2FnZXMpIHtcbiAgICAgIGNvbmZpZy52YWxpZGF0aW9uTWVzc2FnZXMuZm9yRWFjaCh2YWxpZGF0aW9uID0+IHRoaXMuYWRkVmFsaWRhdG9yTWVzc2FnZSh2YWxpZGF0aW9uLm5hbWUsIHZhbGlkYXRpb24ubWVzc2FnZSkpO1xuICAgIH1cbiAgICBpZiAoY29uZmlnLmV4dGVuc2lvbnMpIHtcbiAgICAgIGNvbmZpZy5leHRlbnNpb25zLmZvckVhY2goYyA9PiB0aGlzLmV4dGVuc2lvbnNbYy5uYW1lXSA9IGMuZXh0ZW5zaW9uKTtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5leHRyYXMpIHtcbiAgICAgIHRoaXMuZXh0cmFzID0geyAuLi50aGlzLmV4dHJhcywgLi4uY29uZmlnLmV4dHJhcyB9O1xuICAgIH1cbiAgfVxuXG4gIHNldFR5cGUob3B0aW9uczogVHlwZU9wdGlvbiB8IFR5cGVPcHRpb25bXSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgICBvcHRpb25zLmZvckVhY2goKG9wdGlvbikgPT4gdGhpcy5zZXRUeXBlKG9wdGlvbikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXRoaXMudHlwZXNbb3B0aW9ucy5uYW1lXSkge1xuICAgICAgICB0aGlzLnR5cGVzW29wdGlvbnMubmFtZV0gPSA8VHlwZU9wdGlvbj57fTtcbiAgICAgIH1cbiAgICAgIHRoaXMudHlwZXNbb3B0aW9ucy5uYW1lXS5jb21wb25lbnQgPSBvcHRpb25zLmNvbXBvbmVudDtcbiAgICAgIHRoaXMudHlwZXNbb3B0aW9ucy5uYW1lXS5uYW1lID0gb3B0aW9ucy5uYW1lO1xuICAgICAgdGhpcy50eXBlc1tvcHRpb25zLm5hbWVdLmV4dGVuZHMgPSBvcHRpb25zLmV4dGVuZHM7XG4gICAgICB0aGlzLnR5cGVzW29wdGlvbnMubmFtZV0uZGVmYXVsdE9wdGlvbnMgPSBvcHRpb25zLmRlZmF1bHRPcHRpb25zO1xuICAgICAgaWYgKG9wdGlvbnMud3JhcHBlcnMpIHtcbiAgICAgICAgb3B0aW9ucy53cmFwcGVycy5mb3JFYWNoKCh3cmFwcGVyKSA9PiB0aGlzLnNldFR5cGVXcmFwcGVyKG9wdGlvbnMubmFtZSwgd3JhcHBlcikpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldFR5cGUobmFtZTogc3RyaW5nKTogVHlwZU9wdGlvbiB7XG4gICAgaWYgKCF0aGlzLnR5cGVzW25hbWVdKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFtGb3JtbHkgRXJyb3JdIFRoZXJlIGlzIG5vIHR5cGUgYnkgdGhlIG5hbWUgb2YgXCIke25hbWV9XCJgKTtcbiAgICB9XG5cbiAgICB0aGlzLm1lcmdlRXh0ZW5kZWRUeXBlKG5hbWUpO1xuXG4gICAgcmV0dXJuIHRoaXMudHlwZXNbbmFtZV07XG4gIH1cblxuICBnZXRNZXJnZWRGaWVsZChmaWVsZDogRm9ybWx5RmllbGRDb25maWcgPSB7fSk6IGFueSB7XG4gICAgY29uc3QgdHlwZSA9IHRoaXMuZ2V0VHlwZShmaWVsZC50eXBlKTtcbiAgICBpZiAodHlwZS5kZWZhdWx0T3B0aW9ucykge1xuICAgICAgcmV2ZXJzZURlZXBNZXJnZShmaWVsZCwgdHlwZS5kZWZhdWx0T3B0aW9ucyk7XG4gICAgfVxuXG4gICAgY29uc3QgZXh0ZW5kRGVmYXVsdHMgPSB0eXBlLmV4dGVuZHMgJiYgdGhpcy5nZXRUeXBlKHR5cGUuZXh0ZW5kcykuZGVmYXVsdE9wdGlvbnM7XG4gICAgaWYgKGV4dGVuZERlZmF1bHRzKSB7XG4gICAgICByZXZlcnNlRGVlcE1lcmdlKGZpZWxkLCBleHRlbmREZWZhdWx0cyk7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkICYmIGZpZWxkLm9wdGlvbnNUeXBlcykge1xuICAgICAgZmllbGQub3B0aW9uc1R5cGVzLmZvckVhY2gob3B0aW9uID0+IHtcbiAgICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB0aGlzLmdldFR5cGUob3B0aW9uKS5kZWZhdWx0T3B0aW9ucztcbiAgICAgICAgaWYgKGRlZmF1bHRPcHRpb25zKSB7XG4gICAgICAgICAgcmV2ZXJzZURlZXBNZXJnZShmaWVsZCwgZGVmYXVsdE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudEluc3RhbmNlKGZpZWxkKTtcbiAgICBjb25zdCBjb21wb25lbnRSZWYgPSAoPEZvcm1seUZpZWxkQ29uZmlnQ2FjaGU+IGZpZWxkKS5fY29tcG9uZW50RmFjdG9yeS5jb21wb25lbnRSZWY7XG4gICAgaWYgKGNvbXBvbmVudFJlZiAmJiBjb21wb25lbnRSZWYuaW5zdGFuY2UgJiYgY29tcG9uZW50UmVmLmluc3RhbmNlLmRlZmF1bHRPcHRpb25zKSB7XG4gICAgICByZXZlcnNlRGVlcE1lcmdlKGZpZWxkLCBjb21wb25lbnRSZWYuaW5zdGFuY2UuZGVmYXVsdE9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmICghZmllbGQud3JhcHBlcnMgJiYgdHlwZS53cmFwcGVycykge1xuICAgICAgZmllbGQud3JhcHBlcnMgPSBbLi4udHlwZS53cmFwcGVyc107XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlQ29tcG9uZW50SW5zdGFuY2UoZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnQ2FjaGUgPSB7fSkge1xuICAgIGlmICghZmllbGQudHlwZSB8fCBmaWVsZC5fY29tcG9uZW50RmFjdG9yeSAmJiBmaWVsZC50eXBlID09PSBmaWVsZC5fY29tcG9uZW50RmFjdG9yeS50eXBlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSB0aGlzLmdldFR5cGUoZmllbGQudHlwZSk7XG5cbiAgICBjb25zdCBfY29tcG9uZW50RmFjdG9yeVJlc29sdmVyID0gKDxhbnk+IGZpZWxkLnBhcmVudC5vcHRpb25zKS5fY29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xuICAgIGRlZmluZUhpZGRlblByb3AoZmllbGQsICdfY29tcG9uZW50RmFjdG9yeScsIHtcbiAgICAgIHR5cGU6IGZpZWxkLnR5cGUsXG4gICAgICBjb21wb25lbnQ6IHR5cGUuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50UmVmOiBfY29tcG9uZW50RmFjdG9yeVJlc29sdmVyXG4gICAgICAgID8gX2NvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeSh0eXBlLmNvbXBvbmVudCkuY3JlYXRlKF9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIuX25nTW9kdWxlLmluamVjdG9yKVxuICAgICAgICA6IG51bGwsXG4gICAgfSk7XG4gIH1cblxuICBzZXRXcmFwcGVyKG9wdGlvbnM6IFdyYXBwZXJPcHRpb24pIHtcbiAgICB0aGlzLndyYXBwZXJzW29wdGlvbnMubmFtZV0gPSBvcHRpb25zO1xuICAgIGlmIChvcHRpb25zLnR5cGVzKSB7XG4gICAgICBvcHRpb25zLnR5cGVzLmZvckVhY2goKHR5cGUpID0+IHtcbiAgICAgICAgdGhpcy5zZXRUeXBlV3JhcHBlcih0eXBlLCBvcHRpb25zLm5hbWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0V3JhcHBlcihuYW1lOiBzdHJpbmcpOiBXcmFwcGVyT3B0aW9uIHtcbiAgICBpZiAoIXRoaXMud3JhcHBlcnNbbmFtZV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgW0Zvcm1seSBFcnJvcl0gVGhlcmUgaXMgbm8gd3JhcHBlciBieSB0aGUgbmFtZSBvZiBcIiR7bmFtZX1cImApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLndyYXBwZXJzW25hbWVdO1xuICB9XG5cbiAgc2V0VHlwZVdyYXBwZXIodHlwZTogc3RyaW5nLCBuYW1lOiBzdHJpbmcpIHtcbiAgICBpZiAoIXRoaXMudHlwZXNbdHlwZV0pIHtcbiAgICAgIHRoaXMudHlwZXNbdHlwZV0gPSA8VHlwZU9wdGlvbj57fTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnR5cGVzW3R5cGVdLndyYXBwZXJzKSB7XG4gICAgICB0aGlzLnR5cGVzW3R5cGVdLndyYXBwZXJzID0gW107XG4gICAgfVxuICAgIGlmICh0aGlzLnR5cGVzW3R5cGVdLndyYXBwZXJzLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XG4gICAgICB0aGlzLnR5cGVzW3R5cGVdLndyYXBwZXJzLnB1c2gobmFtZSk7XG4gICAgfVxuICB9XG5cbiAgc2V0VmFsaWRhdG9yKG9wdGlvbnM6IFZhbGlkYXRvck9wdGlvbikge1xuICAgIHRoaXMudmFsaWRhdG9yc1tvcHRpb25zLm5hbWVdID0gb3B0aW9ucztcbiAgfVxuXG4gIGdldFZhbGlkYXRvcihuYW1lOiBzdHJpbmcpOiBWYWxpZGF0b3JPcHRpb24ge1xuICAgIGlmICghdGhpcy52YWxpZGF0b3JzW25hbWVdKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFtGb3JtbHkgRXJyb3JdIFRoZXJlIGlzIG5vIHZhbGlkYXRvciBieSB0aGUgbmFtZSBvZiBcIiR7bmFtZX1cImApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRvcnNbbmFtZV07XG4gIH1cblxuICBhZGRWYWxpZGF0b3JNZXNzYWdlKG5hbWU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nIHwgKChlcnJvcjogYW55LCBmaWVsZDogRm9ybWx5RmllbGRDb25maWcpID0+IHN0cmluZykpIHtcbiAgICB0aGlzLm1lc3NhZ2VzW25hbWVdID0gbWVzc2FnZTtcbiAgfVxuXG4gIGdldFZhbGlkYXRvck1lc3NhZ2UobmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZXNbbmFtZV07XG4gIH1cblxuICBzZXRNYW5pcHVsYXRvcihtYW5pcHVsYXRvcjogTWFuaXB1bGF0b3JPcHRpb24pIHtcbiAgICBuZXcgbWFuaXB1bGF0b3IuY2xhc3MoKVttYW5pcHVsYXRvci5tZXRob2RdKHRoaXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBtZXJnZUV4dGVuZGVkVHlwZShuYW1lOiBzdHJpbmcpIHtcbiAgICBpZiAoIXRoaXMudHlwZXNbbmFtZV0uZXh0ZW5kcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGV4dGVuZGVkVHlwZSA9IHRoaXMuZ2V0VHlwZSh0aGlzLnR5cGVzW25hbWVdLmV4dGVuZHMpO1xuICAgIGlmICghdGhpcy50eXBlc1tuYW1lXS5jb21wb25lbnQpIHtcbiAgICAgIHRoaXMudHlwZXNbbmFtZV0uY29tcG9uZW50ID0gZXh0ZW5kZWRUeXBlLmNvbXBvbmVudDtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMudHlwZXNbbmFtZV0ud3JhcHBlcnMpIHtcbiAgICAgIHRoaXMudHlwZXNbbmFtZV0ud3JhcHBlcnMgPSBleHRlbmRlZFR5cGUud3JhcHBlcnM7XG4gICAgfVxuICB9XG59XG5leHBvcnQgaW50ZXJmYWNlIFR5cGVPcHRpb24ge1xuICBuYW1lOiBzdHJpbmc7XG4gIGNvbXBvbmVudD86IGFueTtcbiAgd3JhcHBlcnM/OiBzdHJpbmdbXTtcbiAgZXh0ZW5kcz86IHN0cmluZztcbiAgZGVmYXVsdE9wdGlvbnM/OiBGb3JtbHlGaWVsZENvbmZpZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXcmFwcGVyT3B0aW9uIHtcbiAgbmFtZTogc3RyaW5nO1xuICBjb21wb25lbnQ6IGFueTtcbiAgdHlwZXM/OiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZFZhbGlkYXRvckZuIHtcbiAgKGM6IEFic3RyYWN0Q29udHJvbCwgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsaWRhdG9yT3B0aW9uIHtcbiAgbmFtZTogc3RyaW5nO1xuICB2YWxpZGF0aW9uOiBGaWVsZFZhbGlkYXRvckZuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4dGVuc2lvbk9wdGlvbiB7XG4gIG5hbWU6IHN0cmluZztcbiAgZXh0ZW5zaW9uOiBGb3JtbHlFeHRlbnNpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsaWRhdGlvbk1lc3NhZ2VPcHRpb24ge1xuICBuYW1lOiBzdHJpbmc7XG4gIG1lc3NhZ2U6IHN0cmluZyB8ICgoZXJyb3I6IGFueSwgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnKSA9PiBzdHJpbmcpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1hbmlwdWxhdG9yT3B0aW9uIHtcbiAgY2xhc3M/OiB7IG5ldyAoKTogYW55IH07XG4gIG1ldGhvZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNYW5pcHVsYXRvcldyYXBwZXIge1xuICAoZjogRm9ybWx5RmllbGRDb25maWcpOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGVtcGxhdGVNYW5pcHVsYXRvcnMge1xuICBwcmVXcmFwcGVyPzogTWFuaXB1bGF0b3JXcmFwcGVyW107XG4gIHBvc3RXcmFwcGVyPzogTWFuaXB1bGF0b3JXcmFwcGVyW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnT3B0aW9uIHtcbiAgdHlwZXM/OiBUeXBlT3B0aW9uW107XG4gIHdyYXBwZXJzPzogV3JhcHBlck9wdGlvbltdO1xuICB2YWxpZGF0b3JzPzogVmFsaWRhdG9yT3B0aW9uW107XG4gIGV4dGVuc2lvbnM/OiBFeHRlbnNpb25PcHRpb25bXTtcbiAgdmFsaWRhdGlvbk1lc3NhZ2VzPzogVmFsaWRhdGlvbk1lc3NhZ2VPcHRpb25bXTtcbiAgbWFuaXB1bGF0b3JzPzogTWFuaXB1bGF0b3JPcHRpb25bXTtcbiAgZXh0cmFzPzoge1xuICAgIGZpZWxkVHJhbnNmb3JtPzogYW55LFxuICAgIHNob3dFcnJvcj86IChmaWVsZDogRmllbGRUeXBlKSA9PiBib29sZWFuO1xuICB9O1xufVxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtQXJyYXkgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGb3JtbHlDb25maWcgfSBmcm9tICcuL2Zvcm1seS5jb25maWcnO1xuaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWcsIEZvcm1seUZvcm1PcHRpb25zLCBGb3JtbHlGaWVsZENvbmZpZ0NhY2hlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9mb3JtbHkuZmllbGQuY29uZmlnJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBGb3JtbHlGb3JtQnVpbGRlciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZm9ybWx5Q29uZmlnOiBGb3JtbHlDb25maWcpIHt9XG5cbiAgYnVpbGRGb3JtKGZvcm1Db250cm9sOiBGb3JtR3JvdXAgfCBGb3JtQXJyYXksIGZpZWxkR3JvdXA6IEZvcm1seUZpZWxkQ29uZmlnW10gPSBbXSwgbW9kZWw6IGFueSwgb3B0aW9uczogRm9ybWx5Rm9ybU9wdGlvbnMpIHtcbiAgICB0aGlzLl9idWlsZEZvcm0oeyBmaWVsZEdyb3VwLCBtb2RlbCwgZm9ybUNvbnRyb2wsIG9wdGlvbnMgfSk7XG4gIH1cblxuICBwcml2YXRlIF9idWlsZEZvcm0oZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnQ2FjaGUpIHtcbiAgICB0aGlzLmdldEV4dGVuc2lvbnMoKS5mb3JFYWNoKGV4dGVuc2lvbiA9PiBleHRlbnNpb24ucHJlUG9wdWxhdGUgJiYgZXh0ZW5zaW9uLnByZVBvcHVsYXRlKGZpZWxkKSk7XG4gICAgdGhpcy5nZXRFeHRlbnNpb25zKCkuZm9yRWFjaChleHRlbnNpb24gPT4gZXh0ZW5zaW9uLm9uUG9wdWxhdGUgJiYgZXh0ZW5zaW9uLm9uUG9wdWxhdGUoZmllbGQpKTtcblxuICAgIGlmIChmaWVsZC5maWVsZEdyb3VwKSB7XG4gICAgICBmaWVsZC5maWVsZEdyb3VwLmZvckVhY2goKGYpID0+IHRoaXMuX2J1aWxkRm9ybShmKSk7XG4gICAgfVxuXG4gICAgdGhpcy5nZXRFeHRlbnNpb25zKCkuZm9yRWFjaChleHRlbnNpb24gPT4gZXh0ZW5zaW9uLnBvc3RQb3B1bGF0ZSAmJiBleHRlbnNpb24ucG9zdFBvcHVsYXRlKGZpZWxkKSk7XG4gIH1cblxuICBwcml2YXRlIGdldEV4dGVuc2lvbnMoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZm9ybWx5Q29uZmlnLmV4dGVuc2lvbnMpLm1hcChuYW1lID0+IHRoaXMuZm9ybWx5Q29uZmlnLmV4dGVuc2lvbnNbbmFtZV0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIERvQ2hlY2ssIE9uQ2hhbmdlcywgSW5wdXQsIFNpbXBsZUNoYW5nZXMsIE9wdGlvbmFsLCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgU2tpcFNlbGYsIE9uRGVzdHJveSwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1BcnJheSwgTmdGb3JtLCBGb3JtR3JvdXBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZywgRm9ybWx5Rm9ybU9wdGlvbnMsIEZvcm1seVZhbHVlQ2hhbmdlRXZlbnQsIEZvcm1seUZvcm1PcHRpb25zQ2FjaGUgfSBmcm9tICcuL2Zvcm1seS5maWVsZC5jb25maWcnO1xuaW1wb3J0IHsgRm9ybWx5Rm9ybUJ1aWxkZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9mb3JtbHkuZm9ybS5idWlsZGVyJztcbmltcG9ydCB7IEZvcm1seUNvbmZpZyB9IGZyb20gJy4uL3NlcnZpY2VzL2Zvcm1seS5jb25maWcnO1xuaW1wb3J0IHsgYXNzaWduTW9kZWxWYWx1ZSwgaXNOdWxsT3JVbmRlZmluZWQsIHJldmVyc2VEZWVwTWVyZ2UgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Zvcm1seS1mb3JtJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8Zm9ybWx5LWZpZWxkICpuZ0Zvcj1cImxldCBmaWVsZCBvZiBmaWVsZHNcIlxuICAgICAgaGlkZS1kZXByZWNhdGlvblxuICAgICAgW2Zvcm1dPVwiZmllbGQuZm9ybVwiXG4gICAgICBbb3B0aW9uc109XCJmaWVsZC5vcHRpb25zXCJcbiAgICAgIFttb2RlbF09XCJmaWVsZC5tb2RlbFwiXG4gICAgICBbZmllbGRdPVwiZmllbGRcIj5cbiAgICA8L2Zvcm1seS1maWVsZD5cbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seUZvcm0gaW1wbGVtZW50cyBEb0NoZWNrLCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIG1vZGVsOiBhbnkgPSB7fTtcbiAgQElucHV0KCkgZm9ybTogRm9ybUdyb3VwIHwgRm9ybUFycmF5ID0gbmV3IEZvcm1Hcm91cCh7fSk7XG4gIEBJbnB1dCgpIGZpZWxkczogRm9ybWx5RmllbGRDb25maWdbXSA9IFtdO1xuICBASW5wdXQoKSBvcHRpb25zOiBGb3JtbHlGb3JtT3B0aW9ucztcbiAgQE91dHB1dCgpIG1vZGVsQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBASW5wdXQoKSBpc1Jvb3QgPSB0cnVlO1xuXG4gIHByaXZhdGUgaW5pdGlhbE1vZGVsOiBhbnk7XG4gIHByaXZhdGUgbW9kZWxDaGFuZ2VTdWJzOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gIHByaXZhdGUgZW5hYmxlQ2hlY2tFeHByRGVib3VuY2UgPSBmYWxzZTtcbiAgcHJpdmF0ZSBjaGVja0V4cHJlc3Npb25DaGFuZ2UkID0gdGhpcy5tb2RlbENoYW5nZS5waXBlKFxuICAgIGRlYm91bmNlVGltZSh0aGlzLmVuYWJsZUNoZWNrRXhwckRlYm91bmNlID8gMTAwIDogMCksXG4gICAgdGFwKCgpID0+IHtcbiAgICAgIHRoaXMuZW5hYmxlQ2hlY2tFeHByRGVib3VuY2UgPSB0cnVlO1xuICAgICAgdGhpcy5jaGVja0V4cHJlc3Npb25DaGFuZ2UoKTtcbiAgICAgIHRoaXMuZW5hYmxlQ2hlY2tFeHByRGVib3VuY2UgPSBmYWxzZTtcbiAgICB9KSxcbiAgKS5zdWJzY3JpYmUoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGZvcm1seUJ1aWxkZXI6IEZvcm1seUZvcm1CdWlsZGVyLFxuICAgIHByaXZhdGUgZm9ybWx5Q29uZmlnOiBGb3JtbHlDb25maWcsXG4gICAgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIHBhcmVudEZvcm06IE5nRm9ybSxcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIHBhcmVudEZvcm1Hcm91cDogRm9ybUdyb3VwRGlyZWN0aXZlLFxuICAgIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHByaXZhdGUgcGFyZW50Rm9ybWx5Rm9ybTogRm9ybWx5Rm9ybSxcbiAgKSB7fVxuXG4gIG5nRG9DaGVjaygpIHtcbiAgICB0aGlzLmNoZWNrRXhwcmVzc2lvbkNoYW5nZSgpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmICghdGhpcy5maWVsZHMgfHwgdGhpcy5maWVsZHMubGVuZ3RoID09PSAwIHx8ICF0aGlzLmlzUm9vdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzLmZpZWxkcyB8fCBjaGFuZ2VzLmZvcm0gfHwgY2hhbmdlcy5tb2RlbCkge1xuICAgICAgdGhpcy5tb2RlbCA9IHRoaXMubW9kZWwgfHwge307XG4gICAgICB0aGlzLmZvcm0gPSB0aGlzLmZvcm0gfHwgKG5ldyBGb3JtR3JvdXAoe30pKTtcbiAgICAgIHRoaXMuc2V0T3B0aW9ucygpO1xuICAgICAgdGhpcy5jbGVhck1vZGVsU3Vic2NyaXB0aW9ucygpO1xuICAgICAgdGhpcy5mb3JtbHlCdWlsZGVyLmJ1aWxkRm9ybSh0aGlzLmZvcm0sIHRoaXMuZmllbGRzLCB0aGlzLm1vZGVsLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgdGhpcy50cmFja01vZGVsQ2hhbmdlcyh0aGlzLmZpZWxkcyk7XG4gICAgICB0aGlzLm9wdGlvbnMudXBkYXRlSW5pdGlhbFZhbHVlKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5jbGVhck1vZGVsU3Vic2NyaXB0aW9ucygpO1xuICAgIHRoaXMuY2hlY2tFeHByZXNzaW9uQ2hhbmdlJC51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgY2hhbmdlTW9kZWwoZXZlbnQ6IHsga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkgfSkge1xuICAgIGFzc2lnbk1vZGVsVmFsdWUodGhpcy5tb2RlbCwgZXZlbnQua2V5LCBldmVudC52YWx1ZSk7XG4gICAgdGhpcy5tb2RlbENoYW5nZS5lbWl0KHRoaXMubW9kZWwpO1xuICB9XG5cbiAgc2V0T3B0aW9ucygpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgfHwge307XG5cbiAgICB0aGlzLm9wdGlvbnMuZm9ybVN0YXRlID0gdGhpcy5vcHRpb25zLmZvcm1TdGF0ZSB8fCB7fTtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93RXJyb3IpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5zaG93RXJyb3IgPSB0aGlzLmZvcm1seUNvbmZpZy5leHRyYXMuc2hvd0Vycm9yO1xuICAgIH1cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5maWVsZENoYW5nZXMpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5maWVsZENoYW5nZXMgPSBuZXcgU3ViamVjdDxGb3JtbHlWYWx1ZUNoYW5nZUV2ZW50PigpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zLnJlc2V0TW9kZWwpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5yZXNldE1vZGVsID0gKG1vZGVsID86IGFueSkgPT4ge1xuICAgICAgICBtb2RlbCA9IGlzTnVsbE9yVW5kZWZpbmVkKG1vZGVsKSA/IHRoaXMuaW5pdGlhbE1vZGVsIDogbW9kZWw7XG4gICAgICAgIGlmICh0aGlzLm1vZGVsKSB7XG4gICAgICAgICAgT2JqZWN0LmtleXModGhpcy5tb2RlbCkuZm9yRWFjaChrID0+IGRlbGV0ZSB0aGlzLm1vZGVsW2tdKTtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMubW9kZWwsIG1vZGVsIHx8IHt9KTtcbiAgICAgICAgfVxuXG4gICAgICAgICg8Rm9ybWx5Rm9ybU9wdGlvbnNDYWNoZT4gdGhpcy5vcHRpb25zKS5fYnVpbGRGb3JtKCk7XG5cbiAgICAgICAgLy8gd2Ugc2hvdWxkIGNhbGwgYE5nRm9ybTo6cmVzZXRGb3JtYCB0byBlbnN1cmUgY2hhbmdpbmcgYHN1Ym1pdHRlZGAgc3RhdGUgYWZ0ZXIgcmVzZXR0aW5nIGZvcm1cbiAgICAgICAgLy8gYnV0IG9ubHkgd2hlbiB0aGUgY3VycmVudCBjb21wb25lbnQgaXMgYSByb290IG9uZS5cbiAgICAgICAgaWYgKCF0aGlzLnBhcmVudEZvcm1seUZvcm0gJiYgdGhpcy5vcHRpb25zLnBhcmVudEZvcm0gJiYgdGhpcy5vcHRpb25zLnBhcmVudEZvcm0uY29udHJvbCA9PT0gdGhpcy5mb3JtKSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLnBhcmVudEZvcm0ucmVzZXRGb3JtKG1vZGVsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmZvcm0ucmVzZXQobW9kZWwpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zLnBhcmVudEZvcm0pIHtcbiAgICAgIHRoaXMub3B0aW9ucy5wYXJlbnRGb3JtID0gdGhpcy5wYXJlbnRGb3JtR3JvdXAgfHwgdGhpcy5wYXJlbnRGb3JtO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMucGFyZW50Rm9ybSkge1xuICAgICAgbGV0IHN1Ym1pdHRlZCA9IHRoaXMub3B0aW9ucy5wYXJlbnRGb3JtLnN1Ym1pdHRlZDtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLm9wdGlvbnMucGFyZW50Rm9ybSwgJ3N1Ym1pdHRlZCcsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBzdWJtaXR0ZWQsXG4gICAgICAgIHNldDogdmFsdWUgPT4ge1xuICAgICAgICAgIHN1Ym1pdHRlZCA9IHZhbHVlO1xuICAgICAgICAgICg8Rm9ybWx5Rm9ybU9wdGlvbnNDYWNoZT4gdGhpcy5vcHRpb25zKS5fbWFya0ZvckNoZWNrKHtcbiAgICAgICAgICAgIGZpZWxkR3JvdXA6IHRoaXMuZmllbGRzLFxuICAgICAgICAgICAgbW9kZWw6IHRoaXMubW9kZWwsXG4gICAgICAgICAgICBmb3JtQ29udHJvbDogdGhpcy5mb3JtLFxuICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMudXBkYXRlSW5pdGlhbFZhbHVlKSB7XG4gICAgICB0aGlzLm9wdGlvbnMudXBkYXRlSW5pdGlhbFZhbHVlID0gKCkgPT4gdGhpcy5pbml0aWFsTW9kZWwgPSByZXZlcnNlRGVlcE1lcmdlKHt9LCB0aGlzLm1vZGVsKTtcbiAgICB9XG5cbiAgICBpZiAoISg8Rm9ybWx5Rm9ybU9wdGlvbnNDYWNoZT4gdGhpcy5vcHRpb25zKS5fYnVpbGRGb3JtKSB7XG4gICAgICAoPEZvcm1seUZvcm1PcHRpb25zQ2FjaGU+IHRoaXMub3B0aW9ucykuX2J1aWxkRm9ybSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5jbGVhck1vZGVsU3Vic2NyaXB0aW9ucygpO1xuICAgICAgICB0aGlzLmZvcm1seUJ1aWxkZXIuYnVpbGRGb3JtKHRoaXMuZm9ybSwgdGhpcy5maWVsZHMsIHRoaXMubW9kZWwsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgIHRoaXMudHJhY2tNb2RlbENoYW5nZXModGhpcy5maWVsZHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoISg8Rm9ybWx5Rm9ybU9wdGlvbnNDYWNoZT4gdGhpcy5vcHRpb25zKS5fbWFya0ZvckNoZWNrKSB7XG4gICAgICAoPEZvcm1seUZvcm1PcHRpb25zQ2FjaGU+IHRoaXMub3B0aW9ucykuX21hcmtGb3JDaGVjayA9IChmaWVsZCkgPT4ge1xuICAgICAgICBpZiAoZmllbGQuX2NvbXBvbmVudFJlZnMpIHtcbiAgICAgICAgICBmaWVsZC5fY29tcG9uZW50UmVmcy5mb3JFYWNoKHJlZiA9PiByZWYuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpZWxkLmZpZWxkR3JvdXApIHtcbiAgICAgICAgICBmaWVsZC5maWVsZEdyb3VwLmZvckVhY2goZiA9PiAoPEZvcm1seUZvcm1PcHRpb25zQ2FjaGU+IHRoaXMub3B0aW9ucykuX21hcmtGb3JDaGVjayhmKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCEoPEZvcm1seUZvcm1PcHRpb25zQ2FjaGU+IHRoaXMub3B0aW9ucykuX2NvbXBvbmVudEZhY3RvcnlSZXNvbHZlcikge1xuICAgICAgKDxGb3JtbHlGb3JtT3B0aW9uc0NhY2hlPiB0aGlzLm9wdGlvbnMpLl9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgPSB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNoZWNrRXhwcmVzc2lvbkNoYW5nZSgpIHtcbiAgICBpZiAodGhpcy5pc1Jvb3QgJiYgKDxGb3JtbHlGb3JtT3B0aW9uc0NhY2hlPiB0aGlzLm9wdGlvbnMpLl9jaGVja0ZpZWxkKSB7XG4gICAgICAoPEZvcm1seUZvcm1PcHRpb25zQ2FjaGU+IHRoaXMub3B0aW9ucykuX2NoZWNrRmllbGQoe1xuICAgICAgICBmaWVsZEdyb3VwOiB0aGlzLmZpZWxkcyxcbiAgICAgICAgbW9kZWw6IHRoaXMubW9kZWwsXG4gICAgICAgIGZvcm1Db250cm9sOiB0aGlzLmZvcm0sXG4gICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdHJhY2tNb2RlbENoYW5nZXMoZmllbGRzOiBGb3JtbHlGaWVsZENvbmZpZ1tdLCByb290S2V5OiBzdHJpbmdbXSA9IFtdKSB7XG4gICAgZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgaWYgKGZpZWxkLmtleSAmJiBmaWVsZC50eXBlICYmICFmaWVsZC5maWVsZEdyb3VwKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlQ2hhbmdlcyA9IGZpZWxkLmZvcm1Db250cm9sLnZhbHVlQ2hhbmdlcy5waXBlKFxuICAgICAgICAgIGZpZWxkLm1vZGVsT3B0aW9ucy5kZWJvdW5jZSAmJiBmaWVsZC5tb2RlbE9wdGlvbnMuZGVib3VuY2UuZGVmYXVsdFxuICAgICAgICAgID8gZGVib3VuY2VUaW1lKGZpZWxkLm1vZGVsT3B0aW9ucy5kZWJvdW5jZS5kZWZhdWx0KVxuICAgICAgICAgIDogdGFwKCgpID0+IHt9KSxcbiAgICAgICAgICBtYXAodmFsdWUgPT4ge1xuICAgICAgICAgICAgaWYgKGZpZWxkLnBhcnNlcnMgJiYgZmllbGQucGFyc2Vycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGZpZWxkLnBhcnNlcnMuZm9yRWFjaChwYXJzZXJGbiA9PiB2YWx1ZSA9IHBhcnNlckZuKHZhbHVlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0YXAodmFsdWUgPT4gdGhpcy5jaGFuZ2VNb2RlbCh7IGtleTogWy4uLnJvb3RLZXksIGZpZWxkLmtleV0uam9pbignLicpLCB2YWx1ZSB9KSksXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5tb2RlbENoYW5nZVN1YnMucHVzaCh2YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmllbGQuZmllbGRHcm91cCAmJiBmaWVsZC5maWVsZEdyb3VwLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy50cmFja01vZGVsQ2hhbmdlcyhmaWVsZC5maWVsZEdyb3VwLCBmaWVsZC5rZXkgPyBbLi4ucm9vdEtleSwgZmllbGQua2V5XSA6IHJvb3RLZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjbGVhck1vZGVsU3Vic2NyaXB0aW9ucygpIHtcbiAgICB0aGlzLm1vZGVsQ2hhbmdlU3Vicy5mb3JFYWNoKHN1YiA9PiBzdWIudW5zdWJzY3JpYmUoKSk7XG4gICAgdGhpcy5tb2RlbENoYW5nZVN1YnMgPSBbXTtcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsXG4gIFZpZXdDb250YWluZXJSZWYsIFZpZXdDaGlsZCwgQ29tcG9uZW50UmVmLCBTaW1wbGVDaGFuZ2VzLCBBdHRyaWJ1dGUsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgRG9DaGVjaywgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGb3JtbHlDb25maWcgfSBmcm9tICcuLi9zZXJ2aWNlcy9mb3JtbHkuY29uZmlnJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnLCBGb3JtbHlGb3JtT3B0aW9ucywgRm9ybWx5RmllbGRDb25maWdDYWNoZSB9IGZyb20gJy4vZm9ybWx5LmZpZWxkLmNvbmZpZyc7XG5pbXBvcnQgeyBGaWVsZFdyYXBwZXIgfSBmcm9tICcuLi90ZW1wbGF0ZXMvZmllbGQud3JhcHBlcic7XG5pbXBvcnQgeyBkZWZpbmVIaWRkZW5Qcm9wIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JtbHktZmllbGQnLFxuICB0ZW1wbGF0ZTogYDxuZy10ZW1wbGF0ZSAjY29udGFpbmVyPjwvbmctdGVtcGxhdGU+YCxcbiAgaG9zdDoge1xuICAgICdbc3R5bGUuZGlzcGxheV0nOiAnZmllbGQuaGlkZSA/IFwibm9uZVwiOlwiXCInLFxuICAgICdbY2xhc3NdJzogJ2ZpZWxkLmNsYXNzTmFtZT8gZmllbGQuY2xhc3NOYW1lIDogY2xhc3NOYW1lJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybWx5RmllbGQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgRG9DaGVjaywgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZCwgT25EZXN0cm95IHtcbiAgQElucHV0KCkgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnO1xuICBASW5wdXQoJ2NsYXNzJykgY2xhc3NOYW1lOiBzdHJpbmcgPSAnJztcblxuICB3YXJuRGVwcmVjYXRpb24gPSBmYWxzZTtcblxuICBASW5wdXQoKSBzZXQgbW9kZWwobTogYW55KSB7XG4gICAgdGhpcy53YXJuRGVwcmVjYXRpb24gJiYgY29uc29sZS53YXJuKGBOZ3hGb3JtbHk6IHBhc3NpbmcgJ21vZGVsJyBpbnB1dCB0byAnJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9JyBjb21wb25lbnQgaXMgbm90IHJlcXVpcmVkIGFueW1vcmUsIHlvdSBtYXkgcmVtb3ZlIGl0IWApO1xuICB9XG5cbiAgQElucHV0KCkgc2V0IGZvcm0oZm9ybTogRm9ybUdyb3VwKSB7XG4gICAgdGhpcy53YXJuRGVwcmVjYXRpb24gJiYgY29uc29sZS53YXJuKGBOZ3hGb3JtbHk6IHBhc3NpbmcgJ2Zvcm0nIGlucHV0IHRvICcke3RoaXMuY29uc3RydWN0b3IubmFtZX0nIGNvbXBvbmVudCBpcyBub3QgcmVxdWlyZWQgYW55bW9yZSwgeW91IG1heSByZW1vdmUgaXQhYCk7XG4gIH1cblxuICBASW5wdXQoKSBzZXQgb3B0aW9ucyhvcHRpb25zOiBGb3JtbHlGb3JtT3B0aW9ucykge1xuICAgIHRoaXMud2FybkRlcHJlY2F0aW9uICYmIGNvbnNvbGUud2FybihgTmd4Rm9ybWx5OiBwYXNzaW5nICdvcHRpb25zJyBpbnB1dCB0byAnJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9JyBjb21wb25lbnQgaXMgbm90IHJlcXVpcmVkIGFueW1vcmUsIHlvdSBtYXkgcmVtb3ZlIGl0IWApO1xuICB9XG5cbiAgQE91dHB1dCgpIG1vZGVsQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQFZpZXdDaGlsZCgnY29udGFpbmVyJywge3JlYWQ6IFZpZXdDb250YWluZXJSZWZ9KSBjb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWY7XG5cbiAgZ2V0IGNvbXBvbmVudFJlZnMoKTogQ29tcG9uZW50UmVmPGFueT5bXSB7XG4gICAgaWYgKCEoPEZvcm1seUZpZWxkQ29uZmlnQ2FjaGU+IHRoaXMuZmllbGQpLl9jb21wb25lbnRSZWZzKSB7XG4gICAgICBkZWZpbmVIaWRkZW5Qcm9wKHRoaXMuZmllbGQsICdfY29tcG9uZW50UmVmcycsIFtdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKDxGb3JtbHlGaWVsZENvbmZpZ0NhY2hlPiB0aGlzLmZpZWxkKS5fY29tcG9uZW50UmVmcztcbiAgfVxuXG4gIHNldCBjb21wb25lbnRSZWZzKHJlZnM6IENvbXBvbmVudFJlZjxhbnk+W10pIHtcbiAgICAoPEZvcm1seUZpZWxkQ29uZmlnQ2FjaGU+IHRoaXMuZmllbGQpLl9jb21wb25lbnRSZWZzID0gcmVmcztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZm9ybWx5Q29uZmlnOiBGb3JtbHlDb25maWcsXG4gICAgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBAQXR0cmlidXRlKCdoaWRlLWRlcHJlY2F0aW9uJykgaGlkZURlcHJlY2F0aW9uLFxuICApIHtcbiAgICB0aGlzLndhcm5EZXByZWNhdGlvbiA9IGhpZGVEZXByZWNhdGlvbiA9PT0gbnVsbDtcbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLnRyaWdnZXJIb29rKCdhZnRlckNvbnRlbnRJbml0Jyk7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKSB7XG4gICAgdGhpcy50cmlnZ2VySG9vaygnYWZ0ZXJDb250ZW50Q2hlY2tlZCcpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMudHJpZ2dlckhvb2soJ2FmdGVyVmlld0luaXQnKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpIHtcbiAgICB0aGlzLnRyaWdnZXJIb29rKCdhZnRlclZpZXdDaGVja2VkJyk7XG4gIH1cblxuICBuZ0RvQ2hlY2soKSB7XG4gICAgdGhpcy50cmlnZ2VySG9vaygnZG9DaGVjaycpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy50cmlnZ2VySG9vaygnb25Jbml0Jyk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuZmllbGQpIHtcbiAgICAgIHRoaXMucmVuZGVyRmllbGQodGhpcy5maWVsZCwgdGhpcy5jb250YWluZXJSZWYpO1xuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlckhvb2soJ29uQ2hhbmdlcycsIGNoYW5nZXMpO1xuICAgIHRoaXMuY29tcG9uZW50UmVmcy5mb3JFYWNoKHJlZiA9PiB7XG4gICAgICBPYmplY3QuYXNzaWduKHJlZi5pbnN0YW5jZSwgeyBmaWVsZDogdGhpcy5maWVsZCB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMudHJpZ2dlckhvb2soJ29uRGVzdHJveScpO1xuICAgIHRoaXMuY29tcG9uZW50UmVmcy5mb3JFYWNoKGNvbXBvbmVudFJlZiA9PiBjb21wb25lbnRSZWYuZGVzdHJveSgpKTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZnMgPSBbXTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyRmllbGQoZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnLCBjb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYpIHtcbiAgICB0aGlzLmNvbXBvbmVudFJlZnMuZm9yRWFjaChjb21wb25lbnRSZWYgPT4gY29tcG9uZW50UmVmLmRlc3Ryb3koKSk7XG4gICAgdGhpcy5jb21wb25lbnRSZWZzID0gW107XG5cbiAgICBjb25zdCB3cmFwcGVycyA9IDxhbnk+KGZpZWxkLndyYXBwZXJzIHx8IFtdKS5tYXAod3JhcHBlck5hbWUgPT4gdGhpcy5mb3JtbHlDb25maWcuZ2V0V3JhcHBlcih3cmFwcGVyTmFtZSkpO1xuICAgIFsuLi53cmFwcGVycywgeyAuLi50aGlzLmZvcm1seUNvbmZpZy5nZXRUeXBlKGZpZWxkLnR5cGUpLCBjb21wb25lbnRGYWN0b3J5OiAoPGFueT4gZmllbGQpLl9jb21wb25lbnRGYWN0b3J5IH1dLmZvckVhY2goKHsgY29tcG9uZW50LCBjb21wb25lbnRSZWYgfSkgPT4ge1xuICAgICAgY29uc3QgcmVmID0gY29tcG9uZW50UmVmID8gY29tcG9uZW50UmVmIDogY29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudDxGaWVsZFdyYXBwZXI+KHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudCkpO1xuXG4gICAgICBPYmplY3QuYXNzaWduKHJlZi5pbnN0YW5jZSwgeyBmaWVsZCB9KTtcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmcy5wdXNoKHJlZik7XG4gICAgICBjb250YWluZXJSZWYgPSByZWYuaW5zdGFuY2UuZmllbGRDb21wb25lbnQ7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHRyaWdnZXJIb29rKG5hbWU6IHN0cmluZywgY2hhbmdlcz86IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAodGhpcy5maWVsZC5ob29rcyAmJiB0aGlzLmZpZWxkLmhvb2tzW25hbWVdKSB7XG4gICAgICBpZiAoIWNoYW5nZXMgfHwgY2hhbmdlcy5maWVsZCkge1xuICAgICAgICB0aGlzLmZpZWxkLmhvb2tzW25hbWVdKHRoaXMuZmllbGQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmZpZWxkLmxpZmVjeWNsZSAmJiB0aGlzLmZpZWxkLmxpZmVjeWNsZVtuYW1lXSkge1xuICAgICAgdGhpcy5maWVsZC5saWZlY3ljbGVbbmFtZV0oXG4gICAgICAgIHRoaXMuZmllbGQuZm9ybSxcbiAgICAgICAgdGhpcy5maWVsZCxcbiAgICAgICAgdGhpcy5maWVsZC5tb2RlbCxcbiAgICAgICAgdGhpcy5maWVsZC5vcHRpb25zLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBFbGVtZW50UmVmLCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnLCBGb3JtbHlUZW1wbGF0ZU9wdGlvbnMgfSBmcm9tICcuL2Zvcm1seS5maWVsZC5jb25maWcnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZm9ybWx5QXR0cmlidXRlc10nLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLm5hbWVdJzogJ2ZpZWxkLm5hbWUnLFxuICAgICdbYXR0ci5wbGFjZWhvbGRlcl0nOiAndG8ucGxhY2Vob2xkZXInLFxuICAgICdbYXR0ci50YWJpbmRleF0nOiAndG8udGFiaW5kZXggfHwgMCcsXG4gICAgJ1thdHRyLnJlYWRvbmx5XSc6ICd0by5yZWFkb25seScsXG4gICAgJ1thdHRyLnN0ZXBdJzogJ3RvLnN0ZXAnLFxuXG4gICAgJyhrZXl1cCknOiAndG8ua2V5dXAgJiYgdG8ua2V5dXAoZmllbGQsICRldmVudCknLFxuICAgICcoa2V5ZG93biknOiAndG8ua2V5ZG93biAmJiB0by5rZXlkb3duKGZpZWxkLCAkZXZlbnQpJyxcbiAgICAnKGNsaWNrKSc6ICd0by5jbGljayAmJiB0by5jbGljayhmaWVsZCwgJGV2ZW50KScsXG4gICAgJyhjaGFuZ2UpJzogJ3RvLmNoYW5nZSAmJiB0by5jaGFuZ2UoZmllbGQsICRldmVudCknLFxuICAgICcoa2V5cHJlc3MpJzogJ3RvLmtleXByZXNzICYmIHRvLmtleXByZXNzKGZpZWxkLCAkZXZlbnQpJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybWx5QXR0cmlidXRlcyBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgnZm9ybWx5QXR0cmlidXRlcycpIGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZztcblxuICBASG9zdExpc3RlbmVyKCdmb2N1cycsIFsnJGV2ZW50J10pIG9uRm9jdXMoJGV2ZW50KSB7XG4gICAgdGhpcy5maWVsZC5mb2N1cyA9IHRydWU7XG4gICAgaWYgKHRoaXMudG8uZm9jdXMpIHtcbiAgICAgIHRoaXMudG8uZm9jdXModGhpcy5maWVsZCwgJGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdibHVyJywgWyckZXZlbnQnXSkgb25CbHVyKCRldmVudCkge1xuICAgIHRoaXMuZmllbGQuZm9jdXMgPSBmYWxzZTtcbiAgICBpZiAodGhpcy50by5ibHVyKSB7XG4gICAgICB0aGlzLnRvLmJsdXIodGhpcy5maWVsZCwgJGV2ZW50KTtcbiAgICB9XG4gIH1cblxuICBnZXQgdG8oKTogRm9ybWx5VGVtcGxhdGVPcHRpb25zIHtcbiAgICByZXR1cm4gdGhpcy5maWVsZC50ZW1wbGF0ZU9wdGlvbnMgfHwge307XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICApIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmZpZWxkKSB7XG4gICAgICBjb25zdCBmaWVsZENoYW5nZXMgPSBjaGFuZ2VzLmZpZWxkO1xuXG4gICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2lkJywgdGhpcy5maWVsZC5pZCk7XG4gICAgICBpZiAodGhpcy50byAmJiB0aGlzLnRvLmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHRoaXMudG8uYXR0cmlidXRlcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnRvLCAnYXR0cmlidXRlcycsIHtcbiAgICAgICAgICBnZXQ6ICgpID0+IHRoaXMudG8uX19hdHRyaWJ1dGVzX18sXG4gICAgICAgICAgc2V0OiBhdHRyaWJ1dGVzID0+IHRoaXMuc2V0QXR0cmlidXRlcyhhdHRyaWJ1dGVzKSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICgoZmllbGRDaGFuZ2VzLnByZXZpb3VzVmFsdWUgfHwge30pLmZvY3VzICE9PSAoZmllbGRDaGFuZ2VzLmN1cnJlbnRWYWx1ZSB8fCB7fSkuZm9jdXMgJiYgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZm9jdXMpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnRbdGhpcy5maWVsZC5mb2N1cyA/ICdmb2N1cycgOiAnYmx1ciddKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAodGhpcy50by5fX2F0dHJpYnV0ZXNfXyAmJiB0aGlzLnRvLl9fYXR0cmlidXRlc19fICE9PSBhdHRyaWJ1dGVzKSB7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnRvLl9fYXR0cmlidXRlc19fKS5mb3JFYWNoKG5hbWUgPT4gdGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIG5hbWUpKTtcbiAgICB9XG5cbiAgICB0aGlzLnRvLl9fYXR0cmlidXRlc19fID0gYXR0cmlidXRlcztcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKG5hbWUgPT4gdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoXG4gICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgbmFtZSwgYXR0cmlidXRlc1tuYW1lXSBhcyBzdHJpbmcsXG4gICAgKSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZyB9IGZyb20gJy4uL2NvbXBvbmVudHMvZm9ybWx5LmZpZWxkLmNvbmZpZyc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGaWVsZFR5cGU8RiBleHRlbmRzIEZvcm1seUZpZWxkQ29uZmlnID0gRm9ybWx5RmllbGRDb25maWc+IHtcbiAgQElucHV0KCkgZmllbGQ6IEY7XG4gIGRlZmF1bHRPcHRpb25zPzogRjtcblxuICBASW5wdXQoKVxuICBnZXQgbW9kZWwoKSB7IHJldHVybiB0aGlzLmZpZWxkLm1vZGVsOyB9XG4gIHNldCBtb2RlbChtOiBhbnkpIHsgY29uc29sZS53YXJuKGBOZ3hGb3JtbHk6IHBhc3NpbmcgJ21vZGVsJyBpbnB1dCB0byAnJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9JyBjb21wb25lbnQgaXMgbm90IHJlcXVpcmVkIGFueW1vcmUsIHlvdSBtYXkgcmVtb3ZlIGl0IWApOyB9XG5cbiAgQElucHV0KClcbiAgZ2V0IGZvcm0oKSB7IHJldHVybiA8Rm9ybUdyb3VwPiB0aGlzLmZpZWxkLnBhcmVudC5mb3JtQ29udHJvbDsgfVxuICBzZXQgZm9ybShmb3JtKSB7IGNvbnNvbGUud2FybihgTmd4Rm9ybWx5OiBwYXNzaW5nICdmb3JtJyBpbnB1dCB0byAnJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9JyBjb21wb25lbnQgaXMgbm90IHJlcXVpcmVkIGFueW1vcmUsIHlvdSBtYXkgcmVtb3ZlIGl0IWApOyB9XG5cbiAgQElucHV0KClcbiAgZ2V0IG9wdGlvbnMoKTogRlsnb3B0aW9ucyddIHsgcmV0dXJuIHRoaXMuZmllbGQub3B0aW9uczsgfVxuICBzZXQgb3B0aW9ucyhvcHRpb25zOiBGWydvcHRpb25zJ10pIHsgY29uc29sZS53YXJuKGBOZ3hGb3JtbHk6IHBhc3NpbmcgJ29wdGlvbnMnIGlucHV0IHRvICcke3RoaXMuY29uc3RydWN0b3IubmFtZX0nIGNvbXBvbmVudCBpcyBub3QgcmVxdWlyZWQgYW55bW9yZSwgeW91IG1heSByZW1vdmUgaXQhYCk7IH1cblxuICBnZXQga2V5KCkgeyByZXR1cm4gdGhpcy5maWVsZC5rZXk7IH1cblxuICBnZXQgZm9ybUNvbnRyb2woKTogRlsnZm9ybUNvbnRyb2wnXSB7IHJldHVybiB0aGlzLmZpZWxkLmZvcm1Db250cm9sOyB9XG5cbiAgZ2V0IHRvKCk6IEZbJ3RlbXBsYXRlT3B0aW9ucyddIHsgcmV0dXJuIHRoaXMuZmllbGQudGVtcGxhdGVPcHRpb25zOyB9XG5cbiAgZ2V0IHNob3dFcnJvcigpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMub3B0aW9ucy5zaG93RXJyb3IodGhpcyk7IH1cblxuICBnZXQgaWQoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuZmllbGQuaWQ7IH1cblxuICBnZXQgZm9ybVN0YXRlKCkgeyByZXR1cm4gdGhpcy5vcHRpb25zLmZvcm1TdGF0ZSB8fCB7fTsgfVxufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSBgRmllbGRUeXBlYCBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGaWVsZCBleHRlbmRzIEZpZWxkVHlwZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgY29uc29sZS53YXJuKGBOZ3hGb3JtbHk6ICdGaWVsZCcgaGFzIGJlZW4gcmVuYW1lZCB0byAnRmllbGRUeXBlJywgZXh0ZW5kICdGaWVsZFR5cGUnIGluc3RlYWQuYCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEZvcm1BcnJheSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJy4vZmllbGQudHlwZSc7XG5pbXBvcnQgeyBjbG9uZSwgaXNOdWxsT3JVbmRlZmluZWQgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBGb3JtbHlGb3JtQnVpbGRlciB9IGZyb20gJy4uL3NlcnZpY2VzL2Zvcm1seS5mb3JtLmJ1aWxkZXInO1xuaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWcgfSBmcm9tICcuLi9jb21wb25lbnRzL2Zvcm1seS5maWVsZC5jb25maWcnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRmllbGRBcnJheVR5cGU8RiBleHRlbmRzIEZvcm1seUZpZWxkQ29uZmlnID0gRm9ybWx5RmllbGRDb25maWc+IGV4dGVuZHMgRmllbGRUeXBlPEY+IHtcbiAgZm9ybUNvbnRyb2w6IEZvcm1BcnJheTtcblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgY29uc3RydWN0b3IoYnVpbGRlcjogRm9ybWx5Rm9ybUJ1aWxkZXIpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgYWRkKGk/OiBudW1iZXIsIGluaXRpYWxNb2RlbD86IGFueSkge1xuICAgIGkgPSBpc051bGxPclVuZGVmaW5lZChpKSA/IHRoaXMuZmllbGQuZmllbGRHcm91cC5sZW5ndGggOiBpO1xuICAgIHRoaXMubW9kZWwuc3BsaWNlKGksIDAsIGluaXRpYWxNb2RlbCA/IGNsb25lKGluaXRpYWxNb2RlbCkgOiB1bmRlZmluZWQpO1xuXG4gICAgKDxhbnk+IHRoaXMub3B0aW9ucykuX2J1aWxkRm9ybSgpO1xuICB9XG5cbiAgcmVtb3ZlKGk6IG51bWJlcikge1xuICAgIHRoaXMubW9kZWwuc3BsaWNlKGksIDEpO1xuXG4gICAgKDxhbnk+IHRoaXMub3B0aW9ucykuX2J1aWxkRm9ybSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICcuL2ZpZWxkLnR5cGUnO1xuaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWcgfSBmcm9tICcuLi9jb21wb25lbnRzL2Zvcm1seS5maWVsZC5jb25maWcnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRmllbGRXcmFwcGVyPEYgZXh0ZW5kcyBGb3JtbHlGaWVsZENvbmZpZyA9IEZvcm1seUZpZWxkQ29uZmlnPiBleHRlbmRzIEZpZWxkVHlwZTxGPiB7XG4gIGZpZWxkQ29tcG9uZW50OiBWaWV3Q29udGFpbmVyUmVmO1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICcuLi90ZW1wbGF0ZXMvZmllbGQudHlwZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Zvcm1seS1ncm91cCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGZvcm1seS1mb3JtXG4gICAgICBbZmllbGRzXT1cImZpZWxkLmZpZWxkR3JvdXBcIlxuICAgICAgW2lzUm9vdF09XCJmYWxzZVwiXG4gICAgICBbbW9kZWxdPVwiZmllbGQubW9kZWxcIlxuICAgICAgW2Zvcm1dPVwiZmllbGQuZm9ybUNvbnRyb2xcIlxuICAgICAgW29wdGlvbnNdPVwib3B0aW9uc1wiXG4gICAgICBbbmdDbGFzc109XCJmaWVsZC5maWVsZEdyb3VwQ2xhc3NOYW1lXCI+XG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPC9mb3JtbHktZm9ybT5cbiAgYCxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybWx5R3JvdXAgZXh0ZW5kcyBGaWVsZFR5cGUge31cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1seUNvbmZpZyB9IGZyb20gJy4uL3NlcnZpY2VzL2Zvcm1seS5jb25maWcnO1xuaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWcgfSBmcm9tICcuLi9jb21wb25lbnRzL2Zvcm1seS5maWVsZC5jb25maWcnO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuLi91dGlscyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Zvcm1seS12YWxpZGF0aW9uLW1lc3NhZ2UnLFxuICB0ZW1wbGF0ZTogYHt7IGVycm9yTWVzc2FnZSB9fWAsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seVZhbGlkYXRpb25NZXNzYWdlIHtcbiAgQElucHV0KCkgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZm9ybWx5Q29uZmlnOiBGb3JtbHlDb25maWcpIHt9XG5cbiAgZ2V0IGVycm9yTWVzc2FnZSgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGZpZWxkRm9ybSA9IHRoaXMuZmllbGQuZm9ybUNvbnRyb2w7XG4gICAgZm9yIChsZXQgZXJyb3IgaW4gZmllbGRGb3JtLmVycm9ycykge1xuICAgICAgaWYgKGZpZWxkRm9ybS5lcnJvcnMuaGFzT3duUHJvcGVydHkoZXJyb3IpKSB7XG4gICAgICAgIGxldCBtZXNzYWdlOiBzdHJpbmcgfCBGdW5jdGlvbiA9IHRoaXMuZm9ybWx5Q29uZmlnLmdldFZhbGlkYXRvck1lc3NhZ2UoZXJyb3IpO1xuXG4gICAgICAgIGlmIChpc09iamVjdChmaWVsZEZvcm0uZXJyb3JzW2Vycm9yXSkpIHtcbiAgICAgICAgICBpZiAoZmllbGRGb3JtLmVycm9yc1tlcnJvcl0uZXJyb3JQYXRoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGZpZWxkRm9ybS5lcnJvcnNbZXJyb3JdLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBmaWVsZEZvcm0uZXJyb3JzW2Vycm9yXS5tZXNzYWdlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmZpZWxkLnZhbGlkYXRpb24gJiYgdGhpcy5maWVsZC52YWxpZGF0aW9uLm1lc3NhZ2VzICYmIHRoaXMuZmllbGQudmFsaWRhdGlvbi5tZXNzYWdlc1tlcnJvcl0pIHtcbiAgICAgICAgICBtZXNzYWdlID0gdGhpcy5maWVsZC52YWxpZGF0aW9uLm1lc3NhZ2VzW2Vycm9yXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmZpZWxkLnZhbGlkYXRvcnMgJiYgdGhpcy5maWVsZC52YWxpZGF0b3JzW2Vycm9yXSAmJiB0aGlzLmZpZWxkLnZhbGlkYXRvcnNbZXJyb3JdLm1lc3NhZ2UpIHtcbiAgICAgICAgICBtZXNzYWdlID0gdGhpcy5maWVsZC52YWxpZGF0b3JzW2Vycm9yXS5tZXNzYWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZmllbGQuYXN5bmNWYWxpZGF0b3JzICYmIHRoaXMuZmllbGQuYXN5bmNWYWxpZGF0b3JzW2Vycm9yXSAmJiB0aGlzLmZpZWxkLmFzeW5jVmFsaWRhdG9yc1tlcnJvcl0ubWVzc2FnZSkge1xuICAgICAgICAgIG1lc3NhZ2UgPSB0aGlzLmZpZWxkLmFzeW5jVmFsaWRhdG9yc1tlcnJvcl0ubWVzc2FnZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBtZXNzYWdlKGZpZWxkRm9ybS5lcnJvcnNbZXJyb3JdLCB0aGlzLmZpZWxkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICcuL2ZpZWxkLnR5cGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JtbHktdGVtcGxhdGUnLFxuICB0ZW1wbGF0ZTogYDxkaXYgW2lubmVySHRtbF09XCJmaWVsZC50ZW1wbGF0ZVwiPjwvZGl2PmAsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seVRlbXBsYXRlVHlwZSBleHRlbmRzIEZpZWxkVHlwZSB7fVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGV2YWxTdHJpbmdFeHByZXNzaW9uKGV4cHJlc3Npb246IHN0cmluZywgYXJnTmFtZXM6IHN0cmluZ1tdKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uKC4uLmFyZ05hbWVzLCBgcmV0dXJuICR7ZXhwcmVzc2lvbn07YCkgYXMgYW55O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBldmFsRXhwcmVzc2lvblZhbHVlU2V0dGVyKGV4cHJlc3Npb246IHN0cmluZywgYXJnTmFtZXM6IHN0cmluZ1tdKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uKC4uLmFyZ05hbWVzLCBgJHtleHByZXNzaW9ufSA9IGV4cHJlc3Npb25WYWx1ZTtgKSBhcyAodmFsdWU6IGFueSkgPT4gdm9pZDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZXZhbEV4cHJlc3Npb24oZXhwcmVzc2lvbjogc3RyaW5nIHwgRnVuY3Rpb24gfCBib29sZWFuLCB0aGlzQXJnOiBhbnksIGFyZ1ZhbDogYW55W10pOiBhbnkge1xuICBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb24uYXBwbHkodGhpc0FyZywgYXJnVmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwcmVzc2lvbiA/IHRydWUgOiBmYWxzZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtQXJyYXkgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZywgRm9ybWx5VmFsdWVDaGFuZ2VFdmVudCwgRm9ybWx5RmllbGRDb25maWdDYWNoZSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZm9ybWx5LmZpZWxkLmNvbmZpZyc7XG5pbXBvcnQge1xuICBpc09iamVjdCwgaXNOdWxsT3JVbmRlZmluZWQsIGlzRnVuY3Rpb24sXG4gIEZPUk1MWV9WQUxJREFUT1JTLCBnZXRGaWVsZFZhbHVlLCBnZXRLZXlQYXRoLCByZW1vdmVGaWVsZENvbnRyb2wsIGRlZmluZUhpZGRlblByb3AsXG59IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IGV2YWxFeHByZXNzaW9uLCBldmFsU3RyaW5nRXhwcmVzc2lvbiwgZXZhbEV4cHJlc3Npb25WYWx1ZVNldHRlciB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgRm9ybWx5RXh0ZW5zaW9uIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZm9ybWx5LmNvbmZpZyc7XG5cbi8qKiBAZXhwZXJpbWVudGFsICovXG5leHBvcnQgY2xhc3MgRmllbGRFeHByZXNzaW9uRXh0ZW5zaW9uIGltcGxlbWVudHMgRm9ybWx5RXh0ZW5zaW9uIHtcbiAgcHJlUG9wdWxhdGUoZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnQ2FjaGUpIHtcbiAgICBpZiAoZmllbGQucGFyZW50IHx8IGZpZWxkLm9wdGlvbnMuX2NoZWNrRmllbGQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmaWVsZC5vcHRpb25zLl9jaGVja0ZpZWxkID0gKGYsIGlnbm9yZUNhY2hlKSA9PiB0aGlzLl9jaGVja0ZpZWxkKGYsIGlnbm9yZUNhY2hlKTtcbiAgfVxuXG4gIG9uUG9wdWxhdGUoZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnQ2FjaGUpIHtcbiAgICBpZiAoIWZpZWxkLnBhcmVudCB8fCBmaWVsZC5fZXhwcmVzc2lvblByb3BlcnRpZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBjYWNoZSBidWlsdCBleHByZXNzaW9uXG4gICAgZGVmaW5lSGlkZGVuUHJvcChmaWVsZCwgJ19leHByZXNzaW9uUHJvcGVydGllcycsIHt9KTtcblxuICAgIGlmIChmaWVsZC5leHByZXNzaW9uUHJvcGVydGllcykge1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gZmllbGQuZXhwcmVzc2lvblByb3BlcnRpZXMpIHtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvblByb3BlcnR5ID0gZmllbGQuZXhwcmVzc2lvblByb3BlcnRpZXNba2V5XSxcbiAgICAgICAgICBleHByZXNzaW9uVmFsdWVTZXR0ZXIgPSBldmFsRXhwcmVzc2lvblZhbHVlU2V0dGVyKFxuICAgICAgICAgICAgYGZpZWxkLiR7a2V5fWAsXG4gICAgICAgICAgICBbJ2V4cHJlc3Npb25WYWx1ZScsICdtb2RlbCcsICdmaWVsZCddLFxuICAgICAgICAgICk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBleHByZXNzaW9uUHJvcGVydHkgPT09ICdzdHJpbmcnIHx8IGlzRnVuY3Rpb24oZXhwcmVzc2lvblByb3BlcnR5KSkge1xuICAgICAgICAgIGZpZWxkLl9leHByZXNzaW9uUHJvcGVydGllc1trZXldID0ge1xuICAgICAgICAgICAgZXhwcmVzc2lvbjogdGhpcy5fZXZhbEV4cHJlc3Npb24oXG4gICAgICAgICAgICAgIGV4cHJlc3Npb25Qcm9wZXJ0eSxcbiAgICAgICAgICAgICAgZmllbGQucGFyZW50LmV4cHJlc3Npb25Qcm9wZXJ0aWVzICYmIGZpZWxkLnBhcmVudC5leHByZXNzaW9uUHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eSgndGVtcGxhdGVPcHRpb25zLmRpc2FibGVkJylcbiAgICAgICAgICAgICAgICA/ICgpID0+IGZpZWxkLnBhcmVudC50ZW1wbGF0ZU9wdGlvbnMuZGlzYWJsZWRcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBleHByZXNzaW9uVmFsdWVTZXR0ZXIsXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAoa2V5ID09PSAndGVtcGxhdGVPcHRpb25zLmRpc2FibGVkJykge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpZWxkLl9leHByZXNzaW9uUHJvcGVydGllc1trZXldLCAnZXhwcmVzc2lvblZhbHVlJywge1xuICAgICAgICAgICAgICBnZXQ6ICgpID0+IGZpZWxkLnRlbXBsYXRlT3B0aW9ucy5kaXNhYmxlZCxcbiAgICAgICAgICAgICAgc2V0OiAoKSA9PiB7IH0sXG4gICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChleHByZXNzaW9uUHJvcGVydHkgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gKGV4cHJlc3Npb25Qcm9wZXJ0eSBhcyBPYnNlcnZhYmxlPGFueT4pLnBpcGUoXG4gICAgICAgICAgICB0YXAodiA9PiBldmFsRXhwcmVzc2lvbihleHByZXNzaW9uVmFsdWVTZXR0ZXIsIHsgZmllbGQgfSwgW3YsIGZpZWxkLm1vZGVsLCBmaWVsZF0pKSxcbiAgICAgICAgICApLnN1YnNjcmliZSgpO1xuXG4gICAgICAgICAgY29uc3Qgb25EZXN0cm95ID0gZmllbGQuaG9va3Mub25EZXN0cm95O1xuICAgICAgICAgIGZpZWxkLmhvb2tzLm9uRGVzdHJveSA9IChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgb25EZXN0cm95ICYmIG9uRGVzdHJveShmaWVsZCk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLmhpZGVFeHByZXNzaW9uIHx8IGZpZWxkLnBhcmVudC5oaWRlRXhwcmVzc2lvbikge1xuICAgICAgLy8gZGVsZXRlIGhpZGUgdmFsdWUgaW4gb3JkZXIgdG8gZm9yY2UgcmUtZXZhbHVhdGUgaXQgaW4gRm9ybWx5Rm9ybUV4cHJlc3Npb24uXG4gICAgICBkZWxldGUgZmllbGQuaGlkZTtcbiAgICAgIGZpZWxkLmhpZGVFeHByZXNzaW9uID0gdGhpcy5fZXZhbEV4cHJlc3Npb24oXG4gICAgICAgIGZpZWxkLmhpZGVFeHByZXNzaW9uLFxuICAgICAgICBmaWVsZC5wYXJlbnQgJiYgZmllbGQucGFyZW50LmhpZGVFeHByZXNzaW9uID8gKCkgPT4gZmllbGQucGFyZW50LmhpZGUgOiB1bmRlZmluZWQsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHBvc3RQb3B1bGF0ZShmaWVsZDogRm9ybWx5RmllbGRDb25maWdDYWNoZSkge1xuICAgIGlmIChmaWVsZC5wYXJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmaWVsZC5vcHRpb25zLl9jaGVja0ZpZWxkKGZpZWxkLCB0cnVlKTtcbiAgfVxuXG4gIHByaXZhdGUgX2V2YWxFeHByZXNzaW9uKGV4cHJlc3Npb24sIHBhcmVudEV4cHJlc3Npb24/KSB7XG4gICAgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb24gfHwgKCgpID0+IGZhbHNlKTtcbiAgICBpZiAodHlwZW9mIGV4cHJlc3Npb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICBleHByZXNzaW9uID0gZXZhbFN0cmluZ0V4cHJlc3Npb24oZXhwcmVzc2lvbiwgWydtb2RlbCcsICdmb3JtU3RhdGUnXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmVudEV4cHJlc3Npb25cbiAgICAgID8gKG1vZGVsOiBhbnksIGZvcm1TdGF0ZTogYW55KSA9PiBwYXJlbnRFeHByZXNzaW9uKCkgfHwgZXhwcmVzc2lvbihtb2RlbCwgZm9ybVN0YXRlKVxuICAgICAgOiBleHByZXNzaW9uO1xuICB9XG5cbiAgcHJpdmF0ZSBfY2hlY2tGaWVsZChmaWVsZDogRm9ybWx5RmllbGRDb25maWdDYWNoZSwgaWdub3JlQ2FjaGUgPSBmYWxzZSkge1xuICAgIGxldCBtYXJrRm9yQ2hlY2sgPSBmYWxzZTtcbiAgICBmaWVsZC5maWVsZEdyb3VwLmZvckVhY2goZiA9PiB7XG4gICAgICB0aGlzLmNoZWNrRmllbGRFeHByZXNzaW9uQ2hhbmdlKGYsIGlnbm9yZUNhY2hlKSAmJiAobWFya0ZvckNoZWNrID0gdHJ1ZSk7XG4gICAgICB0aGlzLmNoZWNrRmllbGRWaXNpYmlsaXR5Q2hhbmdlKGYsIGlnbm9yZUNhY2hlKSAmJiAobWFya0ZvckNoZWNrID0gdHJ1ZSk7XG5cbiAgICAgIGlmIChmLmZpZWxkR3JvdXAgJiYgZi5maWVsZEdyb3VwLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5fY2hlY2tGaWVsZChmLCBpZ25vcmVDYWNoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAobWFya0ZvckNoZWNrICYmIGZpZWxkLm9wdGlvbnMgJiYgZmllbGQub3B0aW9ucy5fbWFya0ZvckNoZWNrKSB7XG4gICAgICBmaWVsZC5vcHRpb25zLl9tYXJrRm9yQ2hlY2soZmllbGQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tGaWVsZEV4cHJlc3Npb25DaGFuZ2UoZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnQ2FjaGUsIGlnbm9yZUNhY2hlKTogYm9vbGVhbiB7XG4gICAgaWYgKCFmaWVsZCB8fCAhZmllbGQuX2V4cHJlc3Npb25Qcm9wZXJ0aWVzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IG1hcmtGb3JDaGVjayA9IGZhbHNlO1xuICAgIGNvbnN0IGV4cHJlc3Npb25Qcm9wZXJ0aWVzID0gZmllbGQuX2V4cHJlc3Npb25Qcm9wZXJ0aWVzO1xuICAgIGNvbnN0IHZhbGlkYXRvcnMgPSBGT1JNTFlfVkFMSURBVE9SUy5tYXAodiA9PiBgdGVtcGxhdGVPcHRpb25zLiR7dn1gKTtcblxuICAgIGZvciAoY29uc3Qga2V5IGluIGV4cHJlc3Npb25Qcm9wZXJ0aWVzKSB7XG4gICAgICBsZXQgZXhwcmVzc2lvblZhbHVlID0gZXZhbEV4cHJlc3Npb24oZXhwcmVzc2lvblByb3BlcnRpZXNba2V5XS5leHByZXNzaW9uLCB7IGZpZWxkIH0sIFtmaWVsZC5tb2RlbCwgZmllbGQub3B0aW9ucy5mb3JtU3RhdGVdKTtcbiAgICAgIGlmIChrZXkgPT09ICd0ZW1wbGF0ZU9wdGlvbnMuZGlzYWJsZWQnKSB7XG4gICAgICAgIGV4cHJlc3Npb25WYWx1ZSA9ICEhZXhwcmVzc2lvblZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIGlnbm9yZUNhY2hlIHx8IChcbiAgICAgICAgICBleHByZXNzaW9uUHJvcGVydGllc1trZXldLmV4cHJlc3Npb25WYWx1ZSAhPT0gZXhwcmVzc2lvblZhbHVlXG4gICAgICAgICAgJiYgKCFpc09iamVjdChleHByZXNzaW9uVmFsdWUpIHx8IEpTT04uc3RyaW5naWZ5KGV4cHJlc3Npb25WYWx1ZSkgIT09IEpTT04uc3RyaW5naWZ5KGV4cHJlc3Npb25Qcm9wZXJ0aWVzW2tleV0uZXhwcmVzc2lvblZhbHVlKSlcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIG1hcmtGb3JDaGVjayA9IHRydWU7XG4gICAgICAgIGV4cHJlc3Npb25Qcm9wZXJ0aWVzW2tleV0uZXhwcmVzc2lvblZhbHVlID0gZXhwcmVzc2lvblZhbHVlO1xuICAgICAgICBldmFsRXhwcmVzc2lvbihcbiAgICAgICAgICBleHByZXNzaW9uUHJvcGVydGllc1trZXldLmV4cHJlc3Npb25WYWx1ZVNldHRlcixcbiAgICAgICAgICB7IGZpZWxkIH0sXG4gICAgICAgICAgW2V4cHJlc3Npb25WYWx1ZSwgZmllbGQubW9kZWwsIGZpZWxkXSxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoa2V5LmluZGV4T2YoJ21vZGVsLicpID09PSAwKSB7XG4gICAgICAgICAgY29uc3QgcGF0aCA9IGtleS5yZXBsYWNlKC9ebW9kZWxcXC4vLCAnJyksXG4gICAgICAgICAgICBjb250cm9sID0gZmllbGQua2V5ICYmIGtleSA9PT0gcGF0aCA/IGZpZWxkLmZvcm1Db250cm9sIDogZmllbGQucGFyZW50LmZvcm1Db250cm9sLmdldChwYXRoKTtcblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbnRyb2xcbiAgICAgICAgICAgICYmICEoaXNOdWxsT3JVbmRlZmluZWQoY29udHJvbC52YWx1ZSkgJiYgaXNOdWxsT3JVbmRlZmluZWQoZXhwcmVzc2lvblZhbHVlKSlcbiAgICAgICAgICAgICYmIGNvbnRyb2wudmFsdWUgIT09IGV4cHJlc3Npb25WYWx1ZVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29udHJvbC5wYXRjaFZhbHVlKGV4cHJlc3Npb25WYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbGlkYXRvcnMuaW5kZXhPZihrZXkpICE9PSAtMSAmJiBmaWVsZC5mb3JtQ29udHJvbCkge1xuICAgICAgICAgIGZpZWxkLmZvcm1Db250cm9sLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoeyBlbWl0RXZlbnQ6IGZhbHNlIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcmtGb3JDaGVjaztcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tGaWVsZFZpc2liaWxpdHlDaGFuZ2UoZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnQ2FjaGUsIGlnbm9yZUNhY2hlKTogYm9vbGVhbiB7XG4gICAgaWYgKCFmaWVsZCB8fCBpc051bGxPclVuZGVmaW5lZChmaWVsZC5oaWRlRXhwcmVzc2lvbikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBoaWRlRXhwcmVzc2lvblJlc3VsdDogYm9vbGVhbiA9ICEhZXZhbEV4cHJlc3Npb24oXG4gICAgICBmaWVsZC5oaWRlRXhwcmVzc2lvbixcbiAgICAgIHsgZmllbGQgfSxcbiAgICAgIFtmaWVsZC5tb2RlbCwgZmllbGQub3B0aW9ucy5mb3JtU3RhdGVdLFxuICAgICk7XG4gICAgbGV0IG1hcmtGb3JDaGVjayA9IGZhbHNlO1xuICAgIGlmIChoaWRlRXhwcmVzc2lvblJlc3VsdCAhPT0gZmllbGQuaGlkZSB8fCBpZ25vcmVDYWNoZSkge1xuICAgICAgbWFya0ZvckNoZWNrID0gdHJ1ZTtcbiAgICAgIC8vIHRvZ2dsZSBoaWRlXG4gICAgICBmaWVsZC5oaWRlID0gaGlkZUV4cHJlc3Npb25SZXN1bHQ7XG4gICAgICBmaWVsZC50ZW1wbGF0ZU9wdGlvbnMuaGlkZGVuID0gaGlkZUV4cHJlc3Npb25SZXN1bHQ7XG5cbiAgICAgIGlmIChmaWVsZC5mb3JtQ29udHJvbCAmJiBmaWVsZC5rZXkpIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5maWVsZFBhcmVudEZvcm1Db250cm9sKGZpZWxkKTtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIGNvbnN0IGNvbnRyb2wgPSBwYXJlbnQuZ2V0KGAke3RoaXMuZmllbGRLZXkoZmllbGQpfWApO1xuICAgICAgICAgIGlmIChoaWRlRXhwcmVzc2lvblJlc3VsdCA9PT0gdHJ1ZSAmJiBjb250cm9sKSB7XG4gICAgICAgICAgICByZW1vdmVGaWVsZENvbnRyb2wocGFyZW50LCB0aGlzLmZpZWxkS2V5KGZpZWxkKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChoaWRlRXhwcmVzc2lvblJlc3VsdCA9PT0gZmFsc2UgJiYgIWNvbnRyb2wpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRmllbGRDb250cm9sKHBhcmVudCwgZmllbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmllbGQub3B0aW9ucy5maWVsZENoYW5nZXMpIHtcbiAgICAgICAgZmllbGQub3B0aW9ucy5maWVsZENoYW5nZXMubmV4dCg8Rm9ybWx5VmFsdWVDaGFuZ2VFdmVudD4geyBmaWVsZDogZmllbGQsIHR5cGU6ICdoaWRkZW4nLCB2YWx1ZTogaGlkZUV4cHJlc3Npb25SZXN1bHQgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcmtGb3JDaGVjaztcbiAgfVxuXG4gIHByaXZhdGUgYWRkRmllbGRDb250cm9sKHBhcmVudDogRm9ybUFycmF5IHwgRm9ybUdyb3VwLCBmaWVsZDogRm9ybWx5RmllbGRDb25maWcpIHtcbiAgICBjb25zdCBmaWVsZE1vZGVsID0gZ2V0RmllbGRWYWx1ZShmaWVsZCk7XG4gICAgaWYgKFxuICAgICAgIShpc051bGxPclVuZGVmaW5lZChmaWVsZC5mb3JtQ29udHJvbC52YWx1ZSkgJiYgaXNOdWxsT3JVbmRlZmluZWQoZmllbGRNb2RlbCkpXG4gICAgICAmJiBmaWVsZC5mb3JtQ29udHJvbC52YWx1ZSAhPT0gZmllbGRNb2RlbFxuICAgICkge1xuICAgICAgZmllbGQuZm9ybUNvbnRyb2wucGF0Y2hWYWx1ZShmaWVsZE1vZGVsLCB7IGVtaXRFdmVudDogZmFsc2UgfSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmVudCBpbnN0YW5jZW9mIEZvcm1BcnJheSkge1xuICAgICAgcGFyZW50LnB1c2goZmllbGQuZm9ybUNvbnRyb2wpO1xuICAgIH0gZWxzZSBpZiAocGFyZW50IGluc3RhbmNlb2YgRm9ybUdyb3VwKSB7XG4gICAgICBwYXJlbnQuYWRkQ29udHJvbChgJHt0aGlzLmZpZWxkS2V5KGZpZWxkKX1gLCBmaWVsZC5mb3JtQ29udHJvbCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBmaWVsZFBhcmVudEZvcm1Db250cm9sKGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZyk6IEZvcm1BcnJheSB8IEZvcm1Hcm91cCB7XG4gICAgY29uc3QgcGF0aHMgPSBnZXRLZXlQYXRoKGZpZWxkKTtcbiAgICBwYXRocy5wb3AoKTsgLy8gcmVtb3ZlIGxhc3QgcGF0aFxuXG4gICAgcmV0dXJuIChwYXRocy5sZW5ndGggPiAwID8gZmllbGQucGFyZW50LmZvcm1Db250cm9sLmdldChwYXRocykgOiBmaWVsZC5wYXJlbnQuZm9ybUNvbnRyb2wpIGFzIGFueTtcbiAgfVxuXG4gIHByaXZhdGUgZmllbGRLZXkoZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnKSB7XG4gICAgcmV0dXJuIGdldEtleVBhdGgoZmllbGQpLnBvcCgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBGb3JtbHlFeHRlbnNpb24sIEZpZWxkVmFsaWRhdG9yRm4sIEZvcm1seUNvbmZpZyB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2Zvcm1seS5jb25maWcnO1xuaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWdDYWNoZSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZm9ybWx5LmZpZWxkLmNvbmZpZyc7XG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBpc09iamVjdCwgRk9STUxZX1ZBTElEQVRPUlMsIGRlZmluZUhpZGRlblByb3AgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbi8qKiBAZXhwZXJpbWVudGFsICovXG5leHBvcnQgY2xhc3MgRmllbGRWYWxpZGF0aW9uRXh0ZW5zaW9uIGltcGxlbWVudHMgRm9ybWx5RXh0ZW5zaW9uIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmb3JtbHlDb25maWc6IEZvcm1seUNvbmZpZykge31cblxuICBvblBvcHVsYXRlKGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZ0NhY2hlKSB7XG4gICAgdGhpcy5pbml0RmllbGRWYWxpZGF0aW9uKGZpZWxkKTtcbiAgICB0aGlzLmluaXRGaWVsZEFzeW5jVmFsaWRhdGlvbihmaWVsZCk7XG4gIH1cblxuICBwcml2YXRlIGluaXRGaWVsZFZhbGlkYXRpb24oZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnQ2FjaGUpIHtcbiAgICBpZiAoZmllbGQuX3ZhbGlkYXRvcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkZWZpbmVIaWRkZW5Qcm9wKGZpZWxkLCAnX3ZhbGlkYXRvcnMnLCBbXSk7XG4gICAgdGhpcy5pbml0UHJlZGVmaW5lZEZpZWxkVmFsaWRhdGlvbihmaWVsZCk7XG4gICAgaWYgKGZpZWxkLnZhbGlkYXRvcnMpIHtcbiAgICAgIGZvciAoY29uc3QgdmFsaWRhdG9yTmFtZSBpbiBmaWVsZC52YWxpZGF0b3JzKSB7XG4gICAgICAgIGlmICh2YWxpZGF0b3JOYW1lICE9PSAndmFsaWRhdGlvbicpIHtcbiAgICAgICAgICBsZXQgdmFsaWRhdG9yID0gZmllbGQudmFsaWRhdG9yc1t2YWxpZGF0b3JOYW1lXTtcbiAgICAgICAgICBsZXQgZXJyb3JQYXRoO1xuICAgICAgICAgIGxldCBtZXNzYWdlO1xuICAgICAgICAgIGlmIChpc09iamVjdCh2YWxpZGF0b3IpKSB7XG4gICAgICAgICAgICBlcnJvclBhdGggPSB2YWxpZGF0b3IuZXJyb3JQYXRoO1xuICAgICAgICAgICAgbWVzc2FnZSA9IHZhbGlkYXRvci5tZXNzYWdlO1xuICAgICAgICAgICAgdmFsaWRhdG9yID0gdmFsaWRhdG9yLmV4cHJlc3Npb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmllbGQuX3ZhbGlkYXRvcnMucHVzaCgoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpc1ZhbGlkID0gdmFsaWRhdG9yKGNvbnRyb2wsIGZpZWxkKTtcbiAgICAgICAgICAgIGlmIChlcnJvclBhdGggJiYgZmllbGQuZm9ybUNvbnRyb2wgJiYgZmllbGQuZm9ybUNvbnRyb2wuZ2V0KGVycm9yUGF0aCkpIHtcbiAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgZmllbGQuZm9ybUNvbnRyb2wuZ2V0KGVycm9yUGF0aCkuc2V0RXJyb3JzKHtcbiAgICAgICAgICAgICAgICAgIC4uLihmaWVsZC5mb3JtQ29udHJvbC5nZXQoZXJyb3JQYXRoKS5lcnJvcnMgfHwge30pLFxuICAgICAgICAgICAgICAgICAgW3ZhbGlkYXRvck5hbWVdOiB7IG1lc3NhZ2UgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvcnMgPSAoZmllbGQuZm9ybUNvbnRyb2wuZ2V0KGVycm9yUGF0aCkuZXJyb3JzIHx8IHt9KTtcbiAgICAgICAgICAgICAgICBkZWxldGUgZXJyb3JzW3ZhbGlkYXRvck5hbWVdO1xuICAgICAgICAgICAgICAgIGZpZWxkLmZvcm1Db250cm9sLmdldChlcnJvclBhdGgpLnNldEVycm9ycyhPYmplY3Qua2V5cyhlcnJvcnMpLmxlbmd0aCA9PT0gMCA/IG51bGwgOiBlcnJvcnMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkID8gbnVsbCA6IHsgW3ZhbGlkYXRvck5hbWVdOiBlcnJvclBhdGggPyB7IGVycm9yUGF0aCB9IDogdHJ1ZSB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShmaWVsZC52YWxpZGF0b3JzLnZhbGlkYXRpb24pKSB7XG4gICAgICAgICAgICBmaWVsZC52YWxpZGF0b3JzLnZhbGlkYXRpb24gPSBbZmllbGQudmFsaWRhdG9ycy52YWxpZGF0aW9uXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmllbGQudmFsaWRhdG9ycy52YWxpZGF0aW9uXG4gICAgICAgICAgICAuZm9yRWFjaCgodmFsaWRhdG9yOiBhbnkpID0+IGZpZWxkLl92YWxpZGF0b3JzLnB1c2godGhpcy53cmFwTmdWYWxpZGF0b3JGbihmaWVsZCwgdmFsaWRhdG9yKSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpbml0RmllbGRBc3luY1ZhbGlkYXRpb24oZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnQ2FjaGUpIHtcbiAgICBpZiAoZmllbGQuX2FzeW5jVmFsaWRhdG9ycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRlZmluZUhpZGRlblByb3AoZmllbGQsICdfYXN5bmNWYWxpZGF0b3JzJywgW10pO1xuICAgIGlmIChmaWVsZC5hc3luY1ZhbGlkYXRvcnMpIHtcbiAgICAgIGZvciAoY29uc3QgdmFsaWRhdG9yTmFtZSBpbiBmaWVsZC5hc3luY1ZhbGlkYXRvcnMpIHtcbiAgICAgICAgaWYgKHZhbGlkYXRvck5hbWUgIT09ICd2YWxpZGF0aW9uJykge1xuICAgICAgICAgIGxldCB2YWxpZGF0b3IgPSBmaWVsZC5hc3luY1ZhbGlkYXRvcnNbdmFsaWRhdG9yTmFtZV07XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHZhbGlkYXRvcikpIHtcbiAgICAgICAgICAgIHZhbGlkYXRvciA9IHZhbGlkYXRvci5leHByZXNzaW9uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZpZWxkLl9hc3luY1ZhbGlkYXRvcnMucHVzaCgoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRvcihjb250cm9sLCBmaWVsZCkudGhlbigocmVzdWx0OiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0ID8gbnVsbCA6IHsgW3ZhbGlkYXRvck5hbWVdOiB0cnVlIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShmaWVsZC5hc3luY1ZhbGlkYXRvcnMudmFsaWRhdGlvbikpIHtcbiAgICAgICAgICAgIGZpZWxkLmFzeW5jVmFsaWRhdG9ycy52YWxpZGF0aW9uID0gW2ZpZWxkLmFzeW5jVmFsaWRhdG9ycy52YWxpZGF0aW9uXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmllbGQuYXN5bmNWYWxpZGF0b3JzLnZhbGlkYXRpb25cbiAgICAgICAgICAgIC5mb3JFYWNoKCh2YWxpZGF0b3I6IGFueSkgPT4gZmllbGQuX2FzeW5jVmFsaWRhdG9ycy5wdXNoKHRoaXMud3JhcE5nVmFsaWRhdG9yRm4oZmllbGQsIHZhbGlkYXRvcikgYXMgYW55KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGluaXRQcmVkZWZpbmVkRmllbGRWYWxpZGF0aW9uKGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZ0NhY2hlKSB7XG4gICAgRk9STUxZX1ZBTElEQVRPUlNcbiAgICAgIC5maWx0ZXIob3B0ID0+IChmaWVsZC50ZW1wbGF0ZU9wdGlvbnMgJiYgZmllbGQudGVtcGxhdGVPcHRpb25zLmhhc093blByb3BlcnR5KG9wdCkpIHx8IChmaWVsZC5leHByZXNzaW9uUHJvcGVydGllcyAmJiBmaWVsZC5leHByZXNzaW9uUHJvcGVydGllc1tgdGVtcGxhdGVPcHRpb25zLiR7b3B0fWBdKSlcbiAgICAgIC5mb3JFYWNoKChvcHQpID0+IHtcbiAgICAgICAgZmllbGQuX3ZhbGlkYXRvcnMucHVzaCgoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSA9PiB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBmaWVsZC50ZW1wbGF0ZU9wdGlvbnNbb3B0XTtcbiAgICAgICAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3dpdGNoIChvcHQpIHtcbiAgICAgICAgICAgIGNhc2UgJ3JlcXVpcmVkJzpcbiAgICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRvcnMucmVxdWlyZWQoY29udHJvbCk7XG4gICAgICAgICAgICBjYXNlICdwYXR0ZXJuJzpcbiAgICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRvcnMucGF0dGVybih2YWx1ZSkoY29udHJvbCk7XG4gICAgICAgICAgICBjYXNlICdtaW5MZW5ndGgnOlxuICAgICAgICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5taW5MZW5ndGgodmFsdWUpKGNvbnRyb2wpO1xuICAgICAgICAgICAgY2FzZSAnbWF4TGVuZ3RoJzpcbiAgICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRvcnMubWF4TGVuZ3RoKHZhbHVlKShjb250cm9sKTtcbiAgICAgICAgICAgIGNhc2UgJ21pbic6XG4gICAgICAgICAgICAgIHJldHVybiBWYWxpZGF0b3JzLm1pbih2YWx1ZSkoY29udHJvbCk7XG4gICAgICAgICAgICBjYXNlICdtYXgnOlxuICAgICAgICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5tYXgodmFsdWUpKGNvbnRyb2wpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgd3JhcE5nVmFsaWRhdG9yRm4oZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnQ2FjaGUsIHZhbGlkYXRvcjogc3RyaW5nIHwgRmllbGRWYWxpZGF0b3JGbikge1xuICAgIHZhbGlkYXRvciA9IHR5cGVvZiB2YWxpZGF0b3IgPT09ICdzdHJpbmcnXG4gICAgICA/IHRoaXMuZm9ybWx5Q29uZmlnLmdldFZhbGlkYXRvcih2YWxpZGF0b3IpLnZhbGlkYXRpb25cbiAgICAgIDogdmFsaWRhdG9yO1xuXG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+ICh2YWxpZGF0b3IgYXMgRmllbGRWYWxpZGF0b3JGbikoY29udHJvbCwgZmllbGQpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBGb3JtbHlFeHRlbnNpb24gfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9mb3JtbHkuY29uZmlnJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnQ2FjaGUgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2Zvcm1seS5maWVsZC5jb25maWcnO1xuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBGb3JtR3JvdXAsIEZvcm1BcnJheSwgRm9ybUNvbnRyb2wsIEFic3RyYWN0Q29udHJvbE9wdGlvbnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBnZXRLZXlQYXRoLCBpc051bGxPclVuZGVmaW5lZCB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuLyoqIEBleHBlcmltZW50YWwgKi9cbmV4cG9ydCBjbGFzcyBGaWVsZEZvcm1FeHRlbnNpb24gaW1wbGVtZW50cyBGb3JtbHlFeHRlbnNpb24ge1xuICBvblBvcHVsYXRlKGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZ0NhY2hlKSB7XG4gICAgaWYgKGZpZWxkLmtleSAmJiBmaWVsZC50eXBlKSB7XG4gICAgICBjb25zdCBwYXRocyA9IGdldEtleVBhdGgoeyBrZXk6IGZpZWxkLmtleSB9KTtcbiAgICAgIGxldCByb290Rm9ybSA9IGZpZWxkLnBhcmVudC5mb3JtQ29udHJvbCBhcyBGb3JtR3JvdXAsIHJvb3RNb2RlbCA9IGZpZWxkLmZpZWxkR3JvdXAgPyB7IFtwYXRoc1swXV06IGZpZWxkLm1vZGVsIH0gOiBmaWVsZC5tb2RlbDtcbiAgICAgIHBhdGhzLmZvckVhY2goKHBhdGgsIGluZGV4KSA9PiB7XG4gICAgICAgIC8vIEZvcm1Hcm91cC9Gb3JtQXJyYXkgb25seSBhbGxvdyBzdHJpbmcgdmFsdWUgZm9yIHBhdGhcbiAgICAgICAgY29uc3QgZm9ybVBhdGggPSBwYXRoLnRvU3RyaW5nKCk7XG4gICAgICAgIC8vIGlzIGxhc3QgaXRlbVxuICAgICAgICBpZiAoaW5kZXggPT09IHBhdGhzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICB0aGlzLmFkZEZvcm1Db250cm9sKHJvb3RGb3JtLCBmaWVsZCwgcm9vdE1vZGVsLCBmb3JtUGF0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFyb290TW9kZWxbcGF0aF0pIHtcbiAgICAgICAgICAgIHJvb3RNb2RlbFtwYXRoXSA9IHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJyA/IHt9IDogW107XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuYWRkRm9ybUNvbnRyb2wocm9vdEZvcm0sIHsga2V5OiBmb3JtUGF0aCwgZmllbGRHcm91cDogW10sIG1vZGVsT3B0aW9uczoge30sIHRlbXBsYXRlT3B0aW9uczoge30gfSwgcm9vdE1vZGVsLCBmb3JtUGF0aCk7XG5cbiAgICAgICAgICByb290Rm9ybSA9IDxGb3JtR3JvdXA+IHJvb3RGb3JtLmdldChmb3JtUGF0aCk7XG4gICAgICAgICAgcm9vdE1vZGVsID0gcm9vdE1vZGVsW3BhdGhdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQuZmllbGRHcm91cCAmJiAhZmllbGQuZm9ybUNvbnRyb2wpIHtcbiAgICAgIGZpZWxkLmZvcm1Db250cm9sID0gZmllbGQucGFyZW50LmZvcm1Db250cm9sO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYWRkRm9ybUNvbnRyb2woZm9ybTogRm9ybUdyb3VwIHwgRm9ybUFycmF5LCBmaWVsZDogRm9ybWx5RmllbGRDb25maWdDYWNoZSwgbW9kZWw6IGFueSwgcGF0aDogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgY29uc3QgYWJzdHJhY3RDb250cm9sT3B0aW9ucyA9IHtcbiAgICAgIHZhbGlkYXRvcnM6IGZpZWxkLl92YWxpZGF0b3JzLFxuICAgICAgYXN5bmNWYWxpZGF0b3JzOiBmaWVsZC5fYXN5bmNWYWxpZGF0b3JzLFxuICAgICAgdXBkYXRlT246IGZpZWxkLm1vZGVsT3B0aW9ucy51cGRhdGVPbixcbiAgICB9IGFzIEFic3RyYWN0Q29udHJvbE9wdGlvbnM7XG4gICAgbGV0IGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbDtcblxuICAgIGlmIChmaWVsZC5mb3JtQ29udHJvbCBpbnN0YW5jZW9mIEFic3RyYWN0Q29udHJvbCB8fCBmb3JtLmdldCg8c3RyaW5nPiBwYXRoKSkge1xuICAgICAgY29udHJvbCA9IGZpZWxkLmZvcm1Db250cm9sIHx8IGZvcm0uZ2V0KDxzdHJpbmc+IHBhdGgpO1xuICAgICAgaWYgKFxuICAgICAgICAhKGlzTnVsbE9yVW5kZWZpbmVkKGNvbnRyb2wudmFsdWUpICYmIGlzTnVsbE9yVW5kZWZpbmVkKG1vZGVsW3BhdGhdKSlcbiAgICAgICAgJiYgY29udHJvbC52YWx1ZSAhPT0gbW9kZWxbcGF0aF1cbiAgICAgICAgJiYgY29udHJvbCBpbnN0YW5jZW9mIEZvcm1Db250cm9sXG4gICAgICApIHtcbiAgICAgICAgY29udHJvbC5wYXRjaFZhbHVlKG1vZGVsW3BhdGhdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFic3RyYWN0Q29udHJvbE9wdGlvbnMudmFsaWRhdG9ycyB8fCBhYnN0cmFjdENvbnRyb2xPcHRpb25zLmFzeW5jVmFsaWRhdG9ycykge1xuICAgICAgICBpZiAoYWJzdHJhY3RDb250cm9sT3B0aW9ucy52YWxpZGF0b3JzKSB7XG4gICAgICAgICAgY29udHJvbC5zZXRWYWxpZGF0b3JzKGFic3RyYWN0Q29udHJvbE9wdGlvbnMudmFsaWRhdG9ycyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFic3RyYWN0Q29udHJvbE9wdGlvbnMuYXN5bmNWYWxpZGF0b3JzKSB7XG4gICAgICAgICAgY29udHJvbC5zZXRBc3luY1ZhbGlkYXRvcnMoYWJzdHJhY3RDb250cm9sT3B0aW9ucy5hc3luY1ZhbGlkYXRvcnMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRyb2wudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZmllbGQuX2NvbXBvbmVudEZhY3RvcnkgJiYgZmllbGQuX2NvbXBvbmVudEZhY3RvcnkuY29tcG9uZW50ICYmIGZpZWxkLl9jb21wb25lbnRGYWN0b3J5LmNvbXBvbmVudC5jcmVhdGVDb250cm9sKSB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSBmaWVsZC5fY29tcG9uZW50RmFjdG9yeS5jb21wb25lbnQ7XG4gICAgICBjb25zb2xlLndhcm4oYE5neEZvcm1seTogJyR7Y29tcG9uZW50Lm5hbWV9OjpjcmVhdGVDb250cm9sJyBpcyBkZXByZWNhdGVkIHNpbmNlIHY1LjAsIHVzZSAncHJlUG9wdWxhdGUnIGhvb2sgaW5zdGVhZC5gKTtcbiAgICAgIGNvbnRyb2wgPSBjb21wb25lbnQuY3JlYXRlQ29udHJvbChtb2RlbFtwYXRoXSwgZmllbGQpO1xuICAgIH0gZWxzZSBpZiAoZmllbGQuZmllbGRHcm91cCAmJiAhZmllbGQuZmllbGRBcnJheSkge1xuICAgICAgY29udHJvbCA9IG5ldyBGb3JtR3JvdXAoe30sIGFic3RyYWN0Q29udHJvbE9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAoZmllbGQuZmllbGRBcnJheSkge1xuICAgICAgY29udHJvbCA9IG5ldyBGb3JtQXJyYXkoW10sIGFic3RyYWN0Q29udHJvbE9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250cm9sID0gbmV3IEZvcm1Db250cm9sKG1vZGVsW3BhdGhdLCBhYnN0cmFjdENvbnRyb2xPcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQudGVtcGxhdGVPcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICBjb250cm9sLmRpc2FibGUoKTtcbiAgICB9XG5cbiAgICAvLyBSZXBsYWNlIGRlY29yYXRlZCBwcm9wZXJ0eSB3aXRoIGEgZ2V0dGVyIHRoYXQgcmV0dXJucyB0aGUgb2JzZXJ2YWJsZS5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci1yZWR1eC9zdG9yZS9ibG9iL21hc3Rlci9zcmMvZGVjb3JhdG9ycy9zZWxlY3QudHMjTDc5LUw4NVxuICAgIGlmIChkZWxldGUgZmllbGQudGVtcGxhdGVPcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmllbGQudGVtcGxhdGVPcHRpb25zLCAnZGlzYWJsZWQnLCB7XG4gICAgICAgIGdldDogKCkgPT4gIWZpZWxkLmZvcm1Db250cm9sLmVuYWJsZWQsXG4gICAgICAgIHNldDogKHZhbHVlOiBib29sZWFuKSA9PiB2YWx1ZSA/IGZpZWxkLmZvcm1Db250cm9sLmRpc2FibGUoKSA6IGZpZWxkLmZvcm1Db250cm9sLmVuYWJsZSgpLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQpIHtcbiAgICAgIGZpZWxkLmZvcm1Db250cm9sID0gY29udHJvbDtcbiAgICB9XG5cbiAgICBpZiAoZm9ybSBpbnN0YW5jZW9mIEZvcm1BcnJheSkge1xuICAgICAgaWYgKGZvcm0uYXQoPG51bWJlcj4gcGF0aCkgIT09IGNvbnRyb2wpIHtcbiAgICAgICAgZm9ybS5zZXRDb250cm9sKDxudW1iZXI+IHBhdGgsIGNvbnRyb2wpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZm9ybS5nZXQoPHN0cmluZz4gcGF0aCkgIT09IGNvbnRyb2wpIHtcbiAgICAgICAgZm9ybS5zZXRDb250cm9sKDxzdHJpbmc+IHBhdGgsIGNvbnRyb2wpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRm9ybWx5RXh0ZW5zaW9uLCBGb3JtbHlDb25maWcsIFRlbXBsYXRlTWFuaXB1bGF0b3JzIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZm9ybWx5LmNvbmZpZyc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZ0NhY2hlLCBGb3JtbHlGaWVsZENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZm9ybWx5LmZpZWxkLmNvbmZpZyc7XG5pbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1BcnJheSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IGdldEZpZWxkSWQsIGFzc2lnbk1vZGVsVmFsdWUsIGlzVW5kZWZpbmVkLCBjbG9uZSwgcmVtb3ZlRmllbGRDb250cm9sLCBnZXRGaWVsZFZhbHVlIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG4vKiogQGV4cGVyaW1lbnRhbCAqL1xuZXhwb3J0IGNsYXNzIENvcmVFeHRlbnNpb24gaW1wbGVtZW50cyBGb3JtbHlFeHRlbnNpb24ge1xuICBwcml2YXRlIGZvcm1JZCA9IDA7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZm9ybWx5Q29uZmlnOiBGb3JtbHlDb25maWcpIHsgfVxuXG4gIHByZVBvcHVsYXRlKGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZ0NhY2hlKSB7XG4gICAgdGhpcy5mb3JtbHlDb25maWcuY3JlYXRlQ29tcG9uZW50SW5zdGFuY2UoZmllbGQpO1xuICAgIHRoaXMuZ2V0RmllbGRDb21wb25lbnRJbnN0YW5jZShmaWVsZCkucHJlUG9wdWxhdGUoKTtcbiAgICBpZiAoZmllbGQucGFyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZmllbGRUcmFuc2Zvcm1zID0gKGZpZWxkLm9wdGlvbnMgJiYgZmllbGQub3B0aW9ucy5maWVsZFRyYW5zZm9ybSkgfHwgdGhpcy5mb3JtbHlDb25maWcuZXh0cmFzLmZpZWxkVHJhbnNmb3JtO1xuICAgIChBcnJheS5pc0FycmF5KGZpZWxkVHJhbnNmb3JtcykgPyBmaWVsZFRyYW5zZm9ybXMgOiBbZmllbGRUcmFuc2Zvcm1zXSkuZm9yRWFjaChmaWVsZFRyYW5zZm9ybSA9PiB7XG4gICAgICBpZiAoZmllbGRUcmFuc2Zvcm0pIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBOZ3hGb3JtbHk6IGZpZWxkVHJhbnNmb3JtIGlzIGRlcHJlY2F0ZWQgc2luY2UgdjUuMCwgdXNlIGN1c3RvbSBleHRlbnNpb24gaW5zdGVhZC5gKTtcbiAgICAgICAgY29uc3QgZmllbGRHcm91cCA9IGZpZWxkVHJhbnNmb3JtKGZpZWxkLmZpZWxkR3JvdXAsIGZpZWxkLm1vZGVsLCA8Rm9ybUdyb3VwPmZpZWxkLmZvcm1Db250cm9sLCBmaWVsZC5vcHRpb25zKTtcbiAgICAgICAgaWYgKCFmaWVsZEdyb3VwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmaWVsZFRyYW5zZm9ybSBtdXN0IHJldHVybiBhbiBhcnJheSBvZiBmaWVsZHMnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgb25Qb3B1bGF0ZShmaWVsZDogRm9ybWx5RmllbGRDb25maWdDYWNoZSkge1xuICAgIHRoaXMuaW5pdEZpZWxkT3B0aW9ucyhmaWVsZCk7XG4gICAgdGhpcy5nZXRGaWVsZENvbXBvbmVudEluc3RhbmNlKGZpZWxkKS5vblBvcHVsYXRlKCk7XG4gICAgaWYgKGZpZWxkLmZpZWxkR3JvdXApIHtcbiAgICAgIGZpZWxkLmZpZWxkR3JvdXAuZm9yRWFjaCgoZiwgaW5kZXgpID0+IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsICdwYXJlbnQnLCB7IGdldDogKCkgPT4gZmllbGQsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsICdpbmRleCcsIHsgZ2V0OiAoKSA9PiBpbmRleCwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAgICAgICB0aGlzLmZvcm1JZCsrO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcG9zdFBvcHVsYXRlKGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZ0NhY2hlKSB7XG4gICAgdGhpcy5nZXRGaWVsZENvbXBvbmVudEluc3RhbmNlKGZpZWxkKS5wb3N0UG9wdWxhdGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdEZpZWxkT3B0aW9ucyhmaWVsZDogRm9ybWx5RmllbGRDb25maWdDYWNoZSkge1xuICAgIGNvbnN0IHJvb3QgPSA8Rm9ybWx5RmllbGRDb25maWdDYWNoZT4gZmllbGQucGFyZW50O1xuICAgIGlmICghcm9vdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWVsZCwgJ2Zvcm0nLCB7IGdldDogKCkgPT4gcm9vdC5mb3JtQ29udHJvbCwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWVsZCwgJ29wdGlvbnMnLCB7IGdldDogKCkgPT4gcm9vdC5vcHRpb25zLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpZWxkLCAnbW9kZWwnLCB7XG4gICAgICBnZXQ6ICgpID0+IGZpZWxkLmtleSAmJiBmaWVsZC5maWVsZEdyb3VwID8gZ2V0RmllbGRWYWx1ZShmaWVsZCkgOiByb290Lm1vZGVsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgZmllbGQuaWQgPSBnZXRGaWVsZElkKGBmb3JtbHlfJHt0aGlzLmZvcm1JZH1gLCBmaWVsZCwgZmllbGRbJ2luZGV4J10pO1xuICAgIGZpZWxkLnRlbXBsYXRlT3B0aW9ucyA9IGZpZWxkLnRlbXBsYXRlT3B0aW9ucyB8fCB7fTtcbiAgICBmaWVsZC5tb2RlbE9wdGlvbnMgPSBmaWVsZC5tb2RlbE9wdGlvbnMgfHwge307XG4gICAgZmllbGQuaG9va3MgPSBmaWVsZC5ob29rcyB8fCB7fTtcbiAgICBpZiAoZmllbGQubGlmZWN5Y2xlKSB7XG4gICAgICBjb25zb2xlLndhcm4oYE5neEZvcm1seTogJ2xpZmVjeWNsZScgaXMgZGVwcmVjYXRlZCBzaW5jZSB2NS4wLCB1c2UgJ2hvb2tzJyBpbnN0ZWFkLmApO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC50eXBlICYmIGZpZWxkLmtleSkge1xuICAgICAgZmllbGQudGVtcGxhdGVPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIGxhYmVsOiAnJyxcbiAgICAgICAgcGxhY2Vob2xkZXI6ICcnLFxuICAgICAgICBmb2N1czogZmFsc2UsXG4gICAgICB9LCBmaWVsZC50ZW1wbGF0ZU9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC50ZW1wbGF0ZSAmJiBmaWVsZC50eXBlICE9PSAnZm9ybWx5LXRlbXBsYXRlJykge1xuICAgICAgaWYgKGZpZWxkLnR5cGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBOZ3hGb3JtbHk6IHBhc3NpbmcgJ3R5cGUnIHByb3BlcnR5IGlzIG5vdCBhbGxvd2VkIHdoZW4gJ3RlbXBsYXRlJyBpcyBzZXQuYCk7XG4gICAgICB9XG4gICAgICBmaWVsZC50eXBlID0gJ2Zvcm1seS10ZW1wbGF0ZSc7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLnR5cGUpIHtcbiAgICAgIHRoaXMuZm9ybWx5Q29uZmlnLmdldE1lcmdlZEZpZWxkKGZpZWxkKTtcbiAgICB9XG4gICAgaWYgKGZpZWxkLmtleSAmJiBpc1VuZGVmaW5lZChmaWVsZC5kZWZhdWx0VmFsdWUpICYmIChmaWVsZC5maWVsZEdyb3VwIHx8IGZpZWxkLmZpZWxkQXJyYXkpKSB7XG4gICAgICBmaWVsZC5kZWZhdWx0VmFsdWUgPSBmaWVsZC5maWVsZEFycmF5ID8gW10gOiB7fTtcbiAgICB9XG5cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZpZWxkLmRlZmF1bHRWYWx1ZSkgJiYgaXNVbmRlZmluZWQoZ2V0RmllbGRWYWx1ZShmaWVsZCkpKSB7XG4gICAgICBhc3NpZ25Nb2RlbFZhbHVlKHJvb3QubW9kZWwsIGZpZWxkLmtleSwgZmllbGQuZGVmYXVsdFZhbHVlKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRGaWVsZFdyYXBwZXJzKGZpZWxkKTtcbiAgICBpZiAoZmllbGQuZmllbGRBcnJheSkge1xuICAgICAgdGhpcy5pbml0RmllbGRBcnJheShmaWVsZCk7XG4gICAgfVxuXG4gICAgaWYgKCFmaWVsZC50eXBlICYmIGZpZWxkLmZpZWxkR3JvdXApIHtcbiAgICAgIGZpZWxkLnR5cGUgPSAnZm9ybWx5LWdyb3VwJztcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGluaXRGaWVsZEFycmF5KGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZ0NhY2hlKSB7XG4gICAgZmllbGQuZmllbGRHcm91cCA9IGZpZWxkLmZpZWxkR3JvdXAgfHwgW107XG4gICAgaWYgKGZpZWxkLmZpZWxkR3JvdXAubGVuZ3RoID4gZmllbGQubW9kZWwubGVuZ3RoKSB7XG4gICAgICBmb3IgKGxldCBpID0gZmllbGQuZmllbGRHcm91cC5sZW5ndGg7IGkgPj0gZmllbGQubW9kZWwubGVuZ3RoOyAtLWkpIHtcbiAgICAgICAgcmVtb3ZlRmllbGRDb250cm9sKGZpZWxkLmZvcm1Db250cm9sIGFzIEZvcm1BcnJheSwgaSk7XG4gICAgICAgIGZpZWxkLmZpZWxkR3JvdXAuc3BsaWNlKGksIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSBmaWVsZC5maWVsZEdyb3VwLmxlbmd0aDsgaSA8IGZpZWxkLm1vZGVsLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBmID0geyAuLi5jbG9uZShmaWVsZC5maWVsZEFycmF5KSwga2V5OiBgJHtpfWAgfTtcbiAgICAgIGZpZWxkLmZpZWxkR3JvdXAucHVzaChmKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGluaXRGaWVsZFdyYXBwZXJzKGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZykge1xuICAgIGZpZWxkLndyYXBwZXJzID0gZmllbGQud3JhcHBlcnMgfHwgW107XG4gICAgY29uc3QgZmllbGRUZW1wbGF0ZU1hbmlwdWxhdG9yczogVGVtcGxhdGVNYW5pcHVsYXRvcnMgPSB7XG4gICAgICBwcmVXcmFwcGVyOiBbXSxcbiAgICAgIHBvc3RXcmFwcGVyOiBbXSxcbiAgICAgIC4uLihmaWVsZC50ZW1wbGF0ZU9wdGlvbnMudGVtcGxhdGVNYW5pcHVsYXRvcnMgfHwge30pLFxuICAgIH07XG5cbiAgICBmaWVsZC53cmFwcGVycyA9IFtcbiAgICAgIC4uLnRoaXMuZm9ybWx5Q29uZmlnLnRlbXBsYXRlTWFuaXB1bGF0b3JzLnByZVdyYXBwZXIubWFwKG0gPT4gbShmaWVsZCkpLFxuICAgICAgLi4uZmllbGRUZW1wbGF0ZU1hbmlwdWxhdG9ycy5wcmVXcmFwcGVyLm1hcChtID0+IG0oZmllbGQpKSxcbiAgICAgIC4uLmZpZWxkLndyYXBwZXJzLFxuICAgICAgLi4udGhpcy5mb3JtbHlDb25maWcudGVtcGxhdGVNYW5pcHVsYXRvcnMucG9zdFdyYXBwZXIubWFwKG0gPT4gbShmaWVsZCkpLFxuICAgICAgLi4uZmllbGRUZW1wbGF0ZU1hbmlwdWxhdG9ycy5wb3N0V3JhcHBlci5tYXAobSA9PiBtKGZpZWxkKSksXG4gICAgXS5maWx0ZXIoKGVsLCBpLCBhKSA9PiBlbCAmJiBpID09PSBhLmluZGV4T2YoZWwpKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RmllbGRDb21wb25lbnRJbnN0YW5jZShmaWVsZDogRm9ybWx5RmllbGRDb25maWdDYWNoZSkge1xuICAgIGxldCBpbnN0YW5jZTogRm9ybWx5RXh0ZW5zaW9uID0ge307XG4gICAgaWYgKGZpZWxkLl9jb21wb25lbnRGYWN0b3J5ICYmIGZpZWxkLl9jb21wb25lbnRGYWN0b3J5LmNvbXBvbmVudFJlZikge1xuICAgICAgaW5zdGFuY2UgPSBmaWVsZC5fY29tcG9uZW50RmFjdG9yeS5jb21wb25lbnRSZWYuaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHByZVBvcHVsYXRlOiAoKSA9PiBpbnN0YW5jZS5wcmVQb3B1bGF0ZSAmJiBpbnN0YW5jZS5wcmVQb3B1bGF0ZShmaWVsZCksXG4gICAgICBvblBvcHVsYXRlOiAoKSA9PiBpbnN0YW5jZS5vblBvcHVsYXRlICYmIGluc3RhbmNlLm9uUG9wdWxhdGUoZmllbGQpLFxuICAgICAgcG9zdFBvcHVsYXRlOiAoKSA9PiBpbnN0YW5jZS5wb3N0UG9wdWxhdGUgJiYgaW5zdGFuY2UucG9zdFBvcHVsYXRlKGZpZWxkKSxcbiAgICB9O1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgQU5BTFlaRV9GT1JfRU5UUllfQ09NUE9ORU5UUywgSW5qZWN0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEZvcm1seUZvcm0gfSBmcm9tICcuL2NvbXBvbmVudHMvZm9ybWx5LmZvcm0nO1xuaW1wb3J0IHsgRm9ybWx5RmllbGQgfSBmcm9tICcuL2NvbXBvbmVudHMvZm9ybWx5LmZpZWxkJztcbmltcG9ydCB7IEZvcm1seUF0dHJpYnV0ZXMgfSBmcm9tICcuL2NvbXBvbmVudHMvZm9ybWx5LmF0dHJpYnV0ZXMnO1xuaW1wb3J0IHsgRm9ybWx5Q29uZmlnLCBDb25maWdPcHRpb24sIEZPUk1MWV9DT05GSUcgfSBmcm9tICcuL3NlcnZpY2VzL2Zvcm1seS5jb25maWcnO1xuaW1wb3J0IHsgRm9ybWx5Rm9ybUJ1aWxkZXIgfSBmcm9tICcuL3NlcnZpY2VzL2Zvcm1seS5mb3JtLmJ1aWxkZXInO1xuaW1wb3J0IHsgRm9ybWx5R3JvdXAgfSBmcm9tICcuL2NvbXBvbmVudHMvZm9ybWx5Lmdyb3VwJztcbmltcG9ydCB7IEZvcm1seVZhbGlkYXRpb25NZXNzYWdlIH0gZnJvbSAnLi90ZW1wbGF0ZXMvZm9ybWx5LnZhbGlkYXRpb24tbWVzc2FnZSc7XG5pbXBvcnQgeyBGb3JtbHlUZW1wbGF0ZVR5cGUgfSBmcm9tICcuL3RlbXBsYXRlcy9maWVsZC10ZW1wbGF0ZS50eXBlJztcblxuaW1wb3J0IHsgRmllbGRFeHByZXNzaW9uRXh0ZW5zaW9uIH0gZnJvbSAnLi9leHRlbnNpb25zL2ZpZWxkLWV4cHJlc3Npb24vZmllbGQtZXhwcmVzc2lvbic7XG5pbXBvcnQgeyBGaWVsZFZhbGlkYXRpb25FeHRlbnNpb24gfSBmcm9tICcuL2V4dGVuc2lvbnMvZmllbGQtdmFsaWRhdGlvbi9maWVsZC12YWxpZGF0aW9uJztcbmltcG9ydCB7IEZpZWxkRm9ybUV4dGVuc2lvbiB9IGZyb20gJy4vZXh0ZW5zaW9ucy9maWVsZC1mb3JtL2ZpZWxkLWZvcm0nO1xuaW1wb3J0IHsgQ29yZUV4dGVuc2lvbiB9IGZyb20gJy4vZXh0ZW5zaW9ucy9jb3JlL2NvcmUnO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdEZvcm1seUNvbmZpZyhmb3JtbHlDb25maWc6IEZvcm1seUNvbmZpZyk6IENvbmZpZ09wdGlvbiB7XG4gIHJldHVybiB7XG4gICAgdHlwZXM6IFtcbiAgICAgIHsgbmFtZTogJ2Zvcm1seS1ncm91cCcsIGNvbXBvbmVudDogRm9ybWx5R3JvdXAgfSxcbiAgICAgIHsgbmFtZTogJ2Zvcm1seS10ZW1wbGF0ZScsIGNvbXBvbmVudDogRm9ybWx5VGVtcGxhdGVUeXBlIH0sXG4gICAgXSxcbiAgICBleHRlbnNpb25zOiBbXG4gICAgICB7IG5hbWU6ICdjb3JlJywgZXh0ZW5zaW9uOiBuZXcgQ29yZUV4dGVuc2lvbihmb3JtbHlDb25maWcpIH0sXG4gICAgICB7IG5hbWU6ICdmaWVsZC12YWxpZGF0aW9uJywgZXh0ZW5zaW9uOiBuZXcgRmllbGRWYWxpZGF0aW9uRXh0ZW5zaW9uKGZvcm1seUNvbmZpZykgfSxcbiAgICAgIHsgbmFtZTogJ2ZpZWxkLWZvcm0nLCBleHRlbnNpb246IG5ldyBGaWVsZEZvcm1FeHRlbnNpb24oKSB9LFxuICAgICAgeyBuYW1lOiAnZmllbGQtZXhwcmVzc2lvbicsIGV4dGVuc2lvbjogbmV3IEZpZWxkRXhwcmVzc2lvbkV4dGVuc2lvbigpIH0sXG4gICAgXSxcbiAgfTtcbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgRm9ybWx5Rm9ybSxcbiAgICBGb3JtbHlGaWVsZCxcbiAgICBGb3JtbHlBdHRyaWJ1dGVzLFxuICAgIEZvcm1seUdyb3VwLFxuICAgIEZvcm1seVZhbGlkYXRpb25NZXNzYWdlLFxuICAgIEZvcm1seVRlbXBsYXRlVHlwZSxcbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbRm9ybWx5R3JvdXAsIEZvcm1seVRlbXBsYXRlVHlwZV0sXG4gIGV4cG9ydHM6IFtGb3JtbHlGb3JtLCBGb3JtbHlGaWVsZCwgRm9ybWx5QXR0cmlidXRlcywgRm9ybWx5R3JvdXAsIEZvcm1seVZhbGlkYXRpb25NZXNzYWdlXSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seU1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KGNvbmZpZzogQ29uZmlnT3B0aW9uID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEZvcm1seU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7IHByb3ZpZGU6IEZPUk1MWV9DT05GSUcsIG11bHRpOiB0cnVlLCB1c2VGYWN0b3J5OiBkZWZhdWx0Rm9ybWx5Q29uZmlnLCBkZXBzOiBbRm9ybWx5Q29uZmlnXSB9LFxuICAgICAgICB7IHByb3ZpZGU6IEZPUk1MWV9DT05GSUcsIHVzZVZhbHVlOiBjb25maWcsIG11bHRpOiB0cnVlIH0sXG4gICAgICAgIHsgcHJvdmlkZTogQU5BTFlaRV9GT1JfRU5UUllfQ09NUE9ORU5UUywgdXNlVmFsdWU6IGNvbmZpZywgbXVsdGk6IHRydWUgfSxcbiAgICAgICAgRm9ybWx5Q29uZmlnLFxuICAgICAgICBGb3JtbHlGb3JtQnVpbGRlcixcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBmb3JDaGlsZChjb25maWc6IENvbmZpZ09wdGlvbiA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBGb3JtbHlNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgeyBwcm92aWRlOiBGT1JNTFlfQ09ORklHLCB1c2VWYWx1ZTogY29uZmlnLCBtdWx0aTogdHJ1ZSB9LFxuICAgICAgICB7IHByb3ZpZGU6IEFOQUxZWkVfRk9SX0VOVFJZX0NPTVBPTkVOVFMsIHVzZVZhbHVlOiBjb25maWcsIG11bHRpOiB0cnVlIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBjb25maWdTZXJ2aWNlOiBGb3JtbHlDb25maWcsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChGT1JNTFlfQ09ORklHKSBjb25maWdzOiBDb25maWdPcHRpb25bXSA9IFtdLFxuICApIHtcbiAgICBpZiAoIWNvbmZpZ3MpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25maWdzLmZvckVhY2goY29uZmlnID0+IGNvbmZpZ1NlcnZpY2UuYWRkQ29uZmlnKGNvbmZpZykpO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUNBOzs7Ozs7QUFHQSxTQUFnQixVQUFVLENBQUMsTUFBYyxFQUFFLEtBQXdCLEVBQUUsS0FBb0I7SUFDdkYsSUFBSSxLQUFLLENBQUMsRUFBRTtRQUFFLE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQzs7UUFDMUIsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJO0lBQ3JCLElBQUksQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLFFBQVE7UUFBRSxJQUFJLEdBQUcsVUFBVSxDQUFDO0lBQy9DLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ25EOzs7OztBQUVELFNBQWdCLFVBQVUsQ0FBQyxLQUFrRTs7SUFFM0YsSUFBSSxDQUFDLG9CQUFPLEtBQUssSUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLG9CQUFPLEtBQUssSUFB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