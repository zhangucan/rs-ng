import { Injectable, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class FormlyJsonschema {
    /**
     * @param {?} jsonSchema
     * @return {?}
     */
    toFieldConfig(jsonSchema) {
        return this._toFieldConfig(jsonSchema);
    }
    /**
     * @param {?} jsonSchema
     * @param {?=} key
     * @return {?}
     */
    _toFieldConfig(jsonSchema, key) {
        /** @type {?} */
        const field = Object.assign({}, (key ? { key } : {}), { type: (/** @type {?} */ (jsonSchema.type)), defaultValue: jsonSchema.default, templateOptions: {
                minLength: jsonSchema.minLength,
                maxLength: jsonSchema.maxLength,
                label: jsonSchema.title,
                readonly: jsonSchema.readOnly,
                pattern: jsonSchema.pattern,
                description: jsonSchema.description,
            } });
        if (jsonSchema.enum) {
            if (field.type === 'integer' || field.type === 'number') {
                field.parsers = [Number];
            }
            field.type = 'enum';
            field.templateOptions.options = jsonSchema.enum;
            field.templateOptions.labelProp = item => item;
            field.templateOptions.valueProp = item => item;
        }
        switch (jsonSchema.type) {
            case 'object': {
                field.fieldGroup = [];
                Object.keys(jsonSchema.properties).forEach(p => {
                    /** @type {?} */
                    const child = this._toFieldConfig((/** @type {?} */ (jsonSchema.properties[p])), p);
                    if (Array.isArray(jsonSchema.required) && jsonSchema.required.indexOf(p) !== -1) {
                        child.templateOptions.required = true;
                    }
                    field.fieldGroup.push(child);
                });
                break;
            }
            case 'array': {
                if (!Array.isArray(jsonSchema.items)) {
                    field.fieldArray = this._toFieldConfig((/** @type {?} */ (jsonSchema.items)));
                }
                else {
                    field['_fieldArray'] = [];
                    field.fieldGroup = [];
                    jsonSchema.items.forEach(item => field['_fieldArray'].push(this._toFieldConfig((/** @type {?} */ (item)))));
                    if (jsonSchema.additionalItems) {
                        field['_additionalFieldArray'] = this._toFieldConfig((/** @type {?} */ (jsonSchema.additionalItems)));
                    }
                    Object.defineProperty(field, 'fieldArray', {
                        get: () => {
                            return field['_fieldArray'][field.fieldGroup.length] || field['_additionalFieldArray'];
                        },
                        enumerable: true,
                        configurable: true,
                    });
                }
                break;
            }
        }
        return field;
    }
}
FormlyJsonschema.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */ FormlyJsonschema.ngInjectableDef = defineInjectable({ factory: function FormlyJsonschema_Factory() { return new FormlyJsonschema(); }, token: FormlyJsonschema, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { FormlyJsonschema };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZvcm1seS1jb3JlLWpzb24tc2NoZW1hLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9Abmd4LWZvcm1seS9jb3JlL2pzb24tc2NoZW1hL2Zvcm1seS1qc29uLXNjaGVtYS5zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5pbXBvcnQgeyBKU09OU2NoZW1hNywgSlNPTlNjaGVtYTdUeXBlTmFtZSB9IGZyb20gJ2pzb24tc2NoZW1hJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBGb3JtbHlKc29uc2NoZW1hIHtcbiAgdG9GaWVsZENvbmZpZyhqc29uU2NoZW1hOiBKU09OU2NoZW1hNyk6IEZvcm1seUZpZWxkQ29uZmlnIHtcbiAgICByZXR1cm4gdGhpcy5fdG9GaWVsZENvbmZpZyhqc29uU2NoZW1hKTtcbiAgfVxuXG4gIF90b0ZpZWxkQ29uZmlnKGpzb25TY2hlbWE6IEpTT05TY2hlbWE3LCBrZXk/OiBzdHJpbmcpOiBGb3JtbHlGaWVsZENvbmZpZyB7XG4gICAgY29uc3QgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnID0ge1xuICAgICAgLi4uKGtleSA/IHsga2V5IH0gOiB7fSksXG4gICAgICB0eXBlOiBqc29uU2NoZW1hLnR5cGUgYXMgSlNPTlNjaGVtYTdUeXBlTmFtZSxcbiAgICAgIGRlZmF1bHRWYWx1ZToganNvblNjaGVtYS5kZWZhdWx0LFxuICAgICAgdGVtcGxhdGVPcHRpb25zOiB7XG4gICAgICAgIG1pbkxlbmd0aDoganNvblNjaGVtYS5taW5MZW5ndGgsXG4gICAgICAgIG1heExlbmd0aDoganNvblNjaGVtYS5tYXhMZW5ndGgsXG4gICAgICAgIGxhYmVsOiBqc29uU2NoZW1hLnRpdGxlLFxuICAgICAgICByZWFkb25seToganNvblNjaGVtYS5yZWFkT25seSxcbiAgICAgICAgcGF0dGVybjoganNvblNjaGVtYS5wYXR0ZXJuLFxuICAgICAgICBkZXNjcmlwdGlvbjoganNvblNjaGVtYS5kZXNjcmlwdGlvbixcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGlmIChqc29uU2NoZW1hLmVudW0pIHtcbiAgICAgIGlmIChmaWVsZC50eXBlID09PSAnaW50ZWdlcicgfHwgZmllbGQudHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgZmllbGQucGFyc2VycyA9IFtOdW1iZXJdO1xuICAgICAgfVxuICAgICAgZmllbGQudHlwZSA9ICdlbnVtJztcbiAgICAgIGZpZWxkLnRlbXBsYXRlT3B0aW9ucy5vcHRpb25zID0ganNvblNjaGVtYS5lbnVtO1xuICAgICAgZmllbGQudGVtcGxhdGVPcHRpb25zLmxhYmVsUHJvcCA9IGl0ZW0gPT4gaXRlbTtcbiAgICAgIGZpZWxkLnRlbXBsYXRlT3B0aW9ucy52YWx1ZVByb3AgPSBpdGVtID0+IGl0ZW07XG4gICAgfVxuXG4gICAgc3dpdGNoIChqc29uU2NoZW1hLnR5cGUpIHtcbiAgICAgIGNhc2UgJ29iamVjdCc6IHtcbiAgICAgICAgZmllbGQuZmllbGRHcm91cCA9IFtdO1xuICAgICAgICBPYmplY3Qua2V5cyhqc29uU2NoZW1hLnByb3BlcnRpZXMpLmZvckVhY2gocCA9PiB7XG4gICAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLl90b0ZpZWxkQ29uZmlnKDxKU09OU2NoZW1hNz4ganNvblNjaGVtYS5wcm9wZXJ0aWVzW3BdLCBwKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShqc29uU2NoZW1hLnJlcXVpcmVkKSAmJiBqc29uU2NoZW1hLnJlcXVpcmVkLmluZGV4T2YocCkgIT09IC0xKSB7XG4gICAgICAgICAgICBjaGlsZC50ZW1wbGF0ZU9wdGlvbnMucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmaWVsZC5maWVsZEdyb3VwLnB1c2goY2hpbGQpO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdhcnJheSc6IHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGpzb25TY2hlbWEuaXRlbXMpKSB7XG4gICAgICAgICAgZmllbGQuZmllbGRBcnJheSA9IHRoaXMuX3RvRmllbGRDb25maWcoanNvblNjaGVtYS5pdGVtcyBhcyBKU09OU2NoZW1hNyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmllbGRbJ19maWVsZEFycmF5J10gPSBbXTtcbiAgICAgICAgICBmaWVsZC5maWVsZEdyb3VwID0gW107XG4gICAgICAgICAganNvblNjaGVtYS5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4gZmllbGRbJ19maWVsZEFycmF5J10ucHVzaCh0aGlzLl90b0ZpZWxkQ29uZmlnKDxKU09OU2NoZW1hNz4gaXRlbSkpKTtcbiAgICAgICAgICBpZiAoanNvblNjaGVtYS5hZGRpdGlvbmFsSXRlbXMpIHtcbiAgICAgICAgICAgIGZpZWxkWydfYWRkaXRpb25hbEZpZWxkQXJyYXknXSA9IHRoaXMuX3RvRmllbGRDb25maWcoPEpTT05TY2hlbWE3PiBqc29uU2NoZW1hLmFkZGl0aW9uYWxJdGVtcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpZWxkLCAnZmllbGRBcnJheScsIHtcbiAgICAgICAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gZmllbGRbJ19maWVsZEFycmF5J11bZmllbGQuZmllbGRHcm91cC5sZW5ndGhdIHx8IGZpZWxkWydfYWRkaXRpb25hbEZpZWxkQXJyYXknXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAg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