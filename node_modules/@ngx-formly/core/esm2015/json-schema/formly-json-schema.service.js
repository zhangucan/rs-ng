/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class FormlyJsonschema {
    /**
     * @param {?} jsonSchema
     * @return {?}
     */
    toFieldConfig(jsonSchema) {
        return this._toFieldConfig(jsonSchema);
    }
    /**
     * @param {?} jsonSchema
     * @param {?=} key
     * @return {?}
     */
    _toFieldConfig(jsonSchema, key) {
        /** @type {?} */
        const field = Object.assign({}, (key ? { key } : {}), { type: (/** @type {?} */ (jsonSchema.type)), defaultValue: jsonSchema.default, templateOptions: {
                minLength: jsonSchema.minLength,
                maxLength: jsonSchema.maxLength,
                label: jsonSchema.title,
                readonly: jsonSchema.readOnly,
                pattern: jsonSchema.pattern,
                description: jsonSchema.description,
            } });
        if (jsonSchema.enum) {
            if (field.type === 'integer' || field.type === 'number') {
                field.parsers = [Number];
            }
            field.type = 'enum';
            field.templateOptions.options = jsonSchema.enum;
            field.templateOptions.labelProp = item => item;
            field.templateOptions.valueProp = item => item;
        }
        switch (jsonSchema.type) {
            case 'object': {
                field.fieldGroup = [];
                Object.keys(jsonSchema.properties).forEach(p => {
                    /** @type {?} */
                    const child = this._toFieldConfig((/** @type {?} */ (jsonSchema.properties[p])), p);
                    if (Array.isArray(jsonSchema.required) && jsonSchema.required.indexOf(p) !== -1) {
                        child.templateOptions.required = true;
                    }
                    field.fieldGroup.push(child);
                });
                break;
            }
            case 'array': {
                if (!Array.isArray(jsonSchema.items)) {
                    field.fieldArray = this._toFieldConfig((/** @type {?} */ (jsonSchema.items)));
                }
                else {
                    field['_fieldArray'] = [];
                    field.fieldGroup = [];
                    jsonSchema.items.forEach(item => field['_fieldArray'].push(this._toFieldConfig((/** @type {?} */ (item)))));
                    if (jsonSchema.additionalItems) {
                        field['_additionalFieldArray'] = this._toFieldConfig((/** @type {?} */ (jsonSchema.additionalItems)));
                    }
                    Object.defineProperty(field, 'fieldArray', {
                        get: () => {
                            return field['_fieldArray'][field.fieldGroup.length] || field['_additionalFieldArray'];
                        },
                        enumerable: true,
                        configurable: true,
                    });
                }
                break;
            }
        }
        return field;
    }
}
FormlyJsonschema.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */ FormlyJsonschema.ngInjectableDef = i0.defineInjectable({ factory: function FormlyJsonschema_Factory() { return new FormlyJsonschema(); }, token: FormlyJsonschema, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LWpzb24tc2NoZW1hLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWZvcm1seS9jb3JlL2pzb24tc2NoZW1hLyIsInNvdXJjZXMiOlsiZm9ybWx5LWpzb24tc2NoZW1hLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzNDLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7O0lBQzNCLGFBQWEsQ0FBQyxVQUF1QjtRQUNuQyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekMsQ0FBQzs7Ozs7O0lBRUQsY0FBYyxDQUFDLFVBQXVCLEVBQUUsR0FBWTs7Y0FDNUMsS0FBSyxxQkFDTixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQ3ZCLElBQUksRUFBRSxtQkFBQSxVQUFVLENBQUMsSUFBSSxFQUF1QixFQUM1QyxZQUFZLEVBQUUsVUFBVSxDQUFDLE9BQU8sRUFDaEMsZUFBZSxFQUFFO2dCQUNmLFNBQVMsRUFBRSxVQUFVLENBQUMsU0FBUztnQkFDL0IsU0FBUyxFQUFFLFVBQVUsQ0FBQyxTQUFTO2dCQUMvQixLQUFLLEVBQUUsVUFBVSxDQUFDLEtBQUs7Z0JBQ3ZCLFFBQVEsRUFBRSxVQUFVLENBQUMsUUFBUTtnQkFDN0IsT0FBTyxFQUFFLFVBQVUsQ0FBQyxPQUFPO2dCQUMzQixXQUFXLEVBQUUsVUFBVSxDQUFDLFdBQVc7YUFDcEMsR0FDRjtRQUVELElBQUksVUFBVSxDQUFDLElBQUksRUFBRTtZQUNuQixJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO2dCQUN2RCxLQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDMUI7WUFDRCxLQUFLLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztZQUNwQixLQUFLLENBQUMsZUFBZSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDO1lBQ2hELEtBQUssQ0FBQyxlQUFlLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO1lBQy9DLEtBQUssQ0FBQyxlQUFlLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO1NBQ2hEO1FBRUQsUUFBUSxVQUFVLENBQUMsSUFBSSxFQUFFO1lBQ3ZCLEtBQUssUUFBUSxDQUFDLENBQUM7Z0JBQ2IsS0FBSyxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7Z0JBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTs7MEJBQ3ZDLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1CQUFjLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUEsRUFBRSxDQUFDLENBQUM7b0JBQzVFLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7d0JBQy9FLEtBQUssQ0FBQyxlQUFlLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztxQkFDdkM7b0JBQ0QsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQy9CLENBQUMsQ0FBQyxDQUFDO2dCQUNILE1BQU07YUFDUDtZQUNELEtBQUssT0FBTyxDQUFDLENBQUM7Z0JBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUNwQyxLQUFLLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsbUJBQUEsVUFBVSxDQUFDLEtBQUssRUFBZSxDQUFDLENBQUM7aUJBQ3pFO3FCQUFNO29CQUNMLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLENBQUM7b0JBQzFCLEtBQUssQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO29CQUN0QixVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtQkFBYyxJQUFJLEVBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDckcsSUFBSSxVQUFVLENBQUMsZUFBZSxFQUFFO3dCQUM5QixLQUFLLENBQUMsdUJBQXVCLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1CQUFjLFVBQVUsQ0FBQyxlQUFlLEVBQUEsQ0FBQyxDQUFDO3FCQUNoRztvQkFFRCxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUU7d0JBQ3pDLEdBQUcsRUFBRSxHQUFHLEVBQUU7NEJBQ1IsT0FBTyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQzt3QkFDekYsQ0FBQzt3QkFDRCxVQUFVLEVBQUUsSUFBSTt3QkFDaEIsWUFBWSxFQUFFLElBQUk7cUJBQ25CLENBQUMsQ0FBQztpQkFDSjtnQkFDRCxNQUFNO2FBQ1A7U0FDRjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7O1lBbkVGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZyB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgSlNPTlNjaGVtYTcsIEpTT05TY2hlbWE3VHlwZU5hbWUgfSBmcm9tICdqc29uLXNjaGVtYSc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgRm9ybWx5SnNvbnNjaGVtYSB7XG4gIHRvRmllbGRDb25maWcoanNvblNjaGVtYTogSlNPTlNjaGVtYTcpOiBGb3JtbHlGaWVsZENvbmZpZyB7XG4gICAgcmV0dXJuIHRoaXMuX3RvRmllbGRDb25maWcoanNvblNjaGVtYSk7XG4gIH1cblxuICBfdG9GaWVsZENvbmZpZyhqc29uU2NoZW1hOiBKU09OU2NoZW1hNywga2V5Pzogc3RyaW5nKTogRm9ybWx5RmllbGRDb25maWcge1xuICAgIGNvbnN0IGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZyA9IHtcbiAgICAgIC4uLihrZXkgPyB7IGtleSB9IDoge30pLFxuICAgICAgdHlwZToganNvblNjaGVtYS50eXBlIGFzIEpTT05TY2hlbWE3VHlwZU5hbWUsXG4gICAgICBkZWZhdWx0VmFsdWU6IGpzb25TY2hlbWEuZGVmYXVsdCxcbiAgICAgIHRlbXBsYXRlT3B0aW9uczoge1xuICAgICAgICBtaW5MZW5ndGg6IGpzb25TY2hlbWEubWluTGVuZ3RoLFxuICAgICAgICBtYXhMZW5ndGg6IGpzb25TY2hlbWEubWF4TGVuZ3RoLFxuICAgICAgICBsYWJlbDoganNvblNjaGVtYS50aXRsZSxcbiAgICAgICAgcmVhZG9ubHk6IGpzb25TY2hlbWEucmVhZE9ubHksXG4gICAgICAgIHBhdHRlcm46IGpzb25TY2hlbWEucGF0dGVybixcbiAgICAgICAgZGVzY3JpcHRpb246IGpzb25TY2hlbWEuZGVzY3JpcHRpb24sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBpZiAoanNvblNjaGVtYS5lbnVtKSB7XG4gICAgICBpZiAoZmllbGQudHlwZSA9PT0gJ2ludGVnZXInIHx8IGZpZWxkLnR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGZpZWxkLnBhcnNlcnMgPSBbTnVtYmVyXTtcbiAgICAgIH1cbiAgICAgIGZpZWxkLnR5cGUgPSAnZW51bSc7XG4gICAgICBmaWVsZC50ZW1wbGF0ZU9wdGlvbnMub3B0aW9ucyA9IGpzb25TY2hlbWEuZW51bTtcbiAgICAgIGZpZWxkLnRlbXBsYXRlT3B0aW9ucy5sYWJlbFByb3AgPSBpdGVtID0+IGl0ZW07XG4gICAgICBmaWVsZC50ZW1wbGF0ZU9wdGlvbnMudmFsdWVQcm9wID0gaXRlbSA9PiBpdGVtO1xuICAgIH1cblxuICAgIHN3aXRjaCAoanNvblNjaGVtYS50eXBlKSB7XG4gICAgICBjYXNlICdvYmplY3QnOiB7XG4gICAgICAgIGZpZWxkLmZpZWxkR3JvdXAgPSBbXTtcbiAgICAgICAgT2JqZWN0LmtleXMoanNvblNjaGVtYS5wcm9wZXJ0aWVzKS5mb3JFYWNoKHAgPT4ge1xuICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5fdG9GaWVsZENvbmZpZyg8SlNPTlNjaGVtYTc+IGpzb25TY2hlbWEucHJvcGVydGllc1twXSwgcCk7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoanNvblNjaGVtYS5yZXF1aXJlZCkgJiYganNvblNjaGVtYS5yZXF1aXJlZC5pbmRleE9mKHApICE9PSAtMSkge1xuICAgICAgICAgICAgY2hpbGQudGVtcGxhdGVPcHRpb25zLnJlcXVpcmVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmllbGQuZmllbGRHcm91cC5wdXNoKGNoaWxkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnYXJyYXknOiB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShqc29uU2NoZW1hLml0ZW1zKSkge1xuICAgICAgICAgIGZpZWxkLmZpZWxkQXJyYXkgPSB0aGlzLl90b0ZpZWxkQ29uZmlnKGpzb25TY2hlbWEuaXRlbXMgYXMgSlNPTlNjaGVtYTcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpZWxkWydfZmllbGRBcnJheSddID0gW107XG4gICAgICAgICAgZmllbGQuZmllbGRHcm91cCA9IFtdO1xuICAgICAgICAgIGpzb25TY2hlbWEuaXRlbXMuZm9yRWFjaChpdGVtID0+IGZpZWxkWydfZmllbGRBcnJheSddLnB1c2godGhpcy5fdG9GaWVsZENvbmZpZyg8SlNPTlNjaGVtYTc+IGl0ZW0pKSk7XG4gICAgICAgICAgaWYgKGpzb25TY2hlbWEuYWRkaXRpb25hbEl0ZW1zKSB7XG4gICAgICAgICAgICBmaWVsZFsnX2FkZGl0aW9uYWxGaWVsZEFycmF5J10gPSB0aGlzLl90b0ZpZWxkQ29uZmlnKDxKU09OU2NoZW1hNz4ganNvblNjaGVtYS5hZGRpdGlvbmFsSXRlbXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWVsZCwgJ2ZpZWxkQXJyYXknLCB7XG4gICAgICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkWydfZmllbGRBcnJheSddW2ZpZWxkLmZpZWxkR3JvdXAubGVuZ3RoXSB8fCBmaWVsZFsnX2FkZGl0aW9uYWxGaWVsZEFycmF5J107XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmllbGQ7XG4gIH1cbn1cbiJdfQ==