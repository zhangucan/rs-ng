/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { Observable, of as observableOf } from 'rxjs';
import { map } from 'rxjs/operators';
export class FormlySelectOptionsPipe {
    /**
     * @param {?} options
     * @param {?=} field
     * @return {?}
     */
    transform(options, field) {
        if (!(options instanceof Observable)) {
            options = observableOf(options);
        }
        return ((/** @type {?} */ (options))).pipe(map(value => this.toOptions(value, field || {})));
    }
    /**
     * @param {?} options
     * @param {?} field
     * @return {?}
     */
    toOptions(options, field) {
        /** @type {?} */
        const gOptions = [];
        /** @type {?} */
        const groups = {};
        /** @type {?} */
        const to = field.templateOptions || {};
        options.map((option) => {
            if (!this.getGroupProp(option, to)) {
                gOptions.push(this.toOption(option, to));
            }
            else {
                if (!groups[this.getGroupProp(option, to)]) {
                    groups[this.getGroupProp(option, to)] = [];
                    gOptions.push({
                        label: this.getGroupProp(option, to),
                        group: groups[this.getGroupProp(option, to)],
                    });
                }
                groups[this.getGroupProp(option, to)].push(this.toOption(option, to));
            }
        });
        return gOptions;
    }
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    toOption(item, to) {
        return {
            label: this.getLabelProp(item, to),
            value: this.getValueProp(item, to),
            disabled: this.getDisabledProp(item, to) || false,
        };
    }
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    getLabelProp(item, to) {
        if (typeof to.labelProp === 'function') {
            return to.labelProp(item);
        }
        if (this.shouldUseLegacyOption(item, to)) {
            return item.value;
        }
        return item[to.labelProp || 'label'];
    }
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    getValueProp(item, to) {
        if (typeof to.valueProp === 'function') {
            return to.valueProp(item);
        }
        if (this.shouldUseLegacyOption(item, to)) {
            return item.key;
        }
        return item[to.valueProp || 'value'];
    }
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    getDisabledProp(item, to) {
        if (typeof to.disabledProp === 'function') {
            return to.disabledProp(item);
        }
        return item[to.disabledProp || 'disabled'];
    }
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    getGroupProp(item, to) {
        if (typeof to.groupProp === 'function') {
            return to.groupProp(item);
        }
        return item[to.groupProp || 'group'];
    }
    /**
     * @param {?} item
     * @param {?} to
     * @return {?}
     */
    shouldUseLegacyOption(item, to) {
        return !to.valueProp
            && !to.labelProp
            && item != null
            && typeof item === 'object'
            && 'key' in item
            && 'value' in item;
    }
}
FormlySelectOptionsPipe.decorators = [
    { type: Pipe, args: [{ name: 'formlySelectOptions' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LW9wdGlvbnMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZm9ybWx5L2NvcmUvc2VsZWN0LyIsInNvdXJjZXMiOlsic2VsZWN0LW9wdGlvbnMucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFFLElBQUksWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUlyQyxNQUFNLE9BQU8sdUJBQXVCOzs7Ozs7SUFDbEMsU0FBUyxDQUFDLE9BQU8sRUFBRSxLQUF5QjtRQUMxQyxJQUFJLENBQUMsQ0FBQyxPQUFPLFlBQVksVUFBVSxDQUFDLEVBQUU7WUFDcEMsT0FBTyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNqQztRQUVELE9BQU8sQ0FBQyxtQkFBQSxPQUFPLEVBQW1CLENBQUMsQ0FBQyxJQUFJLENBQ3RDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUNqRCxDQUFDO0lBQ0osQ0FBQzs7Ozs7O0lBRU8sU0FBUyxDQUFDLE9BQU8sRUFBRSxLQUF3Qjs7Y0FDM0MsUUFBUSxHQUFVLEVBQUU7O2NBQ3hCLE1BQU0sR0FBNkIsRUFBRTs7Y0FDckMsRUFBRSxHQUFHLEtBQUssQ0FBQyxlQUFlLElBQUksRUFBRTtRQUVsQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBVyxFQUFFLEVBQUU7WUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFO2dCQUNsQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEVB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QUFFLEVBQUU7UUFDcEMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxTQUFTO2VBQ2YsQ0FBQyxFQUFFLENBQUMsU0FBUztlQUNiLElBQUksSUFBSSxJQUFJO2VBQ1osT0FBTyxJQUFJLEtBQUssUUFBUTtlQUN4QixLQUFLLElBQUksSUFBSTtlQUNiLE9BQU8sSUFBSSxJQUFJLENBQUM7SUFDdkIsQ0FBQzs7O1lBekZGLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxxQkFBcUIsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIGFzIG9ic2VydmFibGVPZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWcgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcblxuQFBpcGUoeyBuYW1lOiAnZm9ybWx5U2VsZWN0T3B0aW9ucycgfSlcbmV4cG9ydCBjbGFzcyBGb3JtbHlTZWxlY3RPcHRpb25zUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICB0cmFuc2Zvcm0ob3B0aW9ucywgZmllbGQ/OiBGb3JtbHlGaWVsZENvbmZpZykge1xuICAgIGlmICghKG9wdGlvbnMgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSkge1xuICAgICAgb3B0aW9ucyA9IG9ic2VydmFibGVPZihvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKG9wdGlvbnMgYXMgT2JzZXJ2YWJsZTxhbnk+KS5waXBlKFxuICAgICAgbWFwKHZhbHVlID0+IHRoaXMudG9PcHRpb25zKHZhbHVlLCBmaWVsZCB8fCB7fSkpLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHRvT3B0aW9ucyhvcHRpb25zLCBmaWVsZDogRm9ybWx5RmllbGRDb25maWcpIHtcbiAgICBjb25zdCBnT3B0aW9uczogYW55W10gPSBbXSxcbiAgICAgIGdyb3VwczogeyBba2V5OiBzdHJpbmddOiBhbnlbXSB9ID0ge30sXG4gICAgICB0byA9IGZpZWxkLnRlbXBsYXRlT3B0aW9ucyB8fCB7fTtcblxuICAgIG9wdGlvbnMubWFwKChvcHRpb246IGFueSkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmdldEdyb3VwUHJvcChvcHRpb24sIHRvKSkge1xuICAgICAgICBnT3B0aW9ucy5wdXNoKHRoaXMudG9PcHRpb24ob3B0aW9uLCB0bykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFncm91cHNbdGhpcy5nZXRHcm91cFByb3Aob3B0aW9uLCB0byldKSB7XG4gICAgICAgICAgZ3JvdXBzW3RoaXMuZ2V0R3JvdXBQcm9wKG9wdGlvbiwgdG8pXSA9IFtdO1xuICAgICAgICAgIGdPcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgbGFiZWw6IHRoaXMuZ2V0R3JvdXBQcm9wKG9wdGlvbiwgdG8pLFxuICAgICAgICAgICAgZ3JvdXA6IGdyb3Vwc1t0aGlzLmdldEdyb3VwUHJvcChvcHRpb24sIHRvKV0sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBzW3RoaXMuZ2V0R3JvdXBQcm9wKG9wdGlvbiwgdG8pXS5wdXNoKHRoaXMudG9PcHRpb24ob3B0aW9uLCB0bykpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdPcHRpb25zO1xuICB9XG5cbiAgcHJpdmF0ZSB0b09wdGlvbihpdGVtLCB0bykge1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbDogdGhpcy5nZXRMYWJlbFByb3AoaXRlbSwgdG8pLFxuICAgICAgdmFsdWU6IHRoaXMuZ2V0VmFsdWVQcm9wKGl0ZW0sIHRvKSxcbiAgICAgIGRpc2FibGVkOiB0aGlzLmdldERpc2FibGVkUHJvcChpdGVtLCB0bykgfHwgZmFsc2UsXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TGFiZWxQcm9wKGl0ZW0sIHRvKTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIHRvLmxhYmVsUHJvcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHRvLmxhYmVsUHJvcChpdGVtKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zaG91bGRVc2VMZWdhY3lPcHRpb24oaXRlbSwgdG8pKSB7XG4gICAgICByZXR1cm4gaXRlbS52YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbVt0by5sYWJlbFByb3AgfHwgJ2xhYmVsJ107XG4gIH1cblxuICBwcml2YXRlIGdldFZhbHVlUHJvcChpdGVtLCB0byk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiB0by52YWx1ZVByb3AgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiB0by52YWx1ZVByb3AoaXRlbSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2hvdWxkVXNlTGVnYWN5T3B0aW9uKGl0ZW0sIHRvKSkge1xuICAgICAgcmV0dXJuIGl0ZW0ua2V5O1xuICAgIH1cblxuICAgIHJldHVybiBpdGVtW3RvLnZhbHVlUHJvcCB8fCAndmFsdWUnXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RGlzYWJsZWRQcm9wKGl0ZW0sIHRvKTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIHRvLmRpc2FibGVkUHJvcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHRvLmRpc2FibGVkUHJvcChpdGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1bdG8uZGlzYWJsZWRQcm9wIHx8ICdkaXNhYmxlZCddO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRHcm91cFByb3AoaXRlbSwgdG8pOiBzdHJpbmcge1xuICAgIGlmICh0eXBlb2YgdG8uZ3JvdXBQcm9wID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gdG8uZ3JvdXBQcm9wKGl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiBpdGVtW3RvLmdyb3VwUHJvcCB8fCAnZ3JvdXAnXTtcbiAgfVxuXG4gIHByaXZhdGUgc2hvdWxkVXNlTGVnYWN5T3B0aW9uKGl0ZW0sIHRvKSB7XG4gICAgcmV0dXJuICF0by52YWx1ZVByb3BcbiAgICAgICYmICF0by5sYWJlbFByb3BcbiAgICAgICYmIGl0ZW0gIT0gbnVsbFxuICAgICAgJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnXG4gICAgICAmJiAna2V5JyBpbiBpdGVtXG4gICAgICAmJiAndmFsdWUnIGluIGl0ZW07XG4gIH1cbn1cbiJdfQ==