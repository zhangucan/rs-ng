/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { FormGroup, FormArray } from '@angular/forms';
import { evalExpression, FORMLY_VALIDATORS, getFieldModel, isObject, getKeyPath, isNullOrUndefined } from '../utils';
/**
 * \@internal
 */
export class FormlyFormExpression {
    /**
     * @param {?} form
     * @param {?=} fields
     * @param {?=} model
     * @param {?=} options
     * @return {?}
     */
    checkFields(form, fields = [], model, options) {
        this._checkFields(form, fields, model, options);
    }
    /**
     * @param {?} form
     * @param {?=} fields
     * @param {?=} model
     * @param {?=} options
     * @return {?}
     */
    _checkFields(form, fields = [], model, options) {
        fields.forEach(field => {
            this.checkFieldExpressionChange(form, field, this.getParentModel(model, field), options);
            this.checkFieldVisibilityChange(form, field, this.getParentModel(model, field), options);
            if (field.fieldGroup && field.fieldGroup.length > 0) {
                this._checkFields(field.formControl ? /** @type {?} */ (field.formControl) : form, field.fieldGroup, this.getParentModel(model, field), options);
            }
        });
    }
    /**
     * @param {?} form
     * @param {?} field
     * @param {?} model
     * @param {?} options
     * @return {?}
     */
    checkFieldExpressionChange(form, field, model, options) {
        if (!field || !field.expressionProperties) {
            return;
        }
        const /** @type {?} */ expressionProperties = field.expressionProperties;
        const /** @type {?} */ validators = FORMLY_VALIDATORS.map(v => `templateOptions.${v}`);
        for (const /** @type {?} */ key in expressionProperties) {
            const /** @type {?} */ expressionValue = evalExpression(expressionProperties[key].expression, { field }, [model, options.formState]);
            if (expressionProperties[key].expressionValue !== expressionValue
                && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))) {
                expressionProperties[key].expressionValue = expressionValue;
                evalExpression(expressionProperties[key].expressionValueSetter, { field }, [expressionValue, model, field]);
                if (key.indexOf('model.') === 0) {
                    const /** @type {?} */ path = key.replace(/^model\./, ''), /** @type {?} */
                    control = field.key && key === path ? field.formControl : form.get(path);
                    if (control
                        && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))
                        && control.value !== expressionValue) {
                        control.patchValue(expressionValue);
                    }
                }
                if (validators.indexOf(key) !== -1 && field.formControl) {
                    field.formControl.updateValueAndValidity({ emitEvent: false });
                }
            }
        }
    }
    /**
     * @param {?} form
     * @param {?} field
     * @param {?} model
     * @param {?} options
     * @return {?}
     */
    checkFieldVisibilityChange(form, field, model, options) {
        if (!field || isNullOrUndefined(field.hideExpression)) {
            return;
        }
        const /** @type {?} */ hideExpressionResult = !!evalExpression(field.hideExpression, { field }, [model, options.formState]);
        if (hideExpressionResult !== field.hide) {
            // toggle hide
            field.hide = hideExpressionResult;
            field.templateOptions.hidden = hideExpressionResult;
            if (field.formControl && field.key) {
                const /** @type {?} */ parent = this.fieldParentFormControl(form, field);
                if (parent) {
                    const /** @type {?} */ control = parent.get(`${this.fieldKey(field)}`);
                    if (hideExpressionResult === true && control) {
                        this.removeFieldControl(parent, field);
                    }
                    else if (hideExpressionResult === false && !control) {
                        this.addFieldControl(parent, field, model);
                    }
                }
            }
            if (options.fieldChanges) {
                options.fieldChanges.next(/** @type {?} */ ({ field: field, type: 'hidden', value: hideExpressionResult }));
            }
        }
    }
    /**
     * @param {?} parent
     * @param {?} field
     * @param {?} model
     * @return {?}
     */
    addFieldControl(parent, field, model) {
        const /** @type {?} */ fieldModel = this.getFieldModel(model, field);
        if (!(isNullOrUndefined(field.formControl.value) && isNullOrUndefined(fieldModel))
            && field.formControl.value !== fieldModel) {
            field.formControl.patchValue(fieldModel, { emitEvent: false });
        }
        if (parent instanceof FormArray) {
            parent.push(field.formControl);
        }
        else if (parent instanceof FormGroup) {
            parent.addControl(`${this.fieldKey(field)}`, field.formControl);
        }
    }
    /**
     * @param {?} model
     * @param {?} field
     * @return {?}
     */
    getFieldModel(model, field) {
        if (field.fieldGroup || field.fieldArray) {
            return model;
        }
        return getFieldModel(model, field, false);
    }
    /**
     * @param {?} model
     * @param {?} field
     * @return {?}
     */
    getParentModel(model, field) {
        if (field.key && (field.fieldGroup || field.fieldArray)) {
            return getFieldModel(model, field, true);
        }
        return model;
    }
    /**
     * @param {?} parent
     * @param {?} field
     * @return {?}
     */
    removeFieldControl(parent, field) {
        if (parent instanceof FormArray) {
            parent.removeAt(/** @type {?} */ (this.fieldKey(field)));
        }
        else if (parent instanceof FormGroup) {
            parent.removeControl(`${this.fieldKey(field)}`);
        }
    }
    /**
     * @param {?} form
     * @param {?} field
     * @return {?}
     */
    fieldParentFormControl(form, field) {
        const /** @type {?} */ paths = getKeyPath(field);
        paths.pop(); // remove last path
        return /** @type {?} */ ((paths.length > 0 ? form.get(paths) : form));
    }
    /**
     * @param {?} field
     * @return {?}
     */
    fieldKey(field) {
        return getKeyPath(field).pop();
    }
}
FormlyFormExpression.decorators = [
    { type: Injectable },
];

//# sourceMappingURL=data:application/json;base64,