/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input, Optional, EventEmitter, Output, SkipSelf, ComponentFactoryResolver } from '@angular/core';
import { FormGroup, NgForm, FormGroupDirective } from '@angular/forms';
import { FormlyFormBuilder } from '../services/formly.form.builder';
import { FormlyConfig } from '../services/formly.config';
import { assignModelValue, isNullOrUndefined, reverseDeepMerge } from '../utils';
import { Subject } from 'rxjs';
import { debounceTime, map, tap } from 'rxjs/operators';
export class FormlyForm {
    /**
     * @param {?} formlyBuilder
     * @param {?} formlyConfig
     * @param {?} componentFactoryResolver
     * @param {?} parentForm
     * @param {?} parentFormGroup
     * @param {?} parentFormlyForm
     */
    constructor(formlyBuilder, formlyConfig, componentFactoryResolver, parentForm, parentFormGroup, parentFormlyForm) {
        this.formlyBuilder = formlyBuilder;
        this.formlyConfig = formlyConfig;
        this.componentFactoryResolver = componentFactoryResolver;
        this.parentForm = parentForm;
        this.parentFormGroup = parentFormGroup;
        this.parentFormlyForm = parentFormlyForm;
        this.model = {};
        this.form = new FormGroup({});
        this.fields = [];
        this.modelChange = new EventEmitter();
        /**
         * \@internal
         */
        this.isRoot = true;
        this.modelChangeSubs = [];
        this.enableCheckExprDebounce = false;
        this.checkExpressionChange$ = this.modelChange.pipe(debounceTime(this.enableCheckExprDebounce ? 100 : 0), tap(() => {
            this.enableCheckExprDebounce = true;
            this.checkExpressionChange();
            this.enableCheckExprDebounce = false;
        })).subscribe();
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.checkExpressionChange();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.fields || this.fields.length === 0 || !this.isRoot) {
            return;
        }
        if (changes.fields || changes.form || changes.model) {
            this.model = this.model || {};
            this.form = this.form || (new FormGroup({}));
            this.setOptions();
            this.clearModelSubscriptions();
            this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);
            this.trackModelChanges(this.fields);
            this.options.updateInitialValue();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.clearModelSubscriptions();
        this.checkExpressionChange$.unsubscribe();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    changeModel(event) {
        assignModelValue(this.model, event.key, event.value);
        this.modelChange.emit(this.model);
    }
    /**
     * @return {?}
     */
    setOptions() {
        this.options = this.options || {};
        this.options.formState = this.options.formState || {};
        if (!this.options.showError) {
            this.options.showError = this.formlyConfig.extras.showError;
        }
        if (!this.options.fieldChanges) {
            this.options.fieldChanges = new Subject();
        }
        if (!this.options.resetModel) {
            this.options.resetModel = (model) => {
                model = isNullOrUndefined(model) ? this.initialModel : model;
                if (this.model) {
                    Object.keys(this.model).forEach(k => delete this.model[k]);
                    Object.assign(this.model, model || {});
                }
                ((/** @type {?} */ (this.options)))._buildForm();
                // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form
                // but only when the current component is a root one.
                if (!this.parentFormlyForm && this.options.parentForm && this.options.parentForm.control === this.form) {
                    this.options.parentForm.resetForm(model);
                }
                else {
                    this.form.reset(model);
                }
            };
        }
        if (!this.options.parentForm) {
            this.options.parentForm = this.parentFormGroup || this.parentForm;
        }
        if (this.options.parentForm) {
            /** @type {?} */
            let submitted = this.options.parentForm.submitted;
            Object.defineProperty(this.options.parentForm, 'submitted', {
                get: () => submitted,
                set: value => {
                    submitted = value;
                    ((/** @type {?} */ (this.options)))._markForCheck({
                        fieldGroup: this.fields,
                        model: this.model,
                        formControl: this.form,
                        options: this.options,
                    });
                },
            });
        }
        if (!this.options.updateInitialValue) {
            this.options.updateInitialValue = () => this.initialModel = reverseDeepMerge({}, this.model);
        }
        if (!((/** @type {?} */ (this.options)))._buildForm) {
            ((/** @type {?} */ (this.options)))._buildForm = () => {
                this.clearModelSubscriptions();
                this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);
                this.trackModelChanges(this.fields);
            };
        }
        if (!((/** @type {?} */ (this.options)))._markForCheck) {
            ((/** @type {?} */ (this.options)))._markForCheck = (field) => {
                if (field._componentRefs) {
                    field._componentRefs.forEach(ref => ref.changeDetectorRef.markForCheck());
                }
                if (field.fieldGroup) {
                    field.fieldGroup.forEach(f => ((/** @type {?} */ (this.options)))._markForCheck(f));
                }
            };
        }
        if (!((/** @type {?} */ (this.options)))._componentFactoryResolver) {
            ((/** @type {?} */ (this.options)))._componentFactoryResolver = this.componentFactoryResolver;
        }
    }
    /**
     * @return {?}
     */
    checkExpressionChange() {
        if (this.isRoot && ((/** @type {?} */ (this.options)))._checkField) {
            ((/** @type {?} */ (this.options)))._checkField({
                fieldGroup: this.fields,
                model: this.model,
                formControl: this.form,
                options: this.options,
            });
        }
    }
    /**
     * @param {?} fields
     * @param {?=} rootKey
     * @return {?}
     */
    trackModelChanges(fields, rootKey = []) {
        fields.forEach(field => {
            if (field.key && field.type && !field.fieldGroup) {
                /** @type {?} */
                const valueChanges = field.formControl.valueChanges.pipe(field.modelOptions.debounce && field.modelOptions.debounce.default
                    ? debounceTime(field.modelOptions.debounce.default)
                    : tap(() => { }), map(value => {
                    if (field.parsers && field.parsers.length > 0) {
                        field.parsers.forEach(parserFn => value = parserFn(value));
                    }
                    return value;
                }), tap(value => this.changeModel({ key: [...rootKey, field.key].join('.'), value })));
                this.modelChangeSubs.push(valueChanges.subscribe());
            }
            if (field.fieldGroup && field.fieldGroup.length > 0) {
                this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, field.key] : rootKey);
            }
        });
    }
    /**
     * @return {?}
     */
    clearModelSubscriptions() {
        this.modelChangeSubs.forEach(sub => sub.unsubscribe());
        this.modelChangeSubs = [];
    }
}
FormlyForm.decorators = [
    { type: Component, args: [{
                selector: 'formly-form',
                template: `
    <formly-field *ngFor="let field of fields"
      hide-deprecation
      [form]="field.form"
      [options]="field.options"
      [model]="field.model"
      [field]="field">
    </formly-field>
    <ng-content></ng-content>
  `
            }] }
];
/** @nocollapse */
FormlyForm.ctorParameters = () => [
    { type: FormlyFormBuilder },
    { type: FormlyConfig },
    { type: ComponentFactoryResolver },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }] },
    { type: FormlyForm, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
FormlyForm.propDecorators = {
    model: [{ type: Input }],
    form: [{ type: Input }],
    fields: [{ type: Input }],
    options: [{ type: Input }],
    modelChange: [{ type: Output }],
    isRoot: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FormlyForm.prototype.model;
    /** @type {?} */
    FormlyForm.prototype.form;
    /** @type {?} */
    FormlyForm.prototype.fields;
    /** @type {?} */
    FormlyForm.prototype.options;
    /** @type {?} */
    FormlyForm.prototype.modelChange;
    /**
     * \@internal
     * @type {?}
     */
    FormlyForm.prototype.isRoot;
    /** @type {?} */
    FormlyForm.prototype.initialModel;
    /** @type {?} */
    FormlyForm.prototype.modelChangeSubs;
    /** @type {?} */
    FormlyForm.prototype.enableCheckExprDebounce;
    /** @type {?} */
    FormlyForm.prototype.checkExpressionChange$;
    /** @type {?} */
    FormlyForm.prototype.formlyBuilder;
    /** @type {?} */
    FormlyForm.prototype.formlyConfig;
    /** @type {?} */
    FormlyForm.prototype.componentFactoryResolver;
    /** @type {?} */
    FormlyForm.prototype.parentForm;
    /** @type {?} */
    FormlyForm.prototype.parentFormGroup;
    /** @type {?} */
    FormlyForm.prototype.parentFormlyForm;
}
//# sourceMappingURL=data:application/json;base64,