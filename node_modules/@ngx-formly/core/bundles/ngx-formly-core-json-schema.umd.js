(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@ngx-formly/core/json-schema', ['exports', '@angular/core'], factory) :
    (factory((global['ngx-formly'] = global['ngx-formly'] || {}, global['ngx-formly'].core = global['ngx-formly'].core || {}, global['ngx-formly'].core['json-schema'] = {}),global.ng.core));
}(this, (function (exports,i0) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var FormlyJsonschema = /** @class */ (function () {
        function FormlyJsonschema() {
        }
        /**
         * @param {?} jsonSchema
         * @return {?}
         */
        FormlyJsonschema.prototype.toFieldConfig = /**
         * @param {?} jsonSchema
         * @return {?}
         */
            function (jsonSchema) {
                return this._toFieldConfig(jsonSchema);
            };
        /**
         * @param {?} jsonSchema
         * @param {?=} key
         * @return {?}
         */
        FormlyJsonschema.prototype._toFieldConfig = /**
         * @param {?} jsonSchema
         * @param {?=} key
         * @return {?}
         */
            function (jsonSchema, key) {
                var _this = this;
                /** @type {?} */
                var field = __assign({}, (key ? { key: key } : {}), { type: ( /** @type {?} */(jsonSchema.type)), defaultValue: jsonSchema.default, templateOptions: {
                        minLength: jsonSchema.minLength,
                        maxLength: jsonSchema.maxLength,
                        label: jsonSchema.title,
                        readonly: jsonSchema.readOnly,
                        pattern: jsonSchema.pattern,
                        description: jsonSchema.description,
                    } });
                if (jsonSchema.enum) {
                    if (field.type === 'integer' || field.type === 'number') {
                        field.parsers = [Number];
                    }
                    field.type = 'enum';
                    field.templateOptions.options = jsonSchema.enum;
                    field.templateOptions.labelProp = function (item) { return item; };
                    field.templateOptions.valueProp = function (item) { return item; };
                }
                switch (jsonSchema.type) {
                    case 'object': {
                        field.fieldGroup = [];
                        Object.keys(jsonSchema.properties).forEach(function (p) {
                            /** @type {?} */
                            var child = _this._toFieldConfig(( /** @type {?} */(jsonSchema.properties[p])), p);
                            if (Array.isArray(jsonSchema.required) && jsonSchema.required.indexOf(p) !== -1) {
                                child.templateOptions.required = true;
                            }
                            field.fieldGroup.push(child);
                        });
                        break;
                    }
                    case 'array': {
                        if (!Array.isArray(jsonSchema.items)) {
                            field.fieldArray = this._toFieldConfig(( /** @type {?} */(jsonSchema.items)));
                        }
                        else {
                            field['_fieldArray'] = [];
                            field.fieldGroup = [];
                            jsonSchema.items.forEach(function (item) { return field['_fieldArray'].push(_this._toFieldConfig(( /** @type {?} */(item)))); });
                            if (jsonSchema.additionalItems) {
                                field['_additionalFieldArray'] = this._toFieldConfig(( /** @type {?} */(jsonSchema.additionalItems)));
                            }
                            Object.defineProperty(field, 'fieldArray', {
                                get: function () {
                                    return field['_fieldArray'][field.fieldGroup.length] || field['_additionalFieldArray'];
                                },
                                enumerable: true,
                                configurable: true,
                            });
                        }
                        break;
                    }
                }
                return field;
            };
        FormlyJsonschema.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ FormlyJsonschema.ngInjectableDef = i0.defineInjectable({ factory: function FormlyJsonschema_Factory() { return new FormlyJsonschema(); }, token: FormlyJsonschema, providedIn: "root" });
        return FormlyJsonschema;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.FormlyJsonschema = FormlyJsonschema;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,