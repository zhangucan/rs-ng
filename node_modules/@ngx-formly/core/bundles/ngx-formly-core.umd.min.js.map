{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@ngx-formly/core/lib/utils.ts","ng://@ngx-formly/core/lib/services/formly.config.ts","ng://@ngx-formly/core/lib/services/formly.form.builder.ts","ng://@ngx-formly/core/lib/components/formly.form.ts","ng://@ngx-formly/core/lib/components/formly.field.ts","ng://@ngx-formly/core/lib/components/formly.attributes.ts","ng://@ngx-formly/core/lib/templates/field.type.ts","ng://@ngx-formly/core/lib/templates/field-array.type.ts","ng://@ngx-formly/core/lib/templates/field.wrapper.ts","ng://@ngx-formly/core/lib/components/formly.group.ts","ng://@ngx-formly/core/lib/templates/formly.validation-message.ts","ng://@ngx-formly/core/lib/templates/field-template.type.ts","ng://@ngx-formly/core/lib/extensions/field-expression/utils.ts","ng://@ngx-formly/core/lib/extensions/field-expression/field-expression.ts","ng://@ngx-formly/core/lib/extensions/field-validation/field-validation.ts","ng://@ngx-formly/core/lib/extensions/field-form/field-form.ts","ng://@ngx-formly/core/lib/extensions/core/core.ts","ng://@ngx-formly/core/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","getKeyPath","field","key","keyPath","pathElements","split","pathElements_1","__values","tslib_1.__values","pathElements_1_1","pathElement","replace","test","parseInt","path","slice","FORMLY_VALIDATORS","assignModelValue","model","shift","isObject","getFieldValue","paths","parent","reverseDeepMerge","dest","args","_i","forEach","src","srcArg","isNullOrUndefined","isFunction","clone","obj1","obj2","getPrototypeOf","isArray","undefined","isUndefined","x","RegExp","Observable","changingThisBreaksApplicationSecurity","AbstractControl","toString","Date","getTime","map","v","keys","k","removeFieldControl","form","FormArray","removeAt","FormGroup","removeControl","defineHiddenProp","prop","defaultValue","defineProperty","enumerable","writable","configurable","FORMLY_CONFIG","InjectionToken","FormlyConfig","types","validators","wrappers","messages","templateManipulators","preWrapper","postWrapper","extras","fieldTransform","showError","formControl","invalid","touched","options","parentForm","submitted","validation","show","extensions","addConfig","config","_this","type","setType","validator","setValidator","wrapper","setWrapper","manipulators","manipulator","setManipulator","validationMessages","addValidatorMessage","name","message","c","extension","option","component","extends","defaultOptions","setTypeWrapper","getType","Error","mergeExtendedType","getMergedField","extendDefaults","optionsTypes","createComponentInstance","componentRef","_componentFactory","instance","_componentFactoryResolver","resolveComponentFactory","_ngModule","injector","getWrapper","indexOf","getValidator","getValidatorMessage","class","method","extendedType","Injectable","providedIn","FormlyFormBuilder","formlyConfig","buildForm","fieldGroup","_buildForm","getExtensions","prePopulate","onPopulate","f","postPopulate","FormlyForm","formlyBuilder","componentFactoryResolver","parentFormGroup","parentFormlyForm","fields","modelChange","EventEmitter","isRoot","modelChangeSubs","enableCheckExprDebounce","checkExpressionChange$","pipe","debounceTime","tap","checkExpressionChange","subscribe","ngDoCheck","ngOnChanges","changes","setOptions","clearModelSubscriptions","trackModelChanges","updateInitialValue","ngOnDestroy","unsubscribe","changeModel","event","emit","formState","fieldChanges","Subject","resetModel","initialModel","control","resetForm","reset","submitted_1","get","set","_markForCheck","_componentRefs","ref","changeDetectorRef","markForCheck","_checkField","rootKey","valueChanges","modelOptions","debounce","default","parsers","parserFn","tslib_1.__spread","join","sub","Component","selector","template","ComponentFactoryResolver","NgForm","decorators","Optional","FormGroupDirective","SkipSelf","Input","Output","FormlyField","hideDeprecation","className","warnDeprecation","console","warn","refs","ngAfterContentInit","triggerHook","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","ngOnInit","renderField","containerRef","componentRefs","destroy","wrapperName","componentFactory","_a","createComponent","fieldComponent","hooks","lifecycle","host","[style.display]","[class]","Attribute","ViewChild","read","ViewContainerRef","FormlyAttributes","renderer","elementRef","onFocus","$event","focus","to","onBlur","blur","templateOptions","setAttribute","nativeElement","id","attributes","setAttributes","__attributes__","previousValue","currentValue","removeAttribute","Directive","[attr.name]","[attr.placeholder]","[attr.tabindex]","[attr.readonly]","[attr.step]","(keyup)","(keydown)","(click)","(change)","(keypress)","Renderer2","ElementRef","HostListener","FieldType","Field","_super","tslib_1.__extends","FieldArrayType","builder","add","splice","remove","FieldWrapper","FormlyGroup","FormlyValidationMessage","fieldForm","errors","errorPath","asyncValidators","FormlyTemplateType","evalExpression","expression","thisArg","argVal","Function","FieldExpressionExtension","ignoreCache","_expressionProperties","expressionProperties","expressionProperty","expressionValueSetter","evalExpressionValueSetter","argNames","this_1","_evalExpression","disabled","subscription_1","onDestroy_1","onDestroy","hideExpression","hide","parentExpression","evalStringExpression","checkFieldExpressionChange","checkFieldVisibilityChange","expressionValue","JSON","stringify","patchValue","updateValueAndValidity","emitEvent","hideExpressionResult","hidden","parent_1","fieldParentFormControl","fieldKey","addFieldControl","fieldModel","addControl","pop","FieldValidationExtension","initFieldValidation","initFieldAsyncValidation","_validators","initPredefinedFieldValidation","validatorName","errorPath_1","message_1","validator_1","isValid","setErrors","_b","wrapNgValidatorFn","_asyncValidators","validator_2","Promise","resolve","then","result","filter","opt","Validators","required","pattern","minLength","maxLength","min","max","FieldFormExtension","paths_1","rootForm_1","rootModel_1","index","formPath","addFormControl","abstractControlOptions","updateOn","FormControl","setValidators","setAsyncValidators","createControl","fieldArray","disable","enabled","enable","at","setControl","CoreExtension","formId","getFieldComponentInstance","fieldTransforms","initFieldOptions","root","getFieldId","label","placeholder","initFieldWrappers","initFieldArray","fieldTemplateManipulators","el","a","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","providers","provide","multi","useFactory","deps","useValue","ANALYZE_FOR_ENTRY_COMPONENTS","forChild","NgModule","declarations","entryComponents","exports","imports","CommonModule","Inject"],"mappings":"ogBAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAG5B,SAAgBO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,IAEKO,MAAMb,KAAMU,YAgFhC,SAAgBI,EAAOC,EAAGN,GACtB,IAAIO,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBI,EAAYC,EAA3BZ,EAAIQ,EAAEJ,KAAKG,GAAOM,EAAK,GAC3B,IACI,WAAc,IAANZ,GAAsB,EAANA,QAAcU,EAAIX,EAAEc,QAAQC,MAAMF,EAAGG,KAAKL,EAAEM,OAExE,MAAOC,GAASN,EAAI,CAAEM,MAAOA,WAEzB,IACQP,IAAMA,EAAEI,OAASP,EAAIR,EAAU,YAAIQ,EAAEJ,KAAKJ,WAExC,GAAIY,EAAG,MAAMA,EAAEM,OAE7B,OAAOL,EAGX,SAAgBM,IACZ,IAAK,IAAIN,EAAK,GAAIb,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3Ca,EAAKA,EAAGO,OAAOd,EAAOJ,UAAUF,KACpC,OAAOa,EC9HX,SAAgBQ,EAAWC,WAEzB,IAAK,EAA8B,gBAAK,EAA8B,eAAEC,MAAQD,EAAMC,IAAK,KACrFC,EAA6B,GACjC,GAAIF,EAAMC,IAAK,KAETE,EAAoC,iBAAdH,EAAMC,IAAmBD,EAAMC,IAAIG,MAAM,KAAOJ,EAAMC,QAChF,IAAwB,IAAAI,EDsB9B,SAkEgBC,EAASrB,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWV,EAAI,EAChE,OAAIQ,EAAUA,EAAEJ,KAAKG,GACd,CACHO,KAAM,WAEF,OADIP,GAAKP,GAAKO,EAAEJ,SAAQI,OAAI,GACrB,CAAEU,MAAOV,GAAKA,EAAEP,KAAMe,MAAOR,KC9FlBsB,CAAAJ,GAAYK,EAAAH,EAAAb,QAAAgB,EAAAf,KAAAe,EAAAH,EAAAb,OAAE,CACT,iBADpBiB,EAAWD,EAAAb,QAGhBc,EAAcA,EAAYC,QAAQ,aAAc,OAChDR,EAAUA,EAAQJ,OAAOW,EAAYL,MAAM,OAE3CF,EAAQR,KAAKe,wGAGjB,IAAK,IAAI/B,EAAI,EAAGA,EAAIwB,EAAQrB,OAAQH,IAAK,KACnC+B,EACuB,iBADvBA,EAAcP,EAAQxB,KACa,QAAQiC,KAAKF,KAClDP,EAAQxB,GAAKkC,SAASH,KAI5B,EAA8B,eAAI,CAChCR,IAAKD,EAAMC,IACXY,KAAMX,GAIV,OAAO,EAA8B,eAAEW,KAAKC,MAAM,GAGpD,IAAaC,EAAoB,CAAC,WAAY,UAAW,YAAa,YAAa,MAAO,OAE1F,SAAgBC,EAAiBC,EAAYJ,EAAoClB,GAK/E,GAJoB,iBAATkB,IACTA,EAAOd,EAAW,CAACE,IAAKY,KAGR,EAAdA,EAAKhC,OAAY,KACbS,EAAIuB,EAAKK,QACVD,EAAM3B,IAAO6B,EAASF,EAAM3B,MAC/B2B,EAAM3B,GAAwB,iBAAZuB,EAAK,GAAkB,GAAK,IAEhDG,EAAiBC,EAAM3B,GAAIuB,EAAMlB,QAEjCsB,EAAMJ,EAAK,IAAMlB,EAIrB,SAAgByB,EAAcpB,GAG5B,QAFMqB,EAAQtB,EAAWC,GACrBiB,EAAQjB,EAAMsB,OAAOL,MAClBA,GAAwB,EAAfI,EAAMxC,QAAY,CAEhCoC,EAAQA,EADEI,EAAMH,SAIlB,OAAOD,EAOT,SAAgBM,EAAiBC,OAAW,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAA9C,UAAAC,OAAA6C,IAAAD,EAAAC,EAAA,GAAA9C,UAAA8C,GAc1C,OAbAD,EAAKE,QAAQ,SAAAC,GACX,IAAK,IAAIC,KAAUD,EACbE,EAAkBN,EAAKK,KAuBd,KAvBwCL,EAAKK,GACpDE,EAAWH,EAAIC,IACjBL,EAAKK,GAAUD,EAAIC,GAEnBL,EAAKK,GAAUG,EAAMJ,EAAIC,KA0BJI,EAxBCT,EAAKK,GAwBKK,EAxBIN,EAAIC,GAyBzCV,EAASc,IAASd,EAASe,IAC7BxE,OAAOyE,eAAeF,KAAUvE,OAAOyE,eAAeD,KACpDrE,MAAMuE,QAAQH,KAASpE,MAAMuE,QAAQF,IA1BtCX,EAAiBC,EAAKK,GAASD,EAAIC,KAuB3C,IAA+BI,EAAWC,IAnBjCV,EAGT,SAAgBM,EAAkBnC,GAChC,OAAOA,IAAU0C,WAAuB,OAAV1C,EAGhC,SAAgB2C,EAAY3C,GAC1B,OAAOA,IAAU0C,UAOnB,SAAgBN,EAAWpC,GACzB,MAAyB,mBAAlB,EAST,SAAgBwB,EAASoB,GACvB,OAAY,MAALA,GAA0B,iBAANA,EAG7B,SAAgBP,EAAMrC,GACpB,OAAKwB,EAASxB,IAAUA,aAAiB6C,QAAU7C,aAAiB8C,EAAAA,YAA4C9C,EAAM+C,sCAC7G/C,EAGLA,aAAiBgD,EAAAA,gBACZ,KAGqC,kBAA1CjF,OAAOU,UAAUwE,SAAS9D,KAAKa,GAC1B,IAAIkD,KAAKlD,EAAMmD,WAGpBjF,MAAMuE,QAAQzC,GACTA,EAAMmB,MAAM,GAAGiC,IAAI,SAAAC,GAAK,OAAAhB,EAAMgB,MAGvCrD,EAAQjC,OAAOa,OAAO,GAAIoB,GAC1BjC,OAAOuF,KAAKtD,GAAOgC,QAAQ,SAAAuB,GAAK,OAAAvD,EAAMuD,GAAKlB,EAAMrC,EAAMuD,MAEhDvD,GAGT,SAAgBwD,EAAmBC,EAA6BnD,GAC1DmD,aAAgBC,EAAAA,UAClBD,EAAKE,SAAQ,GACJF,aAAgBG,EAAAA,WACzBH,EAAKI,cAAc,GAAGvD,GAI1B,SAAgBwD,EAAiBzD,EAAO0D,EAAMC,GAC5CjG,OAAOkG,eAAe5D,EAAO0D,EAAM,CAAEG,YAAY,EAAOC,UAAU,EAAMC,cAAc,IACtF/D,EAAM0D,GAAQC,EClJhB,IAAaK,EAAgB,IAAIC,EAAAA,eAA6B,iBAY9DC,EAAA,WAAA,SAAAA,IAEEhG,KAAAiG,MAAsC,GACtCjG,KAAAkG,WAAkD,GAClDlG,KAAAmG,SAA8C,GAC9CnG,KAAAoG,SAA6F,GAC7FpG,KAAAqG,qBAGI,CACFC,WAAY,GACZC,YAAa,IAEfvG,KAAAwG,OAGI,CACFC,eAAgBtC,UAChBuC,UAAW,SAAS5E,GAClB,OAAOA,EAAM6E,aAAe7E,EAAM6E,YAAYC,UAAY9E,EAAM6E,YAAYE,SAAY/E,EAAMgF,QAAQC,YAAcjF,EAAMgF,QAAQC,WAAWC,WAAelF,EAAMA,MAAMmF,YAAcnF,EAAMA,MAAMmF,WAAWC,QAGjNlH,KAAAmH,WAAkD,UAElDnB,EAAA9F,UAAAkH,UAAA,SAAUC,GAAV,IAAAC,EAAAtH,KACMqH,EAAOpB,OACToB,EAAOpB,MAAMxC,QAAQ,SAAA8D,GAAQ,OAAAD,EAAKE,QAAQD,KAExCF,EAAOnB,YACTmB,EAAOnB,WAAWzC,QAAQ,SAAAgE,GAAa,OAAAH,EAAKI,aAAaD,KAEvDJ,EAAOlB,UACTkB,EAAOlB,SAAS1C,QAAQ,SAAAkE,GAAW,OAAAL,EAAKM,WAAWD,KAEjDN,EAAOQ,cACTR,EAAOQ,aAAapE,QAAQ,SAAAqE,GAAe,OAAAR,EAAKS,eAAeD,KAE7DT,EAAOW,oBACTX,EAAOW,mBAAmBvE,QAAQ,SAAAwD,GAAc,OAAAK,EAAKW,oBAAoBhB,EAAWiB,KAAMjB,EAAWkB,WAEnGd,EAAOF,YACTE,EAAOF,WAAW1D,QAAQ,SAAA2E,GAAK,OAAAd,EAAKH,WAAWiB,EAAEF,MAAQE,EAAEC,YAEzDhB,EAAOb,SACTxG,KAAKwG,OAAMpG,EAAA,GAAQJ,KAAKwG,OAAWa,EAAOb,UAI9CR,EAAA9F,UAAAsH,QAAA,SAAQV,GAAR,IAAAQ,EAAAtH,KACML,MAAMuE,QAAQ4C,GAChBA,EAAQrD,QAAQ,SAAC6E,GAAW,OAAAhB,EAAKE,QAAQc,MAEpCtI,KAAKiG,MAAMa,EAAQoB,QACtBlI,KAAKiG,MAAMa,EAAQoB,MAAK,IAE1BlI,KAAKiG,MAAMa,EAAQoB,MAAMK,UAAYzB,EAAQyB,UAC7CvI,KAAKiG,MAAMa,EAAQoB,MAAMA,KAAOpB,EAAQoB,KACxClI,KAAKiG,MAAMa,EAAQoB,MAAMM,WAAU1B,EAAQ0B,WAC3CxI,KAAKiG,MAAMa,EAAQoB,MAAMO,eAAiB3B,EAAQ2B,eAC9C3B,EAAQX,UACVW,EAAQX,SAAS1C,QAAQ,SAACkE,GAAY,OAAAL,EAAKoB,eAAe5B,EAAQoB,KAAMP,OAK9E3B,EAAA9F,UAAAyI,QAAA,SAAQT,GACN,IAAKlI,KAAKiG,MAAMiC,GACd,MAAM,IAAIU,MAAM,mDAAmDV,EAAI,KAKzE,OAFAlI,KAAK6I,kBAAkBX,GAEhBlI,KAAKiG,MAAMiC,IAGpBlC,EAAA9F,UAAA4I,eAAA,SAAehH,GAAf,IAAAwF,EAAAtH,UAAe,IAAA8B,IAAAA,EAAA,QACPyF,EAAOvH,KAAK2I,QAAQ7G,EAAMyF,MAC5BA,EAAKkB,gBACPpF,EAAiBvB,EAAOyF,EAAKkB,oBAGzBM,EAAiBxB,EAAKiB,YAAWxI,KAAK2I,QAAQpB,EAAKiB,YAASC,eAC9DM,GACF1F,EAAiBvB,EAAOiH,GAGtBjH,GAASA,EAAMkH,cACjBlH,EAAMkH,aAAavF,QAAQ,SAAA6E,OACnBG,EAAiBnB,EAAKqB,QAAQL,GAAQG,eACxCA,GACFpF,EAAiBvB,EAAO2G,KAK9BzI,KAAKiJ,wBAAwBnH,OACvBoH,EAAe,EAAiCC,kBAAkBD,aACpEA,GAAgBA,EAAaE,UAAYF,EAAaE,SAASX,gBACjEpF,EAAiBvB,EAAOoH,EAAaE,SAASX,iBAG3C3G,EAAMqE,UAAYoB,EAAKpB,WAC1BrE,EAAMqE,SAAQxE,EAAO4F,EAAKpB,YAI9BH,EAAA9F,UAAA+I,wBAAA,SAAwBnH,GACtB,QADsB,IAAAA,IAAAA,EAAA,IACjBA,EAAMyF,QAAQzF,EAAMqH,mBAAqBrH,EAAMyF,OAASzF,EAAMqH,kBAAkB5B,MAArF,KAGMA,EAAOvH,KAAK2I,QAAQ7G,EAAMyF,MAE1B8B,EAAmCvH,EAAMsB,OAAc,QAAEiG,0BAC/D9D,EAAiBzD,EAAO,oBAAqB,CAC3CyF,KAAMzF,EAAMyF,KACZgB,UAAWhB,EAAKgB,UAChBW,aAAcG,EACVA,EAA0BC,wBAAwB/B,EAAKgB,WAAWpI,OAAOkJ,EAA0BE,UAAUC,UAC7G,SAIRxD,EAAA9F,UAAA0H,WAAA,SAAWd,GAAX,IAAAQ,EAAAtH,MACEA,KAAKmG,SAASW,EAAQoB,MAAQpB,GAClBb,OACVa,EAAQb,MAAMxC,QAAQ,SAAC8D,GACrBD,EAAKoB,eAAenB,EAAMT,EAAQoB,SAKxClC,EAAA9F,UAAAuJ,WAAA,SAAWvB,GACT,IAAKlI,KAAKmG,SAAS+B,GACjB,MAAM,IAAIU,MAAM,sDAAsDV,EAAI,KAG5E,OAAOlI,KAAKmG,SAAS+B,IAGvBlC,EAAA9F,UAAAwI,eAAA,SAAenB,EAAcW,GACtBlI,KAAKiG,MAAMsB,KACdvH,KAAKiG,MAAMsB,GAAK,IAEbvH,KAAKiG,MAAMsB,GAAMpB,WACpBnG,KAAKiG,MAAMsB,GAAMpB,SAAW,KAEmB,IAA7CnG,KAAKiG,MAAMsB,GAAMpB,SAASuD,QAAQxB,IACpClI,KAAKiG,MAAMsB,GAAMpB,SAAS3E,KAAK0G,IAInClC,EAAA9F,UAAAwH,aAAA,SAAaZ,GACX9G,KAAKkG,WAAWY,EAAQoB,MAAQpB,GAGlCd,EAAA9F,UAAAyJ,aAAA,SAAazB,GACX,IAAKlI,KAAKkG,WAAWgC,GACnB,MAAM,IAAIU,MAAM,wDAAwDV,EAAI,KAG9E,OAAOlI,KAAKkG,WAAWgC,IAGzBlC,EAAA9F,UAAA+H,oBAAA,SAAoBC,EAAcC,GAChCnI,KAAKoG,SAAS8B,GAAQC,GAGxBnC,EAAA9F,UAAA0J,oBAAA,SAAoB1B,GAClB,OAAOlI,KAAKoG,SAAS8B,IAGvBlC,EAAA9F,UAAA6H,eAAA,SAAeD,IACb,IAAIA,EAAY+B,UAAQ/B,EAAYgC,QAAQ9J,OAGtCgG,EAAA9F,UAAA2I,kBAAR,SAA0BX,GACxB,GAAKlI,KAAKiG,MAAMiC,GAAMM,WAAtB,KAIMuB,EAAe/J,KAAK2I,QAAQ3I,KAAKiG,MAAMiC,GAAMM,YAC9CxI,KAAKiG,MAAMiC,GAAMK,YACpBvI,KAAKiG,MAAMiC,GAAMK,UAAYwB,EAAaxB,WAGvCvI,KAAKiG,MAAMiC,GAAM/B,WACpBnG,KAAKiG,MAAMiC,GAAM/B,SAAW4D,EAAa5D,gCA1L9C6D,EAAAA,WAAUzG,KAAA,CAAC,CAAE0G,WAAY,gHAA1B,GClBAC,EAAA,WAOE,SAAAA,EAAoBC,GAAAnK,KAAAmK,aAAAA,SAEpBD,EAAAhK,UAAAkK,UAAA,SAAUzD,EAAoC0D,EAAsCtH,EAAY+D,QAAlD,IAAAuD,IAAAA,EAAA,IAC5CrK,KAAKsK,WAAW,CAAED,WAAUA,EAAEtH,MAAKA,EAAE4D,YAAWA,EAAEG,QAAOA,KAGnDoD,EAAAhK,UAAAoK,WAAR,SAAmBxI,GAAnB,IAAAwF,EAAAtH,KACEA,KAAKuK,gBAAgB9G,QAAQ,SAAA4E,GAAa,OAAAA,EAAUmC,aAAenC,EAAUmC,YAAY1I,KACzF9B,KAAKuK,gBAAgB9G,QAAQ,SAAA4E,GAAa,OAAAA,EAAUoC,YAAcpC,EAAUoC,WAAW3I,KAEnFA,EAAMuI,YACRvI,EAAMuI,WAAW5G,QAAQ,SAACiH,GAAM,OAAApD,EAAKgD,WAAWI,KAGlD1K,KAAKuK,gBAAgB9G,QAAQ,SAAA4E,GAAa,OAAAA,EAAUsC,cAAgBtC,EAAUsC,aAAa7I,MAGrFoI,EAAAhK,UAAAqK,cAAR,WAAA,IAAAjD,EAAAtH,KACE,OAAOR,OAAOuF,KAAK/E,KAAKmK,aAAahD,YAAYtC,IAAI,SAAAqD,GAAQ,OAAAZ,EAAK6C,aAAahD,WAAWe,0BApB7F8B,EAAAA,WAAUzG,KAAA,CAAC,CAAE0G,WAAY,oDAHjBjE,uHAFT,gBC6CE,SAAA4E,EACUC,EACAV,EACAW,EACY/D,EACAgE,EACYC,GANlC,IAAA1D,EAAAtH,KACUA,KAAA6K,cAAAA,EACA7K,KAAAmK,aAAAA,EACAnK,KAAA8K,yBAAAA,EACY9K,KAAA+G,WAAAA,EACA/G,KAAA+K,gBAAAA,EACY/K,KAAAgL,iBAAAA,EA5BzBhL,KAAA+C,MAAa,GACb/C,KAAAkF,KAA8B,IAAIG,EAAAA,UAAU,IAC5CrF,KAAAiL,OAA8B,GAE7BjL,KAAAkL,YAAc,IAAIC,EAAAA,aAGnBnL,KAAAoL,QAAS,EAGVpL,KAAAqL,gBAAkC,GAElCrL,KAAAsL,yBAA0B,EAC1BtL,KAAAuL,uBAAyBvL,KAAKkL,YAAYM,KAChDC,EAAAA,aAAazL,KAAKsL,wBAA0B,IAAM,GAClDI,EAAAA,IAAI,WACFpE,EAAKgE,yBAA0B,EAC/BhE,EAAKqE,wBACLrE,EAAKgE,yBAA0B,KAEjCM,YAkKJ,OAvJEhB,EAAA1K,UAAA2L,UAAA,WACE7L,KAAK2L,yBAGPf,EAAA1K,UAAA4L,YAAA,SAAYC,GACL/L,KAAKiL,QAAiC,IAAvBjL,KAAKiL,OAAOtK,QAAiBX,KAAKoL,SAIlDW,EAAQd,QAAUc,EAAQ7G,MAAQ6G,EAAQhJ,SAC5C/C,KAAK+C,MAAQ/C,KAAK+C,OAAS,GAC3B/C,KAAKkF,KAAOlF,KAAKkF,MAAI,IAASG,EAAAA,UAAU,IACxCrF,KAAKgM,aACLhM,KAAKiM,0BACLjM,KAAK6K,cAAcT,UAAUpK,KAAKkF,KAAMlF,KAAKiL,OAAQjL,KAAK+C,MAAO/C,KAAK8G,SACtE9G,KAAKkM,kBAAkBlM,KAAKiL,QAC5BjL,KAAK8G,QAAQqF,uBAIjBvB,EAAA1K,UAAAkM,YAAA,WACEpM,KAAKiM,0BACLjM,KAAKuL,uBAAuBc,eAG9BzB,EAAA1K,UAAAoM,YAAA,SAAYC,GACVzJ,EAAiB9C,KAAK+C,MAAOwJ,EAAMxK,IAAKwK,EAAM9K,OAC9CzB,KAAKkL,YAAYsB,KAAKxM,KAAK+C,QAG7B6H,EAAA1K,UAAA8L,WAAA,WAAA,IAAA1E,EAAAtH,KAmCE,GAlCAA,KAAK8G,QAAU9G,KAAK8G,SAAW,GAE/B9G,KAAK8G,QAAQ2F,UAAYzM,KAAK8G,QAAQ2F,WAAa,GAC9CzM,KAAK8G,QAAQJ,YAChB1G,KAAK8G,QAAQJ,UAAY1G,KAAKmK,aAAa3D,OAAOE,WAE/C1G,KAAK8G,QAAQ4F,eAChB1M,KAAK8G,QAAQ4F,aAAe,IAAIC,EAAAA,SAG7B3M,KAAK8G,QAAQ8F,aAChB5M,KAAK8G,QAAQ8F,WAAa,SAAC7J,GACzBA,EAAQa,EAAkBb,GAASuE,EAAKuF,aAAe9J,EACnDuE,EAAKvE,QACPvD,OAAOuF,KAAKuC,EAAKvE,OAAOU,QAAQ,SAAAuB,GAAK,cAAOsC,EAAKvE,MAAMiC,KACvDxF,OAAOa,OAAOiH,EAAKvE,MAAOA,GAAS,KAGXuE,EAAY,QAAEgD,cAInChD,EAAK0D,kBAAoB1D,EAAKR,QAAQC,YAAcO,EAAKR,QAAQC,WAAW+F,UAAYxF,EAAKpC,KAChGoC,EAAKR,QAAQC,WAAWgG,UAAUhK,GAElCuE,EAAKpC,KAAK8H,MAAMjK,KAKjB/C,KAAK8G,QAAQC,aAChB/G,KAAK8G,QAAQC,WAAa/G,KAAK+K,iBAAmB/K,KAAK+G,YAGrD/G,KAAK8G,QAAQC,WAAY,KACvBkG,EAAYjN,KAAK8G,QAAQC,WAAWC,UACxCxH,OAAOkG,eAAe1F,KAAK8G,QAAQC,WAAY,YAAa,CAC1DmG,IAAK,WAAM,OAAAD,GACXE,IAAK,SAAA1L,GACHwL,EAAYxL,EACc6F,EAAY,QAAE8F,cAAc,CACpD/C,WAAY/C,EAAK2D,OACjBlI,MAAOuE,EAAKvE,MACZ4D,YAAaW,EAAKpC,KAClB4B,QAASQ,EAAKR,aAMjB9G,KAAK8G,QAAQqF,qBAChBnM,KAAK8G,QAAQqF,mBAAqB,WAAM,OAAA7E,EAAKuF,aAAexJ,EAAiB,GAAIiE,EAAKvE,SAGzD/C,KAAY,QAAEsK,aACjBtK,KAAY,QAAEsK,WAAa,WACnDhD,EAAK2E,0BACL3E,EAAKuD,cAAcT,UAAU9C,EAAKpC,KAAMoC,EAAK2D,OAAQ3D,EAAKvE,MAAOuE,EAAKR,SACtEQ,EAAK4E,kBAAkB5E,EAAK2D,UAIDjL,KAAY,QAAEoN,gBACjBpN,KAAY,QAAEoN,cAAgB,SAACtL,GACnDA,EAAMuL,gBACRvL,EAAMuL,eAAe5J,QAAQ,SAAA6J,GAAO,OAAAA,EAAIC,kBAAkBC,iBAGxD1L,EAAMuI,YACRvI,EAAMuI,WAAW5G,QAAQ,SAAAiH,GAAK,OAA0BpD,EAAY,QAAE8F,cAAc1C,OAK3D1K,KAAY,QAAEqJ,4BACjBrJ,KAAY,QAAEqJ,0BAA4BrJ,KAAK8K,2BAIrEF,EAAA1K,UAAAyL,sBAAR,WACM3L,KAAKoL,QAAoCpL,KAAY,QAAEyN,aAC/BzN,KAAY,QAAEyN,YAAY,CAClDpD,WAAYrK,KAAKiL,OACjBlI,MAAO/C,KAAK+C,MACZ4D,YAAa3G,KAAKkF,KAClB4B,QAAS9G,KAAK8G,WAKZ8D,EAAA1K,UAAAgM,kBAAR,SAA0BjB,EAA6ByC,GAAvD,IAAApG,EAAAtH,UAAuD,IAAA0N,IAAAA,EAAA,IACrDzC,EAAOxH,QAAQ,SAAA3B,GACb,GAAIA,EAAMC,KAAOD,EAAMyF,OAASzF,EAAMuI,WAAY,KAC1CsD,EAAe7L,EAAM6E,YAAYgH,aAAanC,KAClD1J,EAAM8L,aAAaC,UAAY/L,EAAM8L,aAAaC,SAASC,WACzDrC,EAAAA,aAAa3J,EAAM8L,aAAaC,SAASC,YACzCpC,EAAAA,IAAI,cACN7G,EAAAA,IAAI,SAAApD,GAKF,OAJIK,EAAMiM,SAAkC,EAAvBjM,EAAMiM,QAAQpN,QACjCmB,EAAMiM,QAAQtK,QAAQ,SAAAuK,GAAY,OAAAvM,EAAQuM,EAASvM,KAG9CA,IAETiK,EAAAA,IAAI,SAAAjK,GAAS,OAAA6F,EAAKgF,YAAY,CAAEvK,IAAKkM,EAAIP,EAAO,CAAE5L,EAAMC,MAAKmM,KAAK,KAAMzM,MAAKA,OAG/E6F,EAAK+D,gBAAgB7J,KAAKmM,EAAa/B,aAGrC9J,EAAMuI,YAAwC,EAA1BvI,EAAMuI,WAAW1J,QACvC2G,EAAK4E,kBAAkBpK,EAAMuI,WAAYvI,EAAMC,IAAGJ,EAAO+L,EAAO,CAAE5L,EAAMC,MAAO2L,MAK7E9C,EAAA1K,UAAA+L,wBAAR,WACEjM,KAAKqL,gBAAgB5H,QAAQ,SAAA0K,GAAO,OAAAA,EAAI9B,gBACxCrM,KAAKqL,gBAAkB,wBAlM1B+C,EAAAA,UAAS7K,KAAA,CAAC,CACT8K,SAAU,cACVC,SAAU,iSARHpE,SACAlE,SAJ0GuI,EAAAA,gCACpFC,EAAAA,OAAMC,WAAA,CAAA,CAAAlH,KAgDhCmH,EAAAA,kBAhDkCC,EAAAA,mBAAkBF,WAAA,CAAA,CAAAlH,KAiDpDmH,EAAAA,kBACiD9D,EAAU6D,WAAA,CAAA,CAAAlH,KAA3DmH,EAAAA,UAAQ,CAAAnH,KAAIqH,EAAAA,6CA5BdC,EAAAA,oBACAA,EAAAA,sBACAA,EAAAA,uBACAA,EAAAA,2BACAC,EAAAA,uBAGAD,EAAAA,SA+KHjE,kBCzJE,SAAAmE,EACU5E,EACAW,EAEuBkE,GAHvBhP,KAAAmK,aAAAA,EACAnK,KAAA8K,yBAAAA,EAjCM9K,KAAAiP,UAAoB,GAEpCjP,KAAAkP,iBAAkB,EAcRlP,KAAAkL,YAAiC,IAAIC,EAAAA,aAqB7CnL,KAAKkP,gBAAsC,OAApBF,EA0E3B,OA3GExP,OAAAkG,eAAaqJ,EAAA7O,UAAA,QAAK,KAAlB,SAAmBc,GACjBhB,KAAKkP,iBAAmBC,QAAQC,KAAK,wCAAwCpP,KAAKC,YAAYiI,KAAI,4FAGpG1I,OAAAkG,eAAaqJ,EAAA7O,UAAA,OAAI,KAAjB,SAAkBgF,GAChBlF,KAAKkP,iBAAmBC,QAAQC,KAAK,uCAAuCpP,KAAKC,YAAYiI,KAAI,4FAGnG1I,OAAAkG,eAAaqJ,EAAA7O,UAAA,UAAO,KAApB,SAAqB4G,GACnB9G,KAAKkP,iBAAmBC,QAAQC,KAAK,0CAA0CpP,KAAKC,YAAYiI,KAAI,4FAMtG1I,OAAAkG,eAAIqJ,EAAA7O,UAAA,gBAAa,KAAjB,WAKE,OAJ+BF,KAAU,MAAEqN,gBACzC9H,EAAiBvF,KAAK8B,MAAO,iBAAkB,IAGhB9B,KAAU,MAAEqN,oBAG/C,SAAkBgC,GACUrP,KAAU,MAAEqN,eAAiBgC,mCAYzDN,EAAA7O,UAAAoP,mBAAA,WACEtP,KAAKuP,YAAY,qBAGnBR,EAAA7O,UAAAsP,sBAAA,WACExP,KAAKuP,YAAY,wBAGnBR,EAAA7O,UAAAuP,gBAAA,WACEzP,KAAKuP,YAAY,kBAGnBR,EAAA7O,UAAAwP,mBAAA,WACE1P,KAAKuP,YAAY,qBAGnBR,EAAA7O,UAAA2L,UAAA,WACE7L,KAAKuP,YAAY,YAGnBR,EAAA7O,UAAAyP,SAAA,WACE3P,KAAKuP,YAAY,WAGnBR,EAAA7O,UAAA4L,YAAA,SAAYC,GAAZ,IAAAzE,EAAAtH,KACM+L,EAAQjK,OACV9B,KAAK4P,YAAY5P,KAAK8B,MAAO9B,KAAK6P,cAGpC7P,KAAKuP,YAAY,YAAaxD,GAC9B/L,KAAK8P,cAAcrM,QAAQ,SAAA6J,GACzB9N,OAAOa,OAAOiN,EAAIlE,SAAU,CAAEtH,MAAOwF,EAAKxF,WAI9CiN,EAAA7O,UAAAkM,YAAA,WACEpM,KAAKuP,YAAY,aACjBvP,KAAK8P,cAAcrM,QAAQ,SAAAyF,GAAgB,OAAAA,EAAa6G,YACxD/P,KAAK8P,cAAgB,IAGff,EAAA7O,UAAA0P,YAAR,SAAoB9N,EAA0B+N,GAA9C,IAAAvI,EAAAtH,KACEA,KAAK8P,cAAcrM,QAAQ,SAAAyF,GAAgB,OAAAA,EAAa6G,YACxD/P,KAAK8P,cAAgB,GAGrB7B,GADuBnM,EAAMqE,UAAY,IAAItB,IAAI,SAAAmL,GAAe,OAAA1I,EAAK6C,aAAaV,WAAWuG,KACjF,CAAA5P,EAAA,GAAOJ,KAAKmK,aAAaxB,QAAQ7G,EAAMyF,MAAK,CAAE0I,iBAAkB,EAAc9G,sBAAqB1F,QAAQ,SAACyM,OAAE3H,EAAA2H,EAAA3H,UAAWW,EAAAgH,EAAAhH,aAC7HoE,EAAMpE,GAA8B2G,EAAaM,gBAA8B7I,EAAKwD,yBAAyBxB,wBAAwBf,IAE3I/I,OAAOa,OAAOiN,EAAIlE,SAAU,CAAEtH,MAAKA,IACnCwF,EAAKwI,cAActO,KAAK8L,GACxBuC,EAAevC,EAAIlE,SAASgH,kBAIxBrB,EAAA7O,UAAAqP,YAAR,SAAoBrH,EAAc6D,GAC5B/L,KAAK8B,MAAMuO,OAASrQ,KAAK8B,MAAMuO,MAAMnI,KAClC6D,IAAWA,EAAQjK,OACtB9B,KAAK8B,MAAMuO,MAAMnI,GAAMlI,KAAK8B,QAI5B9B,KAAK8B,MAAMwO,WAAatQ,KAAK8B,MAAMwO,UAAUpI,IAC/ClI,KAAK8B,MAAMwO,UAAUpI,GACnBlI,KAAK8B,MAAMoD,KACXlF,KAAK8B,MACL9B,KAAK8B,MAAMiB,MACX/C,KAAK8B,MAAMgF,8BArHlBsH,EAAAA,UAAS7K,KAAA,CAAC,CACT8K,SAAU,eACVC,SAAU,yCACViC,KAAM,CACJC,kBAAmB,yBACnBC,UAAW,6FAVNzK,SAJ8DuI,EAAAA,4DAsDlEmC,EAAAA,UAASnN,KAAA,CAAC,wDApCZsL,EAAAA,yBACAA,EAAAA,MAAKtL,KAAA,CAAC,wBAINsL,EAAAA,oBAIAA,EAAAA,uBAIAA,EAAAA,2BAIAC,EAAAA,6BACA6B,EAAAA,UAASpN,KAAA,CAAC,YAAa,CAACqN,KAAMC,EAAAA,sBA8FjC9B,KCpIA+B,EAAA,WAwCE,SAAAA,EACUC,EACAC,GADAhR,KAAA+Q,SAAAA,EACA/Q,KAAAgR,WAAAA,EAkCZ,OAtDqCF,EAAA5Q,UAAA+Q,QAAnC,SAA2CC,GACzClR,KAAK8B,MAAMqP,OAAQ,EACfnR,KAAKoR,GAAGD,OACVnR,KAAKoR,GAAGD,MAAMnR,KAAK8B,MAAOoP,IAIIJ,EAAA5Q,UAAAmR,OAAlC,SAAyCH,GACvClR,KAAK8B,MAAMqP,OAAQ,EACfnR,KAAKoR,GAAGE,MACVtR,KAAKoR,GAAGE,KAAKtR,KAAK8B,MAAOoP,IAI7B1R,OAAAkG,eAAIoL,EAAA5Q,UAAA,KAAE,KAAN,WACE,OAAOF,KAAK8B,MAAMyP,iBAAmB,oCAQvCT,EAAA5Q,UAAA4L,YAAA,SAAYC,GAAZ,IAAAzE,EAAAtH,KACE,GAAI+L,EAAQjK,MAAO,KACX4K,EAAeX,EAAQjK,MAE7B9B,KAAK+Q,SAASS,aAAaxR,KAAKgR,WAAWS,cAAe,KAAMzR,KAAK8B,MAAM4P,IACvE1R,KAAKoR,IAAMpR,KAAKoR,GAAGO,aACrB3R,KAAK4R,cAAc5R,KAAKoR,GAAGO,YAC3BnS,OAAOkG,eAAe1F,KAAKoR,GAAI,aAAc,CAC3ClE,IAAK,WAAM,OAAA5F,EAAK8J,GAAGS,gBACnB1E,IAAK,SAAAwE,GAAc,OAAArK,EAAKsK,cAAcD,IACtChM,YAAY,EACZE,cAAc,MAIb6G,EAAaoF,eAAiB,IAAIX,SAAWzE,EAAaqF,cAAgB,IAAIZ,OAASnR,KAAKgR,WAAWS,cAAcN,OACxHnR,KAAKgR,WAAWS,cAAczR,KAAK8B,MAAMqP,MAAQ,QAAU,YAKzDL,EAAA5Q,UAAA0R,cAAR,SAAsBD,GAAtB,IAAArK,EAAAtH,KACMA,KAAKoR,GAAGS,gBAAkB7R,KAAKoR,GAAGS,iBAAmBF,GACvDnS,OAAOuF,KAAK/E,KAAKoR,GAAGS,gBAAgBpO,QAAQ,SAAAyE,GAAQ,OAAAZ,EAAKyJ,SAASiB,gBAAgB1K,EAAK0J,WAAWS,cAAevJ,KAGnHlI,KAAKoR,GAAGS,eAAiBF,EACzBnS,OAAOuF,KAAK4M,GAAYlO,QAAQ,SAAAyE,GAAQ,OAAAZ,EAAKyJ,SAASS,aACpDlK,EAAK0J,WAAWS,cAAevJ,EAAMyJ,EAAWzJ,2BAtErD+J,EAAAA,UAAS1O,KAAA,CAAC,CACT8K,SAAU,qBACVkC,KAAM,CACJ2B,cAAe,aACfC,qBAAsB,iBACtBC,kBAAmB,mBACnBC,kBAAmB,cACnBC,cAAe,UAEfC,UAAW,sCACXC,YAAa,0CACbC,UAAW,sCACXC,WAAY,wCACZC,aAAc,0FAhB6DC,EAAAA,iBAA7CC,EAAAA,6CAoB/BhE,EAAAA,MAAKtL,KAAA,CAAC,qCAENuP,EAAAA,aAAYvP,KAAA,CAAC,QAAS,CAAC,2BAOvBuP,EAAAA,aAAYvP,KAAA,CAAC,OAAQ,CAAC,cA+CzBuN,EA5EA,GCIAiC,EAAA,WAAA,SAAAA,KA2BA,OAvBEvT,OAAAkG,eACIqN,EAAA7S,UAAA,QAAK,KADT,WACc,OAAOF,KAAK8B,MAAMiB,WAChC,SAAU/B,GAAUmO,QAAQC,KAAK,wCAAwCpP,KAAKC,YAAYiI,KAAI,4FAE9F1I,OAAAkG,eACIqN,EAAA7S,UAAA,OAAI,KADR,WACa,OAAmBF,KAAK8B,MAAMsB,OAAkB,iBAC7D,SAAS8B,GAAQiK,QAAQC,KAAK,uCAAuCpP,KAAKC,YAAYiI,KAAI,4FAE1F1I,OAAAkG,eACIqN,EAAA7S,UAAA,UAAO,KADX,WAC8B,OAAOF,KAAK8B,MAAMgF,aAChD,SAAYA,GAAyBqI,QAAQC,KAAK,0CAA0CpP,KAAKC,YAAYiI,KAAI,4FAEjH1I,OAAAkG,eAAIqN,EAAA7S,UAAA,MAAG,KAAP,WAAY,OAAOF,KAAK8B,MAAMC,qCAE9BvC,OAAAkG,eAAIqN,EAAA7S,UAAA,cAAW,KAAf,WAAsC,OAAOF,KAAK8B,MAAM6E,6CAExDnH,OAAAkG,eAAIqN,EAAA7S,UAAA,KAAE,KAAN,WAAiC,OAAOF,KAAK8B,MAAMyP,iDAEnD/R,OAAAkG,eAAIqN,EAAA7S,UAAA,YAAS,KAAb,WAA2B,OAAOF,KAAK8G,QAAQJ,UAAU1G,uCAEzDR,OAAAkG,eAAIqN,EAAA7S,UAAA,KAAE,KAAN,WAAmB,OAAOF,KAAK8B,MAAM4P,oCAErClS,OAAAkG,eAAIqN,EAAA7S,UAAA,YAAS,KAAb,WAAkB,OAAOF,KAAK8G,QAAQ2F,WAAa,mEAzBlDoC,EAAAA,qBAGAA,EAAAA,oBAIAA,EAAAA,uBAIAA,EAAAA,SAeHkE,EA3BA,iBAiCE,SAAAC,IAAA,IAAA1L,EACE2L,EAAArS,KAAAZ,OAAOA,YACPmP,QAAQC,KAAK,qFAEjB,OALoC8D,EAAAA,EAAAA,GAKpCF,GALoCD,iBC1BlC,SAAAI,EAAYC,UACVH,EAAArS,KAAAZ,OAAOA,KAeX,OApB8FkT,EAAAA,EAAAA,GAQ5FC,EAAAjT,UAAAmT,IAAA,SAAI7S,EAAYqM,GACdrM,EAAIoD,EAAkBpD,GAAKR,KAAK8B,MAAMuI,WAAW1J,OAASH,EAC1DR,KAAK+C,MAAMuQ,OAAO9S,EAAG,EAAGqM,EAAe/I,EAAM+I,GAAgB1I,WAEtDnE,KAAY,QAAEsK,cAGvB6I,EAAAjT,UAAAqT,OAAA,SAAO/S,GACLR,KAAK+C,MAAMuQ,OAAO9S,EAAG,GAEdR,KAAY,QAAEsK,cAEzB6I,GApB8FJ,iBCF9F,SAAAS,mDAEA,OAF4FN,EAAAA,EAAAA,GAE5FM,GAF4FT,iBCD5F,SAAAU,mDAc4C,OAAXP,EAAAA,EAAAA,uBAdhC9E,EAAAA,UAAS7K,KAAA,CAAC,CACT8K,SAAU,eACVC,SAAU,qRAYgCmF,GAAXV,GCjBjCW,EAAA,WAYE,SAAAA,EAAoBvJ,GAAAnK,KAAAmK,aAAAA,EAsCtB,OApCE3K,OAAAkG,eAAIgO,EAAAxT,UAAA,eAAY,KAAhB,eACQyT,EAAY3T,KAAK8B,MAAM6E,YAC7B,IAAK,IAAIjF,KAASiS,EAAUC,OAC1B,GAAID,EAAUC,OAAO/T,eAAe6B,GAAQ,KACtCyG,EAA6BnI,KAAKmK,aAAaP,oBAAoBlI,GAEvE,GAAIuB,EAAS0Q,EAAUC,OAAOlS,IAAS,CACrC,GAAIiS,EAAUC,OAAOlS,GAAOmS,UAC1B,OAGEF,EAAUC,OAAOlS,GAAOyG,UAC1BA,EAAUwL,EAAUC,OAAOlS,GAAOyG,SAgBtC,OAZInI,KAAK8B,MAAMmF,YAAcjH,KAAK8B,MAAMmF,WAAWb,UAAYpG,KAAK8B,MAAMmF,WAAWb,SAAS1E,KAC5FyG,EAAUnI,KAAK8B,MAAMmF,WAAWb,SAAS1E,IAGvC1B,KAAK8B,MAAMoE,YAAclG,KAAK8B,MAAMoE,WAAWxE,IAAU1B,KAAK8B,MAAMoE,WAAWxE,GAAOyG,UACxFA,EAAUnI,KAAK8B,MAAMoE,WAAWxE,GAAOyG,SAGrCnI,KAAK8B,MAAMgS,iBAAmB9T,KAAK8B,MAAMgS,gBAAgBpS,IAAU1B,KAAK8B,MAAMgS,gBAAgBpS,GAAOyG,UACvGA,EAAUnI,KAAK8B,MAAMgS,gBAAgBpS,GAAOyG,SAGvB,mBAAZA,EACFA,EAAQwL,EAAUC,OAAOlS,GAAQ1B,KAAK8B,OAGxCqG,wDAzCdiG,EAAAA,UAAS7K,KAAA,CAAC,CACT8K,SAAU,4BACVC,SAAU,kEANHtI,oCASN6I,EAAAA,SAwCH6E,EAlDA,iBCGA,SAAAK,mDAImD,OAAXb,EAAAA,EAAAA,uBAJvC9E,EAAAA,UAAS7K,KAAA,CAAC,CACT8K,SAAU,kBACVC,SAAU,+CAEuCyF,GAAXhB,GCSxC,SAAgBiB,EAAeC,EAAyCC,EAAcC,GACpF,OAAIF,aAAsBG,SACjBH,EAAWpT,MAAMqT,EAASC,KAE1BF,ECRX,iBAAA,SAAAI,KAwNA,OAvNEA,EAAAnU,UAAAsK,YAAA,SAAY1I,GAAZ,IAAAwF,EAAAtH,KACM8B,EAAMsB,QAAUtB,EAAMgF,QAAQ2G,cAIlC3L,EAAMgF,QAAQ2G,YAAc,SAAC/C,EAAG4J,GAAgB,OAAAhN,EAAKmG,YAAY/C,EAAG4J,MAGtED,EAAAnU,UAAAuK,WAAA,SAAW3I,GACT,GAAKA,EAAMsB,SAAUtB,EAAMyS,sBAA3B,CAOA,GAFAhP,EAAiBzD,EAAO,wBAAyB,IAE7CA,EAAM0S,qBAAsB,gBACnBzS,OACH0S,EAAqB3S,EAAM0S,qBAAqBzS,GACpD2S,EDxBV,SAAgBC,EAA0BV,EAAoBW,GAC5D,IACE,OAAOR,SAAQvT,WAAA,EAAAc,EAAIiT,EAAQ,CAAKX,EAAU,yBAC1C,MAAOvS,GACPyN,QAAQzN,MAAMA,ICoBgBiT,CACtB,SAAS5S,EACT,CAAC,kBAAmB,QAAS,UAGjC,GAAkC,iBAAvB0S,GAAmC5Q,EAAW4Q,GACvD3S,EAAMyS,sBAAsBxS,GAAO,CACjCkS,WAAYY,EAAKC,gBACfL,EACA3S,EAAMsB,OAAOoR,sBAAwB1S,EAAMsB,OAAOoR,qBAAqB3U,eAAe,4BAClF,WAAM,OAAAiC,EAAMsB,OAAOmO,gBAAgBwD,UACnC5Q,WAENuQ,sBAAqBA,GAEX,6BAAR3S,GACFvC,OAAOkG,eAAe5D,EAAMyS,sBAAsBxS,GAAM,kBAAmB,CACzEmL,IAAK,WAAM,OAAApL,EAAMyP,gBAAgBwD,UACjC5H,IAAK,aACLxH,YAAY,EACZE,cAAc,SAGb,GAAI4O,aAA8BlQ,EAAAA,WAAY,KAC7CyQ,EAAe,EAAwCxJ,KAC3DE,EAAAA,IAAI,SAAA5G,GAAK,OAAAkP,EAAeU,EAAuB,CAAE5S,MAAKA,GAAI,CAACgD,EAAGhD,EAAMiB,MAAOjB,OAC3E8J,YAEIqJ,EAAYnT,EAAMuO,MAAM6E,UAC9BpT,EAAMuO,MAAM6E,UAAY,SAACpT,GACvBmT,GAAaA,EAAUnT,GACvBkT,EAAa3I,wBAjCnB,IAAK,IAAMtK,KAAOD,EAAM0S,uBAAbzS,IAuCTD,EAAMqT,gBAAkBrT,EAAMsB,OAAO+R,yBAEhCrT,EAAMsT,KACbtT,EAAMqT,eAAiBnV,KAAK8U,gBAC1BhT,EAAMqT,eACNrT,EAAMsB,QAAUtB,EAAMsB,OAAO+R,eAAiB,WAAM,OAAArT,EAAMsB,OAAOgS,MAAOjR,cAK9EkQ,EAAAnU,UAAAyK,aAAA,SAAa7I,GACPA,EAAMsB,QAIVtB,EAAMgF,QAAQ2G,YAAY3L,GAAO,IAG3BuS,EAAAnU,UAAA4U,gBAAR,SAAwBb,EAAYoB,GAMlC,MAJ0B,iBAD1BpB,EAAaA,GAAU,WAAW,OAAA,MAEhCA,ED1FN,SAAgBqB,EAAqBrB,EAAoBW,GACvD,IACE,OAAOR,SAAQvT,WAAA,EAAAc,EAAIiT,EAAQ,CAAE,UAAUX,EAAU,OACjD,MAAOvS,GACPyN,QAAQzN,MAAMA,ICsFC4T,CAAqBrB,EAAY,CAAC,QAAS,eAGnDoB,EACH,SAACtS,EAAY0J,GAAmB,OAAA4I,KAAsBpB,EAAWlR,EAAO0J,IACxEwH,GAGEI,EAAAnU,UAAAuN,YAAR,SAAoB3L,EAA+BwS,GAAnD,IAAAhN,EAAAtH,UAAmD,IAAAsU,IAAAA,GAAA,OAC7C9G,GAAe,EACnB1L,EAAMuI,WAAW5G,QAAQ,SAAAiH,GACvBpD,EAAKiO,2BAA2B7K,EAAG4J,KAAiB9G,GAAe,GACnElG,EAAKkO,2BAA2B9K,EAAG4J,KAAiB9G,GAAe,GAE/D9C,EAAEL,YAAoC,EAAtBK,EAAEL,WAAW1J,QAC/B2G,EAAKmG,YAAY/C,EAAG4J,KAIpB9G,GAAgB1L,EAAMgF,SAAWhF,EAAMgF,QAAQsG,eACjDtL,EAAMgF,QAAQsG,cAActL,IAIxBuS,EAAAnU,UAAAqV,2BAAR,SAAmCzT,EAA+BwS,GAChE,IAAKxS,IAAUA,EAAMyS,sBACnB,OAAO,MAGL/G,GAAe,EACbgH,EAAuB1S,EAAMyS,sBAC7BrO,EAAarD,EAAkBgC,IAAI,SAAAC,GAAK,MAAA,mBAAmBA,IAEjE,IAAK,IAAM/C,KAAOyS,EAAsB,KAClCiB,EAAkBzB,EAAeQ,EAAqBzS,GAAKkS,WAAY,CAAEnS,MAAKA,GAAI,CAACA,EAAMiB,MAAOjB,EAAMgF,QAAQ2F,YAKlH,GAJY,6BAAR1K,IACF0T,IAAoBA,GAIpBnB,GACEE,EAAqBzS,GAAK0T,kBAAoBA,KACzCxS,EAASwS,IAAoBC,KAAKC,UAAUF,KAAqBC,KAAKC,UAAUnB,EAAqBzS,GAAK0T,kBAEjH,CASA,GARAjI,GAAe,EACfgH,EAAqBzS,GAAK0T,gBAAkBA,EAC5CzB,EACEQ,EAAqBzS,GAAK2S,sBAC1B,CAAE5S,MAAKA,GACP,CAAC2T,EAAiB3T,EAAMiB,MAAOjB,IAGH,IAA1BC,EAAI2H,QAAQ,UAAiB,KACzB/G,EAAOZ,EAAIS,QAAQ,WAAY,IACnCsK,EAAUhL,EAAMC,KAAOA,IAAQY,EAAOb,EAAM6E,YAAc7E,EAAMsB,OAAOuD,YAAYuG,IAAIvK,IAGvFmK,GACKlJ,EAAkBkJ,EAAQrL,QAAUmC,EAAkB6R,IACxD3I,EAAQrL,QAAUgU,GAErB3I,EAAQ8I,WAAWH,IAIU,IAA7BvP,EAAWwD,QAAQ3H,IAAeD,EAAM6E,aAC1C7E,EAAM6E,YAAYkP,uBAAuB,CAAEC,WAAW,KAK5D,OAAOtI,GAGD6G,EAAAnU,UAAAsV,2BAAR,SAAmC1T,EAA+BwS,GAChE,IAAKxS,GAAS8B,EAAkB9B,EAAMqT,gBACpC,OAAO,MAGHY,IAAkC/B,EACtClS,EAAMqT,eACN,CAAErT,MAAKA,GACP,CAACA,EAAMiB,MAAOjB,EAAMgF,QAAQ2F,YAE1Be,GAAe,EACnB,GAAIuI,IAAyBjU,EAAMsT,MAAQd,EAAa,CAMtD,GALA9G,GAAe,EAEf1L,EAAMsT,KAAOW,EACbjU,EAAMyP,gBAAgByE,OAASD,EAE3BjU,EAAM6E,aAAe7E,EAAMC,IAAK,KAC5BkU,EAASjW,KAAKkW,uBAAuBpU,GAC3C,GAAImU,EAAQ,KACJnJ,EAAUmJ,EAAO/I,IAAI,GAAGlN,KAAKmW,SAASrU,KACf,IAAzBiU,GAAiCjJ,EACnC7H,EAAmBgR,EAAQjW,KAAKmW,SAASrU,KACP,IAAzBiU,GAAmCjJ,GAC5C9M,KAAKoW,gBAAgBH,EAAQnU,IAK/BA,EAAMgF,QAAQ4F,cAChB5K,EAAMgF,QAAQ4F,aAAapL,KAAI,CAA4BQ,MAAOA,EAAOyF,KAAM,SAAU9F,MAAOsU,IAIpG,OAAOvI,GAGD6G,EAAAnU,UAAAkW,gBAAR,SAAwBhT,EAA+BtB,OAC/CuU,EAAanT,EAAcpB,GAE7B8B,EAAkB9B,EAAM6E,YAAYlF,QAAUmC,EAAkByS,IAC/DvU,EAAM6E,YAAYlF,QAAU4U,GAE/BvU,EAAM6E,YAAYiP,WAAWS,EAAY,CAAEP,WAAW,IAGpD1S,aAAkB+B,EAAAA,UACpB/B,EAAO5B,KAAKM,EAAM6E,aACTvD,aAAkBiC,EAAAA,WAC3BjC,EAAOkT,WAAW,GAAGtW,KAAKmW,SAASrU,GAAUA,EAAM6E,cAI/C0N,EAAAnU,UAAAgW,uBAAR,SAA+BpU,OACvBqB,EAAQtB,EAAWC,GAGzB,OAFAqB,EAAMoT,MAEiB,EAAfpT,EAAMxC,OAAamB,EAAMsB,OAAOuD,YAAYuG,IAAI/J,GAASrB,EAAMsB,OAAOuD,aAGxE0N,EAAAnU,UAAAiW,SAAR,SAAiBrU,GACf,OAAOD,EAAWC,GAAOyU,OAE7BlC,kBC7NE,SAAAmC,EAAoBrM,GAAAnK,KAAAmK,aAAAA,EAsHtB,OApHEqM,EAAAtW,UAAAuK,WAAA,SAAW3I,GACT9B,KAAKyW,oBAAoB3U,GACzB9B,KAAK0W,yBAAyB5U,IAGxB0U,EAAAtW,UAAAuW,oBAAR,SAA4B3U,GAA5B,IAAAwF,EAAAtH,KACE,IAAI8B,EAAM6U,cAIVpR,EAAiBzD,EAAO,cAAe,IACvC9B,KAAK4W,8BAA8B9U,GAC/BA,EAAMoE,YAAY,gBACT2Q,GACT,GAAsB,eAAlBA,EAAgC,KAE9BC,EACAC,EAFAC,EAAYlV,EAAMoE,WAAW2Q,GAG7B5T,EAAS+T,KACXF,EAAYE,EAAUnD,UACtBkD,EAAUC,EAAU7O,QACpB6O,EAAYA,EAAU/C,YAGxBnS,EAAM6U,YAAYnV,KAAK,SAACsL,WAChBmK,EAAUD,EAAUlK,EAAShL,GACnC,GAAIgV,GAAahV,EAAM6E,aAAe7E,EAAM6E,YAAYuG,IAAI4J,GAC1D,GAAKG,EAKE,KACCrD,EAAU9R,EAAM6E,YAAYuG,IAAI4J,GAAWlD,QAAU,UACpDA,EAAOiD,GACd/U,EAAM6E,YAAYuG,IAAI4J,GAAWI,UAAyC,IAA/B1X,OAAOuF,KAAK6O,GAAQjT,OAAe,KAAOiT,QAPrF9R,EAAM6E,YAAYuG,IAAI4J,GAAWI,UAAS9W,EAAA,GACpC0B,EAAM6E,YAAYuG,IAAI4J,GAAWlD,QAAU,KAAE1D,EAAA,IAChD2G,GAAgB,CAAE1O,QAAO4O,GAAE7G,KASlC,OAAO+G,EAAU,OAAIE,EAAA,IAAMN,IAAgBC,GAAY,CAAEjD,UAASiD,GAASK,UAGxExX,MAAMuE,QAAQpC,EAAMoE,WAAWe,cAClCnF,EAAMoE,WAAWe,WAAa,CAACnF,EAAMoE,WAAWe,aAElDnF,EAAMoE,WAAWe,WACdxD,QAAQ,SAACgE,GAAmB,OAAA3F,EAAM6U,YAAYnV,KAAK8F,EAAK8P,kBAAkBtV,EAAO2F,OAjCxF,IAAK,IAAMoP,KAAiB/U,EAAMoE,aAAvB2Q,KAuCPL,EAAAtW,UAAAwW,yBAAR,SAAiC5U,GAAjC,IAAAwF,EAAAtH,KACE,IAAI8B,EAAMuV,mBAIV9R,EAAiBzD,EAAO,mBAAoB,IACxCA,EAAMgS,iBAAiB,gBACd+C,GACT,GAAsB,eAAlBA,EAAgC,KAC9BS,EAAYxV,EAAMgS,gBAAgB+C,GAClC5T,EAASqU,KACXA,EAAYA,EAAUrD,YAGxBnS,EAAMuV,iBAAiB7V,KAAK,SAACsL,GAA6B,OAAA,IAAIyK,QAAQ,SAACC,GACrE,OAAOF,EAAUxK,EAAShL,GAAO2V,KAAK,SAACC,SACrCF,EAAQE,EAAS,OAAIxH,EAAA,IAAM2G,IAAgB,EAAI3G,eAI9CvQ,MAAMuE,QAAQpC,EAAMgS,gBAAgB7M,cACvCnF,EAAMgS,gBAAgB7M,WAAa,CAACnF,EAAMgS,gBAAgB7M,aAE5DnF,EAAMgS,gBAAgB7M,WACnBxD,QAAQ,SAACgE,GAAmB,OAAA3F,EAAMuV,iBAAiB7V,KAAK8F,EAAK8P,kBAAkBtV,EAAO2F,OAjB7F,IAAK,IAAMoP,KAAiB/U,EAAMgS,kBAAvB+C,KAuBPL,EAAAtW,UAAA0W,8BAAR,SAAsC9U,GACpCe,EACG8U,OAAO,SAAAC,GAAO,OAAC9V,EAAMyP,iBAAmBzP,EAAMyP,gBAAgB1R,eAAe+X,IAAU9V,EAAM0S,sBAAwB1S,EAAM0S,qBAAqB,mBAAmBoD,KACnKnU,QAAQ,SAACmU,GACR9V,EAAM6U,YAAYnV,KAAK,SAACsL,OAChBrL,EAAQK,EAAMyP,gBAAgBqG,GACpC,IAAc,IAAVnW,EACF,OAAO,KAET,OAAQmW,GACN,IAAK,WACH,OAAOC,EAAAA,WAAWC,SAAShL,GAC7B,IAAK,UACH,OAAO+K,EAAAA,WAAWE,QAAQtW,EAAnBoW,CAA0B/K,GACnC,IAAK,YACH,OAAO+K,EAAAA,WAAWG,UAAUvW,EAArBoW,CAA4B/K,GACrC,IAAK,YACH,OAAO+K,EAAAA,WAAWI,UAAUxW,EAArBoW,CAA4B/K,GACrC,IAAK,MACH,OAAO+K,EAAAA,WAAWK,IAAIzW,EAAfoW,CAAsB/K,GAC/B,IAAK,MACH,OAAO+K,EAAAA,WAAWM,IAAI1W,EAAfoW,CAAsB/K,SAMjC0J,EAAAtW,UAAAkX,kBAAR,SAA0BtV,EAA+B2F,GAKvD,OAJAA,EAAiC,iBAAdA,EACfzH,KAAKmK,aAAaR,aAAalC,GAAWR,WAC1CQ,EAEG,SAACqF,GAA6B,OAAA,EAAgCA,EAAShL,KAElF0U,kBCvHA,SAAA4B,KAgGA,OA/FEA,EAAAlY,UAAAuK,WAAA,SAAW3I,GAAX,MAAAwF,EAAAtH,KACE,GAAI8B,EAAMC,KAAOD,EAAMyF,KAAM,KACrB8Q,EAAQxW,EAAW,CAAEE,IAAKD,EAAMC,MAClCuW,EAAWxW,EAAMsB,OAAkB,YAAemV,EAAYzW,EAAMuI,aAAU6F,EAAA,IAAMmI,EAAM,IAAKvW,EAAMiB,MAAKmN,GAAKpO,EAAMiB,MACzHsV,EAAM5U,QAAQ,SAACd,EAAM6V,OAEbC,EAAW9V,EAAK+B,WAElB8T,IAAUH,EAAM1X,OAAS,EAC3B2G,EAAKoR,eAAeJ,EAAUxW,EAAOyW,EAAWE,IAE3CF,EAAU5V,KACb4V,EAAU5V,GAAwB,iBAATA,EAAoB,GAAK,IAEpD2E,EAAKoR,eAAeJ,EAAU,CAAEvW,IAAK0W,EAAUpO,WAAY,GAAIuD,aAAc,GAAI2D,gBAAiB,IAAMgH,EAAWE,GAEnHH,EAAuBA,EAASpL,IAAIuL,GACpCF,EAAYA,EAAU5V,MAKxBb,EAAMuI,aAAevI,EAAM6E,cAC7B7E,EAAM6E,YAAc7E,EAAMsB,OAAOuD,cAI7ByR,EAAAlY,UAAAwY,eAAR,SAAuBxT,EAA6BpD,EAA+BiB,EAAYJ,OAMzFmK,EALE6L,EAAsB,CAC1BzS,WAAYpE,EAAM6U,YAClB7C,gBAAiBhS,EAAMuV,iBACvBuB,SAAU9W,EAAM8L,aAAagL,UAI/B,GAAI9W,EAAM6E,uBAAuBlC,EAAAA,iBAAmBS,EAAKgI,IAAG,GAGtDtJ,GAFJkJ,EAAUhL,EAAM6E,aAAezB,EAAKgI,IAAG,IAETzL,QAAUmC,EAAkBb,EAAMJ,KAC3DmK,EAAQrL,QAAUsB,EAAMJ,MACxBmK,aAAmB+L,EAAAA,cAEtB/L,EAAQ8I,WAAW7S,EAAMJ,KAGvBgW,EAAuBzS,YAAcyS,EAAuB7E,mBAC1D6E,EAAuBzS,YACzB4G,EAAQgM,cAAcH,EAAuBzS,YAE3CyS,EAAuB7E,iBACzBhH,EAAQiM,mBAAmBJ,EAAuB7E,iBAEpDhH,EAAQ+I,+BAEL,GAAI/T,EAAMqH,mBAAqBrH,EAAMqH,kBAAkBZ,WAAazG,EAAMqH,kBAAkBZ,UAAUyQ,cAAe,KACpHzQ,EAAYzG,EAAMqH,kBAAkBZ,UAC1C4G,QAAQC,KAAK,eAAe7G,EAAUL,KAAI,8EAC1C4E,EAAUvE,EAAUyQ,cAAcjW,EAAMJ,GAAOb,QAE/CgL,EADShL,EAAMuI,aAAevI,EAAMmX,WAC1B,IAAI5T,EAAAA,UAAU,GAAIsT,GACnB7W,EAAMmX,WACL,IAAI9T,EAAAA,UAAU,GAAIwT,GAElB,IAAIE,EAAAA,YAAY9V,EAAMJ,GAAOgW,GAGrC7W,EAAMyP,gBAAgBwD,UACxBjI,EAAQoM,iBAKCpX,EAAMyP,gBAAgBwD,UAC/BvV,OAAOkG,eAAe5D,EAAMyP,gBAAiB,WAAY,CACvDrE,IAAK,WAAM,OAACpL,EAAM6E,YAAYwS,SAC9BhM,IAAK,SAAC1L,GAAmB,OAAAA,EAAQK,EAAM6E,YAAYuS,UAAYpX,EAAM6E,YAAYyS,UACjFzT,YAAY,EACZE,cAAc,IAId/D,IACFA,EAAM6E,YAAcmG,GAGlB5H,aAAgBC,EAAAA,UACdD,EAAKmU,GAAE,KAAoBvM,GAC7B5H,EAAKoU,WAAU,EAAgBxM,GAG7B5H,EAAKgI,IAAG,KAAoBJ,GAC9B5H,EAAKoU,WAAU,EAAgBxM,IAIvCsL,kBC9FE,SAAAmB,EAAoBpP,GAAAnK,KAAAmK,aAAAA,EADZnK,KAAAwZ,OAAS,EA2InB,OAxIED,EAAArZ,UAAAsK,YAAA,SAAY1I,GAGV,GAFA9B,KAAKmK,aAAalB,wBAAwBnH,GAC1C9B,KAAKyZ,0BAA0B3X,GAAO0I,eAClC1I,EAAMsB,OAAV,KAIMsW,EAAmB5X,EAAMgF,SAAWhF,EAAMgF,QAAQL,gBAAmBzG,KAAKmK,aAAa3D,OAAOC,gBACnG9G,MAAMuE,QAAQwV,GAAmBA,EAAkB,CAACA,IAAkBjW,QAAQ,SAAAgD,GAC7E,GAAIA,IACF0I,QAAQC,KAAK,sFACM3I,EAAe3E,EAAMuI,WAAYvI,EAAMiB,MAAkBjB,EAAiB,YAAEA,EAAMgF,UAEnG,MAAM,IAAI8B,MAAM,qDAMxB2Q,EAAArZ,UAAAuK,WAAA,SAAW3I,GAAX,IAAAwF,EAAAtH,KACEA,KAAK2Z,iBAAiB7X,GACtB9B,KAAKyZ,0BAA0B3X,GAAO2I,aAClC3I,EAAMuI,YACRvI,EAAMuI,WAAW5G,QAAQ,SAACiH,EAAG8N,GAC3BhZ,OAAOkG,eAAegF,EAAG,SAAU,CAAEwC,IAAK,WAAM,OAAApL,GAAO+D,cAAc,IACrErG,OAAOkG,eAAegF,EAAG,QAAS,CAAEwC,IAAK,WAAM,OAAAsL,GAAO3S,cAAc,IACpEyB,EAAKkS,YAKXD,EAAArZ,UAAAyK,aAAA,SAAa7I,GACX9B,KAAKyZ,0BAA0B3X,GAAO6I,gBAGhC4O,EAAArZ,UAAAyZ,iBAAR,SAAyB7X,OACjB8X,EAAgC9X,EAAY,OAC7C8X,IAILpa,OAAOkG,eAAe5D,EAAO,OAAQ,CAAEoL,IAAK,WAAM,OAAA0M,EAAKjT,aAAad,cAAc,IAClFrG,OAAOkG,eAAe5D,EAAO,UAAW,CAAEoL,IAAK,WAAM,OAAA0M,EAAK9S,SAASjB,cAAc,IACjFrG,OAAOkG,eAAe5D,EAAO,QAAS,CACpCoL,IAAK,WAAM,OAAApL,EAAMC,KAAOD,EAAMuI,WAAanH,EAAcpB,GAAS8X,EAAK7W,OACvE8C,cAAc,IAGhB/D,EAAM4P,GhBtDV,SAAgBmI,EAAWL,EAAgB1X,EAA0B0W,GACnE,GAAI1W,EAAM4P,GAAI,OAAO5P,EAAM4P,OACvBnK,EAAOzF,EAAMyF,KAEjB,OADKA,GAAQzF,EAAMwM,WAAU/G,EAAO,YAC7B,CAACiS,EAAQjS,EAAMzF,EAAMC,IAAKyW,GAAOtK,KAAK,KgBkDhC2L,CAAW,UAAU7Z,KAAKwZ,OAAU1X,EAAOA,EAAa,OACnEA,EAAMyP,gBAAkBzP,EAAMyP,iBAAmB,GACjDzP,EAAM8L,aAAe9L,EAAM8L,cAAgB,GAC3C9L,EAAMuO,MAAQvO,EAAMuO,OAAS,GACzBvO,EAAMwO,WACRnB,QAAQC,KAAK,yEAGXtN,EAAMyF,MAAQzF,EAAMC,MACtBD,EAAMyP,gBAAkB/R,OAAOa,OAAO,CACpCyZ,MAAO,GACPC,YAAa,GACb5I,OAAO,GACNrP,EAAMyP,kBAGPzP,EAAMwM,UAA2B,oBAAfxM,EAAMyF,OACtBzF,EAAMyF,MACR4H,QAAQC,KAAK,6EAEftN,EAAMyF,KAAO,mBAGXzF,EAAMyF,MACRvH,KAAKmK,aAAarB,eAAehH,GAE/BA,EAAMC,KAAOqC,EAAYtC,EAAM2D,gBAAkB3D,EAAMuI,YAAcvI,EAAMmX,cAC7EnX,EAAM2D,aAAe3D,EAAMmX,WAAa,GAAK,KAG1C7U,EAAYtC,EAAM2D,eAAiBrB,EAAYlB,EAAcpB,KAChEgB,EAAiB8W,EAAK7W,MAAOjB,EAAMC,IAAKD,EAAM2D,cAGhDzF,KAAKga,kBAAkBlY,GACnBA,EAAMmX,YACRjZ,KAAKia,eAAenY,IAGjBA,EAAMyF,MAAQzF,EAAMuI,aACvBvI,EAAMyF,KAAO,kBAITgS,EAAArZ,UAAA+Z,eAAR,SAAuBnY,GAErB,GADAA,EAAMuI,WAAavI,EAAMuI,YAAc,GACnCvI,EAAMuI,WAAW1J,OAASmB,EAAMiB,MAAMpC,OACxC,IAAK,IAAIH,EAAIsB,EAAMuI,WAAW1J,OAAQH,GAAKsB,EAAMiB,MAAMpC,SAAUH,EAC/DyE,EAAmBnD,EAAiB,YAAetB,GACnDsB,EAAMuI,WAAWiJ,OAAO9S,EAAG,GAI/B,IAASA,EAAIsB,EAAMuI,WAAW1J,OAAQH,EAAIsB,EAAMiB,MAAMpC,OAAQH,IAAK,KAC3DkK,EAACtK,EAAA,GAAQ0D,EAAMhC,EAAMmX,YAAW,CAAElX,IAAK,GAAGvB,IAChDsB,EAAMuI,WAAW7I,KAAKkJ,KAIlB6O,EAAArZ,UAAA8Z,kBAAR,SAA0BlY,GACxBA,EAAMqE,SAAWrE,EAAMqE,UAAY,OAC7B+T,EAAyB9Z,EAAA,CAC7BkG,WAAY,GACZC,YAAa,IACTzE,EAAMyP,gBAAgBlL,sBAAwB,IAGpDvE,EAAMqE,SAAW8H,EACZjO,KAAKmK,aAAa9D,qBAAqBC,WAAWzB,IAAI,SAAA7D,GAAK,OAAAA,EAAEc,KAC7DoY,EAA0B5T,WAAWzB,IAAI,SAAA7D,GAAK,OAAAA,EAAEc,KAChDA,EAAMqE,SACNnG,KAAKmK,aAAa9D,qBAAqBE,YAAY1B,IAAI,SAAA7D,GAAK,OAAAA,EAAEc,KAC9DoY,EAA0B3T,YAAY1B,IAAI,SAAA7D,GAAK,OAAAA,EAAEc,MACpD6V,OAAO,SAACwC,EAAI3Z,EAAG4Z,GAAM,OAAAD,GAAM3Z,IAAM4Z,EAAE1Q,QAAQyQ,MAGvCZ,EAAArZ,UAAAuZ,0BAAR,SAAkC3X,OAC5BsH,EAA4B,GAKhC,OAJItH,EAAMqH,mBAAqBrH,EAAMqH,kBAAkBD,eACrDE,EAAWtH,EAAMqH,kBAAkBD,aAAaE,UAG3C,CACLoB,YAAa,WAAM,OAAApB,EAASoB,aAAepB,EAASoB,YAAY1I,IAChE2I,WAAY,WAAM,OAAArB,EAASqB,YAAcrB,EAASqB,WAAW3I,IAC7D6I,aAAc,WAAM,OAAAvB,EAASuB,cAAgBvB,EAASuB,aAAa7I,MAGzEyX,KClIA,SAAgBc,EAAoBlQ,GAClC,MAAO,CACLlE,MAAO,CACL,CAAEiC,KAAM,eAAgBK,UAAWkL,GACnC,CAAEvL,KAAM,kBAAmBK,UAAWwL,IAExC5M,WAAY,CACV,CAAEe,KAAM,OAAQG,UAAW,IAAIkR,EAAcpP,IAC7C,CAAEjC,KAAM,mBAAoBG,UAAW,IAAImO,EAAyBrM,IACpE,CAAEjC,KAAM,aAAcG,UAAW,IAAI+P,GACrC,CAAElQ,KAAM,mBAAoBG,UAAW,IAAIgM,KAKjD,IAAAiG,EAAA,WAqCE,SAAAA,EACEC,EACmCC,QAAnC,IAAAA,IAAAA,EAAA,IAEKA,GAILA,EAAQ/W,QAAQ,SAAA4D,GAAU,OAAAkT,EAAcnT,UAAUC,KAEtD,OAjCSiT,EAAAG,QAAP,SAAepT,GACb,YADa,IAAAA,IAAAA,EAAA,IACN,CACLqT,SAAUJ,EACVK,UAAW,CACT,CAAEC,QAAS9U,EAAe+U,OAAO,EAAMC,WAAYT,EAAqBU,KAAM,CAAC/U,IAC/E,CAAE4U,QAAS9U,EAAekV,SAAU3T,EAAQwT,OAAO,GACnD,CAAED,QAASK,EAAAA,6BAA8BD,SAAU3T,EAAQwT,OAAO,GAClE7U,EACAkE,KAKCoQ,EAAAY,SAAP,SAAgB7T,GACd,YADc,IAAAA,IAAAA,EAAA,IACP,CACLqT,SAAUJ,EACVK,UAAW,CACT,CAAEC,QAAS9U,EAAekV,SAAU3T,EAAQwT,OAAO,GACnD,CAAED,QAASK,EAAAA,6BAA8BD,SAAU3T,EAAQwT,OAAO,0BAhCzEM,EAAAA,SAAQ5X,KAAA,CAAC,CACR6X,aAAc,CACZxQ,EACAmE,EACA+B,EACA2C,EACAC,EACAK,GAEFsH,gBAAiB,CAAC5H,EAAaM,GAC/BuH,QAAS,CAAC1Q,EAAYmE,EAAa+B,EAAkB2C,EAAaC,GAClE6H,QAAS,CAACC,EAAAA,2DArCHxV,iCAiEJ0I,EAAAA,UAAQ,CAAAnH,KAAIkU,EAAAA,OAAMlY,KAAA,CAACuC,QAQxBwU,EA/CA","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { FormlyFieldConfig } from './core';\nimport { Observable } from 'rxjs';\nimport { AbstractControl, FormArray, FormGroup } from '@angular/forms';\n\nexport function getFieldId(formId: string, field: FormlyFieldConfig, index: string|number) {\n  if (field.id) return field.id;\n  let type = field.type;\n  if (!type && field.template) type = 'template';\n  return [formId, type, field.key, index].join('_');\n}\n\nexport function getKeyPath(field: {key?: string|string[], fieldGroup?: any, fieldArray?: any}): (string|number)[] {\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n  if (!(<any> field)['_formlyKeyPath'] || (<any> field)['_formlyKeyPath'].key !== field.key) {\n    let keyPath: (string|number)[] = [];\n    if (field.key) {\n      /* Also allow for an array key, hence the type check  */\n      let pathElements = typeof field.key === 'string' ? field.key.split('.') : field.key;\n      for (let pathElement of pathElements) {\n        if (typeof pathElement === 'string') {\n          /* replace paths of the form names[2] by names.2, cfr. angular formly */\n          pathElement = pathElement.replace(/\\[(\\w+)\\]/g, '.$1');\n          keyPath = keyPath.concat(pathElement.split('.'));\n        } else {\n          keyPath.push(pathElement);\n        }\n      }\n      for (let i = 0; i < keyPath.length; i++) {\n        let pathElement = keyPath[i];\n        if (typeof pathElement === 'string' && /^\\d+$/.test(pathElement))  {\n          keyPath[i] = parseInt(pathElement);\n        }\n      }\n    }\n    (<any> field)['_formlyKeyPath'] = {\n      key: field.key,\n      path: keyPath,\n    };\n  }\n\n  return (<any> field)['_formlyKeyPath'].path.slice(0);\n}\n\nexport const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n\nexport function assignModelValue(model: any, path: string | (string | number)[], value: any) {\n  if (typeof path === 'string') {\n    path = getKeyPath({key: path});\n  }\n\n  if (path.length > 1) {\n    const e = path.shift();\n    if (!model[e] || !isObject(model[e])) {\n      model[e] = typeof path[0] === 'string' ? {} : [];\n    }\n    assignModelValue(model[e], path, value);\n  } else {\n    model[path[0]] = value;\n  }\n}\n\nexport function getFieldValue(field: FormlyFieldConfig): any {\n  const paths = getKeyPath(field);\n  let model = field.parent.model;\n  while (model && paths.length > 0) {\n    const e = paths.shift();\n    model = model[e];\n  }\n\n  return model;\n}\n\nexport function getKey(controlKey: string, actualKey: string) {\n  return actualKey ? actualKey + '.' + controlKey : controlKey;\n}\n\nexport function reverseDeepMerge(dest: any, ...args: any[]) {\n  args.forEach(src => {\n    for (let srcArg in src) {\n      if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        if (isFunction(src[srcArg])) {\n          dest[srcArg] = src[srcArg];\n        } else {\n          dest[srcArg] = clone(src[srcArg]);\n        }\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n}\n\nexport function isNullOrUndefined(value: any) {\n  return value === undefined || value === null;\n}\n\nexport function isUndefined(value: any) {\n  return value === undefined;\n}\n\nexport function isBlankString(value: any) {\n  return value === '';\n}\n\nexport function isFunction(value: any) {\n  return typeof(value) === 'function';\n}\n\nexport function objAndSameType(obj1: any, obj2: any) {\n  return isObject(obj1) && isObject(obj2)\n    && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)\n    && !(Array.isArray(obj1) || Array.isArray(obj2));\n}\n\nexport function isObject(x: any) {\n  return x != null && typeof x === 'object';\n}\n\nexport function clone(value: any): any {\n  if (!isObject(value) || value instanceof RegExp || value instanceof Observable || /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity) {\n    return value;\n  }\n\n  if (value instanceof AbstractControl) {\n    return null;\n  }\n\n  if (Object.prototype.toString.call(value) === '[object Date]') {\n    return new Date(value.getTime());\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice(0).map(v => clone(v));\n  }\n\n  value = Object.assign({}, value);\n  Object.keys(value).forEach(k => value[k] = clone(value[k]));\n\n  return value;\n}\n\nexport function removeFieldControl(form: FormArray | FormGroup, key: string | number) {\n  if (form instanceof FormArray) {\n    form.removeAt(key as number);\n  } else if (form instanceof FormGroup) {\n    form.removeControl(`${key}`);\n  }\n}\n\nexport function defineHiddenProp(field, prop, defaultValue) {\n  Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n  field[prop] = defaultValue;\n}\n","import { Injectable, InjectionToken } from '@angular/core';\nimport { ValidationErrors, FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { FieldType } from './../templates/field.type';\nimport { reverseDeepMerge, defineHiddenProp } from './../utils';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG = new InjectionToken<FormlyConfig>('FORMLY_CONFIG');\n\n/** @experimental */\nexport interface FormlyExtension {\n  prePopulate?(field: FormlyFieldConfig): void;\n  onPopulate?(field: FormlyFieldConfig): void;\n  postPopulate?(field: FormlyFieldConfig): void;\n}\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable({ providedIn: 'root' })\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n  extras: {\n    fieldTransform?: ((fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[])[],\n    showError?: (field: FieldType) => boolean;\n  } = {\n    fieldTransform: undefined,\n    showError: function(field: FieldType) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n  extensions: { [name: string]: FormlyExtension } = {};\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extensions) {\n      config.extensions.forEach(c => this.extensions[c.name] = c.extension);\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = <TypeOption>{};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    const type = this.getType(field.type);\n    if (type.defaultOptions) {\n      reverseDeepMerge(field, type.defaultOptions);\n    }\n\n    const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        const defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    this.createComponentInstance(field);\n    const componentRef = (<FormlyFieldConfigCache> field)._componentFactory.componentRef;\n    if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {\n      reverseDeepMerge(field, componentRef.instance.defaultOptions);\n    }\n\n    if (!field.wrappers && type.wrappers) {\n      field.wrappers = [...type.wrappers];\n    }\n  }\n\n  createComponentInstance(field: FormlyFieldConfigCache = {}) {\n    if (!field.type || field._componentFactory && field.type === field._componentFactory.type) {\n      return;\n    }\n    const type = this.getType(field.type);\n\n    const _componentFactoryResolver = (<any> field.parent.options)._componentFactoryResolver;\n    defineHiddenProp(field, '_componentFactory', {\n      type: field.type,\n      component: type.component,\n      componentRef: _componentFactoryResolver\n        ? _componentFactoryResolver.resolveComponentFactory(type.component).create(_componentFactoryResolver._ngModule.injector)\n        : null,\n    });\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = <TypeOption>{};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    if (this.types[type].wrappers.indexOf(name) === -1) {\n      this.types[type].wrappers.push(name);\n    }\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ExtensionOption {\n  name: string;\n  extension: FormlyExtension;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  extensions?: ExtensionOption[];\n  validationMessages?: ValidationMessageOption[];\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    fieldTransform?: any,\n    showError?: (field: FieldType) => boolean;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { FormlyConfig } from './formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache } from '../components/formly.field.config';\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyFormBuilder {\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  buildForm(formControl: FormGroup | FormArray, fieldGroup: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    this._buildForm({ fieldGroup, model, formControl, options });\n  }\n\n  private _buildForm(field: FormlyFieldConfigCache) {\n    this.getExtensions().forEach(extension => extension.prePopulate && extension.prePopulate(field));\n    this.getExtensions().forEach(extension => extension.onPopulate && extension.onPopulate(field));\n\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f) => this._buildForm(f));\n    }\n\n    this.getExtensions().forEach(extension => extension.postPopulate && extension.postPopulate(field));\n  }\n\n  private getExtensions() {\n    return Object.keys(this.formlyConfig.extensions).map(name => this.formlyConfig.extensions[name]);\n  }\n}\n","import { Component, DoCheck, OnChanges, Input, SimpleChanges, Optional, EventEmitter, Output, SkipSelf, OnDestroy, ComponentFactoryResolver } from '@angular/core';\nimport { FormGroup, FormArray, NgForm, FormGroupDirective } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyValueChangeEvent, FormlyFormOptionsCache } from './formly.field.config';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyConfig } from '../services/formly.config';\nimport { assignModelValue, isNullOrUndefined, reverseDeepMerge } from '../utils';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-form',\n  template: `\n    <formly-field *ngFor=\"let field of fields\"\n      hide-deprecation\n      [form]=\"field.form\"\n      [options]=\"field.options\"\n      [model]=\"field.model\"\n      [field]=\"field\">\n    </formly-field>\n    <ng-content></ng-content>\n  `,\n})\nexport class FormlyForm implements DoCheck, OnChanges, OnDestroy {\n  @Input() model: any = {};\n  @Input() form: FormGroup | FormArray = new FormGroup({});\n  @Input() fields: FormlyFieldConfig[] = [];\n  @Input() options: FormlyFormOptions;\n  @Output() modelChange = new EventEmitter<any>();\n\n  /** @internal */\n  @Input() isRoot = true;\n\n  private initialModel: any;\n  private modelChangeSubs: Subscription[] = [];\n\n  private enableCheckExprDebounce = false;\n  private checkExpressionChange$ = this.modelChange.pipe(\n    debounceTime(this.enableCheckExprDebounce ? 100 : 0),\n    tap(() => {\n      this.enableCheckExprDebounce = true;\n      this.checkExpressionChange();\n      this.enableCheckExprDebounce = false;\n    }),\n  ).subscribe();\n\n  constructor(\n    private formlyBuilder: FormlyFormBuilder,\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    @Optional() private parentForm: NgForm,\n    @Optional() private parentFormGroup: FormGroupDirective,\n    @Optional() @SkipSelf() private parentFormlyForm: FormlyForm,\n  ) {}\n\n  ngDoCheck() {\n    this.checkExpressionChange();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.fields || this.fields.length === 0 || !this.isRoot) {\n      return;\n    }\n\n    if (changes.fields || changes.form || changes.model) {\n      this.model = this.model || {};\n      this.form = this.form || (new FormGroup({}));\n      this.setOptions();\n      this.clearModelSubscriptions();\n      this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n      this.trackModelChanges(this.fields);\n      this.options.updateInitialValue();\n    }\n  }\n\n  ngOnDestroy() {\n    this.clearModelSubscriptions();\n    this.checkExpressionChange$.unsubscribe();\n  }\n\n  changeModel(event: { key: string, value: any }) {\n    assignModelValue(this.model, event.key, event.value);\n    this.modelChange.emit(this.model);\n  }\n\n  setOptions() {\n    this.options = this.options || {};\n\n    this.options.formState = this.options.formState || {};\n    if (!this.options.showError) {\n      this.options.showError = this.formlyConfig.extras.showError;\n    }\n    if (!this.options.fieldChanges) {\n      this.options.fieldChanges = new Subject<FormlyValueChangeEvent>();\n    }\n\n    if (!this.options.resetModel) {\n      this.options.resetModel = (model ?: any) => {\n        model = isNullOrUndefined(model) ? this.initialModel : model;\n        if (this.model) {\n          Object.keys(this.model).forEach(k => delete this.model[k]);\n          Object.assign(this.model, model || {});\n        }\n\n        (<FormlyFormOptionsCache> this.options)._buildForm();\n\n        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n        // but only when the current component is a root one.\n        if (!this.parentFormlyForm && this.options.parentForm && this.options.parentForm.control === this.form) {\n          this.options.parentForm.resetForm(model);\n        } else {\n          this.form.reset(model);\n        }\n      };\n    }\n\n    if (!this.options.parentForm) {\n      this.options.parentForm = this.parentFormGroup || this.parentForm;\n    }\n\n    if (this.options.parentForm) {\n      let submitted = this.options.parentForm.submitted;\n      Object.defineProperty(this.options.parentForm, 'submitted', {\n        get: () => submitted,\n        set: value => {\n          submitted = value;\n          (<FormlyFormOptionsCache> this.options)._markForCheck({\n            fieldGroup: this.fields,\n            model: this.model,\n            formControl: this.form,\n            options: this.options,\n          });\n        },\n      });\n    }\n\n    if (!this.options.updateInitialValue) {\n      this.options.updateInitialValue = () => this.initialModel = reverseDeepMerge({}, this.model);\n    }\n\n    if (!(<FormlyFormOptionsCache> this.options)._buildForm) {\n      (<FormlyFormOptionsCache> this.options)._buildForm = () => {\n        this.clearModelSubscriptions();\n        this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n        this.trackModelChanges(this.fields);\n      };\n    }\n\n    if (!(<FormlyFormOptionsCache> this.options)._markForCheck) {\n      (<FormlyFormOptionsCache> this.options)._markForCheck = (field) => {\n        if (field._componentRefs) {\n          field._componentRefs.forEach(ref => ref.changeDetectorRef.markForCheck());\n        }\n\n        if (field.fieldGroup) {\n          field.fieldGroup.forEach(f => (<FormlyFormOptionsCache> this.options)._markForCheck(f));\n        }\n      };\n    }\n\n    if (!(<FormlyFormOptionsCache> this.options)._componentFactoryResolver) {\n      (<FormlyFormOptionsCache> this.options)._componentFactoryResolver = this.componentFactoryResolver;\n    }\n  }\n\n  private checkExpressionChange() {\n    if (this.isRoot && (<FormlyFormOptionsCache> this.options)._checkField) {\n      (<FormlyFormOptionsCache> this.options)._checkField({\n        fieldGroup: this.fields,\n        model: this.model,\n        formControl: this.form,\n        options: this.options,\n      });\n    }\n  }\n\n  private trackModelChanges(fields: FormlyFieldConfig[], rootKey: string[] = []) {\n    fields.forEach(field => {\n      if (field.key && field.type && !field.fieldGroup) {\n        const valueChanges = field.formControl.valueChanges.pipe(\n          field.modelOptions.debounce && field.modelOptions.debounce.default\n          ? debounceTime(field.modelOptions.debounce.default)\n          : tap(() => {}),\n          map(value => {\n            if (field.parsers && field.parsers.length > 0) {\n              field.parsers.forEach(parserFn => value = parserFn(value));\n            }\n\n            return value;\n          }),\n          tap(value => this.changeModel({ key: [...rootKey, field.key].join('.'), value })),\n        );\n\n        this.modelChangeSubs.push(valueChanges.subscribe());\n      }\n\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, field.key] : rootKey);\n      }\n    });\n  }\n\n  private clearModelSubscriptions() {\n    this.modelChangeSubs.forEach(sub => sub.unsubscribe());\n    this.modelChangeSubs = [];\n  }\n}\n","import {\n  Component, EventEmitter, Input, Output,\n  ViewContainerRef, ViewChild, ComponentRef, SimpleChanges, Attribute, ComponentFactoryResolver,\n  OnInit, OnChanges, OnDestroy, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache } from './formly.field.config';\nimport { FieldWrapper } from '../templates/field.wrapper';\nimport { defineHiddenProp } from '../utils';\n\n@Component({\n  selector: 'formly-field',\n  template: `<ng-template #container></ng-template>`,\n  host: {\n    '[style.display]': 'field.hide ? \"none\":\"\"',\n    '[class]': 'field.className? field.className : className',\n  },\n})\nexport class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() field: FormlyFieldConfig;\n  @Input('class') className: string = '';\n\n  warnDeprecation = false;\n\n  @Input() set model(m: any) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set form(form: FormGroup) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set options(options: FormlyFormOptions) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Output() modelChange: EventEmitter<any> = new EventEmitter();\n  @ViewChild('container', {read: ViewContainerRef}) containerRef: ViewContainerRef;\n\n  get componentRefs(): ComponentRef<any>[] {\n    if (!(<FormlyFieldConfigCache> this.field)._componentRefs) {\n      defineHiddenProp(this.field, '_componentRefs', []);\n    }\n\n    return (<FormlyFieldConfigCache> this.field)._componentRefs;\n  }\n\n  set componentRefs(refs: ComponentRef<any>[]) {\n    (<FormlyFieldConfigCache> this.field)._componentRefs = refs;\n  }\n\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    // tslint:disable-next-line\n    @Attribute('hide-deprecation') hideDeprecation,\n  ) {\n    this.warnDeprecation = hideDeprecation === null;\n  }\n\n  ngAfterContentInit() {\n    this.triggerHook('afterContentInit');\n  }\n\n  ngAfterContentChecked() {\n    this.triggerHook('afterContentChecked');\n  }\n\n  ngAfterViewInit() {\n    this.triggerHook('afterViewInit');\n  }\n\n  ngAfterViewChecked() {\n    this.triggerHook('afterViewChecked');\n  }\n\n  ngDoCheck() {\n    this.triggerHook('doCheck');\n  }\n\n  ngOnInit() {\n    this.triggerHook('onInit');\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      this.renderField(this.field, this.containerRef);\n    }\n\n    this.triggerHook('onChanges', changes);\n    this.componentRefs.forEach(ref => {\n      Object.assign(ref.instance, { field: this.field });\n    });\n  }\n\n  ngOnDestroy() {\n    this.triggerHook('onDestroy');\n    this.componentRefs.forEach(componentRef => componentRef.destroy());\n    this.componentRefs = [];\n  }\n\n  private renderField(field: FormlyFieldConfig, containerRef: ViewContainerRef) {\n    this.componentRefs.forEach(componentRef => componentRef.destroy());\n    this.componentRefs = [];\n\n    const wrappers = <any>(field.wrappers || []).map(wrapperName => this.formlyConfig.getWrapper(wrapperName));\n    [...wrappers, { ...this.formlyConfig.getType(field.type), componentFactory: (<any> field)._componentFactory }].forEach(({ component, componentRef }) => {\n      const ref = componentRef ? componentRef : containerRef.createComponent<FieldWrapper>(this.componentFactoryResolver.resolveComponentFactory(component));\n\n      Object.assign(ref.instance, { field });\n      this.componentRefs.push(ref);\n      containerRef = ref.instance.fieldComponent;\n    });\n  }\n\n  private triggerHook(name: string, changes?: SimpleChanges) {\n    if (this.field.hooks && this.field.hooks[name]) {\n      if (!changes || changes.field) {\n        this.field.hooks[name](this.field);\n      }\n    }\n\n    if (this.field.lifecycle && this.field.lifecycle[name]) {\n      this.field.lifecycle[name](\n        this.field.form,\n        this.field,\n        this.field.model,\n        this.field.options,\n      );\n    }\n  }\n}\n","import { Directive, HostListener, ElementRef, Input, OnChanges, SimpleChanges, Renderer2 } from '@angular/core';\nimport { FormlyFieldConfig, FormlyTemplateOptions } from './formly.field.config';\n\n@Directive({\n  selector: '[formlyAttributes]',\n  host: {\n    '[attr.name]': 'field.name',\n    '[attr.placeholder]': 'to.placeholder',\n    '[attr.tabindex]': 'to.tabindex || 0',\n    '[attr.readonly]': 'to.readonly',\n    '[attr.step]': 'to.step',\n\n    '(keyup)': 'to.keyup && to.keyup(field, $event)',\n    '(keydown)': 'to.keydown && to.keydown(field, $event)',\n    '(click)': 'to.click && to.click(field, $event)',\n    '(change)': 'to.change && to.change(field, $event)',\n    '(keypress)': 'to.keypress && to.keypress(field, $event)',\n  },\n})\nexport class FormlyAttributes implements OnChanges {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n\n  @HostListener('focus', ['$event']) onFocus($event) {\n    this.field.focus = true;\n    if (this.to.focus) {\n      this.to.focus(this.field, $event);\n    }\n  }\n\n  @HostListener('blur', ['$event']) onBlur($event) {\n    this.field.focus = false;\n    if (this.to.blur) {\n      this.to.blur(this.field, $event);\n    }\n  }\n\n  get to(): FormlyTemplateOptions {\n    return this.field.templateOptions || {};\n  }\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n  ) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      const fieldChanges = changes.field;\n\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'id', this.field.id);\n      if (this.to && this.to.attributes) {\n        this.setAttributes(this.to.attributes);\n        Object.defineProperty(this.to, 'attributes', {\n          get: () => this.to.__attributes__,\n          set: attributes => this.setAttributes(attributes),\n          enumerable: true,\n          configurable: true,\n        });\n      }\n\n      if ((fieldChanges.previousValue || {}).focus !== (fieldChanges.currentValue || {}).focus && this.elementRef.nativeElement.focus) {\n        this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();\n      }\n    }\n  }\n\n  private setAttributes(attributes) {\n    if (this.to.__attributes__ && this.to.__attributes__ !== attributes) {\n      Object.keys(this.to.__attributes__).forEach(name => this.renderer.removeAttribute(this.elementRef.nativeElement, name));\n    }\n\n    this.to.__attributes__ = attributes;\n    Object.keys(attributes).forEach(name => this.renderer.setAttribute(\n      this.elementRef.nativeElement, name, attributes[name] as string,\n    ));\n  }\n}\n","import { Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldType<F extends FormlyFieldConfig = FormlyFieldConfig> {\n  @Input() field: F;\n  defaultOptions?: F;\n\n  @Input()\n  get model() { return this.field.model; }\n  set model(m: any) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get form() { return <FormGroup> this.field.parent.formControl; }\n  set form(form) { console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get options(): F['options'] { return this.field.options; }\n  set options(options: F['options']) { console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  get key() { return this.field.key; }\n\n  get formControl(): F['formControl'] { return this.field.formControl; }\n\n  get to(): F['templateOptions'] { return this.field.templateOptions; }\n\n  get showError(): boolean { return this.options.showError(this); }\n\n  get id(): string { return this.field.id; }\n\n  get formState() { return this.options.formState || {}; }\n}\n\n/**\n * @deprecated use `FieldType` instead\n */\nexport abstract class Field extends FieldType {\n  constructor() {\n    super();\n    console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);\n  }\n}\n","import { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, isNullOrUndefined } from '../utils';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldArrayType<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> {\n  formControl: FormArray;\n\n  // tslint:disable-next-line\n  constructor(builder: FormlyFormBuilder) {\n    super();\n  }\n\n  add(i?: number, initialModel?: any) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n\n    (<any> this.options)._buildForm();\n  }\n\n  remove(i: number) {\n    this.model.splice(i, 1);\n\n    (<any> this.options)._buildForm();\n  }\n}\n","import { ViewContainerRef } from '@angular/core';\nimport { FieldType } from './field.type';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldWrapper<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> {\n  fieldComponent: ViewContainerRef;\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '../templates/field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    <formly-form\n      [fields]=\"field.fieldGroup\"\n      [isRoot]=\"false\"\n      [model]=\"field.model\"\n      [form]=\"field.formControl\"\n      [options]=\"options\"\n      [ngClass]=\"field.fieldGroupClassName\">\n      <ng-content></ng-content>\n    </formly-form>\n  `,\n})\nexport class FormlyGroup extends FieldType {}\n","import { Component, Input } from '@angular/core';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { isObject } from '../utils';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: `{{ errorMessage }}`,\n})\nexport class FormlyValidationMessage {\n  @Input() field: FormlyFieldConfig;\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  get errorMessage(): string {\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message: string | Function = this.formlyConfig.getValidatorMessage(error);\n\n        if (isObject(fieldForm.errors[error])) {\n          if (fieldForm.errors[error].errorPath) {\n            return;\n          }\n\n          if (fieldForm.errors[error].message) {\n            message = fieldForm.errors[error].message;\n          }\n        }\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-template',\n  template: `<div [innerHtml]=\"field.template\"></div>`,\n})\nexport class FormlyTemplateType extends FieldType {}\n","export function evalStringExpression(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `return ${expression};`) as any;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpressionValueSetter(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `${expression} = expressionValue;`) as (value: any) => void;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpression(expression: string | Function | boolean, thisArg: any, argVal: any[]): any {\n  if (expression instanceof Function) {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n","import { FormGroup, FormArray } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyValueChangeEvent, FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport {\n  isObject, isNullOrUndefined, isFunction,\n  FORMLY_VALIDATORS, getFieldValue, getKeyPath, removeFieldControl, defineHiddenProp,\n} from '../../utils';\nimport { evalExpression, evalStringExpression, evalExpressionValueSetter } from './utils';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { FormlyExtension } from '../../services/formly.config';\n\n/** @experimental */\nexport class FieldExpressionExtension implements FormlyExtension {\n  prePopulate(field: FormlyFieldConfigCache) {\n    if (field.parent || field.options._checkField) {\n      return;\n    }\n\n    field.options._checkField = (f, ignoreCache) => this._checkField(f, ignoreCache);\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent || field._expressionProperties) {\n      return;\n    }\n\n    // cache built expression\n    defineHiddenProp(field, '_expressionProperties', {});\n\n    if (field.expressionProperties) {\n      for (const key in field.expressionProperties) {\n        const expressionProperty = field.expressionProperties[key],\n          expressionValueSetter = evalExpressionValueSetter(\n            `field.${key}`,\n            ['expressionValue', 'model', 'field'],\n          );\n\n        if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {\n          field._expressionProperties[key] = {\n            expression: this._evalExpression(\n              expressionProperty,\n              field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')\n                ? () => field.parent.templateOptions.disabled\n                : undefined,\n            ),\n            expressionValueSetter,\n          };\n          if (key === 'templateOptions.disabled') {\n            Object.defineProperty(field._expressionProperties[key], 'expressionValue', {\n              get: () => field.templateOptions.disabled,\n              set: () => { },\n              enumerable: true,\n              configurable: true,\n            });\n          }\n        } else if (expressionProperty instanceof Observable) {\n          const subscription = (expressionProperty as Observable<any>).pipe(\n            tap(v => evalExpression(expressionValueSetter, { field }, [v, field.model, field])),\n          ).subscribe();\n\n          const onDestroy = field.hooks.onDestroy;\n          field.hooks.onDestroy = (field) => {\n            onDestroy && onDestroy(field);\n            subscription.unsubscribe();\n          };\n        }\n      }\n    }\n\n    if (field.hideExpression || field.parent.hideExpression) {\n      // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n      delete field.hide;\n      field.hideExpression = this._evalExpression(\n        field.hideExpression,\n        field.parent && field.parent.hideExpression ? () => field.parent.hide : undefined,\n      );\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (field.parent) {\n      return;\n    }\n\n    field.options._checkField(field, true);\n  }\n\n  private _evalExpression(expression, parentExpression?) {\n    expression = expression || (() => false);\n    if (typeof expression === 'string') {\n      expression = evalStringExpression(expression, ['model', 'formState']);\n    }\n\n    return parentExpression\n      ? (model: any, formState: any) => parentExpression() || expression(model, formState)\n      : expression;\n  }\n\n  private _checkField(field: FormlyFieldConfigCache, ignoreCache = false) {\n    let markForCheck = false;\n    field.fieldGroup.forEach(f => {\n      this.checkFieldExpressionChange(f, ignoreCache) && (markForCheck = true);\n      this.checkFieldVisibilityChange(f, ignoreCache) && (markForCheck = true);\n\n      if (f.fieldGroup && f.fieldGroup.length > 0) {\n        this._checkField(f, ignoreCache);\n      }\n    });\n\n    if (markForCheck && field.options && field.options._markForCheck) {\n      field.options._markForCheck(field);\n    }\n  }\n\n  private checkFieldExpressionChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || !field._expressionProperties) {\n      return false;\n    }\n\n    let markForCheck = false;\n    const expressionProperties = field._expressionProperties;\n    const validators = FORMLY_VALIDATORS.map(v => `templateOptions.${v}`);\n\n    for (const key in expressionProperties) {\n      let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState]);\n      if (key === 'templateOptions.disabled') {\n        expressionValue = !!expressionValue;\n      }\n\n      if (\n        ignoreCache || (\n          expressionProperties[key].expressionValue !== expressionValue\n          && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))\n        )\n      ) {\n        markForCheck = true;\n        expressionProperties[key].expressionValue = expressionValue;\n        evalExpression(\n          expressionProperties[key].expressionValueSetter,\n          { field },\n          [expressionValue, field.model, field],\n        );\n\n        if (key.indexOf('model.') === 0) {\n          const path = key.replace(/^model\\./, ''),\n            control = field.key && key === path ? field.formControl : field.parent.formControl.get(path);\n\n          if (\n            control\n            && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))\n            && control.value !== expressionValue\n          ) {\n            control.patchValue(expressionValue);\n          }\n        }\n\n        if (validators.indexOf(key) !== -1 && field.formControl) {\n          field.formControl.updateValueAndValidity({ emitEvent: false });\n        }\n      }\n    }\n\n    return markForCheck;\n  }\n\n  private checkFieldVisibilityChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || isNullOrUndefined(field.hideExpression)) {\n      return false;\n    }\n\n    const hideExpressionResult: boolean = !!evalExpression(\n      field.hideExpression,\n      { field },\n      [field.model, field.options.formState],\n    );\n    let markForCheck = false;\n    if (hideExpressionResult !== field.hide || ignoreCache) {\n      markForCheck = true;\n      // toggle hide\n      field.hide = hideExpressionResult;\n      field.templateOptions.hidden = hideExpressionResult;\n\n      if (field.formControl && field.key) {\n        const parent = this.fieldParentFormControl(field);\n        if (parent) {\n          const control = parent.get(`${this.fieldKey(field)}`);\n          if (hideExpressionResult === true && control) {\n            removeFieldControl(parent, this.fieldKey(field));\n          } else if (hideExpressionResult === false && !control) {\n            this.addFieldControl(parent, field);\n          }\n        }\n      }\n\n      if (field.options.fieldChanges) {\n        field.options.fieldChanges.next(<FormlyValueChangeEvent> { field: field, type: 'hidden', value: hideExpressionResult });\n      }\n    }\n\n    return markForCheck;\n  }\n\n  private addFieldControl(parent: FormArray | FormGroup, field: FormlyFieldConfig) {\n    const fieldModel = getFieldValue(field);\n    if (\n      !(isNullOrUndefined(field.formControl.value) && isNullOrUndefined(fieldModel))\n      && field.formControl.value !== fieldModel\n    ) {\n      field.formControl.patchValue(fieldModel, { emitEvent: false });\n    }\n\n    if (parent instanceof FormArray) {\n      parent.push(field.formControl);\n    } else if (parent instanceof FormGroup) {\n      parent.addControl(`${this.fieldKey(field)}`, field.formControl);\n    }\n  }\n\n  private fieldParentFormControl(field: FormlyFieldConfig): FormArray | FormGroup {\n    const paths = getKeyPath(field);\n    paths.pop(); // remove last path\n\n    return (paths.length > 0 ? field.parent.formControl.get(paths) : field.parent.formControl) as any;\n  }\n\n  private fieldKey(field: FormlyFieldConfig) {\n    return getKeyPath(field).pop();\n  }\n}\n","import { FormlyExtension, FieldValidatorFn, FormlyConfig } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { AbstractControl, Validators } from '@angular/forms';\nimport { isObject, FORMLY_VALIDATORS, defineHiddenProp } from '../../utils';\n\n/** @experimental */\nexport class FieldValidationExtension implements FormlyExtension {\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldValidation(field);\n    this.initFieldAsyncValidation(field);\n  }\n\n  private initFieldValidation(field: FormlyFieldConfigCache) {\n    if (field._validators) {\n      return;\n    }\n\n    defineHiddenProp(field, '_validators', []);\n    this.initPredefinedFieldValidation(field);\n    if (field.validators) {\n      for (const validatorName in field.validators) {\n        if (validatorName !== 'validation') {\n          let validator = field.validators[validatorName];\n          let errorPath;\n          let message;\n          if (isObject(validator)) {\n            errorPath = validator.errorPath;\n            message = validator.message;\n            validator = validator.expression;\n          }\n\n          field._validators.push((control: AbstractControl) => {\n            const isValid = validator(control, field);\n            if (errorPath && field.formControl && field.formControl.get(errorPath)) {\n              if (!isValid) {\n                field.formControl.get(errorPath).setErrors({\n                  ...(field.formControl.get(errorPath).errors || {}),\n                  [validatorName]: { message },\n                });\n              } else {\n                const errors = (field.formControl.get(errorPath).errors || {});\n                delete errors[validatorName];\n                field.formControl.get(errorPath).setErrors(Object.keys(errors).length === 0 ? null : errors);\n              }\n            }\n\n            return isValid ? null : { [validatorName]: errorPath ? { errorPath } : true };\n          });\n        } else {\n          if (!Array.isArray(field.validators.validation)) {\n            field.validators.validation = [field.validators.validation];\n          }\n          field.validators.validation\n            .forEach((validator: any) => field._validators.push(this.wrapNgValidatorFn(field, validator)));\n        }\n      }\n    }\n  }\n\n  private initFieldAsyncValidation(field: FormlyFieldConfigCache) {\n    if (field._asyncValidators) {\n      return;\n    }\n\n    defineHiddenProp(field, '_asyncValidators', []);\n    if (field.asyncValidators) {\n      for (const validatorName in field.asyncValidators) {\n        if (validatorName !== 'validation') {\n          let validator = field.asyncValidators[validatorName];\n          if (isObject(validator)) {\n            validator = validator.expression;\n          }\n\n          field._asyncValidators.push((control: AbstractControl) => new Promise((resolve) => {\n            return validator(control, field).then((result: boolean) => {\n              resolve(result ? null : { [validatorName]: true });\n            });\n          }));\n        } else {\n          if (!Array.isArray(field.asyncValidators.validation)) {\n            field.asyncValidators.validation = [field.asyncValidators.validation];\n          }\n          field.asyncValidators.validation\n            .forEach((validator: any) => field._asyncValidators.push(this.wrapNgValidatorFn(field, validator) as any));\n        }\n      }\n    }\n  }\n\n  private initPredefinedFieldValidation(field: FormlyFieldConfigCache) {\n    FORMLY_VALIDATORS\n      .filter(opt => (field.templateOptions && field.templateOptions.hasOwnProperty(opt)) || (field.expressionProperties && field.expressionProperties[`templateOptions.${opt}`]))\n      .forEach((opt) => {\n        field._validators.push((control: AbstractControl) => {\n          const value = field.templateOptions[opt];\n          if (value === false) {\n            return null;\n          }\n          switch (opt) {\n            case 'required':\n              return Validators.required(control);\n            case 'pattern':\n              return Validators.pattern(value)(control);\n            case 'minLength':\n              return Validators.minLength(value)(control);\n            case 'maxLength':\n              return Validators.maxLength(value)(control);\n            case 'min':\n              return Validators.min(value)(control);\n            case 'max':\n              return Validators.max(value)(control);\n          }\n        });\n      });\n  }\n\n  private wrapNgValidatorFn(field: FormlyFieldConfigCache, validator: string | FieldValidatorFn) {\n    validator = typeof validator === 'string'\n      ? this.formlyConfig.getValidator(validator).validation\n      : validator;\n\n    return (control: AbstractControl) => (validator as FieldValidatorFn)(control, field);\n  }\n}\n","import { FormlyExtension } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { AbstractControl, FormGroup, FormArray, FormControl, AbstractControlOptions } from '@angular/forms';\nimport { getKeyPath, isNullOrUndefined } from '../../utils';\n\n/** @experimental */\nexport class FieldFormExtension implements FormlyExtension {\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (field.key && field.type) {\n      const paths = getKeyPath({ key: field.key });\n      let rootForm = field.parent.formControl as FormGroup, rootModel = field.fieldGroup ? { [paths[0]]: field.model } : field.model;\n      paths.forEach((path, index) => {\n        // FormGroup/FormArray only allow string value for path\n        const formPath = path.toString();\n        // is last item\n        if (index === paths.length - 1) {\n          this.addFormControl(rootForm, field, rootModel, formPath);\n        } else {\n          if (!rootModel[path]) {\n            rootModel[path] = typeof path === 'string' ? {} : [];\n          }\n          this.addFormControl(rootForm, { key: formPath, fieldGroup: [], modelOptions: {}, templateOptions: {} }, rootModel, formPath);\n\n          rootForm = <FormGroup> rootForm.get(formPath);\n          rootModel = rootModel[path];\n        }\n      });\n    }\n\n    if (field.fieldGroup && !field.formControl) {\n      field.formControl = field.parent.formControl;\n    }\n  }\n\n  private addFormControl(form: FormGroup | FormArray, field: FormlyFieldConfigCache, model: any, path: string | number) {\n    const abstractControlOptions = {\n      validators: field._validators,\n      asyncValidators: field._asyncValidators,\n      updateOn: field.modelOptions.updateOn,\n    } as AbstractControlOptions;\n    let control: AbstractControl;\n\n    if (field.formControl instanceof AbstractControl || form.get(<string> path)) {\n      control = field.formControl || form.get(<string> path);\n      if (\n        !(isNullOrUndefined(control.value) && isNullOrUndefined(model[path]))\n        && control.value !== model[path]\n        && control instanceof FormControl\n      ) {\n        control.patchValue(model[path]);\n      }\n\n      if (abstractControlOptions.validators || abstractControlOptions.asyncValidators) {\n        if (abstractControlOptions.validators) {\n          control.setValidators(abstractControlOptions.validators);\n        }\n        if (abstractControlOptions.asyncValidators) {\n          control.setAsyncValidators(abstractControlOptions.asyncValidators);\n        }\n        control.updateValueAndValidity();\n      }\n    } else if (field._componentFactory && field._componentFactory.component && field._componentFactory.component.createControl) {\n      const component = field._componentFactory.component;\n      console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);\n      control = component.createControl(model[path], field);\n    } else if (field.fieldGroup && !field.fieldArray) {\n      control = new FormGroup({}, abstractControlOptions);\n    } else if (field.fieldArray) {\n      control = new FormArray([], abstractControlOptions);\n    } else {\n      control = new FormControl(model[path], abstractControlOptions);\n    }\n\n    if (field.templateOptions.disabled) {\n      control.disable();\n    }\n\n    // Replace decorated property with a getter that returns the observable.\n    // https://github.com/angular-redux/store/blob/master/src/decorators/select.ts#L79-L85\n    if (delete field.templateOptions.disabled) {\n      Object.defineProperty(field.templateOptions, 'disabled', {\n        get: () => !field.formControl.enabled,\n        set: (value: boolean) => value ? field.formControl.disable() : field.formControl.enable(),\n        enumerable: true,\n        configurable: true,\n      });\n    }\n\n    if (field) {\n      field.formControl = control;\n    }\n\n    if (form instanceof FormArray) {\n      if (form.at(<number> path) !== control) {\n        form.setControl(<number> path, control);\n      }\n    } else {\n      if (form.get(<string> path) !== control) {\n        form.setControl(<string> path, control);\n      }\n    }\n  }\n}\n","import { FormlyExtension, FormlyConfig, TemplateManipulators } from '../../services/formly.config';\nimport { FormlyFieldConfigCache, FormlyFieldConfig } from '../../components/formly.field.config';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { getFieldId, assignModelValue, isUndefined, clone, removeFieldControl, getFieldValue } from '../../utils';\n\n/** @experimental */\nexport class CoreExtension implements FormlyExtension {\n  private formId = 0;\n  constructor(private formlyConfig: FormlyConfig) { }\n\n  prePopulate(field: FormlyFieldConfigCache) {\n    this.formlyConfig.createComponentInstance(field);\n    this.getFieldComponentInstance(field).prePopulate();\n    if (field.parent) {\n      return;\n    }\n\n    const fieldTransforms = (field.options && field.options.fieldTransform) || this.formlyConfig.extras.fieldTransform;\n    (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(fieldTransform => {\n      if (fieldTransform) {\n        console.warn(`NgxFormly: fieldTransform is deprecated since v5.0, use custom extension instead.`);\n        const fieldGroup = fieldTransform(field.fieldGroup, field.model, <FormGroup>field.formControl, field.options);\n        if (!fieldGroup) {\n          throw new Error('fieldTransform must return an array of fields');\n        }\n      }\n    });\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldOptions(field);\n    this.getFieldComponentInstance(field).onPopulate();\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f, index) => {\n        Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n        Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n        this.formId++;\n      });\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).postPopulate();\n  }\n\n  private initFieldOptions(field: FormlyFieldConfigCache) {\n    const root = <FormlyFieldConfigCache> field.parent;\n    if (!root) {\n      return;\n    }\n\n    Object.defineProperty(field, 'form', { get: () => root.formControl, configurable: true });\n    Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n    Object.defineProperty(field, 'model', {\n      get: () => field.key && field.fieldGroup ? getFieldValue(field) : root.model,\n      configurable: true,\n    });\n\n    field.id = getFieldId(`formly_${this.formId}`, field, field['index']);\n    field.templateOptions = field.templateOptions || {};\n    field.modelOptions = field.modelOptions || {};\n    field.hooks = field.hooks || {};\n    if (field.lifecycle) {\n      console.warn(`NgxFormly: 'lifecycle' is deprecated since v5.0, use 'hooks' instead.`);\n    }\n\n    if (field.type && field.key) {\n      field.templateOptions = Object.assign({\n        label: '',\n        placeholder: '',\n        focus: false,\n      }, field.templateOptions);\n    }\n\n    if (field.template && field.type !== 'formly-template') {\n      if (field.type) {\n        console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);\n      }\n      field.type = 'formly-template';\n    }\n\n    if (field.type) {\n      this.formlyConfig.getMergedField(field);\n    }\n    if (field.key && isUndefined(field.defaultValue) && (field.fieldGroup || field.fieldArray)) {\n      field.defaultValue = field.fieldArray ? [] : {};\n    }\n\n    if (!isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n      assignModelValue(root.model, field.key, field.defaultValue);\n    }\n\n    this.initFieldWrappers(field);\n    if (field.fieldArray) {\n      this.initFieldArray(field);\n    }\n\n    if (!field.type && field.fieldGroup) {\n      field.type = 'formly-group';\n    }\n  }\n\n  private initFieldArray(field: FormlyFieldConfigCache) {\n    field.fieldGroup = field.fieldGroup || [];\n    if (field.fieldGroup.length > field.model.length) {\n      for (let i = field.fieldGroup.length; i >= field.model.length; --i) {\n        removeFieldControl(field.formControl as FormArray, i);\n        field.fieldGroup.splice(i, 1);\n      }\n    }\n\n    for (let i = field.fieldGroup.length; i < field.model.length; i++) {\n      const f = { ...clone(field.fieldArray), key: `${i}` };\n      field.fieldGroup.push(f);\n    }\n  }\n\n  private initFieldWrappers(field: FormlyFieldConfig) {\n    field.wrappers = field.wrappers || [];\n    const fieldTemplateManipulators: TemplateManipulators = {\n      preWrapper: [],\n      postWrapper: [],\n      ...(field.templateOptions.templateManipulators || {}),\n    };\n\n    field.wrappers = [\n      ...this.formlyConfig.templateManipulators.preWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.preWrapper.map(m => m(field)),\n      ...field.wrappers,\n      ...this.formlyConfig.templateManipulators.postWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.postWrapper.map(m => m(field)),\n    ].filter((el, i, a) => el && i === a.indexOf(el));\n  }\n\n  private getFieldComponentInstance(field: FormlyFieldConfigCache) {\n    let instance: FormlyExtension = {};\n    if (field._componentFactory && field._componentFactory.componentRef) {\n      instance = field._componentFactory.componentRef.instance;\n    }\n\n    return {\n      prePopulate: () => instance.prePopulate && instance.prePopulate(field),\n      onPopulate: () => instance.onPopulate && instance.onPopulate(field),\n      postPopulate: () => instance.postPopulate && instance.postPopulate(field),\n    };\n  }\n}\n","import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './components/formly.attributes';\nimport { FormlyConfig, ConfigOption, FORMLY_CONFIG } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.form.builder';\nimport { FormlyGroup } from './components/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\nimport { FormlyTemplateType } from './templates/field-template.type';\n\nimport { FieldExpressionExtension } from './extensions/field-expression/field-expression';\nimport { FieldValidationExtension } from './extensions/field-validation/field-validation';\nimport { FieldFormExtension } from './extensions/field-form/field-form';\nimport { CoreExtension } from './extensions/core/core';\n\nexport function defaultFormlyConfig(formlyConfig: FormlyConfig): ConfigOption {\n  return {\n    types: [\n      { name: 'formly-group', component: FormlyGroup },\n      { name: 'formly-template', component: FormlyTemplateType },\n    ],\n    extensions: [\n      { name: 'core', extension: new CoreExtension(formlyConfig) },\n      { name: 'field-validation', extension: new FieldValidationExtension(formlyConfig) },\n      { name: 'field-form', extension: new FieldFormExtension() },\n      { name: 'field-expression', extension: new FieldExpressionExtension() },\n    ],\n  };\n}\n\n@NgModule({\n  declarations: [\n    FormlyForm,\n    FormlyField,\n    FormlyAttributes,\n    FormlyGroup,\n    FormlyValidationMessage,\n    FormlyTemplateType,\n  ],\n  entryComponents: [FormlyGroup, FormlyTemplateType],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [CommonModule],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyConfig,\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n      ],\n    };\n  }\n\n  constructor(\n    configService: FormlyConfig,\n    @Optional() @Inject(FORMLY_CONFIG) configs: ConfigOption[] = [],\n  ) {\n    if (!configs) {\n      return;\n    }\n\n    configs.forEach(config => configService.addConfig(config));\n  }\n}\n"]}