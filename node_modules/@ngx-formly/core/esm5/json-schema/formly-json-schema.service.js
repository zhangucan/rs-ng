/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var FormlyJsonschema = /** @class */ (function () {
    function FormlyJsonschema() {
    }
    /**
     * @param {?} jsonSchema
     * @return {?}
     */
    FormlyJsonschema.prototype.toFieldConfig = /**
     * @param {?} jsonSchema
     * @return {?}
     */
    function (jsonSchema) {
        return this._toFieldConfig(jsonSchema);
    };
    /**
     * @param {?} jsonSchema
     * @param {?=} key
     * @return {?}
     */
    FormlyJsonschema.prototype._toFieldConfig = /**
     * @param {?} jsonSchema
     * @param {?=} key
     * @return {?}
     */
    function (jsonSchema, key) {
        var _this = this;
        /** @type {?} */
        var field = tslib_1.__assign({}, (key ? { key: key } : {}), { type: (/** @type {?} */ (jsonSchema.type)), defaultValue: jsonSchema.default, templateOptions: {
                minLength: jsonSchema.minLength,
                maxLength: jsonSchema.maxLength,
                label: jsonSchema.title,
                readonly: jsonSchema.readOnly,
                pattern: jsonSchema.pattern,
                description: jsonSchema.description,
            } });
        if (jsonSchema.enum) {
            if (field.type === 'integer' || field.type === 'number') {
                field.parsers = [Number];
            }
            field.type = 'enum';
            field.templateOptions.options = jsonSchema.enum;
            field.templateOptions.labelProp = function (item) { return item; };
            field.templateOptions.valueProp = function (item) { return item; };
        }
        switch (jsonSchema.type) {
            case 'object': {
                field.fieldGroup = [];
                Object.keys(jsonSchema.properties).forEach(function (p) {
                    /** @type {?} */
                    var child = _this._toFieldConfig((/** @type {?} */ (jsonSchema.properties[p])), p);
                    if (Array.isArray(jsonSchema.required) && jsonSchema.required.indexOf(p) !== -1) {
                        child.templateOptions.required = true;
                    }
                    field.fieldGroup.push(child);
                });
                break;
            }
            case 'array': {
                if (!Array.isArray(jsonSchema.items)) {
                    field.fieldArray = this._toFieldConfig((/** @type {?} */ (jsonSchema.items)));
                }
                else {
                    field['_fieldArray'] = [];
                    field.fieldGroup = [];
                    jsonSchema.items.forEach(function (item) { return field['_fieldArray'].push(_this._toFieldConfig((/** @type {?} */ (item)))); });
                    if (jsonSchema.additionalItems) {
                        field['_additionalFieldArray'] = this._toFieldConfig((/** @type {?} */ (jsonSchema.additionalItems)));
                    }
                    Object.defineProperty(field, 'fieldArray', {
                        get: function () {
                            return field['_fieldArray'][field.fieldGroup.length] || field['_additionalFieldArray'];
                        },
                        enumerable: true,
                        configurable: true,
                    });
                }
                break;
            }
        }
        return field;
    };
    FormlyJsonschema.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */ FormlyJsonschema.ngInjectableDef = i0.defineInjectable({ factory: function FormlyJsonschema_Factory() { return new FormlyJsonschema(); }, token: FormlyJsonschema, providedIn: "root" });
    return FormlyJsonschema;
}());
export { FormlyJsonschema };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LWpzb24tc2NoZW1hLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWZvcm1seS9jb3JlL2pzb24tc2NoZW1hLyIsInNvdXJjZXMiOlsiZm9ybWx5LWpzb24tc2NoZW1hLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUkzQztJQUFBO0tBb0VDOzs7OztJQWxFQyx3Q0FBYTs7OztJQUFiLFVBQWMsVUFBdUI7UUFDbkMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Ozs7OztJQUVELHlDQUFjOzs7OztJQUFkLFVBQWUsVUFBdUIsRUFBRSxHQUFZO1FBQXBELGlCQTZEQzs7WUE1RE8sS0FBSyx3QkFDTixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEtBQUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFDdkIsSUFBSSxFQUFFLG1CQUFBLFVBQVUsQ0FBQyxJQUFJLEVBQXVCLEVBQzVDLFlBQVksRUFBRSxVQUFVLENBQUMsT0FBTyxFQUNoQyxlQUFlLEVBQUU7Z0JBQ2YsU0FBUyxFQUFFLFVBQVUsQ0FBQyxTQUFTO2dCQUMvQixTQUFTLEVBQUUsVUFBVSxDQUFDLFNBQVM7Z0JBQy9CLEtBQUssRUFBRSxVQUFVLENBQUMsS0FBSztnQkFDdkIsUUFBUSxFQUFFLFVBQVUsQ0FBQyxRQUFRO2dCQUM3QixPQUFPLEVBQUUsVUFBVSxDQUFDLE9BQU87Z0JBQzNCLFdBQVcsRUFBRSxVQUFVLENBQUMsV0FBVzthQUNwQyxHQUNGO1FBRUQsSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFO1lBQ25CLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7Z0JBQ3ZELEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMxQjtZQUNELEtBQUssQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO1lBQ3BCLEtBQUssQ0FBQyxlQUFlLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDaEQsS0FBSyxDQUFDLGVBQWUsQ0FBQyxTQUFTLEdBQUcsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLEVBQUosQ0FBSSxDQUFDO1lBQy9DLEtBQUssQ0FBQyxlQUFlLENBQUMsU0FBUyxHQUFHLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxFQUFKLENBQUksQ0FBQztTQUNoRDtRQUVELFFBQVEsVUFBVSxDQUFDLElBQUksRUFBRTtZQUN2QixLQUFLLFFBQVEsQ0FBQyxDQUFDO2dCQUNiLEtBQUssQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO2dCQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDOzt3QkFDcEMsS0FBSyxHQUFHLEtBQUksQ0FBQyxjQUFjLENBQUMsbUJBQWMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBQSxFQUFFLENBQUMsQ0FBQztvQkFDNUUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTt3QkFDL0UsS0FBSyxDQUFDLGVBQWUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO3FCQUN2QztvQkFDRCxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDL0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsTUFBTTthQUNQO1lBQ0QsS0FBSyxPQUFPLENBQUMsQ0FBQztnQkFDWixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ3BDLEtBQUssQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtQkFBQSxVQUFVLENBQUMsS0FBSyxFQUFlLENBQUMsQ0FBQztpQkFDekU7cUJBQU07b0JBQ0wsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztvQkFDMUIsS0FBSyxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7b0JBQ3RCLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsY0FBYyxDQUFDLG1CQUFjLElBQUksRUFBQSxDQUFDLENBQUMsRUFBbEUsQ0FBa0UsQ0FBQyxDQUFDO29CQUNyRyxJQUFJLFVBQVUsQ0FBQyxlQUFlLEVBQUU7d0JBQzlCLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsbUJBQWMsVUFBVSxDQUFDLGVBQWUsRUFBQSxDQUFDLENBQUM7cUJBQ2hHO29CQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTt3QkFDekMsR0FBRyxFQUFFOzRCQUNILE9BQU8sS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7d0JBQ3pGLENBQUM7d0JBQ0QsVUFBVSxFQUFFLElBQUk7d0JBQ2hCLFlBQVksRUFBRSxJQUFJO3FCQUNuQixDQUFDLENBQUM7aUJBQ0o7Z0JBQ0QsTUFBTTthQUNQO1NBQ0Y7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7O2dCQW5FRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7MkJBSmxDO0NBd0VDLEFBcEVELElBb0VDO1NBbkVZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnIH0gZnJvbSAnQG5neC1mb3JtbHkvY29yZSc7XG5pbXBvcnQgeyBKU09OU2NoZW1hNywgSlNPTlNjaGVtYTdUeXBlTmFtZSB9IGZyb20gJ2pzb24tc2NoZW1hJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBGb3JtbHlKc29uc2NoZW1hIHtcbiAgdG9GaWVsZENvbmZpZyhqc29uU2NoZW1hOiBKU09OU2NoZW1hNyk6IEZvcm1seUZpZWxkQ29uZmlnIHtcbiAgICByZXR1cm4gdGhpcy5fdG9GaWVsZENvbmZpZyhqc29uU2NoZW1hKTtcbiAgfVxuXG4gIF90b0ZpZWxkQ29uZmlnKGpzb25TY2hlbWE6IEpTT05TY2hlbWE3LCBrZXk/OiBzdHJpbmcpOiBGb3JtbHlGaWVsZENvbmZpZyB7XG4gICAgY29uc3QgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnID0ge1xuICAgICAgLi4uKGtleSA/IHsga2V5IH0gOiB7fSksXG4gICAgICB0eXBlOiBqc29uU2NoZW1hLnR5cGUgYXMgSlNPTlNjaGVtYTdUeXBlTmFtZSxcbiAgICAgIGRlZmF1bHRWYWx1ZToganNvblNjaGVtYS5kZWZhdWx0LFxuICAgICAgdGVtcGxhdGVPcHRpb25zOiB7XG4gICAgICAgIG1pbkxlbmd0aDoganNvblNjaGVtYS5taW5MZW5ndGgsXG4gICAgICAgIG1heExlbmd0aDoganNvblNjaGVtYS5tYXhMZW5ndGgsXG4gICAgICAgIGxhYmVsOiBqc29uU2NoZW1hLnRpdGxlLFxuICAgICAgICByZWFkb25seToganNvblNjaGVtYS5yZWFkT25seSxcbiAgICAgICAgcGF0dGVybjoganNvblNjaGVtYS5wYXR0ZXJuLFxuICAgICAgICBkZXNjcmlwdGlvbjoganNvblNjaGVtYS5kZXNjcmlwdGlvbixcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGlmIChqc29uU2NoZW1hLmVudW0pIHtcbiAgICAgIGlmIChmaWVsZC50eXBlID09PSAnaW50ZWdlcicgfHwgZmllbGQudHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgZmllbGQucGFyc2VycyA9IFtOdW1iZXJdO1xuICAgICAgfVxuICAgICAgZmllbGQudHlwZSA9ICdlbnVtJztcbiAgICAgIGZpZWxkLnRlbXBsYXRlT3B0aW9ucy5vcHRpb25zID0ganNvblNjaGVtYS5lbnVtO1xuICAgICAgZmllbGQudGVtcGxhdGVPcHRpb25zLmxhYmVsUHJvcCA9IGl0ZW0gPT4gaXRlbTtcbiAgICAgIGZpZWxkLnRlbXBsYXRlT3B0aW9ucy52YWx1ZVByb3AgPSBpdGVtID0+IGl0ZW07XG4gICAgfVxuXG4gICAgc3dpdGNoIChqc29uU2NoZW1hLnR5cGUpIHtcbiAgICAgIGNhc2UgJ29iamVjdCc6IHtcbiAgICAgICAgZmllbGQuZmllbGRHcm91cCA9IFtdO1xuICAgICAgICBPYmplY3Qua2V5cyhqc29uU2NoZW1hLnByb3BlcnRpZXMpLmZvckVhY2gocCA9PiB7XG4gICAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLl90b0ZpZWxkQ29uZmlnKDxKU09OU2NoZW1hNz4ganNvblNjaGVtYS5wcm9wZXJ0aWVzW3BdLCBwKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShqc29uU2NoZW1hLnJlcXVpcmVkKSAmJiBqc29uU2NoZW1hLnJlcXVpcmVkLmluZGV4T2YocCkgIT09IC0xKSB7XG4gICAgICAgICAgICBjaGlsZC50ZW1wbGF0ZU9wdGlvbnMucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmaWVsZC5maWVsZEdyb3VwLnB1c2goY2hpbGQpO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdhcnJheSc6IHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGpzb25TY2hlbWEuaXRlbXMpKSB7XG4gICAgICAgICAgZmllbGQuZmllbGRBcnJheSA9IHRoaXMuX3RvRmllbGRDb25maWcoanNvblNjaGVtYS5pdGVtcyBhcyBKU09OU2NoZW1hNyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmllbGRbJ19maWVsZEFycmF5J10gPSBbXTtcbiAgICAgICAgICBmaWVsZC5maWVsZEdyb3VwID0gW107XG4gICAgICAgICAganNvblNjaGVtYS5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4gZmllbGRbJ19maWVsZEFycmF5J10ucHVzaCh0aGlzLl90b0ZpZWxkQ29uZmlnKDxKU09OU2NoZW1hNz4gaXRlbSkpKTtcbiAgICAgICAgICBpZiAoanNvblNjaGVtYS5hZGRpdGlvbmFsSXRlbXMpIHtcbiAgICAgICAgICAgIGZpZWxkWydfYWRkaXRpb25hbEZpZWxkQXJyYXknXSA9IHRoaXMuX3RvRmllbGRDb25maWcoPEpTT05TY2hlbWE3PiBqc29uU2NoZW1hLmFkZGl0aW9uYWxJdGVtcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZpZWxkLCAnZmllbGRBcnJheScsIHtcbiAgICAgICAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gZmllbGRbJ19maWVsZEFycmF5J11bZmllbGQuZmllbGRHcm91cC5sZW5ndGhdIHx8IGZpZWxkWydfYWRkaXRpb25hbEZpZWxkQXJyYXknXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaWVsZDtcbiAgfVxufVxuIl19