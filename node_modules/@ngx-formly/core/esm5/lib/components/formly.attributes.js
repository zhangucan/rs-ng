/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, HostListener, ElementRef, Input, Renderer2 } from '@angular/core';
var FormlyAttributes = /** @class */ (function () {
    function FormlyAttributes(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    FormlyAttributes.prototype.onFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.field.focus = true;
        if (this.to.focus) {
            this.to.focus(this.field, $event);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FormlyAttributes.prototype.onBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.field.focus = false;
        if (this.to.blur) {
            this.to.blur(this.field, $event);
        }
    };
    Object.defineProperty(FormlyAttributes.prototype, "to", {
        get: /**
         * @return {?}
         */
        function () {
            return this.field.templateOptions || {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    FormlyAttributes.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.field) {
            /** @type {?} */
            var fieldChanges = changes.field;
            this.renderer.setAttribute(this.elementRef.nativeElement, 'id', this.field.id);
            if (this.to && this.to.attributes) {
                this.setAttributes(this.to.attributes);
                Object.defineProperty(this.to, 'attributes', {
                    get: function () { return _this.to.__attributes__; },
                    set: function (attributes) { return _this.setAttributes(attributes); },
                    enumerable: true,
                    configurable: true,
                });
            }
            if ((fieldChanges.previousValue || {}).focus !== (fieldChanges.currentValue || {}).focus && this.elementRef.nativeElement.focus) {
                this.elementRef.nativeElement[this.field.focus ? 'focus' : 'blur']();
            }
        }
    };
    /**
     * @param {?} attributes
     * @return {?}
     */
    FormlyAttributes.prototype.setAttributes = /**
     * @param {?} attributes
     * @return {?}
     */
    function (attributes) {
        var _this = this;
        if (this.to.__attributes__ && this.to.__attributes__ !== attributes) {
            Object.keys(this.to.__attributes__).forEach(function (name) { return _this.renderer.removeAttribute(_this.elementRef.nativeElement, name); });
        }
        this.to.__attributes__ = attributes;
        Object.keys(attributes).forEach(function (name) { return _this.renderer.setAttribute(_this.elementRef.nativeElement, name, (/** @type {?} */ (attributes[name]))); });
    };
    FormlyAttributes.decorators = [
        { type: Directive, args: [{
                    selector: '[formlyAttributes]',
                    host: {
                        '[attr.name]': 'field.name',
                        '[attr.placeholder]': 'to.placeholder',
                        '[attr.tabindex]': 'to.tabindex || 0',
                        '[attr.readonly]': 'to.readonly',
                        '[attr.step]': 'to.step',
                        '(keyup)': 'to.keyup && to.keyup(field, $event)',
                        '(keydown)': 'to.keydown && to.keydown(field, $event)',
                        '(click)': 'to.click && to.click(field, $event)',
                        '(change)': 'to.change && to.change(field, $event)',
                        '(keypress)': 'to.keypress && to.keypress(field, $event)',
                    },
                },] }
    ];
    /** @nocollapse */
    FormlyAttributes.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    FormlyAttributes.propDecorators = {
        field: [{ type: Input, args: ['formlyAttributes',] }],
        onFocus: [{ type: HostListener, args: ['focus', ['$event'],] }],
        onBlur: [{ type: HostListener, args: ['blur', ['$event'],] }]
    };
    return FormlyAttributes;
}());
export { FormlyAttributes };
if (false) {
    /** @type {?} */
    FormlyAttributes.prototype.field;
    /** @type {?} */
    FormlyAttributes.prototype.renderer;
    /** @type {?} */
    FormlyAttributes.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LmF0dHJpYnV0ZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWZvcm1seS9jb3JlLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZm9ybWx5LmF0dHJpYnV0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQTRCLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdoSDtJQXFDRSwwQkFDVSxRQUFtQixFQUNuQixVQUFzQjtRQUR0QixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLGVBQVUsR0FBVixVQUFVLENBQVk7SUFDN0IsQ0FBQzs7Ozs7SUFyQitCLGtDQUFPOzs7O0lBQTFDLFVBQTJDLE1BQU07UUFDL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUU7WUFDakIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7Ozs7O0lBRWlDLGlDQUFNOzs7O0lBQXhDLFVBQXlDLE1BQU07UUFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUU7WUFDaEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNsQztJQUNILENBQUM7SUFFRCxzQkFBSSxnQ0FBRTs7OztRQUFOO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsSUFBSSxFQUFFLENBQUM7UUFDMUMsQ0FBQzs7O09BQUE7Ozs7O0lBT0Qsc0NBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQWxDLGlCQW1CQztR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QUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQzt5QkFPaEMsWUFBWSxTQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQzs7SUErQ2xDLHVCQUFDO0NBQUEsQUF6RUQsSUF5RUM7U0F6RFksZ0JBQWdCOzs7SUFDM0IsaUNBQW9EOztJQXFCbEQsb0NBQTJCOztJQUMzQixzQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgRWxlbWVudFJlZiwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtbHlGaWVsZENvbmZpZywgRm9ybWx5VGVtcGxhdGVPcHRpb25zIH0gZnJvbSAnLi9mb3JtbHkuZmllbGQuY29uZmlnJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2Zvcm1seUF0dHJpYnV0ZXNdJyxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5uYW1lXSc6ICdmaWVsZC5uYW1lJyxcbiAgICAnW2F0dHIucGxhY2Vob2xkZXJdJzogJ3RvLnBsYWNlaG9sZGVyJyxcbiAgICAnW2F0dHIudGFiaW5kZXhdJzogJ3RvLnRhYmluZGV4IHx8IDAnLFxuICAgICdbYXR0ci5yZWFkb25seV0nOiAndG8ucmVhZG9ubHknLFxuICAgICdbYXR0ci5zdGVwXSc6ICd0by5zdGVwJyxcblxuICAgICcoa2V5dXApJzogJ3RvLmtleXVwICYmIHRvLmtleXVwKGZpZWxkLCAkZXZlbnQpJyxcbiAgICAnKGtleWRvd24pJzogJ3RvLmtleWRvd24gJiYgdG8ua2V5ZG93bihmaWVsZCwgJGV2ZW50KScsXG4gICAgJyhjbGljayknOiAndG8uY2xpY2sgJiYgdG8uY2xpY2soZmllbGQsICRldmVudCknLFxuICAgICcoY2hhbmdlKSc6ICd0by5jaGFuZ2UgJiYgdG8uY2hhbmdlKGZpZWxkLCAkZXZlbnQpJyxcbiAgICAnKGtleXByZXNzKSc6ICd0by5rZXlwcmVzcyAmJiB0by5rZXlwcmVzcyhmaWVsZCwgJGV2ZW50KScsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seUF0dHJpYnV0ZXMgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBASW5wdXQoJ2Zvcm1seUF0dHJpYnV0ZXMnKSBmaWVsZDogRm9ybWx5RmllbGRDb25maWc7XG5cbiAgQEhvc3RMaXN0ZW5lcignZm9jdXMnLCBbJyRldmVudCddKSBvbkZvY3VzKCRldmVudCkge1xuICAgIHRoaXMuZmllbGQuZm9jdXMgPSB0cnVlO1xuICAgIGlmICh0aGlzLnRvLmZvY3VzKSB7XG4gICAgICB0aGlzLnRvLmZvY3VzKHRoaXMuZmllbGQsICRldmVudCk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignYmx1cicsIFsnJGV2ZW50J10pIG9uQmx1cigkZXZlbnQpIHtcbiAgICB0aGlzLmZpZWxkLmZvY3VzID0gZmFsc2U7XG4gICAgaWYgKHRoaXMudG8uYmx1cikge1xuICAgICAgdGhpcy50by5ibHVyKHRoaXMuZmllbGQsICRldmVudCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHRvKCk6IEZvcm1seVRlbXBsYXRlT3B0aW9ucyB7XG4gICAgcmV0dXJuIHRoaXMuZmllbGQudGVtcGxhdGVPcHRpb25zIHx8IHt9O1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5maWVsZCkge1xuICAgICAgY29uc3QgZmllbGRDaGFuZ2VzID0gY2hhbmdlcy5maWVsZDtcblxuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdpZCcsIHRoaXMuZmllbGQuaWQpO1xuICAgICAgaWYgKHRoaXMudG8gJiYgdGhpcy50by5hdHRyaWJ1dGVzKSB7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh0aGlzLnRvLmF0dHJpYnV0ZXMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy50bywgJ2F0dHJpYnV0ZXMnLCB7XG4gICAgICAgICAgZ2V0OiAoKSA9PiB0aGlzLnRvLl9fYXR0cmlidXRlc19fLFxuICAgICAgICAgIHNldDogYXR0cmlidXRlcyA9PiB0aGlzLnNldEF0dHJpYnV0ZXMoYXR0cmlidXRlcyksXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGZpZWxkQ2hhbmdlcy5wcmV2aW91c1ZhbHVlIHx8IHt9KS5mb2N1cyAhPT0gKGZpZWxkQ2hhbmdlcy5jdXJyZW50VmFsdWUgfHwge30pLmZvY3VzICYmIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmZvY3VzKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50W3RoaXMuZmllbGQuZm9jdXMgPyAnZm9jdXMnIDogJ2JsdXInXSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0QXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gICAgaWYgKHRoaXMudG8uX19hdHRyaWJ1dGVzX18gJiYgdGhpcy50by5fX2F0dHJpYnV0ZXNfXyAhPT0gYXR0cmlidXRlcykge1xuICAgICAgT2JqZWN0LmtleXModGhpcy50by5fX2F0dHJpYnV0ZXNfXykuZm9yRWFjaChuYW1lID0+IHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBuYW1lKSk7XG4gICAgfVxuXG4gICAgdGhpcy50by5fX2F0dHJpYnV0ZXNfXyA9IGF0dHJpYnV0ZXM7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChuYW1lID0+IHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKFxuICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIG5hbWUsIGF0dHJpYnV0ZXNbbmFtZV0gYXMgc3RyaW5nLFxuICAgICkpO1xuICB9XG59XG4iXX0=