/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewContainerRef, ViewChild, Attribute, ComponentFactoryResolver, } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyConfig } from '../services/formly.config';
import { defineHiddenProp } from '../utils';
var FormlyField = /** @class */ (function () {
    function FormlyField(formlyConfig, componentFactoryResolver, 
    // tslint:disable-next-line
    hideDeprecation) {
        this.formlyConfig = formlyConfig;
        this.componentFactoryResolver = componentFactoryResolver;
        this.className = '';
        this.warnDeprecation = false;
        this.modelChange = new EventEmitter();
        this.warnDeprecation = hideDeprecation === null;
    }
    Object.defineProperty(FormlyField.prototype, "model", {
        set: /**
         * @param {?} m
         * @return {?}
         */
        function (m) {
            this.warnDeprecation && console.warn("NgxFormly: passing 'model' input to '" + this.constructor.name + "' component is not required anymore, you may remove it!");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyField.prototype, "form", {
        set: /**
         * @param {?} form
         * @return {?}
         */
        function (form) {
            this.warnDeprecation && console.warn("NgxFormly: passing 'form' input to '" + this.constructor.name + "' component is not required anymore, you may remove it!");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyField.prototype, "options", {
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this.warnDeprecation && console.warn("NgxFormly: passing 'options' input to '" + this.constructor.name + "' component is not required anymore, you may remove it!");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyField.prototype, "componentRefs", {
        get: /**
         * @return {?}
         */
        function () {
            if (!((/** @type {?} */ (this.field)))._componentRefs) {
                defineHiddenProp(this.field, '_componentRefs', []);
            }
            return ((/** @type {?} */ (this.field)))._componentRefs;
        },
        set: /**
         * @param {?} refs
         * @return {?}
         */
        function (refs) {
            ((/** @type {?} */ (this.field)))._componentRefs = refs;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormlyField.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.triggerHook('afterContentInit');
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        this.triggerHook('afterContentChecked');
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.triggerHook('afterViewInit');
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.triggerHook('afterViewChecked');
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.triggerHook('doCheck');
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.triggerHook('onInit');
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FormlyField.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.field) {
            this.renderField(this.field, this.containerRef);
        }
        this.triggerHook('onChanges', changes);
        this.componentRefs.forEach(function (ref) {
            Object.assign(ref.instance, { field: _this.field });
        });
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.triggerHook('onDestroy');
        this.componentRefs.forEach(function (componentRef) { return componentRef.destroy(); });
        this.componentRefs = [];
    };
    /**
     * @param {?} field
     * @param {?} containerRef
     * @return {?}
     */
    FormlyField.prototype.renderField = /**
     * @param {?} field
     * @param {?} containerRef
     * @return {?}
     */
    function (field, containerRef) {
        var _this = this;
        this.componentRefs.forEach(function (componentRef) { return componentRef.destroy(); });
        this.componentRefs = [];
        /** @type {?} */
        var wrappers = (/** @type {?} */ ((field.wrappers || []).map(function (wrapperName) { return _this.formlyConfig.getWrapper(wrapperName); })));
        tslib_1.__spread(wrappers, [tslib_1.__assign({}, this.formlyConfig.getType(field.type), { componentFactory: ((/** @type {?} */ (field)))._componentFactory })]).forEach(function (_a) {
            var component = _a.component, componentRef = _a.componentRef;
            /** @type {?} */
            var ref = componentRef ? componentRef : containerRef.createComponent(_this.componentFactoryResolver.resolveComponentFactory(component));
            Object.assign(ref.instance, { field: field });
            _this.componentRefs.push(ref);
            containerRef = ref.instance.fieldComponent;
        });
    };
    /**
     * @param {?} name
     * @param {?=} changes
     * @return {?}
     */
    FormlyField.prototype.triggerHook = /**
     * @param {?} name
     * @param {?=} changes
     * @return {?}
     */
    function (name, changes) {
        if (this.field.hooks && this.field.hooks[name]) {
            if (!changes || changes.field) {
                this.field.hooks[name](this.field);
            }
        }
        if (this.field.lifecycle && this.field.lifecycle[name]) {
            this.field.lifecycle[name](this.field.form, this.field, this.field.model, this.field.options);
        }
    };
    FormlyField.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field',
                    template: "<ng-template #container></ng-template>",
                    host: {
                        '[style.display]': 'field.hide ? "none":""',
                        '[class]': 'field.className? field.className : className',
                    }
                }] }
    ];
    /** @nocollapse */
    FormlyField.ctorParameters = function () { return [
        { type: FormlyConfig },
        { type: ComponentFactoryResolver },
        { type: undefined, decorators: [{ type: Attribute, args: ['hide-deprecation',] }] }
    ]; };
    FormlyField.propDecorators = {
        field: [{ type: Input }],
        className: [{ type: Input, args: ['class',] }],
        model: [{ type: Input }],
        form: [{ type: Input }],
        options: [{ type: Input }],
        modelChange: [{ type: Output }],
        containerRef: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }]
    };
    return FormlyField;
}());
export { FormlyField };
if (false) {
    /** @type {?} */
    FormlyField.prototype.field;
    /** @type {?} */
    FormlyField.prototype.className;
    /** @type {?} */
    FormlyField.prototype.warnDeprecation;
    /** @type {?} */
    FormlyField.prototype.modelChange;
    /** @type {?} */
    FormlyField.prototype.containerRef;
    /** @type {?} */
    FormlyField.prototype.formlyConfig;
    /** @type {?} */
    FormlyField.prototype.componentFactoryResolver;
}
//# sourceMappingURL=data:application/json;base64,