/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { FormGroup, FormArray } from '@angular/forms';
import { isObject, isNullOrUndefined, isFunction, FORMLY_VALIDATORS, getFieldValue, getKeyPath, removeFieldControl, defineHiddenProp, } from '../../utils';
import { evalExpression, evalStringExpression, evalExpressionValueSetter } from './utils';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
/**
 * \@experimental
 */
var /**
 * \@experimental
 */
FieldExpressionExtension = /** @class */ (function () {
    function FieldExpressionExtension() {
    }
    /**
     * @param {?} field
     * @return {?}
     */
    FieldExpressionExtension.prototype.prePopulate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var _this = this;
        if (field.parent || field.options._checkField) {
            return;
        }
        field.options._checkField = function (f, ignoreCache) { return _this._checkField(f, ignoreCache); };
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FieldExpressionExtension.prototype.onPopulate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (!field.parent || field._expressionProperties) {
            return;
        }
        // cache built expression
        defineHiddenProp(field, '_expressionProperties', {});
        if (field.expressionProperties) {
            var _loop_1 = function (key) {
                /** @type {?} */
                var expressionProperty = field.expressionProperties[key];
                /** @type {?} */
                var expressionValueSetter = evalExpressionValueSetter("field." + key, ['expressionValue', 'model', 'field']);
                if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {
                    field._expressionProperties[key] = {
                        expression: this_1._evalExpression(expressionProperty, field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')
                            ? function () { return field.parent.templateOptions.disabled; }
                            : undefined),
                        expressionValueSetter: expressionValueSetter,
                    };
                    if (key === 'templateOptions.disabled') {
                        Object.defineProperty(field._expressionProperties[key], 'expressionValue', {
                            get: function () { return field.templateOptions.disabled; },
                            set: function () { },
                            enumerable: true,
                            configurable: true,
                        });
                    }
                }
                else if (expressionProperty instanceof Observable) {
                    /** @type {?} */
                    var subscription_1 = ((/** @type {?} */ (expressionProperty))).pipe(tap(function (v) { return evalExpression(expressionValueSetter, { field: field }, [v, field.model, field]); })).subscribe();
                    /** @type {?} */
                    var onDestroy_1 = field.hooks.onDestroy;
                    field.hooks.onDestroy = function (field) {
                        onDestroy_1 && onDestroy_1(field);
                        subscription_1.unsubscribe();
                    };
                }
            };
            var this_1 = this;
            for (var key in field.expressionProperties) {
                _loop_1(key);
            }
        }
        if (field.hideExpression || field.parent.hideExpression) {
            // delete hide value in order to force re-evaluate it in FormlyFormExpression.
            delete field.hide;
            field.hideExpression = this._evalExpression(field.hideExpression, field.parent && field.parent.hideExpression ? function () { return field.parent.hide; } : undefined);
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FieldExpressionExtension.prototype.postPopulate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field.parent) {
            return;
        }
        field.options._checkField(field, true);
    };
    /**
     * @param {?} expression
     * @param {?=} parentExpression
     * @return {?}
     */
    FieldExpressionExtension.prototype._evalExpression = /**
     * @param {?} expression
     * @param {?=} parentExpression
     * @return {?}
     */
    function (expression, parentExpression) {
        expression = expression || (function () { return false; });
        if (typeof expression === 'string') {
            expression = evalStringExpression(expression, ['model', 'formState']);
        }
        return parentExpression
            ? function (model, formState) { return parentExpression() || expression(model, formState); }
            : expression;
    };
    /**
     * @param {?} field
     * @param {?=} ignoreCache
     * @return {?}
     */
    FieldExpressionExtension.prototype._checkField = /**
     * @param {?} field
     * @param {?=} ignoreCache
     * @return {?}
     */
    function (field, ignoreCache) {
        var _this = this;
        if (ignoreCache === void 0) { ignoreCache = false; }
        /** @type {?} */
        var markForCheck = false;
        field.fieldGroup.forEach(function (f) {
            _this.checkFieldExpressionChange(f, ignoreCache) && (markForCheck = true);
            _this.checkFieldVisibilityChange(f, ignoreCache) && (markForCheck = true);
            if (f.fieldGroup && f.fieldGroup.length > 0) {
                _this._checkField(f, ignoreCache);
            }
        });
        if (markForCheck && field.options && field.options._markForCheck) {
            field.options._markForCheck(field);
        }
    };
    /**
     * @param {?} field
     * @param {?} ignoreCache
     * @return {?}
     */
    FieldExpressionExtension.prototype.checkFieldExpressionChange = /**
     * @param {?} field
     * @param {?} ignoreCache
     * @return {?}
     */
    function (field, ignoreCache) {
        if (!field || !field._expressionProperties) {
            return false;
        }
        /** @type {?} */
        var markForCheck = false;
        /** @type {?} */
        var expressionProperties = field._expressionProperties;
        /** @type {?} */
        var validators = FORMLY_VALIDATORS.map(function (v) { return "templateOptions." + v; });
        for (var key in expressionProperties) {
            /** @type {?} */
            var expressionValue = evalExpression(expressionProperties[key].expression, { field: field }, [field.model, field.options.formState]);
            if (key === 'templateOptions.disabled') {
                expressionValue = !!expressionValue;
            }
            if (ignoreCache || (expressionProperties[key].expressionValue !== expressionValue
                && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue)))) {
                markForCheck = true;
                expressionProperties[key].expressionValue = expressionValue;
                evalExpression(expressionProperties[key].expressionValueSetter, { field: field }, [expressionValue, field.model, field]);
                if (key.indexOf('model.') === 0) {
                    /** @type {?} */
                    var path = key.replace(/^model\./, '');
                    /** @type {?} */
                    var control = field.key && key === path ? field.formControl : field.parent.formControl.get(path);
                    if (control
                        && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))
                        && control.value !== expressionValue) {
                        control.patchValue(expressionValue);
                    }
                }
                if (validators.indexOf(key) !== -1 && field.formControl) {
                    field.formControl.updateValueAndValidity({ emitEvent: false });
                }
            }
        }
        return markForCheck;
    };
    /**
     * @param {?} field
     * @param {?} ignoreCache
     * @return {?}
     */
    FieldExpressionExtension.prototype.checkFieldVisibilityChange = /**
     * @param {?} field
     * @param {?} ignoreCache
     * @return {?}
     */
    function (field, ignoreCache) {
        if (!field || isNullOrUndefined(field.hideExpression)) {
            return false;
        }
        /** @type {?} */
        var hideExpressionResult = !!evalExpression(field.hideExpression, { field: field }, [field.model, field.options.formState]);
        /** @type {?} */
        var markForCheck = false;
        if (hideExpressionResult !== field.hide || ignoreCache) {
            markForCheck = true;
            // toggle hide
            field.hide = hideExpressionResult;
            field.templateOptions.hidden = hideExpressionResult;
            if (field.formControl && field.key) {
                /** @type {?} */
                var parent_1 = this.fieldParentFormControl(field);
                if (parent_1) {
                    /** @type {?} */
                    var control = parent_1.get("" + this.fieldKey(field));
                    if (hideExpressionResult === true && control) {
                        removeFieldControl(parent_1, this.fieldKey(field));
                    }
                    else if (hideExpressionResult === false && !control) {
                        this.addFieldControl(parent_1, field);
                    }
                }
            }
            if (field.options.fieldChanges) {
                field.options.fieldChanges.next((/** @type {?} */ ({ field: field, type: 'hidden', value: hideExpressionResult })));
            }
        }
        return markForCheck;
    };
    /**
     * @param {?} parent
     * @param {?} field
     * @return {?}
     */
    FieldExpressionExtension.prototype.addFieldControl = /**
     * @param {?} parent
     * @param {?} field
     * @return {?}
     */
    function (parent, field) {
        /** @type {?} */
        var fieldModel = getFieldValue(field);
        if (!(isNullOrUndefined(field.formControl.value) && isNullOrUndefined(fieldModel))
            && field.formControl.value !== fieldModel) {
            field.formControl.patchValue(fieldModel, { emitEvent: false });
        }
        if (parent instanceof FormArray) {
            parent.push(field.formControl);
        }
        else if (parent instanceof FormGroup) {
            parent.addControl("" + this.fieldKey(field), field.formControl);
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FieldExpressionExtension.prototype.fieldParentFormControl = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var paths = getKeyPath(field);
        paths.pop(); // remove last path
        return (/** @type {?} */ ((paths.length > 0 ? field.parent.formControl.get(paths) : field.parent.formControl)));
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FieldExpressionExtension.prototype.fieldKey = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return getKeyPath(field).pop();
    };
    return FieldExpressionExtension;
}());
/**
 * \@experimental
 */
export { FieldExpressionExtension };
//# sourceMappingURL=data:application/json;base64,